// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: recordfriend.proto

#include "recordfriend.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace record {
PROTOBUF_CONSTEXPR RecordModuleFriend::RecordModuleFriend(
    ::_pbi::ConstantInitialized)
  : osendgift_(nullptr)
  , llrecvgiftuid_(uint64_t{0u})
  , llexpiredgiftuid_(uint64_t{0u}){}
struct RecordModuleFriendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordModuleFriendDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordModuleFriendDefaultTypeInternal() {}
  union {
    RecordModuleFriend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordModuleFriendDefaultTypeInternal _RecordModuleFriend_default_instance_;
PROTOBUF_CONSTEXPR RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse::RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct RecordSendGiftVersion_MapSendGiftsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordSendGiftVersion_MapSendGiftsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordSendGiftVersion_MapSendGiftsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordSendGiftVersion_MapSendGiftsEntry_DoNotUseDefaultTypeInternal _RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR RecordSendGiftVersion::RecordSendGiftVersion(
    ::_pbi::ConstantInitialized)
  : mapsendgifts_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , uiversionid_(0u){}
struct RecordSendGiftVersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordSendGiftVersionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordSendGiftVersionDefaultTypeInternal() {}
  union {
    RecordSendGiftVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordSendGiftVersionDefaultTypeInternal _RecordSendGiftVersion_default_instance_;
PROTOBUF_CONSTEXPR RecordSendGift::RecordSendGift(
    ::_pbi::ConstantInitialized)
  : llrecver_(uint64_t{0u})
  , llitemcount_(uint64_t{0u})
  , uiitemid_(0u)
  , bbind_(false){}
struct RecordSendGiftDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordSendGiftDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordSendGiftDefaultTypeInternal() {}
  union {
    RecordSendGift _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordSendGiftDefaultTypeInternal _RecordSendGift_default_instance_;
PROTOBUF_CONSTEXPR RecordFriendData::RecordFriendData(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct RecordFriendDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordFriendDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordFriendDataDefaultTypeInternal() {}
  union {
    RecordFriendData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordFriendDataDefaultTypeInternal _RecordFriendData_default_instance_;
PROTOBUF_CONSTEXPR RecordFriendSvrBrief_MapVersionsEntry_DoNotUse::RecordFriendSvrBrief_MapVersionsEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct RecordFriendSvrBrief_MapVersionsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordFriendSvrBrief_MapVersionsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordFriendSvrBrief_MapVersionsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RecordFriendSvrBrief_MapVersionsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordFriendSvrBrief_MapVersionsEntry_DoNotUseDefaultTypeInternal _RecordFriendSvrBrief_MapVersionsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR RecordFriendSvrBrief::RecordFriendSvrBrief(
    ::_pbi::ConstantInitialized)
  : mapversions_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , strrolename_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , uisex_(0u)
  , uilevel_(0u)
  , uiofflinetime_(0u)
  , uisendgiftversionid_(0u)
  , bfuncopen_(false)
  , uionlinetime_(0u){}
struct RecordFriendSvrBriefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordFriendSvrBriefDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordFriendSvrBriefDefaultTypeInternal() {}
  union {
    RecordFriendSvrBrief _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordFriendSvrBriefDefaultTypeInternal _RecordFriendSvrBrief_default_instance_;
PROTOBUF_CONSTEXPR RecordFriendList::RecordFriendList(
    ::_pbi::ConstantInitialized)
  : ofriends_(nullptr)
  , uifriendlistmax_(0u){}
struct RecordFriendListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordFriendListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordFriendListDefaultTypeInternal() {}
  union {
    RecordFriendList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordFriendListDefaultTypeInternal _RecordFriendList_default_instance_;
PROTOBUF_CONSTEXPR RecordRelationList::RecordRelationList(
    ::_pbi::ConstantInitialized)
  : vecrelations_(){}
struct RecordRelationListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordRelationListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordRelationListDefaultTypeInternal() {}
  union {
    RecordRelationList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordRelationListDefaultTypeInternal _RecordRelationList_default_instance_;
PROTOBUF_CONSTEXPR RecordFriendRelation::RecordFriendRelation(
    ::_pbi::ConstantInitialized)
  : llroleid_(uint64_t{0u})
  , uifriendship_(0u)
  , uidailychat_(0u){}
struct RecordFriendRelationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordFriendRelationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordFriendRelationDefaultTypeInternal() {}
  union {
    RecordFriendRelation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordFriendRelationDefaultTypeInternal _RecordFriendRelation_default_instance_;
PROTOBUF_CONSTEXPR RecordRequestList::RecordRequestList(
    ::_pbi::ConstantInitialized)
  : vecrequestlist_()
  , _vecrequestlist_cached_byte_size_(0){}
struct RecordRequestListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordRequestListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordRequestListDefaultTypeInternal() {}
  union {
    RecordRequestList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordRequestListDefaultTypeInternal _RecordRequestList_default_instance_;
PROTOBUF_CONSTEXPR RecordBlockList::RecordBlockList(
    ::_pbi::ConstantInitialized)
  : vecblocklist_()
  , _vecblocklist_cached_byte_size_(0){}
struct RecordBlockListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordBlockListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordBlockListDefaultTypeInternal() {}
  union {
    RecordBlockList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordBlockListDefaultTypeInternal _RecordBlockList_default_instance_;
PROTOBUF_CONSTEXPR RecordRecommendFilter::RecordRecommendFilter(
    ::_pbi::ConstantInitialized)
  : bonlycity_(false)
  , uisex_(0u)
  , uibitlabel_(0u){}
struct RecordRecommendFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordRecommendFilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordRecommendFilterDefaultTypeInternal() {}
  union {
    RecordRecommendFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordRecommendFilterDefaultTypeInternal _RecordRecommendFilter_default_instance_;
PROTOBUF_CONSTEXPR RecordRecommendLabel::RecordRecommendLabel(
    ::_pbi::ConstantInitialized)
  : uicity_(0u)
  , uibitlabel_(0u)
  , bavailable_(false){}
struct RecordRecommendLabelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordRecommendLabelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordRecommendLabelDefaultTypeInternal() {}
  union {
    RecordRecommendLabel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordRecommendLabelDefaultTypeInternal _RecordRecommendLabel_default_instance_;
PROTOBUF_CONSTEXPR RecordSendGiftTimes::RecordSendGiftTimes(
    ::_pbi::ConstantInitialized)
  : oallsendtimes_(nullptr)
  , uidailycount_(0u){}
struct RecordSendGiftTimesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordSendGiftTimesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordSendGiftTimesDefaultTypeInternal() {}
  union {
    RecordSendGiftTimes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordSendGiftTimesDefaultTypeInternal _RecordSendGiftTimes_default_instance_;
PROTOBUF_CONSTEXPR RecordAllSendTimes::RecordAllSendTimes(
    ::_pbi::ConstantInitialized)
  : vecsendtimes_(){}
struct RecordAllSendTimesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordAllSendTimesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordAllSendTimesDefaultTypeInternal() {}
  union {
    RecordAllSendTimes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordAllSendTimesDefaultTypeInternal _RecordAllSendTimes_default_instance_;
PROTOBUF_CONSTEXPR RecordOneSendTimes::RecordOneSendTimes(
    ::_pbi::ConstantInitialized)
  : llroleid_(uint64_t{0u})
  , uitimes_(0u){}
struct RecordOneSendTimesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordOneSendTimesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordOneSendTimesDefaultTypeInternal() {}
  union {
    RecordOneSendTimes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordOneSendTimesDefaultTypeInternal _RecordOneSendTimes_default_instance_;
}  // namespace record
static ::_pb::Metadata file_level_metadata_recordfriend_2eproto[17];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_recordfriend_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_recordfriend_2eproto = nullptr;

const uint32_t TableStruct_recordfriend_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::record::RecordModuleFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::record::RecordModuleFriend, llrecvgiftuid_),
  PROTOBUF_FIELD_OFFSET(::record::RecordModuleFriend, llexpiredgiftuid_),
  PROTOBUF_FIELD_OFFSET(::record::RecordModuleFriend, osendgift_),
  PROTOBUF_FIELD_OFFSET(::record::RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::record::RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::record::RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::record::RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::record::RecordSendGiftVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::record::RecordSendGiftVersion, uiversionid_),
  PROTOBUF_FIELD_OFFSET(::record::RecordSendGiftVersion, mapsendgifts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::record::RecordSendGift, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::record::RecordSendGift, llrecver_),
  PROTOBUF_FIELD_OFFSET(::record::RecordSendGift, uiitemid_),
  PROTOBUF_FIELD_OFFSET(::record::RecordSendGift, llitemcount_),
  PROTOBUF_FIELD_OFFSET(::record::RecordSendGift, bbind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::record::RecordFriendData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::record::RecordFriendData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::record::RecordFriendData, oData_),
  PROTOBUF_FIELD_OFFSET(::record::RecordFriendSvrBrief_MapVersionsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::record::RecordFriendSvrBrief_MapVersionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::record::RecordFriendSvrBrief_MapVersionsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::record::RecordFriendSvrBrief_MapVersionsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::record::RecordFriendSvrBrief, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::record::RecordFriendSvrBrief, uisex_),
  PROTOBUF_FIELD_OFFSET(::record::RecordFriendSvrBrief, uilevel_),
  PROTOBUF_FIELD_OFFSET(::record::RecordFriendSvrBrief, strrolename_),
  PROTOBUF_FIELD_OFFSET(::record::RecordFriendSvrBrief, uiofflinetime_),
  PROTOBUF_FIELD_OFFSET(::record::RecordFriendSvrBrief, mapversions_),
  PROTOBUF_FIELD_OFFSET(::record::RecordFriendSvrBrief, uisendgiftversionid_),
  PROTOBUF_FIELD_OFFSET(::record::RecordFriendSvrBrief, bfuncopen_),
  PROTOBUF_FIELD_OFFSET(::record::RecordFriendSvrBrief, uionlinetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::record::RecordFriendList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::record::RecordFriendList, uifriendlistmax_),
  PROTOBUF_FIELD_OFFSET(::record::RecordFriendList, ofriends_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::record::RecordRelationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::record::RecordRelationList, vecrelations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::record::RecordFriendRelation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::record::RecordFriendRelation, llroleid_),
  PROTOBUF_FIELD_OFFSET(::record::RecordFriendRelation, uifriendship_),
  PROTOBUF_FIELD_OFFSET(::record::RecordFriendRelation, uidailychat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::record::RecordRequestList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::record::RecordRequestList, vecrequestlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::record::RecordBlockList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::record::RecordBlockList, vecblocklist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::record::RecordRecommendFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::record::RecordRecommendFilter, bonlycity_),
  PROTOBUF_FIELD_OFFSET(::record::RecordRecommendFilter, uisex_),
  PROTOBUF_FIELD_OFFSET(::record::RecordRecommendFilter, uibitlabel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::record::RecordRecommendLabel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::record::RecordRecommendLabel, uicity_),
  PROTOBUF_FIELD_OFFSET(::record::RecordRecommendLabel, uibitlabel_),
  PROTOBUF_FIELD_OFFSET(::record::RecordRecommendLabel, bavailable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::record::RecordSendGiftTimes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::record::RecordSendGiftTimes, uidailycount_),
  PROTOBUF_FIELD_OFFSET(::record::RecordSendGiftTimes, oallsendtimes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::record::RecordAllSendTimes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::record::RecordAllSendTimes, vecsendtimes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::record::RecordOneSendTimes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::record::RecordOneSendTimes, llroleid_),
  PROTOBUF_FIELD_OFFSET(::record::RecordOneSendTimes, uitimes_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::record::RecordModuleFriend)},
  { 9, 17, -1, sizeof(::record::RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse)},
  { 19, -1, -1, sizeof(::record::RecordSendGiftVersion)},
  { 27, -1, -1, sizeof(::record::RecordSendGift)},
  { 37, -1, -1, sizeof(::record::RecordFriendData)},
  { 51, 59, -1, sizeof(::record::RecordFriendSvrBrief_MapVersionsEntry_DoNotUse)},
  { 61, -1, -1, sizeof(::record::RecordFriendSvrBrief)},
  { 75, -1, -1, sizeof(::record::RecordFriendList)},
  { 83, -1, -1, sizeof(::record::RecordRelationList)},
  { 90, -1, -1, sizeof(::record::RecordFriendRelation)},
  { 99, -1, -1, sizeof(::record::RecordRequestList)},
  { 106, -1, -1, sizeof(::record::RecordBlockList)},
  { 113, -1, -1, sizeof(::record::RecordRecommendFilter)},
  { 122, -1, -1, sizeof(::record::RecordRecommendLabel)},
  { 131, -1, -1, sizeof(::record::RecordSendGiftTimes)},
  { 139, -1, -1, sizeof(::record::RecordAllSendTimes)},
  { 146, -1, -1, sizeof(::record::RecordOneSendTimes)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::record::_RecordModuleFriend_default_instance_._instance,
  &::record::_RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse_default_instance_._instance,
  &::record::_RecordSendGiftVersion_default_instance_._instance,
  &::record::_RecordSendGift_default_instance_._instance,
  &::record::_RecordFriendData_default_instance_._instance,
  &::record::_RecordFriendSvrBrief_MapVersionsEntry_DoNotUse_default_instance_._instance,
  &::record::_RecordFriendSvrBrief_default_instance_._instance,
  &::record::_RecordFriendList_default_instance_._instance,
  &::record::_RecordRelationList_default_instance_._instance,
  &::record::_RecordFriendRelation_default_instance_._instance,
  &::record::_RecordRequestList_default_instance_._instance,
  &::record::_RecordBlockList_default_instance_._instance,
  &::record::_RecordRecommendFilter_default_instance_._instance,
  &::record::_RecordRecommendLabel_default_instance_._instance,
  &::record::_RecordSendGiftTimes_default_instance_._instance,
  &::record::_RecordAllSendTimes_default_instance_._instance,
  &::record::_RecordOneSendTimes_default_instance_._instance,
};

const char descriptor_table_protodef_recordfriend_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022recordfriend.proto\022\006record\"w\n\022RecordMo"
  "duleFriend\022\025\n\rllRecvGiftUid\030\001 \001(\004\022\030\n\020llE"
  "xpiredGiftUid\030\002 \001(\004\0220\n\toSendGift\030\003 \001(\0132\035"
  ".record.RecordSendGiftVersion\"\300\001\n\025Record"
  "SendGiftVersion\022\023\n\013uiVersionId\030\001 \001(\r\022E\n\014"
  "mapSendGifts\030\002 \003(\0132/.record.RecordSendGi"
  "ftVersion.MapSendGiftsEntry\032K\n\021MapSendGi"
  "ftsEntry\022\013\n\003key\030\001 \001(\r\022%\n\005value\030\002 \001(\0132\026.r"
  "ecord.RecordSendGift:\0028\001\"X\n\016RecordSendGi"
  "ft\022\020\n\010llRecver\030\001 \001(\004\022\020\n\010uiItemId\030\002 \001(\r\022\023"
  "\n\013llItemCount\030\003 \001(\004\022\r\n\005bBind\030\004 \001(\010\"\350\002\n\020R"
  "ecordFriendData\022.\n\006oBrief\030\001 \001(\0132\034.record"
  ".RecordFriendSvrBriefH\000\022,\n\010oFriends\030\002 \001("
  "\0132\030.record.RecordFriendListH\000\022-\n\010oReques"
  "t\030\003 \001(\0132\031.record.RecordRequestListH\000\022)\n\006"
  "oBlock\030\004 \001(\0132\027.record.RecordBlockListH\000\022"
  "0\n\007oFilter\030\005 \001(\0132\035.record.RecordRecommen"
  "dFilterH\000\022.\n\006oLabel\030\006 \001(\0132\034.record.Recor"
  "dRecommendLabelH\000\0221\n\noGiftTimes\030\007 \001(\0132\033."
  "record.RecordSendGiftTimesH\000B\007\n\005oData\"\240\002"
  "\n\024RecordFriendSvrBrief\022\r\n\005uiSex\030\001 \001(\r\022\017\n"
  "\007uiLevel\030\002 \001(\r\022\023\n\013strRoleName\030\003 \001(\014\022\025\n\ru"
  "iOfflineTime\030\004 \001(\r\022B\n\013mapVersions\030\005 \003(\0132"
  "-.record.RecordFriendSvrBrief.MapVersion"
  "sEntry\022\033\n\023uiSendGiftVersionId\030\006 \001(\r\022\021\n\tb"
  "FuncOpen\030\007 \001(\010\022\024\n\014uiOnlineTime\030\010 \001(\r\0322\n\020"
  "MapVersionsEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002"
  " \001(\r:\0028\001\"Y\n\020RecordFriendList\022\027\n\017uiFriend"
  "ListMax\030\001 \001(\r\022,\n\010oFriends\030\002 \001(\0132\032.record"
  ".RecordRelationList\"H\n\022RecordRelationLis"
  "t\0222\n\014vecRelations\030\001 \003(\0132\034.record.RecordF"
  "riendRelation\"S\n\024RecordFriendRelation\022\020\n"
  "\010llRoleId\030\001 \001(\004\022\024\n\014uiFriendShip\030\002 \001(\r\022\023\n"
  "\013uiDailyChat\030\003 \001(\r\"+\n\021RecordRequestList\022"
  "\026\n\016vecRequestList\030\001 \003(\004\"\'\n\017RecordBlockLi"
  "st\022\024\n\014vecBlockList\030\001 \003(\004\"M\n\025RecordRecomm"
  "endFilter\022\021\n\tbOnlyCity\030\001 \001(\010\022\r\n\005uiSex\030\002 "
  "\001(\r\022\022\n\nuiBitLabel\030\003 \001(\r\"N\n\024RecordRecomme"
  "ndLabel\022\016\n\006uiCity\030\001 \001(\r\022\022\n\nuiBitLabel\030\002 "
  "\001(\r\022\022\n\nbAvailable\030\003 \001(\010\"^\n\023RecordSendGif"
  "tTimes\022\024\n\014uiDailyCount\030\001 \001(\r\0221\n\roAllSend"
  "Times\030\002 \001(\0132\032.record.RecordAllSendTimes\""
  "F\n\022RecordAllSendTimes\0220\n\014vecSendTimes\030\001 "
  "\003(\0132\032.record.RecordOneSendTimes\"7\n\022Recor"
  "dOneSendTimes\022\020\n\010llRoleId\030\001 \001(\004\022\017\n\007uiTim"
  "es\030\002 \001(\rb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_recordfriend_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_recordfriend_2eproto = {
    false, false, 1816, descriptor_table_protodef_recordfriend_2eproto,
    "recordfriend.proto",
    &descriptor_table_recordfriend_2eproto_once, nullptr, 0, 17,
    schemas, file_default_instances, TableStruct_recordfriend_2eproto::offsets,
    file_level_metadata_recordfriend_2eproto, file_level_enum_descriptors_recordfriend_2eproto,
    file_level_service_descriptors_recordfriend_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_recordfriend_2eproto_getter() {
  return &descriptor_table_recordfriend_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_recordfriend_2eproto(&descriptor_table_recordfriend_2eproto);
namespace record {

// ===================================================================

class RecordModuleFriend::_Internal {
 public:
  static const ::record::RecordSendGiftVersion& osendgift(const RecordModuleFriend* msg);
};

const ::record::RecordSendGiftVersion&
RecordModuleFriend::_Internal::osendgift(const RecordModuleFriend* msg) {
  return *msg->osendgift_;
}
RecordModuleFriend::RecordModuleFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:record.RecordModuleFriend)
}
RecordModuleFriend::RecordModuleFriend(const RecordModuleFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_osendgift()) {
    osendgift_ = new ::record::RecordSendGiftVersion(*from.osendgift_);
  } else {
    osendgift_ = nullptr;
  }
  ::memcpy(&llrecvgiftuid_, &from.llrecvgiftuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&llexpiredgiftuid_) -
    reinterpret_cast<char*>(&llrecvgiftuid_)) + sizeof(llexpiredgiftuid_));
  // @@protoc_insertion_point(copy_constructor:record.RecordModuleFriend)
}

inline void RecordModuleFriend::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&osendgift_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&llexpiredgiftuid_) -
    reinterpret_cast<char*>(&osendgift_)) + sizeof(llexpiredgiftuid_));
}

RecordModuleFriend::~RecordModuleFriend() {
  // @@protoc_insertion_point(destructor:record.RecordModuleFriend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordModuleFriend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete osendgift_;
}

void RecordModuleFriend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordModuleFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:record.RecordModuleFriend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && osendgift_ != nullptr) {
    delete osendgift_;
  }
  osendgift_ = nullptr;
  ::memset(&llrecvgiftuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&llexpiredgiftuid_) -
      reinterpret_cast<char*>(&llrecvgiftuid_)) + sizeof(llexpiredgiftuid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordModuleFriend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 llRecvGiftUid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          llrecvgiftuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 llExpiredGiftUid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          llexpiredgiftuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .record.RecordSendGiftVersion oSendGift = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_osendgift(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordModuleFriend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:record.RecordModuleFriend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 llRecvGiftUid = 1;
  if (this->_internal_llrecvgiftuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_llrecvgiftuid(), target);
  }

  // uint64 llExpiredGiftUid = 2;
  if (this->_internal_llexpiredgiftuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_llexpiredgiftuid(), target);
  }

  // .record.RecordSendGiftVersion oSendGift = 3;
  if (this->_internal_has_osendgift()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::osendgift(this),
        _Internal::osendgift(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:record.RecordModuleFriend)
  return target;
}

size_t RecordModuleFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:record.RecordModuleFriend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .record.RecordSendGiftVersion oSendGift = 3;
  if (this->_internal_has_osendgift()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *osendgift_);
  }

  // uint64 llRecvGiftUid = 1;
  if (this->_internal_llrecvgiftuid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_llrecvgiftuid());
  }

  // uint64 llExpiredGiftUid = 2;
  if (this->_internal_llexpiredgiftuid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_llexpiredgiftuid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordModuleFriend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordModuleFriend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordModuleFriend::GetClassData() const { return &_class_data_; }

void RecordModuleFriend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecordModuleFriend *>(to)->MergeFrom(
      static_cast<const RecordModuleFriend &>(from));
}


void RecordModuleFriend::MergeFrom(const RecordModuleFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:record.RecordModuleFriend)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_osendgift()) {
    _internal_mutable_osendgift()->::record::RecordSendGiftVersion::MergeFrom(from._internal_osendgift());
  }
  if (from._internal_llrecvgiftuid() != 0) {
    _internal_set_llrecvgiftuid(from._internal_llrecvgiftuid());
  }
  if (from._internal_llexpiredgiftuid() != 0) {
    _internal_set_llexpiredgiftuid(from._internal_llexpiredgiftuid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordModuleFriend::CopyFrom(const RecordModuleFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:record.RecordModuleFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordModuleFriend::IsInitialized() const {
  return true;
}

void RecordModuleFriend::InternalSwap(RecordModuleFriend* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordModuleFriend, llexpiredgiftuid_)
      + sizeof(RecordModuleFriend::llexpiredgiftuid_)
      - PROTOBUF_FIELD_OFFSET(RecordModuleFriend, osendgift_)>(
          reinterpret_cast<char*>(&osendgift_),
          reinterpret_cast<char*>(&other->osendgift_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordModuleFriend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_recordfriend_2eproto_getter, &descriptor_table_recordfriend_2eproto_once,
      file_level_metadata_recordfriend_2eproto[0]);
}

// ===================================================================

RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse::RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse() {}
RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse::RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse::MergeFrom(const RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_recordfriend_2eproto_getter, &descriptor_table_recordfriend_2eproto_once,
      file_level_metadata_recordfriend_2eproto[1]);
}

// ===================================================================

class RecordSendGiftVersion::_Internal {
 public:
};

RecordSendGiftVersion::RecordSendGiftVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  mapsendgifts_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &RecordSendGiftVersion::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:record.RecordSendGiftVersion)
}
RecordSendGiftVersion::RecordSendGiftVersion(const RecordSendGiftVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mapsendgifts_.MergeFrom(from.mapsendgifts_);
  uiversionid_ = from.uiversionid_;
  // @@protoc_insertion_point(copy_constructor:record.RecordSendGiftVersion)
}

inline void RecordSendGiftVersion::SharedCtor() {
uiversionid_ = 0u;
}

RecordSendGiftVersion::~RecordSendGiftVersion() {
  // @@protoc_insertion_point(destructor:record.RecordSendGiftVersion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void RecordSendGiftVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mapsendgifts_.Destruct();
}

void RecordSendGiftVersion::ArenaDtor(void* object) {
  RecordSendGiftVersion* _this = reinterpret_cast< RecordSendGiftVersion* >(object);
  _this->mapsendgifts_.Destruct();
}
void RecordSendGiftVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordSendGiftVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:record.RecordSendGiftVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mapsendgifts_.Clear();
  uiversionid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordSendGiftVersion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 uiVersionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uiversionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .record.RecordSendGift> mapSendGifts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mapsendgifts_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordSendGiftVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:record.RecordSendGiftVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiVersionId = 1;
  if (this->_internal_uiversionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uiversionid(), target);
  }

  // map<uint32, .record.RecordSendGift> mapSendGifts = 2;
  if (!this->_internal_mapsendgifts().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::record::RecordSendGift>;
    using WireHelper = RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_mapsendgifts();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:record.RecordSendGiftVersion)
  return target;
}

size_t RecordSendGiftVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:record.RecordSendGiftVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .record.RecordSendGift> mapSendGifts = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mapsendgifts_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::record::RecordSendGift >::const_iterator
      it = this->_internal_mapsendgifts().begin();
      it != this->_internal_mapsendgifts().end(); ++it) {
    total_size += RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint32 uiVersionId = 1;
  if (this->_internal_uiversionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uiversionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordSendGiftVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordSendGiftVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordSendGiftVersion::GetClassData() const { return &_class_data_; }

void RecordSendGiftVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecordSendGiftVersion *>(to)->MergeFrom(
      static_cast<const RecordSendGiftVersion &>(from));
}


void RecordSendGiftVersion::MergeFrom(const RecordSendGiftVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:record.RecordSendGiftVersion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  mapsendgifts_.MergeFrom(from.mapsendgifts_);
  if (from._internal_uiversionid() != 0) {
    _internal_set_uiversionid(from._internal_uiversionid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordSendGiftVersion::CopyFrom(const RecordSendGiftVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:record.RecordSendGiftVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordSendGiftVersion::IsInitialized() const {
  return true;
}

void RecordSendGiftVersion::InternalSwap(RecordSendGiftVersion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  mapsendgifts_.InternalSwap(&other->mapsendgifts_);
  swap(uiversionid_, other->uiversionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordSendGiftVersion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_recordfriend_2eproto_getter, &descriptor_table_recordfriend_2eproto_once,
      file_level_metadata_recordfriend_2eproto[2]);
}

// ===================================================================

class RecordSendGift::_Internal {
 public:
};

RecordSendGift::RecordSendGift(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:record.RecordSendGift)
}
RecordSendGift::RecordSendGift(const RecordSendGift& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&llrecver_, &from.llrecver_,
    static_cast<size_t>(reinterpret_cast<char*>(&bbind_) -
    reinterpret_cast<char*>(&llrecver_)) + sizeof(bbind_));
  // @@protoc_insertion_point(copy_constructor:record.RecordSendGift)
}

inline void RecordSendGift::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&llrecver_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bbind_) -
    reinterpret_cast<char*>(&llrecver_)) + sizeof(bbind_));
}

RecordSendGift::~RecordSendGift() {
  // @@protoc_insertion_point(destructor:record.RecordSendGift)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordSendGift::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecordSendGift::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordSendGift::Clear() {
// @@protoc_insertion_point(message_clear_start:record.RecordSendGift)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&llrecver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bbind_) -
      reinterpret_cast<char*>(&llrecver_)) + sizeof(bbind_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordSendGift::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 llRecver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          llrecver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiItemId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uiitemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 llItemCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          llitemcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bBind = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          bbind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordSendGift::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:record.RecordSendGift)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 llRecver = 1;
  if (this->_internal_llrecver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_llrecver(), target);
  }

  // uint32 uiItemId = 2;
  if (this->_internal_uiitemid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uiitemid(), target);
  }

  // uint64 llItemCount = 3;
  if (this->_internal_llitemcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_llitemcount(), target);
  }

  // bool bBind = 4;
  if (this->_internal_bbind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_bbind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:record.RecordSendGift)
  return target;
}

size_t RecordSendGift::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:record.RecordSendGift)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 llRecver = 1;
  if (this->_internal_llrecver() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_llrecver());
  }

  // uint64 llItemCount = 3;
  if (this->_internal_llitemcount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_llitemcount());
  }

  // uint32 uiItemId = 2;
  if (this->_internal_uiitemid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uiitemid());
  }

  // bool bBind = 4;
  if (this->_internal_bbind() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordSendGift::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordSendGift::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordSendGift::GetClassData() const { return &_class_data_; }

void RecordSendGift::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecordSendGift *>(to)->MergeFrom(
      static_cast<const RecordSendGift &>(from));
}


void RecordSendGift::MergeFrom(const RecordSendGift& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:record.RecordSendGift)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_llrecver() != 0) {
    _internal_set_llrecver(from._internal_llrecver());
  }
  if (from._internal_llitemcount() != 0) {
    _internal_set_llitemcount(from._internal_llitemcount());
  }
  if (from._internal_uiitemid() != 0) {
    _internal_set_uiitemid(from._internal_uiitemid());
  }
  if (from._internal_bbind() != 0) {
    _internal_set_bbind(from._internal_bbind());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordSendGift::CopyFrom(const RecordSendGift& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:record.RecordSendGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordSendGift::IsInitialized() const {
  return true;
}

void RecordSendGift::InternalSwap(RecordSendGift* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordSendGift, bbind_)
      + sizeof(RecordSendGift::bbind_)
      - PROTOBUF_FIELD_OFFSET(RecordSendGift, llrecver_)>(
          reinterpret_cast<char*>(&llrecver_),
          reinterpret_cast<char*>(&other->llrecver_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordSendGift::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_recordfriend_2eproto_getter, &descriptor_table_recordfriend_2eproto_once,
      file_level_metadata_recordfriend_2eproto[3]);
}

// ===================================================================

class RecordFriendData::_Internal {
 public:
  static const ::record::RecordFriendSvrBrief& obrief(const RecordFriendData* msg);
  static const ::record::RecordFriendList& ofriends(const RecordFriendData* msg);
  static const ::record::RecordRequestList& orequest(const RecordFriendData* msg);
  static const ::record::RecordBlockList& oblock(const RecordFriendData* msg);
  static const ::record::RecordRecommendFilter& ofilter(const RecordFriendData* msg);
  static const ::record::RecordRecommendLabel& olabel(const RecordFriendData* msg);
  static const ::record::RecordSendGiftTimes& ogifttimes(const RecordFriendData* msg);
};

const ::record::RecordFriendSvrBrief&
RecordFriendData::_Internal::obrief(const RecordFriendData* msg) {
  return *msg->oData_.obrief_;
}
const ::record::RecordFriendList&
RecordFriendData::_Internal::ofriends(const RecordFriendData* msg) {
  return *msg->oData_.ofriends_;
}
const ::record::RecordRequestList&
RecordFriendData::_Internal::orequest(const RecordFriendData* msg) {
  return *msg->oData_.orequest_;
}
const ::record::RecordBlockList&
RecordFriendData::_Internal::oblock(const RecordFriendData* msg) {
  return *msg->oData_.oblock_;
}
const ::record::RecordRecommendFilter&
RecordFriendData::_Internal::ofilter(const RecordFriendData* msg) {
  return *msg->oData_.ofilter_;
}
const ::record::RecordRecommendLabel&
RecordFriendData::_Internal::olabel(const RecordFriendData* msg) {
  return *msg->oData_.olabel_;
}
const ::record::RecordSendGiftTimes&
RecordFriendData::_Internal::ogifttimes(const RecordFriendData* msg) {
  return *msg->oData_.ogifttimes_;
}
void RecordFriendData::set_allocated_obrief(::record::RecordFriendSvrBrief* obrief) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oData();
  if (obrief) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(obrief);
    if (message_arena != submessage_arena) {
      obrief = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obrief, submessage_arena);
    }
    set_has_obrief();
    oData_.obrief_ = obrief;
  }
  // @@protoc_insertion_point(field_set_allocated:record.RecordFriendData.oBrief)
}
void RecordFriendData::set_allocated_ofriends(::record::RecordFriendList* ofriends) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oData();
  if (ofriends) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ofriends);
    if (message_arena != submessage_arena) {
      ofriends = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ofriends, submessage_arena);
    }
    set_has_ofriends();
    oData_.ofriends_ = ofriends;
  }
  // @@protoc_insertion_point(field_set_allocated:record.RecordFriendData.oFriends)
}
void RecordFriendData::set_allocated_orequest(::record::RecordRequestList* orequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oData();
  if (orequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(orequest);
    if (message_arena != submessage_arena) {
      orequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orequest, submessage_arena);
    }
    set_has_orequest();
    oData_.orequest_ = orequest;
  }
  // @@protoc_insertion_point(field_set_allocated:record.RecordFriendData.oRequest)
}
void RecordFriendData::set_allocated_oblock(::record::RecordBlockList* oblock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oData();
  if (oblock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(oblock);
    if (message_arena != submessage_arena) {
      oblock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oblock, submessage_arena);
    }
    set_has_oblock();
    oData_.oblock_ = oblock;
  }
  // @@protoc_insertion_point(field_set_allocated:record.RecordFriendData.oBlock)
}
void RecordFriendData::set_allocated_ofilter(::record::RecordRecommendFilter* ofilter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oData();
  if (ofilter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ofilter);
    if (message_arena != submessage_arena) {
      ofilter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ofilter, submessage_arena);
    }
    set_has_ofilter();
    oData_.ofilter_ = ofilter;
  }
  // @@protoc_insertion_point(field_set_allocated:record.RecordFriendData.oFilter)
}
void RecordFriendData::set_allocated_olabel(::record::RecordRecommendLabel* olabel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oData();
  if (olabel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(olabel);
    if (message_arena != submessage_arena) {
      olabel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, olabel, submessage_arena);
    }
    set_has_olabel();
    oData_.olabel_ = olabel;
  }
  // @@protoc_insertion_point(field_set_allocated:record.RecordFriendData.oLabel)
}
void RecordFriendData::set_allocated_ogifttimes(::record::RecordSendGiftTimes* ogifttimes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oData();
  if (ogifttimes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ogifttimes);
    if (message_arena != submessage_arena) {
      ogifttimes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ogifttimes, submessage_arena);
    }
    set_has_ogifttimes();
    oData_.ogifttimes_ = ogifttimes;
  }
  // @@protoc_insertion_point(field_set_allocated:record.RecordFriendData.oGiftTimes)
}
RecordFriendData::RecordFriendData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:record.RecordFriendData)
}
RecordFriendData::RecordFriendData(const RecordFriendData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_oData();
  switch (from.oData_case()) {
    case kOBrief: {
      _internal_mutable_obrief()->::record::RecordFriendSvrBrief::MergeFrom(from._internal_obrief());
      break;
    }
    case kOFriends: {
      _internal_mutable_ofriends()->::record::RecordFriendList::MergeFrom(from._internal_ofriends());
      break;
    }
    case kORequest: {
      _internal_mutable_orequest()->::record::RecordRequestList::MergeFrom(from._internal_orequest());
      break;
    }
    case kOBlock: {
      _internal_mutable_oblock()->::record::RecordBlockList::MergeFrom(from._internal_oblock());
      break;
    }
    case kOFilter: {
      _internal_mutable_ofilter()->::record::RecordRecommendFilter::MergeFrom(from._internal_ofilter());
      break;
    }
    case kOLabel: {
      _internal_mutable_olabel()->::record::RecordRecommendLabel::MergeFrom(from._internal_olabel());
      break;
    }
    case kOGiftTimes: {
      _internal_mutable_ogifttimes()->::record::RecordSendGiftTimes::MergeFrom(from._internal_ogifttimes());
      break;
    }
    case ODATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:record.RecordFriendData)
}

inline void RecordFriendData::SharedCtor() {
clear_has_oData();
}

RecordFriendData::~RecordFriendData() {
  // @@protoc_insertion_point(destructor:record.RecordFriendData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordFriendData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_oData()) {
    clear_oData();
  }
}

void RecordFriendData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordFriendData::clear_oData() {
// @@protoc_insertion_point(one_of_clear_start:record.RecordFriendData)
  switch (oData_case()) {
    case kOBrief: {
      if (GetArenaForAllocation() == nullptr) {
        delete oData_.obrief_;
      }
      break;
    }
    case kOFriends: {
      if (GetArenaForAllocation() == nullptr) {
        delete oData_.ofriends_;
      }
      break;
    }
    case kORequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete oData_.orequest_;
      }
      break;
    }
    case kOBlock: {
      if (GetArenaForAllocation() == nullptr) {
        delete oData_.oblock_;
      }
      break;
    }
    case kOFilter: {
      if (GetArenaForAllocation() == nullptr) {
        delete oData_.ofilter_;
      }
      break;
    }
    case kOLabel: {
      if (GetArenaForAllocation() == nullptr) {
        delete oData_.olabel_;
      }
      break;
    }
    case kOGiftTimes: {
      if (GetArenaForAllocation() == nullptr) {
        delete oData_.ogifttimes_;
      }
      break;
    }
    case ODATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ODATA_NOT_SET;
}


void RecordFriendData::Clear() {
// @@protoc_insertion_point(message_clear_start:record.RecordFriendData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_oData();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordFriendData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .record.RecordFriendSvrBrief oBrief = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_obrief(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .record.RecordFriendList oFriends = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ofriends(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .record.RecordRequestList oRequest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_orequest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .record.RecordBlockList oBlock = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_oblock(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .record.RecordRecommendFilter oFilter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ofilter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .record.RecordRecommendLabel oLabel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_olabel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .record.RecordSendGiftTimes oGiftTimes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ogifttimes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordFriendData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:record.RecordFriendData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .record.RecordFriendSvrBrief oBrief = 1;
  if (_internal_has_obrief()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::obrief(this),
        _Internal::obrief(this).GetCachedSize(), target, stream);
  }

  // .record.RecordFriendList oFriends = 2;
  if (_internal_has_ofriends()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ofriends(this),
        _Internal::ofriends(this).GetCachedSize(), target, stream);
  }

  // .record.RecordRequestList oRequest = 3;
  if (_internal_has_orequest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::orequest(this),
        _Internal::orequest(this).GetCachedSize(), target, stream);
  }

  // .record.RecordBlockList oBlock = 4;
  if (_internal_has_oblock()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::oblock(this),
        _Internal::oblock(this).GetCachedSize(), target, stream);
  }

  // .record.RecordRecommendFilter oFilter = 5;
  if (_internal_has_ofilter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::ofilter(this),
        _Internal::ofilter(this).GetCachedSize(), target, stream);
  }

  // .record.RecordRecommendLabel oLabel = 6;
  if (_internal_has_olabel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::olabel(this),
        _Internal::olabel(this).GetCachedSize(), target, stream);
  }

  // .record.RecordSendGiftTimes oGiftTimes = 7;
  if (_internal_has_ogifttimes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::ogifttimes(this),
        _Internal::ogifttimes(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:record.RecordFriendData)
  return target;
}

size_t RecordFriendData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:record.RecordFriendData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (oData_case()) {
    // .record.RecordFriendSvrBrief oBrief = 1;
    case kOBrief: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oData_.obrief_);
      break;
    }
    // .record.RecordFriendList oFriends = 2;
    case kOFriends: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oData_.ofriends_);
      break;
    }
    // .record.RecordRequestList oRequest = 3;
    case kORequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oData_.orequest_);
      break;
    }
    // .record.RecordBlockList oBlock = 4;
    case kOBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oData_.oblock_);
      break;
    }
    // .record.RecordRecommendFilter oFilter = 5;
    case kOFilter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oData_.ofilter_);
      break;
    }
    // .record.RecordRecommendLabel oLabel = 6;
    case kOLabel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oData_.olabel_);
      break;
    }
    // .record.RecordSendGiftTimes oGiftTimes = 7;
    case kOGiftTimes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oData_.ogifttimes_);
      break;
    }
    case ODATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordFriendData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordFriendData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordFriendData::GetClassData() const { return &_class_data_; }

void RecordFriendData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecordFriendData *>(to)->MergeFrom(
      static_cast<const RecordFriendData &>(from));
}


void RecordFriendData::MergeFrom(const RecordFriendData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:record.RecordFriendData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.oData_case()) {
    case kOBrief: {
      _internal_mutable_obrief()->::record::RecordFriendSvrBrief::MergeFrom(from._internal_obrief());
      break;
    }
    case kOFriends: {
      _internal_mutable_ofriends()->::record::RecordFriendList::MergeFrom(from._internal_ofriends());
      break;
    }
    case kORequest: {
      _internal_mutable_orequest()->::record::RecordRequestList::MergeFrom(from._internal_orequest());
      break;
    }
    case kOBlock: {
      _internal_mutable_oblock()->::record::RecordBlockList::MergeFrom(from._internal_oblock());
      break;
    }
    case kOFilter: {
      _internal_mutable_ofilter()->::record::RecordRecommendFilter::MergeFrom(from._internal_ofilter());
      break;
    }
    case kOLabel: {
      _internal_mutable_olabel()->::record::RecordRecommendLabel::MergeFrom(from._internal_olabel());
      break;
    }
    case kOGiftTimes: {
      _internal_mutable_ogifttimes()->::record::RecordSendGiftTimes::MergeFrom(from._internal_ogifttimes());
      break;
    }
    case ODATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordFriendData::CopyFrom(const RecordFriendData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:record.RecordFriendData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordFriendData::IsInitialized() const {
  return true;
}

void RecordFriendData::InternalSwap(RecordFriendData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(oData_, other->oData_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordFriendData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_recordfriend_2eproto_getter, &descriptor_table_recordfriend_2eproto_once,
      file_level_metadata_recordfriend_2eproto[4]);
}

// ===================================================================

RecordFriendSvrBrief_MapVersionsEntry_DoNotUse::RecordFriendSvrBrief_MapVersionsEntry_DoNotUse() {}
RecordFriendSvrBrief_MapVersionsEntry_DoNotUse::RecordFriendSvrBrief_MapVersionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RecordFriendSvrBrief_MapVersionsEntry_DoNotUse::MergeFrom(const RecordFriendSvrBrief_MapVersionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RecordFriendSvrBrief_MapVersionsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_recordfriend_2eproto_getter, &descriptor_table_recordfriend_2eproto_once,
      file_level_metadata_recordfriend_2eproto[5]);
}

// ===================================================================

class RecordFriendSvrBrief::_Internal {
 public:
};

RecordFriendSvrBrief::RecordFriendSvrBrief(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  mapversions_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &RecordFriendSvrBrief::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:record.RecordFriendSvrBrief)
}
RecordFriendSvrBrief::RecordFriendSvrBrief(const RecordFriendSvrBrief& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mapversions_.MergeFrom(from.mapversions_);
  strrolename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    strrolename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_strrolename().empty()) {
    strrolename_.Set(from._internal_strrolename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&uisex_, &from.uisex_,
    static_cast<size_t>(reinterpret_cast<char*>(&uionlinetime_) -
    reinterpret_cast<char*>(&uisex_)) + sizeof(uionlinetime_));
  // @@protoc_insertion_point(copy_constructor:record.RecordFriendSvrBrief)
}

inline void RecordFriendSvrBrief::SharedCtor() {
strrolename_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  strrolename_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uisex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uionlinetime_) -
    reinterpret_cast<char*>(&uisex_)) + sizeof(uionlinetime_));
}

RecordFriendSvrBrief::~RecordFriendSvrBrief() {
  // @@protoc_insertion_point(destructor:record.RecordFriendSvrBrief)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void RecordFriendSvrBrief::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mapversions_.Destruct();
  strrolename_.Destroy();
}

void RecordFriendSvrBrief::ArenaDtor(void* object) {
  RecordFriendSvrBrief* _this = reinterpret_cast< RecordFriendSvrBrief* >(object);
  _this->mapversions_.Destruct();
}
void RecordFriendSvrBrief::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordFriendSvrBrief::Clear() {
// @@protoc_insertion_point(message_clear_start:record.RecordFriendSvrBrief)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mapversions_.Clear();
  strrolename_.ClearToEmpty();
  ::memset(&uisex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uionlinetime_) -
      reinterpret_cast<char*>(&uisex_)) + sizeof(uionlinetime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordFriendSvrBrief::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 uiSex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uisex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uilevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes strRoleName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_strrolename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiOfflineTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uiofflinetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> mapVersions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mapversions_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 uiSendGiftVersionId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uisendgiftversionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bFuncOpen = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          bfuncopen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiOnlineTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uionlinetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordFriendSvrBrief::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:record.RecordFriendSvrBrief)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiSex = 1;
  if (this->_internal_uisex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uisex(), target);
  }

  // uint32 uiLevel = 2;
  if (this->_internal_uilevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uilevel(), target);
  }

  // bytes strRoleName = 3;
  if (!this->_internal_strrolename().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_strrolename(), target);
  }

  // uint32 uiOfflineTime = 4;
  if (this->_internal_uiofflinetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uiofflinetime(), target);
  }

  // map<uint32, uint32> mapVersions = 5;
  if (!this->_internal_mapversions().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = RecordFriendSvrBrief_MapVersionsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_mapversions();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    }
  }

  // uint32 uiSendGiftVersionId = 6;
  if (this->_internal_uisendgiftversionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_uisendgiftversionid(), target);
  }

  // bool bFuncOpen = 7;
  if (this->_internal_bfuncopen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_bfuncopen(), target);
  }

  // uint32 uiOnlineTime = 8;
  if (this->_internal_uionlinetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_uionlinetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:record.RecordFriendSvrBrief)
  return target;
}

size_t RecordFriendSvrBrief::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:record.RecordFriendSvrBrief)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, uint32> mapVersions = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mapversions_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_mapversions().begin();
      it != this->_internal_mapversions().end(); ++it) {
    total_size += RecordFriendSvrBrief_MapVersionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes strRoleName = 3;
  if (!this->_internal_strrolename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_strrolename());
  }

  // uint32 uiSex = 1;
  if (this->_internal_uisex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uisex());
  }

  // uint32 uiLevel = 2;
  if (this->_internal_uilevel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uilevel());
  }

  // uint32 uiOfflineTime = 4;
  if (this->_internal_uiofflinetime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uiofflinetime());
  }

  // uint32 uiSendGiftVersionId = 6;
  if (this->_internal_uisendgiftversionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uisendgiftversionid());
  }

  // bool bFuncOpen = 7;
  if (this->_internal_bfuncopen() != 0) {
    total_size += 1 + 1;
  }

  // uint32 uiOnlineTime = 8;
  if (this->_internal_uionlinetime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uionlinetime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordFriendSvrBrief::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordFriendSvrBrief::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordFriendSvrBrief::GetClassData() const { return &_class_data_; }

void RecordFriendSvrBrief::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecordFriendSvrBrief *>(to)->MergeFrom(
      static_cast<const RecordFriendSvrBrief &>(from));
}


void RecordFriendSvrBrief::MergeFrom(const RecordFriendSvrBrief& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:record.RecordFriendSvrBrief)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  mapversions_.MergeFrom(from.mapversions_);
  if (!from._internal_strrolename().empty()) {
    _internal_set_strrolename(from._internal_strrolename());
  }
  if (from._internal_uisex() != 0) {
    _internal_set_uisex(from._internal_uisex());
  }
  if (from._internal_uilevel() != 0) {
    _internal_set_uilevel(from._internal_uilevel());
  }
  if (from._internal_uiofflinetime() != 0) {
    _internal_set_uiofflinetime(from._internal_uiofflinetime());
  }
  if (from._internal_uisendgiftversionid() != 0) {
    _internal_set_uisendgiftversionid(from._internal_uisendgiftversionid());
  }
  if (from._internal_bfuncopen() != 0) {
    _internal_set_bfuncopen(from._internal_bfuncopen());
  }
  if (from._internal_uionlinetime() != 0) {
    _internal_set_uionlinetime(from._internal_uionlinetime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordFriendSvrBrief::CopyFrom(const RecordFriendSvrBrief& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:record.RecordFriendSvrBrief)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordFriendSvrBrief::IsInitialized() const {
  return true;
}

void RecordFriendSvrBrief::InternalSwap(RecordFriendSvrBrief* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  mapversions_.InternalSwap(&other->mapversions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &strrolename_, lhs_arena,
      &other->strrolename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordFriendSvrBrief, uionlinetime_)
      + sizeof(RecordFriendSvrBrief::uionlinetime_)
      - PROTOBUF_FIELD_OFFSET(RecordFriendSvrBrief, uisex_)>(
          reinterpret_cast<char*>(&uisex_),
          reinterpret_cast<char*>(&other->uisex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordFriendSvrBrief::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_recordfriend_2eproto_getter, &descriptor_table_recordfriend_2eproto_once,
      file_level_metadata_recordfriend_2eproto[6]);
}

// ===================================================================

class RecordFriendList::_Internal {
 public:
  static const ::record::RecordRelationList& ofriends(const RecordFriendList* msg);
};

const ::record::RecordRelationList&
RecordFriendList::_Internal::ofriends(const RecordFriendList* msg) {
  return *msg->ofriends_;
}
RecordFriendList::RecordFriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:record.RecordFriendList)
}
RecordFriendList::RecordFriendList(const RecordFriendList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ofriends()) {
    ofriends_ = new ::record::RecordRelationList(*from.ofriends_);
  } else {
    ofriends_ = nullptr;
  }
  uifriendlistmax_ = from.uifriendlistmax_;
  // @@protoc_insertion_point(copy_constructor:record.RecordFriendList)
}

inline void RecordFriendList::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ofriends_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uifriendlistmax_) -
    reinterpret_cast<char*>(&ofriends_)) + sizeof(uifriendlistmax_));
}

RecordFriendList::~RecordFriendList() {
  // @@protoc_insertion_point(destructor:record.RecordFriendList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordFriendList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ofriends_;
}

void RecordFriendList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordFriendList::Clear() {
// @@protoc_insertion_point(message_clear_start:record.RecordFriendList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && ofriends_ != nullptr) {
    delete ofriends_;
  }
  ofriends_ = nullptr;
  uifriendlistmax_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordFriendList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 uiFriendListMax = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uifriendlistmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .record.RecordRelationList oFriends = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ofriends(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordFriendList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:record.RecordFriendList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiFriendListMax = 1;
  if (this->_internal_uifriendlistmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uifriendlistmax(), target);
  }

  // .record.RecordRelationList oFriends = 2;
  if (this->_internal_has_ofriends()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ofriends(this),
        _Internal::ofriends(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:record.RecordFriendList)
  return target;
}

size_t RecordFriendList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:record.RecordFriendList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .record.RecordRelationList oFriends = 2;
  if (this->_internal_has_ofriends()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ofriends_);
  }

  // uint32 uiFriendListMax = 1;
  if (this->_internal_uifriendlistmax() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uifriendlistmax());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordFriendList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordFriendList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordFriendList::GetClassData() const { return &_class_data_; }

void RecordFriendList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecordFriendList *>(to)->MergeFrom(
      static_cast<const RecordFriendList &>(from));
}


void RecordFriendList::MergeFrom(const RecordFriendList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:record.RecordFriendList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ofriends()) {
    _internal_mutable_ofriends()->::record::RecordRelationList::MergeFrom(from._internal_ofriends());
  }
  if (from._internal_uifriendlistmax() != 0) {
    _internal_set_uifriendlistmax(from._internal_uifriendlistmax());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordFriendList::CopyFrom(const RecordFriendList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:record.RecordFriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordFriendList::IsInitialized() const {
  return true;
}

void RecordFriendList::InternalSwap(RecordFriendList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordFriendList, uifriendlistmax_)
      + sizeof(RecordFriendList::uifriendlistmax_)
      - PROTOBUF_FIELD_OFFSET(RecordFriendList, ofriends_)>(
          reinterpret_cast<char*>(&ofriends_),
          reinterpret_cast<char*>(&other->ofriends_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordFriendList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_recordfriend_2eproto_getter, &descriptor_table_recordfriend_2eproto_once,
      file_level_metadata_recordfriend_2eproto[7]);
}

// ===================================================================

class RecordRelationList::_Internal {
 public:
};

RecordRelationList::RecordRelationList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vecrelations_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:record.RecordRelationList)
}
RecordRelationList::RecordRelationList(const RecordRelationList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vecrelations_(from.vecrelations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:record.RecordRelationList)
}

inline void RecordRelationList::SharedCtor() {
}

RecordRelationList::~RecordRelationList() {
  // @@protoc_insertion_point(destructor:record.RecordRelationList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordRelationList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecordRelationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordRelationList::Clear() {
// @@protoc_insertion_point(message_clear_start:record.RecordRelationList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vecrelations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordRelationList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .record.RecordFriendRelation vecRelations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vecrelations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordRelationList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:record.RecordRelationList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .record.RecordFriendRelation vecRelations = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vecrelations_size()); i < n; i++) {
    const auto& repfield = this->_internal_vecrelations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:record.RecordRelationList)
  return target;
}

size_t RecordRelationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:record.RecordRelationList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .record.RecordFriendRelation vecRelations = 1;
  total_size += 1UL * this->_internal_vecrelations_size();
  for (const auto& msg : this->vecrelations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordRelationList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordRelationList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordRelationList::GetClassData() const { return &_class_data_; }

void RecordRelationList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecordRelationList *>(to)->MergeFrom(
      static_cast<const RecordRelationList &>(from));
}


void RecordRelationList::MergeFrom(const RecordRelationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:record.RecordRelationList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vecrelations_.MergeFrom(from.vecrelations_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordRelationList::CopyFrom(const RecordRelationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:record.RecordRelationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordRelationList::IsInitialized() const {
  return true;
}

void RecordRelationList::InternalSwap(RecordRelationList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vecrelations_.InternalSwap(&other->vecrelations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordRelationList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_recordfriend_2eproto_getter, &descriptor_table_recordfriend_2eproto_once,
      file_level_metadata_recordfriend_2eproto[8]);
}

// ===================================================================

class RecordFriendRelation::_Internal {
 public:
};

RecordFriendRelation::RecordFriendRelation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:record.RecordFriendRelation)
}
RecordFriendRelation::RecordFriendRelation(const RecordFriendRelation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&llroleid_, &from.llroleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&uidailychat_) -
    reinterpret_cast<char*>(&llroleid_)) + sizeof(uidailychat_));
  // @@protoc_insertion_point(copy_constructor:record.RecordFriendRelation)
}

inline void RecordFriendRelation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&llroleid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uidailychat_) -
    reinterpret_cast<char*>(&llroleid_)) + sizeof(uidailychat_));
}

RecordFriendRelation::~RecordFriendRelation() {
  // @@protoc_insertion_point(destructor:record.RecordFriendRelation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordFriendRelation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecordFriendRelation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordFriendRelation::Clear() {
// @@protoc_insertion_point(message_clear_start:record.RecordFriendRelation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&llroleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uidailychat_) -
      reinterpret_cast<char*>(&llroleid_)) + sizeof(uidailychat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordFriendRelation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 llRoleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          llroleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiFriendShip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uifriendship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiDailyChat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uidailychat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordFriendRelation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:record.RecordFriendRelation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 llRoleId = 1;
  if (this->_internal_llroleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_llroleid(), target);
  }

  // uint32 uiFriendShip = 2;
  if (this->_internal_uifriendship() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uifriendship(), target);
  }

  // uint32 uiDailyChat = 3;
  if (this->_internal_uidailychat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uidailychat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:record.RecordFriendRelation)
  return target;
}

size_t RecordFriendRelation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:record.RecordFriendRelation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 llRoleId = 1;
  if (this->_internal_llroleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_llroleid());
  }

  // uint32 uiFriendShip = 2;
  if (this->_internal_uifriendship() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uifriendship());
  }

  // uint32 uiDailyChat = 3;
  if (this->_internal_uidailychat() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uidailychat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordFriendRelation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordFriendRelation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordFriendRelation::GetClassData() const { return &_class_data_; }

void RecordFriendRelation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecordFriendRelation *>(to)->MergeFrom(
      static_cast<const RecordFriendRelation &>(from));
}


void RecordFriendRelation::MergeFrom(const RecordFriendRelation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:record.RecordFriendRelation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_llroleid() != 0) {
    _internal_set_llroleid(from._internal_llroleid());
  }
  if (from._internal_uifriendship() != 0) {
    _internal_set_uifriendship(from._internal_uifriendship());
  }
  if (from._internal_uidailychat() != 0) {
    _internal_set_uidailychat(from._internal_uidailychat());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordFriendRelation::CopyFrom(const RecordFriendRelation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:record.RecordFriendRelation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordFriendRelation::IsInitialized() const {
  return true;
}

void RecordFriendRelation::InternalSwap(RecordFriendRelation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordFriendRelation, uidailychat_)
      + sizeof(RecordFriendRelation::uidailychat_)
      - PROTOBUF_FIELD_OFFSET(RecordFriendRelation, llroleid_)>(
          reinterpret_cast<char*>(&llroleid_),
          reinterpret_cast<char*>(&other->llroleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordFriendRelation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_recordfriend_2eproto_getter, &descriptor_table_recordfriend_2eproto_once,
      file_level_metadata_recordfriend_2eproto[9]);
}

// ===================================================================

class RecordRequestList::_Internal {
 public:
};

RecordRequestList::RecordRequestList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vecrequestlist_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:record.RecordRequestList)
}
RecordRequestList::RecordRequestList(const RecordRequestList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vecrequestlist_(from.vecrequestlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:record.RecordRequestList)
}

inline void RecordRequestList::SharedCtor() {
}

RecordRequestList::~RecordRequestList() {
  // @@protoc_insertion_point(destructor:record.RecordRequestList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordRequestList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecordRequestList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordRequestList::Clear() {
// @@protoc_insertion_point(message_clear_start:record.RecordRequestList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vecrequestlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordRequestList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 vecRequestList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_vecrequestlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_vecrequestlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordRequestList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:record.RecordRequestList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 vecRequestList = 1;
  {
    int byte_size = _vecrequestlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_vecrequestlist(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:record.RecordRequestList)
  return target;
}

size_t RecordRequestList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:record.RecordRequestList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 vecRequestList = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->vecrequestlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _vecrequestlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordRequestList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordRequestList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordRequestList::GetClassData() const { return &_class_data_; }

void RecordRequestList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecordRequestList *>(to)->MergeFrom(
      static_cast<const RecordRequestList &>(from));
}


void RecordRequestList::MergeFrom(const RecordRequestList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:record.RecordRequestList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vecrequestlist_.MergeFrom(from.vecrequestlist_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordRequestList::CopyFrom(const RecordRequestList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:record.RecordRequestList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordRequestList::IsInitialized() const {
  return true;
}

void RecordRequestList::InternalSwap(RecordRequestList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vecrequestlist_.InternalSwap(&other->vecrequestlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordRequestList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_recordfriend_2eproto_getter, &descriptor_table_recordfriend_2eproto_once,
      file_level_metadata_recordfriend_2eproto[10]);
}

// ===================================================================

class RecordBlockList::_Internal {
 public:
};

RecordBlockList::RecordBlockList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vecblocklist_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:record.RecordBlockList)
}
RecordBlockList::RecordBlockList(const RecordBlockList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vecblocklist_(from.vecblocklist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:record.RecordBlockList)
}

inline void RecordBlockList::SharedCtor() {
}

RecordBlockList::~RecordBlockList() {
  // @@protoc_insertion_point(destructor:record.RecordBlockList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordBlockList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecordBlockList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordBlockList::Clear() {
// @@protoc_insertion_point(message_clear_start:record.RecordBlockList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vecblocklist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordBlockList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 vecBlockList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_vecblocklist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_vecblocklist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordBlockList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:record.RecordBlockList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 vecBlockList = 1;
  {
    int byte_size = _vecblocklist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_vecblocklist(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:record.RecordBlockList)
  return target;
}

size_t RecordBlockList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:record.RecordBlockList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 vecBlockList = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->vecblocklist_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _vecblocklist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordBlockList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordBlockList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordBlockList::GetClassData() const { return &_class_data_; }

void RecordBlockList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecordBlockList *>(to)->MergeFrom(
      static_cast<const RecordBlockList &>(from));
}


void RecordBlockList::MergeFrom(const RecordBlockList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:record.RecordBlockList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vecblocklist_.MergeFrom(from.vecblocklist_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordBlockList::CopyFrom(const RecordBlockList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:record.RecordBlockList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordBlockList::IsInitialized() const {
  return true;
}

void RecordBlockList::InternalSwap(RecordBlockList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vecblocklist_.InternalSwap(&other->vecblocklist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordBlockList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_recordfriend_2eproto_getter, &descriptor_table_recordfriend_2eproto_once,
      file_level_metadata_recordfriend_2eproto[11]);
}

// ===================================================================

class RecordRecommendFilter::_Internal {
 public:
};

RecordRecommendFilter::RecordRecommendFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:record.RecordRecommendFilter)
}
RecordRecommendFilter::RecordRecommendFilter(const RecordRecommendFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bonlycity_, &from.bonlycity_,
    static_cast<size_t>(reinterpret_cast<char*>(&uibitlabel_) -
    reinterpret_cast<char*>(&bonlycity_)) + sizeof(uibitlabel_));
  // @@protoc_insertion_point(copy_constructor:record.RecordRecommendFilter)
}

inline void RecordRecommendFilter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bonlycity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uibitlabel_) -
    reinterpret_cast<char*>(&bonlycity_)) + sizeof(uibitlabel_));
}

RecordRecommendFilter::~RecordRecommendFilter() {
  // @@protoc_insertion_point(destructor:record.RecordRecommendFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordRecommendFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecordRecommendFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordRecommendFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:record.RecordRecommendFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bonlycity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uibitlabel_) -
      reinterpret_cast<char*>(&bonlycity_)) + sizeof(uibitlabel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordRecommendFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool bOnlyCity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          bonlycity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiSex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uisex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiBitLabel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uibitlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordRecommendFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:record.RecordRecommendFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bOnlyCity = 1;
  if (this->_internal_bonlycity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_bonlycity(), target);
  }

  // uint32 uiSex = 2;
  if (this->_internal_uisex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uisex(), target);
  }

  // uint32 uiBitLabel = 3;
  if (this->_internal_uibitlabel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uibitlabel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:record.RecordRecommendFilter)
  return target;
}

size_t RecordRecommendFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:record.RecordRecommendFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool bOnlyCity = 1;
  if (this->_internal_bonlycity() != 0) {
    total_size += 1 + 1;
  }

  // uint32 uiSex = 2;
  if (this->_internal_uisex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uisex());
  }

  // uint32 uiBitLabel = 3;
  if (this->_internal_uibitlabel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uibitlabel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordRecommendFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordRecommendFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordRecommendFilter::GetClassData() const { return &_class_data_; }

void RecordRecommendFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecordRecommendFilter *>(to)->MergeFrom(
      static_cast<const RecordRecommendFilter &>(from));
}


void RecordRecommendFilter::MergeFrom(const RecordRecommendFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:record.RecordRecommendFilter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bonlycity() != 0) {
    _internal_set_bonlycity(from._internal_bonlycity());
  }
  if (from._internal_uisex() != 0) {
    _internal_set_uisex(from._internal_uisex());
  }
  if (from._internal_uibitlabel() != 0) {
    _internal_set_uibitlabel(from._internal_uibitlabel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordRecommendFilter::CopyFrom(const RecordRecommendFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:record.RecordRecommendFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordRecommendFilter::IsInitialized() const {
  return true;
}

void RecordRecommendFilter::InternalSwap(RecordRecommendFilter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordRecommendFilter, uibitlabel_)
      + sizeof(RecordRecommendFilter::uibitlabel_)
      - PROTOBUF_FIELD_OFFSET(RecordRecommendFilter, bonlycity_)>(
          reinterpret_cast<char*>(&bonlycity_),
          reinterpret_cast<char*>(&other->bonlycity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordRecommendFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_recordfriend_2eproto_getter, &descriptor_table_recordfriend_2eproto_once,
      file_level_metadata_recordfriend_2eproto[12]);
}

// ===================================================================

class RecordRecommendLabel::_Internal {
 public:
};

RecordRecommendLabel::RecordRecommendLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:record.RecordRecommendLabel)
}
RecordRecommendLabel::RecordRecommendLabel(const RecordRecommendLabel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uicity_, &from.uicity_,
    static_cast<size_t>(reinterpret_cast<char*>(&bavailable_) -
    reinterpret_cast<char*>(&uicity_)) + sizeof(bavailable_));
  // @@protoc_insertion_point(copy_constructor:record.RecordRecommendLabel)
}

inline void RecordRecommendLabel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uicity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bavailable_) -
    reinterpret_cast<char*>(&uicity_)) + sizeof(bavailable_));
}

RecordRecommendLabel::~RecordRecommendLabel() {
  // @@protoc_insertion_point(destructor:record.RecordRecommendLabel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordRecommendLabel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecordRecommendLabel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordRecommendLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:record.RecordRecommendLabel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uicity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bavailable_) -
      reinterpret_cast<char*>(&uicity_)) + sizeof(bavailable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordRecommendLabel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 uiCity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uicity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiBitLabel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uibitlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bAvailable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          bavailable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordRecommendLabel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:record.RecordRecommendLabel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiCity = 1;
  if (this->_internal_uicity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uicity(), target);
  }

  // uint32 uiBitLabel = 2;
  if (this->_internal_uibitlabel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uibitlabel(), target);
  }

  // bool bAvailable = 3;
  if (this->_internal_bavailable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_bavailable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:record.RecordRecommendLabel)
  return target;
}

size_t RecordRecommendLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:record.RecordRecommendLabel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 uiCity = 1;
  if (this->_internal_uicity() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uicity());
  }

  // uint32 uiBitLabel = 2;
  if (this->_internal_uibitlabel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uibitlabel());
  }

  // bool bAvailable = 3;
  if (this->_internal_bavailable() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordRecommendLabel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordRecommendLabel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordRecommendLabel::GetClassData() const { return &_class_data_; }

void RecordRecommendLabel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecordRecommendLabel *>(to)->MergeFrom(
      static_cast<const RecordRecommendLabel &>(from));
}


void RecordRecommendLabel::MergeFrom(const RecordRecommendLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:record.RecordRecommendLabel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uicity() != 0) {
    _internal_set_uicity(from._internal_uicity());
  }
  if (from._internal_uibitlabel() != 0) {
    _internal_set_uibitlabel(from._internal_uibitlabel());
  }
  if (from._internal_bavailable() != 0) {
    _internal_set_bavailable(from._internal_bavailable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordRecommendLabel::CopyFrom(const RecordRecommendLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:record.RecordRecommendLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordRecommendLabel::IsInitialized() const {
  return true;
}

void RecordRecommendLabel::InternalSwap(RecordRecommendLabel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordRecommendLabel, bavailable_)
      + sizeof(RecordRecommendLabel::bavailable_)
      - PROTOBUF_FIELD_OFFSET(RecordRecommendLabel, uicity_)>(
          reinterpret_cast<char*>(&uicity_),
          reinterpret_cast<char*>(&other->uicity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordRecommendLabel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_recordfriend_2eproto_getter, &descriptor_table_recordfriend_2eproto_once,
      file_level_metadata_recordfriend_2eproto[13]);
}

// ===================================================================

class RecordSendGiftTimes::_Internal {
 public:
  static const ::record::RecordAllSendTimes& oallsendtimes(const RecordSendGiftTimes* msg);
};

const ::record::RecordAllSendTimes&
RecordSendGiftTimes::_Internal::oallsendtimes(const RecordSendGiftTimes* msg) {
  return *msg->oallsendtimes_;
}
RecordSendGiftTimes::RecordSendGiftTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:record.RecordSendGiftTimes)
}
RecordSendGiftTimes::RecordSendGiftTimes(const RecordSendGiftTimes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_oallsendtimes()) {
    oallsendtimes_ = new ::record::RecordAllSendTimes(*from.oallsendtimes_);
  } else {
    oallsendtimes_ = nullptr;
  }
  uidailycount_ = from.uidailycount_;
  // @@protoc_insertion_point(copy_constructor:record.RecordSendGiftTimes)
}

inline void RecordSendGiftTimes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&oallsendtimes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uidailycount_) -
    reinterpret_cast<char*>(&oallsendtimes_)) + sizeof(uidailycount_));
}

RecordSendGiftTimes::~RecordSendGiftTimes() {
  // @@protoc_insertion_point(destructor:record.RecordSendGiftTimes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordSendGiftTimes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete oallsendtimes_;
}

void RecordSendGiftTimes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordSendGiftTimes::Clear() {
// @@protoc_insertion_point(message_clear_start:record.RecordSendGiftTimes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && oallsendtimes_ != nullptr) {
    delete oallsendtimes_;
  }
  oallsendtimes_ = nullptr;
  uidailycount_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordSendGiftTimes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 uiDailyCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uidailycount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .record.RecordAllSendTimes oAllSendTimes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_oallsendtimes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordSendGiftTimes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:record.RecordSendGiftTimes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiDailyCount = 1;
  if (this->_internal_uidailycount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uidailycount(), target);
  }

  // .record.RecordAllSendTimes oAllSendTimes = 2;
  if (this->_internal_has_oallsendtimes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::oallsendtimes(this),
        _Internal::oallsendtimes(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:record.RecordSendGiftTimes)
  return target;
}

size_t RecordSendGiftTimes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:record.RecordSendGiftTimes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .record.RecordAllSendTimes oAllSendTimes = 2;
  if (this->_internal_has_oallsendtimes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oallsendtimes_);
  }

  // uint32 uiDailyCount = 1;
  if (this->_internal_uidailycount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uidailycount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordSendGiftTimes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordSendGiftTimes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordSendGiftTimes::GetClassData() const { return &_class_data_; }

void RecordSendGiftTimes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecordSendGiftTimes *>(to)->MergeFrom(
      static_cast<const RecordSendGiftTimes &>(from));
}


void RecordSendGiftTimes::MergeFrom(const RecordSendGiftTimes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:record.RecordSendGiftTimes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_oallsendtimes()) {
    _internal_mutable_oallsendtimes()->::record::RecordAllSendTimes::MergeFrom(from._internal_oallsendtimes());
  }
  if (from._internal_uidailycount() != 0) {
    _internal_set_uidailycount(from._internal_uidailycount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordSendGiftTimes::CopyFrom(const RecordSendGiftTimes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:record.RecordSendGiftTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordSendGiftTimes::IsInitialized() const {
  return true;
}

void RecordSendGiftTimes::InternalSwap(RecordSendGiftTimes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordSendGiftTimes, uidailycount_)
      + sizeof(RecordSendGiftTimes::uidailycount_)
      - PROTOBUF_FIELD_OFFSET(RecordSendGiftTimes, oallsendtimes_)>(
          reinterpret_cast<char*>(&oallsendtimes_),
          reinterpret_cast<char*>(&other->oallsendtimes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordSendGiftTimes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_recordfriend_2eproto_getter, &descriptor_table_recordfriend_2eproto_once,
      file_level_metadata_recordfriend_2eproto[14]);
}

// ===================================================================

class RecordAllSendTimes::_Internal {
 public:
};

RecordAllSendTimes::RecordAllSendTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vecsendtimes_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:record.RecordAllSendTimes)
}
RecordAllSendTimes::RecordAllSendTimes(const RecordAllSendTimes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vecsendtimes_(from.vecsendtimes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:record.RecordAllSendTimes)
}

inline void RecordAllSendTimes::SharedCtor() {
}

RecordAllSendTimes::~RecordAllSendTimes() {
  // @@protoc_insertion_point(destructor:record.RecordAllSendTimes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordAllSendTimes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecordAllSendTimes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordAllSendTimes::Clear() {
// @@protoc_insertion_point(message_clear_start:record.RecordAllSendTimes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vecsendtimes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordAllSendTimes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .record.RecordOneSendTimes vecSendTimes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vecsendtimes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordAllSendTimes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:record.RecordAllSendTimes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .record.RecordOneSendTimes vecSendTimes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vecsendtimes_size()); i < n; i++) {
    const auto& repfield = this->_internal_vecsendtimes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:record.RecordAllSendTimes)
  return target;
}

size_t RecordAllSendTimes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:record.RecordAllSendTimes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .record.RecordOneSendTimes vecSendTimes = 1;
  total_size += 1UL * this->_internal_vecsendtimes_size();
  for (const auto& msg : this->vecsendtimes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordAllSendTimes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordAllSendTimes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordAllSendTimes::GetClassData() const { return &_class_data_; }

void RecordAllSendTimes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecordAllSendTimes *>(to)->MergeFrom(
      static_cast<const RecordAllSendTimes &>(from));
}


void RecordAllSendTimes::MergeFrom(const RecordAllSendTimes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:record.RecordAllSendTimes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vecsendtimes_.MergeFrom(from.vecsendtimes_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordAllSendTimes::CopyFrom(const RecordAllSendTimes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:record.RecordAllSendTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordAllSendTimes::IsInitialized() const {
  return true;
}

void RecordAllSendTimes::InternalSwap(RecordAllSendTimes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vecsendtimes_.InternalSwap(&other->vecsendtimes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordAllSendTimes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_recordfriend_2eproto_getter, &descriptor_table_recordfriend_2eproto_once,
      file_level_metadata_recordfriend_2eproto[15]);
}

// ===================================================================

class RecordOneSendTimes::_Internal {
 public:
};

RecordOneSendTimes::RecordOneSendTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:record.RecordOneSendTimes)
}
RecordOneSendTimes::RecordOneSendTimes(const RecordOneSendTimes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&llroleid_, &from.llroleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&uitimes_) -
    reinterpret_cast<char*>(&llroleid_)) + sizeof(uitimes_));
  // @@protoc_insertion_point(copy_constructor:record.RecordOneSendTimes)
}

inline void RecordOneSendTimes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&llroleid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uitimes_) -
    reinterpret_cast<char*>(&llroleid_)) + sizeof(uitimes_));
}

RecordOneSendTimes::~RecordOneSendTimes() {
  // @@protoc_insertion_point(destructor:record.RecordOneSendTimes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordOneSendTimes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecordOneSendTimes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordOneSendTimes::Clear() {
// @@protoc_insertion_point(message_clear_start:record.RecordOneSendTimes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&llroleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uitimes_) -
      reinterpret_cast<char*>(&llroleid_)) + sizeof(uitimes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordOneSendTimes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 llRoleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          llroleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiTimes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uitimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordOneSendTimes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:record.RecordOneSendTimes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 llRoleId = 1;
  if (this->_internal_llroleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_llroleid(), target);
  }

  // uint32 uiTimes = 2;
  if (this->_internal_uitimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uitimes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:record.RecordOneSendTimes)
  return target;
}

size_t RecordOneSendTimes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:record.RecordOneSendTimes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 llRoleId = 1;
  if (this->_internal_llroleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_llroleid());
  }

  // uint32 uiTimes = 2;
  if (this->_internal_uitimes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uitimes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordOneSendTimes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordOneSendTimes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordOneSendTimes::GetClassData() const { return &_class_data_; }

void RecordOneSendTimes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecordOneSendTimes *>(to)->MergeFrom(
      static_cast<const RecordOneSendTimes &>(from));
}


void RecordOneSendTimes::MergeFrom(const RecordOneSendTimes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:record.RecordOneSendTimes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_llroleid() != 0) {
    _internal_set_llroleid(from._internal_llroleid());
  }
  if (from._internal_uitimes() != 0) {
    _internal_set_uitimes(from._internal_uitimes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordOneSendTimes::CopyFrom(const RecordOneSendTimes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:record.RecordOneSendTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordOneSendTimes::IsInitialized() const {
  return true;
}

void RecordOneSendTimes::InternalSwap(RecordOneSendTimes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordOneSendTimes, uitimes_)
      + sizeof(RecordOneSendTimes::uitimes_)
      - PROTOBUF_FIELD_OFFSET(RecordOneSendTimes, llroleid_)>(
          reinterpret_cast<char*>(&llroleid_),
          reinterpret_cast<char*>(&other->llroleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordOneSendTimes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_recordfriend_2eproto_getter, &descriptor_table_recordfriend_2eproto_once,
      file_level_metadata_recordfriend_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace record
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::record::RecordModuleFriend*
Arena::CreateMaybeMessage< ::record::RecordModuleFriend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::record::RecordModuleFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::record::RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::record::RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::record::RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::record::RecordSendGiftVersion*
Arena::CreateMaybeMessage< ::record::RecordSendGiftVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::record::RecordSendGiftVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::record::RecordSendGift*
Arena::CreateMaybeMessage< ::record::RecordSendGift >(Arena* arena) {
  return Arena::CreateMessageInternal< ::record::RecordSendGift >(arena);
}
template<> PROTOBUF_NOINLINE ::record::RecordFriendData*
Arena::CreateMaybeMessage< ::record::RecordFriendData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::record::RecordFriendData >(arena);
}
template<> PROTOBUF_NOINLINE ::record::RecordFriendSvrBrief_MapVersionsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::record::RecordFriendSvrBrief_MapVersionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::record::RecordFriendSvrBrief_MapVersionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::record::RecordFriendSvrBrief*
Arena::CreateMaybeMessage< ::record::RecordFriendSvrBrief >(Arena* arena) {
  return Arena::CreateMessageInternal< ::record::RecordFriendSvrBrief >(arena);
}
template<> PROTOBUF_NOINLINE ::record::RecordFriendList*
Arena::CreateMaybeMessage< ::record::RecordFriendList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::record::RecordFriendList >(arena);
}
template<> PROTOBUF_NOINLINE ::record::RecordRelationList*
Arena::CreateMaybeMessage< ::record::RecordRelationList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::record::RecordRelationList >(arena);
}
template<> PROTOBUF_NOINLINE ::record::RecordFriendRelation*
Arena::CreateMaybeMessage< ::record::RecordFriendRelation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::record::RecordFriendRelation >(arena);
}
template<> PROTOBUF_NOINLINE ::record::RecordRequestList*
Arena::CreateMaybeMessage< ::record::RecordRequestList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::record::RecordRequestList >(arena);
}
template<> PROTOBUF_NOINLINE ::record::RecordBlockList*
Arena::CreateMaybeMessage< ::record::RecordBlockList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::record::RecordBlockList >(arena);
}
template<> PROTOBUF_NOINLINE ::record::RecordRecommendFilter*
Arena::CreateMaybeMessage< ::record::RecordRecommendFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::record::RecordRecommendFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::record::RecordRecommendLabel*
Arena::CreateMaybeMessage< ::record::RecordRecommendLabel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::record::RecordRecommendLabel >(arena);
}
template<> PROTOBUF_NOINLINE ::record::RecordSendGiftTimes*
Arena::CreateMaybeMessage< ::record::RecordSendGiftTimes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::record::RecordSendGiftTimes >(arena);
}
template<> PROTOBUF_NOINLINE ::record::RecordAllSendTimes*
Arena::CreateMaybeMessage< ::record::RecordAllSendTimes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::record::RecordAllSendTimes >(arena);
}
template<> PROTOBUF_NOINLINE ::record::RecordOneSendTimes*
Arena::CreateMaybeMessage< ::record::RecordOneSendTimes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::record::RecordOneSendTimes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
