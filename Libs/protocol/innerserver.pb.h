// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: innerserver.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_innerserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_innerserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_innerserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_innerserver_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_innerserver_2eproto;
namespace inner {
class InnerGroupInfo;
struct InnerGroupInfoDefaultTypeInternal;
extern InnerGroupInfoDefaultTypeInternal _InnerGroupInfo_default_instance_;
class InnerServerInfo;
struct InnerServerInfoDefaultTypeInternal;
extern InnerServerInfoDefaultTypeInternal _InnerServerInfo_default_instance_;
class InnerZoneInfo;
struct InnerZoneInfoDefaultTypeInternal;
extern InnerZoneInfoDefaultTypeInternal _InnerZoneInfo_default_instance_;
}  // namespace inner
PROTOBUF_NAMESPACE_OPEN
template<> ::inner::InnerGroupInfo* Arena::CreateMaybeMessage<::inner::InnerGroupInfo>(Arena*);
template<> ::inner::InnerServerInfo* Arena::CreateMaybeMessage<::inner::InnerServerInfo>(Arena*);
template<> ::inner::InnerZoneInfo* Arena::CreateMaybeMessage<::inner::InnerZoneInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inner {

// ===================================================================

class InnerServerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerServerInfo) */ {
 public:
  inline InnerServerInfo() : InnerServerInfo(nullptr) {}
  ~InnerServerInfo() override;
  explicit PROTOBUF_CONSTEXPR InnerServerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerServerInfo(const InnerServerInfo& from);
  InnerServerInfo(InnerServerInfo&& from) noexcept
    : InnerServerInfo() {
    *this = ::std::move(from);
  }

  inline InnerServerInfo& operator=(const InnerServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerServerInfo& operator=(InnerServerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerServerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerServerInfo* internal_default_instance() {
    return reinterpret_cast<const InnerServerInfo*>(
               &_InnerServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InnerServerInfo& a, InnerServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerServerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerServerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerServerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerServerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerServerInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerServerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerServerInfo";
  }
  protected:
  explicit InnerServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInIpFieldNumber = 1,
    kOutIpFieldNumber = 3,
    kInPortFieldNumber = 2,
    kTcpPortFieldNumber = 4,
    kWsPortFieldNumber = 5,
    kWssPortFieldNumber = 6,
  };
  // string inIp = 1;
  void clear_inip();
  const std::string& inip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inip();
  PROTOBUF_NODISCARD std::string* release_inip();
  void set_allocated_inip(std::string* inip);
  private:
  const std::string& _internal_inip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inip(const std::string& value);
  std::string* _internal_mutable_inip();
  public:

  // string outIp = 3;
  void clear_outip();
  const std::string& outip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outip();
  PROTOBUF_NODISCARD std::string* release_outip();
  void set_allocated_outip(std::string* outip);
  private:
  const std::string& _internal_outip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outip(const std::string& value);
  std::string* _internal_mutable_outip();
  public:

  // uint32 inPort = 2;
  void clear_inport();
  uint32_t inport() const;
  void set_inport(uint32_t value);
  private:
  uint32_t _internal_inport() const;
  void _internal_set_inport(uint32_t value);
  public:

  // uint32 tcpPort = 4;
  void clear_tcpport();
  uint32_t tcpport() const;
  void set_tcpport(uint32_t value);
  private:
  uint32_t _internal_tcpport() const;
  void _internal_set_tcpport(uint32_t value);
  public:

  // uint32 wsPort = 5;
  void clear_wsport();
  uint32_t wsport() const;
  void set_wsport(uint32_t value);
  private:
  uint32_t _internal_wsport() const;
  void _internal_set_wsport(uint32_t value);
  public:

  // uint32 wssPort = 6;
  void clear_wssport();
  uint32_t wssport() const;
  void set_wssport(uint32_t value);
  private:
  uint32_t _internal_wssport() const;
  void _internal_set_wssport(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerServerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outip_;
  uint32_t inport_;
  uint32_t tcpport_;
  uint32_t wsport_;
  uint32_t wssport_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innerserver_2eproto;
};
// -------------------------------------------------------------------

class InnerZoneInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerZoneInfo) */ {
 public:
  inline InnerZoneInfo() : InnerZoneInfo(nullptr) {}
  ~InnerZoneInfo() override;
  explicit PROTOBUF_CONSTEXPR InnerZoneInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerZoneInfo(const InnerZoneInfo& from);
  InnerZoneInfo(InnerZoneInfo&& from) noexcept
    : InnerZoneInfo() {
    *this = ::std::move(from);
  }

  inline InnerZoneInfo& operator=(const InnerZoneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerZoneInfo& operator=(InnerZoneInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerZoneInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerZoneInfo* internal_default_instance() {
    return reinterpret_cast<const InnerZoneInfo*>(
               &_InnerZoneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InnerZoneInfo& a, InnerZoneInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerZoneInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerZoneInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerZoneInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerZoneInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerZoneInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerZoneInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerZoneInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerZoneInfo";
  }
  protected:
  explicit InnerZoneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZoneNameFieldNumber = 3,
    kRedisUrlFieldNumber = 5,
    kMysqlUrlFieldNumber = 6,
    kZoneIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kOpenTimeFieldNumber = 4,
  };
  // string zoneName = 3;
  void clear_zonename();
  const std::string& zonename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zonename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zonename();
  PROTOBUF_NODISCARD std::string* release_zonename();
  void set_allocated_zonename(std::string* zonename);
  private:
  const std::string& _internal_zonename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zonename(const std::string& value);
  std::string* _internal_mutable_zonename();
  public:

  // string redisUrl = 5;
  void clear_redisurl();
  const std::string& redisurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_redisurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_redisurl();
  PROTOBUF_NODISCARD std::string* release_redisurl();
  void set_allocated_redisurl(std::string* redisurl);
  private:
  const std::string& _internal_redisurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_redisurl(const std::string& value);
  std::string* _internal_mutable_redisurl();
  public:

  // string mysqlUrl = 6;
  void clear_mysqlurl();
  const std::string& mysqlurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mysqlurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mysqlurl();
  PROTOBUF_NODISCARD std::string* release_mysqlurl();
  void set_allocated_mysqlurl(std::string* mysqlurl);
  private:
  const std::string& _internal_mysqlurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mysqlurl(const std::string& value);
  std::string* _internal_mutable_mysqlurl();
  public:

  // uint32 zoneId = 1;
  void clear_zoneid();
  uint32_t zoneid() const;
  void set_zoneid(uint32_t value);
  private:
  uint32_t _internal_zoneid() const;
  void _internal_set_zoneid(uint32_t value);
  public:

  // uint32 groupId = 2;
  void clear_groupid();
  uint32_t groupid() const;
  void set_groupid(uint32_t value);
  private:
  uint32_t _internal_groupid() const;
  void _internal_set_groupid(uint32_t value);
  public:

  // uint32 openTime = 4;
  void clear_opentime();
  uint32_t opentime() const;
  void set_opentime(uint32_t value);
  private:
  uint32_t _internal_opentime() const;
  void _internal_set_opentime(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerZoneInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zonename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redisurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mysqlurl_;
  uint32_t zoneid_;
  uint32_t groupid_;
  uint32_t opentime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innerserver_2eproto;
};
// -------------------------------------------------------------------

class InnerGroupInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerGroupInfo) */ {
 public:
  inline InnerGroupInfo() : InnerGroupInfo(nullptr) {}
  ~InnerGroupInfo() override;
  explicit PROTOBUF_CONSTEXPR InnerGroupInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGroupInfo(const InnerGroupInfo& from);
  InnerGroupInfo(InnerGroupInfo&& from) noexcept
    : InnerGroupInfo() {
    *this = ::std::move(from);
  }

  inline InnerGroupInfo& operator=(const InnerGroupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGroupInfo& operator=(InnerGroupInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGroupInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGroupInfo* internal_default_instance() {
    return reinterpret_cast<const InnerGroupInfo*>(
               &_InnerGroupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InnerGroupInfo& a, InnerGroupInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGroupInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGroupInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGroupInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGroupInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerGroupInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerGroupInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerGroupInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGroupInfo";
  }
  protected:
  explicit InnerGroupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupNameFieldNumber = 2,
    kGroupIdFieldNumber = 1,
  };
  // string groupName = 2;
  void clear_groupname();
  const std::string& groupname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_groupname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_groupname();
  PROTOBUF_NODISCARD std::string* release_groupname();
  void set_allocated_groupname(std::string* groupname);
  private:
  const std::string& _internal_groupname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_groupname(const std::string& value);
  std::string* _internal_mutable_groupname();
  public:

  // uint32 groupId = 1;
  void clear_groupid();
  uint32_t groupid() const;
  void set_groupid(uint32_t value);
  private:
  uint32_t _internal_groupid() const;
  void _internal_set_groupid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerGroupInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupname_;
  uint32_t groupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innerserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InnerServerInfo

// string inIp = 1;
inline void InnerServerInfo::clear_inip() {
  inip_.ClearToEmpty();
}
inline const std::string& InnerServerInfo::inip() const {
  // @@protoc_insertion_point(field_get:inner.InnerServerInfo.inIp)
  return _internal_inip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InnerServerInfo::set_inip(ArgT0&& arg0, ArgT... args) {
 
 inip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inner.InnerServerInfo.inIp)
}
inline std::string* InnerServerInfo::mutable_inip() {
  std::string* _s = _internal_mutable_inip();
  // @@protoc_insertion_point(field_mutable:inner.InnerServerInfo.inIp)
  return _s;
}
inline const std::string& InnerServerInfo::_internal_inip() const {
  return inip_.Get();
}
inline void InnerServerInfo::_internal_set_inip(const std::string& value) {
  
  inip_.Set(value, GetArenaForAllocation());
}
inline std::string* InnerServerInfo::_internal_mutable_inip() {
  
  return inip_.Mutable(GetArenaForAllocation());
}
inline std::string* InnerServerInfo::release_inip() {
  // @@protoc_insertion_point(field_release:inner.InnerServerInfo.inIp)
  return inip_.Release();
}
inline void InnerServerInfo::set_allocated_inip(std::string* inip) {
  if (inip != nullptr) {
    
  } else {
    
  }
  inip_.SetAllocated(inip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (inip_.IsDefault()) {
    inip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inner.InnerServerInfo.inIp)
}

// uint32 inPort = 2;
inline void InnerServerInfo::clear_inport() {
  inport_ = 0u;
}
inline uint32_t InnerServerInfo::_internal_inport() const {
  return inport_;
}
inline uint32_t InnerServerInfo::inport() const {
  // @@protoc_insertion_point(field_get:inner.InnerServerInfo.inPort)
  return _internal_inport();
}
inline void InnerServerInfo::_internal_set_inport(uint32_t value) {
  
  inport_ = value;
}
inline void InnerServerInfo::set_inport(uint32_t value) {
  _internal_set_inport(value);
  // @@protoc_insertion_point(field_set:inner.InnerServerInfo.inPort)
}

// string outIp = 3;
inline void InnerServerInfo::clear_outip() {
  outip_.ClearToEmpty();
}
inline const std::string& InnerServerInfo::outip() const {
  // @@protoc_insertion_point(field_get:inner.InnerServerInfo.outIp)
  return _internal_outip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InnerServerInfo::set_outip(ArgT0&& arg0, ArgT... args) {
 
 outip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inner.InnerServerInfo.outIp)
}
inline std::string* InnerServerInfo::mutable_outip() {
  std::string* _s = _internal_mutable_outip();
  // @@protoc_insertion_point(field_mutable:inner.InnerServerInfo.outIp)
  return _s;
}
inline const std::string& InnerServerInfo::_internal_outip() const {
  return outip_.Get();
}
inline void InnerServerInfo::_internal_set_outip(const std::string& value) {
  
  outip_.Set(value, GetArenaForAllocation());
}
inline std::string* InnerServerInfo::_internal_mutable_outip() {
  
  return outip_.Mutable(GetArenaForAllocation());
}
inline std::string* InnerServerInfo::release_outip() {
  // @@protoc_insertion_point(field_release:inner.InnerServerInfo.outIp)
  return outip_.Release();
}
inline void InnerServerInfo::set_allocated_outip(std::string* outip) {
  if (outip != nullptr) {
    
  } else {
    
  }
  outip_.SetAllocated(outip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (outip_.IsDefault()) {
    outip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inner.InnerServerInfo.outIp)
}

// uint32 tcpPort = 4;
inline void InnerServerInfo::clear_tcpport() {
  tcpport_ = 0u;
}
inline uint32_t InnerServerInfo::_internal_tcpport() const {
  return tcpport_;
}
inline uint32_t InnerServerInfo::tcpport() const {
  // @@protoc_insertion_point(field_get:inner.InnerServerInfo.tcpPort)
  return _internal_tcpport();
}
inline void InnerServerInfo::_internal_set_tcpport(uint32_t value) {
  
  tcpport_ = value;
}
inline void InnerServerInfo::set_tcpport(uint32_t value) {
  _internal_set_tcpport(value);
  // @@protoc_insertion_point(field_set:inner.InnerServerInfo.tcpPort)
}

// uint32 wsPort = 5;
inline void InnerServerInfo::clear_wsport() {
  wsport_ = 0u;
}
inline uint32_t InnerServerInfo::_internal_wsport() const {
  return wsport_;
}
inline uint32_t InnerServerInfo::wsport() const {
  // @@protoc_insertion_point(field_get:inner.InnerServerInfo.wsPort)
  return _internal_wsport();
}
inline void InnerServerInfo::_internal_set_wsport(uint32_t value) {
  
  wsport_ = value;
}
inline void InnerServerInfo::set_wsport(uint32_t value) {
  _internal_set_wsport(value);
  // @@protoc_insertion_point(field_set:inner.InnerServerInfo.wsPort)
}

// uint32 wssPort = 6;
inline void InnerServerInfo::clear_wssport() {
  wssport_ = 0u;
}
inline uint32_t InnerServerInfo::_internal_wssport() const {
  return wssport_;
}
inline uint32_t InnerServerInfo::wssport() const {
  // @@protoc_insertion_point(field_get:inner.InnerServerInfo.wssPort)
  return _internal_wssport();
}
inline void InnerServerInfo::_internal_set_wssport(uint32_t value) {
  
  wssport_ = value;
}
inline void InnerServerInfo::set_wssport(uint32_t value) {
  _internal_set_wssport(value);
  // @@protoc_insertion_point(field_set:inner.InnerServerInfo.wssPort)
}

// -------------------------------------------------------------------

// InnerZoneInfo

// uint32 zoneId = 1;
inline void InnerZoneInfo::clear_zoneid() {
  zoneid_ = 0u;
}
inline uint32_t InnerZoneInfo::_internal_zoneid() const {
  return zoneid_;
}
inline uint32_t InnerZoneInfo::zoneid() const {
  // @@protoc_insertion_point(field_get:inner.InnerZoneInfo.zoneId)
  return _internal_zoneid();
}
inline void InnerZoneInfo::_internal_set_zoneid(uint32_t value) {
  
  zoneid_ = value;
}
inline void InnerZoneInfo::set_zoneid(uint32_t value) {
  _internal_set_zoneid(value);
  // @@protoc_insertion_point(field_set:inner.InnerZoneInfo.zoneId)
}

// uint32 groupId = 2;
inline void InnerZoneInfo::clear_groupid() {
  groupid_ = 0u;
}
inline uint32_t InnerZoneInfo::_internal_groupid() const {
  return groupid_;
}
inline uint32_t InnerZoneInfo::groupid() const {
  // @@protoc_insertion_point(field_get:inner.InnerZoneInfo.groupId)
  return _internal_groupid();
}
inline void InnerZoneInfo::_internal_set_groupid(uint32_t value) {
  
  groupid_ = value;
}
inline void InnerZoneInfo::set_groupid(uint32_t value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:inner.InnerZoneInfo.groupId)
}

// string zoneName = 3;
inline void InnerZoneInfo::clear_zonename() {
  zonename_.ClearToEmpty();
}
inline const std::string& InnerZoneInfo::zonename() const {
  // @@protoc_insertion_point(field_get:inner.InnerZoneInfo.zoneName)
  return _internal_zonename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InnerZoneInfo::set_zonename(ArgT0&& arg0, ArgT... args) {
 
 zonename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inner.InnerZoneInfo.zoneName)
}
inline std::string* InnerZoneInfo::mutable_zonename() {
  std::string* _s = _internal_mutable_zonename();
  // @@protoc_insertion_point(field_mutable:inner.InnerZoneInfo.zoneName)
  return _s;
}
inline const std::string& InnerZoneInfo::_internal_zonename() const {
  return zonename_.Get();
}
inline void InnerZoneInfo::_internal_set_zonename(const std::string& value) {
  
  zonename_.Set(value, GetArenaForAllocation());
}
inline std::string* InnerZoneInfo::_internal_mutable_zonename() {
  
  return zonename_.Mutable(GetArenaForAllocation());
}
inline std::string* InnerZoneInfo::release_zonename() {
  // @@protoc_insertion_point(field_release:inner.InnerZoneInfo.zoneName)
  return zonename_.Release();
}
inline void InnerZoneInfo::set_allocated_zonename(std::string* zonename) {
  if (zonename != nullptr) {
    
  } else {
    
  }
  zonename_.SetAllocated(zonename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (zonename_.IsDefault()) {
    zonename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inner.InnerZoneInfo.zoneName)
}

// uint32 openTime = 4;
inline void InnerZoneInfo::clear_opentime() {
  opentime_ = 0u;
}
inline uint32_t InnerZoneInfo::_internal_opentime() const {
  return opentime_;
}
inline uint32_t InnerZoneInfo::opentime() const {
  // @@protoc_insertion_point(field_get:inner.InnerZoneInfo.openTime)
  return _internal_opentime();
}
inline void InnerZoneInfo::_internal_set_opentime(uint32_t value) {
  
  opentime_ = value;
}
inline void InnerZoneInfo::set_opentime(uint32_t value) {
  _internal_set_opentime(value);
  // @@protoc_insertion_point(field_set:inner.InnerZoneInfo.openTime)
}

// string redisUrl = 5;
inline void InnerZoneInfo::clear_redisurl() {
  redisurl_.ClearToEmpty();
}
inline const std::string& InnerZoneInfo::redisurl() const {
  // @@protoc_insertion_point(field_get:inner.InnerZoneInfo.redisUrl)
  return _internal_redisurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InnerZoneInfo::set_redisurl(ArgT0&& arg0, ArgT... args) {
 
 redisurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inner.InnerZoneInfo.redisUrl)
}
inline std::string* InnerZoneInfo::mutable_redisurl() {
  std::string* _s = _internal_mutable_redisurl();
  // @@protoc_insertion_point(field_mutable:inner.InnerZoneInfo.redisUrl)
  return _s;
}
inline const std::string& InnerZoneInfo::_internal_redisurl() const {
  return redisurl_.Get();
}
inline void InnerZoneInfo::_internal_set_redisurl(const std::string& value) {
  
  redisurl_.Set(value, GetArenaForAllocation());
}
inline std::string* InnerZoneInfo::_internal_mutable_redisurl() {
  
  return redisurl_.Mutable(GetArenaForAllocation());
}
inline std::string* InnerZoneInfo::release_redisurl() {
  // @@protoc_insertion_point(field_release:inner.InnerZoneInfo.redisUrl)
  return redisurl_.Release();
}
inline void InnerZoneInfo::set_allocated_redisurl(std::string* redisurl) {
  if (redisurl != nullptr) {
    
  } else {
    
  }
  redisurl_.SetAllocated(redisurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (redisurl_.IsDefault()) {
    redisurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inner.InnerZoneInfo.redisUrl)
}

// string mysqlUrl = 6;
inline void InnerZoneInfo::clear_mysqlurl() {
  mysqlurl_.ClearToEmpty();
}
inline const std::string& InnerZoneInfo::mysqlurl() const {
  // @@protoc_insertion_point(field_get:inner.InnerZoneInfo.mysqlUrl)
  return _internal_mysqlurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InnerZoneInfo::set_mysqlurl(ArgT0&& arg0, ArgT... args) {
 
 mysqlurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inner.InnerZoneInfo.mysqlUrl)
}
inline std::string* InnerZoneInfo::mutable_mysqlurl() {
  std::string* _s = _internal_mutable_mysqlurl();
  // @@protoc_insertion_point(field_mutable:inner.InnerZoneInfo.mysqlUrl)
  return _s;
}
inline const std::string& InnerZoneInfo::_internal_mysqlurl() const {
  return mysqlurl_.Get();
}
inline void InnerZoneInfo::_internal_set_mysqlurl(const std::string& value) {
  
  mysqlurl_.Set(value, GetArenaForAllocation());
}
inline std::string* InnerZoneInfo::_internal_mutable_mysqlurl() {
  
  return mysqlurl_.Mutable(GetArenaForAllocation());
}
inline std::string* InnerZoneInfo::release_mysqlurl() {
  // @@protoc_insertion_point(field_release:inner.InnerZoneInfo.mysqlUrl)
  return mysqlurl_.Release();
}
inline void InnerZoneInfo::set_allocated_mysqlurl(std::string* mysqlurl) {
  if (mysqlurl != nullptr) {
    
  } else {
    
  }
  mysqlurl_.SetAllocated(mysqlurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mysqlurl_.IsDefault()) {
    mysqlurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inner.InnerZoneInfo.mysqlUrl)
}

// -------------------------------------------------------------------

// InnerGroupInfo

// uint32 groupId = 1;
inline void InnerGroupInfo::clear_groupid() {
  groupid_ = 0u;
}
inline uint32_t InnerGroupInfo::_internal_groupid() const {
  return groupid_;
}
inline uint32_t InnerGroupInfo::groupid() const {
  // @@protoc_insertion_point(field_get:inner.InnerGroupInfo.groupId)
  return _internal_groupid();
}
inline void InnerGroupInfo::_internal_set_groupid(uint32_t value) {
  
  groupid_ = value;
}
inline void InnerGroupInfo::set_groupid(uint32_t value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:inner.InnerGroupInfo.groupId)
}

// string groupName = 2;
inline void InnerGroupInfo::clear_groupname() {
  groupname_.ClearToEmpty();
}
inline const std::string& InnerGroupInfo::groupname() const {
  // @@protoc_insertion_point(field_get:inner.InnerGroupInfo.groupName)
  return _internal_groupname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InnerGroupInfo::set_groupname(ArgT0&& arg0, ArgT... args) {
 
 groupname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inner.InnerGroupInfo.groupName)
}
inline std::string* InnerGroupInfo::mutable_groupname() {
  std::string* _s = _internal_mutable_groupname();
  // @@protoc_insertion_point(field_mutable:inner.InnerGroupInfo.groupName)
  return _s;
}
inline const std::string& InnerGroupInfo::_internal_groupname() const {
  return groupname_.Get();
}
inline void InnerGroupInfo::_internal_set_groupname(const std::string& value) {
  
  groupname_.Set(value, GetArenaForAllocation());
}
inline std::string* InnerGroupInfo::_internal_mutable_groupname() {
  
  return groupname_.Mutable(GetArenaForAllocation());
}
inline std::string* InnerGroupInfo::release_groupname() {
  // @@protoc_insertion_point(field_release:inner.InnerGroupInfo.groupName)
  return groupname_.Release();
}
inline void InnerGroupInfo::set_allocated_groupname(std::string* groupname) {
  if (groupname != nullptr) {
    
  } else {
    
  }
  groupname_.SetAllocated(groupname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (groupname_.IsDefault()) {
    groupname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGroupInfo.groupName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace inner

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_innerserver_2eproto
