// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: record.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_record_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_record_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "recordfriend.pb.h"
#include "recorditem.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_record_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_record_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_record_2eproto;
namespace record {
class RecordModule;
struct RecordModuleDefaultTypeInternal;
extern RecordModuleDefaultTypeInternal _RecordModule_default_instance_;
class RecordModuleAll;
struct RecordModuleAllDefaultTypeInternal;
extern RecordModuleAllDefaultTypeInternal _RecordModuleAll_default_instance_;
class RecordModuleAll_ModulesEntry_DoNotUse;
struct RecordModuleAll_ModulesEntry_DoNotUseDefaultTypeInternal;
extern RecordModuleAll_ModulesEntry_DoNotUseDefaultTypeInternal _RecordModuleAll_ModulesEntry_DoNotUse_default_instance_;
}  // namespace record
PROTOBUF_NAMESPACE_OPEN
template<> ::record::RecordModule* Arena::CreateMaybeMessage<::record::RecordModule>(Arena*);
template<> ::record::RecordModuleAll* Arena::CreateMaybeMessage<::record::RecordModuleAll>(Arena*);
template<> ::record::RecordModuleAll_ModulesEntry_DoNotUse* Arena::CreateMaybeMessage<::record::RecordModuleAll_ModulesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace record {

// ===================================================================

class RecordModuleAll_ModulesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RecordModuleAll_ModulesEntry_DoNotUse, 
    uint32_t, ::record::RecordModule,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RecordModuleAll_ModulesEntry_DoNotUse, 
    uint32_t, ::record::RecordModule,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  RecordModuleAll_ModulesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR RecordModuleAll_ModulesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit RecordModuleAll_ModulesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RecordModuleAll_ModulesEntry_DoNotUse& other);
  static const RecordModuleAll_ModulesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RecordModuleAll_ModulesEntry_DoNotUse*>(&_RecordModuleAll_ModulesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_record_2eproto;
};

// -------------------------------------------------------------------

class RecordModuleAll final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:record.RecordModuleAll) */ {
 public:
  inline RecordModuleAll() : RecordModuleAll(nullptr) {}
  ~RecordModuleAll() override;
  explicit PROTOBUF_CONSTEXPR RecordModuleAll(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordModuleAll(const RecordModuleAll& from);
  RecordModuleAll(RecordModuleAll&& from) noexcept
    : RecordModuleAll() {
    *this = ::std::move(from);
  }

  inline RecordModuleAll& operator=(const RecordModuleAll& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordModuleAll& operator=(RecordModuleAll&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordModuleAll& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordModuleAll* internal_default_instance() {
    return reinterpret_cast<const RecordModuleAll*>(
               &_RecordModuleAll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RecordModuleAll& a, RecordModuleAll& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordModuleAll* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordModuleAll* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordModuleAll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordModuleAll>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordModuleAll& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordModuleAll& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordModuleAll* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "record.RecordModuleAll";
  }
  protected:
  explicit RecordModuleAll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kModulesFieldNumber = 1,
  };
  // map<uint32, .record.RecordModule> modules = 1;
  int modules_size() const;
  private:
  int _internal_modules_size() const;
  public:
  void clear_modules();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::record::RecordModule >&
      _internal_modules() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::record::RecordModule >*
      _internal_mutable_modules();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::record::RecordModule >&
      modules() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::record::RecordModule >*
      mutable_modules();

  // @@protoc_insertion_point(class_scope:record.RecordModuleAll)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RecordModuleAll_ModulesEntry_DoNotUse,
      uint32_t, ::record::RecordModule,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> modules_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_record_2eproto;
};
// -------------------------------------------------------------------

class RecordModule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:record.RecordModule) */ {
 public:
  inline RecordModule() : RecordModule(nullptr) {}
  ~RecordModule() override;
  explicit PROTOBUF_CONSTEXPR RecordModule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordModule(const RecordModule& from);
  RecordModule(RecordModule&& from) noexcept
    : RecordModule() {
    *this = ::std::move(from);
  }

  inline RecordModule& operator=(const RecordModule& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordModule& operator=(RecordModule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordModule& default_instance() {
    return *internal_default_instance();
  }
  enum OModuleCase {
    kItem = 1,
    kFriend = 2,
    OMODULE_NOT_SET = 0,
  };

  static inline const RecordModule* internal_default_instance() {
    return reinterpret_cast<const RecordModule*>(
               &_RecordModule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RecordModule& a, RecordModule& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordModule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordModule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordModule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordModule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordModule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordModule& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordModule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "record.RecordModule";
  }
  protected:
  explicit RecordModule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
    kFriendFieldNumber = 2,
  };
  // .record.RecordModuleItem item = 1;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::record::RecordModuleItem& item() const;
  PROTOBUF_NODISCARD ::record::RecordModuleItem* release_item();
  ::record::RecordModuleItem* mutable_item();
  void set_allocated_item(::record::RecordModuleItem* item);
  private:
  const ::record::RecordModuleItem& _internal_item() const;
  ::record::RecordModuleItem* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::record::RecordModuleItem* item);
  ::record::RecordModuleItem* unsafe_arena_release_item();

  // .record.RecordModuleFriend friend = 2;
  bool has_friend_() const;
  private:
  bool _internal_has_friend_() const;
  public:
  void clear_friend_();
  const ::record::RecordModuleFriend& friend_() const;
  PROTOBUF_NODISCARD ::record::RecordModuleFriend* release_friend_();
  ::record::RecordModuleFriend* mutable_friend_();
  void set_allocated_friend_(::record::RecordModuleFriend* friend_);
  private:
  const ::record::RecordModuleFriend& _internal_friend_() const;
  ::record::RecordModuleFriend* _internal_mutable_friend_();
  public:
  void unsafe_arena_set_allocated_friend_(
      ::record::RecordModuleFriend* friend_);
  ::record::RecordModuleFriend* unsafe_arena_release_friend_();

  void clear_oModule();
  OModuleCase oModule_case() const;
  // @@protoc_insertion_point(class_scope:record.RecordModule)
 private:
  class _Internal;
  void set_has_item();
  void set_has_friend_();

  inline bool has_oModule() const;
  inline void clear_has_oModule();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union OModuleUnion {
    constexpr OModuleUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::record::RecordModuleItem* item_;
    ::record::RecordModuleFriend* friend__;
  } oModule_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_record_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RecordModuleAll

// map<uint32, .record.RecordModule> modules = 1;
inline int RecordModuleAll::_internal_modules_size() const {
  return modules_.size();
}
inline int RecordModuleAll::modules_size() const {
  return _internal_modules_size();
}
inline void RecordModuleAll::clear_modules() {
  modules_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::record::RecordModule >&
RecordModuleAll::_internal_modules() const {
  return modules_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::record::RecordModule >&
RecordModuleAll::modules() const {
  // @@protoc_insertion_point(field_map:record.RecordModuleAll.modules)
  return _internal_modules();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::record::RecordModule >*
RecordModuleAll::_internal_mutable_modules() {
  return modules_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::record::RecordModule >*
RecordModuleAll::mutable_modules() {
  // @@protoc_insertion_point(field_mutable_map:record.RecordModuleAll.modules)
  return _internal_mutable_modules();
}

// -------------------------------------------------------------------

// RecordModule

// .record.RecordModuleItem item = 1;
inline bool RecordModule::_internal_has_item() const {
  return oModule_case() == kItem;
}
inline bool RecordModule::has_item() const {
  return _internal_has_item();
}
inline void RecordModule::set_has_item() {
  _oneof_case_[0] = kItem;
}
inline ::record::RecordModuleItem* RecordModule::release_item() {
  // @@protoc_insertion_point(field_release:record.RecordModule.item)
  if (_internal_has_item()) {
    clear_has_oModule();
    ::record::RecordModuleItem* temp = oModule_.item_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    oModule_.item_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::record::RecordModuleItem& RecordModule::_internal_item() const {
  return _internal_has_item()
      ? *oModule_.item_
      : reinterpret_cast< ::record::RecordModuleItem&>(::record::_RecordModuleItem_default_instance_);
}
inline const ::record::RecordModuleItem& RecordModule::item() const {
  // @@protoc_insertion_point(field_get:record.RecordModule.item)
  return _internal_item();
}
inline ::record::RecordModuleItem* RecordModule::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_unsafe_arena_release:record.RecordModule.item)
  if (_internal_has_item()) {
    clear_has_oModule();
    ::record::RecordModuleItem* temp = oModule_.item_;
    oModule_.item_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RecordModule::unsafe_arena_set_allocated_item(::record::RecordModuleItem* item) {
  clear_oModule();
  if (item) {
    set_has_item();
    oModule_.item_ = item;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:record.RecordModule.item)
}
inline ::record::RecordModuleItem* RecordModule::_internal_mutable_item() {
  if (!_internal_has_item()) {
    clear_oModule();
    set_has_item();
    oModule_.item_ = CreateMaybeMessage< ::record::RecordModuleItem >(GetArenaForAllocation());
  }
  return oModule_.item_;
}
inline ::record::RecordModuleItem* RecordModule::mutable_item() {
  ::record::RecordModuleItem* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:record.RecordModule.item)
  return _msg;
}

// .record.RecordModuleFriend friend = 2;
inline bool RecordModule::_internal_has_friend_() const {
  return oModule_case() == kFriend;
}
inline bool RecordModule::has_friend_() const {
  return _internal_has_friend_();
}
inline void RecordModule::set_has_friend_() {
  _oneof_case_[0] = kFriend;
}
inline ::record::RecordModuleFriend* RecordModule::release_friend_() {
  // @@protoc_insertion_point(field_release:record.RecordModule.friend)
  if (_internal_has_friend_()) {
    clear_has_oModule();
    ::record::RecordModuleFriend* temp = oModule_.friend__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    oModule_.friend__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::record::RecordModuleFriend& RecordModule::_internal_friend_() const {
  return _internal_has_friend_()
      ? *oModule_.friend__
      : reinterpret_cast< ::record::RecordModuleFriend&>(::record::_RecordModuleFriend_default_instance_);
}
inline const ::record::RecordModuleFriend& RecordModule::friend_() const {
  // @@protoc_insertion_point(field_get:record.RecordModule.friend)
  return _internal_friend_();
}
inline ::record::RecordModuleFriend* RecordModule::unsafe_arena_release_friend_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:record.RecordModule.friend)
  if (_internal_has_friend_()) {
    clear_has_oModule();
    ::record::RecordModuleFriend* temp = oModule_.friend__;
    oModule_.friend__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RecordModule::unsafe_arena_set_allocated_friend_(::record::RecordModuleFriend* friend_) {
  clear_oModule();
  if (friend_) {
    set_has_friend_();
    oModule_.friend__ = friend_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:record.RecordModule.friend)
}
inline ::record::RecordModuleFriend* RecordModule::_internal_mutable_friend_() {
  if (!_internal_has_friend_()) {
    clear_oModule();
    set_has_friend_();
    oModule_.friend__ = CreateMaybeMessage< ::record::RecordModuleFriend >(GetArenaForAllocation());
  }
  return oModule_.friend__;
}
inline ::record::RecordModuleFriend* RecordModule::mutable_friend_() {
  ::record::RecordModuleFriend* _msg = _internal_mutable_friend_();
  // @@protoc_insertion_point(field_mutable:record.RecordModule.friend)
  return _msg;
}

inline bool RecordModule::has_oModule() const {
  return oModule_case() != OMODULE_NOT_SET;
}
inline void RecordModule::clear_has_oModule() {
  _oneof_case_[0] = OMODULE_NOT_SET;
}
inline RecordModule::OModuleCase RecordModule::oModule_case() const {
  return RecordModule::OModuleCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace record

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_record_2eproto
