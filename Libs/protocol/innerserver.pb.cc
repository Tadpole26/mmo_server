// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: innerserver.proto

#include "innerserver.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace inner {
PROTOBUF_CONSTEXPR InnerServerInfo::InnerServerInfo(
    ::_pbi::ConstantInitialized)
  : inip_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , outip_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , inport_(0u)
  , tcpport_(0u)
  , wsport_(0u)
  , wssport_(0u){}
struct InnerServerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerServerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerServerInfoDefaultTypeInternal() {}
  union {
    InnerServerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerServerInfoDefaultTypeInternal _InnerServerInfo_default_instance_;
PROTOBUF_CONSTEXPR InnerZoneInfo::InnerZoneInfo(
    ::_pbi::ConstantInitialized)
  : zonename_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , redisurl_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , mysqlurl_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , zoneid_(0u)
  , groupid_(0u)
  , opentime_(0u){}
struct InnerZoneInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerZoneInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerZoneInfoDefaultTypeInternal() {}
  union {
    InnerZoneInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerZoneInfoDefaultTypeInternal _InnerZoneInfo_default_instance_;
PROTOBUF_CONSTEXPR InnerGroupInfo::InnerGroupInfo(
    ::_pbi::ConstantInitialized)
  : groupname_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , groupid_(0u){}
struct InnerGroupInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGroupInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGroupInfoDefaultTypeInternal() {}
  union {
    InnerGroupInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGroupInfoDefaultTypeInternal _InnerGroupInfo_default_instance_;
}  // namespace inner
static ::_pb::Metadata file_level_metadata_innerserver_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_innerserver_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_innerserver_2eproto = nullptr;

const uint32_t TableStruct_innerserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerServerInfo, inip_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerServerInfo, inport_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerServerInfo, outip_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerServerInfo, tcpport_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerServerInfo, wsport_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerServerInfo, wssport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerZoneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerZoneInfo, zoneid_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerZoneInfo, groupid_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerZoneInfo, zonename_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerZoneInfo, opentime_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerZoneInfo, redisurl_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerZoneInfo, mysqlurl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGroupInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGroupInfo, groupid_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerGroupInfo, groupname_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::inner::InnerServerInfo)},
  { 12, -1, -1, sizeof(::inner::InnerZoneInfo)},
  { 24, -1, -1, sizeof(::inner::InnerGroupInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::inner::_InnerServerInfo_default_instance_._instance,
  &::inner::_InnerZoneInfo_default_instance_._instance,
  &::inner::_InnerGroupInfo_default_instance_._instance,
};

const char descriptor_table_protodef_innerserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021innerserver.proto\022\005inner\"p\n\017InnerServe"
  "rInfo\022\014\n\004inIp\030\001 \001(\t\022\016\n\006inPort\030\002 \001(\r\022\r\n\005o"
  "utIp\030\003 \001(\t\022\017\n\007tcpPort\030\004 \001(\r\022\016\n\006wsPort\030\005 "
  "\001(\r\022\017\n\007wssPort\030\006 \001(\r\"x\n\rInnerZoneInfo\022\016\n"
  "\006zoneId\030\001 \001(\r\022\017\n\007groupId\030\002 \001(\r\022\020\n\010zoneNa"
  "me\030\003 \001(\t\022\020\n\010openTime\030\004 \001(\r\022\020\n\010redisUrl\030\005"
  " \001(\t\022\020\n\010mysqlUrl\030\006 \001(\t\"4\n\016InnerGroupInfo"
  "\022\017\n\007groupId\030\001 \001(\r\022\021\n\tgroupName\030\002 \001(\tb\006pr"
  "oto3"
  ;
static ::_pbi::once_flag descriptor_table_innerserver_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_innerserver_2eproto = {
    false, false, 324, descriptor_table_protodef_innerserver_2eproto,
    "innerserver.proto",
    &descriptor_table_innerserver_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_innerserver_2eproto::offsets,
    file_level_metadata_innerserver_2eproto, file_level_enum_descriptors_innerserver_2eproto,
    file_level_service_descriptors_innerserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_innerserver_2eproto_getter() {
  return &descriptor_table_innerserver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_innerserver_2eproto(&descriptor_table_innerserver_2eproto);
namespace inner {

// ===================================================================

class InnerServerInfo::_Internal {
 public:
};

InnerServerInfo::InnerServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerServerInfo)
}
InnerServerInfo::InnerServerInfo(const InnerServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  inip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    inip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_inip().empty()) {
    inip_.Set(from._internal_inip(), 
      GetArenaForAllocation());
  }
  outip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    outip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_outip().empty()) {
    outip_.Set(from._internal_outip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&inport_, &from.inport_,
    static_cast<size_t>(reinterpret_cast<char*>(&wssport_) -
    reinterpret_cast<char*>(&inport_)) + sizeof(wssport_));
  // @@protoc_insertion_point(copy_constructor:inner.InnerServerInfo)
}

inline void InnerServerInfo::SharedCtor() {
inip_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  inip_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
outip_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  outip_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&inport_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&wssport_) -
    reinterpret_cast<char*>(&inport_)) + sizeof(wssport_));
}

InnerServerInfo::~InnerServerInfo() {
  // @@protoc_insertion_point(destructor:inner.InnerServerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerServerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  inip_.Destroy();
  outip_.Destroy();
}

void InnerServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerServerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inip_.ClearToEmpty();
  outip_.ClearToEmpty();
  ::memset(&inport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wssport_) -
      reinterpret_cast<char*>(&inport_)) + sizeof(wssport_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerServerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string inIp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_inip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "inner.InnerServerInfo.inIp"));
        } else
          goto handle_unusual;
        continue;
      // uint32 inPort = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          inport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string outIp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_outip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "inner.InnerServerInfo.outIp"));
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpPort = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          tcpport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 wsPort = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          wsport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 wssPort = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          wssport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerServerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerServerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string inIp = 1;
  if (!this->_internal_inip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inip().data(), static_cast<int>(this->_internal_inip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inner.InnerServerInfo.inIp");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_inip(), target);
  }

  // uint32 inPort = 2;
  if (this->_internal_inport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_inport(), target);
  }

  // string outIp = 3;
  if (!this->_internal_outip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_outip().data(), static_cast<int>(this->_internal_outip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inner.InnerServerInfo.outIp");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_outip(), target);
  }

  // uint32 tcpPort = 4;
  if (this->_internal_tcpport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_tcpport(), target);
  }

  // uint32 wsPort = 5;
  if (this->_internal_wsport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_wsport(), target);
  }

  // uint32 wssPort = 6;
  if (this->_internal_wssport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_wssport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerServerInfo)
  return target;
}

size_t InnerServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerServerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string inIp = 1;
  if (!this->_internal_inip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inip());
  }

  // string outIp = 3;
  if (!this->_internal_outip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outip());
  }

  // uint32 inPort = 2;
  if (this->_internal_inport() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_inport());
  }

  // uint32 tcpPort = 4;
  if (this->_internal_tcpport() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tcpport());
  }

  // uint32 wsPort = 5;
  if (this->_internal_wsport() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_wsport());
  }

  // uint32 wssPort = 6;
  if (this->_internal_wssport() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_wssport());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerServerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerServerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerServerInfo::GetClassData() const { return &_class_data_; }

void InnerServerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerServerInfo *>(to)->MergeFrom(
      static_cast<const InnerServerInfo &>(from));
}


void InnerServerInfo::MergeFrom(const InnerServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_inip().empty()) {
    _internal_set_inip(from._internal_inip());
  }
  if (!from._internal_outip().empty()) {
    _internal_set_outip(from._internal_outip());
  }
  if (from._internal_inport() != 0) {
    _internal_set_inport(from._internal_inport());
  }
  if (from._internal_tcpport() != 0) {
    _internal_set_tcpport(from._internal_tcpport());
  }
  if (from._internal_wsport() != 0) {
    _internal_set_wsport(from._internal_wsport());
  }
  if (from._internal_wssport() != 0) {
    _internal_set_wssport(from._internal_wssport());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerServerInfo::CopyFrom(const InnerServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerServerInfo::IsInitialized() const {
  return true;
}

void InnerServerInfo::InternalSwap(InnerServerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &inip_, lhs_arena,
      &other->inip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &outip_, lhs_arena,
      &other->outip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InnerServerInfo, wssport_)
      + sizeof(InnerServerInfo::wssport_)
      - PROTOBUF_FIELD_OFFSET(InnerServerInfo, inport_)>(
          reinterpret_cast<char*>(&inport_),
          reinterpret_cast<char*>(&other->inport_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerServerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innerserver_2eproto_getter, &descriptor_table_innerserver_2eproto_once,
      file_level_metadata_innerserver_2eproto[0]);
}

// ===================================================================

class InnerZoneInfo::_Internal {
 public:
};

InnerZoneInfo::InnerZoneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerZoneInfo)
}
InnerZoneInfo::InnerZoneInfo(const InnerZoneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  zonename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    zonename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_zonename().empty()) {
    zonename_.Set(from._internal_zonename(), 
      GetArenaForAllocation());
  }
  redisurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    redisurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_redisurl().empty()) {
    redisurl_.Set(from._internal_redisurl(), 
      GetArenaForAllocation());
  }
  mysqlurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mysqlurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mysqlurl().empty()) {
    mysqlurl_.Set(from._internal_mysqlurl(), 
      GetArenaForAllocation());
  }
  ::memcpy(&zoneid_, &from.zoneid_,
    static_cast<size_t>(reinterpret_cast<char*>(&opentime_) -
    reinterpret_cast<char*>(&zoneid_)) + sizeof(opentime_));
  // @@protoc_insertion_point(copy_constructor:inner.InnerZoneInfo)
}

inline void InnerZoneInfo::SharedCtor() {
zonename_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  zonename_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
redisurl_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  redisurl_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mysqlurl_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mysqlurl_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&zoneid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&opentime_) -
    reinterpret_cast<char*>(&zoneid_)) + sizeof(opentime_));
}

InnerZoneInfo::~InnerZoneInfo() {
  // @@protoc_insertion_point(destructor:inner.InnerZoneInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerZoneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  zonename_.Destroy();
  redisurl_.Destroy();
  mysqlurl_.Destroy();
}

void InnerZoneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerZoneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerZoneInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  zonename_.ClearToEmpty();
  redisurl_.ClearToEmpty();
  mysqlurl_.ClearToEmpty();
  ::memset(&zoneid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opentime_) -
      reinterpret_cast<char*>(&zoneid_)) + sizeof(opentime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerZoneInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 zoneId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          zoneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 groupId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string zoneName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_zonename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "inner.InnerZoneInfo.zoneName"));
        } else
          goto handle_unusual;
        continue;
      // uint32 openTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          opentime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string redisUrl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_redisurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "inner.InnerZoneInfo.redisUrl"));
        } else
          goto handle_unusual;
        continue;
      // string mysqlUrl = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_mysqlurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "inner.InnerZoneInfo.mysqlUrl"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerZoneInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerZoneInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 zoneId = 1;
  if (this->_internal_zoneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_zoneid(), target);
  }

  // uint32 groupId = 2;
  if (this->_internal_groupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_groupid(), target);
  }

  // string zoneName = 3;
  if (!this->_internal_zonename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_zonename().data(), static_cast<int>(this->_internal_zonename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inner.InnerZoneInfo.zoneName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_zonename(), target);
  }

  // uint32 openTime = 4;
  if (this->_internal_opentime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_opentime(), target);
  }

  // string redisUrl = 5;
  if (!this->_internal_redisurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_redisurl().data(), static_cast<int>(this->_internal_redisurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inner.InnerZoneInfo.redisUrl");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_redisurl(), target);
  }

  // string mysqlUrl = 6;
  if (!this->_internal_mysqlurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mysqlurl().data(), static_cast<int>(this->_internal_mysqlurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inner.InnerZoneInfo.mysqlUrl");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_mysqlurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerZoneInfo)
  return target;
}

size_t InnerZoneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerZoneInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string zoneName = 3;
  if (!this->_internal_zonename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_zonename());
  }

  // string redisUrl = 5;
  if (!this->_internal_redisurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_redisurl());
  }

  // string mysqlUrl = 6;
  if (!this->_internal_mysqlurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mysqlurl());
  }

  // uint32 zoneId = 1;
  if (this->_internal_zoneid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_zoneid());
  }

  // uint32 groupId = 2;
  if (this->_internal_groupid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_groupid());
  }

  // uint32 openTime = 4;
  if (this->_internal_opentime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_opentime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerZoneInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerZoneInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerZoneInfo::GetClassData() const { return &_class_data_; }

void InnerZoneInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerZoneInfo *>(to)->MergeFrom(
      static_cast<const InnerZoneInfo &>(from));
}


void InnerZoneInfo::MergeFrom(const InnerZoneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerZoneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_zonename().empty()) {
    _internal_set_zonename(from._internal_zonename());
  }
  if (!from._internal_redisurl().empty()) {
    _internal_set_redisurl(from._internal_redisurl());
  }
  if (!from._internal_mysqlurl().empty()) {
    _internal_set_mysqlurl(from._internal_mysqlurl());
  }
  if (from._internal_zoneid() != 0) {
    _internal_set_zoneid(from._internal_zoneid());
  }
  if (from._internal_groupid() != 0) {
    _internal_set_groupid(from._internal_groupid());
  }
  if (from._internal_opentime() != 0) {
    _internal_set_opentime(from._internal_opentime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerZoneInfo::CopyFrom(const InnerZoneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerZoneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerZoneInfo::IsInitialized() const {
  return true;
}

void InnerZoneInfo::InternalSwap(InnerZoneInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &zonename_, lhs_arena,
      &other->zonename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &redisurl_, lhs_arena,
      &other->redisurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mysqlurl_, lhs_arena,
      &other->mysqlurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InnerZoneInfo, opentime_)
      + sizeof(InnerZoneInfo::opentime_)
      - PROTOBUF_FIELD_OFFSET(InnerZoneInfo, zoneid_)>(
          reinterpret_cast<char*>(&zoneid_),
          reinterpret_cast<char*>(&other->zoneid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerZoneInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innerserver_2eproto_getter, &descriptor_table_innerserver_2eproto_once,
      file_level_metadata_innerserver_2eproto[1]);
}

// ===================================================================

class InnerGroupInfo::_Internal {
 public:
};

InnerGroupInfo::InnerGroupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerGroupInfo)
}
InnerGroupInfo::InnerGroupInfo(const InnerGroupInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  groupname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    groupname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_groupname().empty()) {
    groupname_.Set(from._internal_groupname(), 
      GetArenaForAllocation());
  }
  groupid_ = from.groupid_;
  // @@protoc_insertion_point(copy_constructor:inner.InnerGroupInfo)
}

inline void InnerGroupInfo::SharedCtor() {
groupname_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  groupname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
groupid_ = 0u;
}

InnerGroupInfo::~InnerGroupInfo() {
  // @@protoc_insertion_point(destructor:inner.InnerGroupInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerGroupInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  groupname_.Destroy();
}

void InnerGroupInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerGroupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerGroupInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groupname_.ClearToEmpty();
  groupid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerGroupInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 groupId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string groupName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_groupname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "inner.InnerGroupInfo.groupName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerGroupInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerGroupInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 groupId = 1;
  if (this->_internal_groupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_groupid(), target);
  }

  // string groupName = 2;
  if (!this->_internal_groupname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_groupname().data(), static_cast<int>(this->_internal_groupname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inner.InnerGroupInfo.groupName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_groupname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerGroupInfo)
  return target;
}

size_t InnerGroupInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerGroupInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string groupName = 2;
  if (!this->_internal_groupname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_groupname());
  }

  // uint32 groupId = 1;
  if (this->_internal_groupid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_groupid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGroupInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerGroupInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGroupInfo::GetClassData() const { return &_class_data_; }

void InnerGroupInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerGroupInfo *>(to)->MergeFrom(
      static_cast<const InnerGroupInfo &>(from));
}


void InnerGroupInfo::MergeFrom(const InnerGroupInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerGroupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_groupname().empty()) {
    _internal_set_groupname(from._internal_groupname());
  }
  if (from._internal_groupid() != 0) {
    _internal_set_groupid(from._internal_groupid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerGroupInfo::CopyFrom(const InnerGroupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerGroupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerGroupInfo::IsInitialized() const {
  return true;
}

void InnerGroupInfo::InternalSwap(InnerGroupInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &groupname_, lhs_arena,
      &other->groupname_, rhs_arena
  );
  swap(groupid_, other->groupid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerGroupInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innerserver_2eproto_getter, &descriptor_table_innerserver_2eproto_once,
      file_level_metadata_innerserver_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace inner
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::inner::InnerServerInfo*
Arena::CreateMaybeMessage< ::inner::InnerServerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerZoneInfo*
Arena::CreateMaybeMessage< ::inner::InnerZoneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerZoneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGroupInfo*
Arena::CreateMaybeMessage< ::inner::InnerGroupInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGroupInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
