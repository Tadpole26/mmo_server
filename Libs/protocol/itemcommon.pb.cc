// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: itemcommon.proto

#include "itemcommon.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace common {
PROTOBUF_CONSTEXPR ItemBase::ItemBase(
    ::_pbi::ConstantInitialized)
  : uiuid_(0u)
  , uitid_(0u)
  , uicount_(0u)
  , uibind_(0u)
  , uiexpire_(0u)
  , uiquality_(0u)
  , uitradeexpire_(0u)
  , uiprice_(0u)
  , bnotsorted_(false){}
struct ItemBaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemBaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemBaseDefaultTypeInternal() {}
  union {
    ItemBase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemBaseDefaultTypeInternal _ItemBase_default_instance_;
PROTOBUF_CONSTEXPR Item::Item(
    ::_pbi::ConstantInitialized)
  : obase_(nullptr){}
struct ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemDefaultTypeInternal() {}
  union {
    Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemDefaultTypeInternal _Item_default_instance_;
}  // namespace common
static ::_pb::Metadata file_level_metadata_itemcommon_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_itemcommon_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_itemcommon_2eproto = nullptr;

const uint32_t TableStruct_itemcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ItemBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ItemBase, uiuid_),
  PROTOBUF_FIELD_OFFSET(::common::ItemBase, uitid_),
  PROTOBUF_FIELD_OFFSET(::common::ItemBase, uicount_),
  PROTOBUF_FIELD_OFFSET(::common::ItemBase, uibind_),
  PROTOBUF_FIELD_OFFSET(::common::ItemBase, uiexpire_),
  PROTOBUF_FIELD_OFFSET(::common::ItemBase, uiquality_),
  PROTOBUF_FIELD_OFFSET(::common::ItemBase, uitradeexpire_),
  PROTOBUF_FIELD_OFFSET(::common::ItemBase, uiprice_),
  PROTOBUF_FIELD_OFFSET(::common::ItemBase, bnotsorted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::Item, obase_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::common::ItemBase)},
  { 15, -1, -1, sizeof(::common::Item)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::common::_ItemBase_default_instance_._instance,
  &::common::_Item_default_instance_._instance,
};

const char descriptor_table_protodef_itemcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020itemcommon.proto\022\006common\"\252\001\n\010ItemBase\022"
  "\r\n\005uiUid\030\001 \001(\r\022\r\n\005uiTid\030\002 \001(\r\022\017\n\007uiCount"
  "\030\003 \001(\r\022\016\n\006uiBind\030\004 \001(\r\022\020\n\010uiExpire\030\005 \001(\r"
  "\022\021\n\tuiQuality\030\006 \001(\r\022\025\n\ruiTradeExpire\030\007 \001"
  "(\r\022\017\n\007uiPrice\030\010 \001(\r\022\022\n\nbNotSorted\030\t \001(\010\""
  "\'\n\004Item\022\037\n\005oBase\030\001 \001(\0132\020.common.ItemBase"
  "b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_itemcommon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_itemcommon_2eproto = {
    false, false, 248, descriptor_table_protodef_itemcommon_2eproto,
    "itemcommon.proto",
    &descriptor_table_itemcommon_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_itemcommon_2eproto::offsets,
    file_level_metadata_itemcommon_2eproto, file_level_enum_descriptors_itemcommon_2eproto,
    file_level_service_descriptors_itemcommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_itemcommon_2eproto_getter() {
  return &descriptor_table_itemcommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_itemcommon_2eproto(&descriptor_table_itemcommon_2eproto);
namespace common {

// ===================================================================

class ItemBase::_Internal {
 public:
};

ItemBase::ItemBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ItemBase)
}
ItemBase::ItemBase(const ItemBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uiuid_, &from.uiuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&bnotsorted_) -
    reinterpret_cast<char*>(&uiuid_)) + sizeof(bnotsorted_));
  // @@protoc_insertion_point(copy_constructor:common.ItemBase)
}

inline void ItemBase::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uiuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bnotsorted_) -
    reinterpret_cast<char*>(&uiuid_)) + sizeof(bnotsorted_));
}

ItemBase::~ItemBase() {
  // @@protoc_insertion_point(destructor:common.ItemBase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ItemBase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ItemBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ItemBase::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ItemBase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uiuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bnotsorted_) -
      reinterpret_cast<char*>(&uiuid_)) + sizeof(bnotsorted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemBase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 uiUid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uiuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiTid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uitid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uicount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiBind = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uibind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiExpire = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uiexpire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiQuality = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uiquality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiTradeExpire = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uitradeexpire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiPrice = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uiprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bNotSorted = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          bnotsorted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemBase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ItemBase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiUid = 1;
  if (this->_internal_uiuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uiuid(), target);
  }

  // uint32 uiTid = 2;
  if (this->_internal_uitid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uitid(), target);
  }

  // uint32 uiCount = 3;
  if (this->_internal_uicount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uicount(), target);
  }

  // uint32 uiBind = 4;
  if (this->_internal_uibind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uibind(), target);
  }

  // uint32 uiExpire = 5;
  if (this->_internal_uiexpire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uiexpire(), target);
  }

  // uint32 uiQuality = 6;
  if (this->_internal_uiquality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_uiquality(), target);
  }

  // uint32 uiTradeExpire = 7;
  if (this->_internal_uitradeexpire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_uitradeexpire(), target);
  }

  // uint32 uiPrice = 8;
  if (this->_internal_uiprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_uiprice(), target);
  }

  // bool bNotSorted = 9;
  if (this->_internal_bnotsorted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_bnotsorted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ItemBase)
  return target;
}

size_t ItemBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ItemBase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 uiUid = 1;
  if (this->_internal_uiuid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uiuid());
  }

  // uint32 uiTid = 2;
  if (this->_internal_uitid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uitid());
  }

  // uint32 uiCount = 3;
  if (this->_internal_uicount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uicount());
  }

  // uint32 uiBind = 4;
  if (this->_internal_uibind() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uibind());
  }

  // uint32 uiExpire = 5;
  if (this->_internal_uiexpire() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uiexpire());
  }

  // uint32 uiQuality = 6;
  if (this->_internal_uiquality() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uiquality());
  }

  // uint32 uiTradeExpire = 7;
  if (this->_internal_uitradeexpire() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uitradeexpire());
  }

  // uint32 uiPrice = 8;
  if (this->_internal_uiprice() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uiprice());
  }

  // bool bNotSorted = 9;
  if (this->_internal_bnotsorted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemBase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ItemBase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemBase::GetClassData() const { return &_class_data_; }

void ItemBase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ItemBase *>(to)->MergeFrom(
      static_cast<const ItemBase &>(from));
}


void ItemBase::MergeFrom(const ItemBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ItemBase)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uiuid() != 0) {
    _internal_set_uiuid(from._internal_uiuid());
  }
  if (from._internal_uitid() != 0) {
    _internal_set_uitid(from._internal_uitid());
  }
  if (from._internal_uicount() != 0) {
    _internal_set_uicount(from._internal_uicount());
  }
  if (from._internal_uibind() != 0) {
    _internal_set_uibind(from._internal_uibind());
  }
  if (from._internal_uiexpire() != 0) {
    _internal_set_uiexpire(from._internal_uiexpire());
  }
  if (from._internal_uiquality() != 0) {
    _internal_set_uiquality(from._internal_uiquality());
  }
  if (from._internal_uitradeexpire() != 0) {
    _internal_set_uitradeexpire(from._internal_uitradeexpire());
  }
  if (from._internal_uiprice() != 0) {
    _internal_set_uiprice(from._internal_uiprice());
  }
  if (from._internal_bnotsorted() != 0) {
    _internal_set_bnotsorted(from._internal_bnotsorted());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemBase::CopyFrom(const ItemBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ItemBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemBase::IsInitialized() const {
  return true;
}

void ItemBase::InternalSwap(ItemBase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemBase, bnotsorted_)
      + sizeof(ItemBase::bnotsorted_)
      - PROTOBUF_FIELD_OFFSET(ItemBase, uiuid_)>(
          reinterpret_cast<char*>(&uiuid_),
          reinterpret_cast<char*>(&other->uiuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemBase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_itemcommon_2eproto_getter, &descriptor_table_itemcommon_2eproto_once,
      file_level_metadata_itemcommon_2eproto[0]);
}

// ===================================================================

class Item::_Internal {
 public:
  static const ::common::ItemBase& obase(const Item* msg);
};

const ::common::ItemBase&
Item::_Internal::obase(const Item* msg) {
  return *msg->obase_;
}
Item::Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.Item)
}
Item::Item(const Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_obase()) {
    obase_ = new ::common::ItemBase(*from.obase_);
  } else {
    obase_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:common.Item)
}

inline void Item::SharedCtor() {
obase_ = nullptr;
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:common.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete obase_;
}

void Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Item::Clear() {
// @@protoc_insertion_point(message_clear_start:common.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && obase_ != nullptr) {
    delete obase_;
  }
  obase_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.ItemBase oBase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_obase(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.ItemBase oBase = 1;
  if (this->_internal_has_obase()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::obase(this),
        _Internal::obase(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.Item)
  return target;
}

size_t Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.ItemBase oBase = 1;
  if (this->_internal_has_obase()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obase_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Item::GetClassData() const { return &_class_data_; }

void Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Item *>(to)->MergeFrom(
      static_cast<const Item &>(from));
}


void Item::MergeFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.Item)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_obase()) {
    _internal_mutable_obase()->::common::ItemBase::MergeFrom(from._internal_obase());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Item::CopyFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  return true;
}

void Item::InternalSwap(Item* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(obase_, other->obase_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_itemcommon_2eproto_getter, &descriptor_table_itemcommon_2eproto_once,
      file_level_metadata_itemcommon_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::common::ItemBase*
Arena::CreateMaybeMessage< ::common::ItemBase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ItemBase >(arena);
}
template<> PROTOBUF_NOINLINE ::common::Item*
Arena::CreateMaybeMessage< ::common::Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::Item >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
