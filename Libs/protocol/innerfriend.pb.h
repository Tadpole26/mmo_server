// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: innerfriend.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_innerfriend_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_innerfriend_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_innerfriend_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_innerfriend_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_innerfriend_2eproto;
namespace inner {
class InnerFriend;
struct InnerFriendDefaultTypeInternal;
extern InnerFriendDefaultTypeInternal _InnerFriend_default_instance_;
class InnerFriendGift;
struct InnerFriendGiftDefaultTypeInternal;
extern InnerFriendGiftDefaultTypeInternal _InnerFriendGift_default_instance_;
class InnerFriendGiftList;
struct InnerFriendGiftListDefaultTypeInternal;
extern InnerFriendGiftListDefaultTypeInternal _InnerFriendGiftList_default_instance_;
class InnerFriendInfo;
struct InnerFriendInfoDefaultTypeInternal;
extern InnerFriendInfoDefaultTypeInternal _InnerFriendInfo_default_instance_;
class InnerFriendList;
struct InnerFriendListDefaultTypeInternal;
extern InnerFriendListDefaultTypeInternal _InnerFriendList_default_instance_;
}  // namespace inner
PROTOBUF_NAMESPACE_OPEN
template<> ::inner::InnerFriend* Arena::CreateMaybeMessage<::inner::InnerFriend>(Arena*);
template<> ::inner::InnerFriendGift* Arena::CreateMaybeMessage<::inner::InnerFriendGift>(Arena*);
template<> ::inner::InnerFriendGiftList* Arena::CreateMaybeMessage<::inner::InnerFriendGiftList>(Arena*);
template<> ::inner::InnerFriendInfo* Arena::CreateMaybeMessage<::inner::InnerFriendInfo>(Arena*);
template<> ::inner::InnerFriendList* Arena::CreateMaybeMessage<::inner::InnerFriendList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inner {

// ===================================================================

class InnerFriendList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerFriendList) */ {
 public:
  inline InnerFriendList() : InnerFriendList(nullptr) {}
  ~InnerFriendList() override;
  explicit PROTOBUF_CONSTEXPR InnerFriendList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendList(const InnerFriendList& from);
  InnerFriendList(InnerFriendList&& from) noexcept
    : InnerFriendList() {
    *this = ::std::move(from);
  }

  inline InnerFriendList& operator=(const InnerFriendList& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendList& operator=(InnerFriendList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendList& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendList* internal_default_instance() {
    return reinterpret_cast<const InnerFriendList*>(
               &_InnerFriendList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InnerFriendList& a, InnerFriendList& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerFriendList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerFriendList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerFriendList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendList";
  }
  protected:
  explicit InnerFriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecFriendFieldNumber = 1,
  };
  // repeated .inner.InnerFriend vecFriend = 1;
  int vecfriend_size() const;
  private:
  int _internal_vecfriend_size() const;
  public:
  void clear_vecfriend();
  ::inner::InnerFriend* mutable_vecfriend(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inner::InnerFriend >*
      mutable_vecfriend();
  private:
  const ::inner::InnerFriend& _internal_vecfriend(int index) const;
  ::inner::InnerFriend* _internal_add_vecfriend();
  public:
  const ::inner::InnerFriend& vecfriend(int index) const;
  ::inner::InnerFriend* add_vecfriend();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inner::InnerFriend >&
      vecfriend() const;

  // @@protoc_insertion_point(class_scope:inner.InnerFriendList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inner::InnerFriend > vecfriend_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innerfriend_2eproto;
};
// -------------------------------------------------------------------

class InnerFriend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerFriend) */ {
 public:
  inline InnerFriend() : InnerFriend(nullptr) {}
  ~InnerFriend() override;
  explicit PROTOBUF_CONSTEXPR InnerFriend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriend(const InnerFriend& from);
  InnerFriend(InnerFriend&& from) noexcept
    : InnerFriend() {
    *this = ::std::move(from);
  }

  inline InnerFriend& operator=(const InnerFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriend& operator=(InnerFriend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriend& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriend* internal_default_instance() {
    return reinterpret_cast<const InnerFriend*>(
               &_InnerFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InnerFriend& a, InnerFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerFriend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerFriend& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerFriend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriend";
  }
  protected:
  explicit InnerFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlRoleIdFieldNumber = 1,
    kUiIntimacyFieldNumber = 2,
  };
  // uint64 llRoleId = 1;
  void clear_llroleid();
  uint64_t llroleid() const;
  void set_llroleid(uint64_t value);
  private:
  uint64_t _internal_llroleid() const;
  void _internal_set_llroleid(uint64_t value);
  public:

  // uint32 uiIntimacy = 2;
  void clear_uiintimacy();
  uint32_t uiintimacy() const;
  void set_uiintimacy(uint32_t value);
  private:
  uint32_t _internal_uiintimacy() const;
  void _internal_set_uiintimacy(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerFriend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t llroleid_;
  uint32_t uiintimacy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innerfriend_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerFriendInfo) */ {
 public:
  inline InnerFriendInfo() : InnerFriendInfo(nullptr) {}
  ~InnerFriendInfo() override;
  explicit PROTOBUF_CONSTEXPR InnerFriendInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendInfo(const InnerFriendInfo& from);
  InnerFriendInfo(InnerFriendInfo&& from) noexcept
    : InnerFriendInfo() {
    *this = ::std::move(from);
  }

  inline InnerFriendInfo& operator=(const InnerFriendInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendInfo& operator=(InnerFriendInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendInfo* internal_default_instance() {
    return reinterpret_cast<const InnerFriendInfo*>(
               &_InnerFriendInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InnerFriendInfo& a, InnerFriendInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerFriendInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerFriendInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerFriendInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendInfo";
  }
  protected:
  explicit InnerFriendInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrNickFieldNumber = 4,
    kUiCityFieldNumber = 1,
    kUiSexFieldNumber = 2,
    kUiLevelFieldNumber = 3,
    kBFuncOpenFieldNumber = 5,
  };
  // string strNick = 4;
  void clear_strnick();
  const std::string& strnick() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strnick(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strnick();
  PROTOBUF_NODISCARD std::string* release_strnick();
  void set_allocated_strnick(std::string* strnick);
  private:
  const std::string& _internal_strnick() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strnick(const std::string& value);
  std::string* _internal_mutable_strnick();
  public:

  // uint32 uiCity = 1;
  void clear_uicity();
  uint32_t uicity() const;
  void set_uicity(uint32_t value);
  private:
  uint32_t _internal_uicity() const;
  void _internal_set_uicity(uint32_t value);
  public:

  // uint32 uiSex = 2;
  void clear_uisex();
  uint32_t uisex() const;
  void set_uisex(uint32_t value);
  private:
  uint32_t _internal_uisex() const;
  void _internal_set_uisex(uint32_t value);
  public:

  // uint32 uiLevel = 3;
  void clear_uilevel();
  uint32_t uilevel() const;
  void set_uilevel(uint32_t value);
  private:
  uint32_t _internal_uilevel() const;
  void _internal_set_uilevel(uint32_t value);
  public:

  // bool bFuncOpen = 5;
  void clear_bfuncopen();
  bool bfuncopen() const;
  void set_bfuncopen(bool value);
  private:
  bool _internal_bfuncopen() const;
  void _internal_set_bfuncopen(bool value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerFriendInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strnick_;
  uint32_t uicity_;
  uint32_t uisex_;
  uint32_t uilevel_;
  bool bfuncopen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innerfriend_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendGiftList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerFriendGiftList) */ {
 public:
  inline InnerFriendGiftList() : InnerFriendGiftList(nullptr) {}
  ~InnerFriendGiftList() override;
  explicit PROTOBUF_CONSTEXPR InnerFriendGiftList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendGiftList(const InnerFriendGiftList& from);
  InnerFriendGiftList(InnerFriendGiftList&& from) noexcept
    : InnerFriendGiftList() {
    *this = ::std::move(from);
  }

  inline InnerFriendGiftList& operator=(const InnerFriendGiftList& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendGiftList& operator=(InnerFriendGiftList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendGiftList& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendGiftList* internal_default_instance() {
    return reinterpret_cast<const InnerFriendGiftList*>(
               &_InnerFriendGiftList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InnerFriendGiftList& a, InnerFriendGiftList& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendGiftList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendGiftList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendGiftList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendGiftList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerFriendGiftList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerFriendGiftList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerFriendGiftList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendGiftList";
  }
  protected:
  explicit InnerFriendGiftList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecGiftsFieldNumber = 1,
  };
  // repeated .inner.InnerFriendGift vecGifts = 1;
  int vecgifts_size() const;
  private:
  int _internal_vecgifts_size() const;
  public:
  void clear_vecgifts();
  ::inner::InnerFriendGift* mutable_vecgifts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inner::InnerFriendGift >*
      mutable_vecgifts();
  private:
  const ::inner::InnerFriendGift& _internal_vecgifts(int index) const;
  ::inner::InnerFriendGift* _internal_add_vecgifts();
  public:
  const ::inner::InnerFriendGift& vecgifts(int index) const;
  ::inner::InnerFriendGift* add_vecgifts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inner::InnerFriendGift >&
      vecgifts() const;

  // @@protoc_insertion_point(class_scope:inner.InnerFriendGiftList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inner::InnerFriendGift > vecgifts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innerfriend_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendGift final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerFriendGift) */ {
 public:
  inline InnerFriendGift() : InnerFriendGift(nullptr) {}
  ~InnerFriendGift() override;
  explicit PROTOBUF_CONSTEXPR InnerFriendGift(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendGift(const InnerFriendGift& from);
  InnerFriendGift(InnerFriendGift&& from) noexcept
    : InnerFriendGift() {
    *this = ::std::move(from);
  }

  inline InnerFriendGift& operator=(const InnerFriendGift& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendGift& operator=(InnerFriendGift&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendGift& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendGift* internal_default_instance() {
    return reinterpret_cast<const InnerFriendGift*>(
               &_InnerFriendGift_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InnerFriendGift& a, InnerFriendGift& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendGift* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendGift* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendGift* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendGift>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerFriendGift& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerFriendGift& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerFriendGift* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendGift";
  }
  protected:
  explicit InnerFriendGift(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlRecverFieldNumber = 1,
    kUiItemIDFieldNumber = 2,
    kUiCountFieldNumber = 3,
    kBBindFieldNumber = 4,
    kUiVersionIdFieldNumber = 5,
  };
  // uint64 llRecver = 1;
  void clear_llrecver();
  uint64_t llrecver() const;
  void set_llrecver(uint64_t value);
  private:
  uint64_t _internal_llrecver() const;
  void _internal_set_llrecver(uint64_t value);
  public:

  // uint32 uiItemID = 2;
  void clear_uiitemid();
  uint32_t uiitemid() const;
  void set_uiitemid(uint32_t value);
  private:
  uint32_t _internal_uiitemid() const;
  void _internal_set_uiitemid(uint32_t value);
  public:

  // uint32 uiCount = 3;
  void clear_uicount();
  uint32_t uicount() const;
  void set_uicount(uint32_t value);
  private:
  uint32_t _internal_uicount() const;
  void _internal_set_uicount(uint32_t value);
  public:

  // bool bBind = 4;
  void clear_bbind();
  bool bbind() const;
  void set_bbind(bool value);
  private:
  bool _internal_bbind() const;
  void _internal_set_bbind(bool value);
  public:

  // uint32 uiVersionId = 5;
  void clear_uiversionid();
  uint32_t uiversionid() const;
  void set_uiversionid(uint32_t value);
  private:
  uint32_t _internal_uiversionid() const;
  void _internal_set_uiversionid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerFriendGift)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t llrecver_;
  uint32_t uiitemid_;
  uint32_t uicount_;
  bool bbind_;
  uint32_t uiversionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innerfriend_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InnerFriendList

// repeated .inner.InnerFriend vecFriend = 1;
inline int InnerFriendList::_internal_vecfriend_size() const {
  return vecfriend_.size();
}
inline int InnerFriendList::vecfriend_size() const {
  return _internal_vecfriend_size();
}
inline void InnerFriendList::clear_vecfriend() {
  vecfriend_.Clear();
}
inline ::inner::InnerFriend* InnerFriendList::mutable_vecfriend(int index) {
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendList.vecFriend)
  return vecfriend_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inner::InnerFriend >*
InnerFriendList::mutable_vecfriend() {
  // @@protoc_insertion_point(field_mutable_list:inner.InnerFriendList.vecFriend)
  return &vecfriend_;
}
inline const ::inner::InnerFriend& InnerFriendList::_internal_vecfriend(int index) const {
  return vecfriend_.Get(index);
}
inline const ::inner::InnerFriend& InnerFriendList::vecfriend(int index) const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendList.vecFriend)
  return _internal_vecfriend(index);
}
inline ::inner::InnerFriend* InnerFriendList::_internal_add_vecfriend() {
  return vecfriend_.Add();
}
inline ::inner::InnerFriend* InnerFriendList::add_vecfriend() {
  ::inner::InnerFriend* _add = _internal_add_vecfriend();
  // @@protoc_insertion_point(field_add:inner.InnerFriendList.vecFriend)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inner::InnerFriend >&
InnerFriendList::vecfriend() const {
  // @@protoc_insertion_point(field_list:inner.InnerFriendList.vecFriend)
  return vecfriend_;
}

// -------------------------------------------------------------------

// InnerFriend

// uint64 llRoleId = 1;
inline void InnerFriend::clear_llroleid() {
  llroleid_ = uint64_t{0u};
}
inline uint64_t InnerFriend::_internal_llroleid() const {
  return llroleid_;
}
inline uint64_t InnerFriend::llroleid() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriend.llRoleId)
  return _internal_llroleid();
}
inline void InnerFriend::_internal_set_llroleid(uint64_t value) {
  
  llroleid_ = value;
}
inline void InnerFriend::set_llroleid(uint64_t value) {
  _internal_set_llroleid(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriend.llRoleId)
}

// uint32 uiIntimacy = 2;
inline void InnerFriend::clear_uiintimacy() {
  uiintimacy_ = 0u;
}
inline uint32_t InnerFriend::_internal_uiintimacy() const {
  return uiintimacy_;
}
inline uint32_t InnerFriend::uiintimacy() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriend.uiIntimacy)
  return _internal_uiintimacy();
}
inline void InnerFriend::_internal_set_uiintimacy(uint32_t value) {
  
  uiintimacy_ = value;
}
inline void InnerFriend::set_uiintimacy(uint32_t value) {
  _internal_set_uiintimacy(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriend.uiIntimacy)
}

// -------------------------------------------------------------------

// InnerFriendInfo

// uint32 uiCity = 1;
inline void InnerFriendInfo::clear_uicity() {
  uicity_ = 0u;
}
inline uint32_t InnerFriendInfo::_internal_uicity() const {
  return uicity_;
}
inline uint32_t InnerFriendInfo::uicity() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendInfo.uiCity)
  return _internal_uicity();
}
inline void InnerFriendInfo::_internal_set_uicity(uint32_t value) {
  
  uicity_ = value;
}
inline void InnerFriendInfo::set_uicity(uint32_t value) {
  _internal_set_uicity(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendInfo.uiCity)
}

// uint32 uiSex = 2;
inline void InnerFriendInfo::clear_uisex() {
  uisex_ = 0u;
}
inline uint32_t InnerFriendInfo::_internal_uisex() const {
  return uisex_;
}
inline uint32_t InnerFriendInfo::uisex() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendInfo.uiSex)
  return _internal_uisex();
}
inline void InnerFriendInfo::_internal_set_uisex(uint32_t value) {
  
  uisex_ = value;
}
inline void InnerFriendInfo::set_uisex(uint32_t value) {
  _internal_set_uisex(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendInfo.uiSex)
}

// uint32 uiLevel = 3;
inline void InnerFriendInfo::clear_uilevel() {
  uilevel_ = 0u;
}
inline uint32_t InnerFriendInfo::_internal_uilevel() const {
  return uilevel_;
}
inline uint32_t InnerFriendInfo::uilevel() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendInfo.uiLevel)
  return _internal_uilevel();
}
inline void InnerFriendInfo::_internal_set_uilevel(uint32_t value) {
  
  uilevel_ = value;
}
inline void InnerFriendInfo::set_uilevel(uint32_t value) {
  _internal_set_uilevel(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendInfo.uiLevel)
}

// string strNick = 4;
inline void InnerFriendInfo::clear_strnick() {
  strnick_.ClearToEmpty();
}
inline const std::string& InnerFriendInfo::strnick() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendInfo.strNick)
  return _internal_strnick();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InnerFriendInfo::set_strnick(ArgT0&& arg0, ArgT... args) {
 
 strnick_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inner.InnerFriendInfo.strNick)
}
inline std::string* InnerFriendInfo::mutable_strnick() {
  std::string* _s = _internal_mutable_strnick();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendInfo.strNick)
  return _s;
}
inline const std::string& InnerFriendInfo::_internal_strnick() const {
  return strnick_.Get();
}
inline void InnerFriendInfo::_internal_set_strnick(const std::string& value) {
  
  strnick_.Set(value, GetArenaForAllocation());
}
inline std::string* InnerFriendInfo::_internal_mutable_strnick() {
  
  return strnick_.Mutable(GetArenaForAllocation());
}
inline std::string* InnerFriendInfo::release_strnick() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendInfo.strNick)
  return strnick_.Release();
}
inline void InnerFriendInfo::set_allocated_strnick(std::string* strnick) {
  if (strnick != nullptr) {
    
  } else {
    
  }
  strnick_.SetAllocated(strnick, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strnick_.IsDefault()) {
    strnick_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inner.InnerFriendInfo.strNick)
}

// bool bFuncOpen = 5;
inline void InnerFriendInfo::clear_bfuncopen() {
  bfuncopen_ = false;
}
inline bool InnerFriendInfo::_internal_bfuncopen() const {
  return bfuncopen_;
}
inline bool InnerFriendInfo::bfuncopen() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendInfo.bFuncOpen)
  return _internal_bfuncopen();
}
inline void InnerFriendInfo::_internal_set_bfuncopen(bool value) {
  
  bfuncopen_ = value;
}
inline void InnerFriendInfo::set_bfuncopen(bool value) {
  _internal_set_bfuncopen(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendInfo.bFuncOpen)
}

// -------------------------------------------------------------------

// InnerFriendGiftList

// repeated .inner.InnerFriendGift vecGifts = 1;
inline int InnerFriendGiftList::_internal_vecgifts_size() const {
  return vecgifts_.size();
}
inline int InnerFriendGiftList::vecgifts_size() const {
  return _internal_vecgifts_size();
}
inline void InnerFriendGiftList::clear_vecgifts() {
  vecgifts_.Clear();
}
inline ::inner::InnerFriendGift* InnerFriendGiftList::mutable_vecgifts(int index) {
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendGiftList.vecGifts)
  return vecgifts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inner::InnerFriendGift >*
InnerFriendGiftList::mutable_vecgifts() {
  // @@protoc_insertion_point(field_mutable_list:inner.InnerFriendGiftList.vecGifts)
  return &vecgifts_;
}
inline const ::inner::InnerFriendGift& InnerFriendGiftList::_internal_vecgifts(int index) const {
  return vecgifts_.Get(index);
}
inline const ::inner::InnerFriendGift& InnerFriendGiftList::vecgifts(int index) const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendGiftList.vecGifts)
  return _internal_vecgifts(index);
}
inline ::inner::InnerFriendGift* InnerFriendGiftList::_internal_add_vecgifts() {
  return vecgifts_.Add();
}
inline ::inner::InnerFriendGift* InnerFriendGiftList::add_vecgifts() {
  ::inner::InnerFriendGift* _add = _internal_add_vecgifts();
  // @@protoc_insertion_point(field_add:inner.InnerFriendGiftList.vecGifts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inner::InnerFriendGift >&
InnerFriendGiftList::vecgifts() const {
  // @@protoc_insertion_point(field_list:inner.InnerFriendGiftList.vecGifts)
  return vecgifts_;
}

// -------------------------------------------------------------------

// InnerFriendGift

// uint64 llRecver = 1;
inline void InnerFriendGift::clear_llrecver() {
  llrecver_ = uint64_t{0u};
}
inline uint64_t InnerFriendGift::_internal_llrecver() const {
  return llrecver_;
}
inline uint64_t InnerFriendGift::llrecver() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendGift.llRecver)
  return _internal_llrecver();
}
inline void InnerFriendGift::_internal_set_llrecver(uint64_t value) {
  
  llrecver_ = value;
}
inline void InnerFriendGift::set_llrecver(uint64_t value) {
  _internal_set_llrecver(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendGift.llRecver)
}

// uint32 uiItemID = 2;
inline void InnerFriendGift::clear_uiitemid() {
  uiitemid_ = 0u;
}
inline uint32_t InnerFriendGift::_internal_uiitemid() const {
  return uiitemid_;
}
inline uint32_t InnerFriendGift::uiitemid() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendGift.uiItemID)
  return _internal_uiitemid();
}
inline void InnerFriendGift::_internal_set_uiitemid(uint32_t value) {
  
  uiitemid_ = value;
}
inline void InnerFriendGift::set_uiitemid(uint32_t value) {
  _internal_set_uiitemid(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendGift.uiItemID)
}

// uint32 uiCount = 3;
inline void InnerFriendGift::clear_uicount() {
  uicount_ = 0u;
}
inline uint32_t InnerFriendGift::_internal_uicount() const {
  return uicount_;
}
inline uint32_t InnerFriendGift::uicount() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendGift.uiCount)
  return _internal_uicount();
}
inline void InnerFriendGift::_internal_set_uicount(uint32_t value) {
  
  uicount_ = value;
}
inline void InnerFriendGift::set_uicount(uint32_t value) {
  _internal_set_uicount(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendGift.uiCount)
}

// bool bBind = 4;
inline void InnerFriendGift::clear_bbind() {
  bbind_ = false;
}
inline bool InnerFriendGift::_internal_bbind() const {
  return bbind_;
}
inline bool InnerFriendGift::bbind() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendGift.bBind)
  return _internal_bbind();
}
inline void InnerFriendGift::_internal_set_bbind(bool value) {
  
  bbind_ = value;
}
inline void InnerFriendGift::set_bbind(bool value) {
  _internal_set_bbind(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendGift.bBind)
}

// uint32 uiVersionId = 5;
inline void InnerFriendGift::clear_uiversionid() {
  uiversionid_ = 0u;
}
inline uint32_t InnerFriendGift::_internal_uiversionid() const {
  return uiversionid_;
}
inline uint32_t InnerFriendGift::uiversionid() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendGift.uiVersionId)
  return _internal_uiversionid();
}
inline void InnerFriendGift::_internal_set_uiversionid(uint32_t value) {
  
  uiversionid_ = value;
}
inline void InnerFriendGift::set_uiversionid(uint32_t value) {
  _internal_set_uiversionid(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendGift.uiVersionId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace inner

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_innerfriend_2eproto
