// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace common {
PROTOBUF_CONSTEXPR ModelPart::ModelPart(
    ::_pbi::ConstantInitialized)
  : partid_(0u)
  , partval_(0u){}
struct ModelPartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelPartDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelPartDefaultTypeInternal() {}
  union {
    ModelPart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelPartDefaultTypeInternal _ModelPart_default_instance_;
PROTOBUF_CONSTEXPR ModelPartList::ModelPartList(
    ::_pbi::ConstantInitialized)
  : parts_(){}
struct ModelPartListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelPartListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelPartListDefaultTypeInternal() {}
  union {
    ModelPartList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelPartListDefaultTypeInternal _ModelPartList_default_instance_;
PROTOBUF_CONSTEXPR OneFashionStain::OneFashionStain(
    ::_pbi::ConstantInitialized)
  : part_(0u)
  , color_(0u){}
struct OneFashionStainDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OneFashionStainDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OneFashionStainDefaultTypeInternal() {}
  union {
    OneFashionStain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OneFashionStainDefaultTypeInternal _OneFashionStain_default_instance_;
PROTOBUF_CONSTEXPR FashionStain::FashionStain(
    ::_pbi::ConstantInitialized)
  : onestain_(){}
struct FashionStainDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FashionStainDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FashionStainDefaultTypeInternal() {}
  union {
    FashionStain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FashionStainDefaultTypeInternal _FashionStain_default_instance_;
PROTOBUF_CONSTEXPR FashionView::FashionView(
    ::_pbi::ConstantInitialized)
  : stain_(nullptr)
  , current_(0u){}
struct FashionViewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FashionViewDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FashionViewDefaultTypeInternal() {}
  union {
    FashionView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FashionViewDefaultTypeInternal _FashionView_default_instance_;
PROTOBUF_CONSTEXPR ModuleViewFashion::ModuleViewFashion(
    ::_pbi::ConstantInitialized)
  : head_(nullptr)
  , face_(nullptr)
  , mouth_(nullptr)
  , cloth_(nullptr)
  , back_(nullptr)
  , tail_(nullptr)
  , hair_(nullptr)
  , weapon_(nullptr){}
struct ModuleViewFashionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModuleViewFashionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModuleViewFashionDefaultTypeInternal() {}
  union {
    ModuleViewFashion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModuleViewFashionDefaultTypeInternal _ModuleViewFashion_default_instance_;
PROTOBUF_CONSTEXPR ClientSceneId::ClientSceneId(
    ::_pbi::ConstantInitialized)
  : mapid_(0u)
  , proctype_(0u)
  , procparam_(0u){}
struct ClientSceneIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientSceneIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientSceneIdDefaultTypeInternal() {}
  union {
    ClientSceneId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientSceneIdDefaultTypeInternal _ClientSceneId_default_instance_;
PROTOBUF_CONSTEXPR ClientStaticScene::ClientStaticScene(
    ::_pbi::ConstantInitialized)
  : lineid_(0u){}
struct ClientStaticSceneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientStaticSceneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientStaticSceneDefaultTypeInternal() {}
  union {
    ClientStaticScene _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientStaticSceneDefaultTypeInternal _ClientStaticScene_default_instance_;
PROTOBUF_CONSTEXPR ClientCopyScene::ClientCopyScene(
    ::_pbi::ConstantInitialized)
  : copylvid_(0u)
  , autoid_(0u){}
struct ClientCopySceneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientCopySceneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientCopySceneDefaultTypeInternal() {}
  union {
    ClientCopyScene _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientCopySceneDefaultTypeInternal _ClientCopyScene_default_instance_;
PROTOBUF_CONSTEXPR ClientPos::ClientPos(
    ::_pbi::ConstantInitialized)
  : poxx_(0u)
  , posy_(0u)
  , offsetx_(0u)
  , offsety_(0u){}
struct ClientPosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientPosDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientPosDefaultTypeInternal() {}
  union {
    ClientPos _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientPosDefaultTypeInternal _ClientPos_default_instance_;
PROTOBUF_CONSTEXPR ClientPosDirect::ClientPosDirect(
    ::_pbi::ConstantInitialized)
  : cpos_(nullptr)
  , direct_(0u){}
struct ClientPosDirectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientPosDirectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientPosDirectDefaultTypeInternal() {}
  union {
    ClientPosDirect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientPosDirectDefaultTypeInternal _ClientPosDirect_default_instance_;
PROTOBUF_CONSTEXPR ClientPosTerminate::ClientPosTerminate(
    ::_pbi::ConstantInitialized)
  : poslist_()
  , servertime_(uint64_t{0u}){}
struct ClientPosTerminateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientPosTerminateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientPosTerminateDefaultTypeInternal() {}
  union {
    ClientPosTerminate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientPosTerminateDefaultTypeInternal _ClientPosTerminate_default_instance_;
PROTOBUF_CONSTEXPR ClientPosTogether::ClientPosTogether(
    ::_pbi::ConstantInitialized)
  : curpos_(nullptr)
  , terpos_(nullptr)
  , mvtype_(0u){}
struct ClientPosTogetherDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientPosTogetherDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientPosTogetherDefaultTypeInternal() {}
  union {
    ClientPosTogether _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientPosTogetherDefaultTypeInternal _ClientPosTogether_default_instance_;
PROTOBUF_CONSTEXPR ViewFieldId::ViewFieldId(
    ::_pbi::ConstantInitialized)
  : val_(uint64_t{0u})
  , type_(0u){}
struct ViewFieldIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewFieldIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewFieldIdDefaultTypeInternal() {}
  union {
    ViewFieldId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewFieldIdDefaultTypeInternal _ViewFieldId_default_instance_;
PROTOBUF_CONSTEXPR ViewFieldStr::ViewFieldStr(
    ::_pbi::ConstantInitialized)
  : data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(0u){}
struct ViewFieldStrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewFieldStrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewFieldStrDefaultTypeInternal() {}
  union {
    ViewFieldStr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewFieldStrDefaultTypeInternal _ViewFieldStr_default_instance_;
PROTOBUF_CONSTEXPR ViewFieldList::ViewFieldList(
    ::_pbi::ConstantInitialized)
  : idfields_()
  , strfields_(){}
struct ViewFieldListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewFieldListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewFieldListDefaultTypeInternal() {}
  union {
    ViewFieldList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewFieldListDefaultTypeInternal _ViewFieldList_default_instance_;
PROTOBUF_CONSTEXPR EquipView::EquipView(
    ::_pbi::ConstantInitialized)
  : equiptid_(0u)
  , strengthlevel_(0u){}
struct EquipViewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EquipViewDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EquipViewDefaultTypeInternal() {}
  union {
    EquipView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EquipViewDefaultTypeInternal _EquipView_default_instance_;
PROTOBUF_CONSTEXPR RoleBrief::RoleBrief(
    ::_pbi::ConstantInitialized)
  : nickname_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , roleid_(uint64_t{0u})
  , headicon_(0u)
  , headframe_(0u)
  , careerid_(0u)
  , level_(0u)
  , sex_(0u)
  , careerlevel_(0u)
  , zoneidf_(0u){}
struct RoleBriefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleBriefDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleBriefDefaultTypeInternal() {}
  union {
    RoleBrief _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleBriefDefaultTypeInternal _RoleBrief_default_instance_;
PROTOBUF_CONSTEXPR RoleExtend1::RoleExtend1(
    ::_pbi::ConstantInitialized)
  : familyname_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , mplist_(nullptr)
  , fashion_(nullptr)
  , mainhand_(nullptr)
  , offhand_(nullptr)
  , teamid_(uint64_t{0u})
  , familyid_(uint64_t{0u})
  , leadersceneid_(uint64_t{0u})
  , fightpoint_(0u)
  , chatfont_(0u)
  , chatframe_(0u)
  , logintime_(0u)
  , logouttime_(0u)
  , offlinetime_(0u)
  , onlinetime_(0u){}
struct RoleExtend1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleExtend1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleExtend1DefaultTypeInternal() {}
  union {
    RoleExtend1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleExtend1DefaultTypeInternal _RoleExtend1_default_instance_;
PROTOBUF_CONSTEXPR RoleExtend2::RoleExtend2(
    ::_pbi::ConstantInitialized)
  : sceneid_(nullptr)
  , cpos_(nullptr){}
struct RoleExtend2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleExtend2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleExtend2DefaultTypeInternal() {}
  union {
    RoleExtend2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleExtend2DefaultTypeInternal _RoleExtend2_default_instance_;
PROTOBUF_CONSTEXPR RoleExtend3::RoleExtend3(
    ::_pbi::ConstantInitialized)
  : hp_(0u)
  , maxhp_(0u)
  , mp_(0u)
  , maxmp_(0u){}
struct RoleExtend3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleExtend3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleExtend3DefaultTypeInternal() {}
  union {
    RoleExtend3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleExtend3DefaultTypeInternal _RoleExtend3_default_instance_;
PROTOBUF_CONSTEXPR VoteBaseData::VoteBaseData(
    ::_pbi::ConstantInitialized)
  : expiretime_(0u)
  , lastingtime_(0u){}
struct VoteBaseDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoteBaseDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoteBaseDataDefaultTypeInternal() {}
  union {
    VoteBaseData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoteBaseDataDefaultTypeInternal _VoteBaseData_default_instance_;
PROTOBUF_CONSTEXPR RoleVoteState::RoleVoteState(
    ::_pbi::ConstantInitialized)
  : roleid_(uint64_t{0u})
  , state_(0u){}
struct RoleVoteStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleVoteStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleVoteStateDefaultTypeInternal() {}
  union {
    RoleVoteState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleVoteStateDefaultTypeInternal _RoleVoteState_default_instance_;
PROTOBUF_CONSTEXPR RoleVoteStateList::RoleVoteStateList(
    ::_pbi::ConstantInitialized)
  : roles_(){}
struct RoleVoteStateListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleVoteStateListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleVoteStateListDefaultTypeInternal() {}
  union {
    RoleVoteStateList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleVoteStateListDefaultTypeInternal _RoleVoteStateList_default_instance_;
PROTOBUF_CONSTEXPR NpcSpeak::NpcSpeak(
    ::_pbi::ConstantInitialized)
  : textid_(0u)
  , voiceid_(0u)
  , actionid_(0u){}
struct NpcSpeakDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NpcSpeakDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NpcSpeakDefaultTypeInternal() {}
  union {
    NpcSpeak _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NpcSpeakDefaultTypeInternal _NpcSpeak_default_instance_;
PROTOBUF_CONSTEXPR ProgressBar::ProgressBar(
    ::_pbi::ConstantInitialized)
  : barid_(0u)
  , param_(0u)
  , param64_(uint64_t{0u})
  , expire_(uint64_t{0u}){}
struct ProgressBarDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProgressBarDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProgressBarDefaultTypeInternal() {}
  union {
    ProgressBar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProgressBarDefaultTypeInternal _ProgressBar_default_instance_;
PROTOBUF_CONSTEXPR NpcCountDown::NpcCountDown(
    ::_pbi::ConstantInitialized)
  : id_(0u)
  , expire_(0u){}
struct NpcCountDownDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NpcCountDownDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NpcCountDownDefaultTypeInternal() {}
  union {
    NpcCountDown _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NpcCountDownDefaultTypeInternal _NpcCountDown_default_instance_;
PROTOBUF_CONSTEXPR NpcCountDownList::NpcCountDownList(
    ::_pbi::ConstantInitialized)
  : countdownlist_(){}
struct NpcCountDownListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NpcCountDownListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NpcCountDownListDefaultTypeInternal() {}
  union {
    NpcCountDownList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NpcCountDownListDefaultTypeInternal _NpcCountDownList_default_instance_;
PROTOBUF_CONSTEXPR NpcHatredUnit::NpcHatredUnit(
    ::_pbi::ConstantInitialized)
  : roleid_(uint64_t{0u})
  , value_(0u){}
struct NpcHatredUnitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NpcHatredUnitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NpcHatredUnitDefaultTypeInternal() {}
  union {
    NpcHatredUnit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NpcHatredUnitDefaultTypeInternal _NpcHatredUnit_default_instance_;
PROTOBUF_CONSTEXPR NpcHatredUnitList::NpcHatredUnitList(
    ::_pbi::ConstantInitialized)
  : units_(){}
struct NpcHatredUnitListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NpcHatredUnitListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NpcHatredUnitListDefaultTypeInternal() {}
  union {
    NpcHatredUnitList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NpcHatredUnitListDefaultTypeInternal _NpcHatredUnitList_default_instance_;
PROTOBUF_CONSTEXPR NpcHatredList::NpcHatredList(
    ::_pbi::ConstantInitialized)
  : remove_()
  , _remove_cached_byte_size_(0)
  , total_(nullptr)
  , update_(nullptr){}
struct NpcHatredListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NpcHatredListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NpcHatredListDefaultTypeInternal() {}
  union {
    NpcHatredList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NpcHatredListDefaultTypeInternal _NpcHatredList_default_instance_;
PROTOBUF_CONSTEXPR ReconnectInfo::ReconnectInfo(
    ::_pbi::ConstantInitialized)
  : reconnectnum_(0u)
  , reconnecttick_(0u)
  , continuetick_(0u){}
struct ReconnectInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReconnectInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReconnectInfoDefaultTypeInternal() {}
  union {
    ReconnectInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReconnectInfoDefaultTypeInternal _ReconnectInfo_default_instance_;
}  // namespace common
static ::_pb::Metadata file_level_metadata_common_2eproto[32];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_common_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_common_2eproto = nullptr;

const uint32_t TableStruct_common_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ModelPart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ModelPart, partid_),
  PROTOBUF_FIELD_OFFSET(::common::ModelPart, partval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ModelPartList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ModelPartList, parts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::OneFashionStain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::OneFashionStain, part_),
  PROTOBUF_FIELD_OFFSET(::common::OneFashionStain, color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::FashionStain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::FashionStain, onestain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::FashionView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::FashionView, current_),
  PROTOBUF_FIELD_OFFSET(::common::FashionView, stain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ModuleViewFashion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ModuleViewFashion, head_),
  PROTOBUF_FIELD_OFFSET(::common::ModuleViewFashion, face_),
  PROTOBUF_FIELD_OFFSET(::common::ModuleViewFashion, mouth_),
  PROTOBUF_FIELD_OFFSET(::common::ModuleViewFashion, cloth_),
  PROTOBUF_FIELD_OFFSET(::common::ModuleViewFashion, back_),
  PROTOBUF_FIELD_OFFSET(::common::ModuleViewFashion, tail_),
  PROTOBUF_FIELD_OFFSET(::common::ModuleViewFashion, hair_),
  PROTOBUF_FIELD_OFFSET(::common::ModuleViewFashion, weapon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ClientSceneId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ClientSceneId, mapid_),
  PROTOBUF_FIELD_OFFSET(::common::ClientSceneId, proctype_),
  PROTOBUF_FIELD_OFFSET(::common::ClientSceneId, procparam_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ClientStaticScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ClientStaticScene, lineid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ClientCopyScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ClientCopyScene, copylvid_),
  PROTOBUF_FIELD_OFFSET(::common::ClientCopyScene, autoid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ClientPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ClientPos, poxx_),
  PROTOBUF_FIELD_OFFSET(::common::ClientPos, posy_),
  PROTOBUF_FIELD_OFFSET(::common::ClientPos, offsetx_),
  PROTOBUF_FIELD_OFFSET(::common::ClientPos, offsety_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ClientPosDirect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ClientPosDirect, cpos_),
  PROTOBUF_FIELD_OFFSET(::common::ClientPosDirect, direct_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ClientPosTerminate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ClientPosTerminate, servertime_),
  PROTOBUF_FIELD_OFFSET(::common::ClientPosTerminate, poslist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ClientPosTogether, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ClientPosTogether, mvtype_),
  PROTOBUF_FIELD_OFFSET(::common::ClientPosTogether, curpos_),
  PROTOBUF_FIELD_OFFSET(::common::ClientPosTogether, terpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ViewFieldId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ViewFieldId, type_),
  PROTOBUF_FIELD_OFFSET(::common::ViewFieldId, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ViewFieldStr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ViewFieldStr, type_),
  PROTOBUF_FIELD_OFFSET(::common::ViewFieldStr, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ViewFieldList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ViewFieldList, idfields_),
  PROTOBUF_FIELD_OFFSET(::common::ViewFieldList, strfields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::EquipView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::EquipView, equiptid_),
  PROTOBUF_FIELD_OFFSET(::common::EquipView, strengthlevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::RoleBrief, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::RoleBrief, roleid_),
  PROTOBUF_FIELD_OFFSET(::common::RoleBrief, nickname_),
  PROTOBUF_FIELD_OFFSET(::common::RoleBrief, headicon_),
  PROTOBUF_FIELD_OFFSET(::common::RoleBrief, headframe_),
  PROTOBUF_FIELD_OFFSET(::common::RoleBrief, careerid_),
  PROTOBUF_FIELD_OFFSET(::common::RoleBrief, level_),
  PROTOBUF_FIELD_OFFSET(::common::RoleBrief, sex_),
  PROTOBUF_FIELD_OFFSET(::common::RoleBrief, careerlevel_),
  PROTOBUF_FIELD_OFFSET(::common::RoleBrief, zoneidf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, teamid_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, familyid_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, mplist_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, familyname_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, leadersceneid_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, fightpoint_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, fashion_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, mainhand_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, offhand_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, chatfont_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, chatframe_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, logintime_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, logouttime_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, offlinetime_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, onlinetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend2, sceneid_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend2, cpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend3, hp_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend3, maxhp_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend3, mp_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend3, maxmp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::VoteBaseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::VoteBaseData, expiretime_),
  PROTOBUF_FIELD_OFFSET(::common::VoteBaseData, lastingtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::RoleVoteState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::RoleVoteState, roleid_),
  PROTOBUF_FIELD_OFFSET(::common::RoleVoteState, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::RoleVoteStateList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::RoleVoteStateList, roles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::NpcSpeak, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::NpcSpeak, textid_),
  PROTOBUF_FIELD_OFFSET(::common::NpcSpeak, voiceid_),
  PROTOBUF_FIELD_OFFSET(::common::NpcSpeak, actionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ProgressBar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ProgressBar, barid_),
  PROTOBUF_FIELD_OFFSET(::common::ProgressBar, param_),
  PROTOBUF_FIELD_OFFSET(::common::ProgressBar, param64_),
  PROTOBUF_FIELD_OFFSET(::common::ProgressBar, expire_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::NpcCountDown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::NpcCountDown, id_),
  PROTOBUF_FIELD_OFFSET(::common::NpcCountDown, expire_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::NpcCountDownList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::NpcCountDownList, countdownlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::NpcHatredUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::NpcHatredUnit, roleid_),
  PROTOBUF_FIELD_OFFSET(::common::NpcHatredUnit, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::NpcHatredUnitList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::NpcHatredUnitList, units_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::NpcHatredList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::NpcHatredList, total_),
  PROTOBUF_FIELD_OFFSET(::common::NpcHatredList, update_),
  PROTOBUF_FIELD_OFFSET(::common::NpcHatredList, remove_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ReconnectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ReconnectInfo, reconnectnum_),
  PROTOBUF_FIELD_OFFSET(::common::ReconnectInfo, reconnecttick_),
  PROTOBUF_FIELD_OFFSET(::common::ReconnectInfo, continuetick_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::common::ModelPart)},
  { 8, -1, -1, sizeof(::common::ModelPartList)},
  { 15, -1, -1, sizeof(::common::OneFashionStain)},
  { 23, -1, -1, sizeof(::common::FashionStain)},
  { 30, -1, -1, sizeof(::common::FashionView)},
  { 38, -1, -1, sizeof(::common::ModuleViewFashion)},
  { 52, -1, -1, sizeof(::common::ClientSceneId)},
  { 61, -1, -1, sizeof(::common::ClientStaticScene)},
  { 68, -1, -1, sizeof(::common::ClientCopyScene)},
  { 76, -1, -1, sizeof(::common::ClientPos)},
  { 86, -1, -1, sizeof(::common::ClientPosDirect)},
  { 94, -1, -1, sizeof(::common::ClientPosTerminate)},
  { 102, -1, -1, sizeof(::common::ClientPosTogether)},
  { 111, -1, -1, sizeof(::common::ViewFieldId)},
  { 119, -1, -1, sizeof(::common::ViewFieldStr)},
  { 127, -1, -1, sizeof(::common::ViewFieldList)},
  { 135, -1, -1, sizeof(::common::EquipView)},
  { 143, -1, -1, sizeof(::common::RoleBrief)},
  { 158, -1, -1, sizeof(::common::RoleExtend1)},
  { 179, -1, -1, sizeof(::common::RoleExtend2)},
  { 187, -1, -1, sizeof(::common::RoleExtend3)},
  { 197, -1, -1, sizeof(::common::VoteBaseData)},
  { 205, -1, -1, sizeof(::common::RoleVoteState)},
  { 213, -1, -1, sizeof(::common::RoleVoteStateList)},
  { 220, -1, -1, sizeof(::common::NpcSpeak)},
  { 229, -1, -1, sizeof(::common::ProgressBar)},
  { 239, -1, -1, sizeof(::common::NpcCountDown)},
  { 247, -1, -1, sizeof(::common::NpcCountDownList)},
  { 254, -1, -1, sizeof(::common::NpcHatredUnit)},
  { 262, -1, -1, sizeof(::common::NpcHatredUnitList)},
  { 269, -1, -1, sizeof(::common::NpcHatredList)},
  { 278, -1, -1, sizeof(::common::ReconnectInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::common::_ModelPart_default_instance_._instance,
  &::common::_ModelPartList_default_instance_._instance,
  &::common::_OneFashionStain_default_instance_._instance,
  &::common::_FashionStain_default_instance_._instance,
  &::common::_FashionView_default_instance_._instance,
  &::common::_ModuleViewFashion_default_instance_._instance,
  &::common::_ClientSceneId_default_instance_._instance,
  &::common::_ClientStaticScene_default_instance_._instance,
  &::common::_ClientCopyScene_default_instance_._instance,
  &::common::_ClientPos_default_instance_._instance,
  &::common::_ClientPosDirect_default_instance_._instance,
  &::common::_ClientPosTerminate_default_instance_._instance,
  &::common::_ClientPosTogether_default_instance_._instance,
  &::common::_ViewFieldId_default_instance_._instance,
  &::common::_ViewFieldStr_default_instance_._instance,
  &::common::_ViewFieldList_default_instance_._instance,
  &::common::_EquipView_default_instance_._instance,
  &::common::_RoleBrief_default_instance_._instance,
  &::common::_RoleExtend1_default_instance_._instance,
  &::common::_RoleExtend2_default_instance_._instance,
  &::common::_RoleExtend3_default_instance_._instance,
  &::common::_VoteBaseData_default_instance_._instance,
  &::common::_RoleVoteState_default_instance_._instance,
  &::common::_RoleVoteStateList_default_instance_._instance,
  &::common::_NpcSpeak_default_instance_._instance,
  &::common::_ProgressBar_default_instance_._instance,
  &::common::_NpcCountDown_default_instance_._instance,
  &::common::_NpcCountDownList_default_instance_._instance,
  &::common::_NpcHatredUnit_default_instance_._instance,
  &::common::_NpcHatredUnitList_default_instance_._instance,
  &::common::_NpcHatredList_default_instance_._instance,
  &::common::_ReconnectInfo_default_instance_._instance,
};

const char descriptor_table_protodef_common_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014common.proto\022\006common\",\n\tModelPart\022\016\n\006p"
  "artId\030\001 \001(\r\022\017\n\007partVal\030\002 \001(\r\"1\n\rModelPar"
  "tList\022 \n\005parts\030\001 \003(\0132\021.common.ModelPart\""
  ".\n\017OneFashionStain\022\014\n\004part\030\001 \001(\r\022\r\n\005colo"
  "r\030\002 \001(\r\"9\n\014FashionStain\022)\n\010onestain\030\001 \003("
  "\0132\027.common.OneFashionStain\"C\n\013FashionVie"
  "w\022\017\n\007current\030\001 \001(\r\022#\n\005stain\030\002 \001(\0132\024.comm"
  "on.FashionStain\"\257\002\n\021ModuleViewFashion\022!\n"
  "\004head\030\001 \001(\0132\023.common.FashionView\022!\n\004face"
  "\030\002 \001(\0132\023.common.FashionView\022\"\n\005mouth\030\003 \001"
  "(\0132\023.common.FashionView\022\"\n\005cloth\030\004 \001(\0132\023"
  ".common.FashionView\022!\n\004back\030\005 \001(\0132\023.comm"
  "on.FashionView\022!\n\004tail\030\006 \001(\0132\023.common.Fa"
  "shionView\022!\n\004hair\030\007 \001(\0132\023.common.Fashion"
  "View\022#\n\006weapon\030\010 \001(\0132\023.common.FashionVie"
  "w\"C\n\rClientSceneId\022\r\n\005mapId\030\001 \001(\r\022\020\n\010pro"
  "cType\030\002 \001(\r\022\021\n\tprocParam\030\003 \001(\r\"#\n\021Client"
  "StaticScene\022\016\n\006lineId\030\001 \001(\r\"3\n\017ClientCop"
  "yScene\022\020\n\010copyLvId\030\001 \001(\r\022\016\n\006autoId\030\002 \001(\r"
  "\"I\n\tClientPos\022\014\n\004poxX\030\001 \001(\r\022\014\n\004posY\030\002 \001("
  "\r\022\017\n\007offsetX\030\003 \001(\r\022\017\n\007offsetY\030\004 \001(\r\"B\n\017C"
  "lientPosDirect\022\037\n\004cpos\030\001 \001(\0132\021.common.Cl"
  "ientPos\022\016\n\006direct\030\002 \001(\r\"L\n\022ClientPosTerm"
  "inate\022\022\n\nservertime\030\001 \001(\004\022\"\n\007posList\030\002 \003"
  "(\0132\021.common.ClientPos\"x\n\021ClientPosTogeth"
  "er\022\016\n\006mvtype\030\001 \001(\r\022\'\n\006curpos\030\002 \001(\0132\027.com"
  "mon.ClientPosDirect\022*\n\006terpos\030\003 \001(\0132\032.co"
  "mmon.ClientPosTerminate\"(\n\013ViewFieldId\022\014"
  "\n\004type\030\001 \001(\r\022\013\n\003val\030\002 \001(\004\"*\n\014ViewFieldSt"
  "r\022\014\n\004type\030\001 \001(\r\022\014\n\004data\030\002 \001(\014\"_\n\rViewFie"
  "ldList\022%\n\010idfields\030\001 \003(\0132\023.common.ViewFi"
  "eldId\022\'\n\tstrfields\030\002 \003(\0132\024.common.ViewFi"
  "eldStr\"4\n\tEquipView\022\020\n\010equipTid\030\001 \001(\r\022\025\n"
  "\rstrengthLevel\030\002 \001(\r\"\246\001\n\tRoleBrief\022\016\n\006ro"
  "leId\030\001 \001(\004\022\020\n\010nickname\030\002 \001(\014\022\020\n\010headIcon"
  "\030\003 \001(\r\022\021\n\theadFrame\030\004 \001(\r\022\020\n\010careerId\030\005 "
  "\001(\r\022\r\n\005level\030\006 \001(\r\022\013\n\003sex\030\007 \001(\r\022\023\n\013caree"
  "rLevel\030\010 \001(\r\022\017\n\007zoneIdF\030\t \001(\r\"\377\002\n\013RoleEx"
  "tend1\022\016\n\006teamId\030\001 \001(\004\022\020\n\010familyId\030\002 \001(\004\022"
  "%\n\006mpList\030\003 \001(\0132\025.common.ModelPartList\022\022"
  "\n\nfamilyName\030\004 \001(\t\022\025\n\rleaderSceneId\030\005 \001("
  "\004\022\022\n\nfightPoint\030\006 \001(\r\022*\n\007fashion\030\007 \001(\0132\031"
  ".common.ModuleViewFashion\022#\n\010mainHand\030\010 "
  "\001(\0132\021.common.EquipView\022\"\n\007offHand\030\t \001(\0132"
  "\021.common.EquipView\022\020\n\010chatFont\030\n \001(\r\022\021\n\t"
  "chatFrame\030\013 \001(\r\022\021\n\tloginTime\030\014 \001(\r\022\022\n\nlo"
  "goutTime\030\r \001(\r\022\023\n\013offlineTime\030\016 \001(\r\022\022\n\no"
  "nlineTime\030\017 \001(\r\"V\n\013RoleExtend2\022&\n\007sceneI"
  "d\030\001 \001(\0132\025.common.ClientSceneId\022\037\n\004cpos\030\002"
  " \001(\0132\021.common.ClientPos\"C\n\013RoleExtend3\022\n"
  "\n\002hp\030\001 \001(\r\022\r\n\005maxHp\030\002 \001(\r\022\n\n\002mp\030\003 \001(\r\022\r\n"
  "\005maxMp\030\004 \001(\r\"7\n\014VoteBaseData\022\022\n\nexpireTi"
  "me\030\001 \001(\r\022\023\n\013lastingTime\030\002 \001(\r\".\n\rRoleVot"
  "eState\022\016\n\006roleId\030\001 \001(\004\022\r\n\005state\030\002 \001(\r\"9\n"
  "\021RoleVoteStateList\022$\n\005roles\030\001 \003(\0132\025.comm"
  "on.RoleVoteState\"=\n\010NpcSpeak\022\016\n\006textId\030\001"
  " \001(\r\022\017\n\007voiceId\030\002 \001(\r\022\020\n\010actionId\030\003 \001(\r\""
  "L\n\013ProgressBar\022\r\n\005barId\030\001 \001(\r\022\r\n\005param\030\002"
  " \001(\r\022\017\n\007param64\030\003 \001(\004\022\016\n\006expire\030\004 \001(\004\"*\n"
  "\014NpcCountDown\022\n\n\002id\030\001 \001(\r\022\016\n\006expire\030\002 \001("
  "\r\"\?\n\020NpcCountDownList\022+\n\rcountDownList\030\001"
  " \003(\0132\024.common.NpcCountDown\".\n\rNpcHatredU"
  "nit\022\016\n\006roleId\030\001 \001(\004\022\r\n\005value\030\002 \001(\r\"9\n\021Np"
  "cHatredUnitList\022$\n\005units\030\001 \003(\0132\025.common."
  "NpcHatredUnit\"t\n\rNpcHatredList\022(\n\005total\030"
  "\001 \001(\0132\031.common.NpcHatredUnitList\022)\n\006upda"
  "te\030\002 \001(\0132\031.common.NpcHatredUnitList\022\016\n\006r"
  "emove\030\003 \003(\004\"R\n\rReconnectInfo\022\024\n\014reconnec"
  "tNum\030\001 \001(\r\022\025\n\rreconnectTick\030\002 \001(\r\022\024\n\014con"
  "tinueTick\030\003 \001(\r*_\n\nenMoveType\022\023\n\017enMoveT"
  "ype_None\020\000\022\023\n\017enMoveType_Walk\020\001\022\023\n\017enMov"
  "eType_Sunc\020\002\022\022\n\016enMoveType_Max\020\003*\240\001\n\021enR"
  "oleRebirthType\022\032\n\026enRoleRebirthType_None"
  "\020\000\022\032\n\026enRoleRebirthType_Item\020\001\022\033\n\027enRole"
  "RebirthType_Point\020\002\022\033\n\027enRoleRebirthType"
  "_Skill\020\003\022\031\n\025enRoleRebirthType_Max\020\004b\006pro"
  "to3"
  ;
static ::_pbi::once_flag descriptor_table_common_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_common_2eproto = {
    false, false, 3043, descriptor_table_protodef_common_2eproto,
    "common.proto",
    &descriptor_table_common_2eproto_once, nullptr, 0, 32,
    schemas, file_default_instances, TableStruct_common_2eproto::offsets,
    file_level_metadata_common_2eproto, file_level_enum_descriptors_common_2eproto,
    file_level_service_descriptors_common_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_common_2eproto_getter() {
  return &descriptor_table_common_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_common_2eproto(&descriptor_table_common_2eproto);
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enMoveType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[0];
}
bool enMoveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enRoleRebirthType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[1];
}
bool enRoleRebirthType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ModelPart::_Internal {
 public:
};

ModelPart::ModelPart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ModelPart)
}
ModelPart::ModelPart(const ModelPart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&partid_, &from.partid_,
    static_cast<size_t>(reinterpret_cast<char*>(&partval_) -
    reinterpret_cast<char*>(&partid_)) + sizeof(partval_));
  // @@protoc_insertion_point(copy_constructor:common.ModelPart)
}

inline void ModelPart::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&partid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&partval_) -
    reinterpret_cast<char*>(&partid_)) + sizeof(partval_));
}

ModelPart::~ModelPart() {
  // @@protoc_insertion_point(destructor:common.ModelPart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelPart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ModelPart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelPart::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ModelPart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&partid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&partval_) -
      reinterpret_cast<char*>(&partid_)) + sizeof(partval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelPart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 partId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          partid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 partVal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          partval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelPart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ModelPart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 partId = 1;
  if (this->_internal_partid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_partid(), target);
  }

  // uint32 partVal = 2;
  if (this->_internal_partval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_partval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ModelPart)
  return target;
}

size_t ModelPart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ModelPart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 partId = 1;
  if (this->_internal_partid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_partid());
  }

  // uint32 partVal = 2;
  if (this->_internal_partval() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_partval());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelPart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModelPart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelPart::GetClassData() const { return &_class_data_; }

void ModelPart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModelPart *>(to)->MergeFrom(
      static_cast<const ModelPart &>(from));
}


void ModelPart::MergeFrom(const ModelPart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ModelPart)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_partid() != 0) {
    _internal_set_partid(from._internal_partid());
  }
  if (from._internal_partval() != 0) {
    _internal_set_partval(from._internal_partval());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelPart::CopyFrom(const ModelPart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ModelPart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelPart::IsInitialized() const {
  return true;
}

void ModelPart::InternalSwap(ModelPart* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelPart, partval_)
      + sizeof(ModelPart::partval_)
      - PROTOBUF_FIELD_OFFSET(ModelPart, partid_)>(
          reinterpret_cast<char*>(&partid_),
          reinterpret_cast<char*>(&other->partid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelPart::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[0]);
}

// ===================================================================

class ModelPartList::_Internal {
 public:
};

ModelPartList::ModelPartList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  parts_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ModelPartList)
}
ModelPartList::ModelPartList(const ModelPartList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parts_(from.parts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:common.ModelPartList)
}

inline void ModelPartList::SharedCtor() {
}

ModelPartList::~ModelPartList() {
  // @@protoc_insertion_point(destructor:common.ModelPartList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelPartList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ModelPartList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelPartList::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ModelPartList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelPartList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .common.ModelPart parts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelPartList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ModelPartList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.ModelPart parts = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_parts_size()); i < n; i++) {
    const auto& repfield = this->_internal_parts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ModelPartList)
  return target;
}

size_t ModelPartList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ModelPartList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.ModelPart parts = 1;
  total_size += 1UL * this->_internal_parts_size();
  for (const auto& msg : this->parts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelPartList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModelPartList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelPartList::GetClassData() const { return &_class_data_; }

void ModelPartList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModelPartList *>(to)->MergeFrom(
      static_cast<const ModelPartList &>(from));
}


void ModelPartList::MergeFrom(const ModelPartList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ModelPartList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  parts_.MergeFrom(from.parts_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelPartList::CopyFrom(const ModelPartList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ModelPartList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelPartList::IsInitialized() const {
  return true;
}

void ModelPartList::InternalSwap(ModelPartList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  parts_.InternalSwap(&other->parts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelPartList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[1]);
}

// ===================================================================

class OneFashionStain::_Internal {
 public:
};

OneFashionStain::OneFashionStain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.OneFashionStain)
}
OneFashionStain::OneFashionStain(const OneFashionStain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&part_, &from.part_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&part_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:common.OneFashionStain)
}

inline void OneFashionStain::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&part_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&part_)) + sizeof(color_));
}

OneFashionStain::~OneFashionStain() {
  // @@protoc_insertion_point(destructor:common.OneFashionStain)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OneFashionStain::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OneFashionStain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OneFashionStain::Clear() {
// @@protoc_insertion_point(message_clear_start:common.OneFashionStain)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&part_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&part_)) + sizeof(color_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OneFashionStain::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 part = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          part_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OneFashionStain::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.OneFashionStain)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 part = 1;
  if (this->_internal_part() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_part(), target);
  }

  // uint32 color = 2;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.OneFashionStain)
  return target;
}

size_t OneFashionStain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.OneFashionStain)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 part = 1;
  if (this->_internal_part() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_part());
  }

  // uint32 color = 2;
  if (this->_internal_color() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_color());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OneFashionStain::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OneFashionStain::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OneFashionStain::GetClassData() const { return &_class_data_; }

void OneFashionStain::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OneFashionStain *>(to)->MergeFrom(
      static_cast<const OneFashionStain &>(from));
}


void OneFashionStain::MergeFrom(const OneFashionStain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.OneFashionStain)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_part() != 0) {
    _internal_set_part(from._internal_part());
  }
  if (from._internal_color() != 0) {
    _internal_set_color(from._internal_color());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OneFashionStain::CopyFrom(const OneFashionStain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.OneFashionStain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneFashionStain::IsInitialized() const {
  return true;
}

void OneFashionStain::InternalSwap(OneFashionStain* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OneFashionStain, color_)
      + sizeof(OneFashionStain::color_)
      - PROTOBUF_FIELD_OFFSET(OneFashionStain, part_)>(
          reinterpret_cast<char*>(&part_),
          reinterpret_cast<char*>(&other->part_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OneFashionStain::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[2]);
}

// ===================================================================

class FashionStain::_Internal {
 public:
};

FashionStain::FashionStain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  onestain_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.FashionStain)
}
FashionStain::FashionStain(const FashionStain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      onestain_(from.onestain_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:common.FashionStain)
}

inline void FashionStain::SharedCtor() {
}

FashionStain::~FashionStain() {
  // @@protoc_insertion_point(destructor:common.FashionStain)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FashionStain::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FashionStain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FashionStain::Clear() {
// @@protoc_insertion_point(message_clear_start:common.FashionStain)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  onestain_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FashionStain::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .common.OneFashionStain onestain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_onestain(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FashionStain::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.FashionStain)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.OneFashionStain onestain = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_onestain_size()); i < n; i++) {
    const auto& repfield = this->_internal_onestain(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.FashionStain)
  return target;
}

size_t FashionStain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.FashionStain)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.OneFashionStain onestain = 1;
  total_size += 1UL * this->_internal_onestain_size();
  for (const auto& msg : this->onestain_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FashionStain::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FashionStain::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FashionStain::GetClassData() const { return &_class_data_; }

void FashionStain::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FashionStain *>(to)->MergeFrom(
      static_cast<const FashionStain &>(from));
}


void FashionStain::MergeFrom(const FashionStain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.FashionStain)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  onestain_.MergeFrom(from.onestain_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FashionStain::CopyFrom(const FashionStain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.FashionStain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FashionStain::IsInitialized() const {
  return true;
}

void FashionStain::InternalSwap(FashionStain* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  onestain_.InternalSwap(&other->onestain_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FashionStain::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[3]);
}

// ===================================================================

class FashionView::_Internal {
 public:
  static const ::common::FashionStain& stain(const FashionView* msg);
};

const ::common::FashionStain&
FashionView::_Internal::stain(const FashionView* msg) {
  return *msg->stain_;
}
FashionView::FashionView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.FashionView)
}
FashionView::FashionView(const FashionView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stain()) {
    stain_ = new ::common::FashionStain(*from.stain_);
  } else {
    stain_ = nullptr;
  }
  current_ = from.current_;
  // @@protoc_insertion_point(copy_constructor:common.FashionView)
}

inline void FashionView::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stain_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&current_) -
    reinterpret_cast<char*>(&stain_)) + sizeof(current_));
}

FashionView::~FashionView() {
  // @@protoc_insertion_point(destructor:common.FashionView)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FashionView::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete stain_;
}

void FashionView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FashionView::Clear() {
// @@protoc_insertion_point(message_clear_start:common.FashionView)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && stain_ != nullptr) {
    delete stain_;
  }
  stain_ = nullptr;
  current_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FashionView::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 current = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.FashionStain stain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stain(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FashionView::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.FashionView)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 current = 1;
  if (this->_internal_current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_current(), target);
  }

  // .common.FashionStain stain = 2;
  if (this->_internal_has_stain()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::stain(this),
        _Internal::stain(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.FashionView)
  return target;
}

size_t FashionView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.FashionView)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.FashionStain stain = 2;
  if (this->_internal_has_stain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stain_);
  }

  // uint32 current = 1;
  if (this->_internal_current() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_current());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FashionView::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FashionView::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FashionView::GetClassData() const { return &_class_data_; }

void FashionView::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FashionView *>(to)->MergeFrom(
      static_cast<const FashionView &>(from));
}


void FashionView::MergeFrom(const FashionView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.FashionView)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stain()) {
    _internal_mutable_stain()->::common::FashionStain::MergeFrom(from._internal_stain());
  }
  if (from._internal_current() != 0) {
    _internal_set_current(from._internal_current());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FashionView::CopyFrom(const FashionView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.FashionView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FashionView::IsInitialized() const {
  return true;
}

void FashionView::InternalSwap(FashionView* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FashionView, current_)
      + sizeof(FashionView::current_)
      - PROTOBUF_FIELD_OFFSET(FashionView, stain_)>(
          reinterpret_cast<char*>(&stain_),
          reinterpret_cast<char*>(&other->stain_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FashionView::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[4]);
}

// ===================================================================

class ModuleViewFashion::_Internal {
 public:
  static const ::common::FashionView& head(const ModuleViewFashion* msg);
  static const ::common::FashionView& face(const ModuleViewFashion* msg);
  static const ::common::FashionView& mouth(const ModuleViewFashion* msg);
  static const ::common::FashionView& cloth(const ModuleViewFashion* msg);
  static const ::common::FashionView& back(const ModuleViewFashion* msg);
  static const ::common::FashionView& tail(const ModuleViewFashion* msg);
  static const ::common::FashionView& hair(const ModuleViewFashion* msg);
  static const ::common::FashionView& weapon(const ModuleViewFashion* msg);
};

const ::common::FashionView&
ModuleViewFashion::_Internal::head(const ModuleViewFashion* msg) {
  return *msg->head_;
}
const ::common::FashionView&
ModuleViewFashion::_Internal::face(const ModuleViewFashion* msg) {
  return *msg->face_;
}
const ::common::FashionView&
ModuleViewFashion::_Internal::mouth(const ModuleViewFashion* msg) {
  return *msg->mouth_;
}
const ::common::FashionView&
ModuleViewFashion::_Internal::cloth(const ModuleViewFashion* msg) {
  return *msg->cloth_;
}
const ::common::FashionView&
ModuleViewFashion::_Internal::back(const ModuleViewFashion* msg) {
  return *msg->back_;
}
const ::common::FashionView&
ModuleViewFashion::_Internal::tail(const ModuleViewFashion* msg) {
  return *msg->tail_;
}
const ::common::FashionView&
ModuleViewFashion::_Internal::hair(const ModuleViewFashion* msg) {
  return *msg->hair_;
}
const ::common::FashionView&
ModuleViewFashion::_Internal::weapon(const ModuleViewFashion* msg) {
  return *msg->weapon_;
}
ModuleViewFashion::ModuleViewFashion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ModuleViewFashion)
}
ModuleViewFashion::ModuleViewFashion(const ModuleViewFashion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    head_ = new ::common::FashionView(*from.head_);
  } else {
    head_ = nullptr;
  }
  if (from._internal_has_face()) {
    face_ = new ::common::FashionView(*from.face_);
  } else {
    face_ = nullptr;
  }
  if (from._internal_has_mouth()) {
    mouth_ = new ::common::FashionView(*from.mouth_);
  } else {
    mouth_ = nullptr;
  }
  if (from._internal_has_cloth()) {
    cloth_ = new ::common::FashionView(*from.cloth_);
  } else {
    cloth_ = nullptr;
  }
  if (from._internal_has_back()) {
    back_ = new ::common::FashionView(*from.back_);
  } else {
    back_ = nullptr;
  }
  if (from._internal_has_tail()) {
    tail_ = new ::common::FashionView(*from.tail_);
  } else {
    tail_ = nullptr;
  }
  if (from._internal_has_hair()) {
    hair_ = new ::common::FashionView(*from.hair_);
  } else {
    hair_ = nullptr;
  }
  if (from._internal_has_weapon()) {
    weapon_ = new ::common::FashionView(*from.weapon_);
  } else {
    weapon_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:common.ModuleViewFashion)
}

inline void ModuleViewFashion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&weapon_) -
    reinterpret_cast<char*>(&head_)) + sizeof(weapon_));
}

ModuleViewFashion::~ModuleViewFashion() {
  // @@protoc_insertion_point(destructor:common.ModuleViewFashion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModuleViewFashion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete head_;
  if (this != internal_default_instance()) delete face_;
  if (this != internal_default_instance()) delete mouth_;
  if (this != internal_default_instance()) delete cloth_;
  if (this != internal_default_instance()) delete back_;
  if (this != internal_default_instance()) delete tail_;
  if (this != internal_default_instance()) delete hair_;
  if (this != internal_default_instance()) delete weapon_;
}

void ModuleViewFashion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModuleViewFashion::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ModuleViewFashion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  if (GetArenaForAllocation() == nullptr && face_ != nullptr) {
    delete face_;
  }
  face_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mouth_ != nullptr) {
    delete mouth_;
  }
  mouth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cloth_ != nullptr) {
    delete cloth_;
  }
  cloth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && back_ != nullptr) {
    delete back_;
  }
  back_ = nullptr;
  if (GetArenaForAllocation() == nullptr && tail_ != nullptr) {
    delete tail_;
  }
  tail_ = nullptr;
  if (GetArenaForAllocation() == nullptr && hair_ != nullptr) {
    delete hair_;
  }
  hair_ = nullptr;
  if (GetArenaForAllocation() == nullptr && weapon_ != nullptr) {
    delete weapon_;
  }
  weapon_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModuleViewFashion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.FashionView head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.FashionView face = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_face(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.FashionView mouth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mouth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.FashionView cloth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cloth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.FashionView back = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_back(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.FashionView tail = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.FashionView hair = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_hair(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.FashionView weapon = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_weapon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModuleViewFashion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ModuleViewFashion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.FashionView head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // .common.FashionView face = 2;
  if (this->_internal_has_face()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::face(this),
        _Internal::face(this).GetCachedSize(), target, stream);
  }

  // .common.FashionView mouth = 3;
  if (this->_internal_has_mouth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::mouth(this),
        _Internal::mouth(this).GetCachedSize(), target, stream);
  }

  // .common.FashionView cloth = 4;
  if (this->_internal_has_cloth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::cloth(this),
        _Internal::cloth(this).GetCachedSize(), target, stream);
  }

  // .common.FashionView back = 5;
  if (this->_internal_has_back()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::back(this),
        _Internal::back(this).GetCachedSize(), target, stream);
  }

  // .common.FashionView tail = 6;
  if (this->_internal_has_tail()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::tail(this),
        _Internal::tail(this).GetCachedSize(), target, stream);
  }

  // .common.FashionView hair = 7;
  if (this->_internal_has_hair()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::hair(this),
        _Internal::hair(this).GetCachedSize(), target, stream);
  }

  // .common.FashionView weapon = 8;
  if (this->_internal_has_weapon()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::weapon(this),
        _Internal::weapon(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ModuleViewFashion)
  return target;
}

size_t ModuleViewFashion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ModuleViewFashion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.FashionView head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // .common.FashionView face = 2;
  if (this->_internal_has_face()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *face_);
  }

  // .common.FashionView mouth = 3;
  if (this->_internal_has_mouth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mouth_);
  }

  // .common.FashionView cloth = 4;
  if (this->_internal_has_cloth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cloth_);
  }

  // .common.FashionView back = 5;
  if (this->_internal_has_back()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *back_);
  }

  // .common.FashionView tail = 6;
  if (this->_internal_has_tail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tail_);
  }

  // .common.FashionView hair = 7;
  if (this->_internal_has_hair()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hair_);
  }

  // .common.FashionView weapon = 8;
  if (this->_internal_has_weapon()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *weapon_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModuleViewFashion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModuleViewFashion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModuleViewFashion::GetClassData() const { return &_class_data_; }

void ModuleViewFashion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModuleViewFashion *>(to)->MergeFrom(
      static_cast<const ModuleViewFashion &>(from));
}


void ModuleViewFashion::MergeFrom(const ModuleViewFashion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ModuleViewFashion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_head()) {
    _internal_mutable_head()->::common::FashionView::MergeFrom(from._internal_head());
  }
  if (from._internal_has_face()) {
    _internal_mutable_face()->::common::FashionView::MergeFrom(from._internal_face());
  }
  if (from._internal_has_mouth()) {
    _internal_mutable_mouth()->::common::FashionView::MergeFrom(from._internal_mouth());
  }
  if (from._internal_has_cloth()) {
    _internal_mutable_cloth()->::common::FashionView::MergeFrom(from._internal_cloth());
  }
  if (from._internal_has_back()) {
    _internal_mutable_back()->::common::FashionView::MergeFrom(from._internal_back());
  }
  if (from._internal_has_tail()) {
    _internal_mutable_tail()->::common::FashionView::MergeFrom(from._internal_tail());
  }
  if (from._internal_has_hair()) {
    _internal_mutable_hair()->::common::FashionView::MergeFrom(from._internal_hair());
  }
  if (from._internal_has_weapon()) {
    _internal_mutable_weapon()->::common::FashionView::MergeFrom(from._internal_weapon());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModuleViewFashion::CopyFrom(const ModuleViewFashion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ModuleViewFashion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleViewFashion::IsInitialized() const {
  return true;
}

void ModuleViewFashion::InternalSwap(ModuleViewFashion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModuleViewFashion, weapon_)
      + sizeof(ModuleViewFashion::weapon_)
      - PROTOBUF_FIELD_OFFSET(ModuleViewFashion, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModuleViewFashion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[5]);
}

// ===================================================================

class ClientSceneId::_Internal {
 public:
};

ClientSceneId::ClientSceneId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ClientSceneId)
}
ClientSceneId::ClientSceneId(const ClientSceneId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mapid_, &from.mapid_,
    static_cast<size_t>(reinterpret_cast<char*>(&procparam_) -
    reinterpret_cast<char*>(&mapid_)) + sizeof(procparam_));
  // @@protoc_insertion_point(copy_constructor:common.ClientSceneId)
}

inline void ClientSceneId::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mapid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&procparam_) -
    reinterpret_cast<char*>(&mapid_)) + sizeof(procparam_));
}

ClientSceneId::~ClientSceneId() {
  // @@protoc_insertion_point(destructor:common.ClientSceneId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientSceneId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientSceneId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientSceneId::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ClientSceneId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&procparam_) -
      reinterpret_cast<char*>(&mapid_)) + sizeof(procparam_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientSceneId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 mapId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 procType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          proctype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 procParam = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          procparam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientSceneId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ClientSceneId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mapId = 1;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mapid(), target);
  }

  // uint32 procType = 2;
  if (this->_internal_proctype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_proctype(), target);
  }

  // uint32 procParam = 3;
  if (this->_internal_procparam() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_procparam(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ClientSceneId)
  return target;
}

size_t ClientSceneId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ClientSceneId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 mapId = 1;
  if (this->_internal_mapid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mapid());
  }

  // uint32 procType = 2;
  if (this->_internal_proctype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_proctype());
  }

  // uint32 procParam = 3;
  if (this->_internal_procparam() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_procparam());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientSceneId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientSceneId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientSceneId::GetClassData() const { return &_class_data_; }

void ClientSceneId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientSceneId *>(to)->MergeFrom(
      static_cast<const ClientSceneId &>(from));
}


void ClientSceneId::MergeFrom(const ClientSceneId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ClientSceneId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mapid() != 0) {
    _internal_set_mapid(from._internal_mapid());
  }
  if (from._internal_proctype() != 0) {
    _internal_set_proctype(from._internal_proctype());
  }
  if (from._internal_procparam() != 0) {
    _internal_set_procparam(from._internal_procparam());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientSceneId::CopyFrom(const ClientSceneId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ClientSceneId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSceneId::IsInitialized() const {
  return true;
}

void ClientSceneId::InternalSwap(ClientSceneId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientSceneId, procparam_)
      + sizeof(ClientSceneId::procparam_)
      - PROTOBUF_FIELD_OFFSET(ClientSceneId, mapid_)>(
          reinterpret_cast<char*>(&mapid_),
          reinterpret_cast<char*>(&other->mapid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientSceneId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[6]);
}

// ===================================================================

class ClientStaticScene::_Internal {
 public:
};

ClientStaticScene::ClientStaticScene(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ClientStaticScene)
}
ClientStaticScene::ClientStaticScene(const ClientStaticScene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lineid_ = from.lineid_;
  // @@protoc_insertion_point(copy_constructor:common.ClientStaticScene)
}

inline void ClientStaticScene::SharedCtor() {
lineid_ = 0u;
}

ClientStaticScene::~ClientStaticScene() {
  // @@protoc_insertion_point(destructor:common.ClientStaticScene)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientStaticScene::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientStaticScene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientStaticScene::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ClientStaticScene)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lineid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientStaticScene::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 lineId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          lineid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientStaticScene::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ClientStaticScene)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 lineId = 1;
  if (this->_internal_lineid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lineid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ClientStaticScene)
  return target;
}

size_t ClientStaticScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ClientStaticScene)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 lineId = 1;
  if (this->_internal_lineid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lineid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientStaticScene::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientStaticScene::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientStaticScene::GetClassData() const { return &_class_data_; }

void ClientStaticScene::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientStaticScene *>(to)->MergeFrom(
      static_cast<const ClientStaticScene &>(from));
}


void ClientStaticScene::MergeFrom(const ClientStaticScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ClientStaticScene)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_lineid() != 0) {
    _internal_set_lineid(from._internal_lineid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientStaticScene::CopyFrom(const ClientStaticScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ClientStaticScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientStaticScene::IsInitialized() const {
  return true;
}

void ClientStaticScene::InternalSwap(ClientStaticScene* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(lineid_, other->lineid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientStaticScene::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[7]);
}

// ===================================================================

class ClientCopyScene::_Internal {
 public:
};

ClientCopyScene::ClientCopyScene(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ClientCopyScene)
}
ClientCopyScene::ClientCopyScene(const ClientCopyScene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&copylvid_, &from.copylvid_,
    static_cast<size_t>(reinterpret_cast<char*>(&autoid_) -
    reinterpret_cast<char*>(&copylvid_)) + sizeof(autoid_));
  // @@protoc_insertion_point(copy_constructor:common.ClientCopyScene)
}

inline void ClientCopyScene::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&copylvid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&autoid_) -
    reinterpret_cast<char*>(&copylvid_)) + sizeof(autoid_));
}

ClientCopyScene::~ClientCopyScene() {
  // @@protoc_insertion_point(destructor:common.ClientCopyScene)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientCopyScene::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientCopyScene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientCopyScene::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ClientCopyScene)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&copylvid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&autoid_) -
      reinterpret_cast<char*>(&copylvid_)) + sizeof(autoid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientCopyScene::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 copyLvId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          copylvid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 autoId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          autoid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientCopyScene::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ClientCopyScene)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 copyLvId = 1;
  if (this->_internal_copylvid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_copylvid(), target);
  }

  // uint32 autoId = 2;
  if (this->_internal_autoid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_autoid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ClientCopyScene)
  return target;
}

size_t ClientCopyScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ClientCopyScene)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 copyLvId = 1;
  if (this->_internal_copylvid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_copylvid());
  }

  // uint32 autoId = 2;
  if (this->_internal_autoid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_autoid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientCopyScene::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientCopyScene::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientCopyScene::GetClassData() const { return &_class_data_; }

void ClientCopyScene::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientCopyScene *>(to)->MergeFrom(
      static_cast<const ClientCopyScene &>(from));
}


void ClientCopyScene::MergeFrom(const ClientCopyScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ClientCopyScene)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_copylvid() != 0) {
    _internal_set_copylvid(from._internal_copylvid());
  }
  if (from._internal_autoid() != 0) {
    _internal_set_autoid(from._internal_autoid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientCopyScene::CopyFrom(const ClientCopyScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ClientCopyScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCopyScene::IsInitialized() const {
  return true;
}

void ClientCopyScene::InternalSwap(ClientCopyScene* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientCopyScene, autoid_)
      + sizeof(ClientCopyScene::autoid_)
      - PROTOBUF_FIELD_OFFSET(ClientCopyScene, copylvid_)>(
          reinterpret_cast<char*>(&copylvid_),
          reinterpret_cast<char*>(&other->copylvid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientCopyScene::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[8]);
}

// ===================================================================

class ClientPos::_Internal {
 public:
};

ClientPos::ClientPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ClientPos)
}
ClientPos::ClientPos(const ClientPos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&poxx_, &from.poxx_,
    static_cast<size_t>(reinterpret_cast<char*>(&offsety_) -
    reinterpret_cast<char*>(&poxx_)) + sizeof(offsety_));
  // @@protoc_insertion_point(copy_constructor:common.ClientPos)
}

inline void ClientPos::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&poxx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offsety_) -
    reinterpret_cast<char*>(&poxx_)) + sizeof(offsety_));
}

ClientPos::~ClientPos() {
  // @@protoc_insertion_point(destructor:common.ClientPos)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientPos::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientPos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientPos::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ClientPos)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&poxx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offsety_) -
      reinterpret_cast<char*>(&poxx_)) + sizeof(offsety_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientPos::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 poxX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          poxx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 offsetX = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          offsetx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 offsetY = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          offsety_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientPos::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ClientPos)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 poxX = 1;
  if (this->_internal_poxx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_poxx(), target);
  }

  // uint32 posY = 2;
  if (this->_internal_posy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_posy(), target);
  }

  // uint32 offsetX = 3;
  if (this->_internal_offsetx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_offsetx(), target);
  }

  // uint32 offsetY = 4;
  if (this->_internal_offsety() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_offsety(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ClientPos)
  return target;
}

size_t ClientPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ClientPos)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 poxX = 1;
  if (this->_internal_poxx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_poxx());
  }

  // uint32 posY = 2;
  if (this->_internal_posy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posy());
  }

  // uint32 offsetX = 3;
  if (this->_internal_offsetx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offsetx());
  }

  // uint32 offsetY = 4;
  if (this->_internal_offsety() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offsety());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientPos::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientPos::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientPos::GetClassData() const { return &_class_data_; }

void ClientPos::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientPos *>(to)->MergeFrom(
      static_cast<const ClientPos &>(from));
}


void ClientPos::MergeFrom(const ClientPos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ClientPos)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_poxx() != 0) {
    _internal_set_poxx(from._internal_poxx());
  }
  if (from._internal_posy() != 0) {
    _internal_set_posy(from._internal_posy());
  }
  if (from._internal_offsetx() != 0) {
    _internal_set_offsetx(from._internal_offsetx());
  }
  if (from._internal_offsety() != 0) {
    _internal_set_offsety(from._internal_offsety());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientPos::CopyFrom(const ClientPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ClientPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientPos::IsInitialized() const {
  return true;
}

void ClientPos::InternalSwap(ClientPos* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientPos, offsety_)
      + sizeof(ClientPos::offsety_)
      - PROTOBUF_FIELD_OFFSET(ClientPos, poxx_)>(
          reinterpret_cast<char*>(&poxx_),
          reinterpret_cast<char*>(&other->poxx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientPos::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[9]);
}

// ===================================================================

class ClientPosDirect::_Internal {
 public:
  static const ::common::ClientPos& cpos(const ClientPosDirect* msg);
};

const ::common::ClientPos&
ClientPosDirect::_Internal::cpos(const ClientPosDirect* msg) {
  return *msg->cpos_;
}
ClientPosDirect::ClientPosDirect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ClientPosDirect)
}
ClientPosDirect::ClientPosDirect(const ClientPosDirect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cpos()) {
    cpos_ = new ::common::ClientPos(*from.cpos_);
  } else {
    cpos_ = nullptr;
  }
  direct_ = from.direct_;
  // @@protoc_insertion_point(copy_constructor:common.ClientPosDirect)
}

inline void ClientPosDirect::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cpos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&direct_) -
    reinterpret_cast<char*>(&cpos_)) + sizeof(direct_));
}

ClientPosDirect::~ClientPosDirect() {
  // @@protoc_insertion_point(destructor:common.ClientPosDirect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientPosDirect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete cpos_;
}

void ClientPosDirect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientPosDirect::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ClientPosDirect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && cpos_ != nullptr) {
    delete cpos_;
  }
  cpos_ = nullptr;
  direct_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientPosDirect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.ClientPos cpos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 direct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          direct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientPosDirect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ClientPosDirect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.ClientPos cpos = 1;
  if (this->_internal_has_cpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cpos(this),
        _Internal::cpos(this).GetCachedSize(), target, stream);
  }

  // uint32 direct = 2;
  if (this->_internal_direct() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_direct(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ClientPosDirect)
  return target;
}

size_t ClientPosDirect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ClientPosDirect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.ClientPos cpos = 1;
  if (this->_internal_has_cpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cpos_);
  }

  // uint32 direct = 2;
  if (this->_internal_direct() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_direct());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientPosDirect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientPosDirect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientPosDirect::GetClassData() const { return &_class_data_; }

void ClientPosDirect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientPosDirect *>(to)->MergeFrom(
      static_cast<const ClientPosDirect &>(from));
}


void ClientPosDirect::MergeFrom(const ClientPosDirect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ClientPosDirect)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cpos()) {
    _internal_mutable_cpos()->::common::ClientPos::MergeFrom(from._internal_cpos());
  }
  if (from._internal_direct() != 0) {
    _internal_set_direct(from._internal_direct());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientPosDirect::CopyFrom(const ClientPosDirect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ClientPosDirect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientPosDirect::IsInitialized() const {
  return true;
}

void ClientPosDirect::InternalSwap(ClientPosDirect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientPosDirect, direct_)
      + sizeof(ClientPosDirect::direct_)
      - PROTOBUF_FIELD_OFFSET(ClientPosDirect, cpos_)>(
          reinterpret_cast<char*>(&cpos_),
          reinterpret_cast<char*>(&other->cpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientPosDirect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[10]);
}

// ===================================================================

class ClientPosTerminate::_Internal {
 public:
};

ClientPosTerminate::ClientPosTerminate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  poslist_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ClientPosTerminate)
}
ClientPosTerminate::ClientPosTerminate(const ClientPosTerminate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      poslist_(from.poslist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  servertime_ = from.servertime_;
  // @@protoc_insertion_point(copy_constructor:common.ClientPosTerminate)
}

inline void ClientPosTerminate::SharedCtor() {
servertime_ = uint64_t{0u};
}

ClientPosTerminate::~ClientPosTerminate() {
  // @@protoc_insertion_point(destructor:common.ClientPosTerminate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientPosTerminate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientPosTerminate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientPosTerminate::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ClientPosTerminate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  poslist_.Clear();
  servertime_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientPosTerminate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 servertime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          servertime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .common.ClientPos posList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_poslist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientPosTerminate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ClientPosTerminate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 servertime = 1;
  if (this->_internal_servertime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_servertime(), target);
  }

  // repeated .common.ClientPos posList = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_poslist_size()); i < n; i++) {
    const auto& repfield = this->_internal_poslist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ClientPosTerminate)
  return target;
}

size_t ClientPosTerminate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ClientPosTerminate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.ClientPos posList = 2;
  total_size += 1UL * this->_internal_poslist_size();
  for (const auto& msg : this->poslist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 servertime = 1;
  if (this->_internal_servertime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_servertime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientPosTerminate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientPosTerminate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientPosTerminate::GetClassData() const { return &_class_data_; }

void ClientPosTerminate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientPosTerminate *>(to)->MergeFrom(
      static_cast<const ClientPosTerminate &>(from));
}


void ClientPosTerminate::MergeFrom(const ClientPosTerminate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ClientPosTerminate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  poslist_.MergeFrom(from.poslist_);
  if (from._internal_servertime() != 0) {
    _internal_set_servertime(from._internal_servertime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientPosTerminate::CopyFrom(const ClientPosTerminate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ClientPosTerminate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientPosTerminate::IsInitialized() const {
  return true;
}

void ClientPosTerminate::InternalSwap(ClientPosTerminate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  poslist_.InternalSwap(&other->poslist_);
  swap(servertime_, other->servertime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientPosTerminate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[11]);
}

// ===================================================================

class ClientPosTogether::_Internal {
 public:
  static const ::common::ClientPosDirect& curpos(const ClientPosTogether* msg);
  static const ::common::ClientPosTerminate& terpos(const ClientPosTogether* msg);
};

const ::common::ClientPosDirect&
ClientPosTogether::_Internal::curpos(const ClientPosTogether* msg) {
  return *msg->curpos_;
}
const ::common::ClientPosTerminate&
ClientPosTogether::_Internal::terpos(const ClientPosTogether* msg) {
  return *msg->terpos_;
}
ClientPosTogether::ClientPosTogether(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ClientPosTogether)
}
ClientPosTogether::ClientPosTogether(const ClientPosTogether& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_curpos()) {
    curpos_ = new ::common::ClientPosDirect(*from.curpos_);
  } else {
    curpos_ = nullptr;
  }
  if (from._internal_has_terpos()) {
    terpos_ = new ::common::ClientPosTerminate(*from.terpos_);
  } else {
    terpos_ = nullptr;
  }
  mvtype_ = from.mvtype_;
  // @@protoc_insertion_point(copy_constructor:common.ClientPosTogether)
}

inline void ClientPosTogether::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&curpos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mvtype_) -
    reinterpret_cast<char*>(&curpos_)) + sizeof(mvtype_));
}

ClientPosTogether::~ClientPosTogether() {
  // @@protoc_insertion_point(destructor:common.ClientPosTogether)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientPosTogether::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete curpos_;
  if (this != internal_default_instance()) delete terpos_;
}

void ClientPosTogether::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientPosTogether::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ClientPosTogether)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && curpos_ != nullptr) {
    delete curpos_;
  }
  curpos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && terpos_ != nullptr) {
    delete terpos_;
  }
  terpos_ = nullptr;
  mvtype_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientPosTogether::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 mvtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          mvtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.ClientPosDirect curpos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_curpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.ClientPosTerminate terpos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_terpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientPosTogether::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ClientPosTogether)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mvtype = 1;
  if (this->_internal_mvtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mvtype(), target);
  }

  // .common.ClientPosDirect curpos = 2;
  if (this->_internal_has_curpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::curpos(this),
        _Internal::curpos(this).GetCachedSize(), target, stream);
  }

  // .common.ClientPosTerminate terpos = 3;
  if (this->_internal_has_terpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::terpos(this),
        _Internal::terpos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ClientPosTogether)
  return target;
}

size_t ClientPosTogether::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ClientPosTogether)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.ClientPosDirect curpos = 2;
  if (this->_internal_has_curpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *curpos_);
  }

  // .common.ClientPosTerminate terpos = 3;
  if (this->_internal_has_terpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *terpos_);
  }

  // uint32 mvtype = 1;
  if (this->_internal_mvtype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mvtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientPosTogether::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientPosTogether::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientPosTogether::GetClassData() const { return &_class_data_; }

void ClientPosTogether::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientPosTogether *>(to)->MergeFrom(
      static_cast<const ClientPosTogether &>(from));
}


void ClientPosTogether::MergeFrom(const ClientPosTogether& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ClientPosTogether)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_curpos()) {
    _internal_mutable_curpos()->::common::ClientPosDirect::MergeFrom(from._internal_curpos());
  }
  if (from._internal_has_terpos()) {
    _internal_mutable_terpos()->::common::ClientPosTerminate::MergeFrom(from._internal_terpos());
  }
  if (from._internal_mvtype() != 0) {
    _internal_set_mvtype(from._internal_mvtype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientPosTogether::CopyFrom(const ClientPosTogether& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ClientPosTogether)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientPosTogether::IsInitialized() const {
  return true;
}

void ClientPosTogether::InternalSwap(ClientPosTogether* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientPosTogether, mvtype_)
      + sizeof(ClientPosTogether::mvtype_)
      - PROTOBUF_FIELD_OFFSET(ClientPosTogether, curpos_)>(
          reinterpret_cast<char*>(&curpos_),
          reinterpret_cast<char*>(&other->curpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientPosTogether::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[12]);
}

// ===================================================================

class ViewFieldId::_Internal {
 public:
};

ViewFieldId::ViewFieldId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ViewFieldId)
}
ViewFieldId::ViewFieldId(const ViewFieldId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&val_, &from.val_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&val_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:common.ViewFieldId)
}

inline void ViewFieldId::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&val_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&val_)) + sizeof(type_));
}

ViewFieldId::~ViewFieldId() {
  // @@protoc_insertion_point(destructor:common.ViewFieldId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewFieldId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ViewFieldId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ViewFieldId::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ViewFieldId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&val_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&val_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewFieldId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ViewFieldId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ViewFieldId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint64 val = 2;
  if (this->_internal_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ViewFieldId)
  return target;
}

size_t ViewFieldId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ViewFieldId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 val = 2;
  if (this->_internal_val() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_val());
  }

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewFieldId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ViewFieldId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewFieldId::GetClassData() const { return &_class_data_; }

void ViewFieldId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ViewFieldId *>(to)->MergeFrom(
      static_cast<const ViewFieldId &>(from));
}


void ViewFieldId::MergeFrom(const ViewFieldId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ViewFieldId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_val() != 0) {
    _internal_set_val(from._internal_val());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewFieldId::CopyFrom(const ViewFieldId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ViewFieldId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewFieldId::IsInitialized() const {
  return true;
}

void ViewFieldId::InternalSwap(ViewFieldId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewFieldId, type_)
      + sizeof(ViewFieldId::type_)
      - PROTOBUF_FIELD_OFFSET(ViewFieldId, val_)>(
          reinterpret_cast<char*>(&val_),
          reinterpret_cast<char*>(&other->val_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewFieldId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[13]);
}

// ===================================================================

class ViewFieldStr::_Internal {
 public:
};

ViewFieldStr::ViewFieldStr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ViewFieldStr)
}
ViewFieldStr::ViewFieldStr(const ViewFieldStr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:common.ViewFieldStr)
}

inline void ViewFieldStr::SharedCtor() {
data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0u;
}

ViewFieldStr::~ViewFieldStr() {
  // @@protoc_insertion_point(destructor:common.ViewFieldStr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewFieldStr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.Destroy();
}

void ViewFieldStr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ViewFieldStr::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ViewFieldStr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewFieldStr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ViewFieldStr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ViewFieldStr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ViewFieldStr)
  return target;
}

size_t ViewFieldStr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ViewFieldStr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewFieldStr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ViewFieldStr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewFieldStr::GetClassData() const { return &_class_data_; }

void ViewFieldStr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ViewFieldStr *>(to)->MergeFrom(
      static_cast<const ViewFieldStr &>(from));
}


void ViewFieldStr::MergeFrom(const ViewFieldStr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ViewFieldStr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewFieldStr::CopyFrom(const ViewFieldStr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ViewFieldStr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewFieldStr::IsInitialized() const {
  return true;
}

void ViewFieldStr::InternalSwap(ViewFieldStr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewFieldStr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[14]);
}

// ===================================================================

class ViewFieldList::_Internal {
 public:
};

ViewFieldList::ViewFieldList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  idfields_(arena),
  strfields_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ViewFieldList)
}
ViewFieldList::ViewFieldList(const ViewFieldList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      idfields_(from.idfields_),
      strfields_(from.strfields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:common.ViewFieldList)
}

inline void ViewFieldList::SharedCtor() {
}

ViewFieldList::~ViewFieldList() {
  // @@protoc_insertion_point(destructor:common.ViewFieldList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewFieldList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ViewFieldList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ViewFieldList::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ViewFieldList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  idfields_.Clear();
  strfields_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewFieldList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .common.ViewFieldId idfields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_idfields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .common.ViewFieldStr strfields = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_strfields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ViewFieldList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ViewFieldList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.ViewFieldId idfields = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_idfields_size()); i < n; i++) {
    const auto& repfield = this->_internal_idfields(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .common.ViewFieldStr strfields = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_strfields_size()); i < n; i++) {
    const auto& repfield = this->_internal_strfields(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ViewFieldList)
  return target;
}

size_t ViewFieldList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ViewFieldList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.ViewFieldId idfields = 1;
  total_size += 1UL * this->_internal_idfields_size();
  for (const auto& msg : this->idfields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .common.ViewFieldStr strfields = 2;
  total_size += 1UL * this->_internal_strfields_size();
  for (const auto& msg : this->strfields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewFieldList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ViewFieldList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewFieldList::GetClassData() const { return &_class_data_; }

void ViewFieldList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ViewFieldList *>(to)->MergeFrom(
      static_cast<const ViewFieldList &>(from));
}


void ViewFieldList::MergeFrom(const ViewFieldList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ViewFieldList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  idfields_.MergeFrom(from.idfields_);
  strfields_.MergeFrom(from.strfields_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewFieldList::CopyFrom(const ViewFieldList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ViewFieldList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewFieldList::IsInitialized() const {
  return true;
}

void ViewFieldList::InternalSwap(ViewFieldList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  idfields_.InternalSwap(&other->idfields_);
  strfields_.InternalSwap(&other->strfields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewFieldList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[15]);
}

// ===================================================================

class EquipView::_Internal {
 public:
};

EquipView::EquipView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.EquipView)
}
EquipView::EquipView(const EquipView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&equiptid_, &from.equiptid_,
    static_cast<size_t>(reinterpret_cast<char*>(&strengthlevel_) -
    reinterpret_cast<char*>(&equiptid_)) + sizeof(strengthlevel_));
  // @@protoc_insertion_point(copy_constructor:common.EquipView)
}

inline void EquipView::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&equiptid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&strengthlevel_) -
    reinterpret_cast<char*>(&equiptid_)) + sizeof(strengthlevel_));
}

EquipView::~EquipView() {
  // @@protoc_insertion_point(destructor:common.EquipView)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EquipView::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EquipView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EquipView::Clear() {
// @@protoc_insertion_point(message_clear_start:common.EquipView)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&equiptid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strengthlevel_) -
      reinterpret_cast<char*>(&equiptid_)) + sizeof(strengthlevel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EquipView::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 equipTid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          equiptid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 strengthLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          strengthlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EquipView::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.EquipView)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 equipTid = 1;
  if (this->_internal_equiptid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_equiptid(), target);
  }

  // uint32 strengthLevel = 2;
  if (this->_internal_strengthlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_strengthlevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.EquipView)
  return target;
}

size_t EquipView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.EquipView)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 equipTid = 1;
  if (this->_internal_equiptid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_equiptid());
  }

  // uint32 strengthLevel = 2;
  if (this->_internal_strengthlevel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_strengthlevel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EquipView::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EquipView::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EquipView::GetClassData() const { return &_class_data_; }

void EquipView::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EquipView *>(to)->MergeFrom(
      static_cast<const EquipView &>(from));
}


void EquipView::MergeFrom(const EquipView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.EquipView)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_equiptid() != 0) {
    _internal_set_equiptid(from._internal_equiptid());
  }
  if (from._internal_strengthlevel() != 0) {
    _internal_set_strengthlevel(from._internal_strengthlevel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EquipView::CopyFrom(const EquipView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.EquipView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipView::IsInitialized() const {
  return true;
}

void EquipView::InternalSwap(EquipView* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EquipView, strengthlevel_)
      + sizeof(EquipView::strengthlevel_)
      - PROTOBUF_FIELD_OFFSET(EquipView, equiptid_)>(
          reinterpret_cast<char*>(&equiptid_),
          reinterpret_cast<char*>(&other->equiptid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EquipView::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[16]);
}

// ===================================================================

class RoleBrief::_Internal {
 public:
};

RoleBrief::RoleBrief(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.RoleBrief)
}
RoleBrief::RoleBrief(const RoleBrief& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    nickname_.Set(from._internal_nickname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&zoneidf_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(zoneidf_));
  // @@protoc_insertion_point(copy_constructor:common.RoleBrief)
}

inline void RoleBrief::SharedCtor() {
nickname_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nickname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roleid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&zoneidf_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(zoneidf_));
}

RoleBrief::~RoleBrief() {
  // @@protoc_insertion_point(destructor:common.RoleBrief)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleBrief::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nickname_.Destroy();
}

void RoleBrief::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoleBrief::Clear() {
// @@protoc_insertion_point(message_clear_start:common.RoleBrief)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty();
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zoneidf_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(zoneidf_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleBrief::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 roleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 headIcon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          headicon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 headFrame = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          headframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 careerId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          careerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sex = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 careerLevel = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          careerlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 zoneIdF = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          zoneidf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleBrief::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.RoleBrief)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roleId = 1;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // bytes nickname = 2;
  if (!this->_internal_nickname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // uint32 headIcon = 3;
  if (this->_internal_headicon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_headicon(), target);
  }

  // uint32 headFrame = 4;
  if (this->_internal_headframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_headframe(), target);
  }

  // uint32 careerId = 5;
  if (this->_internal_careerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_careerid(), target);
  }

  // uint32 level = 6;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_level(), target);
  }

  // uint32 sex = 7;
  if (this->_internal_sex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_sex(), target);
  }

  // uint32 careerLevel = 8;
  if (this->_internal_careerlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_careerlevel(), target);
  }

  // uint32 zoneIdF = 9;
  if (this->_internal_zoneidf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_zoneidf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.RoleBrief)
  return target;
}

size_t RoleBrief::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.RoleBrief)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes nickname = 2;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nickname());
  }

  // uint64 roleId = 1;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
  }

  // uint32 headIcon = 3;
  if (this->_internal_headicon() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headicon());
  }

  // uint32 headFrame = 4;
  if (this->_internal_headframe() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headframe());
  }

  // uint32 careerId = 5;
  if (this->_internal_careerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_careerid());
  }

  // uint32 level = 6;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 sex = 7;
  if (this->_internal_sex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sex());
  }

  // uint32 careerLevel = 8;
  if (this->_internal_careerlevel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_careerlevel());
  }

  // uint32 zoneIdF = 9;
  if (this->_internal_zoneidf() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_zoneidf());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleBrief::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoleBrief::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleBrief::GetClassData() const { return &_class_data_; }

void RoleBrief::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoleBrief *>(to)->MergeFrom(
      static_cast<const RoleBrief &>(from));
}


void RoleBrief::MergeFrom(const RoleBrief& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.RoleBrief)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from._internal_roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_headicon() != 0) {
    _internal_set_headicon(from._internal_headicon());
  }
  if (from._internal_headframe() != 0) {
    _internal_set_headframe(from._internal_headframe());
  }
  if (from._internal_careerid() != 0) {
    _internal_set_careerid(from._internal_careerid());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from._internal_sex() != 0) {
    _internal_set_sex(from._internal_sex());
  }
  if (from._internal_careerlevel() != 0) {
    _internal_set_careerlevel(from._internal_careerlevel());
  }
  if (from._internal_zoneidf() != 0) {
    _internal_set_zoneidf(from._internal_zoneidf());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleBrief::CopyFrom(const RoleBrief& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.RoleBrief)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleBrief::IsInitialized() const {
  return true;
}

void RoleBrief::InternalSwap(RoleBrief* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &nickname_, lhs_arena,
      &other->nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleBrief, zoneidf_)
      + sizeof(RoleBrief::zoneidf_)
      - PROTOBUF_FIELD_OFFSET(RoleBrief, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleBrief::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[17]);
}

// ===================================================================

class RoleExtend1::_Internal {
 public:
  static const ::common::ModelPartList& mplist(const RoleExtend1* msg);
  static const ::common::ModuleViewFashion& fashion(const RoleExtend1* msg);
  static const ::common::EquipView& mainhand(const RoleExtend1* msg);
  static const ::common::EquipView& offhand(const RoleExtend1* msg);
};

const ::common::ModelPartList&
RoleExtend1::_Internal::mplist(const RoleExtend1* msg) {
  return *msg->mplist_;
}
const ::common::ModuleViewFashion&
RoleExtend1::_Internal::fashion(const RoleExtend1* msg) {
  return *msg->fashion_;
}
const ::common::EquipView&
RoleExtend1::_Internal::mainhand(const RoleExtend1* msg) {
  return *msg->mainhand_;
}
const ::common::EquipView&
RoleExtend1::_Internal::offhand(const RoleExtend1* msg) {
  return *msg->offhand_;
}
RoleExtend1::RoleExtend1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.RoleExtend1)
}
RoleExtend1::RoleExtend1(const RoleExtend1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  familyname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    familyname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_familyname().empty()) {
    familyname_.Set(from._internal_familyname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_mplist()) {
    mplist_ = new ::common::ModelPartList(*from.mplist_);
  } else {
    mplist_ = nullptr;
  }
  if (from._internal_has_fashion()) {
    fashion_ = new ::common::ModuleViewFashion(*from.fashion_);
  } else {
    fashion_ = nullptr;
  }
  if (from._internal_has_mainhand()) {
    mainhand_ = new ::common::EquipView(*from.mainhand_);
  } else {
    mainhand_ = nullptr;
  }
  if (from._internal_has_offhand()) {
    offhand_ = new ::common::EquipView(*from.offhand_);
  } else {
    offhand_ = nullptr;
  }
  ::memcpy(&teamid_, &from.teamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&onlinetime_) -
    reinterpret_cast<char*>(&teamid_)) + sizeof(onlinetime_));
  // @@protoc_insertion_point(copy_constructor:common.RoleExtend1)
}

inline void RoleExtend1::SharedCtor() {
familyname_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  familyname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mplist_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&onlinetime_) -
    reinterpret_cast<char*>(&mplist_)) + sizeof(onlinetime_));
}

RoleExtend1::~RoleExtend1() {
  // @@protoc_insertion_point(destructor:common.RoleExtend1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleExtend1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  familyname_.Destroy();
  if (this != internal_default_instance()) delete mplist_;
  if (this != internal_default_instance()) delete fashion_;
  if (this != internal_default_instance()) delete mainhand_;
  if (this != internal_default_instance()) delete offhand_;
}

void RoleExtend1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoleExtend1::Clear() {
// @@protoc_insertion_point(message_clear_start:common.RoleExtend1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  familyname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && mplist_ != nullptr) {
    delete mplist_;
  }
  mplist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fashion_ != nullptr) {
    delete fashion_;
  }
  fashion_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mainhand_ != nullptr) {
    delete mainhand_;
  }
  mainhand_ = nullptr;
  if (GetArenaForAllocation() == nullptr && offhand_ != nullptr) {
    delete offhand_;
  }
  offhand_ = nullptr;
  ::memset(&teamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&onlinetime_) -
      reinterpret_cast<char*>(&teamid_)) + sizeof(onlinetime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleExtend1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 teamId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 familyId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          familyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.ModelPartList mpList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mplist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string familyName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_familyname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "common.RoleExtend1.familyName"));
        } else
          goto handle_unusual;
        continue;
      // uint64 leaderSceneId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          leadersceneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 fightPoint = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          fightpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.ModuleViewFashion fashion = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_fashion(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.EquipView mainHand = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_mainhand(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.EquipView offHand = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_offhand(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chatFont = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          chatfont_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chatFrame = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          chatframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 loginTime = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          logintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 logoutTime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          logouttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 offlineTime = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          offlinetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 onlineTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          onlinetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleExtend1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.RoleExtend1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 teamId = 1;
  if (this->_internal_teamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_teamid(), target);
  }

  // uint64 familyId = 2;
  if (this->_internal_familyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_familyid(), target);
  }

  // .common.ModelPartList mpList = 3;
  if (this->_internal_has_mplist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::mplist(this),
        _Internal::mplist(this).GetCachedSize(), target, stream);
  }

  // string familyName = 4;
  if (!this->_internal_familyname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_familyname().data(), static_cast<int>(this->_internal_familyname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.RoleExtend1.familyName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_familyname(), target);
  }

  // uint64 leaderSceneId = 5;
  if (this->_internal_leadersceneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_leadersceneid(), target);
  }

  // uint32 fightPoint = 6;
  if (this->_internal_fightpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_fightpoint(), target);
  }

  // .common.ModuleViewFashion fashion = 7;
  if (this->_internal_has_fashion()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::fashion(this),
        _Internal::fashion(this).GetCachedSize(), target, stream);
  }

  // .common.EquipView mainHand = 8;
  if (this->_internal_has_mainhand()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::mainhand(this),
        _Internal::mainhand(this).GetCachedSize(), target, stream);
  }

  // .common.EquipView offHand = 9;
  if (this->_internal_has_offhand()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::offhand(this),
        _Internal::offhand(this).GetCachedSize(), target, stream);
  }

  // uint32 chatFont = 10;
  if (this->_internal_chatfont() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_chatfont(), target);
  }

  // uint32 chatFrame = 11;
  if (this->_internal_chatframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_chatframe(), target);
  }

  // uint32 loginTime = 12;
  if (this->_internal_logintime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_logintime(), target);
  }

  // uint32 logoutTime = 13;
  if (this->_internal_logouttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_logouttime(), target);
  }

  // uint32 offlineTime = 14;
  if (this->_internal_offlinetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_offlinetime(), target);
  }

  // uint32 onlineTime = 15;
  if (this->_internal_onlinetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_onlinetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.RoleExtend1)
  return target;
}

size_t RoleExtend1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.RoleExtend1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string familyName = 4;
  if (!this->_internal_familyname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_familyname());
  }

  // .common.ModelPartList mpList = 3;
  if (this->_internal_has_mplist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mplist_);
  }

  // .common.ModuleViewFashion fashion = 7;
  if (this->_internal_has_fashion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fashion_);
  }

  // .common.EquipView mainHand = 8;
  if (this->_internal_has_mainhand()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mainhand_);
  }

  // .common.EquipView offHand = 9;
  if (this->_internal_has_offhand()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offhand_);
  }

  // uint64 teamId = 1;
  if (this->_internal_teamid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_teamid());
  }

  // uint64 familyId = 2;
  if (this->_internal_familyid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_familyid());
  }

  // uint64 leaderSceneId = 5;
  if (this->_internal_leadersceneid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_leadersceneid());
  }

  // uint32 fightPoint = 6;
  if (this->_internal_fightpoint() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fightpoint());
  }

  // uint32 chatFont = 10;
  if (this->_internal_chatfont() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chatfont());
  }

  // uint32 chatFrame = 11;
  if (this->_internal_chatframe() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chatframe());
  }

  // uint32 loginTime = 12;
  if (this->_internal_logintime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_logintime());
  }

  // uint32 logoutTime = 13;
  if (this->_internal_logouttime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_logouttime());
  }

  // uint32 offlineTime = 14;
  if (this->_internal_offlinetime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offlinetime());
  }

  // uint32 onlineTime = 15;
  if (this->_internal_onlinetime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_onlinetime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleExtend1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoleExtend1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleExtend1::GetClassData() const { return &_class_data_; }

void RoleExtend1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoleExtend1 *>(to)->MergeFrom(
      static_cast<const RoleExtend1 &>(from));
}


void RoleExtend1::MergeFrom(const RoleExtend1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.RoleExtend1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_familyname().empty()) {
    _internal_set_familyname(from._internal_familyname());
  }
  if (from._internal_has_mplist()) {
    _internal_mutable_mplist()->::common::ModelPartList::MergeFrom(from._internal_mplist());
  }
  if (from._internal_has_fashion()) {
    _internal_mutable_fashion()->::common::ModuleViewFashion::MergeFrom(from._internal_fashion());
  }
  if (from._internal_has_mainhand()) {
    _internal_mutable_mainhand()->::common::EquipView::MergeFrom(from._internal_mainhand());
  }
  if (from._internal_has_offhand()) {
    _internal_mutable_offhand()->::common::EquipView::MergeFrom(from._internal_offhand());
  }
  if (from._internal_teamid() != 0) {
    _internal_set_teamid(from._internal_teamid());
  }
  if (from._internal_familyid() != 0) {
    _internal_set_familyid(from._internal_familyid());
  }
  if (from._internal_leadersceneid() != 0) {
    _internal_set_leadersceneid(from._internal_leadersceneid());
  }
  if (from._internal_fightpoint() != 0) {
    _internal_set_fightpoint(from._internal_fightpoint());
  }
  if (from._internal_chatfont() != 0) {
    _internal_set_chatfont(from._internal_chatfont());
  }
  if (from._internal_chatframe() != 0) {
    _internal_set_chatframe(from._internal_chatframe());
  }
  if (from._internal_logintime() != 0) {
    _internal_set_logintime(from._internal_logintime());
  }
  if (from._internal_logouttime() != 0) {
    _internal_set_logouttime(from._internal_logouttime());
  }
  if (from._internal_offlinetime() != 0) {
    _internal_set_offlinetime(from._internal_offlinetime());
  }
  if (from._internal_onlinetime() != 0) {
    _internal_set_onlinetime(from._internal_onlinetime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleExtend1::CopyFrom(const RoleExtend1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.RoleExtend1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleExtend1::IsInitialized() const {
  return true;
}

void RoleExtend1::InternalSwap(RoleExtend1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &familyname_, lhs_arena,
      &other->familyname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleExtend1, onlinetime_)
      + sizeof(RoleExtend1::onlinetime_)
      - PROTOBUF_FIELD_OFFSET(RoleExtend1, mplist_)>(
          reinterpret_cast<char*>(&mplist_),
          reinterpret_cast<char*>(&other->mplist_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleExtend1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[18]);
}

// ===================================================================

class RoleExtend2::_Internal {
 public:
  static const ::common::ClientSceneId& sceneid(const RoleExtend2* msg);
  static const ::common::ClientPos& cpos(const RoleExtend2* msg);
};

const ::common::ClientSceneId&
RoleExtend2::_Internal::sceneid(const RoleExtend2* msg) {
  return *msg->sceneid_;
}
const ::common::ClientPos&
RoleExtend2::_Internal::cpos(const RoleExtend2* msg) {
  return *msg->cpos_;
}
RoleExtend2::RoleExtend2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.RoleExtend2)
}
RoleExtend2::RoleExtend2(const RoleExtend2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sceneid()) {
    sceneid_ = new ::common::ClientSceneId(*from.sceneid_);
  } else {
    sceneid_ = nullptr;
  }
  if (from._internal_has_cpos()) {
    cpos_ = new ::common::ClientPos(*from.cpos_);
  } else {
    cpos_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:common.RoleExtend2)
}

inline void RoleExtend2::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sceneid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cpos_) -
    reinterpret_cast<char*>(&sceneid_)) + sizeof(cpos_));
}

RoleExtend2::~RoleExtend2() {
  // @@protoc_insertion_point(destructor:common.RoleExtend2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleExtend2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sceneid_;
  if (this != internal_default_instance()) delete cpos_;
}

void RoleExtend2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoleExtend2::Clear() {
// @@protoc_insertion_point(message_clear_start:common.RoleExtend2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && sceneid_ != nullptr) {
    delete sceneid_;
  }
  sceneid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cpos_ != nullptr) {
    delete cpos_;
  }
  cpos_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleExtend2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.ClientSceneId sceneId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sceneid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.ClientPos cpos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleExtend2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.RoleExtend2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.ClientSceneId sceneId = 1;
  if (this->_internal_has_sceneid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::sceneid(this),
        _Internal::sceneid(this).GetCachedSize(), target, stream);
  }

  // .common.ClientPos cpos = 2;
  if (this->_internal_has_cpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cpos(this),
        _Internal::cpos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.RoleExtend2)
  return target;
}

size_t RoleExtend2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.RoleExtend2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.ClientSceneId sceneId = 1;
  if (this->_internal_has_sceneid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sceneid_);
  }

  // .common.ClientPos cpos = 2;
  if (this->_internal_has_cpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cpos_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleExtend2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoleExtend2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleExtend2::GetClassData() const { return &_class_data_; }

void RoleExtend2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoleExtend2 *>(to)->MergeFrom(
      static_cast<const RoleExtend2 &>(from));
}


void RoleExtend2::MergeFrom(const RoleExtend2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.RoleExtend2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sceneid()) {
    _internal_mutable_sceneid()->::common::ClientSceneId::MergeFrom(from._internal_sceneid());
  }
  if (from._internal_has_cpos()) {
    _internal_mutable_cpos()->::common::ClientPos::MergeFrom(from._internal_cpos());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleExtend2::CopyFrom(const RoleExtend2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.RoleExtend2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleExtend2::IsInitialized() const {
  return true;
}

void RoleExtend2::InternalSwap(RoleExtend2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleExtend2, cpos_)
      + sizeof(RoleExtend2::cpos_)
      - PROTOBUF_FIELD_OFFSET(RoleExtend2, sceneid_)>(
          reinterpret_cast<char*>(&sceneid_),
          reinterpret_cast<char*>(&other->sceneid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleExtend2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[19]);
}

// ===================================================================

class RoleExtend3::_Internal {
 public:
};

RoleExtend3::RoleExtend3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.RoleExtend3)
}
RoleExtend3::RoleExtend3(const RoleExtend3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hp_, &from.hp_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxmp_) -
    reinterpret_cast<char*>(&hp_)) + sizeof(maxmp_));
  // @@protoc_insertion_point(copy_constructor:common.RoleExtend3)
}

inline void RoleExtend3::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&maxmp_) -
    reinterpret_cast<char*>(&hp_)) + sizeof(maxmp_));
}

RoleExtend3::~RoleExtend3() {
  // @@protoc_insertion_point(destructor:common.RoleExtend3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleExtend3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleExtend3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoleExtend3::Clear() {
// @@protoc_insertion_point(message_clear_start:common.RoleExtend3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxmp_) -
      reinterpret_cast<char*>(&hp_)) + sizeof(maxmp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleExtend3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 hp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 maxHp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          mp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 maxMp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          maxmp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleExtend3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.RoleExtend3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 hp = 1;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hp(), target);
  }

  // uint32 maxHp = 2;
  if (this->_internal_maxhp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_maxhp(), target);
  }

  // uint32 mp = 3;
  if (this->_internal_mp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mp(), target);
  }

  // uint32 maxMp = 4;
  if (this->_internal_maxmp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_maxmp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.RoleExtend3)
  return target;
}

size_t RoleExtend3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.RoleExtend3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 hp = 1;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hp());
  }

  // uint32 maxHp = 2;
  if (this->_internal_maxhp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxhp());
  }

  // uint32 mp = 3;
  if (this->_internal_mp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mp());
  }

  // uint32 maxMp = 4;
  if (this->_internal_maxmp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxmp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleExtend3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoleExtend3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleExtend3::GetClassData() const { return &_class_data_; }

void RoleExtend3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoleExtend3 *>(to)->MergeFrom(
      static_cast<const RoleExtend3 &>(from));
}


void RoleExtend3::MergeFrom(const RoleExtend3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.RoleExtend3)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
  if (from._internal_maxhp() != 0) {
    _internal_set_maxhp(from._internal_maxhp());
  }
  if (from._internal_mp() != 0) {
    _internal_set_mp(from._internal_mp());
  }
  if (from._internal_maxmp() != 0) {
    _internal_set_maxmp(from._internal_maxmp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleExtend3::CopyFrom(const RoleExtend3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.RoleExtend3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleExtend3::IsInitialized() const {
  return true;
}

void RoleExtend3::InternalSwap(RoleExtend3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleExtend3, maxmp_)
      + sizeof(RoleExtend3::maxmp_)
      - PROTOBUF_FIELD_OFFSET(RoleExtend3, hp_)>(
          reinterpret_cast<char*>(&hp_),
          reinterpret_cast<char*>(&other->hp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleExtend3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[20]);
}

// ===================================================================

class VoteBaseData::_Internal {
 public:
};

VoteBaseData::VoteBaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.VoteBaseData)
}
VoteBaseData::VoteBaseData(const VoteBaseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&expiretime_, &from.expiretime_,
    static_cast<size_t>(reinterpret_cast<char*>(&lastingtime_) -
    reinterpret_cast<char*>(&expiretime_)) + sizeof(lastingtime_));
  // @@protoc_insertion_point(copy_constructor:common.VoteBaseData)
}

inline void VoteBaseData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&expiretime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lastingtime_) -
    reinterpret_cast<char*>(&expiretime_)) + sizeof(lastingtime_));
}

VoteBaseData::~VoteBaseData() {
  // @@protoc_insertion_point(destructor:common.VoteBaseData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VoteBaseData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VoteBaseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VoteBaseData::Clear() {
// @@protoc_insertion_point(message_clear_start:common.VoteBaseData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&expiretime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastingtime_) -
      reinterpret_cast<char*>(&expiretime_)) + sizeof(lastingtime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteBaseData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 expireTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          expiretime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 lastingTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          lastingtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VoteBaseData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.VoteBaseData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 expireTime = 1;
  if (this->_internal_expiretime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_expiretime(), target);
  }

  // uint32 lastingTime = 2;
  if (this->_internal_lastingtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lastingtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.VoteBaseData)
  return target;
}

size_t VoteBaseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.VoteBaseData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 expireTime = 1;
  if (this->_internal_expiretime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_expiretime());
  }

  // uint32 lastingTime = 2;
  if (this->_internal_lastingtime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lastingtime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoteBaseData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VoteBaseData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoteBaseData::GetClassData() const { return &_class_data_; }

void VoteBaseData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VoteBaseData *>(to)->MergeFrom(
      static_cast<const VoteBaseData &>(from));
}


void VoteBaseData::MergeFrom(const VoteBaseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.VoteBaseData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_expiretime() != 0) {
    _internal_set_expiretime(from._internal_expiretime());
  }
  if (from._internal_lastingtime() != 0) {
    _internal_set_lastingtime(from._internal_lastingtime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoteBaseData::CopyFrom(const VoteBaseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.VoteBaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteBaseData::IsInitialized() const {
  return true;
}

void VoteBaseData::InternalSwap(VoteBaseData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoteBaseData, lastingtime_)
      + sizeof(VoteBaseData::lastingtime_)
      - PROTOBUF_FIELD_OFFSET(VoteBaseData, expiretime_)>(
          reinterpret_cast<char*>(&expiretime_),
          reinterpret_cast<char*>(&other->expiretime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteBaseData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[21]);
}

// ===================================================================

class RoleVoteState::_Internal {
 public:
};

RoleVoteState::RoleVoteState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.RoleVoteState)
}
RoleVoteState::RoleVoteState(const RoleVoteState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:common.RoleVoteState)
}

inline void RoleVoteState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roleid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(state_));
}

RoleVoteState::~RoleVoteState() {
  // @@protoc_insertion_point(destructor:common.RoleVoteState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleVoteState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleVoteState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoleVoteState::Clear() {
// @@protoc_insertion_point(message_clear_start:common.RoleVoteState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleVoteState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 roleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleVoteState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.RoleVoteState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roleId = 1;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // uint32 state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.RoleVoteState)
  return target;
}

size_t RoleVoteState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.RoleVoteState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 roleId = 1;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
  }

  // uint32 state = 2;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleVoteState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoleVoteState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleVoteState::GetClassData() const { return &_class_data_; }

void RoleVoteState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoleVoteState *>(to)->MergeFrom(
      static_cast<const RoleVoteState &>(from));
}


void RoleVoteState::MergeFrom(const RoleVoteState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.RoleVoteState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleVoteState::CopyFrom(const RoleVoteState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.RoleVoteState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleVoteState::IsInitialized() const {
  return true;
}

void RoleVoteState::InternalSwap(RoleVoteState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleVoteState, state_)
      + sizeof(RoleVoteState::state_)
      - PROTOBUF_FIELD_OFFSET(RoleVoteState, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleVoteState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[22]);
}

// ===================================================================

class RoleVoteStateList::_Internal {
 public:
};

RoleVoteStateList::RoleVoteStateList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  roles_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.RoleVoteStateList)
}
RoleVoteStateList::RoleVoteStateList(const RoleVoteStateList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roles_(from.roles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:common.RoleVoteStateList)
}

inline void RoleVoteStateList::SharedCtor() {
}

RoleVoteStateList::~RoleVoteStateList() {
  // @@protoc_insertion_point(destructor:common.RoleVoteStateList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleVoteStateList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleVoteStateList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoleVoteStateList::Clear() {
// @@protoc_insertion_point(message_clear_start:common.RoleVoteStateList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleVoteStateList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .common.RoleVoteState roles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleVoteStateList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.RoleVoteStateList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.RoleVoteState roles = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_roles_size()); i < n; i++) {
    const auto& repfield = this->_internal_roles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.RoleVoteStateList)
  return target;
}

size_t RoleVoteStateList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.RoleVoteStateList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.RoleVoteState roles = 1;
  total_size += 1UL * this->_internal_roles_size();
  for (const auto& msg : this->roles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleVoteStateList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoleVoteStateList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleVoteStateList::GetClassData() const { return &_class_data_; }

void RoleVoteStateList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoleVoteStateList *>(to)->MergeFrom(
      static_cast<const RoleVoteStateList &>(from));
}


void RoleVoteStateList::MergeFrom(const RoleVoteStateList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.RoleVoteStateList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleVoteStateList::CopyFrom(const RoleVoteStateList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.RoleVoteStateList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleVoteStateList::IsInitialized() const {
  return true;
}

void RoleVoteStateList::InternalSwap(RoleVoteStateList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  roles_.InternalSwap(&other->roles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleVoteStateList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[23]);
}

// ===================================================================

class NpcSpeak::_Internal {
 public:
};

NpcSpeak::NpcSpeak(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.NpcSpeak)
}
NpcSpeak::NpcSpeak(const NpcSpeak& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&textid_, &from.textid_,
    static_cast<size_t>(reinterpret_cast<char*>(&actionid_) -
    reinterpret_cast<char*>(&textid_)) + sizeof(actionid_));
  // @@protoc_insertion_point(copy_constructor:common.NpcSpeak)
}

inline void NpcSpeak::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&textid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&actionid_) -
    reinterpret_cast<char*>(&textid_)) + sizeof(actionid_));
}

NpcSpeak::~NpcSpeak() {
  // @@protoc_insertion_point(destructor:common.NpcSpeak)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NpcSpeak::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NpcSpeak::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NpcSpeak::Clear() {
// @@protoc_insertion_point(message_clear_start:common.NpcSpeak)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&textid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actionid_) -
      reinterpret_cast<char*>(&textid_)) + sizeof(actionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NpcSpeak::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 textId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          textid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voiceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          voiceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 actionId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          actionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NpcSpeak::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.NpcSpeak)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 textId = 1;
  if (this->_internal_textid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_textid(), target);
  }

  // uint32 voiceId = 2;
  if (this->_internal_voiceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_voiceid(), target);
  }

  // uint32 actionId = 3;
  if (this->_internal_actionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_actionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.NpcSpeak)
  return target;
}

size_t NpcSpeak::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.NpcSpeak)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 textId = 1;
  if (this->_internal_textid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_textid());
  }

  // uint32 voiceId = 2;
  if (this->_internal_voiceid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_voiceid());
  }

  // uint32 actionId = 3;
  if (this->_internal_actionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_actionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NpcSpeak::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NpcSpeak::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NpcSpeak::GetClassData() const { return &_class_data_; }

void NpcSpeak::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NpcSpeak *>(to)->MergeFrom(
      static_cast<const NpcSpeak &>(from));
}


void NpcSpeak::MergeFrom(const NpcSpeak& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.NpcSpeak)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_textid() != 0) {
    _internal_set_textid(from._internal_textid());
  }
  if (from._internal_voiceid() != 0) {
    _internal_set_voiceid(from._internal_voiceid());
  }
  if (from._internal_actionid() != 0) {
    _internal_set_actionid(from._internal_actionid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NpcSpeak::CopyFrom(const NpcSpeak& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.NpcSpeak)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcSpeak::IsInitialized() const {
  return true;
}

void NpcSpeak::InternalSwap(NpcSpeak* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NpcSpeak, actionid_)
      + sizeof(NpcSpeak::actionid_)
      - PROTOBUF_FIELD_OFFSET(NpcSpeak, textid_)>(
          reinterpret_cast<char*>(&textid_),
          reinterpret_cast<char*>(&other->textid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NpcSpeak::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[24]);
}

// ===================================================================

class ProgressBar::_Internal {
 public:
};

ProgressBar::ProgressBar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ProgressBar)
}
ProgressBar::ProgressBar(const ProgressBar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&barid_, &from.barid_,
    static_cast<size_t>(reinterpret_cast<char*>(&expire_) -
    reinterpret_cast<char*>(&barid_)) + sizeof(expire_));
  // @@protoc_insertion_point(copy_constructor:common.ProgressBar)
}

inline void ProgressBar::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&barid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expire_) -
    reinterpret_cast<char*>(&barid_)) + sizeof(expire_));
}

ProgressBar::~ProgressBar() {
  // @@protoc_insertion_point(destructor:common.ProgressBar)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProgressBar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProgressBar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProgressBar::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ProgressBar)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&barid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expire_) -
      reinterpret_cast<char*>(&barid_)) + sizeof(expire_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProgressBar::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 barId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          barid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          param_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 param64 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          param64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 expire = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          expire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProgressBar::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ProgressBar)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 barId = 1;
  if (this->_internal_barid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_barid(), target);
  }

  // uint32 param = 2;
  if (this->_internal_param() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_param(), target);
  }

  // uint64 param64 = 3;
  if (this->_internal_param64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_param64(), target);
  }

  // uint64 expire = 4;
  if (this->_internal_expire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_expire(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ProgressBar)
  return target;
}

size_t ProgressBar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ProgressBar)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 barId = 1;
  if (this->_internal_barid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_barid());
  }

  // uint32 param = 2;
  if (this->_internal_param() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_param());
  }

  // uint64 param64 = 3;
  if (this->_internal_param64() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_param64());
  }

  // uint64 expire = 4;
  if (this->_internal_expire() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_expire());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProgressBar::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProgressBar::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProgressBar::GetClassData() const { return &_class_data_; }

void ProgressBar::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProgressBar *>(to)->MergeFrom(
      static_cast<const ProgressBar &>(from));
}


void ProgressBar::MergeFrom(const ProgressBar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ProgressBar)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_barid() != 0) {
    _internal_set_barid(from._internal_barid());
  }
  if (from._internal_param() != 0) {
    _internal_set_param(from._internal_param());
  }
  if (from._internal_param64() != 0) {
    _internal_set_param64(from._internal_param64());
  }
  if (from._internal_expire() != 0) {
    _internal_set_expire(from._internal_expire());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProgressBar::CopyFrom(const ProgressBar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ProgressBar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgressBar::IsInitialized() const {
  return true;
}

void ProgressBar::InternalSwap(ProgressBar* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProgressBar, expire_)
      + sizeof(ProgressBar::expire_)
      - PROTOBUF_FIELD_OFFSET(ProgressBar, barid_)>(
          reinterpret_cast<char*>(&barid_),
          reinterpret_cast<char*>(&other->barid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProgressBar::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[25]);
}

// ===================================================================

class NpcCountDown::_Internal {
 public:
};

NpcCountDown::NpcCountDown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.NpcCountDown)
}
NpcCountDown::NpcCountDown(const NpcCountDown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&expire_) -
    reinterpret_cast<char*>(&id_)) + sizeof(expire_));
  // @@protoc_insertion_point(copy_constructor:common.NpcCountDown)
}

inline void NpcCountDown::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expire_) -
    reinterpret_cast<char*>(&id_)) + sizeof(expire_));
}

NpcCountDown::~NpcCountDown() {
  // @@protoc_insertion_point(destructor:common.NpcCountDown)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NpcCountDown::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NpcCountDown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NpcCountDown::Clear() {
// @@protoc_insertion_point(message_clear_start:common.NpcCountDown)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expire_) -
      reinterpret_cast<char*>(&id_)) + sizeof(expire_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NpcCountDown::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 expire = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          expire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NpcCountDown::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.NpcCountDown)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 expire = 2;
  if (this->_internal_expire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_expire(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.NpcCountDown)
  return target;
}

size_t NpcCountDown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.NpcCountDown)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 expire = 2;
  if (this->_internal_expire() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_expire());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NpcCountDown::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NpcCountDown::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NpcCountDown::GetClassData() const { return &_class_data_; }

void NpcCountDown::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NpcCountDown *>(to)->MergeFrom(
      static_cast<const NpcCountDown &>(from));
}


void NpcCountDown::MergeFrom(const NpcCountDown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.NpcCountDown)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_expire() != 0) {
    _internal_set_expire(from._internal_expire());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NpcCountDown::CopyFrom(const NpcCountDown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.NpcCountDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcCountDown::IsInitialized() const {
  return true;
}

void NpcCountDown::InternalSwap(NpcCountDown* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NpcCountDown, expire_)
      + sizeof(NpcCountDown::expire_)
      - PROTOBUF_FIELD_OFFSET(NpcCountDown, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NpcCountDown::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[26]);
}

// ===================================================================

class NpcCountDownList::_Internal {
 public:
};

NpcCountDownList::NpcCountDownList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  countdownlist_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.NpcCountDownList)
}
NpcCountDownList::NpcCountDownList(const NpcCountDownList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      countdownlist_(from.countdownlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:common.NpcCountDownList)
}

inline void NpcCountDownList::SharedCtor() {
}

NpcCountDownList::~NpcCountDownList() {
  // @@protoc_insertion_point(destructor:common.NpcCountDownList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NpcCountDownList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NpcCountDownList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NpcCountDownList::Clear() {
// @@protoc_insertion_point(message_clear_start:common.NpcCountDownList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  countdownlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NpcCountDownList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .common.NpcCountDown countDownList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_countdownlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NpcCountDownList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.NpcCountDownList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.NpcCountDown countDownList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_countdownlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_countdownlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.NpcCountDownList)
  return target;
}

size_t NpcCountDownList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.NpcCountDownList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.NpcCountDown countDownList = 1;
  total_size += 1UL * this->_internal_countdownlist_size();
  for (const auto& msg : this->countdownlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NpcCountDownList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NpcCountDownList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NpcCountDownList::GetClassData() const { return &_class_data_; }

void NpcCountDownList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NpcCountDownList *>(to)->MergeFrom(
      static_cast<const NpcCountDownList &>(from));
}


void NpcCountDownList::MergeFrom(const NpcCountDownList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.NpcCountDownList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  countdownlist_.MergeFrom(from.countdownlist_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NpcCountDownList::CopyFrom(const NpcCountDownList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.NpcCountDownList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcCountDownList::IsInitialized() const {
  return true;
}

void NpcCountDownList::InternalSwap(NpcCountDownList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  countdownlist_.InternalSwap(&other->countdownlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NpcCountDownList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[27]);
}

// ===================================================================

class NpcHatredUnit::_Internal {
 public:
};

NpcHatredUnit::NpcHatredUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.NpcHatredUnit)
}
NpcHatredUnit::NpcHatredUnit(const NpcHatredUnit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:common.NpcHatredUnit)
}

inline void NpcHatredUnit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roleid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(value_));
}

NpcHatredUnit::~NpcHatredUnit() {
  // @@protoc_insertion_point(destructor:common.NpcHatredUnit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NpcHatredUnit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NpcHatredUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NpcHatredUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:common.NpcHatredUnit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NpcHatredUnit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 roleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NpcHatredUnit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.NpcHatredUnit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roleId = 1;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // uint32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.NpcHatredUnit)
  return target;
}

size_t NpcHatredUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.NpcHatredUnit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 roleId = 1;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
  }

  // uint32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NpcHatredUnit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NpcHatredUnit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NpcHatredUnit::GetClassData() const { return &_class_data_; }

void NpcHatredUnit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NpcHatredUnit *>(to)->MergeFrom(
      static_cast<const NpcHatredUnit &>(from));
}


void NpcHatredUnit::MergeFrom(const NpcHatredUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.NpcHatredUnit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NpcHatredUnit::CopyFrom(const NpcHatredUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.NpcHatredUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcHatredUnit::IsInitialized() const {
  return true;
}

void NpcHatredUnit::InternalSwap(NpcHatredUnit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NpcHatredUnit, value_)
      + sizeof(NpcHatredUnit::value_)
      - PROTOBUF_FIELD_OFFSET(NpcHatredUnit, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NpcHatredUnit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[28]);
}

// ===================================================================

class NpcHatredUnitList::_Internal {
 public:
};

NpcHatredUnitList::NpcHatredUnitList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  units_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.NpcHatredUnitList)
}
NpcHatredUnitList::NpcHatredUnitList(const NpcHatredUnitList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      units_(from.units_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:common.NpcHatredUnitList)
}

inline void NpcHatredUnitList::SharedCtor() {
}

NpcHatredUnitList::~NpcHatredUnitList() {
  // @@protoc_insertion_point(destructor:common.NpcHatredUnitList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NpcHatredUnitList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NpcHatredUnitList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NpcHatredUnitList::Clear() {
// @@protoc_insertion_point(message_clear_start:common.NpcHatredUnitList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NpcHatredUnitList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .common.NpcHatredUnit units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_units(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NpcHatredUnitList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.NpcHatredUnitList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.NpcHatredUnit units = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_units_size()); i < n; i++) {
    const auto& repfield = this->_internal_units(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.NpcHatredUnitList)
  return target;
}

size_t NpcHatredUnitList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.NpcHatredUnitList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.NpcHatredUnit units = 1;
  total_size += 1UL * this->_internal_units_size();
  for (const auto& msg : this->units_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NpcHatredUnitList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NpcHatredUnitList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NpcHatredUnitList::GetClassData() const { return &_class_data_; }

void NpcHatredUnitList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NpcHatredUnitList *>(to)->MergeFrom(
      static_cast<const NpcHatredUnitList &>(from));
}


void NpcHatredUnitList::MergeFrom(const NpcHatredUnitList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.NpcHatredUnitList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  units_.MergeFrom(from.units_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NpcHatredUnitList::CopyFrom(const NpcHatredUnitList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.NpcHatredUnitList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcHatredUnitList::IsInitialized() const {
  return true;
}

void NpcHatredUnitList::InternalSwap(NpcHatredUnitList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  units_.InternalSwap(&other->units_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NpcHatredUnitList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[29]);
}

// ===================================================================

class NpcHatredList::_Internal {
 public:
  static const ::common::NpcHatredUnitList& total(const NpcHatredList* msg);
  static const ::common::NpcHatredUnitList& update(const NpcHatredList* msg);
};

const ::common::NpcHatredUnitList&
NpcHatredList::_Internal::total(const NpcHatredList* msg) {
  return *msg->total_;
}
const ::common::NpcHatredUnitList&
NpcHatredList::_Internal::update(const NpcHatredList* msg) {
  return *msg->update_;
}
NpcHatredList::NpcHatredList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  remove_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.NpcHatredList)
}
NpcHatredList::NpcHatredList(const NpcHatredList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      remove_(from.remove_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_total()) {
    total_ = new ::common::NpcHatredUnitList(*from.total_);
  } else {
    total_ = nullptr;
  }
  if (from._internal_has_update()) {
    update_ = new ::common::NpcHatredUnitList(*from.update_);
  } else {
    update_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:common.NpcHatredList)
}

inline void NpcHatredList::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&update_) -
    reinterpret_cast<char*>(&total_)) + sizeof(update_));
}

NpcHatredList::~NpcHatredList() {
  // @@protoc_insertion_point(destructor:common.NpcHatredList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NpcHatredList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete total_;
  if (this != internal_default_instance()) delete update_;
}

void NpcHatredList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NpcHatredList::Clear() {
// @@protoc_insertion_point(message_clear_start:common.NpcHatredList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remove_.Clear();
  if (GetArenaForAllocation() == nullptr && total_ != nullptr) {
    delete total_;
  }
  total_ = nullptr;
  if (GetArenaForAllocation() == nullptr && update_ != nullptr) {
    delete update_;
  }
  update_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NpcHatredList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.NpcHatredUnitList total = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_total(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.NpcHatredUnitList update = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 remove = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_remove(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_remove(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NpcHatredList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.NpcHatredList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.NpcHatredUnitList total = 1;
  if (this->_internal_has_total()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::total(this),
        _Internal::total(this).GetCachedSize(), target, stream);
  }

  // .common.NpcHatredUnitList update = 2;
  if (this->_internal_has_update()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::update(this),
        _Internal::update(this).GetCachedSize(), target, stream);
  }

  // repeated uint64 remove = 3;
  {
    int byte_size = _remove_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, _internal_remove(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.NpcHatredList)
  return target;
}

size_t NpcHatredList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.NpcHatredList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 remove = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->remove_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _remove_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .common.NpcHatredUnitList total = 1;
  if (this->_internal_has_total()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *total_);
  }

  // .common.NpcHatredUnitList update = 2;
  if (this->_internal_has_update()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NpcHatredList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NpcHatredList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NpcHatredList::GetClassData() const { return &_class_data_; }

void NpcHatredList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NpcHatredList *>(to)->MergeFrom(
      static_cast<const NpcHatredList &>(from));
}


void NpcHatredList::MergeFrom(const NpcHatredList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.NpcHatredList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  remove_.MergeFrom(from.remove_);
  if (from._internal_has_total()) {
    _internal_mutable_total()->::common::NpcHatredUnitList::MergeFrom(from._internal_total());
  }
  if (from._internal_has_update()) {
    _internal_mutable_update()->::common::NpcHatredUnitList::MergeFrom(from._internal_update());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NpcHatredList::CopyFrom(const NpcHatredList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.NpcHatredList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcHatredList::IsInitialized() const {
  return true;
}

void NpcHatredList::InternalSwap(NpcHatredList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  remove_.InternalSwap(&other->remove_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NpcHatredList, update_)
      + sizeof(NpcHatredList::update_)
      - PROTOBUF_FIELD_OFFSET(NpcHatredList, total_)>(
          reinterpret_cast<char*>(&total_),
          reinterpret_cast<char*>(&other->total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NpcHatredList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[30]);
}

// ===================================================================

class ReconnectInfo::_Internal {
 public:
};

ReconnectInfo::ReconnectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ReconnectInfo)
}
ReconnectInfo::ReconnectInfo(const ReconnectInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reconnectnum_, &from.reconnectnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&continuetick_) -
    reinterpret_cast<char*>(&reconnectnum_)) + sizeof(continuetick_));
  // @@protoc_insertion_point(copy_constructor:common.ReconnectInfo)
}

inline void ReconnectInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reconnectnum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&continuetick_) -
    reinterpret_cast<char*>(&reconnectnum_)) + sizeof(continuetick_));
}

ReconnectInfo::~ReconnectInfo() {
  // @@protoc_insertion_point(destructor:common.ReconnectInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReconnectInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReconnectInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReconnectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ReconnectInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reconnectnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&continuetick_) -
      reinterpret_cast<char*>(&reconnectnum_)) + sizeof(continuetick_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReconnectInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 reconnectNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          reconnectnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 reconnectTick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          reconnecttick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 continueTick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          continuetick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReconnectInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ReconnectInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reconnectNum = 1;
  if (this->_internal_reconnectnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reconnectnum(), target);
  }

  // uint32 reconnectTick = 2;
  if (this->_internal_reconnecttick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_reconnecttick(), target);
  }

  // uint32 continueTick = 3;
  if (this->_internal_continuetick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_continuetick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ReconnectInfo)
  return target;
}

size_t ReconnectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ReconnectInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 reconnectNum = 1;
  if (this->_internal_reconnectnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reconnectnum());
  }

  // uint32 reconnectTick = 2;
  if (this->_internal_reconnecttick() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reconnecttick());
  }

  // uint32 continueTick = 3;
  if (this->_internal_continuetick() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_continuetick());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReconnectInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReconnectInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReconnectInfo::GetClassData() const { return &_class_data_; }

void ReconnectInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReconnectInfo *>(to)->MergeFrom(
      static_cast<const ReconnectInfo &>(from));
}


void ReconnectInfo::MergeFrom(const ReconnectInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ReconnectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_reconnectnum() != 0) {
    _internal_set_reconnectnum(from._internal_reconnectnum());
  }
  if (from._internal_reconnecttick() != 0) {
    _internal_set_reconnecttick(from._internal_reconnecttick());
  }
  if (from._internal_continuetick() != 0) {
    _internal_set_continuetick(from._internal_continuetick());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReconnectInfo::CopyFrom(const ReconnectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ReconnectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconnectInfo::IsInitialized() const {
  return true;
}

void ReconnectInfo::InternalSwap(ReconnectInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReconnectInfo, continuetick_)
      + sizeof(ReconnectInfo::continuetick_)
      - PROTOBUF_FIELD_OFFSET(ReconnectInfo, reconnectnum_)>(
          reinterpret_cast<char*>(&reconnectnum_),
          reinterpret_cast<char*>(&other->reconnectnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReconnectInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[31]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::common::ModelPart*
Arena::CreateMaybeMessage< ::common::ModelPart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ModelPart >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ModelPartList*
Arena::CreateMaybeMessage< ::common::ModelPartList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ModelPartList >(arena);
}
template<> PROTOBUF_NOINLINE ::common::OneFashionStain*
Arena::CreateMaybeMessage< ::common::OneFashionStain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::OneFashionStain >(arena);
}
template<> PROTOBUF_NOINLINE ::common::FashionStain*
Arena::CreateMaybeMessage< ::common::FashionStain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::FashionStain >(arena);
}
template<> PROTOBUF_NOINLINE ::common::FashionView*
Arena::CreateMaybeMessage< ::common::FashionView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::FashionView >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ModuleViewFashion*
Arena::CreateMaybeMessage< ::common::ModuleViewFashion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ModuleViewFashion >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ClientSceneId*
Arena::CreateMaybeMessage< ::common::ClientSceneId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ClientSceneId >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ClientStaticScene*
Arena::CreateMaybeMessage< ::common::ClientStaticScene >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ClientStaticScene >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ClientCopyScene*
Arena::CreateMaybeMessage< ::common::ClientCopyScene >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ClientCopyScene >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ClientPos*
Arena::CreateMaybeMessage< ::common::ClientPos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ClientPos >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ClientPosDirect*
Arena::CreateMaybeMessage< ::common::ClientPosDirect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ClientPosDirect >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ClientPosTerminate*
Arena::CreateMaybeMessage< ::common::ClientPosTerminate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ClientPosTerminate >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ClientPosTogether*
Arena::CreateMaybeMessage< ::common::ClientPosTogether >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ClientPosTogether >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ViewFieldId*
Arena::CreateMaybeMessage< ::common::ViewFieldId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ViewFieldId >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ViewFieldStr*
Arena::CreateMaybeMessage< ::common::ViewFieldStr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ViewFieldStr >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ViewFieldList*
Arena::CreateMaybeMessage< ::common::ViewFieldList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ViewFieldList >(arena);
}
template<> PROTOBUF_NOINLINE ::common::EquipView*
Arena::CreateMaybeMessage< ::common::EquipView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::EquipView >(arena);
}
template<> PROTOBUF_NOINLINE ::common::RoleBrief*
Arena::CreateMaybeMessage< ::common::RoleBrief >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::RoleBrief >(arena);
}
template<> PROTOBUF_NOINLINE ::common::RoleExtend1*
Arena::CreateMaybeMessage< ::common::RoleExtend1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::RoleExtend1 >(arena);
}
template<> PROTOBUF_NOINLINE ::common::RoleExtend2*
Arena::CreateMaybeMessage< ::common::RoleExtend2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::RoleExtend2 >(arena);
}
template<> PROTOBUF_NOINLINE ::common::RoleExtend3*
Arena::CreateMaybeMessage< ::common::RoleExtend3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::RoleExtend3 >(arena);
}
template<> PROTOBUF_NOINLINE ::common::VoteBaseData*
Arena::CreateMaybeMessage< ::common::VoteBaseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::VoteBaseData >(arena);
}
template<> PROTOBUF_NOINLINE ::common::RoleVoteState*
Arena::CreateMaybeMessage< ::common::RoleVoteState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::RoleVoteState >(arena);
}
template<> PROTOBUF_NOINLINE ::common::RoleVoteStateList*
Arena::CreateMaybeMessage< ::common::RoleVoteStateList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::RoleVoteStateList >(arena);
}
template<> PROTOBUF_NOINLINE ::common::NpcSpeak*
Arena::CreateMaybeMessage< ::common::NpcSpeak >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::NpcSpeak >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ProgressBar*
Arena::CreateMaybeMessage< ::common::ProgressBar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ProgressBar >(arena);
}
template<> PROTOBUF_NOINLINE ::common::NpcCountDown*
Arena::CreateMaybeMessage< ::common::NpcCountDown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::NpcCountDown >(arena);
}
template<> PROTOBUF_NOINLINE ::common::NpcCountDownList*
Arena::CreateMaybeMessage< ::common::NpcCountDownList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::NpcCountDownList >(arena);
}
template<> PROTOBUF_NOINLINE ::common::NpcHatredUnit*
Arena::CreateMaybeMessage< ::common::NpcHatredUnit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::NpcHatredUnit >(arena);
}
template<> PROTOBUF_NOINLINE ::common::NpcHatredUnitList*
Arena::CreateMaybeMessage< ::common::NpcHatredUnitList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::NpcHatredUnitList >(arena);
}
template<> PROTOBUF_NOINLINE ::common::NpcHatredList*
Arena::CreateMaybeMessage< ::common::NpcHatredList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::NpcHatredList >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ReconnectInfo*
Arena::CreateMaybeMessage< ::common::ReconnectInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ReconnectInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
