// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace common {
PROTOBUF_CONSTEXPR ModelPart::ModelPart(
    ::_pbi::ConstantInitialized)
  : partid_(0u)
  , partval_(0u){}
struct ModelPartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelPartDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelPartDefaultTypeInternal() {}
  union {
    ModelPart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelPartDefaultTypeInternal _ModelPart_default_instance_;
PROTOBUF_CONSTEXPR ModelPartList::ModelPartList(
    ::_pbi::ConstantInitialized)
  : parts_(){}
struct ModelPartListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelPartListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelPartListDefaultTypeInternal() {}
  union {
    ModelPartList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelPartListDefaultTypeInternal _ModelPartList_default_instance_;
PROTOBUF_CONSTEXPR OneFashionStain::OneFashionStain(
    ::_pbi::ConstantInitialized)
  : part_(0u)
  , color_(0u){}
struct OneFashionStainDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OneFashionStainDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OneFashionStainDefaultTypeInternal() {}
  union {
    OneFashionStain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OneFashionStainDefaultTypeInternal _OneFashionStain_default_instance_;
PROTOBUF_CONSTEXPR FashionStain::FashionStain(
    ::_pbi::ConstantInitialized)
  : onestain_(){}
struct FashionStainDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FashionStainDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FashionStainDefaultTypeInternal() {}
  union {
    FashionStain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FashionStainDefaultTypeInternal _FashionStain_default_instance_;
PROTOBUF_CONSTEXPR FashionView::FashionView(
    ::_pbi::ConstantInitialized)
  : stain_(nullptr)
  , current_(0u){}
struct FashionViewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FashionViewDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FashionViewDefaultTypeInternal() {}
  union {
    FashionView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FashionViewDefaultTypeInternal _FashionView_default_instance_;
PROTOBUF_CONSTEXPR ModuleViewFashion::ModuleViewFashion(
    ::_pbi::ConstantInitialized)
  : head_(nullptr)
  , face_(nullptr)
  , mouth_(nullptr)
  , cloth_(nullptr)
  , back_(nullptr)
  , tail_(nullptr)
  , hair_(nullptr)
  , weapon_(nullptr){}
struct ModuleViewFashionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModuleViewFashionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModuleViewFashionDefaultTypeInternal() {}
  union {
    ModuleViewFashion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModuleViewFashionDefaultTypeInternal _ModuleViewFashion_default_instance_;
PROTOBUF_CONSTEXPR ClientSceneId::ClientSceneId(
    ::_pbi::ConstantInitialized)
  : mapid_(0u)
  , proctype_(0u)
  , procparam_(0u){}
struct ClientSceneIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientSceneIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientSceneIdDefaultTypeInternal() {}
  union {
    ClientSceneId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientSceneIdDefaultTypeInternal _ClientSceneId_default_instance_;
PROTOBUF_CONSTEXPR ClientStaticScene::ClientStaticScene(
    ::_pbi::ConstantInitialized)
  : lineid_(0u){}
struct ClientStaticSceneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientStaticSceneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientStaticSceneDefaultTypeInternal() {}
  union {
    ClientStaticScene _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientStaticSceneDefaultTypeInternal _ClientStaticScene_default_instance_;
PROTOBUF_CONSTEXPR ClientCopyScene::ClientCopyScene(
    ::_pbi::ConstantInitialized)
  : copylvid_(0u)
  , autoid_(0u){}
struct ClientCopySceneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientCopySceneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientCopySceneDefaultTypeInternal() {}
  union {
    ClientCopyScene _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientCopySceneDefaultTypeInternal _ClientCopyScene_default_instance_;
PROTOBUF_CONSTEXPR ClientPos::ClientPos(
    ::_pbi::ConstantInitialized)
  : poxx_(0u)
  , posy_(0u)
  , offsetx_(0u)
  , offsety_(0u){}
struct ClientPosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientPosDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientPosDefaultTypeInternal() {}
  union {
    ClientPos _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientPosDefaultTypeInternal _ClientPos_default_instance_;
PROTOBUF_CONSTEXPR ClientPosDirect::ClientPosDirect(
    ::_pbi::ConstantInitialized)
  : cpos_(nullptr)
  , direct_(0u){}
struct ClientPosDirectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientPosDirectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientPosDirectDefaultTypeInternal() {}
  union {
    ClientPosDirect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientPosDirectDefaultTypeInternal _ClientPosDirect_default_instance_;
PROTOBUF_CONSTEXPR ClientPosTerminate::ClientPosTerminate(
    ::_pbi::ConstantInitialized)
  : poslist_()
  , servertime_(uint64_t{0u}){}
struct ClientPosTerminateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientPosTerminateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientPosTerminateDefaultTypeInternal() {}
  union {
    ClientPosTerminate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientPosTerminateDefaultTypeInternal _ClientPosTerminate_default_instance_;
PROTOBUF_CONSTEXPR EquipView::EquipView(
    ::_pbi::ConstantInitialized)
  : equiptid_(0u)
  , strengthlevel_(0u){}
struct EquipViewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EquipViewDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EquipViewDefaultTypeInternal() {}
  union {
    EquipView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EquipViewDefaultTypeInternal _EquipView_default_instance_;
PROTOBUF_CONSTEXPR RoleBrief::RoleBrief(
    ::_pbi::ConstantInitialized)
  : nickname_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , roleid_(uint64_t{0u})
  , headicon_(0u)
  , headframe_(0u)
  , careerid_(0u)
  , level_(0u)
  , sex_(0u)
  , careerlevel_(0u)
  , zoneidf_(0u){}
struct RoleBriefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleBriefDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleBriefDefaultTypeInternal() {}
  union {
    RoleBrief _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleBriefDefaultTypeInternal _RoleBrief_default_instance_;
PROTOBUF_CONSTEXPR RoleExtend1::RoleExtend1(
    ::_pbi::ConstantInitialized)
  : familyname_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , mplist_(nullptr)
  , fashion_(nullptr)
  , mainhand_(nullptr)
  , offhand_(nullptr)
  , teamid_(uint64_t{0u})
  , familyid_(uint64_t{0u})
  , leadersceneid_(uint64_t{0u})
  , fightpoint_(0u)
  , chatfont_(0u)
  , chatframe_(0u)
  , logintime_(0u)
  , logouttime_(0u)
  , offlinetime_(0u)
  , onlinetime_(0u){}
struct RoleExtend1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleExtend1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleExtend1DefaultTypeInternal() {}
  union {
    RoleExtend1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleExtend1DefaultTypeInternal _RoleExtend1_default_instance_;
PROTOBUF_CONSTEXPR RoleExtend2::RoleExtend2(
    ::_pbi::ConstantInitialized)
  : sceneid_(nullptr)
  , cpos_(nullptr){}
struct RoleExtend2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleExtend2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleExtend2DefaultTypeInternal() {}
  union {
    RoleExtend2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleExtend2DefaultTypeInternal _RoleExtend2_default_instance_;
PROTOBUF_CONSTEXPR RoleExtend3::RoleExtend3(
    ::_pbi::ConstantInitialized)
  : hp_(0u)
  , maxhp_(0u)
  , mp_(0u)
  , maxmp_(0u){}
struct RoleExtend3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleExtend3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleExtend3DefaultTypeInternal() {}
  union {
    RoleExtend3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleExtend3DefaultTypeInternal _RoleExtend3_default_instance_;
PROTOBUF_CONSTEXPR RoleVoteState::RoleVoteState(
    ::_pbi::ConstantInitialized)
  : roleid_(uint64_t{0u})
  , state_(0u){}
struct RoleVoteStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleVoteStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleVoteStateDefaultTypeInternal() {}
  union {
    RoleVoteState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleVoteStateDefaultTypeInternal _RoleVoteState_default_instance_;
PROTOBUF_CONSTEXPR RoleVoteStateList::RoleVoteStateList(
    ::_pbi::ConstantInitialized)
  : roles_(){}
struct RoleVoteStateListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleVoteStateListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleVoteStateListDefaultTypeInternal() {}
  union {
    RoleVoteStateList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleVoteStateListDefaultTypeInternal _RoleVoteStateList_default_instance_;
}  // namespace common
static ::_pb::Metadata file_level_metadata_common_2eproto[19];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_common_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_common_2eproto = nullptr;

const uint32_t TableStruct_common_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ModelPart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ModelPart, partid_),
  PROTOBUF_FIELD_OFFSET(::common::ModelPart, partval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ModelPartList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ModelPartList, parts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::OneFashionStain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::OneFashionStain, part_),
  PROTOBUF_FIELD_OFFSET(::common::OneFashionStain, color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::FashionStain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::FashionStain, onestain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::FashionView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::FashionView, current_),
  PROTOBUF_FIELD_OFFSET(::common::FashionView, stain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ModuleViewFashion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ModuleViewFashion, head_),
  PROTOBUF_FIELD_OFFSET(::common::ModuleViewFashion, face_),
  PROTOBUF_FIELD_OFFSET(::common::ModuleViewFashion, mouth_),
  PROTOBUF_FIELD_OFFSET(::common::ModuleViewFashion, cloth_),
  PROTOBUF_FIELD_OFFSET(::common::ModuleViewFashion, back_),
  PROTOBUF_FIELD_OFFSET(::common::ModuleViewFashion, tail_),
  PROTOBUF_FIELD_OFFSET(::common::ModuleViewFashion, hair_),
  PROTOBUF_FIELD_OFFSET(::common::ModuleViewFashion, weapon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ClientSceneId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ClientSceneId, mapid_),
  PROTOBUF_FIELD_OFFSET(::common::ClientSceneId, proctype_),
  PROTOBUF_FIELD_OFFSET(::common::ClientSceneId, procparam_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ClientStaticScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ClientStaticScene, lineid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ClientCopyScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ClientCopyScene, copylvid_),
  PROTOBUF_FIELD_OFFSET(::common::ClientCopyScene, autoid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ClientPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ClientPos, poxx_),
  PROTOBUF_FIELD_OFFSET(::common::ClientPos, posy_),
  PROTOBUF_FIELD_OFFSET(::common::ClientPos, offsetx_),
  PROTOBUF_FIELD_OFFSET(::common::ClientPos, offsety_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ClientPosDirect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ClientPosDirect, cpos_),
  PROTOBUF_FIELD_OFFSET(::common::ClientPosDirect, direct_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ClientPosTerminate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ClientPosTerminate, servertime_),
  PROTOBUF_FIELD_OFFSET(::common::ClientPosTerminate, poslist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::EquipView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::EquipView, equiptid_),
  PROTOBUF_FIELD_OFFSET(::common::EquipView, strengthlevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::RoleBrief, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::RoleBrief, roleid_),
  PROTOBUF_FIELD_OFFSET(::common::RoleBrief, nickname_),
  PROTOBUF_FIELD_OFFSET(::common::RoleBrief, headicon_),
  PROTOBUF_FIELD_OFFSET(::common::RoleBrief, headframe_),
  PROTOBUF_FIELD_OFFSET(::common::RoleBrief, careerid_),
  PROTOBUF_FIELD_OFFSET(::common::RoleBrief, level_),
  PROTOBUF_FIELD_OFFSET(::common::RoleBrief, sex_),
  PROTOBUF_FIELD_OFFSET(::common::RoleBrief, careerlevel_),
  PROTOBUF_FIELD_OFFSET(::common::RoleBrief, zoneidf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, teamid_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, familyid_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, mplist_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, familyname_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, leadersceneid_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, fightpoint_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, fashion_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, mainhand_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, offhand_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, chatfont_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, chatframe_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, logintime_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, logouttime_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, offlinetime_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend1, onlinetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend2, sceneid_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend2, cpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend3, hp_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend3, maxhp_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend3, mp_),
  PROTOBUF_FIELD_OFFSET(::common::RoleExtend3, maxmp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::RoleVoteState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::RoleVoteState, roleid_),
  PROTOBUF_FIELD_OFFSET(::common::RoleVoteState, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::RoleVoteStateList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::RoleVoteStateList, roles_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::common::ModelPart)},
  { 8, -1, -1, sizeof(::common::ModelPartList)},
  { 15, -1, -1, sizeof(::common::OneFashionStain)},
  { 23, -1, -1, sizeof(::common::FashionStain)},
  { 30, -1, -1, sizeof(::common::FashionView)},
  { 38, -1, -1, sizeof(::common::ModuleViewFashion)},
  { 52, -1, -1, sizeof(::common::ClientSceneId)},
  { 61, -1, -1, sizeof(::common::ClientStaticScene)},
  { 68, -1, -1, sizeof(::common::ClientCopyScene)},
  { 76, -1, -1, sizeof(::common::ClientPos)},
  { 86, -1, -1, sizeof(::common::ClientPosDirect)},
  { 94, -1, -1, sizeof(::common::ClientPosTerminate)},
  { 102, -1, -1, sizeof(::common::EquipView)},
  { 110, -1, -1, sizeof(::common::RoleBrief)},
  { 125, -1, -1, sizeof(::common::RoleExtend1)},
  { 146, -1, -1, sizeof(::common::RoleExtend2)},
  { 154, -1, -1, sizeof(::common::RoleExtend3)},
  { 164, -1, -1, sizeof(::common::RoleVoteState)},
  { 172, -1, -1, sizeof(::common::RoleVoteStateList)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::common::_ModelPart_default_instance_._instance,
  &::common::_ModelPartList_default_instance_._instance,
  &::common::_OneFashionStain_default_instance_._instance,
  &::common::_FashionStain_default_instance_._instance,
  &::common::_FashionView_default_instance_._instance,
  &::common::_ModuleViewFashion_default_instance_._instance,
  &::common::_ClientSceneId_default_instance_._instance,
  &::common::_ClientStaticScene_default_instance_._instance,
  &::common::_ClientCopyScene_default_instance_._instance,
  &::common::_ClientPos_default_instance_._instance,
  &::common::_ClientPosDirect_default_instance_._instance,
  &::common::_ClientPosTerminate_default_instance_._instance,
  &::common::_EquipView_default_instance_._instance,
  &::common::_RoleBrief_default_instance_._instance,
  &::common::_RoleExtend1_default_instance_._instance,
  &::common::_RoleExtend2_default_instance_._instance,
  &::common::_RoleExtend3_default_instance_._instance,
  &::common::_RoleVoteState_default_instance_._instance,
  &::common::_RoleVoteStateList_default_instance_._instance,
};

const char descriptor_table_protodef_common_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014common.proto\022\006common\",\n\tModelPart\022\016\n\006p"
  "artId\030\001 \001(\r\022\017\n\007partVal\030\002 \001(\r\"1\n\rModelPar"
  "tList\022 \n\005parts\030\001 \003(\0132\021.common.ModelPart\""
  ".\n\017OneFashionStain\022\014\n\004part\030\001 \001(\r\022\r\n\005colo"
  "r\030\002 \001(\r\"9\n\014FashionStain\022)\n\010onestain\030\001 \003("
  "\0132\027.common.OneFashionStain\"C\n\013FashionVie"
  "w\022\017\n\007current\030\001 \001(\r\022#\n\005stain\030\002 \001(\0132\024.comm"
  "on.FashionStain\"\257\002\n\021ModuleViewFashion\022!\n"
  "\004head\030\001 \001(\0132\023.common.FashionView\022!\n\004face"
  "\030\002 \001(\0132\023.common.FashionView\022\"\n\005mouth\030\003 \001"
  "(\0132\023.common.FashionView\022\"\n\005cloth\030\004 \001(\0132\023"
  ".common.FashionView\022!\n\004back\030\005 \001(\0132\023.comm"
  "on.FashionView\022!\n\004tail\030\006 \001(\0132\023.common.Fa"
  "shionView\022!\n\004hair\030\007 \001(\0132\023.common.Fashion"
  "View\022#\n\006weapon\030\010 \001(\0132\023.common.FashionVie"
  "w\"C\n\rClientSceneId\022\r\n\005mapId\030\001 \001(\r\022\020\n\010pro"
  "cType\030\002 \001(\r\022\021\n\tprocParam\030\003 \001(\r\"#\n\021Client"
  "StaticScene\022\016\n\006lineId\030\001 \001(\r\"3\n\017ClientCop"
  "yScene\022\020\n\010copyLvId\030\001 \001(\r\022\016\n\006autoId\030\002 \001(\r"
  "\"I\n\tClientPos\022\014\n\004poxX\030\001 \001(\r\022\014\n\004posY\030\002 \001("
  "\r\022\017\n\007offsetX\030\003 \001(\r\022\017\n\007offsetY\030\004 \001(\r\"B\n\017C"
  "lientPosDirect\022\037\n\004cpos\030\001 \001(\0132\021.common.Cl"
  "ientPos\022\016\n\006direct\030\002 \001(\r\"L\n\022ClientPosTerm"
  "inate\022\022\n\nservertime\030\001 \001(\004\022\"\n\007posList\030\002 \003"
  "(\0132\021.common.ClientPos\"4\n\tEquipView\022\020\n\010eq"
  "uipTid\030\001 \001(\r\022\025\n\rstrengthLevel\030\002 \001(\r\"\246\001\n\t"
  "RoleBrief\022\016\n\006roleId\030\001 \001(\004\022\020\n\010nickname\030\002 "
  "\001(\014\022\020\n\010headIcon\030\003 \001(\r\022\021\n\theadFrame\030\004 \001(\r"
  "\022\020\n\010careerId\030\005 \001(\r\022\r\n\005level\030\006 \001(\r\022\013\n\003sex"
  "\030\007 \001(\r\022\023\n\013careerLevel\030\010 \001(\r\022\017\n\007zoneIdF\030\t"
  " \001(\r\"\377\002\n\013RoleExtend1\022\016\n\006teamId\030\001 \001(\004\022\020\n\010"
  "familyId\030\002 \001(\004\022%\n\006mpList\030\003 \001(\0132\025.common."
  "ModelPartList\022\022\n\nfamilyName\030\004 \001(\t\022\025\n\rlea"
  "derSceneId\030\005 \001(\004\022\022\n\nfightPoint\030\006 \001(\r\022*\n\007"
  "fashion\030\007 \001(\0132\031.common.ModuleViewFashion"
  "\022#\n\010mainHand\030\010 \001(\0132\021.common.EquipView\022\"\n"
  "\007offHand\030\t \001(\0132\021.common.EquipView\022\020\n\010cha"
  "tFont\030\n \001(\r\022\021\n\tchatFrame\030\013 \001(\r\022\021\n\tloginT"
  "ime\030\014 \001(\r\022\022\n\nlogoutTime\030\r \001(\r\022\023\n\013offline"
  "Time\030\016 \001(\r\022\022\n\nonlineTime\030\017 \001(\r\"V\n\013RoleEx"
  "tend2\022&\n\007sceneId\030\001 \001(\0132\025.common.ClientSc"
  "eneId\022\037\n\004cpos\030\002 \001(\0132\021.common.ClientPos\"C"
  "\n\013RoleExtend3\022\n\n\002hp\030\001 \001(\r\022\r\n\005maxHp\030\002 \001(\r"
  "\022\n\n\002mp\030\003 \001(\r\022\r\n\005maxMp\030\004 \001(\r\".\n\rRoleVoteS"
  "tate\022\016\n\006roleId\030\001 \001(\004\022\r\n\005state\030\002 \001(\r\"9\n\021R"
  "oleVoteStateList\022$\n\005roles\030\001 \003(\0132\025.common"
  ".RoleVoteStateb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_common_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_common_2eproto = {
    false, false, 1862, descriptor_table_protodef_common_2eproto,
    "common.proto",
    &descriptor_table_common_2eproto_once, nullptr, 0, 19,
    schemas, file_default_instances, TableStruct_common_2eproto::offsets,
    file_level_metadata_common_2eproto, file_level_enum_descriptors_common_2eproto,
    file_level_service_descriptors_common_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_common_2eproto_getter() {
  return &descriptor_table_common_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_common_2eproto(&descriptor_table_common_2eproto);
namespace common {

// ===================================================================

class ModelPart::_Internal {
 public:
};

ModelPart::ModelPart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ModelPart)
}
ModelPart::ModelPart(const ModelPart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&partid_, &from.partid_,
    static_cast<size_t>(reinterpret_cast<char*>(&partval_) -
    reinterpret_cast<char*>(&partid_)) + sizeof(partval_));
  // @@protoc_insertion_point(copy_constructor:common.ModelPart)
}

inline void ModelPart::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&partid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&partval_) -
    reinterpret_cast<char*>(&partid_)) + sizeof(partval_));
}

ModelPart::~ModelPart() {
  // @@protoc_insertion_point(destructor:common.ModelPart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelPart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ModelPart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelPart::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ModelPart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&partid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&partval_) -
      reinterpret_cast<char*>(&partid_)) + sizeof(partval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelPart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 partId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          partid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 partVal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          partval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelPart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ModelPart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 partId = 1;
  if (this->_internal_partid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_partid(), target);
  }

  // uint32 partVal = 2;
  if (this->_internal_partval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_partval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ModelPart)
  return target;
}

size_t ModelPart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ModelPart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 partId = 1;
  if (this->_internal_partid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_partid());
  }

  // uint32 partVal = 2;
  if (this->_internal_partval() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_partval());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelPart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModelPart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelPart::GetClassData() const { return &_class_data_; }

void ModelPart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModelPart *>(to)->MergeFrom(
      static_cast<const ModelPart &>(from));
}


void ModelPart::MergeFrom(const ModelPart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ModelPart)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_partid() != 0) {
    _internal_set_partid(from._internal_partid());
  }
  if (from._internal_partval() != 0) {
    _internal_set_partval(from._internal_partval());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelPart::CopyFrom(const ModelPart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ModelPart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelPart::IsInitialized() const {
  return true;
}

void ModelPart::InternalSwap(ModelPart* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelPart, partval_)
      + sizeof(ModelPart::partval_)
      - PROTOBUF_FIELD_OFFSET(ModelPart, partid_)>(
          reinterpret_cast<char*>(&partid_),
          reinterpret_cast<char*>(&other->partid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelPart::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[0]);
}

// ===================================================================

class ModelPartList::_Internal {
 public:
};

ModelPartList::ModelPartList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  parts_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ModelPartList)
}
ModelPartList::ModelPartList(const ModelPartList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parts_(from.parts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:common.ModelPartList)
}

inline void ModelPartList::SharedCtor() {
}

ModelPartList::~ModelPartList() {
  // @@protoc_insertion_point(destructor:common.ModelPartList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelPartList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ModelPartList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelPartList::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ModelPartList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelPartList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .common.ModelPart parts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelPartList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ModelPartList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.ModelPart parts = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_parts_size()); i < n; i++) {
    const auto& repfield = this->_internal_parts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ModelPartList)
  return target;
}

size_t ModelPartList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ModelPartList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.ModelPart parts = 1;
  total_size += 1UL * this->_internal_parts_size();
  for (const auto& msg : this->parts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelPartList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModelPartList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelPartList::GetClassData() const { return &_class_data_; }

void ModelPartList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModelPartList *>(to)->MergeFrom(
      static_cast<const ModelPartList &>(from));
}


void ModelPartList::MergeFrom(const ModelPartList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ModelPartList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  parts_.MergeFrom(from.parts_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelPartList::CopyFrom(const ModelPartList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ModelPartList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelPartList::IsInitialized() const {
  return true;
}

void ModelPartList::InternalSwap(ModelPartList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  parts_.InternalSwap(&other->parts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelPartList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[1]);
}

// ===================================================================

class OneFashionStain::_Internal {
 public:
};

OneFashionStain::OneFashionStain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.OneFashionStain)
}
OneFashionStain::OneFashionStain(const OneFashionStain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&part_, &from.part_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&part_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:common.OneFashionStain)
}

inline void OneFashionStain::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&part_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&part_)) + sizeof(color_));
}

OneFashionStain::~OneFashionStain() {
  // @@protoc_insertion_point(destructor:common.OneFashionStain)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OneFashionStain::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OneFashionStain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OneFashionStain::Clear() {
// @@protoc_insertion_point(message_clear_start:common.OneFashionStain)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&part_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&part_)) + sizeof(color_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OneFashionStain::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 part = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          part_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OneFashionStain::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.OneFashionStain)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 part = 1;
  if (this->_internal_part() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_part(), target);
  }

  // uint32 color = 2;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.OneFashionStain)
  return target;
}

size_t OneFashionStain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.OneFashionStain)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 part = 1;
  if (this->_internal_part() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_part());
  }

  // uint32 color = 2;
  if (this->_internal_color() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_color());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OneFashionStain::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OneFashionStain::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OneFashionStain::GetClassData() const { return &_class_data_; }

void OneFashionStain::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OneFashionStain *>(to)->MergeFrom(
      static_cast<const OneFashionStain &>(from));
}


void OneFashionStain::MergeFrom(const OneFashionStain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.OneFashionStain)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_part() != 0) {
    _internal_set_part(from._internal_part());
  }
  if (from._internal_color() != 0) {
    _internal_set_color(from._internal_color());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OneFashionStain::CopyFrom(const OneFashionStain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.OneFashionStain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneFashionStain::IsInitialized() const {
  return true;
}

void OneFashionStain::InternalSwap(OneFashionStain* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OneFashionStain, color_)
      + sizeof(OneFashionStain::color_)
      - PROTOBUF_FIELD_OFFSET(OneFashionStain, part_)>(
          reinterpret_cast<char*>(&part_),
          reinterpret_cast<char*>(&other->part_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OneFashionStain::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[2]);
}

// ===================================================================

class FashionStain::_Internal {
 public:
};

FashionStain::FashionStain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  onestain_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.FashionStain)
}
FashionStain::FashionStain(const FashionStain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      onestain_(from.onestain_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:common.FashionStain)
}

inline void FashionStain::SharedCtor() {
}

FashionStain::~FashionStain() {
  // @@protoc_insertion_point(destructor:common.FashionStain)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FashionStain::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FashionStain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FashionStain::Clear() {
// @@protoc_insertion_point(message_clear_start:common.FashionStain)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  onestain_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FashionStain::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .common.OneFashionStain onestain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_onestain(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FashionStain::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.FashionStain)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.OneFashionStain onestain = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_onestain_size()); i < n; i++) {
    const auto& repfield = this->_internal_onestain(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.FashionStain)
  return target;
}

size_t FashionStain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.FashionStain)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.OneFashionStain onestain = 1;
  total_size += 1UL * this->_internal_onestain_size();
  for (const auto& msg : this->onestain_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FashionStain::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FashionStain::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FashionStain::GetClassData() const { return &_class_data_; }

void FashionStain::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FashionStain *>(to)->MergeFrom(
      static_cast<const FashionStain &>(from));
}


void FashionStain::MergeFrom(const FashionStain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.FashionStain)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  onestain_.MergeFrom(from.onestain_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FashionStain::CopyFrom(const FashionStain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.FashionStain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FashionStain::IsInitialized() const {
  return true;
}

void FashionStain::InternalSwap(FashionStain* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  onestain_.InternalSwap(&other->onestain_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FashionStain::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[3]);
}

// ===================================================================

class FashionView::_Internal {
 public:
  static const ::common::FashionStain& stain(const FashionView* msg);
};

const ::common::FashionStain&
FashionView::_Internal::stain(const FashionView* msg) {
  return *msg->stain_;
}
FashionView::FashionView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.FashionView)
}
FashionView::FashionView(const FashionView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stain()) {
    stain_ = new ::common::FashionStain(*from.stain_);
  } else {
    stain_ = nullptr;
  }
  current_ = from.current_;
  // @@protoc_insertion_point(copy_constructor:common.FashionView)
}

inline void FashionView::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stain_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&current_) -
    reinterpret_cast<char*>(&stain_)) + sizeof(current_));
}

FashionView::~FashionView() {
  // @@protoc_insertion_point(destructor:common.FashionView)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FashionView::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete stain_;
}

void FashionView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FashionView::Clear() {
// @@protoc_insertion_point(message_clear_start:common.FashionView)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && stain_ != nullptr) {
    delete stain_;
  }
  stain_ = nullptr;
  current_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FashionView::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 current = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.FashionStain stain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stain(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FashionView::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.FashionView)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 current = 1;
  if (this->_internal_current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_current(), target);
  }

  // .common.FashionStain stain = 2;
  if (this->_internal_has_stain()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::stain(this),
        _Internal::stain(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.FashionView)
  return target;
}

size_t FashionView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.FashionView)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.FashionStain stain = 2;
  if (this->_internal_has_stain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stain_);
  }

  // uint32 current = 1;
  if (this->_internal_current() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_current());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FashionView::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FashionView::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FashionView::GetClassData() const { return &_class_data_; }

void FashionView::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FashionView *>(to)->MergeFrom(
      static_cast<const FashionView &>(from));
}


void FashionView::MergeFrom(const FashionView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.FashionView)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stain()) {
    _internal_mutable_stain()->::common::FashionStain::MergeFrom(from._internal_stain());
  }
  if (from._internal_current() != 0) {
    _internal_set_current(from._internal_current());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FashionView::CopyFrom(const FashionView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.FashionView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FashionView::IsInitialized() const {
  return true;
}

void FashionView::InternalSwap(FashionView* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FashionView, current_)
      + sizeof(FashionView::current_)
      - PROTOBUF_FIELD_OFFSET(FashionView, stain_)>(
          reinterpret_cast<char*>(&stain_),
          reinterpret_cast<char*>(&other->stain_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FashionView::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[4]);
}

// ===================================================================

class ModuleViewFashion::_Internal {
 public:
  static const ::common::FashionView& head(const ModuleViewFashion* msg);
  static const ::common::FashionView& face(const ModuleViewFashion* msg);
  static const ::common::FashionView& mouth(const ModuleViewFashion* msg);
  static const ::common::FashionView& cloth(const ModuleViewFashion* msg);
  static const ::common::FashionView& back(const ModuleViewFashion* msg);
  static const ::common::FashionView& tail(const ModuleViewFashion* msg);
  static const ::common::FashionView& hair(const ModuleViewFashion* msg);
  static const ::common::FashionView& weapon(const ModuleViewFashion* msg);
};

const ::common::FashionView&
ModuleViewFashion::_Internal::head(const ModuleViewFashion* msg) {
  return *msg->head_;
}
const ::common::FashionView&
ModuleViewFashion::_Internal::face(const ModuleViewFashion* msg) {
  return *msg->face_;
}
const ::common::FashionView&
ModuleViewFashion::_Internal::mouth(const ModuleViewFashion* msg) {
  return *msg->mouth_;
}
const ::common::FashionView&
ModuleViewFashion::_Internal::cloth(const ModuleViewFashion* msg) {
  return *msg->cloth_;
}
const ::common::FashionView&
ModuleViewFashion::_Internal::back(const ModuleViewFashion* msg) {
  return *msg->back_;
}
const ::common::FashionView&
ModuleViewFashion::_Internal::tail(const ModuleViewFashion* msg) {
  return *msg->tail_;
}
const ::common::FashionView&
ModuleViewFashion::_Internal::hair(const ModuleViewFashion* msg) {
  return *msg->hair_;
}
const ::common::FashionView&
ModuleViewFashion::_Internal::weapon(const ModuleViewFashion* msg) {
  return *msg->weapon_;
}
ModuleViewFashion::ModuleViewFashion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ModuleViewFashion)
}
ModuleViewFashion::ModuleViewFashion(const ModuleViewFashion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    head_ = new ::common::FashionView(*from.head_);
  } else {
    head_ = nullptr;
  }
  if (from._internal_has_face()) {
    face_ = new ::common::FashionView(*from.face_);
  } else {
    face_ = nullptr;
  }
  if (from._internal_has_mouth()) {
    mouth_ = new ::common::FashionView(*from.mouth_);
  } else {
    mouth_ = nullptr;
  }
  if (from._internal_has_cloth()) {
    cloth_ = new ::common::FashionView(*from.cloth_);
  } else {
    cloth_ = nullptr;
  }
  if (from._internal_has_back()) {
    back_ = new ::common::FashionView(*from.back_);
  } else {
    back_ = nullptr;
  }
  if (from._internal_has_tail()) {
    tail_ = new ::common::FashionView(*from.tail_);
  } else {
    tail_ = nullptr;
  }
  if (from._internal_has_hair()) {
    hair_ = new ::common::FashionView(*from.hair_);
  } else {
    hair_ = nullptr;
  }
  if (from._internal_has_weapon()) {
    weapon_ = new ::common::FashionView(*from.weapon_);
  } else {
    weapon_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:common.ModuleViewFashion)
}

inline void ModuleViewFashion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&weapon_) -
    reinterpret_cast<char*>(&head_)) + sizeof(weapon_));
}

ModuleViewFashion::~ModuleViewFashion() {
  // @@protoc_insertion_point(destructor:common.ModuleViewFashion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModuleViewFashion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete head_;
  if (this != internal_default_instance()) delete face_;
  if (this != internal_default_instance()) delete mouth_;
  if (this != internal_default_instance()) delete cloth_;
  if (this != internal_default_instance()) delete back_;
  if (this != internal_default_instance()) delete tail_;
  if (this != internal_default_instance()) delete hair_;
  if (this != internal_default_instance()) delete weapon_;
}

void ModuleViewFashion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModuleViewFashion::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ModuleViewFashion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  if (GetArenaForAllocation() == nullptr && face_ != nullptr) {
    delete face_;
  }
  face_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mouth_ != nullptr) {
    delete mouth_;
  }
  mouth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cloth_ != nullptr) {
    delete cloth_;
  }
  cloth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && back_ != nullptr) {
    delete back_;
  }
  back_ = nullptr;
  if (GetArenaForAllocation() == nullptr && tail_ != nullptr) {
    delete tail_;
  }
  tail_ = nullptr;
  if (GetArenaForAllocation() == nullptr && hair_ != nullptr) {
    delete hair_;
  }
  hair_ = nullptr;
  if (GetArenaForAllocation() == nullptr && weapon_ != nullptr) {
    delete weapon_;
  }
  weapon_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModuleViewFashion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.FashionView head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.FashionView face = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_face(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.FashionView mouth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mouth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.FashionView cloth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cloth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.FashionView back = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_back(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.FashionView tail = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.FashionView hair = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_hair(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.FashionView weapon = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_weapon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModuleViewFashion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ModuleViewFashion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.FashionView head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // .common.FashionView face = 2;
  if (this->_internal_has_face()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::face(this),
        _Internal::face(this).GetCachedSize(), target, stream);
  }

  // .common.FashionView mouth = 3;
  if (this->_internal_has_mouth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::mouth(this),
        _Internal::mouth(this).GetCachedSize(), target, stream);
  }

  // .common.FashionView cloth = 4;
  if (this->_internal_has_cloth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::cloth(this),
        _Internal::cloth(this).GetCachedSize(), target, stream);
  }

  // .common.FashionView back = 5;
  if (this->_internal_has_back()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::back(this),
        _Internal::back(this).GetCachedSize(), target, stream);
  }

  // .common.FashionView tail = 6;
  if (this->_internal_has_tail()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::tail(this),
        _Internal::tail(this).GetCachedSize(), target, stream);
  }

  // .common.FashionView hair = 7;
  if (this->_internal_has_hair()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::hair(this),
        _Internal::hair(this).GetCachedSize(), target, stream);
  }

  // .common.FashionView weapon = 8;
  if (this->_internal_has_weapon()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::weapon(this),
        _Internal::weapon(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ModuleViewFashion)
  return target;
}

size_t ModuleViewFashion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ModuleViewFashion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.FashionView head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // .common.FashionView face = 2;
  if (this->_internal_has_face()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *face_);
  }

  // .common.FashionView mouth = 3;
  if (this->_internal_has_mouth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mouth_);
  }

  // .common.FashionView cloth = 4;
  if (this->_internal_has_cloth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cloth_);
  }

  // .common.FashionView back = 5;
  if (this->_internal_has_back()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *back_);
  }

  // .common.FashionView tail = 6;
  if (this->_internal_has_tail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tail_);
  }

  // .common.FashionView hair = 7;
  if (this->_internal_has_hair()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hair_);
  }

  // .common.FashionView weapon = 8;
  if (this->_internal_has_weapon()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *weapon_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModuleViewFashion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModuleViewFashion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModuleViewFashion::GetClassData() const { return &_class_data_; }

void ModuleViewFashion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModuleViewFashion *>(to)->MergeFrom(
      static_cast<const ModuleViewFashion &>(from));
}


void ModuleViewFashion::MergeFrom(const ModuleViewFashion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ModuleViewFashion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_head()) {
    _internal_mutable_head()->::common::FashionView::MergeFrom(from._internal_head());
  }
  if (from._internal_has_face()) {
    _internal_mutable_face()->::common::FashionView::MergeFrom(from._internal_face());
  }
  if (from._internal_has_mouth()) {
    _internal_mutable_mouth()->::common::FashionView::MergeFrom(from._internal_mouth());
  }
  if (from._internal_has_cloth()) {
    _internal_mutable_cloth()->::common::FashionView::MergeFrom(from._internal_cloth());
  }
  if (from._internal_has_back()) {
    _internal_mutable_back()->::common::FashionView::MergeFrom(from._internal_back());
  }
  if (from._internal_has_tail()) {
    _internal_mutable_tail()->::common::FashionView::MergeFrom(from._internal_tail());
  }
  if (from._internal_has_hair()) {
    _internal_mutable_hair()->::common::FashionView::MergeFrom(from._internal_hair());
  }
  if (from._internal_has_weapon()) {
    _internal_mutable_weapon()->::common::FashionView::MergeFrom(from._internal_weapon());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModuleViewFashion::CopyFrom(const ModuleViewFashion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ModuleViewFashion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleViewFashion::IsInitialized() const {
  return true;
}

void ModuleViewFashion::InternalSwap(ModuleViewFashion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModuleViewFashion, weapon_)
      + sizeof(ModuleViewFashion::weapon_)
      - PROTOBUF_FIELD_OFFSET(ModuleViewFashion, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModuleViewFashion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[5]);
}

// ===================================================================

class ClientSceneId::_Internal {
 public:
};

ClientSceneId::ClientSceneId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ClientSceneId)
}
ClientSceneId::ClientSceneId(const ClientSceneId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mapid_, &from.mapid_,
    static_cast<size_t>(reinterpret_cast<char*>(&procparam_) -
    reinterpret_cast<char*>(&mapid_)) + sizeof(procparam_));
  // @@protoc_insertion_point(copy_constructor:common.ClientSceneId)
}

inline void ClientSceneId::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mapid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&procparam_) -
    reinterpret_cast<char*>(&mapid_)) + sizeof(procparam_));
}

ClientSceneId::~ClientSceneId() {
  // @@protoc_insertion_point(destructor:common.ClientSceneId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientSceneId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientSceneId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientSceneId::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ClientSceneId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&procparam_) -
      reinterpret_cast<char*>(&mapid_)) + sizeof(procparam_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientSceneId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 mapId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 procType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          proctype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 procParam = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          procparam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientSceneId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ClientSceneId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mapId = 1;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mapid(), target);
  }

  // uint32 procType = 2;
  if (this->_internal_proctype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_proctype(), target);
  }

  // uint32 procParam = 3;
  if (this->_internal_procparam() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_procparam(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ClientSceneId)
  return target;
}

size_t ClientSceneId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ClientSceneId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 mapId = 1;
  if (this->_internal_mapid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mapid());
  }

  // uint32 procType = 2;
  if (this->_internal_proctype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_proctype());
  }

  // uint32 procParam = 3;
  if (this->_internal_procparam() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_procparam());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientSceneId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientSceneId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientSceneId::GetClassData() const { return &_class_data_; }

void ClientSceneId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientSceneId *>(to)->MergeFrom(
      static_cast<const ClientSceneId &>(from));
}


void ClientSceneId::MergeFrom(const ClientSceneId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ClientSceneId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mapid() != 0) {
    _internal_set_mapid(from._internal_mapid());
  }
  if (from._internal_proctype() != 0) {
    _internal_set_proctype(from._internal_proctype());
  }
  if (from._internal_procparam() != 0) {
    _internal_set_procparam(from._internal_procparam());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientSceneId::CopyFrom(const ClientSceneId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ClientSceneId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSceneId::IsInitialized() const {
  return true;
}

void ClientSceneId::InternalSwap(ClientSceneId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientSceneId, procparam_)
      + sizeof(ClientSceneId::procparam_)
      - PROTOBUF_FIELD_OFFSET(ClientSceneId, mapid_)>(
          reinterpret_cast<char*>(&mapid_),
          reinterpret_cast<char*>(&other->mapid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientSceneId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[6]);
}

// ===================================================================

class ClientStaticScene::_Internal {
 public:
};

ClientStaticScene::ClientStaticScene(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ClientStaticScene)
}
ClientStaticScene::ClientStaticScene(const ClientStaticScene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lineid_ = from.lineid_;
  // @@protoc_insertion_point(copy_constructor:common.ClientStaticScene)
}

inline void ClientStaticScene::SharedCtor() {
lineid_ = 0u;
}

ClientStaticScene::~ClientStaticScene() {
  // @@protoc_insertion_point(destructor:common.ClientStaticScene)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientStaticScene::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientStaticScene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientStaticScene::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ClientStaticScene)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lineid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientStaticScene::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 lineId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          lineid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientStaticScene::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ClientStaticScene)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 lineId = 1;
  if (this->_internal_lineid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lineid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ClientStaticScene)
  return target;
}

size_t ClientStaticScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ClientStaticScene)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 lineId = 1;
  if (this->_internal_lineid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lineid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientStaticScene::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientStaticScene::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientStaticScene::GetClassData() const { return &_class_data_; }

void ClientStaticScene::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientStaticScene *>(to)->MergeFrom(
      static_cast<const ClientStaticScene &>(from));
}


void ClientStaticScene::MergeFrom(const ClientStaticScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ClientStaticScene)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_lineid() != 0) {
    _internal_set_lineid(from._internal_lineid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientStaticScene::CopyFrom(const ClientStaticScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ClientStaticScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientStaticScene::IsInitialized() const {
  return true;
}

void ClientStaticScene::InternalSwap(ClientStaticScene* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(lineid_, other->lineid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientStaticScene::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[7]);
}

// ===================================================================

class ClientCopyScene::_Internal {
 public:
};

ClientCopyScene::ClientCopyScene(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ClientCopyScene)
}
ClientCopyScene::ClientCopyScene(const ClientCopyScene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&copylvid_, &from.copylvid_,
    static_cast<size_t>(reinterpret_cast<char*>(&autoid_) -
    reinterpret_cast<char*>(&copylvid_)) + sizeof(autoid_));
  // @@protoc_insertion_point(copy_constructor:common.ClientCopyScene)
}

inline void ClientCopyScene::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&copylvid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&autoid_) -
    reinterpret_cast<char*>(&copylvid_)) + sizeof(autoid_));
}

ClientCopyScene::~ClientCopyScene() {
  // @@protoc_insertion_point(destructor:common.ClientCopyScene)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientCopyScene::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientCopyScene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientCopyScene::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ClientCopyScene)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&copylvid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&autoid_) -
      reinterpret_cast<char*>(&copylvid_)) + sizeof(autoid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientCopyScene::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 copyLvId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          copylvid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 autoId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          autoid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientCopyScene::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ClientCopyScene)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 copyLvId = 1;
  if (this->_internal_copylvid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_copylvid(), target);
  }

  // uint32 autoId = 2;
  if (this->_internal_autoid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_autoid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ClientCopyScene)
  return target;
}

size_t ClientCopyScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ClientCopyScene)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 copyLvId = 1;
  if (this->_internal_copylvid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_copylvid());
  }

  // uint32 autoId = 2;
  if (this->_internal_autoid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_autoid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientCopyScene::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientCopyScene::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientCopyScene::GetClassData() const { return &_class_data_; }

void ClientCopyScene::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientCopyScene *>(to)->MergeFrom(
      static_cast<const ClientCopyScene &>(from));
}


void ClientCopyScene::MergeFrom(const ClientCopyScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ClientCopyScene)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_copylvid() != 0) {
    _internal_set_copylvid(from._internal_copylvid());
  }
  if (from._internal_autoid() != 0) {
    _internal_set_autoid(from._internal_autoid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientCopyScene::CopyFrom(const ClientCopyScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ClientCopyScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCopyScene::IsInitialized() const {
  return true;
}

void ClientCopyScene::InternalSwap(ClientCopyScene* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientCopyScene, autoid_)
      + sizeof(ClientCopyScene::autoid_)
      - PROTOBUF_FIELD_OFFSET(ClientCopyScene, copylvid_)>(
          reinterpret_cast<char*>(&copylvid_),
          reinterpret_cast<char*>(&other->copylvid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientCopyScene::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[8]);
}

// ===================================================================

class ClientPos::_Internal {
 public:
};

ClientPos::ClientPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ClientPos)
}
ClientPos::ClientPos(const ClientPos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&poxx_, &from.poxx_,
    static_cast<size_t>(reinterpret_cast<char*>(&offsety_) -
    reinterpret_cast<char*>(&poxx_)) + sizeof(offsety_));
  // @@protoc_insertion_point(copy_constructor:common.ClientPos)
}

inline void ClientPos::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&poxx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offsety_) -
    reinterpret_cast<char*>(&poxx_)) + sizeof(offsety_));
}

ClientPos::~ClientPos() {
  // @@protoc_insertion_point(destructor:common.ClientPos)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientPos::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientPos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientPos::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ClientPos)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&poxx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offsety_) -
      reinterpret_cast<char*>(&poxx_)) + sizeof(offsety_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientPos::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 poxX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          poxx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 offsetX = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          offsetx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 offsetY = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          offsety_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientPos::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ClientPos)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 poxX = 1;
  if (this->_internal_poxx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_poxx(), target);
  }

  // uint32 posY = 2;
  if (this->_internal_posy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_posy(), target);
  }

  // uint32 offsetX = 3;
  if (this->_internal_offsetx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_offsetx(), target);
  }

  // uint32 offsetY = 4;
  if (this->_internal_offsety() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_offsety(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ClientPos)
  return target;
}

size_t ClientPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ClientPos)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 poxX = 1;
  if (this->_internal_poxx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_poxx());
  }

  // uint32 posY = 2;
  if (this->_internal_posy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posy());
  }

  // uint32 offsetX = 3;
  if (this->_internal_offsetx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offsetx());
  }

  // uint32 offsetY = 4;
  if (this->_internal_offsety() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offsety());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientPos::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientPos::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientPos::GetClassData() const { return &_class_data_; }

void ClientPos::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientPos *>(to)->MergeFrom(
      static_cast<const ClientPos &>(from));
}


void ClientPos::MergeFrom(const ClientPos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ClientPos)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_poxx() != 0) {
    _internal_set_poxx(from._internal_poxx());
  }
  if (from._internal_posy() != 0) {
    _internal_set_posy(from._internal_posy());
  }
  if (from._internal_offsetx() != 0) {
    _internal_set_offsetx(from._internal_offsetx());
  }
  if (from._internal_offsety() != 0) {
    _internal_set_offsety(from._internal_offsety());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientPos::CopyFrom(const ClientPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ClientPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientPos::IsInitialized() const {
  return true;
}

void ClientPos::InternalSwap(ClientPos* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientPos, offsety_)
      + sizeof(ClientPos::offsety_)
      - PROTOBUF_FIELD_OFFSET(ClientPos, poxx_)>(
          reinterpret_cast<char*>(&poxx_),
          reinterpret_cast<char*>(&other->poxx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientPos::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[9]);
}

// ===================================================================

class ClientPosDirect::_Internal {
 public:
  static const ::common::ClientPos& cpos(const ClientPosDirect* msg);
};

const ::common::ClientPos&
ClientPosDirect::_Internal::cpos(const ClientPosDirect* msg) {
  return *msg->cpos_;
}
ClientPosDirect::ClientPosDirect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ClientPosDirect)
}
ClientPosDirect::ClientPosDirect(const ClientPosDirect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cpos()) {
    cpos_ = new ::common::ClientPos(*from.cpos_);
  } else {
    cpos_ = nullptr;
  }
  direct_ = from.direct_;
  // @@protoc_insertion_point(copy_constructor:common.ClientPosDirect)
}

inline void ClientPosDirect::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cpos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&direct_) -
    reinterpret_cast<char*>(&cpos_)) + sizeof(direct_));
}

ClientPosDirect::~ClientPosDirect() {
  // @@protoc_insertion_point(destructor:common.ClientPosDirect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientPosDirect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete cpos_;
}

void ClientPosDirect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientPosDirect::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ClientPosDirect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && cpos_ != nullptr) {
    delete cpos_;
  }
  cpos_ = nullptr;
  direct_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientPosDirect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.ClientPos cpos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 direct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          direct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientPosDirect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ClientPosDirect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.ClientPos cpos = 1;
  if (this->_internal_has_cpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cpos(this),
        _Internal::cpos(this).GetCachedSize(), target, stream);
  }

  // uint32 direct = 2;
  if (this->_internal_direct() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_direct(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ClientPosDirect)
  return target;
}

size_t ClientPosDirect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ClientPosDirect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.ClientPos cpos = 1;
  if (this->_internal_has_cpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cpos_);
  }

  // uint32 direct = 2;
  if (this->_internal_direct() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_direct());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientPosDirect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientPosDirect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientPosDirect::GetClassData() const { return &_class_data_; }

void ClientPosDirect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientPosDirect *>(to)->MergeFrom(
      static_cast<const ClientPosDirect &>(from));
}


void ClientPosDirect::MergeFrom(const ClientPosDirect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ClientPosDirect)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cpos()) {
    _internal_mutable_cpos()->::common::ClientPos::MergeFrom(from._internal_cpos());
  }
  if (from._internal_direct() != 0) {
    _internal_set_direct(from._internal_direct());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientPosDirect::CopyFrom(const ClientPosDirect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ClientPosDirect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientPosDirect::IsInitialized() const {
  return true;
}

void ClientPosDirect::InternalSwap(ClientPosDirect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientPosDirect, direct_)
      + sizeof(ClientPosDirect::direct_)
      - PROTOBUF_FIELD_OFFSET(ClientPosDirect, cpos_)>(
          reinterpret_cast<char*>(&cpos_),
          reinterpret_cast<char*>(&other->cpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientPosDirect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[10]);
}

// ===================================================================

class ClientPosTerminate::_Internal {
 public:
};

ClientPosTerminate::ClientPosTerminate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  poslist_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ClientPosTerminate)
}
ClientPosTerminate::ClientPosTerminate(const ClientPosTerminate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      poslist_(from.poslist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  servertime_ = from.servertime_;
  // @@protoc_insertion_point(copy_constructor:common.ClientPosTerminate)
}

inline void ClientPosTerminate::SharedCtor() {
servertime_ = uint64_t{0u};
}

ClientPosTerminate::~ClientPosTerminate() {
  // @@protoc_insertion_point(destructor:common.ClientPosTerminate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientPosTerminate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientPosTerminate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientPosTerminate::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ClientPosTerminate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  poslist_.Clear();
  servertime_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientPosTerminate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 servertime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          servertime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .common.ClientPos posList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_poslist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientPosTerminate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ClientPosTerminate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 servertime = 1;
  if (this->_internal_servertime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_servertime(), target);
  }

  // repeated .common.ClientPos posList = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_poslist_size()); i < n; i++) {
    const auto& repfield = this->_internal_poslist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ClientPosTerminate)
  return target;
}

size_t ClientPosTerminate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ClientPosTerminate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.ClientPos posList = 2;
  total_size += 1UL * this->_internal_poslist_size();
  for (const auto& msg : this->poslist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 servertime = 1;
  if (this->_internal_servertime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_servertime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientPosTerminate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientPosTerminate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientPosTerminate::GetClassData() const { return &_class_data_; }

void ClientPosTerminate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientPosTerminate *>(to)->MergeFrom(
      static_cast<const ClientPosTerminate &>(from));
}


void ClientPosTerminate::MergeFrom(const ClientPosTerminate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ClientPosTerminate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  poslist_.MergeFrom(from.poslist_);
  if (from._internal_servertime() != 0) {
    _internal_set_servertime(from._internal_servertime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientPosTerminate::CopyFrom(const ClientPosTerminate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ClientPosTerminate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientPosTerminate::IsInitialized() const {
  return true;
}

void ClientPosTerminate::InternalSwap(ClientPosTerminate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  poslist_.InternalSwap(&other->poslist_);
  swap(servertime_, other->servertime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientPosTerminate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[11]);
}

// ===================================================================

class EquipView::_Internal {
 public:
};

EquipView::EquipView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.EquipView)
}
EquipView::EquipView(const EquipView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&equiptid_, &from.equiptid_,
    static_cast<size_t>(reinterpret_cast<char*>(&strengthlevel_) -
    reinterpret_cast<char*>(&equiptid_)) + sizeof(strengthlevel_));
  // @@protoc_insertion_point(copy_constructor:common.EquipView)
}

inline void EquipView::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&equiptid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&strengthlevel_) -
    reinterpret_cast<char*>(&equiptid_)) + sizeof(strengthlevel_));
}

EquipView::~EquipView() {
  // @@protoc_insertion_point(destructor:common.EquipView)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EquipView::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EquipView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EquipView::Clear() {
// @@protoc_insertion_point(message_clear_start:common.EquipView)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&equiptid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strengthlevel_) -
      reinterpret_cast<char*>(&equiptid_)) + sizeof(strengthlevel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EquipView::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 equipTid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          equiptid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 strengthLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          strengthlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EquipView::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.EquipView)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 equipTid = 1;
  if (this->_internal_equiptid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_equiptid(), target);
  }

  // uint32 strengthLevel = 2;
  if (this->_internal_strengthlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_strengthlevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.EquipView)
  return target;
}

size_t EquipView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.EquipView)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 equipTid = 1;
  if (this->_internal_equiptid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_equiptid());
  }

  // uint32 strengthLevel = 2;
  if (this->_internal_strengthlevel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_strengthlevel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EquipView::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EquipView::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EquipView::GetClassData() const { return &_class_data_; }

void EquipView::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EquipView *>(to)->MergeFrom(
      static_cast<const EquipView &>(from));
}


void EquipView::MergeFrom(const EquipView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.EquipView)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_equiptid() != 0) {
    _internal_set_equiptid(from._internal_equiptid());
  }
  if (from._internal_strengthlevel() != 0) {
    _internal_set_strengthlevel(from._internal_strengthlevel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EquipView::CopyFrom(const EquipView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.EquipView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipView::IsInitialized() const {
  return true;
}

void EquipView::InternalSwap(EquipView* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EquipView, strengthlevel_)
      + sizeof(EquipView::strengthlevel_)
      - PROTOBUF_FIELD_OFFSET(EquipView, equiptid_)>(
          reinterpret_cast<char*>(&equiptid_),
          reinterpret_cast<char*>(&other->equiptid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EquipView::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[12]);
}

// ===================================================================

class RoleBrief::_Internal {
 public:
};

RoleBrief::RoleBrief(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.RoleBrief)
}
RoleBrief::RoleBrief(const RoleBrief& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    nickname_.Set(from._internal_nickname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&zoneidf_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(zoneidf_));
  // @@protoc_insertion_point(copy_constructor:common.RoleBrief)
}

inline void RoleBrief::SharedCtor() {
nickname_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nickname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roleid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&zoneidf_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(zoneidf_));
}

RoleBrief::~RoleBrief() {
  // @@protoc_insertion_point(destructor:common.RoleBrief)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleBrief::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nickname_.Destroy();
}

void RoleBrief::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoleBrief::Clear() {
// @@protoc_insertion_point(message_clear_start:common.RoleBrief)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty();
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zoneidf_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(zoneidf_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleBrief::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 roleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 headIcon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          headicon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 headFrame = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          headframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 careerId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          careerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sex = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 careerLevel = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          careerlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 zoneIdF = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          zoneidf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleBrief::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.RoleBrief)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roleId = 1;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // bytes nickname = 2;
  if (!this->_internal_nickname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // uint32 headIcon = 3;
  if (this->_internal_headicon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_headicon(), target);
  }

  // uint32 headFrame = 4;
  if (this->_internal_headframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_headframe(), target);
  }

  // uint32 careerId = 5;
  if (this->_internal_careerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_careerid(), target);
  }

  // uint32 level = 6;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_level(), target);
  }

  // uint32 sex = 7;
  if (this->_internal_sex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_sex(), target);
  }

  // uint32 careerLevel = 8;
  if (this->_internal_careerlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_careerlevel(), target);
  }

  // uint32 zoneIdF = 9;
  if (this->_internal_zoneidf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_zoneidf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.RoleBrief)
  return target;
}

size_t RoleBrief::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.RoleBrief)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes nickname = 2;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nickname());
  }

  // uint64 roleId = 1;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
  }

  // uint32 headIcon = 3;
  if (this->_internal_headicon() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headicon());
  }

  // uint32 headFrame = 4;
  if (this->_internal_headframe() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headframe());
  }

  // uint32 careerId = 5;
  if (this->_internal_careerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_careerid());
  }

  // uint32 level = 6;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 sex = 7;
  if (this->_internal_sex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sex());
  }

  // uint32 careerLevel = 8;
  if (this->_internal_careerlevel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_careerlevel());
  }

  // uint32 zoneIdF = 9;
  if (this->_internal_zoneidf() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_zoneidf());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleBrief::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoleBrief::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleBrief::GetClassData() const { return &_class_data_; }

void RoleBrief::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoleBrief *>(to)->MergeFrom(
      static_cast<const RoleBrief &>(from));
}


void RoleBrief::MergeFrom(const RoleBrief& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.RoleBrief)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from._internal_roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_headicon() != 0) {
    _internal_set_headicon(from._internal_headicon());
  }
  if (from._internal_headframe() != 0) {
    _internal_set_headframe(from._internal_headframe());
  }
  if (from._internal_careerid() != 0) {
    _internal_set_careerid(from._internal_careerid());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from._internal_sex() != 0) {
    _internal_set_sex(from._internal_sex());
  }
  if (from._internal_careerlevel() != 0) {
    _internal_set_careerlevel(from._internal_careerlevel());
  }
  if (from._internal_zoneidf() != 0) {
    _internal_set_zoneidf(from._internal_zoneidf());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleBrief::CopyFrom(const RoleBrief& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.RoleBrief)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleBrief::IsInitialized() const {
  return true;
}

void RoleBrief::InternalSwap(RoleBrief* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &nickname_, lhs_arena,
      &other->nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleBrief, zoneidf_)
      + sizeof(RoleBrief::zoneidf_)
      - PROTOBUF_FIELD_OFFSET(RoleBrief, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleBrief::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[13]);
}

// ===================================================================

class RoleExtend1::_Internal {
 public:
  static const ::common::ModelPartList& mplist(const RoleExtend1* msg);
  static const ::common::ModuleViewFashion& fashion(const RoleExtend1* msg);
  static const ::common::EquipView& mainhand(const RoleExtend1* msg);
  static const ::common::EquipView& offhand(const RoleExtend1* msg);
};

const ::common::ModelPartList&
RoleExtend1::_Internal::mplist(const RoleExtend1* msg) {
  return *msg->mplist_;
}
const ::common::ModuleViewFashion&
RoleExtend1::_Internal::fashion(const RoleExtend1* msg) {
  return *msg->fashion_;
}
const ::common::EquipView&
RoleExtend1::_Internal::mainhand(const RoleExtend1* msg) {
  return *msg->mainhand_;
}
const ::common::EquipView&
RoleExtend1::_Internal::offhand(const RoleExtend1* msg) {
  return *msg->offhand_;
}
RoleExtend1::RoleExtend1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.RoleExtend1)
}
RoleExtend1::RoleExtend1(const RoleExtend1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  familyname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    familyname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_familyname().empty()) {
    familyname_.Set(from._internal_familyname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_mplist()) {
    mplist_ = new ::common::ModelPartList(*from.mplist_);
  } else {
    mplist_ = nullptr;
  }
  if (from._internal_has_fashion()) {
    fashion_ = new ::common::ModuleViewFashion(*from.fashion_);
  } else {
    fashion_ = nullptr;
  }
  if (from._internal_has_mainhand()) {
    mainhand_ = new ::common::EquipView(*from.mainhand_);
  } else {
    mainhand_ = nullptr;
  }
  if (from._internal_has_offhand()) {
    offhand_ = new ::common::EquipView(*from.offhand_);
  } else {
    offhand_ = nullptr;
  }
  ::memcpy(&teamid_, &from.teamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&onlinetime_) -
    reinterpret_cast<char*>(&teamid_)) + sizeof(onlinetime_));
  // @@protoc_insertion_point(copy_constructor:common.RoleExtend1)
}

inline void RoleExtend1::SharedCtor() {
familyname_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  familyname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mplist_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&onlinetime_) -
    reinterpret_cast<char*>(&mplist_)) + sizeof(onlinetime_));
}

RoleExtend1::~RoleExtend1() {
  // @@protoc_insertion_point(destructor:common.RoleExtend1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleExtend1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  familyname_.Destroy();
  if (this != internal_default_instance()) delete mplist_;
  if (this != internal_default_instance()) delete fashion_;
  if (this != internal_default_instance()) delete mainhand_;
  if (this != internal_default_instance()) delete offhand_;
}

void RoleExtend1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoleExtend1::Clear() {
// @@protoc_insertion_point(message_clear_start:common.RoleExtend1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  familyname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && mplist_ != nullptr) {
    delete mplist_;
  }
  mplist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fashion_ != nullptr) {
    delete fashion_;
  }
  fashion_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mainhand_ != nullptr) {
    delete mainhand_;
  }
  mainhand_ = nullptr;
  if (GetArenaForAllocation() == nullptr && offhand_ != nullptr) {
    delete offhand_;
  }
  offhand_ = nullptr;
  ::memset(&teamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&onlinetime_) -
      reinterpret_cast<char*>(&teamid_)) + sizeof(onlinetime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleExtend1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 teamId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 familyId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          familyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.ModelPartList mpList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mplist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string familyName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_familyname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "common.RoleExtend1.familyName"));
        } else
          goto handle_unusual;
        continue;
      // uint64 leaderSceneId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          leadersceneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 fightPoint = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          fightpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.ModuleViewFashion fashion = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_fashion(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.EquipView mainHand = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_mainhand(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.EquipView offHand = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_offhand(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chatFont = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          chatfont_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chatFrame = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          chatframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 loginTime = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          logintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 logoutTime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          logouttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 offlineTime = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          offlinetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 onlineTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          onlinetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleExtend1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.RoleExtend1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 teamId = 1;
  if (this->_internal_teamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_teamid(), target);
  }

  // uint64 familyId = 2;
  if (this->_internal_familyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_familyid(), target);
  }

  // .common.ModelPartList mpList = 3;
  if (this->_internal_has_mplist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::mplist(this),
        _Internal::mplist(this).GetCachedSize(), target, stream);
  }

  // string familyName = 4;
  if (!this->_internal_familyname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_familyname().data(), static_cast<int>(this->_internal_familyname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.RoleExtend1.familyName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_familyname(), target);
  }

  // uint64 leaderSceneId = 5;
  if (this->_internal_leadersceneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_leadersceneid(), target);
  }

  // uint32 fightPoint = 6;
  if (this->_internal_fightpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_fightpoint(), target);
  }

  // .common.ModuleViewFashion fashion = 7;
  if (this->_internal_has_fashion()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::fashion(this),
        _Internal::fashion(this).GetCachedSize(), target, stream);
  }

  // .common.EquipView mainHand = 8;
  if (this->_internal_has_mainhand()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::mainhand(this),
        _Internal::mainhand(this).GetCachedSize(), target, stream);
  }

  // .common.EquipView offHand = 9;
  if (this->_internal_has_offhand()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::offhand(this),
        _Internal::offhand(this).GetCachedSize(), target, stream);
  }

  // uint32 chatFont = 10;
  if (this->_internal_chatfont() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_chatfont(), target);
  }

  // uint32 chatFrame = 11;
  if (this->_internal_chatframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_chatframe(), target);
  }

  // uint32 loginTime = 12;
  if (this->_internal_logintime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_logintime(), target);
  }

  // uint32 logoutTime = 13;
  if (this->_internal_logouttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_logouttime(), target);
  }

  // uint32 offlineTime = 14;
  if (this->_internal_offlinetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_offlinetime(), target);
  }

  // uint32 onlineTime = 15;
  if (this->_internal_onlinetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_onlinetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.RoleExtend1)
  return target;
}

size_t RoleExtend1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.RoleExtend1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string familyName = 4;
  if (!this->_internal_familyname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_familyname());
  }

  // .common.ModelPartList mpList = 3;
  if (this->_internal_has_mplist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mplist_);
  }

  // .common.ModuleViewFashion fashion = 7;
  if (this->_internal_has_fashion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fashion_);
  }

  // .common.EquipView mainHand = 8;
  if (this->_internal_has_mainhand()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mainhand_);
  }

  // .common.EquipView offHand = 9;
  if (this->_internal_has_offhand()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offhand_);
  }

  // uint64 teamId = 1;
  if (this->_internal_teamid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_teamid());
  }

  // uint64 familyId = 2;
  if (this->_internal_familyid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_familyid());
  }

  // uint64 leaderSceneId = 5;
  if (this->_internal_leadersceneid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_leadersceneid());
  }

  // uint32 fightPoint = 6;
  if (this->_internal_fightpoint() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fightpoint());
  }

  // uint32 chatFont = 10;
  if (this->_internal_chatfont() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chatfont());
  }

  // uint32 chatFrame = 11;
  if (this->_internal_chatframe() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chatframe());
  }

  // uint32 loginTime = 12;
  if (this->_internal_logintime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_logintime());
  }

  // uint32 logoutTime = 13;
  if (this->_internal_logouttime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_logouttime());
  }

  // uint32 offlineTime = 14;
  if (this->_internal_offlinetime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offlinetime());
  }

  // uint32 onlineTime = 15;
  if (this->_internal_onlinetime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_onlinetime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleExtend1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoleExtend1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleExtend1::GetClassData() const { return &_class_data_; }

void RoleExtend1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoleExtend1 *>(to)->MergeFrom(
      static_cast<const RoleExtend1 &>(from));
}


void RoleExtend1::MergeFrom(const RoleExtend1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.RoleExtend1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_familyname().empty()) {
    _internal_set_familyname(from._internal_familyname());
  }
  if (from._internal_has_mplist()) {
    _internal_mutable_mplist()->::common::ModelPartList::MergeFrom(from._internal_mplist());
  }
  if (from._internal_has_fashion()) {
    _internal_mutable_fashion()->::common::ModuleViewFashion::MergeFrom(from._internal_fashion());
  }
  if (from._internal_has_mainhand()) {
    _internal_mutable_mainhand()->::common::EquipView::MergeFrom(from._internal_mainhand());
  }
  if (from._internal_has_offhand()) {
    _internal_mutable_offhand()->::common::EquipView::MergeFrom(from._internal_offhand());
  }
  if (from._internal_teamid() != 0) {
    _internal_set_teamid(from._internal_teamid());
  }
  if (from._internal_familyid() != 0) {
    _internal_set_familyid(from._internal_familyid());
  }
  if (from._internal_leadersceneid() != 0) {
    _internal_set_leadersceneid(from._internal_leadersceneid());
  }
  if (from._internal_fightpoint() != 0) {
    _internal_set_fightpoint(from._internal_fightpoint());
  }
  if (from._internal_chatfont() != 0) {
    _internal_set_chatfont(from._internal_chatfont());
  }
  if (from._internal_chatframe() != 0) {
    _internal_set_chatframe(from._internal_chatframe());
  }
  if (from._internal_logintime() != 0) {
    _internal_set_logintime(from._internal_logintime());
  }
  if (from._internal_logouttime() != 0) {
    _internal_set_logouttime(from._internal_logouttime());
  }
  if (from._internal_offlinetime() != 0) {
    _internal_set_offlinetime(from._internal_offlinetime());
  }
  if (from._internal_onlinetime() != 0) {
    _internal_set_onlinetime(from._internal_onlinetime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleExtend1::CopyFrom(const RoleExtend1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.RoleExtend1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleExtend1::IsInitialized() const {
  return true;
}

void RoleExtend1::InternalSwap(RoleExtend1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &familyname_, lhs_arena,
      &other->familyname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleExtend1, onlinetime_)
      + sizeof(RoleExtend1::onlinetime_)
      - PROTOBUF_FIELD_OFFSET(RoleExtend1, mplist_)>(
          reinterpret_cast<char*>(&mplist_),
          reinterpret_cast<char*>(&other->mplist_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleExtend1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[14]);
}

// ===================================================================

class RoleExtend2::_Internal {
 public:
  static const ::common::ClientSceneId& sceneid(const RoleExtend2* msg);
  static const ::common::ClientPos& cpos(const RoleExtend2* msg);
};

const ::common::ClientSceneId&
RoleExtend2::_Internal::sceneid(const RoleExtend2* msg) {
  return *msg->sceneid_;
}
const ::common::ClientPos&
RoleExtend2::_Internal::cpos(const RoleExtend2* msg) {
  return *msg->cpos_;
}
RoleExtend2::RoleExtend2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.RoleExtend2)
}
RoleExtend2::RoleExtend2(const RoleExtend2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sceneid()) {
    sceneid_ = new ::common::ClientSceneId(*from.sceneid_);
  } else {
    sceneid_ = nullptr;
  }
  if (from._internal_has_cpos()) {
    cpos_ = new ::common::ClientPos(*from.cpos_);
  } else {
    cpos_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:common.RoleExtend2)
}

inline void RoleExtend2::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sceneid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cpos_) -
    reinterpret_cast<char*>(&sceneid_)) + sizeof(cpos_));
}

RoleExtend2::~RoleExtend2() {
  // @@protoc_insertion_point(destructor:common.RoleExtend2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleExtend2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sceneid_;
  if (this != internal_default_instance()) delete cpos_;
}

void RoleExtend2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoleExtend2::Clear() {
// @@protoc_insertion_point(message_clear_start:common.RoleExtend2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && sceneid_ != nullptr) {
    delete sceneid_;
  }
  sceneid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cpos_ != nullptr) {
    delete cpos_;
  }
  cpos_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleExtend2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.ClientSceneId sceneId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sceneid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.ClientPos cpos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleExtend2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.RoleExtend2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.ClientSceneId sceneId = 1;
  if (this->_internal_has_sceneid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::sceneid(this),
        _Internal::sceneid(this).GetCachedSize(), target, stream);
  }

  // .common.ClientPos cpos = 2;
  if (this->_internal_has_cpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cpos(this),
        _Internal::cpos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.RoleExtend2)
  return target;
}

size_t RoleExtend2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.RoleExtend2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.ClientSceneId sceneId = 1;
  if (this->_internal_has_sceneid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sceneid_);
  }

  // .common.ClientPos cpos = 2;
  if (this->_internal_has_cpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cpos_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleExtend2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoleExtend2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleExtend2::GetClassData() const { return &_class_data_; }

void RoleExtend2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoleExtend2 *>(to)->MergeFrom(
      static_cast<const RoleExtend2 &>(from));
}


void RoleExtend2::MergeFrom(const RoleExtend2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.RoleExtend2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sceneid()) {
    _internal_mutable_sceneid()->::common::ClientSceneId::MergeFrom(from._internal_sceneid());
  }
  if (from._internal_has_cpos()) {
    _internal_mutable_cpos()->::common::ClientPos::MergeFrom(from._internal_cpos());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleExtend2::CopyFrom(const RoleExtend2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.RoleExtend2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleExtend2::IsInitialized() const {
  return true;
}

void RoleExtend2::InternalSwap(RoleExtend2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleExtend2, cpos_)
      + sizeof(RoleExtend2::cpos_)
      - PROTOBUF_FIELD_OFFSET(RoleExtend2, sceneid_)>(
          reinterpret_cast<char*>(&sceneid_),
          reinterpret_cast<char*>(&other->sceneid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleExtend2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[15]);
}

// ===================================================================

class RoleExtend3::_Internal {
 public:
};

RoleExtend3::RoleExtend3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.RoleExtend3)
}
RoleExtend3::RoleExtend3(const RoleExtend3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hp_, &from.hp_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxmp_) -
    reinterpret_cast<char*>(&hp_)) + sizeof(maxmp_));
  // @@protoc_insertion_point(copy_constructor:common.RoleExtend3)
}

inline void RoleExtend3::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&maxmp_) -
    reinterpret_cast<char*>(&hp_)) + sizeof(maxmp_));
}

RoleExtend3::~RoleExtend3() {
  // @@protoc_insertion_point(destructor:common.RoleExtend3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleExtend3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleExtend3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoleExtend3::Clear() {
// @@protoc_insertion_point(message_clear_start:common.RoleExtend3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxmp_) -
      reinterpret_cast<char*>(&hp_)) + sizeof(maxmp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleExtend3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 hp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 maxHp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          mp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 maxMp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          maxmp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleExtend3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.RoleExtend3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 hp = 1;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hp(), target);
  }

  // uint32 maxHp = 2;
  if (this->_internal_maxhp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_maxhp(), target);
  }

  // uint32 mp = 3;
  if (this->_internal_mp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mp(), target);
  }

  // uint32 maxMp = 4;
  if (this->_internal_maxmp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_maxmp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.RoleExtend3)
  return target;
}

size_t RoleExtend3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.RoleExtend3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 hp = 1;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hp());
  }

  // uint32 maxHp = 2;
  if (this->_internal_maxhp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxhp());
  }

  // uint32 mp = 3;
  if (this->_internal_mp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mp());
  }

  // uint32 maxMp = 4;
  if (this->_internal_maxmp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxmp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleExtend3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoleExtend3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleExtend3::GetClassData() const { return &_class_data_; }

void RoleExtend3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoleExtend3 *>(to)->MergeFrom(
      static_cast<const RoleExtend3 &>(from));
}


void RoleExtend3::MergeFrom(const RoleExtend3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.RoleExtend3)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
  if (from._internal_maxhp() != 0) {
    _internal_set_maxhp(from._internal_maxhp());
  }
  if (from._internal_mp() != 0) {
    _internal_set_mp(from._internal_mp());
  }
  if (from._internal_maxmp() != 0) {
    _internal_set_maxmp(from._internal_maxmp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleExtend3::CopyFrom(const RoleExtend3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.RoleExtend3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleExtend3::IsInitialized() const {
  return true;
}

void RoleExtend3::InternalSwap(RoleExtend3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleExtend3, maxmp_)
      + sizeof(RoleExtend3::maxmp_)
      - PROTOBUF_FIELD_OFFSET(RoleExtend3, hp_)>(
          reinterpret_cast<char*>(&hp_),
          reinterpret_cast<char*>(&other->hp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleExtend3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[16]);
}

// ===================================================================

class RoleVoteState::_Internal {
 public:
};

RoleVoteState::RoleVoteState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.RoleVoteState)
}
RoleVoteState::RoleVoteState(const RoleVoteState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:common.RoleVoteState)
}

inline void RoleVoteState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roleid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(state_));
}

RoleVoteState::~RoleVoteState() {
  // @@protoc_insertion_point(destructor:common.RoleVoteState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleVoteState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleVoteState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoleVoteState::Clear() {
// @@protoc_insertion_point(message_clear_start:common.RoleVoteState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleVoteState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 roleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleVoteState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.RoleVoteState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roleId = 1;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // uint32 state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.RoleVoteState)
  return target;
}

size_t RoleVoteState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.RoleVoteState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 roleId = 1;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
  }

  // uint32 state = 2;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleVoteState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoleVoteState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleVoteState::GetClassData() const { return &_class_data_; }

void RoleVoteState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoleVoteState *>(to)->MergeFrom(
      static_cast<const RoleVoteState &>(from));
}


void RoleVoteState::MergeFrom(const RoleVoteState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.RoleVoteState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleVoteState::CopyFrom(const RoleVoteState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.RoleVoteState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleVoteState::IsInitialized() const {
  return true;
}

void RoleVoteState::InternalSwap(RoleVoteState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleVoteState, state_)
      + sizeof(RoleVoteState::state_)
      - PROTOBUF_FIELD_OFFSET(RoleVoteState, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleVoteState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[17]);
}

// ===================================================================

class RoleVoteStateList::_Internal {
 public:
};

RoleVoteStateList::RoleVoteStateList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  roles_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.RoleVoteStateList)
}
RoleVoteStateList::RoleVoteStateList(const RoleVoteStateList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roles_(from.roles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:common.RoleVoteStateList)
}

inline void RoleVoteStateList::SharedCtor() {
}

RoleVoteStateList::~RoleVoteStateList() {
  // @@protoc_insertion_point(destructor:common.RoleVoteStateList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleVoteStateList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleVoteStateList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoleVoteStateList::Clear() {
// @@protoc_insertion_point(message_clear_start:common.RoleVoteStateList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleVoteStateList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .common.RoleVoteState roles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleVoteStateList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.RoleVoteStateList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.RoleVoteState roles = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_roles_size()); i < n; i++) {
    const auto& repfield = this->_internal_roles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.RoleVoteStateList)
  return target;
}

size_t RoleVoteStateList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.RoleVoteStateList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.RoleVoteState roles = 1;
  total_size += 1UL * this->_internal_roles_size();
  for (const auto& msg : this->roles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleVoteStateList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoleVoteStateList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleVoteStateList::GetClassData() const { return &_class_data_; }

void RoleVoteStateList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoleVoteStateList *>(to)->MergeFrom(
      static_cast<const RoleVoteStateList &>(from));
}


void RoleVoteStateList::MergeFrom(const RoleVoteStateList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.RoleVoteStateList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleVoteStateList::CopyFrom(const RoleVoteStateList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.RoleVoteStateList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleVoteStateList::IsInitialized() const {
  return true;
}

void RoleVoteStateList::InternalSwap(RoleVoteStateList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  roles_.InternalSwap(&other->roles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleVoteStateList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[18]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::common::ModelPart*
Arena::CreateMaybeMessage< ::common::ModelPart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ModelPart >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ModelPartList*
Arena::CreateMaybeMessage< ::common::ModelPartList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ModelPartList >(arena);
}
template<> PROTOBUF_NOINLINE ::common::OneFashionStain*
Arena::CreateMaybeMessage< ::common::OneFashionStain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::OneFashionStain >(arena);
}
template<> PROTOBUF_NOINLINE ::common::FashionStain*
Arena::CreateMaybeMessage< ::common::FashionStain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::FashionStain >(arena);
}
template<> PROTOBUF_NOINLINE ::common::FashionView*
Arena::CreateMaybeMessage< ::common::FashionView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::FashionView >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ModuleViewFashion*
Arena::CreateMaybeMessage< ::common::ModuleViewFashion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ModuleViewFashion >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ClientSceneId*
Arena::CreateMaybeMessage< ::common::ClientSceneId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ClientSceneId >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ClientStaticScene*
Arena::CreateMaybeMessage< ::common::ClientStaticScene >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ClientStaticScene >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ClientCopyScene*
Arena::CreateMaybeMessage< ::common::ClientCopyScene >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ClientCopyScene >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ClientPos*
Arena::CreateMaybeMessage< ::common::ClientPos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ClientPos >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ClientPosDirect*
Arena::CreateMaybeMessage< ::common::ClientPosDirect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ClientPosDirect >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ClientPosTerminate*
Arena::CreateMaybeMessage< ::common::ClientPosTerminate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ClientPosTerminate >(arena);
}
template<> PROTOBUF_NOINLINE ::common::EquipView*
Arena::CreateMaybeMessage< ::common::EquipView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::EquipView >(arena);
}
template<> PROTOBUF_NOINLINE ::common::RoleBrief*
Arena::CreateMaybeMessage< ::common::RoleBrief >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::RoleBrief >(arena);
}
template<> PROTOBUF_NOINLINE ::common::RoleExtend1*
Arena::CreateMaybeMessage< ::common::RoleExtend1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::RoleExtend1 >(arena);
}
template<> PROTOBUF_NOINLINE ::common::RoleExtend2*
Arena::CreateMaybeMessage< ::common::RoleExtend2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::RoleExtend2 >(arena);
}
template<> PROTOBUF_NOINLINE ::common::RoleExtend3*
Arena::CreateMaybeMessage< ::common::RoleExtend3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::RoleExtend3 >(arena);
}
template<> PROTOBUF_NOINLINE ::common::RoleVoteState*
Arena::CreateMaybeMessage< ::common::RoleVoteState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::RoleVoteState >(arena);
}
template<> PROTOBUF_NOINLINE ::common::RoleVoteStateList*
Arena::CreateMaybeMessage< ::common::RoleVoteStateList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::RoleVoteStateList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
