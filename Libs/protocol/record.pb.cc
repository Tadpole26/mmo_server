// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: record.proto

#include "record.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace record {
PROTOBUF_CONSTEXPR RecordModuleAll_ModulesEntry_DoNotUse::RecordModuleAll_ModulesEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct RecordModuleAll_ModulesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordModuleAll_ModulesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordModuleAll_ModulesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RecordModuleAll_ModulesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordModuleAll_ModulesEntry_DoNotUseDefaultTypeInternal _RecordModuleAll_ModulesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR RecordModuleAll::RecordModuleAll(
    ::_pbi::ConstantInitialized)
  : modules_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct RecordModuleAllDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordModuleAllDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordModuleAllDefaultTypeInternal() {}
  union {
    RecordModuleAll _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordModuleAllDefaultTypeInternal _RecordModuleAll_default_instance_;
PROTOBUF_CONSTEXPR RecordModule::RecordModule(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct RecordModuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordModuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordModuleDefaultTypeInternal() {}
  union {
    RecordModule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordModuleDefaultTypeInternal _RecordModule_default_instance_;
}  // namespace record
static ::_pb::Metadata file_level_metadata_record_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_record_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_record_2eproto = nullptr;

const uint32_t TableStruct_record_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::record::RecordModuleAll_ModulesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::record::RecordModuleAll_ModulesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::record::RecordModuleAll_ModulesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::record::RecordModuleAll_ModulesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::record::RecordModuleAll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::record::RecordModuleAll, modules_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::record::RecordModule, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::record::RecordModule, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::record::RecordModule, oModule_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::record::RecordModuleAll_ModulesEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::record::RecordModuleAll)},
  { 17, -1, -1, sizeof(::record::RecordModule)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::record::_RecordModuleAll_ModulesEntry_DoNotUse_default_instance_._instance,
  &::record::_RecordModuleAll_default_instance_._instance,
  &::record::_RecordModule_default_instance_._instance,
};

const char descriptor_table_protodef_record_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014record.proto\022\006record\032\022recordfriend.pro"
  "to\032\020recorditem.proto\"\216\001\n\017RecordModuleAll"
  "\0225\n\007modules\030\001 \003(\0132$.record.RecordModuleA"
  "ll.ModulesEntry\032D\n\014ModulesEntry\022\013\n\003key\030\001"
  " \001(\r\022#\n\005value\030\002 \001(\0132\024.record.RecordModul"
  "e:\0028\001\"q\n\014RecordModule\022(\n\004item\030\001 \001(\0132\030.re"
  "cord.RecordModuleItemH\000\022,\n\006friend\030\002 \001(\0132"
  "\032.record.RecordModuleFriendH\000B\t\n\007oModule"
  "b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_record_2eproto_deps[2] = {
  &::descriptor_table_recordfriend_2eproto,
  &::descriptor_table_recorditem_2eproto,
};
static ::_pbi::once_flag descriptor_table_record_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_record_2eproto = {
    false, false, 328, descriptor_table_protodef_record_2eproto,
    "record.proto",
    &descriptor_table_record_2eproto_once, descriptor_table_record_2eproto_deps, 2, 3,
    schemas, file_default_instances, TableStruct_record_2eproto::offsets,
    file_level_metadata_record_2eproto, file_level_enum_descriptors_record_2eproto,
    file_level_service_descriptors_record_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_record_2eproto_getter() {
  return &descriptor_table_record_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_record_2eproto(&descriptor_table_record_2eproto);
namespace record {

// ===================================================================

RecordModuleAll_ModulesEntry_DoNotUse::RecordModuleAll_ModulesEntry_DoNotUse() {}
RecordModuleAll_ModulesEntry_DoNotUse::RecordModuleAll_ModulesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RecordModuleAll_ModulesEntry_DoNotUse::MergeFrom(const RecordModuleAll_ModulesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RecordModuleAll_ModulesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_record_2eproto_getter, &descriptor_table_record_2eproto_once,
      file_level_metadata_record_2eproto[0]);
}

// ===================================================================

class RecordModuleAll::_Internal {
 public:
};

RecordModuleAll::RecordModuleAll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  modules_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &RecordModuleAll::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:record.RecordModuleAll)
}
RecordModuleAll::RecordModuleAll(const RecordModuleAll& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  modules_.MergeFrom(from.modules_);
  // @@protoc_insertion_point(copy_constructor:record.RecordModuleAll)
}

inline void RecordModuleAll::SharedCtor() {
}

RecordModuleAll::~RecordModuleAll() {
  // @@protoc_insertion_point(destructor:record.RecordModuleAll)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void RecordModuleAll::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  modules_.Destruct();
}

void RecordModuleAll::ArenaDtor(void* object) {
  RecordModuleAll* _this = reinterpret_cast< RecordModuleAll* >(object);
  _this->modules_.Destruct();
}
void RecordModuleAll::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordModuleAll::Clear() {
// @@protoc_insertion_point(message_clear_start:record.RecordModuleAll)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modules_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordModuleAll::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint32, .record.RecordModule> modules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&modules_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordModuleAll::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:record.RecordModuleAll)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .record.RecordModule> modules = 1;
  if (!this->_internal_modules().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::record::RecordModule>;
    using WireHelper = RecordModuleAll_ModulesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_modules();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:record.RecordModuleAll)
  return target;
}

size_t RecordModuleAll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:record.RecordModuleAll)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .record.RecordModule> modules = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_modules_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::record::RecordModule >::const_iterator
      it = this->_internal_modules().begin();
      it != this->_internal_modules().end(); ++it) {
    total_size += RecordModuleAll_ModulesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordModuleAll::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordModuleAll::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordModuleAll::GetClassData() const { return &_class_data_; }

void RecordModuleAll::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecordModuleAll *>(to)->MergeFrom(
      static_cast<const RecordModuleAll &>(from));
}


void RecordModuleAll::MergeFrom(const RecordModuleAll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:record.RecordModuleAll)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  modules_.MergeFrom(from.modules_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordModuleAll::CopyFrom(const RecordModuleAll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:record.RecordModuleAll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordModuleAll::IsInitialized() const {
  return true;
}

void RecordModuleAll::InternalSwap(RecordModuleAll* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  modules_.InternalSwap(&other->modules_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordModuleAll::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_record_2eproto_getter, &descriptor_table_record_2eproto_once,
      file_level_metadata_record_2eproto[1]);
}

// ===================================================================

class RecordModule::_Internal {
 public:
  static const ::record::RecordModuleItem& item(const RecordModule* msg);
  static const ::record::RecordModuleFriend& friend_(const RecordModule* msg);
};

const ::record::RecordModuleItem&
RecordModule::_Internal::item(const RecordModule* msg) {
  return *msg->oModule_.item_;
}
const ::record::RecordModuleFriend&
RecordModule::_Internal::friend_(const RecordModule* msg) {
  return *msg->oModule_.friend__;
}
void RecordModule::set_allocated_item(::record::RecordModuleItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oModule();
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    set_has_item();
    oModule_.item_ = item;
  }
  // @@protoc_insertion_point(field_set_allocated:record.RecordModule.item)
}
void RecordModule::clear_item() {
  if (_internal_has_item()) {
    if (GetArenaForAllocation() == nullptr) {
      delete oModule_.item_;
    }
    clear_has_oModule();
  }
}
void RecordModule::set_allocated_friend_(::record::RecordModuleFriend* friend_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oModule();
  if (friend_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(friend_));
    if (message_arena != submessage_arena) {
      friend_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friend_, submessage_arena);
    }
    set_has_friend_();
    oModule_.friend__ = friend_;
  }
  // @@protoc_insertion_point(field_set_allocated:record.RecordModule.friend)
}
void RecordModule::clear_friend_() {
  if (_internal_has_friend_()) {
    if (GetArenaForAllocation() == nullptr) {
      delete oModule_.friend__;
    }
    clear_has_oModule();
  }
}
RecordModule::RecordModule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:record.RecordModule)
}
RecordModule::RecordModule(const RecordModule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_oModule();
  switch (from.oModule_case()) {
    case kItem: {
      _internal_mutable_item()->::record::RecordModuleItem::MergeFrom(from._internal_item());
      break;
    }
    case kFriend: {
      _internal_mutable_friend_()->::record::RecordModuleFriend::MergeFrom(from._internal_friend_());
      break;
    }
    case OMODULE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:record.RecordModule)
}

inline void RecordModule::SharedCtor() {
clear_has_oModule();
}

RecordModule::~RecordModule() {
  // @@protoc_insertion_point(destructor:record.RecordModule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordModule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_oModule()) {
    clear_oModule();
  }
}

void RecordModule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordModule::clear_oModule() {
// @@protoc_insertion_point(one_of_clear_start:record.RecordModule)
  switch (oModule_case()) {
    case kItem: {
      if (GetArenaForAllocation() == nullptr) {
        delete oModule_.item_;
      }
      break;
    }
    case kFriend: {
      if (GetArenaForAllocation() == nullptr) {
        delete oModule_.friend__;
      }
      break;
    }
    case OMODULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OMODULE_NOT_SET;
}


void RecordModule::Clear() {
// @@protoc_insertion_point(message_clear_start:record.RecordModule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_oModule();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordModule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .record.RecordModuleItem item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .record.RecordModuleFriend friend = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_friend_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordModule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:record.RecordModule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .record.RecordModuleItem item = 1;
  if (_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  // .record.RecordModuleFriend friend = 2;
  if (_internal_has_friend_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::friend_(this),
        _Internal::friend_(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:record.RecordModule)
  return target;
}

size_t RecordModule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:record.RecordModule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (oModule_case()) {
    // .record.RecordModuleItem item = 1;
    case kItem: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oModule_.item_);
      break;
    }
    // .record.RecordModuleFriend friend = 2;
    case kFriend: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oModule_.friend__);
      break;
    }
    case OMODULE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordModule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordModule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordModule::GetClassData() const { return &_class_data_; }

void RecordModule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecordModule *>(to)->MergeFrom(
      static_cast<const RecordModule &>(from));
}


void RecordModule::MergeFrom(const RecordModule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:record.RecordModule)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.oModule_case()) {
    case kItem: {
      _internal_mutable_item()->::record::RecordModuleItem::MergeFrom(from._internal_item());
      break;
    }
    case kFriend: {
      _internal_mutable_friend_()->::record::RecordModuleFriend::MergeFrom(from._internal_friend_());
      break;
    }
    case OMODULE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordModule::CopyFrom(const RecordModule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:record.RecordModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordModule::IsInitialized() const {
  return true;
}

void RecordModule::InternalSwap(RecordModule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(oModule_, other->oModule_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordModule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_record_2eproto_getter, &descriptor_table_record_2eproto_once,
      file_level_metadata_record_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace record
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::record::RecordModuleAll_ModulesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::record::RecordModuleAll_ModulesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::record::RecordModuleAll_ModulesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::record::RecordModuleAll*
Arena::CreateMaybeMessage< ::record::RecordModuleAll >(Arena* arena) {
  return Arena::CreateMessageInternal< ::record::RecordModuleAll >(arena);
}
template<> PROTOBUF_NOINLINE ::record::RecordModule*
Arena::CreateMaybeMessage< ::record::RecordModule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::record::RecordModule >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
