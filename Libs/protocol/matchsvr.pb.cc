// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: matchsvr.proto

#include "matchsvr.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace inner {
PROTOBUF_CONSTEXPR InnerMatchsvr::InnerMatchsvr(
    ::_pbi::ConstantInitialized)
  : fromuser_(uint64_t{0u})
  , fromzone_(0u)
  , _oneof_case_{}{}
struct InnerMatchsvrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerMatchsvrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerMatchsvrDefaultTypeInternal() {}
  union {
    InnerMatchsvr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerMatchsvrDefaultTypeInternal _InnerMatchsvr_default_instance_;
PROTOBUF_CONSTEXPR InnerMatchsvr_Fromteam_Test::InnerMatchsvr_Fromteam_Test(
    ::_pbi::ConstantInitialized){}
struct InnerMatchsvr_Fromteam_TestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerMatchsvr_Fromteam_TestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerMatchsvr_Fromteam_TestDefaultTypeInternal() {}
  union {
    InnerMatchsvr_Fromteam_Test _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerMatchsvr_Fromteam_TestDefaultTypeInternal _InnerMatchsvr_Fromteam_Test_default_instance_;
PROTOBUF_CONSTEXPR InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse::InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUseDefaultTypeInternal _InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR InnerMatchsvr_Fromteam_StartMatch::InnerMatchsvr_Fromteam_StartMatch(
    ::_pbi::ConstantInitialized)
  : roles_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , copy_(nullptr)
  , mtype_(0u){}
struct InnerMatchsvr_Fromteam_StartMatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerMatchsvr_Fromteam_StartMatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerMatchsvr_Fromteam_StartMatchDefaultTypeInternal() {}
  union {
    InnerMatchsvr_Fromteam_StartMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerMatchsvr_Fromteam_StartMatchDefaultTypeInternal _InnerMatchsvr_Fromteam_StartMatch_default_instance_;
PROTOBUF_CONSTEXPR InnerMatchsvr_Fromteam_CancelMatch::InnerMatchsvr_Fromteam_CancelMatch(
    ::_pbi::ConstantInitialized)
  : unitid_(uint64_t{0u}){}
struct InnerMatchsvr_Fromteam_CancelMatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerMatchsvr_Fromteam_CancelMatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerMatchsvr_Fromteam_CancelMatchDefaultTypeInternal() {}
  union {
    InnerMatchsvr_Fromteam_CancelMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerMatchsvr_Fromteam_CancelMatchDefaultTypeInternal _InnerMatchsvr_Fromteam_CancelMatch_default_instance_;
PROTOBUF_CONSTEXPR InnerMatchsvr_Fromteam_ConfirmOk::InnerMatchsvr_Fromteam_ConfirmOk(
    ::_pbi::ConstantInitialized){}
struct InnerMatchsvr_Fromteam_ConfirmOkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerMatchsvr_Fromteam_ConfirmOkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerMatchsvr_Fromteam_ConfirmOkDefaultTypeInternal() {}
  union {
    InnerMatchsvr_Fromteam_ConfirmOk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerMatchsvr_Fromteam_ConfirmOkDefaultTypeInternal _InnerMatchsvr_Fromteam_ConfirmOk_default_instance_;
PROTOBUF_CONSTEXPR InnerMatchsvr_Fromteam_RefuseOk::InnerMatchsvr_Fromteam_RefuseOk(
    ::_pbi::ConstantInitialized){}
struct InnerMatchsvr_Fromteam_RefuseOkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerMatchsvr_Fromteam_RefuseOkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerMatchsvr_Fromteam_RefuseOkDefaultTypeInternal() {}
  union {
    InnerMatchsvr_Fromteam_RefuseOk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerMatchsvr_Fromteam_RefuseOkDefaultTypeInternal _InnerMatchsvr_Fromteam_RefuseOk_default_instance_;
PROTOBUF_CONSTEXPR InnerMatchsvr_Fromteam_ForceCancel::InnerMatchsvr_Fromteam_ForceCancel(
    ::_pbi::ConstantInitialized){}
struct InnerMatchsvr_Fromteam_ForceCancelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerMatchsvr_Fromteam_ForceCancelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerMatchsvr_Fromteam_ForceCancelDefaultTypeInternal() {}
  union {
    InnerMatchsvr_Fromteam_ForceCancel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerMatchsvr_Fromteam_ForceCancelDefaultTypeInternal _InnerMatchsvr_Fromteam_ForceCancel_default_instance_;
}  // namespace inner
static ::_pb::Metadata file_level_metadata_matchsvr_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_matchsvr_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_matchsvr_2eproto = nullptr;

const uint32_t TableStruct_matchsvr_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerMatchsvr, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::inner::InnerMatchsvr, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerMatchsvr, fromuser_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerMatchsvr, fromzone_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::inner::InnerMatchsvr, Fromteam_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerMatchsvr_Fromteam_Test, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerMatchsvr_Fromteam_StartMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerMatchsvr_Fromteam_StartMatch, mtype_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerMatchsvr_Fromteam_StartMatch, copy_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerMatchsvr_Fromteam_StartMatch, roles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerMatchsvr_Fromteam_CancelMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerMatchsvr_Fromteam_CancelMatch, unitid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerMatchsvr_Fromteam_ConfirmOk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerMatchsvr_Fromteam_RefuseOk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerMatchsvr_Fromteam_ForceCancel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::inner::InnerMatchsvr)},
  { 15, -1, -1, sizeof(::inner::InnerMatchsvr_Fromteam_Test)},
  { 21, 29, -1, sizeof(::inner::InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse)},
  { 31, -1, -1, sizeof(::inner::InnerMatchsvr_Fromteam_StartMatch)},
  { 40, -1, -1, sizeof(::inner::InnerMatchsvr_Fromteam_CancelMatch)},
  { 47, -1, -1, sizeof(::inner::InnerMatchsvr_Fromteam_ConfirmOk)},
  { 53, -1, -1, sizeof(::inner::InnerMatchsvr_Fromteam_RefuseOk)},
  { 59, -1, -1, sizeof(::inner::InnerMatchsvr_Fromteam_ForceCancel)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::inner::_InnerMatchsvr_default_instance_._instance,
  &::inner::_InnerMatchsvr_Fromteam_Test_default_instance_._instance,
  &::inner::_InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse_default_instance_._instance,
  &::inner::_InnerMatchsvr_Fromteam_StartMatch_default_instance_._instance,
  &::inner::_InnerMatchsvr_Fromteam_CancelMatch_default_instance_._instance,
  &::inner::_InnerMatchsvr_Fromteam_ConfirmOk_default_instance_._instance,
  &::inner::_InnerMatchsvr_Fromteam_RefuseOk_default_instance_._instance,
  &::inner::_InnerMatchsvr_Fromteam_ForceCancel_default_instance_._instance,
};

const char descriptor_table_protodef_matchsvr_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016matchsvr.proto\022\005inner\032\021innercommon.pro"
  "to\032\020innermatch.proto\"\355\003\n\rInnerMatchsvr\022\020"
  "\n\010fromuser\030\001 \001(\004\022\020\n\010fromzone\030\002 \001(\r\022<\n\rfr"
  "omteam_test\030\225\n \001(\0132\".inner.InnerMatchsvr"
  "_Fromteam_TestH\000\022H\n\023fromteam_startmatch\030"
  "\226\n \001(\0132(.inner.InnerMatchsvr_Fromteam_St"
  "artMatchH\000\022J\n\024fromteam_cancelmatch\030\227\n \001("
  "\0132).inner.InnerMatchsvr_Fromteam_CancelM"
  "atchH\000\022F\n\022fromteam_confirmok\030\230\n \001(\0132\'.in"
  "ner.InnerMatchsvr_Fromteam_ConfirmOkH\000\022D"
  "\n\021fromteam_refuseok\030\231\n \001(\0132&.inner.Inner"
  "Matchsvr_Fromteam_RefuseOkH\000\022J\n\024fromteam"
  "_forcecancel\030\232\n \001(\0132).inner.InnerMatchsv"
  "r_Fromteam_ForceCancelH\000B\n\n\010Fromteam\"\035\n\033"
  "InnerMatchsvr_Fromteam_Test\"\342\001\n!InnerMat"
  "chsvr_Fromteam_StartMatch\022\r\n\005mtype\030\001 \001(\r"
  "\022\"\n\004copy\030\004 \001(\0132\024.inner.InnerCopyType\022B\n\005"
  "roles\030\005 \003(\01323.inner.InnerMatchsvr_Fromte"
  "am_StartMatch.RolesEntry\032F\n\nRolesEntry\022\013"
  "\n\003key\030\001 \001(\004\022\'\n\005value\030\002 \001(\0132\030.inner.Inner"
  "MatchMatcher:\0028\001\"4\n\"InnerMatchsvr_Fromte"
  "am_CancelMatch\022\016\n\006unitId\030\001 \001(\004\"\"\n InnerM"
  "atchsvr_Fromteam_ConfirmOk\"!\n\037InnerMatch"
  "svr_Fromteam_RefuseOk\"$\n\"InnerMatchsvr_F"
  "romteam_ForceCancelb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_matchsvr_2eproto_deps[2] = {
  &::descriptor_table_innercommon_2eproto,
  &::descriptor_table_innermatch_2eproto,
};
static ::_pbi::once_flag descriptor_table_matchsvr_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_matchsvr_2eproto = {
    false, false, 987, descriptor_table_protodef_matchsvr_2eproto,
    "matchsvr.proto",
    &descriptor_table_matchsvr_2eproto_once, descriptor_table_matchsvr_2eproto_deps, 2, 8,
    schemas, file_default_instances, TableStruct_matchsvr_2eproto::offsets,
    file_level_metadata_matchsvr_2eproto, file_level_enum_descriptors_matchsvr_2eproto,
    file_level_service_descriptors_matchsvr_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_matchsvr_2eproto_getter() {
  return &descriptor_table_matchsvr_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_matchsvr_2eproto(&descriptor_table_matchsvr_2eproto);
namespace inner {

// ===================================================================

class InnerMatchsvr::_Internal {
 public:
  static const ::inner::InnerMatchsvr_Fromteam_Test& fromteam_test(const InnerMatchsvr* msg);
  static const ::inner::InnerMatchsvr_Fromteam_StartMatch& fromteam_startmatch(const InnerMatchsvr* msg);
  static const ::inner::InnerMatchsvr_Fromteam_CancelMatch& fromteam_cancelmatch(const InnerMatchsvr* msg);
  static const ::inner::InnerMatchsvr_Fromteam_ConfirmOk& fromteam_confirmok(const InnerMatchsvr* msg);
  static const ::inner::InnerMatchsvr_Fromteam_RefuseOk& fromteam_refuseok(const InnerMatchsvr* msg);
  static const ::inner::InnerMatchsvr_Fromteam_ForceCancel& fromteam_forcecancel(const InnerMatchsvr* msg);
};

const ::inner::InnerMatchsvr_Fromteam_Test&
InnerMatchsvr::_Internal::fromteam_test(const InnerMatchsvr* msg) {
  return *msg->Fromteam_.fromteam_test_;
}
const ::inner::InnerMatchsvr_Fromteam_StartMatch&
InnerMatchsvr::_Internal::fromteam_startmatch(const InnerMatchsvr* msg) {
  return *msg->Fromteam_.fromteam_startmatch_;
}
const ::inner::InnerMatchsvr_Fromteam_CancelMatch&
InnerMatchsvr::_Internal::fromteam_cancelmatch(const InnerMatchsvr* msg) {
  return *msg->Fromteam_.fromteam_cancelmatch_;
}
const ::inner::InnerMatchsvr_Fromteam_ConfirmOk&
InnerMatchsvr::_Internal::fromteam_confirmok(const InnerMatchsvr* msg) {
  return *msg->Fromteam_.fromteam_confirmok_;
}
const ::inner::InnerMatchsvr_Fromteam_RefuseOk&
InnerMatchsvr::_Internal::fromteam_refuseok(const InnerMatchsvr* msg) {
  return *msg->Fromteam_.fromteam_refuseok_;
}
const ::inner::InnerMatchsvr_Fromteam_ForceCancel&
InnerMatchsvr::_Internal::fromteam_forcecancel(const InnerMatchsvr* msg) {
  return *msg->Fromteam_.fromteam_forcecancel_;
}
void InnerMatchsvr::set_allocated_fromteam_test(::inner::InnerMatchsvr_Fromteam_Test* fromteam_test) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Fromteam();
  if (fromteam_test) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fromteam_test);
    if (message_arena != submessage_arena) {
      fromteam_test = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fromteam_test, submessage_arena);
    }
    set_has_fromteam_test();
    Fromteam_.fromteam_test_ = fromteam_test;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerMatchsvr.fromteam_test)
}
void InnerMatchsvr::set_allocated_fromteam_startmatch(::inner::InnerMatchsvr_Fromteam_StartMatch* fromteam_startmatch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Fromteam();
  if (fromteam_startmatch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fromteam_startmatch);
    if (message_arena != submessage_arena) {
      fromteam_startmatch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fromteam_startmatch, submessage_arena);
    }
    set_has_fromteam_startmatch();
    Fromteam_.fromteam_startmatch_ = fromteam_startmatch;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerMatchsvr.fromteam_startmatch)
}
void InnerMatchsvr::set_allocated_fromteam_cancelmatch(::inner::InnerMatchsvr_Fromteam_CancelMatch* fromteam_cancelmatch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Fromteam();
  if (fromteam_cancelmatch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fromteam_cancelmatch);
    if (message_arena != submessage_arena) {
      fromteam_cancelmatch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fromteam_cancelmatch, submessage_arena);
    }
    set_has_fromteam_cancelmatch();
    Fromteam_.fromteam_cancelmatch_ = fromteam_cancelmatch;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerMatchsvr.fromteam_cancelmatch)
}
void InnerMatchsvr::set_allocated_fromteam_confirmok(::inner::InnerMatchsvr_Fromteam_ConfirmOk* fromteam_confirmok) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Fromteam();
  if (fromteam_confirmok) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fromteam_confirmok);
    if (message_arena != submessage_arena) {
      fromteam_confirmok = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fromteam_confirmok, submessage_arena);
    }
    set_has_fromteam_confirmok();
    Fromteam_.fromteam_confirmok_ = fromteam_confirmok;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerMatchsvr.fromteam_confirmok)
}
void InnerMatchsvr::set_allocated_fromteam_refuseok(::inner::InnerMatchsvr_Fromteam_RefuseOk* fromteam_refuseok) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Fromteam();
  if (fromteam_refuseok) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fromteam_refuseok);
    if (message_arena != submessage_arena) {
      fromteam_refuseok = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fromteam_refuseok, submessage_arena);
    }
    set_has_fromteam_refuseok();
    Fromteam_.fromteam_refuseok_ = fromteam_refuseok;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerMatchsvr.fromteam_refuseok)
}
void InnerMatchsvr::set_allocated_fromteam_forcecancel(::inner::InnerMatchsvr_Fromteam_ForceCancel* fromteam_forcecancel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Fromteam();
  if (fromteam_forcecancel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fromteam_forcecancel);
    if (message_arena != submessage_arena) {
      fromteam_forcecancel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fromteam_forcecancel, submessage_arena);
    }
    set_has_fromteam_forcecancel();
    Fromteam_.fromteam_forcecancel_ = fromteam_forcecancel;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerMatchsvr.fromteam_forcecancel)
}
InnerMatchsvr::InnerMatchsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerMatchsvr)
}
InnerMatchsvr::InnerMatchsvr(const InnerMatchsvr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fromuser_, &from.fromuser_,
    static_cast<size_t>(reinterpret_cast<char*>(&fromzone_) -
    reinterpret_cast<char*>(&fromuser_)) + sizeof(fromzone_));
  clear_has_Fromteam();
  switch (from.Fromteam_case()) {
    case kFromteamTest: {
      _internal_mutable_fromteam_test()->::inner::InnerMatchsvr_Fromteam_Test::MergeFrom(from._internal_fromteam_test());
      break;
    }
    case kFromteamStartmatch: {
      _internal_mutable_fromteam_startmatch()->::inner::InnerMatchsvr_Fromteam_StartMatch::MergeFrom(from._internal_fromteam_startmatch());
      break;
    }
    case kFromteamCancelmatch: {
      _internal_mutable_fromteam_cancelmatch()->::inner::InnerMatchsvr_Fromteam_CancelMatch::MergeFrom(from._internal_fromteam_cancelmatch());
      break;
    }
    case kFromteamConfirmok: {
      _internal_mutable_fromteam_confirmok()->::inner::InnerMatchsvr_Fromteam_ConfirmOk::MergeFrom(from._internal_fromteam_confirmok());
      break;
    }
    case kFromteamRefuseok: {
      _internal_mutable_fromteam_refuseok()->::inner::InnerMatchsvr_Fromteam_RefuseOk::MergeFrom(from._internal_fromteam_refuseok());
      break;
    }
    case kFromteamForcecancel: {
      _internal_mutable_fromteam_forcecancel()->::inner::InnerMatchsvr_Fromteam_ForceCancel::MergeFrom(from._internal_fromteam_forcecancel());
      break;
    }
    case FROMTEAM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:inner.InnerMatchsvr)
}

inline void InnerMatchsvr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fromuser_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fromzone_) -
    reinterpret_cast<char*>(&fromuser_)) + sizeof(fromzone_));
clear_has_Fromteam();
}

InnerMatchsvr::~InnerMatchsvr() {
  // @@protoc_insertion_point(destructor:inner.InnerMatchsvr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerMatchsvr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Fromteam()) {
    clear_Fromteam();
  }
}

void InnerMatchsvr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerMatchsvr::clear_Fromteam() {
// @@protoc_insertion_point(one_of_clear_start:inner.InnerMatchsvr)
  switch (Fromteam_case()) {
    case kFromteamTest: {
      if (GetArenaForAllocation() == nullptr) {
        delete Fromteam_.fromteam_test_;
      }
      break;
    }
    case kFromteamStartmatch: {
      if (GetArenaForAllocation() == nullptr) {
        delete Fromteam_.fromteam_startmatch_;
      }
      break;
    }
    case kFromteamCancelmatch: {
      if (GetArenaForAllocation() == nullptr) {
        delete Fromteam_.fromteam_cancelmatch_;
      }
      break;
    }
    case kFromteamConfirmok: {
      if (GetArenaForAllocation() == nullptr) {
        delete Fromteam_.fromteam_confirmok_;
      }
      break;
    }
    case kFromteamRefuseok: {
      if (GetArenaForAllocation() == nullptr) {
        delete Fromteam_.fromteam_refuseok_;
      }
      break;
    }
    case kFromteamForcecancel: {
      if (GetArenaForAllocation() == nullptr) {
        delete Fromteam_.fromteam_forcecancel_;
      }
      break;
    }
    case FROMTEAM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FROMTEAM_NOT_SET;
}


void InnerMatchsvr::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerMatchsvr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fromuser_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fromzone_) -
      reinterpret_cast<char*>(&fromuser_)) + sizeof(fromzone_));
  clear_Fromteam();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerMatchsvr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 fromuser = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          fromuser_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 fromzone = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          fromzone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerMatchsvr_Fromteam_Test fromteam_test = 1301;
      case 1301:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_fromteam_test(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerMatchsvr_Fromteam_StartMatch fromteam_startmatch = 1302;
      case 1302:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_fromteam_startmatch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerMatchsvr_Fromteam_CancelMatch fromteam_cancelmatch = 1303;
      case 1303:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_fromteam_cancelmatch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerMatchsvr_Fromteam_ConfirmOk fromteam_confirmok = 1304;
      case 1304:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_fromteam_confirmok(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerMatchsvr_Fromteam_RefuseOk fromteam_refuseok = 1305;
      case 1305:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_fromteam_refuseok(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerMatchsvr_Fromteam_ForceCancel fromteam_forcecancel = 1306;
      case 1306:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_fromteam_forcecancel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerMatchsvr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerMatchsvr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 fromuser = 1;
  if (this->_internal_fromuser() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_fromuser(), target);
  }

  // uint32 fromzone = 2;
  if (this->_internal_fromzone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_fromzone(), target);
  }

  // .inner.InnerMatchsvr_Fromteam_Test fromteam_test = 1301;
  if (_internal_has_fromteam_test()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1301, _Internal::fromteam_test(this),
        _Internal::fromteam_test(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerMatchsvr_Fromteam_StartMatch fromteam_startmatch = 1302;
  if (_internal_has_fromteam_startmatch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1302, _Internal::fromteam_startmatch(this),
        _Internal::fromteam_startmatch(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerMatchsvr_Fromteam_CancelMatch fromteam_cancelmatch = 1303;
  if (_internal_has_fromteam_cancelmatch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1303, _Internal::fromteam_cancelmatch(this),
        _Internal::fromteam_cancelmatch(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerMatchsvr_Fromteam_ConfirmOk fromteam_confirmok = 1304;
  if (_internal_has_fromteam_confirmok()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1304, _Internal::fromteam_confirmok(this),
        _Internal::fromteam_confirmok(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerMatchsvr_Fromteam_RefuseOk fromteam_refuseok = 1305;
  if (_internal_has_fromteam_refuseok()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1305, _Internal::fromteam_refuseok(this),
        _Internal::fromteam_refuseok(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerMatchsvr_Fromteam_ForceCancel fromteam_forcecancel = 1306;
  if (_internal_has_fromteam_forcecancel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1306, _Internal::fromteam_forcecancel(this),
        _Internal::fromteam_forcecancel(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerMatchsvr)
  return target;
}

size_t InnerMatchsvr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerMatchsvr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 fromuser = 1;
  if (this->_internal_fromuser() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_fromuser());
  }

  // uint32 fromzone = 2;
  if (this->_internal_fromzone() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fromzone());
  }

  switch (Fromteam_case()) {
    // .inner.InnerMatchsvr_Fromteam_Test fromteam_test = 1301;
    case kFromteamTest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Fromteam_.fromteam_test_);
      break;
    }
    // .inner.InnerMatchsvr_Fromteam_StartMatch fromteam_startmatch = 1302;
    case kFromteamStartmatch: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Fromteam_.fromteam_startmatch_);
      break;
    }
    // .inner.InnerMatchsvr_Fromteam_CancelMatch fromteam_cancelmatch = 1303;
    case kFromteamCancelmatch: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Fromteam_.fromteam_cancelmatch_);
      break;
    }
    // .inner.InnerMatchsvr_Fromteam_ConfirmOk fromteam_confirmok = 1304;
    case kFromteamConfirmok: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Fromteam_.fromteam_confirmok_);
      break;
    }
    // .inner.InnerMatchsvr_Fromteam_RefuseOk fromteam_refuseok = 1305;
    case kFromteamRefuseok: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Fromteam_.fromteam_refuseok_);
      break;
    }
    // .inner.InnerMatchsvr_Fromteam_ForceCancel fromteam_forcecancel = 1306;
    case kFromteamForcecancel: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Fromteam_.fromteam_forcecancel_);
      break;
    }
    case FROMTEAM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerMatchsvr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerMatchsvr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerMatchsvr::GetClassData() const { return &_class_data_; }

void InnerMatchsvr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerMatchsvr *>(to)->MergeFrom(
      static_cast<const InnerMatchsvr &>(from));
}


void InnerMatchsvr::MergeFrom(const InnerMatchsvr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerMatchsvr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fromuser() != 0) {
    _internal_set_fromuser(from._internal_fromuser());
  }
  if (from._internal_fromzone() != 0) {
    _internal_set_fromzone(from._internal_fromzone());
  }
  switch (from.Fromteam_case()) {
    case kFromteamTest: {
      _internal_mutable_fromteam_test()->::inner::InnerMatchsvr_Fromteam_Test::MergeFrom(from._internal_fromteam_test());
      break;
    }
    case kFromteamStartmatch: {
      _internal_mutable_fromteam_startmatch()->::inner::InnerMatchsvr_Fromteam_StartMatch::MergeFrom(from._internal_fromteam_startmatch());
      break;
    }
    case kFromteamCancelmatch: {
      _internal_mutable_fromteam_cancelmatch()->::inner::InnerMatchsvr_Fromteam_CancelMatch::MergeFrom(from._internal_fromteam_cancelmatch());
      break;
    }
    case kFromteamConfirmok: {
      _internal_mutable_fromteam_confirmok()->::inner::InnerMatchsvr_Fromteam_ConfirmOk::MergeFrom(from._internal_fromteam_confirmok());
      break;
    }
    case kFromteamRefuseok: {
      _internal_mutable_fromteam_refuseok()->::inner::InnerMatchsvr_Fromteam_RefuseOk::MergeFrom(from._internal_fromteam_refuseok());
      break;
    }
    case kFromteamForcecancel: {
      _internal_mutable_fromteam_forcecancel()->::inner::InnerMatchsvr_Fromteam_ForceCancel::MergeFrom(from._internal_fromteam_forcecancel());
      break;
    }
    case FROMTEAM_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerMatchsvr::CopyFrom(const InnerMatchsvr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerMatchsvr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerMatchsvr::IsInitialized() const {
  return true;
}

void InnerMatchsvr::InternalSwap(InnerMatchsvr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InnerMatchsvr, fromzone_)
      + sizeof(InnerMatchsvr::fromzone_)
      - PROTOBUF_FIELD_OFFSET(InnerMatchsvr, fromuser_)>(
          reinterpret_cast<char*>(&fromuser_),
          reinterpret_cast<char*>(&other->fromuser_));
  swap(Fromteam_, other->Fromteam_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerMatchsvr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_matchsvr_2eproto_getter, &descriptor_table_matchsvr_2eproto_once,
      file_level_metadata_matchsvr_2eproto[0]);
}

// ===================================================================

class InnerMatchsvr_Fromteam_Test::_Internal {
 public:
};

InnerMatchsvr_Fromteam_Test::InnerMatchsvr_Fromteam_Test(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:inner.InnerMatchsvr_Fromteam_Test)
}
InnerMatchsvr_Fromteam_Test::InnerMatchsvr_Fromteam_Test(const InnerMatchsvr_Fromteam_Test& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inner.InnerMatchsvr_Fromteam_Test)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerMatchsvr_Fromteam_Test::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerMatchsvr_Fromteam_Test::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata InnerMatchsvr_Fromteam_Test::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_matchsvr_2eproto_getter, &descriptor_table_matchsvr_2eproto_once,
      file_level_metadata_matchsvr_2eproto[1]);
}

// ===================================================================

InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse::InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse() {}
InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse::InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse::MergeFrom(const InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_matchsvr_2eproto_getter, &descriptor_table_matchsvr_2eproto_once,
      file_level_metadata_matchsvr_2eproto[2]);
}

// ===================================================================

class InnerMatchsvr_Fromteam_StartMatch::_Internal {
 public:
  static const ::inner::InnerCopyType& copy(const InnerMatchsvr_Fromteam_StartMatch* msg);
};

const ::inner::InnerCopyType&
InnerMatchsvr_Fromteam_StartMatch::_Internal::copy(const InnerMatchsvr_Fromteam_StartMatch* msg) {
  return *msg->copy_;
}
void InnerMatchsvr_Fromteam_StartMatch::clear_copy() {
  if (GetArenaForAllocation() == nullptr && copy_ != nullptr) {
    delete copy_;
  }
  copy_ = nullptr;
}
void InnerMatchsvr_Fromteam_StartMatch::clear_roles() {
  roles_.Clear();
}
InnerMatchsvr_Fromteam_StartMatch::InnerMatchsvr_Fromteam_StartMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  roles_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &InnerMatchsvr_Fromteam_StartMatch::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:inner.InnerMatchsvr_Fromteam_StartMatch)
}
InnerMatchsvr_Fromteam_StartMatch::InnerMatchsvr_Fromteam_StartMatch(const InnerMatchsvr_Fromteam_StartMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roles_.MergeFrom(from.roles_);
  if (from._internal_has_copy()) {
    copy_ = new ::inner::InnerCopyType(*from.copy_);
  } else {
    copy_ = nullptr;
  }
  mtype_ = from.mtype_;
  // @@protoc_insertion_point(copy_constructor:inner.InnerMatchsvr_Fromteam_StartMatch)
}

inline void InnerMatchsvr_Fromteam_StartMatch::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&copy_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mtype_) -
    reinterpret_cast<char*>(&copy_)) + sizeof(mtype_));
}

InnerMatchsvr_Fromteam_StartMatch::~InnerMatchsvr_Fromteam_StartMatch() {
  // @@protoc_insertion_point(destructor:inner.InnerMatchsvr_Fromteam_StartMatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void InnerMatchsvr_Fromteam_StartMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  roles_.Destruct();
  if (this != internal_default_instance()) delete copy_;
}

void InnerMatchsvr_Fromteam_StartMatch::ArenaDtor(void* object) {
  InnerMatchsvr_Fromteam_StartMatch* _this = reinterpret_cast< InnerMatchsvr_Fromteam_StartMatch* >(object);
  _this->roles_.Destruct();
}
void InnerMatchsvr_Fromteam_StartMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerMatchsvr_Fromteam_StartMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerMatchsvr_Fromteam_StartMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  if (GetArenaForAllocation() == nullptr && copy_ != nullptr) {
    delete copy_;
  }
  copy_ = nullptr;
  mtype_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerMatchsvr_Fromteam_StartMatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 mtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          mtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerCopyType copy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_copy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint64, .inner.InnerMatchMatcher> roles = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&roles_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerMatchsvr_Fromteam_StartMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerMatchsvr_Fromteam_StartMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mtype = 1;
  if (this->_internal_mtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mtype(), target);
  }

  // .inner.InnerCopyType copy = 4;
  if (this->_internal_has_copy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::copy(this),
        _Internal::copy(this).GetCachedSize(), target, stream);
  }

  // map<uint64, .inner.InnerMatchMatcher> roles = 5;
  if (!this->_internal_roles().empty()) {
    using MapType = ::_pb::Map<uint64_t, ::inner::InnerMatchMatcher>;
    using WireHelper = InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_roles();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerMatchsvr_Fromteam_StartMatch)
  return target;
}

size_t InnerMatchsvr_Fromteam_StartMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerMatchsvr_Fromteam_StartMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, .inner.InnerMatchMatcher> roles = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_roles_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchMatcher >::const_iterator
      it = this->_internal_roles().begin();
      it != this->_internal_roles().end(); ++it) {
    total_size += InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .inner.InnerCopyType copy = 4;
  if (this->_internal_has_copy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *copy_);
  }

  // uint32 mtype = 1;
  if (this->_internal_mtype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerMatchsvr_Fromteam_StartMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerMatchsvr_Fromteam_StartMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerMatchsvr_Fromteam_StartMatch::GetClassData() const { return &_class_data_; }

void InnerMatchsvr_Fromteam_StartMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerMatchsvr_Fromteam_StartMatch *>(to)->MergeFrom(
      static_cast<const InnerMatchsvr_Fromteam_StartMatch &>(from));
}


void InnerMatchsvr_Fromteam_StartMatch::MergeFrom(const InnerMatchsvr_Fromteam_StartMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerMatchsvr_Fromteam_StartMatch)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  if (from._internal_has_copy()) {
    _internal_mutable_copy()->::inner::InnerCopyType::MergeFrom(from._internal_copy());
  }
  if (from._internal_mtype() != 0) {
    _internal_set_mtype(from._internal_mtype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerMatchsvr_Fromteam_StartMatch::CopyFrom(const InnerMatchsvr_Fromteam_StartMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerMatchsvr_Fromteam_StartMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerMatchsvr_Fromteam_StartMatch::IsInitialized() const {
  return true;
}

void InnerMatchsvr_Fromteam_StartMatch::InternalSwap(InnerMatchsvr_Fromteam_StartMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  roles_.InternalSwap(&other->roles_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InnerMatchsvr_Fromteam_StartMatch, mtype_)
      + sizeof(InnerMatchsvr_Fromteam_StartMatch::mtype_)
      - PROTOBUF_FIELD_OFFSET(InnerMatchsvr_Fromteam_StartMatch, copy_)>(
          reinterpret_cast<char*>(&copy_),
          reinterpret_cast<char*>(&other->copy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerMatchsvr_Fromteam_StartMatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_matchsvr_2eproto_getter, &descriptor_table_matchsvr_2eproto_once,
      file_level_metadata_matchsvr_2eproto[3]);
}

// ===================================================================

class InnerMatchsvr_Fromteam_CancelMatch::_Internal {
 public:
};

InnerMatchsvr_Fromteam_CancelMatch::InnerMatchsvr_Fromteam_CancelMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerMatchsvr_Fromteam_CancelMatch)
}
InnerMatchsvr_Fromteam_CancelMatch::InnerMatchsvr_Fromteam_CancelMatch(const InnerMatchsvr_Fromteam_CancelMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unitid_ = from.unitid_;
  // @@protoc_insertion_point(copy_constructor:inner.InnerMatchsvr_Fromteam_CancelMatch)
}

inline void InnerMatchsvr_Fromteam_CancelMatch::SharedCtor() {
unitid_ = uint64_t{0u};
}

InnerMatchsvr_Fromteam_CancelMatch::~InnerMatchsvr_Fromteam_CancelMatch() {
  // @@protoc_insertion_point(destructor:inner.InnerMatchsvr_Fromteam_CancelMatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerMatchsvr_Fromteam_CancelMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InnerMatchsvr_Fromteam_CancelMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerMatchsvr_Fromteam_CancelMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerMatchsvr_Fromteam_CancelMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unitid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerMatchsvr_Fromteam_CancelMatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 unitId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          unitid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerMatchsvr_Fromteam_CancelMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerMatchsvr_Fromteam_CancelMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 unitId = 1;
  if (this->_internal_unitid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_unitid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerMatchsvr_Fromteam_CancelMatch)
  return target;
}

size_t InnerMatchsvr_Fromteam_CancelMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerMatchsvr_Fromteam_CancelMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 unitId = 1;
  if (this->_internal_unitid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_unitid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerMatchsvr_Fromteam_CancelMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerMatchsvr_Fromteam_CancelMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerMatchsvr_Fromteam_CancelMatch::GetClassData() const { return &_class_data_; }

void InnerMatchsvr_Fromteam_CancelMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerMatchsvr_Fromteam_CancelMatch *>(to)->MergeFrom(
      static_cast<const InnerMatchsvr_Fromteam_CancelMatch &>(from));
}


void InnerMatchsvr_Fromteam_CancelMatch::MergeFrom(const InnerMatchsvr_Fromteam_CancelMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerMatchsvr_Fromteam_CancelMatch)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_unitid() != 0) {
    _internal_set_unitid(from._internal_unitid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerMatchsvr_Fromteam_CancelMatch::CopyFrom(const InnerMatchsvr_Fromteam_CancelMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerMatchsvr_Fromteam_CancelMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerMatchsvr_Fromteam_CancelMatch::IsInitialized() const {
  return true;
}

void InnerMatchsvr_Fromteam_CancelMatch::InternalSwap(InnerMatchsvr_Fromteam_CancelMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(unitid_, other->unitid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerMatchsvr_Fromteam_CancelMatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_matchsvr_2eproto_getter, &descriptor_table_matchsvr_2eproto_once,
      file_level_metadata_matchsvr_2eproto[4]);
}

// ===================================================================

class InnerMatchsvr_Fromteam_ConfirmOk::_Internal {
 public:
};

InnerMatchsvr_Fromteam_ConfirmOk::InnerMatchsvr_Fromteam_ConfirmOk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:inner.InnerMatchsvr_Fromteam_ConfirmOk)
}
InnerMatchsvr_Fromteam_ConfirmOk::InnerMatchsvr_Fromteam_ConfirmOk(const InnerMatchsvr_Fromteam_ConfirmOk& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inner.InnerMatchsvr_Fromteam_ConfirmOk)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerMatchsvr_Fromteam_ConfirmOk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerMatchsvr_Fromteam_ConfirmOk::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata InnerMatchsvr_Fromteam_ConfirmOk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_matchsvr_2eproto_getter, &descriptor_table_matchsvr_2eproto_once,
      file_level_metadata_matchsvr_2eproto[5]);
}

// ===================================================================

class InnerMatchsvr_Fromteam_RefuseOk::_Internal {
 public:
};

InnerMatchsvr_Fromteam_RefuseOk::InnerMatchsvr_Fromteam_RefuseOk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:inner.InnerMatchsvr_Fromteam_RefuseOk)
}
InnerMatchsvr_Fromteam_RefuseOk::InnerMatchsvr_Fromteam_RefuseOk(const InnerMatchsvr_Fromteam_RefuseOk& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inner.InnerMatchsvr_Fromteam_RefuseOk)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerMatchsvr_Fromteam_RefuseOk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerMatchsvr_Fromteam_RefuseOk::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata InnerMatchsvr_Fromteam_RefuseOk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_matchsvr_2eproto_getter, &descriptor_table_matchsvr_2eproto_once,
      file_level_metadata_matchsvr_2eproto[6]);
}

// ===================================================================

class InnerMatchsvr_Fromteam_ForceCancel::_Internal {
 public:
};

InnerMatchsvr_Fromteam_ForceCancel::InnerMatchsvr_Fromteam_ForceCancel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:inner.InnerMatchsvr_Fromteam_ForceCancel)
}
InnerMatchsvr_Fromteam_ForceCancel::InnerMatchsvr_Fromteam_ForceCancel(const InnerMatchsvr_Fromteam_ForceCancel& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inner.InnerMatchsvr_Fromteam_ForceCancel)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerMatchsvr_Fromteam_ForceCancel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerMatchsvr_Fromteam_ForceCancel::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata InnerMatchsvr_Fromteam_ForceCancel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_matchsvr_2eproto_getter, &descriptor_table_matchsvr_2eproto_once,
      file_level_metadata_matchsvr_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace inner
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::inner::InnerMatchsvr*
Arena::CreateMaybeMessage< ::inner::InnerMatchsvr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerMatchsvr >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerMatchsvr_Fromteam_Test*
Arena::CreateMaybeMessage< ::inner::InnerMatchsvr_Fromteam_Test >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerMatchsvr_Fromteam_Test >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::inner::InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerMatchsvr_Fromteam_StartMatch*
Arena::CreateMaybeMessage< ::inner::InnerMatchsvr_Fromteam_StartMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerMatchsvr_Fromteam_StartMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerMatchsvr_Fromteam_CancelMatch*
Arena::CreateMaybeMessage< ::inner::InnerMatchsvr_Fromteam_CancelMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerMatchsvr_Fromteam_CancelMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerMatchsvr_Fromteam_ConfirmOk*
Arena::CreateMaybeMessage< ::inner::InnerMatchsvr_Fromteam_ConfirmOk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerMatchsvr_Fromteam_ConfirmOk >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerMatchsvr_Fromteam_RefuseOk*
Arena::CreateMaybeMessage< ::inner::InnerMatchsvr_Fromteam_RefuseOk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerMatchsvr_Fromteam_RefuseOk >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerMatchsvr_Fromteam_ForceCancel*
Arena::CreateMaybeMessage< ::inner::InnerMatchsvr_Fromteam_ForceCancel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerMatchsvr_Fromteam_ForceCancel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
