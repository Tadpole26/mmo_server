// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: itemcommon.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_itemcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_itemcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_itemcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_itemcommon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_itemcommon_2eproto;
namespace common {
class Item;
struct ItemDefaultTypeInternal;
extern ItemDefaultTypeInternal _Item_default_instance_;
class ItemBase;
struct ItemBaseDefaultTypeInternal;
extern ItemBaseDefaultTypeInternal _ItemBase_default_instance_;
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> ::common::Item* Arena::CreateMaybeMessage<::common::Item>(Arena*);
template<> ::common::ItemBase* Arena::CreateMaybeMessage<::common::ItemBase>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace common {

// ===================================================================

class ItemBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ItemBase) */ {
 public:
  inline ItemBase() : ItemBase(nullptr) {}
  ~ItemBase() override;
  explicit PROTOBUF_CONSTEXPR ItemBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ItemBase(const ItemBase& from);
  ItemBase(ItemBase&& from) noexcept
    : ItemBase() {
    *this = ::std::move(from);
  }

  inline ItemBase& operator=(const ItemBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemBase& operator=(ItemBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ItemBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const ItemBase* internal_default_instance() {
    return reinterpret_cast<const ItemBase*>(
               &_ItemBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ItemBase& a, ItemBase& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ItemBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ItemBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ItemBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ItemBase& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ItemBase";
  }
  protected:
  explicit ItemBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUiUidFieldNumber = 1,
    kUiTidFieldNumber = 2,
    kUiCountFieldNumber = 3,
    kUiBindFieldNumber = 4,
    kUiExpireFieldNumber = 5,
    kUiQualityFieldNumber = 6,
    kUiTradeExpireFieldNumber = 7,
    kUiPriceFieldNumber = 8,
    kBNotSortedFieldNumber = 9,
  };
  // uint32 uiUid = 1;
  void clear_uiuid();
  uint32_t uiuid() const;
  void set_uiuid(uint32_t value);
  private:
  uint32_t _internal_uiuid() const;
  void _internal_set_uiuid(uint32_t value);
  public:

  // uint32 uiTid = 2;
  void clear_uitid();
  uint32_t uitid() const;
  void set_uitid(uint32_t value);
  private:
  uint32_t _internal_uitid() const;
  void _internal_set_uitid(uint32_t value);
  public:

  // uint32 uiCount = 3;
  void clear_uicount();
  uint32_t uicount() const;
  void set_uicount(uint32_t value);
  private:
  uint32_t _internal_uicount() const;
  void _internal_set_uicount(uint32_t value);
  public:

  // uint32 uiBind = 4;
  void clear_uibind();
  uint32_t uibind() const;
  void set_uibind(uint32_t value);
  private:
  uint32_t _internal_uibind() const;
  void _internal_set_uibind(uint32_t value);
  public:

  // uint32 uiExpire = 5;
  void clear_uiexpire();
  uint32_t uiexpire() const;
  void set_uiexpire(uint32_t value);
  private:
  uint32_t _internal_uiexpire() const;
  void _internal_set_uiexpire(uint32_t value);
  public:

  // uint32 uiQuality = 6;
  void clear_uiquality();
  uint32_t uiquality() const;
  void set_uiquality(uint32_t value);
  private:
  uint32_t _internal_uiquality() const;
  void _internal_set_uiquality(uint32_t value);
  public:

  // uint32 uiTradeExpire = 7;
  void clear_uitradeexpire();
  uint32_t uitradeexpire() const;
  void set_uitradeexpire(uint32_t value);
  private:
  uint32_t _internal_uitradeexpire() const;
  void _internal_set_uitradeexpire(uint32_t value);
  public:

  // uint32 uiPrice = 8;
  void clear_uiprice();
  uint32_t uiprice() const;
  void set_uiprice(uint32_t value);
  private:
  uint32_t _internal_uiprice() const;
  void _internal_set_uiprice(uint32_t value);
  public:

  // bool bNotSorted = 9;
  void clear_bnotsorted();
  bool bnotsorted() const;
  void set_bnotsorted(bool value);
  private:
  bool _internal_bnotsorted() const;
  void _internal_set_bnotsorted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:common.ItemBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t uiuid_;
  uint32_t uitid_;
  uint32_t uicount_;
  uint32_t uibind_;
  uint32_t uiexpire_;
  uint32_t uiquality_;
  uint32_t uitradeexpire_;
  uint32_t uiprice_;
  bool bnotsorted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_itemcommon_2eproto;
};
// -------------------------------------------------------------------

class Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.Item) */ {
 public:
  inline Item() : Item(nullptr) {}
  ~Item() override;
  explicit PROTOBUF_CONSTEXPR Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Item(const Item& from);
  Item(Item&& from) noexcept
    : Item() {
    *this = ::std::move(from);
  }

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline Item& operator=(Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const Item* internal_default_instance() {
    return reinterpret_cast<const Item*>(
               &_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Item& a, Item& b) {
    a.Swap(&b);
  }
  inline void Swap(Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Item& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.Item";
  }
  protected:
  explicit Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOBaseFieldNumber = 1,
  };
  // .common.ItemBase oBase = 1;
  bool has_obase() const;
  private:
  bool _internal_has_obase() const;
  public:
  void clear_obase();
  const ::common::ItemBase& obase() const;
  PROTOBUF_NODISCARD ::common::ItemBase* release_obase();
  ::common::ItemBase* mutable_obase();
  void set_allocated_obase(::common::ItemBase* obase);
  private:
  const ::common::ItemBase& _internal_obase() const;
  ::common::ItemBase* _internal_mutable_obase();
  public:
  void unsafe_arena_set_allocated_obase(
      ::common::ItemBase* obase);
  ::common::ItemBase* unsafe_arena_release_obase();

  // @@protoc_insertion_point(class_scope:common.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::ItemBase* obase_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_itemcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ItemBase

// uint32 uiUid = 1;
inline void ItemBase::clear_uiuid() {
  uiuid_ = 0u;
}
inline uint32_t ItemBase::_internal_uiuid() const {
  return uiuid_;
}
inline uint32_t ItemBase::uiuid() const {
  // @@protoc_insertion_point(field_get:common.ItemBase.uiUid)
  return _internal_uiuid();
}
inline void ItemBase::_internal_set_uiuid(uint32_t value) {
  
  uiuid_ = value;
}
inline void ItemBase::set_uiuid(uint32_t value) {
  _internal_set_uiuid(value);
  // @@protoc_insertion_point(field_set:common.ItemBase.uiUid)
}

// uint32 uiTid = 2;
inline void ItemBase::clear_uitid() {
  uitid_ = 0u;
}
inline uint32_t ItemBase::_internal_uitid() const {
  return uitid_;
}
inline uint32_t ItemBase::uitid() const {
  // @@protoc_insertion_point(field_get:common.ItemBase.uiTid)
  return _internal_uitid();
}
inline void ItemBase::_internal_set_uitid(uint32_t value) {
  
  uitid_ = value;
}
inline void ItemBase::set_uitid(uint32_t value) {
  _internal_set_uitid(value);
  // @@protoc_insertion_point(field_set:common.ItemBase.uiTid)
}

// uint32 uiCount = 3;
inline void ItemBase::clear_uicount() {
  uicount_ = 0u;
}
inline uint32_t ItemBase::_internal_uicount() const {
  return uicount_;
}
inline uint32_t ItemBase::uicount() const {
  // @@protoc_insertion_point(field_get:common.ItemBase.uiCount)
  return _internal_uicount();
}
inline void ItemBase::_internal_set_uicount(uint32_t value) {
  
  uicount_ = value;
}
inline void ItemBase::set_uicount(uint32_t value) {
  _internal_set_uicount(value);
  // @@protoc_insertion_point(field_set:common.ItemBase.uiCount)
}

// uint32 uiBind = 4;
inline void ItemBase::clear_uibind() {
  uibind_ = 0u;
}
inline uint32_t ItemBase::_internal_uibind() const {
  return uibind_;
}
inline uint32_t ItemBase::uibind() const {
  // @@protoc_insertion_point(field_get:common.ItemBase.uiBind)
  return _internal_uibind();
}
inline void ItemBase::_internal_set_uibind(uint32_t value) {
  
  uibind_ = value;
}
inline void ItemBase::set_uibind(uint32_t value) {
  _internal_set_uibind(value);
  // @@protoc_insertion_point(field_set:common.ItemBase.uiBind)
}

// uint32 uiExpire = 5;
inline void ItemBase::clear_uiexpire() {
  uiexpire_ = 0u;
}
inline uint32_t ItemBase::_internal_uiexpire() const {
  return uiexpire_;
}
inline uint32_t ItemBase::uiexpire() const {
  // @@protoc_insertion_point(field_get:common.ItemBase.uiExpire)
  return _internal_uiexpire();
}
inline void ItemBase::_internal_set_uiexpire(uint32_t value) {
  
  uiexpire_ = value;
}
inline void ItemBase::set_uiexpire(uint32_t value) {
  _internal_set_uiexpire(value);
  // @@protoc_insertion_point(field_set:common.ItemBase.uiExpire)
}

// uint32 uiQuality = 6;
inline void ItemBase::clear_uiquality() {
  uiquality_ = 0u;
}
inline uint32_t ItemBase::_internal_uiquality() const {
  return uiquality_;
}
inline uint32_t ItemBase::uiquality() const {
  // @@protoc_insertion_point(field_get:common.ItemBase.uiQuality)
  return _internal_uiquality();
}
inline void ItemBase::_internal_set_uiquality(uint32_t value) {
  
  uiquality_ = value;
}
inline void ItemBase::set_uiquality(uint32_t value) {
  _internal_set_uiquality(value);
  // @@protoc_insertion_point(field_set:common.ItemBase.uiQuality)
}

// uint32 uiTradeExpire = 7;
inline void ItemBase::clear_uitradeexpire() {
  uitradeexpire_ = 0u;
}
inline uint32_t ItemBase::_internal_uitradeexpire() const {
  return uitradeexpire_;
}
inline uint32_t ItemBase::uitradeexpire() const {
  // @@protoc_insertion_point(field_get:common.ItemBase.uiTradeExpire)
  return _internal_uitradeexpire();
}
inline void ItemBase::_internal_set_uitradeexpire(uint32_t value) {
  
  uitradeexpire_ = value;
}
inline void ItemBase::set_uitradeexpire(uint32_t value) {
  _internal_set_uitradeexpire(value);
  // @@protoc_insertion_point(field_set:common.ItemBase.uiTradeExpire)
}

// uint32 uiPrice = 8;
inline void ItemBase::clear_uiprice() {
  uiprice_ = 0u;
}
inline uint32_t ItemBase::_internal_uiprice() const {
  return uiprice_;
}
inline uint32_t ItemBase::uiprice() const {
  // @@protoc_insertion_point(field_get:common.ItemBase.uiPrice)
  return _internal_uiprice();
}
inline void ItemBase::_internal_set_uiprice(uint32_t value) {
  
  uiprice_ = value;
}
inline void ItemBase::set_uiprice(uint32_t value) {
  _internal_set_uiprice(value);
  // @@protoc_insertion_point(field_set:common.ItemBase.uiPrice)
}

// bool bNotSorted = 9;
inline void ItemBase::clear_bnotsorted() {
  bnotsorted_ = false;
}
inline bool ItemBase::_internal_bnotsorted() const {
  return bnotsorted_;
}
inline bool ItemBase::bnotsorted() const {
  // @@protoc_insertion_point(field_get:common.ItemBase.bNotSorted)
  return _internal_bnotsorted();
}
inline void ItemBase::_internal_set_bnotsorted(bool value) {
  
  bnotsorted_ = value;
}
inline void ItemBase::set_bnotsorted(bool value) {
  _internal_set_bnotsorted(value);
  // @@protoc_insertion_point(field_set:common.ItemBase.bNotSorted)
}

// -------------------------------------------------------------------

// Item

// .common.ItemBase oBase = 1;
inline bool Item::_internal_has_obase() const {
  return this != internal_default_instance() && obase_ != nullptr;
}
inline bool Item::has_obase() const {
  return _internal_has_obase();
}
inline void Item::clear_obase() {
  if (GetArenaForAllocation() == nullptr && obase_ != nullptr) {
    delete obase_;
  }
  obase_ = nullptr;
}
inline const ::common::ItemBase& Item::_internal_obase() const {
  const ::common::ItemBase* p = obase_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ItemBase&>(
      ::common::_ItemBase_default_instance_);
}
inline const ::common::ItemBase& Item::obase() const {
  // @@protoc_insertion_point(field_get:common.Item.oBase)
  return _internal_obase();
}
inline void Item::unsafe_arena_set_allocated_obase(
    ::common::ItemBase* obase) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obase_);
  }
  obase_ = obase;
  if (obase) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.Item.oBase)
}
inline ::common::ItemBase* Item::release_obase() {
  
  ::common::ItemBase* temp = obase_;
  obase_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ItemBase* Item::unsafe_arena_release_obase() {
  // @@protoc_insertion_point(field_release:common.Item.oBase)
  
  ::common::ItemBase* temp = obase_;
  obase_ = nullptr;
  return temp;
}
inline ::common::ItemBase* Item::_internal_mutable_obase() {
  
  if (obase_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ItemBase>(GetArenaForAllocation());
    obase_ = p;
  }
  return obase_;
}
inline ::common::ItemBase* Item::mutable_obase() {
  ::common::ItemBase* _msg = _internal_mutable_obase();
  // @@protoc_insertion_point(field_mutable:common.Item.oBase)
  return _msg;
}
inline void Item::set_allocated_obase(::common::ItemBase* obase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete obase_;
  }
  if (obase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(obase);
    if (message_arena != submessage_arena) {
      obase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obase, submessage_arena);
    }
    
  } else {
    
  }
  obase_ = obase;
  // @@protoc_insertion_point(field_set_allocated:common.Item.oBase)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_itemcommon_2eproto
