// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: matchsvr.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_matchsvr_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_matchsvr_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "innercommon.pb.h"
#include "innermatch.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_matchsvr_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_matchsvr_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_matchsvr_2eproto;
namespace inner {
class InnerMatchsvr;
struct InnerMatchsvrDefaultTypeInternal;
extern InnerMatchsvrDefaultTypeInternal _InnerMatchsvr_default_instance_;
class InnerMatchsvr_Fromteam_CancelMatch;
struct InnerMatchsvr_Fromteam_CancelMatchDefaultTypeInternal;
extern InnerMatchsvr_Fromteam_CancelMatchDefaultTypeInternal _InnerMatchsvr_Fromteam_CancelMatch_default_instance_;
class InnerMatchsvr_Fromteam_ConfirmOk;
struct InnerMatchsvr_Fromteam_ConfirmOkDefaultTypeInternal;
extern InnerMatchsvr_Fromteam_ConfirmOkDefaultTypeInternal _InnerMatchsvr_Fromteam_ConfirmOk_default_instance_;
class InnerMatchsvr_Fromteam_ForceCancel;
struct InnerMatchsvr_Fromteam_ForceCancelDefaultTypeInternal;
extern InnerMatchsvr_Fromteam_ForceCancelDefaultTypeInternal _InnerMatchsvr_Fromteam_ForceCancel_default_instance_;
class InnerMatchsvr_Fromteam_RefuseOk;
struct InnerMatchsvr_Fromteam_RefuseOkDefaultTypeInternal;
extern InnerMatchsvr_Fromteam_RefuseOkDefaultTypeInternal _InnerMatchsvr_Fromteam_RefuseOk_default_instance_;
class InnerMatchsvr_Fromteam_StartMatch;
struct InnerMatchsvr_Fromteam_StartMatchDefaultTypeInternal;
extern InnerMatchsvr_Fromteam_StartMatchDefaultTypeInternal _InnerMatchsvr_Fromteam_StartMatch_default_instance_;
class InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse;
struct InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUseDefaultTypeInternal;
extern InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUseDefaultTypeInternal _InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse_default_instance_;
class InnerMatchsvr_Fromteam_Test;
struct InnerMatchsvr_Fromteam_TestDefaultTypeInternal;
extern InnerMatchsvr_Fromteam_TestDefaultTypeInternal _InnerMatchsvr_Fromteam_Test_default_instance_;
}  // namespace inner
PROTOBUF_NAMESPACE_OPEN
template<> ::inner::InnerMatchsvr* Arena::CreateMaybeMessage<::inner::InnerMatchsvr>(Arena*);
template<> ::inner::InnerMatchsvr_Fromteam_CancelMatch* Arena::CreateMaybeMessage<::inner::InnerMatchsvr_Fromteam_CancelMatch>(Arena*);
template<> ::inner::InnerMatchsvr_Fromteam_ConfirmOk* Arena::CreateMaybeMessage<::inner::InnerMatchsvr_Fromteam_ConfirmOk>(Arena*);
template<> ::inner::InnerMatchsvr_Fromteam_ForceCancel* Arena::CreateMaybeMessage<::inner::InnerMatchsvr_Fromteam_ForceCancel>(Arena*);
template<> ::inner::InnerMatchsvr_Fromteam_RefuseOk* Arena::CreateMaybeMessage<::inner::InnerMatchsvr_Fromteam_RefuseOk>(Arena*);
template<> ::inner::InnerMatchsvr_Fromteam_StartMatch* Arena::CreateMaybeMessage<::inner::InnerMatchsvr_Fromteam_StartMatch>(Arena*);
template<> ::inner::InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse* Arena::CreateMaybeMessage<::inner::InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse>(Arena*);
template<> ::inner::InnerMatchsvr_Fromteam_Test* Arena::CreateMaybeMessage<::inner::InnerMatchsvr_Fromteam_Test>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inner {

// ===================================================================

class InnerMatchsvr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerMatchsvr) */ {
 public:
  inline InnerMatchsvr() : InnerMatchsvr(nullptr) {}
  ~InnerMatchsvr() override;
  explicit PROTOBUF_CONSTEXPR InnerMatchsvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerMatchsvr(const InnerMatchsvr& from);
  InnerMatchsvr(InnerMatchsvr&& from) noexcept
    : InnerMatchsvr() {
    *this = ::std::move(from);
  }

  inline InnerMatchsvr& operator=(const InnerMatchsvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerMatchsvr& operator=(InnerMatchsvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerMatchsvr& default_instance() {
    return *internal_default_instance();
  }
  enum FromteamCase {
    kFromteamTest = 1301,
    kFromteamStartmatch = 1302,
    kFromteamCancelmatch = 1303,
    kFromteamConfirmok = 1304,
    kFromteamRefuseok = 1305,
    kFromteamForcecancel = 1306,
    FROMTEAM_NOT_SET = 0,
  };

  static inline const InnerMatchsvr* internal_default_instance() {
    return reinterpret_cast<const InnerMatchsvr*>(
               &_InnerMatchsvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InnerMatchsvr& a, InnerMatchsvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerMatchsvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerMatchsvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerMatchsvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerMatchsvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerMatchsvr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerMatchsvr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerMatchsvr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerMatchsvr";
  }
  protected:
  explicit InnerMatchsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromuserFieldNumber = 1,
    kFromzoneFieldNumber = 2,
    kFromteamTestFieldNumber = 1301,
    kFromteamStartmatchFieldNumber = 1302,
    kFromteamCancelmatchFieldNumber = 1303,
    kFromteamConfirmokFieldNumber = 1304,
    kFromteamRefuseokFieldNumber = 1305,
    kFromteamForcecancelFieldNumber = 1306,
  };
  // uint64 fromuser = 1;
  void clear_fromuser();
  uint64_t fromuser() const;
  void set_fromuser(uint64_t value);
  private:
  uint64_t _internal_fromuser() const;
  void _internal_set_fromuser(uint64_t value);
  public:

  // uint32 fromzone = 2;
  void clear_fromzone();
  uint32_t fromzone() const;
  void set_fromzone(uint32_t value);
  private:
  uint32_t _internal_fromzone() const;
  void _internal_set_fromzone(uint32_t value);
  public:

  // .inner.InnerMatchsvr_Fromteam_Test fromteam_test = 1301;
  bool has_fromteam_test() const;
  private:
  bool _internal_has_fromteam_test() const;
  public:
  void clear_fromteam_test();
  const ::inner::InnerMatchsvr_Fromteam_Test& fromteam_test() const;
  PROTOBUF_NODISCARD ::inner::InnerMatchsvr_Fromteam_Test* release_fromteam_test();
  ::inner::InnerMatchsvr_Fromteam_Test* mutable_fromteam_test();
  void set_allocated_fromteam_test(::inner::InnerMatchsvr_Fromteam_Test* fromteam_test);
  private:
  const ::inner::InnerMatchsvr_Fromteam_Test& _internal_fromteam_test() const;
  ::inner::InnerMatchsvr_Fromteam_Test* _internal_mutable_fromteam_test();
  public:
  void unsafe_arena_set_allocated_fromteam_test(
      ::inner::InnerMatchsvr_Fromteam_Test* fromteam_test);
  ::inner::InnerMatchsvr_Fromteam_Test* unsafe_arena_release_fromteam_test();

  // .inner.InnerMatchsvr_Fromteam_StartMatch fromteam_startmatch = 1302;
  bool has_fromteam_startmatch() const;
  private:
  bool _internal_has_fromteam_startmatch() const;
  public:
  void clear_fromteam_startmatch();
  const ::inner::InnerMatchsvr_Fromteam_StartMatch& fromteam_startmatch() const;
  PROTOBUF_NODISCARD ::inner::InnerMatchsvr_Fromteam_StartMatch* release_fromteam_startmatch();
  ::inner::InnerMatchsvr_Fromteam_StartMatch* mutable_fromteam_startmatch();
  void set_allocated_fromteam_startmatch(::inner::InnerMatchsvr_Fromteam_StartMatch* fromteam_startmatch);
  private:
  const ::inner::InnerMatchsvr_Fromteam_StartMatch& _internal_fromteam_startmatch() const;
  ::inner::InnerMatchsvr_Fromteam_StartMatch* _internal_mutable_fromteam_startmatch();
  public:
  void unsafe_arena_set_allocated_fromteam_startmatch(
      ::inner::InnerMatchsvr_Fromteam_StartMatch* fromteam_startmatch);
  ::inner::InnerMatchsvr_Fromteam_StartMatch* unsafe_arena_release_fromteam_startmatch();

  // .inner.InnerMatchsvr_Fromteam_CancelMatch fromteam_cancelmatch = 1303;
  bool has_fromteam_cancelmatch() const;
  private:
  bool _internal_has_fromteam_cancelmatch() const;
  public:
  void clear_fromteam_cancelmatch();
  const ::inner::InnerMatchsvr_Fromteam_CancelMatch& fromteam_cancelmatch() const;
  PROTOBUF_NODISCARD ::inner::InnerMatchsvr_Fromteam_CancelMatch* release_fromteam_cancelmatch();
  ::inner::InnerMatchsvr_Fromteam_CancelMatch* mutable_fromteam_cancelmatch();
  void set_allocated_fromteam_cancelmatch(::inner::InnerMatchsvr_Fromteam_CancelMatch* fromteam_cancelmatch);
  private:
  const ::inner::InnerMatchsvr_Fromteam_CancelMatch& _internal_fromteam_cancelmatch() const;
  ::inner::InnerMatchsvr_Fromteam_CancelMatch* _internal_mutable_fromteam_cancelmatch();
  public:
  void unsafe_arena_set_allocated_fromteam_cancelmatch(
      ::inner::InnerMatchsvr_Fromteam_CancelMatch* fromteam_cancelmatch);
  ::inner::InnerMatchsvr_Fromteam_CancelMatch* unsafe_arena_release_fromteam_cancelmatch();

  // .inner.InnerMatchsvr_Fromteam_ConfirmOk fromteam_confirmok = 1304;
  bool has_fromteam_confirmok() const;
  private:
  bool _internal_has_fromteam_confirmok() const;
  public:
  void clear_fromteam_confirmok();
  const ::inner::InnerMatchsvr_Fromteam_ConfirmOk& fromteam_confirmok() const;
  PROTOBUF_NODISCARD ::inner::InnerMatchsvr_Fromteam_ConfirmOk* release_fromteam_confirmok();
  ::inner::InnerMatchsvr_Fromteam_ConfirmOk* mutable_fromteam_confirmok();
  void set_allocated_fromteam_confirmok(::inner::InnerMatchsvr_Fromteam_ConfirmOk* fromteam_confirmok);
  private:
  const ::inner::InnerMatchsvr_Fromteam_ConfirmOk& _internal_fromteam_confirmok() const;
  ::inner::InnerMatchsvr_Fromteam_ConfirmOk* _internal_mutable_fromteam_confirmok();
  public:
  void unsafe_arena_set_allocated_fromteam_confirmok(
      ::inner::InnerMatchsvr_Fromteam_ConfirmOk* fromteam_confirmok);
  ::inner::InnerMatchsvr_Fromteam_ConfirmOk* unsafe_arena_release_fromteam_confirmok();

  // .inner.InnerMatchsvr_Fromteam_RefuseOk fromteam_refuseok = 1305;
  bool has_fromteam_refuseok() const;
  private:
  bool _internal_has_fromteam_refuseok() const;
  public:
  void clear_fromteam_refuseok();
  const ::inner::InnerMatchsvr_Fromteam_RefuseOk& fromteam_refuseok() const;
  PROTOBUF_NODISCARD ::inner::InnerMatchsvr_Fromteam_RefuseOk* release_fromteam_refuseok();
  ::inner::InnerMatchsvr_Fromteam_RefuseOk* mutable_fromteam_refuseok();
  void set_allocated_fromteam_refuseok(::inner::InnerMatchsvr_Fromteam_RefuseOk* fromteam_refuseok);
  private:
  const ::inner::InnerMatchsvr_Fromteam_RefuseOk& _internal_fromteam_refuseok() const;
  ::inner::InnerMatchsvr_Fromteam_RefuseOk* _internal_mutable_fromteam_refuseok();
  public:
  void unsafe_arena_set_allocated_fromteam_refuseok(
      ::inner::InnerMatchsvr_Fromteam_RefuseOk* fromteam_refuseok);
  ::inner::InnerMatchsvr_Fromteam_RefuseOk* unsafe_arena_release_fromteam_refuseok();

  // .inner.InnerMatchsvr_Fromteam_ForceCancel fromteam_forcecancel = 1306;
  bool has_fromteam_forcecancel() const;
  private:
  bool _internal_has_fromteam_forcecancel() const;
  public:
  void clear_fromteam_forcecancel();
  const ::inner::InnerMatchsvr_Fromteam_ForceCancel& fromteam_forcecancel() const;
  PROTOBUF_NODISCARD ::inner::InnerMatchsvr_Fromteam_ForceCancel* release_fromteam_forcecancel();
  ::inner::InnerMatchsvr_Fromteam_ForceCancel* mutable_fromteam_forcecancel();
  void set_allocated_fromteam_forcecancel(::inner::InnerMatchsvr_Fromteam_ForceCancel* fromteam_forcecancel);
  private:
  const ::inner::InnerMatchsvr_Fromteam_ForceCancel& _internal_fromteam_forcecancel() const;
  ::inner::InnerMatchsvr_Fromteam_ForceCancel* _internal_mutable_fromteam_forcecancel();
  public:
  void unsafe_arena_set_allocated_fromteam_forcecancel(
      ::inner::InnerMatchsvr_Fromteam_ForceCancel* fromteam_forcecancel);
  ::inner::InnerMatchsvr_Fromteam_ForceCancel* unsafe_arena_release_fromteam_forcecancel();

  void clear_Fromteam();
  FromteamCase Fromteam_case() const;
  // @@protoc_insertion_point(class_scope:inner.InnerMatchsvr)
 private:
  class _Internal;
  void set_has_fromteam_test();
  void set_has_fromteam_startmatch();
  void set_has_fromteam_cancelmatch();
  void set_has_fromteam_confirmok();
  void set_has_fromteam_refuseok();
  void set_has_fromteam_forcecancel();

  inline bool has_Fromteam() const;
  inline void clear_has_Fromteam();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t fromuser_;
  uint32_t fromzone_;
  union FromteamUnion {
    constexpr FromteamUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::inner::InnerMatchsvr_Fromteam_Test* fromteam_test_;
    ::inner::InnerMatchsvr_Fromteam_StartMatch* fromteam_startmatch_;
    ::inner::InnerMatchsvr_Fromteam_CancelMatch* fromteam_cancelmatch_;
    ::inner::InnerMatchsvr_Fromteam_ConfirmOk* fromteam_confirmok_;
    ::inner::InnerMatchsvr_Fromteam_RefuseOk* fromteam_refuseok_;
    ::inner::InnerMatchsvr_Fromteam_ForceCancel* fromteam_forcecancel_;
  } Fromteam_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_matchsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerMatchsvr_Fromteam_Test final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerMatchsvr_Fromteam_Test) */ {
 public:
  inline InnerMatchsvr_Fromteam_Test() : InnerMatchsvr_Fromteam_Test(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerMatchsvr_Fromteam_Test(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerMatchsvr_Fromteam_Test(const InnerMatchsvr_Fromteam_Test& from);
  InnerMatchsvr_Fromteam_Test(InnerMatchsvr_Fromteam_Test&& from) noexcept
    : InnerMatchsvr_Fromteam_Test() {
    *this = ::std::move(from);
  }

  inline InnerMatchsvr_Fromteam_Test& operator=(const InnerMatchsvr_Fromteam_Test& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerMatchsvr_Fromteam_Test& operator=(InnerMatchsvr_Fromteam_Test&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerMatchsvr_Fromteam_Test& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerMatchsvr_Fromteam_Test* internal_default_instance() {
    return reinterpret_cast<const InnerMatchsvr_Fromteam_Test*>(
               &_InnerMatchsvr_Fromteam_Test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InnerMatchsvr_Fromteam_Test& a, InnerMatchsvr_Fromteam_Test& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerMatchsvr_Fromteam_Test* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerMatchsvr_Fromteam_Test* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerMatchsvr_Fromteam_Test* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerMatchsvr_Fromteam_Test>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerMatchsvr_Fromteam_Test& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerMatchsvr_Fromteam_Test& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerMatchsvr_Fromteam_Test";
  }
  protected:
  explicit InnerMatchsvr_Fromteam_Test(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerMatchsvr_Fromteam_Test)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_matchsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse, 
    uint64_t, ::inner::InnerMatchMatcher,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse, 
    uint64_t, ::inner::InnerMatchMatcher,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse& other);
  static const InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse*>(&_InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_matchsvr_2eproto;
};

// -------------------------------------------------------------------

class InnerMatchsvr_Fromteam_StartMatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerMatchsvr_Fromteam_StartMatch) */ {
 public:
  inline InnerMatchsvr_Fromteam_StartMatch() : InnerMatchsvr_Fromteam_StartMatch(nullptr) {}
  ~InnerMatchsvr_Fromteam_StartMatch() override;
  explicit PROTOBUF_CONSTEXPR InnerMatchsvr_Fromteam_StartMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerMatchsvr_Fromteam_StartMatch(const InnerMatchsvr_Fromteam_StartMatch& from);
  InnerMatchsvr_Fromteam_StartMatch(InnerMatchsvr_Fromteam_StartMatch&& from) noexcept
    : InnerMatchsvr_Fromteam_StartMatch() {
    *this = ::std::move(from);
  }

  inline InnerMatchsvr_Fromteam_StartMatch& operator=(const InnerMatchsvr_Fromteam_StartMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerMatchsvr_Fromteam_StartMatch& operator=(InnerMatchsvr_Fromteam_StartMatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerMatchsvr_Fromteam_StartMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerMatchsvr_Fromteam_StartMatch* internal_default_instance() {
    return reinterpret_cast<const InnerMatchsvr_Fromteam_StartMatch*>(
               &_InnerMatchsvr_Fromteam_StartMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InnerMatchsvr_Fromteam_StartMatch& a, InnerMatchsvr_Fromteam_StartMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerMatchsvr_Fromteam_StartMatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerMatchsvr_Fromteam_StartMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerMatchsvr_Fromteam_StartMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerMatchsvr_Fromteam_StartMatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerMatchsvr_Fromteam_StartMatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerMatchsvr_Fromteam_StartMatch& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerMatchsvr_Fromteam_StartMatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerMatchsvr_Fromteam_StartMatch";
  }
  protected:
  explicit InnerMatchsvr_Fromteam_StartMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 5,
    kCopyFieldNumber = 4,
    kMtypeFieldNumber = 1,
  };
  // map<uint64, .inner.InnerMatchMatcher> roles = 5;
  int roles_size() const;
  private:
  int _internal_roles_size() const;
  public:
  void clear_roles();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchMatcher >&
      _internal_roles() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchMatcher >*
      _internal_mutable_roles();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchMatcher >&
      roles() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchMatcher >*
      mutable_roles();

  // .inner.InnerCopyType copy = 4;
  bool has_copy() const;
  private:
  bool _internal_has_copy() const;
  public:
  void clear_copy();
  const ::inner::InnerCopyType& copy() const;
  PROTOBUF_NODISCARD ::inner::InnerCopyType* release_copy();
  ::inner::InnerCopyType* mutable_copy();
  void set_allocated_copy(::inner::InnerCopyType* copy);
  private:
  const ::inner::InnerCopyType& _internal_copy() const;
  ::inner::InnerCopyType* _internal_mutable_copy();
  public:
  void unsafe_arena_set_allocated_copy(
      ::inner::InnerCopyType* copy);
  ::inner::InnerCopyType* unsafe_arena_release_copy();

  // uint32 mtype = 1;
  void clear_mtype();
  uint32_t mtype() const;
  void set_mtype(uint32_t value);
  private:
  uint32_t _internal_mtype() const;
  void _internal_set_mtype(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerMatchsvr_Fromteam_StartMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      InnerMatchsvr_Fromteam_StartMatch_RolesEntry_DoNotUse,
      uint64_t, ::inner::InnerMatchMatcher,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> roles_;
  ::inner::InnerCopyType* copy_;
  uint32_t mtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_matchsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerMatchsvr_Fromteam_CancelMatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerMatchsvr_Fromteam_CancelMatch) */ {
 public:
  inline InnerMatchsvr_Fromteam_CancelMatch() : InnerMatchsvr_Fromteam_CancelMatch(nullptr) {}
  ~InnerMatchsvr_Fromteam_CancelMatch() override;
  explicit PROTOBUF_CONSTEXPR InnerMatchsvr_Fromteam_CancelMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerMatchsvr_Fromteam_CancelMatch(const InnerMatchsvr_Fromteam_CancelMatch& from);
  InnerMatchsvr_Fromteam_CancelMatch(InnerMatchsvr_Fromteam_CancelMatch&& from) noexcept
    : InnerMatchsvr_Fromteam_CancelMatch() {
    *this = ::std::move(from);
  }

  inline InnerMatchsvr_Fromteam_CancelMatch& operator=(const InnerMatchsvr_Fromteam_CancelMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerMatchsvr_Fromteam_CancelMatch& operator=(InnerMatchsvr_Fromteam_CancelMatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerMatchsvr_Fromteam_CancelMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerMatchsvr_Fromteam_CancelMatch* internal_default_instance() {
    return reinterpret_cast<const InnerMatchsvr_Fromteam_CancelMatch*>(
               &_InnerMatchsvr_Fromteam_CancelMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InnerMatchsvr_Fromteam_CancelMatch& a, InnerMatchsvr_Fromteam_CancelMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerMatchsvr_Fromteam_CancelMatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerMatchsvr_Fromteam_CancelMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerMatchsvr_Fromteam_CancelMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerMatchsvr_Fromteam_CancelMatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerMatchsvr_Fromteam_CancelMatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerMatchsvr_Fromteam_CancelMatch& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerMatchsvr_Fromteam_CancelMatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerMatchsvr_Fromteam_CancelMatch";
  }
  protected:
  explicit InnerMatchsvr_Fromteam_CancelMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitIdFieldNumber = 1,
  };
  // uint64 unitId = 1;
  void clear_unitid();
  uint64_t unitid() const;
  void set_unitid(uint64_t value);
  private:
  uint64_t _internal_unitid() const;
  void _internal_set_unitid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerMatchsvr_Fromteam_CancelMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t unitid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_matchsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerMatchsvr_Fromteam_ConfirmOk final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerMatchsvr_Fromteam_ConfirmOk) */ {
 public:
  inline InnerMatchsvr_Fromteam_ConfirmOk() : InnerMatchsvr_Fromteam_ConfirmOk(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerMatchsvr_Fromteam_ConfirmOk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerMatchsvr_Fromteam_ConfirmOk(const InnerMatchsvr_Fromteam_ConfirmOk& from);
  InnerMatchsvr_Fromteam_ConfirmOk(InnerMatchsvr_Fromteam_ConfirmOk&& from) noexcept
    : InnerMatchsvr_Fromteam_ConfirmOk() {
    *this = ::std::move(from);
  }

  inline InnerMatchsvr_Fromteam_ConfirmOk& operator=(const InnerMatchsvr_Fromteam_ConfirmOk& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerMatchsvr_Fromteam_ConfirmOk& operator=(InnerMatchsvr_Fromteam_ConfirmOk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerMatchsvr_Fromteam_ConfirmOk& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerMatchsvr_Fromteam_ConfirmOk* internal_default_instance() {
    return reinterpret_cast<const InnerMatchsvr_Fromteam_ConfirmOk*>(
               &_InnerMatchsvr_Fromteam_ConfirmOk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InnerMatchsvr_Fromteam_ConfirmOk& a, InnerMatchsvr_Fromteam_ConfirmOk& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerMatchsvr_Fromteam_ConfirmOk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerMatchsvr_Fromteam_ConfirmOk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerMatchsvr_Fromteam_ConfirmOk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerMatchsvr_Fromteam_ConfirmOk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerMatchsvr_Fromteam_ConfirmOk& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerMatchsvr_Fromteam_ConfirmOk& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerMatchsvr_Fromteam_ConfirmOk";
  }
  protected:
  explicit InnerMatchsvr_Fromteam_ConfirmOk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerMatchsvr_Fromteam_ConfirmOk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_matchsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerMatchsvr_Fromteam_RefuseOk final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerMatchsvr_Fromteam_RefuseOk) */ {
 public:
  inline InnerMatchsvr_Fromteam_RefuseOk() : InnerMatchsvr_Fromteam_RefuseOk(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerMatchsvr_Fromteam_RefuseOk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerMatchsvr_Fromteam_RefuseOk(const InnerMatchsvr_Fromteam_RefuseOk& from);
  InnerMatchsvr_Fromteam_RefuseOk(InnerMatchsvr_Fromteam_RefuseOk&& from) noexcept
    : InnerMatchsvr_Fromteam_RefuseOk() {
    *this = ::std::move(from);
  }

  inline InnerMatchsvr_Fromteam_RefuseOk& operator=(const InnerMatchsvr_Fromteam_RefuseOk& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerMatchsvr_Fromteam_RefuseOk& operator=(InnerMatchsvr_Fromteam_RefuseOk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerMatchsvr_Fromteam_RefuseOk& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerMatchsvr_Fromteam_RefuseOk* internal_default_instance() {
    return reinterpret_cast<const InnerMatchsvr_Fromteam_RefuseOk*>(
               &_InnerMatchsvr_Fromteam_RefuseOk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(InnerMatchsvr_Fromteam_RefuseOk& a, InnerMatchsvr_Fromteam_RefuseOk& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerMatchsvr_Fromteam_RefuseOk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerMatchsvr_Fromteam_RefuseOk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerMatchsvr_Fromteam_RefuseOk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerMatchsvr_Fromteam_RefuseOk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerMatchsvr_Fromteam_RefuseOk& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerMatchsvr_Fromteam_RefuseOk& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerMatchsvr_Fromteam_RefuseOk";
  }
  protected:
  explicit InnerMatchsvr_Fromteam_RefuseOk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerMatchsvr_Fromteam_RefuseOk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_matchsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerMatchsvr_Fromteam_ForceCancel final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerMatchsvr_Fromteam_ForceCancel) */ {
 public:
  inline InnerMatchsvr_Fromteam_ForceCancel() : InnerMatchsvr_Fromteam_ForceCancel(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerMatchsvr_Fromteam_ForceCancel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerMatchsvr_Fromteam_ForceCancel(const InnerMatchsvr_Fromteam_ForceCancel& from);
  InnerMatchsvr_Fromteam_ForceCancel(InnerMatchsvr_Fromteam_ForceCancel&& from) noexcept
    : InnerMatchsvr_Fromteam_ForceCancel() {
    *this = ::std::move(from);
  }

  inline InnerMatchsvr_Fromteam_ForceCancel& operator=(const InnerMatchsvr_Fromteam_ForceCancel& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerMatchsvr_Fromteam_ForceCancel& operator=(InnerMatchsvr_Fromteam_ForceCancel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerMatchsvr_Fromteam_ForceCancel& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerMatchsvr_Fromteam_ForceCancel* internal_default_instance() {
    return reinterpret_cast<const InnerMatchsvr_Fromteam_ForceCancel*>(
               &_InnerMatchsvr_Fromteam_ForceCancel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(InnerMatchsvr_Fromteam_ForceCancel& a, InnerMatchsvr_Fromteam_ForceCancel& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerMatchsvr_Fromteam_ForceCancel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerMatchsvr_Fromteam_ForceCancel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerMatchsvr_Fromteam_ForceCancel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerMatchsvr_Fromteam_ForceCancel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerMatchsvr_Fromteam_ForceCancel& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerMatchsvr_Fromteam_ForceCancel& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerMatchsvr_Fromteam_ForceCancel";
  }
  protected:
  explicit InnerMatchsvr_Fromteam_ForceCancel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerMatchsvr_Fromteam_ForceCancel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_matchsvr_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InnerMatchsvr

// uint64 fromuser = 1;
inline void InnerMatchsvr::clear_fromuser() {
  fromuser_ = uint64_t{0u};
}
inline uint64_t InnerMatchsvr::_internal_fromuser() const {
  return fromuser_;
}
inline uint64_t InnerMatchsvr::fromuser() const {
  // @@protoc_insertion_point(field_get:inner.InnerMatchsvr.fromuser)
  return _internal_fromuser();
}
inline void InnerMatchsvr::_internal_set_fromuser(uint64_t value) {
  
  fromuser_ = value;
}
inline void InnerMatchsvr::set_fromuser(uint64_t value) {
  _internal_set_fromuser(value);
  // @@protoc_insertion_point(field_set:inner.InnerMatchsvr.fromuser)
}

// uint32 fromzone = 2;
inline void InnerMatchsvr::clear_fromzone() {
  fromzone_ = 0u;
}
inline uint32_t InnerMatchsvr::_internal_fromzone() const {
  return fromzone_;
}
inline uint32_t InnerMatchsvr::fromzone() const {
  // @@protoc_insertion_point(field_get:inner.InnerMatchsvr.fromzone)
  return _internal_fromzone();
}
inline void InnerMatchsvr::_internal_set_fromzone(uint32_t value) {
  
  fromzone_ = value;
}
inline void InnerMatchsvr::set_fromzone(uint32_t value) {
  _internal_set_fromzone(value);
  // @@protoc_insertion_point(field_set:inner.InnerMatchsvr.fromzone)
}

// .inner.InnerMatchsvr_Fromteam_Test fromteam_test = 1301;
inline bool InnerMatchsvr::_internal_has_fromteam_test() const {
  return Fromteam_case() == kFromteamTest;
}
inline bool InnerMatchsvr::has_fromteam_test() const {
  return _internal_has_fromteam_test();
}
inline void InnerMatchsvr::set_has_fromteam_test() {
  _oneof_case_[0] = kFromteamTest;
}
inline void InnerMatchsvr::clear_fromteam_test() {
  if (_internal_has_fromteam_test()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromteam_.fromteam_test_;
    }
    clear_has_Fromteam();
  }
}
inline ::inner::InnerMatchsvr_Fromteam_Test* InnerMatchsvr::release_fromteam_test() {
  // @@protoc_insertion_point(field_release:inner.InnerMatchsvr.fromteam_test)
  if (_internal_has_fromteam_test()) {
    clear_has_Fromteam();
    ::inner::InnerMatchsvr_Fromteam_Test* temp = Fromteam_.fromteam_test_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromteam_.fromteam_test_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerMatchsvr_Fromteam_Test& InnerMatchsvr::_internal_fromteam_test() const {
  return _internal_has_fromteam_test()
      ? *Fromteam_.fromteam_test_
      : reinterpret_cast< ::inner::InnerMatchsvr_Fromteam_Test&>(::inner::_InnerMatchsvr_Fromteam_Test_default_instance_);
}
inline const ::inner::InnerMatchsvr_Fromteam_Test& InnerMatchsvr::fromteam_test() const {
  // @@protoc_insertion_point(field_get:inner.InnerMatchsvr.fromteam_test)
  return _internal_fromteam_test();
}
inline ::inner::InnerMatchsvr_Fromteam_Test* InnerMatchsvr::unsafe_arena_release_fromteam_test() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerMatchsvr.fromteam_test)
  if (_internal_has_fromteam_test()) {
    clear_has_Fromteam();
    ::inner::InnerMatchsvr_Fromteam_Test* temp = Fromteam_.fromteam_test_;
    Fromteam_.fromteam_test_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerMatchsvr::unsafe_arena_set_allocated_fromteam_test(::inner::InnerMatchsvr_Fromteam_Test* fromteam_test) {
  clear_Fromteam();
  if (fromteam_test) {
    set_has_fromteam_test();
    Fromteam_.fromteam_test_ = fromteam_test;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerMatchsvr.fromteam_test)
}
inline ::inner::InnerMatchsvr_Fromteam_Test* InnerMatchsvr::_internal_mutable_fromteam_test() {
  if (!_internal_has_fromteam_test()) {
    clear_Fromteam();
    set_has_fromteam_test();
    Fromteam_.fromteam_test_ = CreateMaybeMessage< ::inner::InnerMatchsvr_Fromteam_Test >(GetArenaForAllocation());
  }
  return Fromteam_.fromteam_test_;
}
inline ::inner::InnerMatchsvr_Fromteam_Test* InnerMatchsvr::mutable_fromteam_test() {
  ::inner::InnerMatchsvr_Fromteam_Test* _msg = _internal_mutable_fromteam_test();
  // @@protoc_insertion_point(field_mutable:inner.InnerMatchsvr.fromteam_test)
  return _msg;
}

// .inner.InnerMatchsvr_Fromteam_StartMatch fromteam_startmatch = 1302;
inline bool InnerMatchsvr::_internal_has_fromteam_startmatch() const {
  return Fromteam_case() == kFromteamStartmatch;
}
inline bool InnerMatchsvr::has_fromteam_startmatch() const {
  return _internal_has_fromteam_startmatch();
}
inline void InnerMatchsvr::set_has_fromteam_startmatch() {
  _oneof_case_[0] = kFromteamStartmatch;
}
inline void InnerMatchsvr::clear_fromteam_startmatch() {
  if (_internal_has_fromteam_startmatch()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromteam_.fromteam_startmatch_;
    }
    clear_has_Fromteam();
  }
}
inline ::inner::InnerMatchsvr_Fromteam_StartMatch* InnerMatchsvr::release_fromteam_startmatch() {
  // @@protoc_insertion_point(field_release:inner.InnerMatchsvr.fromteam_startmatch)
  if (_internal_has_fromteam_startmatch()) {
    clear_has_Fromteam();
    ::inner::InnerMatchsvr_Fromteam_StartMatch* temp = Fromteam_.fromteam_startmatch_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromteam_.fromteam_startmatch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerMatchsvr_Fromteam_StartMatch& InnerMatchsvr::_internal_fromteam_startmatch() const {
  return _internal_has_fromteam_startmatch()
      ? *Fromteam_.fromteam_startmatch_
      : reinterpret_cast< ::inner::InnerMatchsvr_Fromteam_StartMatch&>(::inner::_InnerMatchsvr_Fromteam_StartMatch_default_instance_);
}
inline const ::inner::InnerMatchsvr_Fromteam_StartMatch& InnerMatchsvr::fromteam_startmatch() const {
  // @@protoc_insertion_point(field_get:inner.InnerMatchsvr.fromteam_startmatch)
  return _internal_fromteam_startmatch();
}
inline ::inner::InnerMatchsvr_Fromteam_StartMatch* InnerMatchsvr::unsafe_arena_release_fromteam_startmatch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerMatchsvr.fromteam_startmatch)
  if (_internal_has_fromteam_startmatch()) {
    clear_has_Fromteam();
    ::inner::InnerMatchsvr_Fromteam_StartMatch* temp = Fromteam_.fromteam_startmatch_;
    Fromteam_.fromteam_startmatch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerMatchsvr::unsafe_arena_set_allocated_fromteam_startmatch(::inner::InnerMatchsvr_Fromteam_StartMatch* fromteam_startmatch) {
  clear_Fromteam();
  if (fromteam_startmatch) {
    set_has_fromteam_startmatch();
    Fromteam_.fromteam_startmatch_ = fromteam_startmatch;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerMatchsvr.fromteam_startmatch)
}
inline ::inner::InnerMatchsvr_Fromteam_StartMatch* InnerMatchsvr::_internal_mutable_fromteam_startmatch() {
  if (!_internal_has_fromteam_startmatch()) {
    clear_Fromteam();
    set_has_fromteam_startmatch();
    Fromteam_.fromteam_startmatch_ = CreateMaybeMessage< ::inner::InnerMatchsvr_Fromteam_StartMatch >(GetArenaForAllocation());
  }
  return Fromteam_.fromteam_startmatch_;
}
inline ::inner::InnerMatchsvr_Fromteam_StartMatch* InnerMatchsvr::mutable_fromteam_startmatch() {
  ::inner::InnerMatchsvr_Fromteam_StartMatch* _msg = _internal_mutable_fromteam_startmatch();
  // @@protoc_insertion_point(field_mutable:inner.InnerMatchsvr.fromteam_startmatch)
  return _msg;
}

// .inner.InnerMatchsvr_Fromteam_CancelMatch fromteam_cancelmatch = 1303;
inline bool InnerMatchsvr::_internal_has_fromteam_cancelmatch() const {
  return Fromteam_case() == kFromteamCancelmatch;
}
inline bool InnerMatchsvr::has_fromteam_cancelmatch() const {
  return _internal_has_fromteam_cancelmatch();
}
inline void InnerMatchsvr::set_has_fromteam_cancelmatch() {
  _oneof_case_[0] = kFromteamCancelmatch;
}
inline void InnerMatchsvr::clear_fromteam_cancelmatch() {
  if (_internal_has_fromteam_cancelmatch()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromteam_.fromteam_cancelmatch_;
    }
    clear_has_Fromteam();
  }
}
inline ::inner::InnerMatchsvr_Fromteam_CancelMatch* InnerMatchsvr::release_fromteam_cancelmatch() {
  // @@protoc_insertion_point(field_release:inner.InnerMatchsvr.fromteam_cancelmatch)
  if (_internal_has_fromteam_cancelmatch()) {
    clear_has_Fromteam();
    ::inner::InnerMatchsvr_Fromteam_CancelMatch* temp = Fromteam_.fromteam_cancelmatch_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromteam_.fromteam_cancelmatch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerMatchsvr_Fromteam_CancelMatch& InnerMatchsvr::_internal_fromteam_cancelmatch() const {
  return _internal_has_fromteam_cancelmatch()
      ? *Fromteam_.fromteam_cancelmatch_
      : reinterpret_cast< ::inner::InnerMatchsvr_Fromteam_CancelMatch&>(::inner::_InnerMatchsvr_Fromteam_CancelMatch_default_instance_);
}
inline const ::inner::InnerMatchsvr_Fromteam_CancelMatch& InnerMatchsvr::fromteam_cancelmatch() const {
  // @@protoc_insertion_point(field_get:inner.InnerMatchsvr.fromteam_cancelmatch)
  return _internal_fromteam_cancelmatch();
}
inline ::inner::InnerMatchsvr_Fromteam_CancelMatch* InnerMatchsvr::unsafe_arena_release_fromteam_cancelmatch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerMatchsvr.fromteam_cancelmatch)
  if (_internal_has_fromteam_cancelmatch()) {
    clear_has_Fromteam();
    ::inner::InnerMatchsvr_Fromteam_CancelMatch* temp = Fromteam_.fromteam_cancelmatch_;
    Fromteam_.fromteam_cancelmatch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerMatchsvr::unsafe_arena_set_allocated_fromteam_cancelmatch(::inner::InnerMatchsvr_Fromteam_CancelMatch* fromteam_cancelmatch) {
  clear_Fromteam();
  if (fromteam_cancelmatch) {
    set_has_fromteam_cancelmatch();
    Fromteam_.fromteam_cancelmatch_ = fromteam_cancelmatch;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerMatchsvr.fromteam_cancelmatch)
}
inline ::inner::InnerMatchsvr_Fromteam_CancelMatch* InnerMatchsvr::_internal_mutable_fromteam_cancelmatch() {
  if (!_internal_has_fromteam_cancelmatch()) {
    clear_Fromteam();
    set_has_fromteam_cancelmatch();
    Fromteam_.fromteam_cancelmatch_ = CreateMaybeMessage< ::inner::InnerMatchsvr_Fromteam_CancelMatch >(GetArenaForAllocation());
  }
  return Fromteam_.fromteam_cancelmatch_;
}
inline ::inner::InnerMatchsvr_Fromteam_CancelMatch* InnerMatchsvr::mutable_fromteam_cancelmatch() {
  ::inner::InnerMatchsvr_Fromteam_CancelMatch* _msg = _internal_mutable_fromteam_cancelmatch();
  // @@protoc_insertion_point(field_mutable:inner.InnerMatchsvr.fromteam_cancelmatch)
  return _msg;
}

// .inner.InnerMatchsvr_Fromteam_ConfirmOk fromteam_confirmok = 1304;
inline bool InnerMatchsvr::_internal_has_fromteam_confirmok() const {
  return Fromteam_case() == kFromteamConfirmok;
}
inline bool InnerMatchsvr::has_fromteam_confirmok() const {
  return _internal_has_fromteam_confirmok();
}
inline void InnerMatchsvr::set_has_fromteam_confirmok() {
  _oneof_case_[0] = kFromteamConfirmok;
}
inline void InnerMatchsvr::clear_fromteam_confirmok() {
  if (_internal_has_fromteam_confirmok()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromteam_.fromteam_confirmok_;
    }
    clear_has_Fromteam();
  }
}
inline ::inner::InnerMatchsvr_Fromteam_ConfirmOk* InnerMatchsvr::release_fromteam_confirmok() {
  // @@protoc_insertion_point(field_release:inner.InnerMatchsvr.fromteam_confirmok)
  if (_internal_has_fromteam_confirmok()) {
    clear_has_Fromteam();
    ::inner::InnerMatchsvr_Fromteam_ConfirmOk* temp = Fromteam_.fromteam_confirmok_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromteam_.fromteam_confirmok_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerMatchsvr_Fromteam_ConfirmOk& InnerMatchsvr::_internal_fromteam_confirmok() const {
  return _internal_has_fromteam_confirmok()
      ? *Fromteam_.fromteam_confirmok_
      : reinterpret_cast< ::inner::InnerMatchsvr_Fromteam_ConfirmOk&>(::inner::_InnerMatchsvr_Fromteam_ConfirmOk_default_instance_);
}
inline const ::inner::InnerMatchsvr_Fromteam_ConfirmOk& InnerMatchsvr::fromteam_confirmok() const {
  // @@protoc_insertion_point(field_get:inner.InnerMatchsvr.fromteam_confirmok)
  return _internal_fromteam_confirmok();
}
inline ::inner::InnerMatchsvr_Fromteam_ConfirmOk* InnerMatchsvr::unsafe_arena_release_fromteam_confirmok() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerMatchsvr.fromteam_confirmok)
  if (_internal_has_fromteam_confirmok()) {
    clear_has_Fromteam();
    ::inner::InnerMatchsvr_Fromteam_ConfirmOk* temp = Fromteam_.fromteam_confirmok_;
    Fromteam_.fromteam_confirmok_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerMatchsvr::unsafe_arena_set_allocated_fromteam_confirmok(::inner::InnerMatchsvr_Fromteam_ConfirmOk* fromteam_confirmok) {
  clear_Fromteam();
  if (fromteam_confirmok) {
    set_has_fromteam_confirmok();
    Fromteam_.fromteam_confirmok_ = fromteam_confirmok;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerMatchsvr.fromteam_confirmok)
}
inline ::inner::InnerMatchsvr_Fromteam_ConfirmOk* InnerMatchsvr::_internal_mutable_fromteam_confirmok() {
  if (!_internal_has_fromteam_confirmok()) {
    clear_Fromteam();
    set_has_fromteam_confirmok();
    Fromteam_.fromteam_confirmok_ = CreateMaybeMessage< ::inner::InnerMatchsvr_Fromteam_ConfirmOk >(GetArenaForAllocation());
  }
  return Fromteam_.fromteam_confirmok_;
}
inline ::inner::InnerMatchsvr_Fromteam_ConfirmOk* InnerMatchsvr::mutable_fromteam_confirmok() {
  ::inner::InnerMatchsvr_Fromteam_ConfirmOk* _msg = _internal_mutable_fromteam_confirmok();
  // @@protoc_insertion_point(field_mutable:inner.InnerMatchsvr.fromteam_confirmok)
  return _msg;
}

// .inner.InnerMatchsvr_Fromteam_RefuseOk fromteam_refuseok = 1305;
inline bool InnerMatchsvr::_internal_has_fromteam_refuseok() const {
  return Fromteam_case() == kFromteamRefuseok;
}
inline bool InnerMatchsvr::has_fromteam_refuseok() const {
  return _internal_has_fromteam_refuseok();
}
inline void InnerMatchsvr::set_has_fromteam_refuseok() {
  _oneof_case_[0] = kFromteamRefuseok;
}
inline void InnerMatchsvr::clear_fromteam_refuseok() {
  if (_internal_has_fromteam_refuseok()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromteam_.fromteam_refuseok_;
    }
    clear_has_Fromteam();
  }
}
inline ::inner::InnerMatchsvr_Fromteam_RefuseOk* InnerMatchsvr::release_fromteam_refuseok() {
  // @@protoc_insertion_point(field_release:inner.InnerMatchsvr.fromteam_refuseok)
  if (_internal_has_fromteam_refuseok()) {
    clear_has_Fromteam();
    ::inner::InnerMatchsvr_Fromteam_RefuseOk* temp = Fromteam_.fromteam_refuseok_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromteam_.fromteam_refuseok_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerMatchsvr_Fromteam_RefuseOk& InnerMatchsvr::_internal_fromteam_refuseok() const {
  return _internal_has_fromteam_refuseok()
      ? *Fromteam_.fromteam_refuseok_
      : reinterpret_cast< ::inner::InnerMatchsvr_Fromteam_RefuseOk&>(::inner::_InnerMatchsvr_Fromteam_RefuseOk_default_instance_);
}
inline const ::inner::InnerMatchsvr_Fromteam_RefuseOk& InnerMatchsvr::fromteam_refuseok() const {
  // @@protoc_insertion_point(field_get:inner.InnerMatchsvr.fromteam_refuseok)
  return _internal_fromteam_refuseok();
}
inline ::inner::InnerMatchsvr_Fromteam_RefuseOk* InnerMatchsvr::unsafe_arena_release_fromteam_refuseok() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerMatchsvr.fromteam_refuseok)
  if (_internal_has_fromteam_refuseok()) {
    clear_has_Fromteam();
    ::inner::InnerMatchsvr_Fromteam_RefuseOk* temp = Fromteam_.fromteam_refuseok_;
    Fromteam_.fromteam_refuseok_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerMatchsvr::unsafe_arena_set_allocated_fromteam_refuseok(::inner::InnerMatchsvr_Fromteam_RefuseOk* fromteam_refuseok) {
  clear_Fromteam();
  if (fromteam_refuseok) {
    set_has_fromteam_refuseok();
    Fromteam_.fromteam_refuseok_ = fromteam_refuseok;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerMatchsvr.fromteam_refuseok)
}
inline ::inner::InnerMatchsvr_Fromteam_RefuseOk* InnerMatchsvr::_internal_mutable_fromteam_refuseok() {
  if (!_internal_has_fromteam_refuseok()) {
    clear_Fromteam();
    set_has_fromteam_refuseok();
    Fromteam_.fromteam_refuseok_ = CreateMaybeMessage< ::inner::InnerMatchsvr_Fromteam_RefuseOk >(GetArenaForAllocation());
  }
  return Fromteam_.fromteam_refuseok_;
}
inline ::inner::InnerMatchsvr_Fromteam_RefuseOk* InnerMatchsvr::mutable_fromteam_refuseok() {
  ::inner::InnerMatchsvr_Fromteam_RefuseOk* _msg = _internal_mutable_fromteam_refuseok();
  // @@protoc_insertion_point(field_mutable:inner.InnerMatchsvr.fromteam_refuseok)
  return _msg;
}

// .inner.InnerMatchsvr_Fromteam_ForceCancel fromteam_forcecancel = 1306;
inline bool InnerMatchsvr::_internal_has_fromteam_forcecancel() const {
  return Fromteam_case() == kFromteamForcecancel;
}
inline bool InnerMatchsvr::has_fromteam_forcecancel() const {
  return _internal_has_fromteam_forcecancel();
}
inline void InnerMatchsvr::set_has_fromteam_forcecancel() {
  _oneof_case_[0] = kFromteamForcecancel;
}
inline void InnerMatchsvr::clear_fromteam_forcecancel() {
  if (_internal_has_fromteam_forcecancel()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromteam_.fromteam_forcecancel_;
    }
    clear_has_Fromteam();
  }
}
inline ::inner::InnerMatchsvr_Fromteam_ForceCancel* InnerMatchsvr::release_fromteam_forcecancel() {
  // @@protoc_insertion_point(field_release:inner.InnerMatchsvr.fromteam_forcecancel)
  if (_internal_has_fromteam_forcecancel()) {
    clear_has_Fromteam();
    ::inner::InnerMatchsvr_Fromteam_ForceCancel* temp = Fromteam_.fromteam_forcecancel_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromteam_.fromteam_forcecancel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerMatchsvr_Fromteam_ForceCancel& InnerMatchsvr::_internal_fromteam_forcecancel() const {
  return _internal_has_fromteam_forcecancel()
      ? *Fromteam_.fromteam_forcecancel_
      : reinterpret_cast< ::inner::InnerMatchsvr_Fromteam_ForceCancel&>(::inner::_InnerMatchsvr_Fromteam_ForceCancel_default_instance_);
}
inline const ::inner::InnerMatchsvr_Fromteam_ForceCancel& InnerMatchsvr::fromteam_forcecancel() const {
  // @@protoc_insertion_point(field_get:inner.InnerMatchsvr.fromteam_forcecancel)
  return _internal_fromteam_forcecancel();
}
inline ::inner::InnerMatchsvr_Fromteam_ForceCancel* InnerMatchsvr::unsafe_arena_release_fromteam_forcecancel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerMatchsvr.fromteam_forcecancel)
  if (_internal_has_fromteam_forcecancel()) {
    clear_has_Fromteam();
    ::inner::InnerMatchsvr_Fromteam_ForceCancel* temp = Fromteam_.fromteam_forcecancel_;
    Fromteam_.fromteam_forcecancel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerMatchsvr::unsafe_arena_set_allocated_fromteam_forcecancel(::inner::InnerMatchsvr_Fromteam_ForceCancel* fromteam_forcecancel) {
  clear_Fromteam();
  if (fromteam_forcecancel) {
    set_has_fromteam_forcecancel();
    Fromteam_.fromteam_forcecancel_ = fromteam_forcecancel;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerMatchsvr.fromteam_forcecancel)
}
inline ::inner::InnerMatchsvr_Fromteam_ForceCancel* InnerMatchsvr::_internal_mutable_fromteam_forcecancel() {
  if (!_internal_has_fromteam_forcecancel()) {
    clear_Fromteam();
    set_has_fromteam_forcecancel();
    Fromteam_.fromteam_forcecancel_ = CreateMaybeMessage< ::inner::InnerMatchsvr_Fromteam_ForceCancel >(GetArenaForAllocation());
  }
  return Fromteam_.fromteam_forcecancel_;
}
inline ::inner::InnerMatchsvr_Fromteam_ForceCancel* InnerMatchsvr::mutable_fromteam_forcecancel() {
  ::inner::InnerMatchsvr_Fromteam_ForceCancel* _msg = _internal_mutable_fromteam_forcecancel();
  // @@protoc_insertion_point(field_mutable:inner.InnerMatchsvr.fromteam_forcecancel)
  return _msg;
}

inline bool InnerMatchsvr::has_Fromteam() const {
  return Fromteam_case() != FROMTEAM_NOT_SET;
}
inline void InnerMatchsvr::clear_has_Fromteam() {
  _oneof_case_[0] = FROMTEAM_NOT_SET;
}
inline InnerMatchsvr::FromteamCase InnerMatchsvr::Fromteam_case() const {
  return InnerMatchsvr::FromteamCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InnerMatchsvr_Fromteam_Test

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InnerMatchsvr_Fromteam_StartMatch

// uint32 mtype = 1;
inline void InnerMatchsvr_Fromteam_StartMatch::clear_mtype() {
  mtype_ = 0u;
}
inline uint32_t InnerMatchsvr_Fromteam_StartMatch::_internal_mtype() const {
  return mtype_;
}
inline uint32_t InnerMatchsvr_Fromteam_StartMatch::mtype() const {
  // @@protoc_insertion_point(field_get:inner.InnerMatchsvr_Fromteam_StartMatch.mtype)
  return _internal_mtype();
}
inline void InnerMatchsvr_Fromteam_StartMatch::_internal_set_mtype(uint32_t value) {
  
  mtype_ = value;
}
inline void InnerMatchsvr_Fromteam_StartMatch::set_mtype(uint32_t value) {
  _internal_set_mtype(value);
  // @@protoc_insertion_point(field_set:inner.InnerMatchsvr_Fromteam_StartMatch.mtype)
}

// .inner.InnerCopyType copy = 4;
inline bool InnerMatchsvr_Fromteam_StartMatch::_internal_has_copy() const {
  return this != internal_default_instance() && copy_ != nullptr;
}
inline bool InnerMatchsvr_Fromteam_StartMatch::has_copy() const {
  return _internal_has_copy();
}
inline const ::inner::InnerCopyType& InnerMatchsvr_Fromteam_StartMatch::_internal_copy() const {
  const ::inner::InnerCopyType* p = copy_;
  return p != nullptr ? *p : reinterpret_cast<const ::inner::InnerCopyType&>(
      ::inner::_InnerCopyType_default_instance_);
}
inline const ::inner::InnerCopyType& InnerMatchsvr_Fromteam_StartMatch::copy() const {
  // @@protoc_insertion_point(field_get:inner.InnerMatchsvr_Fromteam_StartMatch.copy)
  return _internal_copy();
}
inline void InnerMatchsvr_Fromteam_StartMatch::unsafe_arena_set_allocated_copy(
    ::inner::InnerCopyType* copy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(copy_);
  }
  copy_ = copy;
  if (copy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerMatchsvr_Fromteam_StartMatch.copy)
}
inline ::inner::InnerCopyType* InnerMatchsvr_Fromteam_StartMatch::release_copy() {
  
  ::inner::InnerCopyType* temp = copy_;
  copy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::inner::InnerCopyType* InnerMatchsvr_Fromteam_StartMatch::unsafe_arena_release_copy() {
  // @@protoc_insertion_point(field_release:inner.InnerMatchsvr_Fromteam_StartMatch.copy)
  
  ::inner::InnerCopyType* temp = copy_;
  copy_ = nullptr;
  return temp;
}
inline ::inner::InnerCopyType* InnerMatchsvr_Fromteam_StartMatch::_internal_mutable_copy() {
  
  if (copy_ == nullptr) {
    auto* p = CreateMaybeMessage<::inner::InnerCopyType>(GetArenaForAllocation());
    copy_ = p;
  }
  return copy_;
}
inline ::inner::InnerCopyType* InnerMatchsvr_Fromteam_StartMatch::mutable_copy() {
  ::inner::InnerCopyType* _msg = _internal_mutable_copy();
  // @@protoc_insertion_point(field_mutable:inner.InnerMatchsvr_Fromteam_StartMatch.copy)
  return _msg;
}
inline void InnerMatchsvr_Fromteam_StartMatch::set_allocated_copy(::inner::InnerCopyType* copy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(copy_);
  }
  if (copy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(copy));
    if (message_arena != submessage_arena) {
      copy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, copy, submessage_arena);
    }
    
  } else {
    
  }
  copy_ = copy;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerMatchsvr_Fromteam_StartMatch.copy)
}

// map<uint64, .inner.InnerMatchMatcher> roles = 5;
inline int InnerMatchsvr_Fromteam_StartMatch::_internal_roles_size() const {
  return roles_.size();
}
inline int InnerMatchsvr_Fromteam_StartMatch::roles_size() const {
  return _internal_roles_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchMatcher >&
InnerMatchsvr_Fromteam_StartMatch::_internal_roles() const {
  return roles_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchMatcher >&
InnerMatchsvr_Fromteam_StartMatch::roles() const {
  // @@protoc_insertion_point(field_map:inner.InnerMatchsvr_Fromteam_StartMatch.roles)
  return _internal_roles();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchMatcher >*
InnerMatchsvr_Fromteam_StartMatch::_internal_mutable_roles() {
  return roles_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchMatcher >*
InnerMatchsvr_Fromteam_StartMatch::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_map:inner.InnerMatchsvr_Fromteam_StartMatch.roles)
  return _internal_mutable_roles();
}

// -------------------------------------------------------------------

// InnerMatchsvr_Fromteam_CancelMatch

// uint64 unitId = 1;
inline void InnerMatchsvr_Fromteam_CancelMatch::clear_unitid() {
  unitid_ = uint64_t{0u};
}
inline uint64_t InnerMatchsvr_Fromteam_CancelMatch::_internal_unitid() const {
  return unitid_;
}
inline uint64_t InnerMatchsvr_Fromteam_CancelMatch::unitid() const {
  // @@protoc_insertion_point(field_get:inner.InnerMatchsvr_Fromteam_CancelMatch.unitId)
  return _internal_unitid();
}
inline void InnerMatchsvr_Fromteam_CancelMatch::_internal_set_unitid(uint64_t value) {
  
  unitid_ = value;
}
inline void InnerMatchsvr_Fromteam_CancelMatch::set_unitid(uint64_t value) {
  _internal_set_unitid(value);
  // @@protoc_insertion_point(field_set:inner.InnerMatchsvr_Fromteam_CancelMatch.unitId)
}

// -------------------------------------------------------------------

// InnerMatchsvr_Fromteam_ConfirmOk

// -------------------------------------------------------------------

// InnerMatchsvr_Fromteam_RefuseOk

// -------------------------------------------------------------------

// InnerMatchsvr_Fromteam_ForceCancel

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace inner

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_matchsvr_2eproto
