// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gatesvr.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gatesvr_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gatesvr_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gatesvr_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gatesvr_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gatesvr_2eproto;
namespace inner {
class InnerGatesvr;
struct InnerGatesvrDefaultTypeInternal;
extern InnerGatesvrDefaultTypeInternal _InnerGatesvr_default_instance_;
class InnerGatesvr_Fromscene_Test;
struct InnerGatesvr_Fromscene_TestDefaultTypeInternal;
extern InnerGatesvr_Fromscene_TestDefaultTypeInternal _InnerGatesvr_Fromscene_Test_default_instance_;
class InnerGatesvr_Fromscene_ToMeMsg;
struct InnerGatesvr_Fromscene_ToMeMsgDefaultTypeInternal;
extern InnerGatesvr_Fromscene_ToMeMsgDefaultTypeInternal _InnerGatesvr_Fromscene_ToMeMsg_default_instance_;
}  // namespace inner
PROTOBUF_NAMESPACE_OPEN
template<> ::inner::InnerGatesvr* Arena::CreateMaybeMessage<::inner::InnerGatesvr>(Arena*);
template<> ::inner::InnerGatesvr_Fromscene_Test* Arena::CreateMaybeMessage<::inner::InnerGatesvr_Fromscene_Test>(Arena*);
template<> ::inner::InnerGatesvr_Fromscene_ToMeMsg* Arena::CreateMaybeMessage<::inner::InnerGatesvr_Fromscene_ToMeMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inner {

// ===================================================================

class InnerGatesvr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerGatesvr) */ {
 public:
  inline InnerGatesvr() : InnerGatesvr(nullptr) {}
  ~InnerGatesvr() override;
  explicit PROTOBUF_CONSTEXPR InnerGatesvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGatesvr(const InnerGatesvr& from);
  InnerGatesvr(InnerGatesvr&& from) noexcept
    : InnerGatesvr() {
    *this = ::std::move(from);
  }

  inline InnerGatesvr& operator=(const InnerGatesvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGatesvr& operator=(InnerGatesvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGatesvr& default_instance() {
    return *internal_default_instance();
  }
  enum FromsceneCase {
    kFromsceneTest = 101,
    kFromsceneTomemsg = 102,
    FROMSCENE_NOT_SET = 0,
  };

  static inline const InnerGatesvr* internal_default_instance() {
    return reinterpret_cast<const InnerGatesvr*>(
               &_InnerGatesvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InnerGatesvr& a, InnerGatesvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGatesvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGatesvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGatesvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGatesvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerGatesvr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerGatesvr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerGatesvr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGatesvr";
  }
  protected:
  explicit InnerGatesvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromUserFieldNumber = 1,
    kFromsceneTestFieldNumber = 101,
    kFromsceneTomemsgFieldNumber = 102,
  };
  // uint64 fromUser = 1;
  void clear_fromuser();
  uint64_t fromuser() const;
  void set_fromuser(uint64_t value);
  private:
  uint64_t _internal_fromuser() const;
  void _internal_set_fromuser(uint64_t value);
  public:

  // .inner.InnerGatesvr_Fromscene_Test fromscene_test = 101;
  bool has_fromscene_test() const;
  private:
  bool _internal_has_fromscene_test() const;
  public:
  void clear_fromscene_test();
  const ::inner::InnerGatesvr_Fromscene_Test& fromscene_test() const;
  PROTOBUF_NODISCARD ::inner::InnerGatesvr_Fromscene_Test* release_fromscene_test();
  ::inner::InnerGatesvr_Fromscene_Test* mutable_fromscene_test();
  void set_allocated_fromscene_test(::inner::InnerGatesvr_Fromscene_Test* fromscene_test);
  private:
  const ::inner::InnerGatesvr_Fromscene_Test& _internal_fromscene_test() const;
  ::inner::InnerGatesvr_Fromscene_Test* _internal_mutable_fromscene_test();
  public:
  void unsafe_arena_set_allocated_fromscene_test(
      ::inner::InnerGatesvr_Fromscene_Test* fromscene_test);
  ::inner::InnerGatesvr_Fromscene_Test* unsafe_arena_release_fromscene_test();

  // .inner.InnerGatesvr_Fromscene_ToMeMsg fromscene_tomemsg = 102;
  bool has_fromscene_tomemsg() const;
  private:
  bool _internal_has_fromscene_tomemsg() const;
  public:
  void clear_fromscene_tomemsg();
  const ::inner::InnerGatesvr_Fromscene_ToMeMsg& fromscene_tomemsg() const;
  PROTOBUF_NODISCARD ::inner::InnerGatesvr_Fromscene_ToMeMsg* release_fromscene_tomemsg();
  ::inner::InnerGatesvr_Fromscene_ToMeMsg* mutable_fromscene_tomemsg();
  void set_allocated_fromscene_tomemsg(::inner::InnerGatesvr_Fromscene_ToMeMsg* fromscene_tomemsg);
  private:
  const ::inner::InnerGatesvr_Fromscene_ToMeMsg& _internal_fromscene_tomemsg() const;
  ::inner::InnerGatesvr_Fromscene_ToMeMsg* _internal_mutable_fromscene_tomemsg();
  public:
  void unsafe_arena_set_allocated_fromscene_tomemsg(
      ::inner::InnerGatesvr_Fromscene_ToMeMsg* fromscene_tomemsg);
  ::inner::InnerGatesvr_Fromscene_ToMeMsg* unsafe_arena_release_fromscene_tomemsg();

  void clear_Fromscene();
  FromsceneCase Fromscene_case() const;
  // @@protoc_insertion_point(class_scope:inner.InnerGatesvr)
 private:
  class _Internal;
  void set_has_fromscene_test();
  void set_has_fromscene_tomemsg();

  inline bool has_Fromscene() const;
  inline void clear_has_Fromscene();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t fromuser_;
  union FromsceneUnion {
    constexpr FromsceneUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::inner::InnerGatesvr_Fromscene_Test* fromscene_test_;
    ::inner::InnerGatesvr_Fromscene_ToMeMsg* fromscene_tomemsg_;
  } Fromscene_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_gatesvr_2eproto;
};
// -------------------------------------------------------------------

class InnerGatesvr_Fromscene_Test final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerGatesvr_Fromscene_Test) */ {
 public:
  inline InnerGatesvr_Fromscene_Test() : InnerGatesvr_Fromscene_Test(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerGatesvr_Fromscene_Test(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGatesvr_Fromscene_Test(const InnerGatesvr_Fromscene_Test& from);
  InnerGatesvr_Fromscene_Test(InnerGatesvr_Fromscene_Test&& from) noexcept
    : InnerGatesvr_Fromscene_Test() {
    *this = ::std::move(from);
  }

  inline InnerGatesvr_Fromscene_Test& operator=(const InnerGatesvr_Fromscene_Test& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGatesvr_Fromscene_Test& operator=(InnerGatesvr_Fromscene_Test&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGatesvr_Fromscene_Test& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGatesvr_Fromscene_Test* internal_default_instance() {
    return reinterpret_cast<const InnerGatesvr_Fromscene_Test*>(
               &_InnerGatesvr_Fromscene_Test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InnerGatesvr_Fromscene_Test& a, InnerGatesvr_Fromscene_Test& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGatesvr_Fromscene_Test* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGatesvr_Fromscene_Test* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGatesvr_Fromscene_Test* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGatesvr_Fromscene_Test>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerGatesvr_Fromscene_Test& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerGatesvr_Fromscene_Test& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGatesvr_Fromscene_Test";
  }
  protected:
  explicit InnerGatesvr_Fromscene_Test(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerGatesvr_Fromscene_Test)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_gatesvr_2eproto;
};
// -------------------------------------------------------------------

class InnerGatesvr_Fromscene_ToMeMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerGatesvr_Fromscene_ToMeMsg) */ {
 public:
  inline InnerGatesvr_Fromscene_ToMeMsg() : InnerGatesvr_Fromscene_ToMeMsg(nullptr) {}
  ~InnerGatesvr_Fromscene_ToMeMsg() override;
  explicit PROTOBUF_CONSTEXPR InnerGatesvr_Fromscene_ToMeMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGatesvr_Fromscene_ToMeMsg(const InnerGatesvr_Fromscene_ToMeMsg& from);
  InnerGatesvr_Fromscene_ToMeMsg(InnerGatesvr_Fromscene_ToMeMsg&& from) noexcept
    : InnerGatesvr_Fromscene_ToMeMsg() {
    *this = ::std::move(from);
  }

  inline InnerGatesvr_Fromscene_ToMeMsg& operator=(const InnerGatesvr_Fromscene_ToMeMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGatesvr_Fromscene_ToMeMsg& operator=(InnerGatesvr_Fromscene_ToMeMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGatesvr_Fromscene_ToMeMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGatesvr_Fromscene_ToMeMsg* internal_default_instance() {
    return reinterpret_cast<const InnerGatesvr_Fromscene_ToMeMsg*>(
               &_InnerGatesvr_Fromscene_ToMeMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InnerGatesvr_Fromscene_ToMeMsg& a, InnerGatesvr_Fromscene_ToMeMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGatesvr_Fromscene_ToMeMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGatesvr_Fromscene_ToMeMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGatesvr_Fromscene_ToMeMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGatesvr_Fromscene_ToMeMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerGatesvr_Fromscene_ToMeMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerGatesvr_Fromscene_ToMeMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerGatesvr_Fromscene_ToMeMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGatesvr_Fromscene_ToMeMsg";
  }
  protected:
  explicit InnerGatesvr_Fromscene_ToMeMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kModuleIdFieldNumber = 1,
    kCmdIdFieldNumber = 2,
  };
  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 moduleId = 1;
  void clear_moduleid();
  uint32_t moduleid() const;
  void set_moduleid(uint32_t value);
  private:
  uint32_t _internal_moduleid() const;
  void _internal_set_moduleid(uint32_t value);
  public:

  // uint32 cmdId = 2;
  void clear_cmdid();
  uint32_t cmdid() const;
  void set_cmdid(uint32_t value);
  private:
  uint32_t _internal_cmdid() const;
  void _internal_set_cmdid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerGatesvr_Fromscene_ToMeMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  uint32_t moduleid_;
  uint32_t cmdid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gatesvr_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InnerGatesvr

// uint64 fromUser = 1;
inline void InnerGatesvr::clear_fromuser() {
  fromuser_ = uint64_t{0u};
}
inline uint64_t InnerGatesvr::_internal_fromuser() const {
  return fromuser_;
}
inline uint64_t InnerGatesvr::fromuser() const {
  // @@protoc_insertion_point(field_get:inner.InnerGatesvr.fromUser)
  return _internal_fromuser();
}
inline void InnerGatesvr::_internal_set_fromuser(uint64_t value) {
  
  fromuser_ = value;
}
inline void InnerGatesvr::set_fromuser(uint64_t value) {
  _internal_set_fromuser(value);
  // @@protoc_insertion_point(field_set:inner.InnerGatesvr.fromUser)
}

// .inner.InnerGatesvr_Fromscene_Test fromscene_test = 101;
inline bool InnerGatesvr::_internal_has_fromscene_test() const {
  return Fromscene_case() == kFromsceneTest;
}
inline bool InnerGatesvr::has_fromscene_test() const {
  return _internal_has_fromscene_test();
}
inline void InnerGatesvr::set_has_fromscene_test() {
  _oneof_case_[0] = kFromsceneTest;
}
inline void InnerGatesvr::clear_fromscene_test() {
  if (_internal_has_fromscene_test()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_test_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerGatesvr_Fromscene_Test* InnerGatesvr::release_fromscene_test() {
  // @@protoc_insertion_point(field_release:inner.InnerGatesvr.fromscene_test)
  if (_internal_has_fromscene_test()) {
    clear_has_Fromscene();
    ::inner::InnerGatesvr_Fromscene_Test* temp = Fromscene_.fromscene_test_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_test_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGatesvr_Fromscene_Test& InnerGatesvr::_internal_fromscene_test() const {
  return _internal_has_fromscene_test()
      ? *Fromscene_.fromscene_test_
      : reinterpret_cast< ::inner::InnerGatesvr_Fromscene_Test&>(::inner::_InnerGatesvr_Fromscene_Test_default_instance_);
}
inline const ::inner::InnerGatesvr_Fromscene_Test& InnerGatesvr::fromscene_test() const {
  // @@protoc_insertion_point(field_get:inner.InnerGatesvr.fromscene_test)
  return _internal_fromscene_test();
}
inline ::inner::InnerGatesvr_Fromscene_Test* InnerGatesvr::unsafe_arena_release_fromscene_test() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGatesvr.fromscene_test)
  if (_internal_has_fromscene_test()) {
    clear_has_Fromscene();
    ::inner::InnerGatesvr_Fromscene_Test* temp = Fromscene_.fromscene_test_;
    Fromscene_.fromscene_test_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGatesvr::unsafe_arena_set_allocated_fromscene_test(::inner::InnerGatesvr_Fromscene_Test* fromscene_test) {
  clear_Fromscene();
  if (fromscene_test) {
    set_has_fromscene_test();
    Fromscene_.fromscene_test_ = fromscene_test;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGatesvr.fromscene_test)
}
inline ::inner::InnerGatesvr_Fromscene_Test* InnerGatesvr::_internal_mutable_fromscene_test() {
  if (!_internal_has_fromscene_test()) {
    clear_Fromscene();
    set_has_fromscene_test();
    Fromscene_.fromscene_test_ = CreateMaybeMessage< ::inner::InnerGatesvr_Fromscene_Test >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_test_;
}
inline ::inner::InnerGatesvr_Fromscene_Test* InnerGatesvr::mutable_fromscene_test() {
  ::inner::InnerGatesvr_Fromscene_Test* _msg = _internal_mutable_fromscene_test();
  // @@protoc_insertion_point(field_mutable:inner.InnerGatesvr.fromscene_test)
  return _msg;
}

// .inner.InnerGatesvr_Fromscene_ToMeMsg fromscene_tomemsg = 102;
inline bool InnerGatesvr::_internal_has_fromscene_tomemsg() const {
  return Fromscene_case() == kFromsceneTomemsg;
}
inline bool InnerGatesvr::has_fromscene_tomemsg() const {
  return _internal_has_fromscene_tomemsg();
}
inline void InnerGatesvr::set_has_fromscene_tomemsg() {
  _oneof_case_[0] = kFromsceneTomemsg;
}
inline void InnerGatesvr::clear_fromscene_tomemsg() {
  if (_internal_has_fromscene_tomemsg()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_tomemsg_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerGatesvr_Fromscene_ToMeMsg* InnerGatesvr::release_fromscene_tomemsg() {
  // @@protoc_insertion_point(field_release:inner.InnerGatesvr.fromscene_tomemsg)
  if (_internal_has_fromscene_tomemsg()) {
    clear_has_Fromscene();
    ::inner::InnerGatesvr_Fromscene_ToMeMsg* temp = Fromscene_.fromscene_tomemsg_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_tomemsg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGatesvr_Fromscene_ToMeMsg& InnerGatesvr::_internal_fromscene_tomemsg() const {
  return _internal_has_fromscene_tomemsg()
      ? *Fromscene_.fromscene_tomemsg_
      : reinterpret_cast< ::inner::InnerGatesvr_Fromscene_ToMeMsg&>(::inner::_InnerGatesvr_Fromscene_ToMeMsg_default_instance_);
}
inline const ::inner::InnerGatesvr_Fromscene_ToMeMsg& InnerGatesvr::fromscene_tomemsg() const {
  // @@protoc_insertion_point(field_get:inner.InnerGatesvr.fromscene_tomemsg)
  return _internal_fromscene_tomemsg();
}
inline ::inner::InnerGatesvr_Fromscene_ToMeMsg* InnerGatesvr::unsafe_arena_release_fromscene_tomemsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGatesvr.fromscene_tomemsg)
  if (_internal_has_fromscene_tomemsg()) {
    clear_has_Fromscene();
    ::inner::InnerGatesvr_Fromscene_ToMeMsg* temp = Fromscene_.fromscene_tomemsg_;
    Fromscene_.fromscene_tomemsg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGatesvr::unsafe_arena_set_allocated_fromscene_tomemsg(::inner::InnerGatesvr_Fromscene_ToMeMsg* fromscene_tomemsg) {
  clear_Fromscene();
  if (fromscene_tomemsg) {
    set_has_fromscene_tomemsg();
    Fromscene_.fromscene_tomemsg_ = fromscene_tomemsg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGatesvr.fromscene_tomemsg)
}
inline ::inner::InnerGatesvr_Fromscene_ToMeMsg* InnerGatesvr::_internal_mutable_fromscene_tomemsg() {
  if (!_internal_has_fromscene_tomemsg()) {
    clear_Fromscene();
    set_has_fromscene_tomemsg();
    Fromscene_.fromscene_tomemsg_ = CreateMaybeMessage< ::inner::InnerGatesvr_Fromscene_ToMeMsg >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_tomemsg_;
}
inline ::inner::InnerGatesvr_Fromscene_ToMeMsg* InnerGatesvr::mutable_fromscene_tomemsg() {
  ::inner::InnerGatesvr_Fromscene_ToMeMsg* _msg = _internal_mutable_fromscene_tomemsg();
  // @@protoc_insertion_point(field_mutable:inner.InnerGatesvr.fromscene_tomemsg)
  return _msg;
}

inline bool InnerGatesvr::has_Fromscene() const {
  return Fromscene_case() != FROMSCENE_NOT_SET;
}
inline void InnerGatesvr::clear_has_Fromscene() {
  _oneof_case_[0] = FROMSCENE_NOT_SET;
}
inline InnerGatesvr::FromsceneCase InnerGatesvr::Fromscene_case() const {
  return InnerGatesvr::FromsceneCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InnerGatesvr_Fromscene_Test

// -------------------------------------------------------------------

// InnerGatesvr_Fromscene_ToMeMsg

// uint32 moduleId = 1;
inline void InnerGatesvr_Fromscene_ToMeMsg::clear_moduleid() {
  moduleid_ = 0u;
}
inline uint32_t InnerGatesvr_Fromscene_ToMeMsg::_internal_moduleid() const {
  return moduleid_;
}
inline uint32_t InnerGatesvr_Fromscene_ToMeMsg::moduleid() const {
  // @@protoc_insertion_point(field_get:inner.InnerGatesvr_Fromscene_ToMeMsg.moduleId)
  return _internal_moduleid();
}
inline void InnerGatesvr_Fromscene_ToMeMsg::_internal_set_moduleid(uint32_t value) {
  
  moduleid_ = value;
}
inline void InnerGatesvr_Fromscene_ToMeMsg::set_moduleid(uint32_t value) {
  _internal_set_moduleid(value);
  // @@protoc_insertion_point(field_set:inner.InnerGatesvr_Fromscene_ToMeMsg.moduleId)
}

// uint32 cmdId = 2;
inline void InnerGatesvr_Fromscene_ToMeMsg::clear_cmdid() {
  cmdid_ = 0u;
}
inline uint32_t InnerGatesvr_Fromscene_ToMeMsg::_internal_cmdid() const {
  return cmdid_;
}
inline uint32_t InnerGatesvr_Fromscene_ToMeMsg::cmdid() const {
  // @@protoc_insertion_point(field_get:inner.InnerGatesvr_Fromscene_ToMeMsg.cmdId)
  return _internal_cmdid();
}
inline void InnerGatesvr_Fromscene_ToMeMsg::_internal_set_cmdid(uint32_t value) {
  
  cmdid_ = value;
}
inline void InnerGatesvr_Fromscene_ToMeMsg::set_cmdid(uint32_t value) {
  _internal_set_cmdid(value);
  // @@protoc_insertion_point(field_set:inner.InnerGatesvr_Fromscene_ToMeMsg.cmdId)
}

// bytes data = 3;
inline void InnerGatesvr_Fromscene_ToMeMsg::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& InnerGatesvr_Fromscene_ToMeMsg::data() const {
  // @@protoc_insertion_point(field_get:inner.InnerGatesvr_Fromscene_ToMeMsg.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InnerGatesvr_Fromscene_ToMeMsg::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inner.InnerGatesvr_Fromscene_ToMeMsg.data)
}
inline std::string* InnerGatesvr_Fromscene_ToMeMsg::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:inner.InnerGatesvr_Fromscene_ToMeMsg.data)
  return _s;
}
inline const std::string& InnerGatesvr_Fromscene_ToMeMsg::_internal_data() const {
  return data_.Get();
}
inline void InnerGatesvr_Fromscene_ToMeMsg::_internal_set_data(const std::string& value) {
  
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* InnerGatesvr_Fromscene_ToMeMsg::_internal_mutable_data() {
  
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* InnerGatesvr_Fromscene_ToMeMsg::release_data() {
  // @@protoc_insertion_point(field_release:inner.InnerGatesvr_Fromscene_ToMeMsg.data)
  return data_.Release();
}
inline void InnerGatesvr_Fromscene_ToMeMsg::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGatesvr_Fromscene_ToMeMsg.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace inner

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gatesvr_2eproto
