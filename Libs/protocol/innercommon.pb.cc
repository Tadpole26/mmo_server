// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: innercommon.proto

#include "innercommon.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace inner {
PROTOBUF_CONSTEXPR InnerRoleIdList::InnerRoleIdList(
    ::_pbi::ConstantInitialized)
  : roleids_()
  , _roleids_cached_byte_size_(0){}
struct InnerRoleIdListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerRoleIdListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerRoleIdListDefaultTypeInternal() {}
  union {
    InnerRoleIdList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerRoleIdListDefaultTypeInternal _InnerRoleIdList_default_instance_;
PROTOBUF_CONSTEXPR InnerCopyTeamMem::InnerCopyTeamMem(
    ::_pbi::ConstantInitialized)
  : roleid_(uint64_t{0u})
  , zoneidf_(0u){}
struct InnerCopyTeamMemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerCopyTeamMemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerCopyTeamMemDefaultTypeInternal() {}
  union {
    InnerCopyTeamMem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerCopyTeamMemDefaultTypeInternal _InnerCopyTeamMem_default_instance_;
PROTOBUF_CONSTEXPR InnerCopyTeam::InnerCopyTeam(
    ::_pbi::ConstantInitialized)
  : roles_()
  , robots_(){}
struct InnerCopyTeamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerCopyTeamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerCopyTeamDefaultTypeInternal() {}
  union {
    InnerCopyTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerCopyTeamDefaultTypeInternal _InnerCopyTeam_default_instance_;
PROTOBUF_CONSTEXPR InnerCopyTeamList::InnerCopyTeamList(
    ::_pbi::ConstantInitialized)
  : teams_()
  , targetid_(0u){}
struct InnerCopyTeamListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerCopyTeamListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerCopyTeamListDefaultTypeInternal() {}
  union {
    InnerCopyTeamList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerCopyTeamListDefaultTypeInternal _InnerCopyTeamList_default_instance_;
PROTOBUF_CONSTEXPR InnerCopyEnterByTeam::InnerCopyEnterByTeam(
    ::_pbi::ConstantInitialized){}
struct InnerCopyEnterByTeamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerCopyEnterByTeamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerCopyEnterByTeamDefaultTypeInternal() {}
  union {
    InnerCopyEnterByTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerCopyEnterByTeamDefaultTypeInternal _InnerCopyEnterByTeam_default_instance_;
PROTOBUF_CONSTEXPR InnerCopyEnterByChgLvId::InnerCopyEnterByChgLvId(
    ::_pbi::ConstantInitialized){}
struct InnerCopyEnterByChgLvIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerCopyEnterByChgLvIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerCopyEnterByChgLvIdDefaultTypeInternal() {}
  union {
    InnerCopyEnterByChgLvId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerCopyEnterByChgLvIdDefaultTypeInternal _InnerCopyEnterByChgLvId_default_instance_;
PROTOBUF_CONSTEXPR InnerCopyEnterByHome::InnerCopyEnterByHome(
    ::_pbi::ConstantInitialized){}
struct InnerCopyEnterByHomeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerCopyEnterByHomeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerCopyEnterByHomeDefaultTypeInternal() {}
  union {
    InnerCopyEnterByHome _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerCopyEnterByHomeDefaultTypeInternal _InnerCopyEnterByHome_default_instance_;
PROTOBUF_CONSTEXPR InnerCopyEnter::InnerCopyEnter(
    ::_pbi::ConstantInitialized)
  : teamlist_(nullptr)
  , copylvid_(0u)
  , eproc_(0u)
  , threeid_(0u)
  , voteid_(0u)
  , _oneof_case_{}{}
struct InnerCopyEnterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerCopyEnterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerCopyEnterDefaultTypeInternal() {}
  union {
    InnerCopyEnter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerCopyEnterDefaultTypeInternal _InnerCopyEnter_default_instance_;
PROTOBUF_CONSTEXPR InnerCopyWayByMatch::InnerCopyWayByMatch(
    ::_pbi::ConstantInitialized)
  : mtype_(0u)
  , seasonid_(0u)
  , dayid_(0u){}
struct InnerCopyWayByMatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerCopyWayByMatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerCopyWayByMatchDefaultTypeInternal() {}
  union {
    InnerCopyWayByMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerCopyWayByMatchDefaultTypeInternal _InnerCopyWayByMatch_default_instance_;
PROTOBUF_CONSTEXPR InnerCopyWayByTeam::InnerCopyWayByTeam(
    ::_pbi::ConstantInitialized){}
struct InnerCopyWayByTeamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerCopyWayByTeamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerCopyWayByTeamDefaultTypeInternal() {}
  union {
    InnerCopyWayByTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerCopyWayByTeamDefaultTypeInternal _InnerCopyWayByTeam_default_instance_;
PROTOBUF_CONSTEXPR InnerCopyWay::InnerCopyWay(
    ::_pbi::ConstantInitialized)
  : teamlist_(nullptr)
  , _oneof_case_{}{}
struct InnerCopyWayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerCopyWayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerCopyWayDefaultTypeInternal() {}
  union {
    InnerCopyWay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerCopyWayDefaultTypeInternal _InnerCopyWay_default_instance_;
PROTOBUF_CONSTEXPR InnerCopyPvpF55::InnerCopyPvpF55(
    ::_pbi::ConstantInitialized)
  : copyid_(0u){}
struct InnerCopyPvpF55DefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerCopyPvpF55DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerCopyPvpF55DefaultTypeInternal() {}
  union {
    InnerCopyPvpF55 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerCopyPvpF55DefaultTypeInternal _InnerCopyPvpF55_default_instance_;
PROTOBUF_CONSTEXPR InnerCopyPvp::InnerCopyPvp(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct InnerCopyPvpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerCopyPvpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerCopyPvpDefaultTypeInternal() {}
  union {
    InnerCopyPvp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerCopyPvpDefaultTypeInternal _InnerCopyPvp_default_instance_;
PROTOBUF_CONSTEXPR InnerCopyPve::InnerCopyPve(
    ::_pbi::ConstantInitialized){}
struct InnerCopyPveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerCopyPveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerCopyPveDefaultTypeInternal() {}
  union {
    InnerCopyPve _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerCopyPveDefaultTypeInternal _InnerCopyPve_default_instance_;
PROTOBUF_CONSTEXPR InnerCopyType::InnerCopyType(
    ::_pbi::ConstantInitialized)
  : copylvid_(0u)
  , eproc_(0u)
  , threeid_(0u)
  , _oneof_case_{}{}
struct InnerCopyTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerCopyTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerCopyTypeDefaultTypeInternal() {}
  union {
    InnerCopyType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerCopyTypeDefaultTypeInternal _InnerCopyType_default_instance_;
PROTOBUF_CONSTEXPR InnerCopyCreateBy::InnerCopyCreateBy(
    ::_pbi::ConstantInitialized)
  : crit_(nullptr)
  , copy_(nullptr)
  , way_(nullptr){}
struct InnerCopyCreateByDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerCopyCreateByDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerCopyCreateByDefaultTypeInternal() {}
  union {
    InnerCopyCreateBy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerCopyCreateByDefaultTypeInternal _InnerCopyCreateBy_default_instance_;
PROTOBUF_CONSTEXPR InnerCopyCrit::InnerCopyCrit(
    ::_pbi::ConstantInitialized)
  : critid_(uint64_t{0u})
  , hashidf_(0u)
  , expire_(0u){}
struct InnerCopyCritDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerCopyCritDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerCopyCritDefaultTypeInternal() {}
  union {
    InnerCopyCrit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerCopyCritDefaultTypeInternal _InnerCopyCrit_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEvent::InnerGameEvent(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct InnerGameEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventDefaultTypeInternal() {}
  union {
    InnerGameEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventDefaultTypeInternal _InnerGameEvent_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventDestroy::InnerGameEventDestroy(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct InnerGameEventDestroyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventDestroyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventDestroyDefaultTypeInternal() {}
  union {
    InnerGameEventDestroy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventDestroyDefaultTypeInternal _InnerGameEventDestroy_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventDestroyTeamsvr::InnerGameEventDestroyTeamsvr(
    ::_pbi::ConstantInitialized){}
struct InnerGameEventDestroyTeamsvrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventDestroyTeamsvrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventDestroyTeamsvrDefaultTypeInternal() {}
  union {
    InnerGameEventDestroyTeamsvr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventDestroyTeamsvrDefaultTypeInternal _InnerGameEventDestroyTeamsvr_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventDestryFriendsvr::InnerGameEventDestryFriendsvr(
    ::_pbi::ConstantInitialized){}
struct InnerGameEventDestryFriendsvrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventDestryFriendsvrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventDestryFriendsvrDefaultTypeInternal() {}
  union {
    InnerGameEventDestryFriendsvr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventDestryFriendsvrDefaultTypeInternal _InnerGameEventDestryFriendsvr_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventDestroyFamilysvr::InnerGameEventDestroyFamilysvr(
    ::_pbi::ConstantInitialized){}
struct InnerGameEventDestroyFamilysvrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventDestroyFamilysvrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventDestroyFamilysvrDefaultTypeInternal() {}
  union {
    InnerGameEventDestroyFamilysvr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventDestroyFamilysvrDefaultTypeInternal _InnerGameEventDestroyFamilysvr_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventDestroyRanksvr::InnerGameEventDestroyRanksvr(
    ::_pbi::ConstantInitialized){}
struct InnerGameEventDestroyRanksvrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventDestroyRanksvrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventDestroyRanksvrDefaultTypeInternal() {}
  union {
    InnerGameEventDestroyRanksvr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventDestroyRanksvrDefaultTypeInternal _InnerGameEventDestroyRanksvr_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventLogin::InnerGameEventLogin(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct InnerGameEventLoginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventLoginDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventLoginDefaultTypeInternal() {}
  union {
    InnerGameEventLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventLoginDefaultTypeInternal _InnerGameEventLogin_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventLoginTeamsvr::InnerGameEventLoginTeamsvr(
    ::_pbi::ConstantInitialized)
  : brief_(nullptr)
  , extd1_(nullptr)
  , extd2_(nullptr)
  , extd3_(nullptr)
  , f33_(nullptr)
  , f55_(nullptr)
  , scenehashid_(0u){}
struct InnerGameEventLoginTeamsvrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventLoginTeamsvrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventLoginTeamsvrDefaultTypeInternal() {}
  union {
    InnerGameEventLoginTeamsvr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventLoginTeamsvrDefaultTypeInternal _InnerGameEventLoginTeamsvr_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventLoginFriendsvr::InnerGameEventLoginFriendsvr(
    ::_pbi::ConstantInitialized)
  : oinfo_(nullptr)
  , ogifts_(nullptr)
  , llteamid_(uint64_t{0u}){}
struct InnerGameEventLoginFriendsvrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventLoginFriendsvrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventLoginFriendsvrDefaultTypeInternal() {}
  union {
    InnerGameEventLoginFriendsvr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventLoginFriendsvrDefaultTypeInternal _InnerGameEventLoginFriendsvr_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventLogout::InnerGameEventLogout(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct InnerGameEventLogoutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventLogoutDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventLogoutDefaultTypeInternal() {}
  union {
    InnerGameEventLogout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventLogoutDefaultTypeInternal _InnerGameEventLogout_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventLogoutTeamvr::InnerGameEventLogoutTeamvr(
    ::_pbi::ConstantInitialized){}
struct InnerGameEventLogoutTeamvrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventLogoutTeamvrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventLogoutTeamvrDefaultTypeInternal() {}
  union {
    InnerGameEventLogoutTeamvr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventLogoutTeamvrDefaultTypeInternal _InnerGameEventLogoutTeamvr_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventLogoutFriendsvr::InnerGameEventLogoutFriendsvr(
    ::_pbi::ConstantInitialized){}
struct InnerGameEventLogoutFriendsvrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventLogoutFriendsvrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventLogoutFriendsvrDefaultTypeInternal() {}
  union {
    InnerGameEventLogoutFriendsvr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventLogoutFriendsvrDefaultTypeInternal _InnerGameEventLogoutFriendsvr_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventOnline::InnerGameEventOnline(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct InnerGameEventOnlineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventOnlineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventOnlineDefaultTypeInternal() {}
  union {
    InnerGameEventOnline _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventOnlineDefaultTypeInternal _InnerGameEventOnline_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventOnlineTeamsvr::InnerGameEventOnlineTeamsvr(
    ::_pbi::ConstantInitialized)
  : extd2_(nullptr)
  , extd3_(nullptr){}
struct InnerGameEventOnlineTeamsvrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventOnlineTeamsvrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventOnlineTeamsvrDefaultTypeInternal() {}
  union {
    InnerGameEventOnlineTeamsvr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventOnlineTeamsvrDefaultTypeInternal _InnerGameEventOnlineTeamsvr_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventOnlineFriendsvr::InnerGameEventOnlineFriendsvr(
    ::_pbi::ConstantInitialized)
  : oinfo_(nullptr)
  , ogifts_(nullptr)
  , llteamid_(uint64_t{0u}){}
struct InnerGameEventOnlineFriendsvrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventOnlineFriendsvrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventOnlineFriendsvrDefaultTypeInternal() {}
  union {
    InnerGameEventOnlineFriendsvr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventOnlineFriendsvrDefaultTypeInternal _InnerGameEventOnlineFriendsvr_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventOffline::InnerGameEventOffline(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct InnerGameEventOfflineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventOfflineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventOfflineDefaultTypeInternal() {}
  union {
    InnerGameEventOffline _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventOfflineDefaultTypeInternal _InnerGameEventOffline_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventOfflineTeamsvr::InnerGameEventOfflineTeamsvr(
    ::_pbi::ConstantInitialized){}
struct InnerGameEventOfflineTeamsvrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventOfflineTeamsvrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventOfflineTeamsvrDefaultTypeInternal() {}
  union {
    InnerGameEventOfflineTeamsvr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventOfflineTeamsvrDefaultTypeInternal _InnerGameEventOfflineTeamsvr_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventOfflineFriendsvr::InnerGameEventOfflineFriendsvr(
    ::_pbi::ConstantInitialized){}
struct InnerGameEventOfflineFriendsvrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventOfflineFriendsvrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventOfflineFriendsvrDefaultTypeInternal() {}
  union {
    InnerGameEventOfflineFriendsvr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventOfflineFriendsvrDefaultTypeInternal _InnerGameEventOfflineFriendsvr_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventChangeMap::InnerGameEventChangeMap(
    ::_pbi::ConstantInitialized)
  : uiprocdirect_(0u)
  , _oneof_case_{}{}
struct InnerGameEventChangeMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventChangeMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventChangeMapDefaultTypeInternal() {}
  union {
    InnerGameEventChangeMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventChangeMapDefaultTypeInternal _InnerGameEventChangeMap_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventChangeMapTeamsvr::InnerGameEventChangeMapTeamsvr(
    ::_pbi::ConstantInitialized)
  : brief_(nullptr)
  , extd1_(nullptr)
  , extd2_(nullptr)
  , extd3_(nullptr)
  , f33_(nullptr)
  , f55_(nullptr)
  , scenehashid_(0u){}
struct InnerGameEventChangeMapTeamsvrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventChangeMapTeamsvrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventChangeMapTeamsvrDefaultTypeInternal() {}
  union {
    InnerGameEventChangeMapTeamsvr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventChangeMapTeamsvrDefaultTypeInternal _InnerGameEventChangeMapTeamsvr_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventChangeMapFriendsvr::InnerGameEventChangeMapFriendsvr(
    ::_pbi::ConstantInitialized){}
struct InnerGameEventChangeMapFriendsvrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventChangeMapFriendsvrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventChangeMapFriendsvrDefaultTypeInternal() {}
  union {
    InnerGameEventChangeMapFriendsvr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventChangeMapFriendsvrDefaultTypeInternal _InnerGameEventChangeMapFriendsvr_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventDeath::InnerGameEventDeath(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct InnerGameEventDeathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventDeathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventDeathDefaultTypeInternal() {}
  union {
    InnerGameEventDeath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventDeathDefaultTypeInternal _InnerGameEventDeath_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventDeathTeamsvr::InnerGameEventDeathTeamsvr(
    ::_pbi::ConstantInitialized)
  : extd3_(nullptr){}
struct InnerGameEventDeathTeamsvrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventDeathTeamsvrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventDeathTeamsvrDefaultTypeInternal() {}
  union {
    InnerGameEventDeathTeamsvr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventDeathTeamsvrDefaultTypeInternal _InnerGameEventDeathTeamsvr_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventDeathFriendsvr::InnerGameEventDeathFriendsvr(
    ::_pbi::ConstantInitialized){}
struct InnerGameEventDeathFriendsvrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventDeathFriendsvrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventDeathFriendsvrDefaultTypeInternal() {}
  union {
    InnerGameEventDeathFriendsvr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventDeathFriendsvrDefaultTypeInternal _InnerGameEventDeathFriendsvr_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventRebirth::InnerGameEventRebirth(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct InnerGameEventRebirthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventRebirthDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventRebirthDefaultTypeInternal() {}
  union {
    InnerGameEventRebirth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventRebirthDefaultTypeInternal _InnerGameEventRebirth_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventRebirthTeamsvr::InnerGameEventRebirthTeamsvr(
    ::_pbi::ConstantInitialized)
  : extd2_(nullptr)
  , extd3_(nullptr){}
struct InnerGameEventRebirthTeamsvrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventRebirthTeamsvrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventRebirthTeamsvrDefaultTypeInternal() {}
  union {
    InnerGameEventRebirthTeamsvr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventRebirthTeamsvrDefaultTypeInternal _InnerGameEventRebirthTeamsvr_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventRebirthFriendsvr::InnerGameEventRebirthFriendsvr(
    ::_pbi::ConstantInitialized){}
struct InnerGameEventRebirthFriendsvrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventRebirthFriendsvrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventRebirthFriendsvrDefaultTypeInternal() {}
  union {
    InnerGameEventRebirthFriendsvr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventRebirthFriendsvrDefaultTypeInternal _InnerGameEventRebirthFriendsvr_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventWakeup::InnerGameEventWakeup(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct InnerGameEventWakeupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventWakeupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventWakeupDefaultTypeInternal() {}
  union {
    InnerGameEventWakeup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventWakeupDefaultTypeInternal _InnerGameEventWakeup_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventWakeupTeamsvr::InnerGameEventWakeupTeamsvr(
    ::_pbi::ConstantInitialized)
  : brief_(nullptr)
  , extd1_(nullptr)
  , extd2_(nullptr)
  , extd3_(nullptr)
  , f33_(nullptr)
  , f55_(nullptr)
  , scenehashid_(0u){}
struct InnerGameEventWakeupTeamsvrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventWakeupTeamsvrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventWakeupTeamsvrDefaultTypeInternal() {}
  union {
    InnerGameEventWakeupTeamsvr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventWakeupTeamsvrDefaultTypeInternal _InnerGameEventWakeupTeamsvr_default_instance_;
PROTOBUF_CONSTEXPR InnerGameEventWakeupFriendsvr::InnerGameEventWakeupFriendsvr(
    ::_pbi::ConstantInitialized)
  : oinfo_(nullptr)
  , ogifts_(nullptr)
  , llteamid_(uint64_t{0u}){}
struct InnerGameEventWakeupFriendsvrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerGameEventWakeupFriendsvrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerGameEventWakeupFriendsvrDefaultTypeInternal() {}
  union {
    InnerGameEventWakeupFriendsvr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerGameEventWakeupFriendsvrDefaultTypeInternal _InnerGameEventWakeupFriendsvr_default_instance_;
}  // namespace inner
static ::_pb::Metadata file_level_metadata_innercommon_2eproto[47];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_innercommon_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_innercommon_2eproto = nullptr;

const uint32_t TableStruct_innercommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerRoleIdList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerRoleIdList, roleids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyTeamMem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyTeamMem, roleid_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyTeamMem, zoneidf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyTeam, roles_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyTeam, robots_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyTeamList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyTeamList, targetid_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyTeamList, teams_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyEnterByTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyEnterByChgLvId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyEnterByHome, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyEnter, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyEnter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyEnter, copylvid_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyEnter, eproc_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyEnter, threeid_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyEnter, voteid_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyEnter, teamlist_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyEnter, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyWayByMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyWayByMatch, mtype_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyWayByMatch, seasonid_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyWayByMatch, dayid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyWayByTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyWay, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyWay, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyWay, teamlist_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyWay, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyPvpF55, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyPvpF55, copyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyPvp, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyPvp, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyPvp, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyPve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyType, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyType, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyType, copylvid_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyType, eproc_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyType, threeid_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyType, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyCreateBy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyCreateBy, crit_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyCreateBy, copy_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyCreateBy, way_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyCrit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyCrit, hashidf_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyCrit, critid_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerCopyCrit, expire_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEvent, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventDestroy, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventDestroy, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventDestroy, server_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventDestroyTeamsvr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventDestryFriendsvr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventDestroyFamilysvr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventDestroyRanksvr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventLogin, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventLogin, server_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventLoginTeamsvr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventLoginTeamsvr, brief_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventLoginTeamsvr, extd1_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventLoginTeamsvr, extd2_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventLoginTeamsvr, extd3_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventLoginTeamsvr, f33_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventLoginTeamsvr, f55_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventLoginTeamsvr, scenehashid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventLoginFriendsvr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventLoginFriendsvr, oinfo_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventLoginFriendsvr, ogifts_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventLoginFriendsvr, llteamid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventLogout, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventLogout, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventLogout, server_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventLogoutTeamvr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventLogoutFriendsvr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventOnline, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventOnline, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventOnline, server_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventOnlineTeamsvr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventOnlineTeamsvr, extd2_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventOnlineTeamsvr, extd3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventOnlineFriendsvr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventOnlineFriendsvr, oinfo_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventOnlineFriendsvr, ogifts_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventOnlineFriendsvr, llteamid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventOffline, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventOffline, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventOffline, server_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventOfflineTeamsvr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventOfflineFriendsvr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventChangeMap, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventChangeMap, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventChangeMap, uiprocdirect_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventChangeMap, server_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventChangeMapTeamsvr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventChangeMapTeamsvr, brief_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventChangeMapTeamsvr, extd1_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventChangeMapTeamsvr, extd2_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventChangeMapTeamsvr, extd3_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventChangeMapTeamsvr, f33_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventChangeMapTeamsvr, f55_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventChangeMapTeamsvr, scenehashid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventChangeMapFriendsvr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventDeath, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventDeath, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventDeath, server_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventDeathTeamsvr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventDeathTeamsvr, extd3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventDeathFriendsvr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventRebirth, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventRebirth, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventRebirth, server_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventRebirthTeamsvr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventRebirthTeamsvr, extd2_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventRebirthTeamsvr, extd3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventRebirthFriendsvr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventWakeup, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventWakeup, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventWakeup, server_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventWakeupTeamsvr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventWakeupTeamsvr, brief_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventWakeupTeamsvr, extd1_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventWakeupTeamsvr, extd2_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventWakeupTeamsvr, extd3_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventWakeupTeamsvr, f33_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventWakeupTeamsvr, f55_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventWakeupTeamsvr, scenehashid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventWakeupFriendsvr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventWakeupFriendsvr, oinfo_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventWakeupFriendsvr, ogifts_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerGameEventWakeupFriendsvr, llteamid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::inner::InnerRoleIdList)},
  { 7, -1, -1, sizeof(::inner::InnerCopyTeamMem)},
  { 15, -1, -1, sizeof(::inner::InnerCopyTeam)},
  { 23, -1, -1, sizeof(::inner::InnerCopyTeamList)},
  { 31, -1, -1, sizeof(::inner::InnerCopyEnterByTeam)},
  { 37, -1, -1, sizeof(::inner::InnerCopyEnterByChgLvId)},
  { 43, -1, -1, sizeof(::inner::InnerCopyEnterByHome)},
  { 49, -1, -1, sizeof(::inner::InnerCopyEnter)},
  { 64, -1, -1, sizeof(::inner::InnerCopyWayByMatch)},
  { 73, -1, -1, sizeof(::inner::InnerCopyWayByTeam)},
  { 79, -1, -1, sizeof(::inner::InnerCopyWay)},
  { 89, -1, -1, sizeof(::inner::InnerCopyPvpF55)},
  { 96, -1, -1, sizeof(::inner::InnerCopyPvp)},
  { 104, -1, -1, sizeof(::inner::InnerCopyPve)},
  { 110, -1, -1, sizeof(::inner::InnerCopyType)},
  { 122, -1, -1, sizeof(::inner::InnerCopyCreateBy)},
  { 131, -1, -1, sizeof(::inner::InnerCopyCrit)},
  { 140, -1, -1, sizeof(::inner::InnerGameEvent)},
  { 156, -1, -1, sizeof(::inner::InnerGameEventDestroy)},
  { 167, -1, -1, sizeof(::inner::InnerGameEventDestroyTeamsvr)},
  { 173, -1, -1, sizeof(::inner::InnerGameEventDestryFriendsvr)},
  { 179, -1, -1, sizeof(::inner::InnerGameEventDestroyFamilysvr)},
  { 185, -1, -1, sizeof(::inner::InnerGameEventDestroyRanksvr)},
  { 191, -1, -1, sizeof(::inner::InnerGameEventLogin)},
  { 200, -1, -1, sizeof(::inner::InnerGameEventLoginTeamsvr)},
  { 213, -1, -1, sizeof(::inner::InnerGameEventLoginFriendsvr)},
  { 222, -1, -1, sizeof(::inner::InnerGameEventLogout)},
  { 231, -1, -1, sizeof(::inner::InnerGameEventLogoutTeamvr)},
  { 237, -1, -1, sizeof(::inner::InnerGameEventLogoutFriendsvr)},
  { 243, -1, -1, sizeof(::inner::InnerGameEventOnline)},
  { 252, -1, -1, sizeof(::inner::InnerGameEventOnlineTeamsvr)},
  { 260, -1, -1, sizeof(::inner::InnerGameEventOnlineFriendsvr)},
  { 269, -1, -1, sizeof(::inner::InnerGameEventOffline)},
  { 278, -1, -1, sizeof(::inner::InnerGameEventOfflineTeamsvr)},
  { 284, -1, -1, sizeof(::inner::InnerGameEventOfflineFriendsvr)},
  { 290, -1, -1, sizeof(::inner::InnerGameEventChangeMap)},
  { 300, -1, -1, sizeof(::inner::InnerGameEventChangeMapTeamsvr)},
  { 313, -1, -1, sizeof(::inner::InnerGameEventChangeMapFriendsvr)},
  { 319, -1, -1, sizeof(::inner::InnerGameEventDeath)},
  { 328, -1, -1, sizeof(::inner::InnerGameEventDeathTeamsvr)},
  { 335, -1, -1, sizeof(::inner::InnerGameEventDeathFriendsvr)},
  { 341, -1, -1, sizeof(::inner::InnerGameEventRebirth)},
  { 350, -1, -1, sizeof(::inner::InnerGameEventRebirthTeamsvr)},
  { 358, -1, -1, sizeof(::inner::InnerGameEventRebirthFriendsvr)},
  { 364, -1, -1, sizeof(::inner::InnerGameEventWakeup)},
  { 373, -1, -1, sizeof(::inner::InnerGameEventWakeupTeamsvr)},
  { 386, -1, -1, sizeof(::inner::InnerGameEventWakeupFriendsvr)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::inner::_InnerRoleIdList_default_instance_._instance,
  &::inner::_InnerCopyTeamMem_default_instance_._instance,
  &::inner::_InnerCopyTeam_default_instance_._instance,
  &::inner::_InnerCopyTeamList_default_instance_._instance,
  &::inner::_InnerCopyEnterByTeam_default_instance_._instance,
  &::inner::_InnerCopyEnterByChgLvId_default_instance_._instance,
  &::inner::_InnerCopyEnterByHome_default_instance_._instance,
  &::inner::_InnerCopyEnter_default_instance_._instance,
  &::inner::_InnerCopyWayByMatch_default_instance_._instance,
  &::inner::_InnerCopyWayByTeam_default_instance_._instance,
  &::inner::_InnerCopyWay_default_instance_._instance,
  &::inner::_InnerCopyPvpF55_default_instance_._instance,
  &::inner::_InnerCopyPvp_default_instance_._instance,
  &::inner::_InnerCopyPve_default_instance_._instance,
  &::inner::_InnerCopyType_default_instance_._instance,
  &::inner::_InnerCopyCreateBy_default_instance_._instance,
  &::inner::_InnerCopyCrit_default_instance_._instance,
  &::inner::_InnerGameEvent_default_instance_._instance,
  &::inner::_InnerGameEventDestroy_default_instance_._instance,
  &::inner::_InnerGameEventDestroyTeamsvr_default_instance_._instance,
  &::inner::_InnerGameEventDestryFriendsvr_default_instance_._instance,
  &::inner::_InnerGameEventDestroyFamilysvr_default_instance_._instance,
  &::inner::_InnerGameEventDestroyRanksvr_default_instance_._instance,
  &::inner::_InnerGameEventLogin_default_instance_._instance,
  &::inner::_InnerGameEventLoginTeamsvr_default_instance_._instance,
  &::inner::_InnerGameEventLoginFriendsvr_default_instance_._instance,
  &::inner::_InnerGameEventLogout_default_instance_._instance,
  &::inner::_InnerGameEventLogoutTeamvr_default_instance_._instance,
  &::inner::_InnerGameEventLogoutFriendsvr_default_instance_._instance,
  &::inner::_InnerGameEventOnline_default_instance_._instance,
  &::inner::_InnerGameEventOnlineTeamsvr_default_instance_._instance,
  &::inner::_InnerGameEventOnlineFriendsvr_default_instance_._instance,
  &::inner::_InnerGameEventOffline_default_instance_._instance,
  &::inner::_InnerGameEventOfflineTeamsvr_default_instance_._instance,
  &::inner::_InnerGameEventOfflineFriendsvr_default_instance_._instance,
  &::inner::_InnerGameEventChangeMap_default_instance_._instance,
  &::inner::_InnerGameEventChangeMapTeamsvr_default_instance_._instance,
  &::inner::_InnerGameEventChangeMapFriendsvr_default_instance_._instance,
  &::inner::_InnerGameEventDeath_default_instance_._instance,
  &::inner::_InnerGameEventDeathTeamsvr_default_instance_._instance,
  &::inner::_InnerGameEventDeathFriendsvr_default_instance_._instance,
  &::inner::_InnerGameEventRebirth_default_instance_._instance,
  &::inner::_InnerGameEventRebirthTeamsvr_default_instance_._instance,
  &::inner::_InnerGameEventRebirthFriendsvr_default_instance_._instance,
  &::inner::_InnerGameEventWakeup_default_instance_._instance,
  &::inner::_InnerGameEventWakeupTeamsvr_default_instance_._instance,
  &::inner::_InnerGameEventWakeupFriendsvr_default_instance_._instance,
};

const char descriptor_table_protodef_innercommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021innercommon.proto\022\005inner\032\014common.proto"
  "\032\024fight3v3common.proto\032\024fight5v5common.p"
  "roto\032\021innerfriend.proto\"\"\n\017InnerRoleIdLi"
  "st\022\017\n\007roleIds\030\001 \003(\004\"3\n\020InnerCopyTeamMem\022"
  "\016\n\006roleId\030\001 \001(\004\022\017\n\007zoneIdF\030\002 \001(\r\"`\n\rInne"
  "rCopyTeam\022&\n\005roles\030\001 \003(\0132\027.inner.InnerCo"
  "pyTeamMem\022\'\n\006robots\030\002 \003(\0132\027.inner.InnerC"
  "opyTeamMem\"J\n\021InnerCopyTeamList\022\020\n\010targe"
  "tId\030\001 \001(\r\022#\n\005teams\030\002 \003(\0132\024.inner.InnerCo"
  "pyTeam\"\026\n\024InnerCopyEnterByTeam\"\031\n\027InnerC"
  "opyEnterByChgLvId\"\026\n\024InnerCopyEnterByHom"
  "e\"\223\002\n\016InnerCopyEnter\022\020\n\010copyLvId\030\001 \001(\r\022\r"
  "\n\005eProc\030\002 \001(\r\022\017\n\007threeId\030\003 \001(\r\022\016\n\006voteId"
  "\030\004 \001(\r\022*\n\010teamList\030\005 \001(\0132\030.inner.InnerCo"
  "pyTeamList\022+\n\004team\030\013 \001(\0132\033.inner.InnerCo"
  "pyEnterByTeamH\000\0221\n\007chgLvId\030\014 \001(\0132\036.inner"
  ".InnerCopyEnterByChgLvIdH\000\022+\n\004home\030\r \001(\013"
  "2\033.inner.InnerCopyEnterByHomeH\000B\006\n\004type\""
  "E\n\023InnerCopyWayByMatch\022\r\n\005mtype\030\001 \001(\r\022\020\n"
  "\010seasonId\030\002 \001(\r\022\r\n\005dayId\030\003 \001(\r\"\024\n\022InnerC"
  "opyWayByTeam\"\236\001\n\014InnerCopyWay\022*\n\010teamLis"
  "t\030\001 \001(\0132\030.inner.InnerCopyTeamList\022-\n\007byM"
  "atch\030\013 \001(\0132\032.inner.InnerCopyWayByMatchH\000"
  "\022+\n\006byTeam\030\014 \001(\0132\031.inner.InnerCopyWayByT"
  "eamH\000B\006\n\004type\"!\n\017InnerCopyPvpF55\022\016\n\006copy"
  "Id\030\001 \001(\r\"=\n\014InnerCopyPvp\022%\n\003f55\030\013 \001(\0132\026."
  "inner.InnerCopyPvpF55H\000B\006\n\004type\"\016\n\014Inner"
  "CopyPve\"\221\001\n\rInnerCopyType\022\020\n\010copyLvId\030\001 "
  "\001(\r\022\r\n\005eProc\030\002 \001(\r\022\017\n\007threeId\030\003 \001(\r\022\"\n\003p"
  "vp\030\013 \001(\0132\023.inner.InnerCopyPvpH\000\022\"\n\003pve\030\014"
  " \001(\0132\023.inner.InnerCopyPveH\000B\006\n\004type\"}\n\021I"
  "nnerCopyCreateBy\022\"\n\004crit\030\001 \001(\0132\024.inner.I"
  "nnerCopyCrit\022\"\n\004copy\030\002 \001(\0132\024.inner.Inner"
  "CopyType\022 \n\003way\030\003 \001(\0132\023.inner.InnerCopyW"
  "ay\"@\n\rInnerCopyCrit\022\017\n\007hashIdF\030\001 \001(\r\022\016\n\006"
  "critId\030\002 \001(\004\022\016\n\006expire\030\003 \001(\r\"\307\003\n\016InnerGa"
  "meEvent\022/\n\007destroy\030\001 \001(\0132\034.inner.InnerGa"
  "meEventDestroyH\000\022+\n\005login\030\002 \001(\0132\032.inner."
  "InnerGameEventLoginH\000\022-\n\006logout\030\003 \001(\0132\033."
  "inner.InnerGameEventLogoutH\000\022-\n\006online\030\004"
  " \001(\0132\033.inner.InnerGameEventOnlineH\000\022/\n\007o"
  "ffline\030\005 \001(\0132\034.inner.InnerGameEventOffli"
  "neH\000\0223\n\tchangemap\030\006 \001(\0132\036.inner.InnerGam"
  "eEventChangeMapH\000\022+\n\005death\030\007 \001(\0132\032.inner"
  ".InnerGameEventDeathH\000\022/\n\007rebirth\030\010 \001(\0132"
  "\034.inner.InnerGameEventRebirthH\000\022-\n\006wakeu"
  "p\030\t \001(\0132\033.inner.InnerGameEventWakeupH\000B\006"
  "\n\004type\"\210\002\n\025InnerGameEventDestroy\0226\n\007team"
  "svr\030\001 \001(\0132#.inner.InnerGameEventDestroyT"
  "eamsvrH\000\0229\n\tfriendsvr\030\002 \001(\0132$.inner.Inne"
  "rGameEventDestryFriendsvrH\000\022:\n\tfamilysvr"
  "\030\003 \001(\0132%.inner.InnerGameEventDestroyFami"
  "lysvrH\000\0226\n\007ranksvr\030\004 \001(\0132#.inner.InnerGa"
  "meEventDestroyRanksvrH\000B\010\n\006server\"\036\n\034Inn"
  "erGameEventDestroyTeamsvr\"\037\n\035InnerGameEv"
  "entDestryFriendsvr\" \n\036InnerGameEventDest"
  "royFamilysvr\"\036\n\034InnerGameEventDestroyRan"
  "ksvr\"\217\001\n\023InnerGameEventLogin\0224\n\007teamsvr\030"
  "\001 \001(\0132!.inner.InnerGameEventLoginTeamsvr"
  "H\000\0228\n\tfriendsvr\030\002 \001(\0132#.inner.InnerGameE"
  "ventLoginFriendsvrH\000B\010\n\006server\"\211\002\n\032Inner"
  "GameEventLoginTeamsvr\022 \n\005brief\030\001 \001(\0132\021.c"
  "ommon.RoleBrief\022\"\n\005extd1\030\002 \001(\0132\023.common."
  "RoleExtend1\022\"\n\005extd2\030\003 \001(\0132\023.common.Role"
  "Extend2\022\"\n\005extd3\030\004 \001(\0132\023.common.RoleExte"
  "nd3\022#\n\003f33\030\005 \001(\0132\026.common.ExtendFight3v3"
  "\022#\n\003f55\030\006 \001(\0132\026.common.ExtendFight5v5\022\023\n"
  "\013sceneHashId\030\007 \001(\r\"\203\001\n\034InnerGameEventLog"
  "inFriendsvr\022%\n\005oInfo\030\001 \001(\0132\026.inner.Inner"
  "FriendInfo\022*\n\006oGifts\030\002 \001(\0132\032.inner.Inner"
  "FriendGiftList\022\020\n\010llTeamId\030\003 \001(\004\"\221\001\n\024Inn"
  "erGameEventLogout\0224\n\007teamsvr\030\001 \001(\0132!.inn"
  "er.InnerGameEventLogoutTeamvrH\000\0229\n\tfrien"
  "dsvr\030\002 \001(\0132$.inner.InnerGameEventLogoutF"
  "riendsvrH\000B\010\n\006server\"\034\n\032InnerGameEventLo"
  "goutTeamvr\"\037\n\035InnerGameEventLogoutFriend"
  "svr\"\222\001\n\024InnerGameEventOnline\0225\n\007teamsvr\030"
  "\001 \001(\0132\".inner.InnerGameEventOnlineTeamsv"
  "rH\000\0229\n\tfriendsvr\030\002 \001(\0132$.inner.InnerGame"
  "EventOnlineFriendsvrH\000B\010\n\006server\"e\n\033Inne"
  "rGameEventOnlineTeamsvr\022\"\n\005extd2\030\001 \001(\0132\023"
  ".common.RoleExtend2\022\"\n\005extd3\030\002 \001(\0132\023.com"
  "mon.RoleExtend3\"\204\001\n\035InnerGameEventOnline"
  "Friendsvr\022%\n\005oInfo\030\001 \001(\0132\026.inner.InnerFr"
  "iendInfo\022*\n\006oGifts\030\002 \001(\0132\032.inner.InnerFr"
  "iendGiftList\022\020\n\010llTeamId\030\003 \001(\004\"\225\001\n\025Inner"
  "GameEventOffline\0226\n\007teamsvr\030\001 \001(\0132#.inne"
  "r.InnerGameEventOfflineTeamsvrH\000\022:\n\tfrie"
  "ndsvr\030\002 \001(\0132%.inner.InnerGameEventOfflin"
  "eFriendsvrH\000B\010\n\006server\"\036\n\034InnerGameEvent"
  "OfflineTeamsvr\" \n\036InnerGameEventOfflineF"
  "riendsvr\"\261\001\n\027InnerGameEventChangeMap\0228\n\007"
  "teamsvr\030\001 \001(\0132%.inner.InnerGameEventChan"
  "geMapTeamsvrH\000\022<\n\tfriendsvr\030\002 \001(\0132\'.inne"
  "r.InnerGameEventChangeMapFriendsvrH\000\022\024\n\014"
  "uiProcDirect\030d \001(\rB\010\n\006server\"\215\002\n\036InnerGa"
  "meEventChangeMapTeamsvr\022 \n\005brief\030\001 \001(\0132\021"
  ".common.RoleBrief\022\"\n\005extd1\030\002 \001(\0132\023.commo"
  "n.RoleExtend1\022\"\n\005extd2\030\003 \001(\0132\023.common.Ro"
  "leExtend2\022\"\n\005extd3\030\004 \001(\0132\023.common.RoleEx"
  "tend3\022#\n\003f33\030\005 \001(\0132\026.common.ExtendFight3"
  "v3\022#\n\003f55\030\006 \001(\0132\026.common.ExtendFight5v5\022"
  "\023\n\013sceneHashId\030\007 \001(\r\"\"\n InnerGameEventCh"
  "angeMapFriendsvr\"\217\001\n\023InnerGameEventDeath"
  "\0224\n\007teamsvr\030\001 \001(\0132!.inner.InnerGameEvent"
  "DeathTeamsvrH\000\0228\n\tfriendsvr\030\002 \001(\0132#.inne"
  "r.InnerGameEventDeathFriendsvrH\000B\010\n\006serv"
  "er\"@\n\032InnerGameEventDeathTeamsvr\022\"\n\005extd"
  "3\030\001 \001(\0132\023.common.RoleExtend3\"\036\n\034InnerGam"
  "eEventDeathFriendsvr\"\225\001\n\025InnerGameEventR"
  "ebirth\0226\n\007teamsvr\030\001 \001(\0132#.inner.InnerGam"
  "eEventRebirthTeamsvrH\000\022:\n\tfriendsvr\030\002 \001("
  "\0132%.inner.InnerGameEventRebirthFriendsvr"
  "H\000B\010\n\006server\"f\n\034InnerGameEventRebirthTea"
  "msvr\022\"\n\005extd2\030\001 \001(\0132\023.common.RoleExtend2"
  "\022\"\n\005extd3\030\002 \001(\0132\023.common.RoleExtend3\" \n\036"
  "InnerGameEventRebirthFriendsvr\"\222\001\n\024Inner"
  "GameEventWakeup\0225\n\007teamsvr\030\001 \001(\0132\".inner"
  ".InnerGameEventWakeupTeamsvrH\000\0229\n\tfriend"
  "svr\030\002 \001(\0132$.inner.InnerGameEventWakeupFr"
  "iendsvrH\000B\010\n\006server\"\212\002\n\033InnerGameEventWa"
  "keupTeamsvr\022 \n\005brief\030\001 \001(\0132\021.common.Role"
  "Brief\022\"\n\005extd1\030\002 \001(\0132\023.common.RoleExtend"
  "1\022\"\n\005extd2\030\003 \001(\0132\023.common.RoleExtend2\022\"\n"
  "\005extd3\030\004 \001(\0132\023.common.RoleExtend3\022#\n\003f33"
  "\030\005 \001(\0132\026.common.ExtendFight3v3\022#\n\003f55\030\006 "
  "\001(\0132\026.common.ExtendFight5v5\022\023\n\013sceneHash"
  "Id\030\007 \001(\r\"\204\001\n\035InnerGameEventWakeupFriends"
  "vr\022%\n\005oInfo\030\001 \001(\0132\026.inner.InnerFriendInf"
  "o\022*\n\006oGifts\030\002 \001(\0132\032.inner.InnerFriendGif"
  "tList\022\020\n\010llTeamId\030\003 \001(\004b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_innercommon_2eproto_deps[4] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_fight3v3common_2eproto,
  &::descriptor_table_fight5v5common_2eproto,
  &::descriptor_table_innerfriend_2eproto,
};
static ::_pbi::once_flag descriptor_table_innercommon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_innercommon_2eproto = {
    false, false, 5231, descriptor_table_protodef_innercommon_2eproto,
    "innercommon.proto",
    &descriptor_table_innercommon_2eproto_once, descriptor_table_innercommon_2eproto_deps, 4, 47,
    schemas, file_default_instances, TableStruct_innercommon_2eproto::offsets,
    file_level_metadata_innercommon_2eproto, file_level_enum_descriptors_innercommon_2eproto,
    file_level_service_descriptors_innercommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_innercommon_2eproto_getter() {
  return &descriptor_table_innercommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_innercommon_2eproto(&descriptor_table_innercommon_2eproto);
namespace inner {

// ===================================================================

class InnerRoleIdList::_Internal {
 public:
};

InnerRoleIdList::InnerRoleIdList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  roleids_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerRoleIdList)
}
InnerRoleIdList::InnerRoleIdList(const InnerRoleIdList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roleids_(from.roleids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inner.InnerRoleIdList)
}

inline void InnerRoleIdList::SharedCtor() {
}

InnerRoleIdList::~InnerRoleIdList() {
  // @@protoc_insertion_point(destructor:inner.InnerRoleIdList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerRoleIdList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InnerRoleIdList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerRoleIdList::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerRoleIdList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roleids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerRoleIdList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 roleIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_roleids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_roleids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerRoleIdList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerRoleIdList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 roleIds = 1;
  {
    int byte_size = _roleids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_roleids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerRoleIdList)
  return target;
}

size_t InnerRoleIdList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerRoleIdList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 roleIds = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->roleids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _roleids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerRoleIdList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerRoleIdList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerRoleIdList::GetClassData() const { return &_class_data_; }

void InnerRoleIdList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerRoleIdList *>(to)->MergeFrom(
      static_cast<const InnerRoleIdList &>(from));
}


void InnerRoleIdList::MergeFrom(const InnerRoleIdList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerRoleIdList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  roleids_.MergeFrom(from.roleids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerRoleIdList::CopyFrom(const InnerRoleIdList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerRoleIdList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerRoleIdList::IsInitialized() const {
  return true;
}

void InnerRoleIdList::InternalSwap(InnerRoleIdList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  roleids_.InternalSwap(&other->roleids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerRoleIdList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[0]);
}

// ===================================================================

class InnerCopyTeamMem::_Internal {
 public:
};

InnerCopyTeamMem::InnerCopyTeamMem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerCopyTeamMem)
}
InnerCopyTeamMem::InnerCopyTeamMem(const InnerCopyTeamMem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&zoneidf_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(zoneidf_));
  // @@protoc_insertion_point(copy_constructor:inner.InnerCopyTeamMem)
}

inline void InnerCopyTeamMem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roleid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&zoneidf_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(zoneidf_));
}

InnerCopyTeamMem::~InnerCopyTeamMem() {
  // @@protoc_insertion_point(destructor:inner.InnerCopyTeamMem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerCopyTeamMem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InnerCopyTeamMem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerCopyTeamMem::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerCopyTeamMem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zoneidf_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(zoneidf_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerCopyTeamMem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 roleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 zoneIdF = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          zoneidf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerCopyTeamMem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerCopyTeamMem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roleId = 1;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // uint32 zoneIdF = 2;
  if (this->_internal_zoneidf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_zoneidf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerCopyTeamMem)
  return target;
}

size_t InnerCopyTeamMem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerCopyTeamMem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 roleId = 1;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
  }

  // uint32 zoneIdF = 2;
  if (this->_internal_zoneidf() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_zoneidf());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerCopyTeamMem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerCopyTeamMem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerCopyTeamMem::GetClassData() const { return &_class_data_; }

void InnerCopyTeamMem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerCopyTeamMem *>(to)->MergeFrom(
      static_cast<const InnerCopyTeamMem &>(from));
}


void InnerCopyTeamMem::MergeFrom(const InnerCopyTeamMem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerCopyTeamMem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_zoneidf() != 0) {
    _internal_set_zoneidf(from._internal_zoneidf());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerCopyTeamMem::CopyFrom(const InnerCopyTeamMem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerCopyTeamMem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerCopyTeamMem::IsInitialized() const {
  return true;
}

void InnerCopyTeamMem::InternalSwap(InnerCopyTeamMem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InnerCopyTeamMem, zoneidf_)
      + sizeof(InnerCopyTeamMem::zoneidf_)
      - PROTOBUF_FIELD_OFFSET(InnerCopyTeamMem, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerCopyTeamMem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[1]);
}

// ===================================================================

class InnerCopyTeam::_Internal {
 public:
};

InnerCopyTeam::InnerCopyTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  roles_(arena),
  robots_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerCopyTeam)
}
InnerCopyTeam::InnerCopyTeam(const InnerCopyTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roles_(from.roles_),
      robots_(from.robots_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inner.InnerCopyTeam)
}

inline void InnerCopyTeam::SharedCtor() {
}

InnerCopyTeam::~InnerCopyTeam() {
  // @@protoc_insertion_point(destructor:inner.InnerCopyTeam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerCopyTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InnerCopyTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerCopyTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerCopyTeam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  robots_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerCopyTeam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .inner.InnerCopyTeamMem roles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .inner.InnerCopyTeamMem robots = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_robots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerCopyTeam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerCopyTeam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .inner.InnerCopyTeamMem roles = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_roles_size()); i < n; i++) {
    const auto& repfield = this->_internal_roles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .inner.InnerCopyTeamMem robots = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_robots_size()); i < n; i++) {
    const auto& repfield = this->_internal_robots(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerCopyTeam)
  return target;
}

size_t InnerCopyTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerCopyTeam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .inner.InnerCopyTeamMem roles = 1;
  total_size += 1UL * this->_internal_roles_size();
  for (const auto& msg : this->roles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .inner.InnerCopyTeamMem robots = 2;
  total_size += 1UL * this->_internal_robots_size();
  for (const auto& msg : this->robots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerCopyTeam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerCopyTeam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerCopyTeam::GetClassData() const { return &_class_data_; }

void InnerCopyTeam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerCopyTeam *>(to)->MergeFrom(
      static_cast<const InnerCopyTeam &>(from));
}


void InnerCopyTeam::MergeFrom(const InnerCopyTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerCopyTeam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  robots_.MergeFrom(from.robots_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerCopyTeam::CopyFrom(const InnerCopyTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerCopyTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerCopyTeam::IsInitialized() const {
  return true;
}

void InnerCopyTeam::InternalSwap(InnerCopyTeam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  roles_.InternalSwap(&other->roles_);
  robots_.InternalSwap(&other->robots_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerCopyTeam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[2]);
}

// ===================================================================

class InnerCopyTeamList::_Internal {
 public:
};

InnerCopyTeamList::InnerCopyTeamList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  teams_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerCopyTeamList)
}
InnerCopyTeamList::InnerCopyTeamList(const InnerCopyTeamList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      teams_(from.teams_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  targetid_ = from.targetid_;
  // @@protoc_insertion_point(copy_constructor:inner.InnerCopyTeamList)
}

inline void InnerCopyTeamList::SharedCtor() {
targetid_ = 0u;
}

InnerCopyTeamList::~InnerCopyTeamList() {
  // @@protoc_insertion_point(destructor:inner.InnerCopyTeamList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerCopyTeamList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InnerCopyTeamList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerCopyTeamList::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerCopyTeamList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  targetid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerCopyTeamList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 targetId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .inner.InnerCopyTeam teams = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerCopyTeamList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerCopyTeamList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 targetId = 1;
  if (this->_internal_targetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_targetid(), target);
  }

  // repeated .inner.InnerCopyTeam teams = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_teams_size()); i < n; i++) {
    const auto& repfield = this->_internal_teams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerCopyTeamList)
  return target;
}

size_t InnerCopyTeamList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerCopyTeamList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .inner.InnerCopyTeam teams = 2;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 targetId = 1;
  if (this->_internal_targetid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_targetid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerCopyTeamList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerCopyTeamList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerCopyTeamList::GetClassData() const { return &_class_data_; }

void InnerCopyTeamList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerCopyTeamList *>(to)->MergeFrom(
      static_cast<const InnerCopyTeamList &>(from));
}


void InnerCopyTeamList::MergeFrom(const InnerCopyTeamList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerCopyTeamList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  if (from._internal_targetid() != 0) {
    _internal_set_targetid(from._internal_targetid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerCopyTeamList::CopyFrom(const InnerCopyTeamList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerCopyTeamList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerCopyTeamList::IsInitialized() const {
  return true;
}

void InnerCopyTeamList::InternalSwap(InnerCopyTeamList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  teams_.InternalSwap(&other->teams_);
  swap(targetid_, other->targetid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerCopyTeamList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[3]);
}

// ===================================================================

class InnerCopyEnterByTeam::_Internal {
 public:
};

InnerCopyEnterByTeam::InnerCopyEnterByTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:inner.InnerCopyEnterByTeam)
}
InnerCopyEnterByTeam::InnerCopyEnterByTeam(const InnerCopyEnterByTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inner.InnerCopyEnterByTeam)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerCopyEnterByTeam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerCopyEnterByTeam::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata InnerCopyEnterByTeam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[4]);
}

// ===================================================================

class InnerCopyEnterByChgLvId::_Internal {
 public:
};

InnerCopyEnterByChgLvId::InnerCopyEnterByChgLvId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:inner.InnerCopyEnterByChgLvId)
}
InnerCopyEnterByChgLvId::InnerCopyEnterByChgLvId(const InnerCopyEnterByChgLvId& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inner.InnerCopyEnterByChgLvId)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerCopyEnterByChgLvId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerCopyEnterByChgLvId::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata InnerCopyEnterByChgLvId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[5]);
}

// ===================================================================

class InnerCopyEnterByHome::_Internal {
 public:
};

InnerCopyEnterByHome::InnerCopyEnterByHome(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:inner.InnerCopyEnterByHome)
}
InnerCopyEnterByHome::InnerCopyEnterByHome(const InnerCopyEnterByHome& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inner.InnerCopyEnterByHome)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerCopyEnterByHome::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerCopyEnterByHome::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata InnerCopyEnterByHome::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[6]);
}

// ===================================================================

class InnerCopyEnter::_Internal {
 public:
  static const ::inner::InnerCopyTeamList& teamlist(const InnerCopyEnter* msg);
  static const ::inner::InnerCopyEnterByTeam& team(const InnerCopyEnter* msg);
  static const ::inner::InnerCopyEnterByChgLvId& chglvid(const InnerCopyEnter* msg);
  static const ::inner::InnerCopyEnterByHome& home(const InnerCopyEnter* msg);
};

const ::inner::InnerCopyTeamList&
InnerCopyEnter::_Internal::teamlist(const InnerCopyEnter* msg) {
  return *msg->teamlist_;
}
const ::inner::InnerCopyEnterByTeam&
InnerCopyEnter::_Internal::team(const InnerCopyEnter* msg) {
  return *msg->type_.team_;
}
const ::inner::InnerCopyEnterByChgLvId&
InnerCopyEnter::_Internal::chglvid(const InnerCopyEnter* msg) {
  return *msg->type_.chglvid_;
}
const ::inner::InnerCopyEnterByHome&
InnerCopyEnter::_Internal::home(const InnerCopyEnter* msg) {
  return *msg->type_.home_;
}
void InnerCopyEnter::set_allocated_team(::inner::InnerCopyEnterByTeam* team) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (team) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(team);
    if (message_arena != submessage_arena) {
      team = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, team, submessage_arena);
    }
    set_has_team();
    type_.team_ = team;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerCopyEnter.team)
}
void InnerCopyEnter::set_allocated_chglvid(::inner::InnerCopyEnterByChgLvId* chglvid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (chglvid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chglvid);
    if (message_arena != submessage_arena) {
      chglvid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chglvid, submessage_arena);
    }
    set_has_chglvid();
    type_.chglvid_ = chglvid;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerCopyEnter.chgLvId)
}
void InnerCopyEnter::set_allocated_home(::inner::InnerCopyEnterByHome* home) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (home) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(home);
    if (message_arena != submessage_arena) {
      home = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, home, submessage_arena);
    }
    set_has_home();
    type_.home_ = home;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerCopyEnter.home)
}
InnerCopyEnter::InnerCopyEnter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerCopyEnter)
}
InnerCopyEnter::InnerCopyEnter(const InnerCopyEnter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_teamlist()) {
    teamlist_ = new ::inner::InnerCopyTeamList(*from.teamlist_);
  } else {
    teamlist_ = nullptr;
  }
  ::memcpy(&copylvid_, &from.copylvid_,
    static_cast<size_t>(reinterpret_cast<char*>(&voteid_) -
    reinterpret_cast<char*>(&copylvid_)) + sizeof(voteid_));
  clear_has_type();
  switch (from.type_case()) {
    case kTeam: {
      _internal_mutable_team()->::inner::InnerCopyEnterByTeam::MergeFrom(from._internal_team());
      break;
    }
    case kChgLvId: {
      _internal_mutable_chglvid()->::inner::InnerCopyEnterByChgLvId::MergeFrom(from._internal_chglvid());
      break;
    }
    case kHome: {
      _internal_mutable_home()->::inner::InnerCopyEnterByHome::MergeFrom(from._internal_home());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:inner.InnerCopyEnter)
}

inline void InnerCopyEnter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&teamlist_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&voteid_) -
    reinterpret_cast<char*>(&teamlist_)) + sizeof(voteid_));
clear_has_type();
}

InnerCopyEnter::~InnerCopyEnter() {
  // @@protoc_insertion_point(destructor:inner.InnerCopyEnter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerCopyEnter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete teamlist_;
  if (has_type()) {
    clear_type();
  }
}

void InnerCopyEnter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerCopyEnter::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:inner.InnerCopyEnter)
  switch (type_case()) {
    case kTeam: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.team_;
      }
      break;
    }
    case kChgLvId: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.chglvid_;
      }
      break;
    }
    case kHome: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.home_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void InnerCopyEnter::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerCopyEnter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && teamlist_ != nullptr) {
    delete teamlist_;
  }
  teamlist_ = nullptr;
  ::memset(&copylvid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voteid_) -
      reinterpret_cast<char*>(&copylvid_)) + sizeof(voteid_));
  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerCopyEnter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 copyLvId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          copylvid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 eProc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          eproc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 threeId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          threeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voteId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          voteid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerCopyTeamList teamList = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_teamlist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerCopyEnterByTeam team = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_team(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerCopyEnterByChgLvId chgLvId = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_chglvid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerCopyEnterByHome home = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_home(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerCopyEnter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerCopyEnter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 copyLvId = 1;
  if (this->_internal_copylvid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_copylvid(), target);
  }

  // uint32 eProc = 2;
  if (this->_internal_eproc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_eproc(), target);
  }

  // uint32 threeId = 3;
  if (this->_internal_threeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_threeid(), target);
  }

  // uint32 voteId = 4;
  if (this->_internal_voteid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_voteid(), target);
  }

  // .inner.InnerCopyTeamList teamList = 5;
  if (this->_internal_has_teamlist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::teamlist(this),
        _Internal::teamlist(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerCopyEnterByTeam team = 11;
  if (_internal_has_team()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::team(this),
        _Internal::team(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerCopyEnterByChgLvId chgLvId = 12;
  if (_internal_has_chglvid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::chglvid(this),
        _Internal::chglvid(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerCopyEnterByHome home = 13;
  if (_internal_has_home()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::home(this),
        _Internal::home(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerCopyEnter)
  return target;
}

size_t InnerCopyEnter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerCopyEnter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .inner.InnerCopyTeamList teamList = 5;
  if (this->_internal_has_teamlist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *teamlist_);
  }

  // uint32 copyLvId = 1;
  if (this->_internal_copylvid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_copylvid());
  }

  // uint32 eProc = 2;
  if (this->_internal_eproc() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_eproc());
  }

  // uint32 threeId = 3;
  if (this->_internal_threeid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_threeid());
  }

  // uint32 voteId = 4;
  if (this->_internal_voteid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_voteid());
  }

  switch (type_case()) {
    // .inner.InnerCopyEnterByTeam team = 11;
    case kTeam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.team_);
      break;
    }
    // .inner.InnerCopyEnterByChgLvId chgLvId = 12;
    case kChgLvId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.chglvid_);
      break;
    }
    // .inner.InnerCopyEnterByHome home = 13;
    case kHome: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.home_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerCopyEnter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerCopyEnter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerCopyEnter::GetClassData() const { return &_class_data_; }

void InnerCopyEnter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerCopyEnter *>(to)->MergeFrom(
      static_cast<const InnerCopyEnter &>(from));
}


void InnerCopyEnter::MergeFrom(const InnerCopyEnter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerCopyEnter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_teamlist()) {
    _internal_mutable_teamlist()->::inner::InnerCopyTeamList::MergeFrom(from._internal_teamlist());
  }
  if (from._internal_copylvid() != 0) {
    _internal_set_copylvid(from._internal_copylvid());
  }
  if (from._internal_eproc() != 0) {
    _internal_set_eproc(from._internal_eproc());
  }
  if (from._internal_threeid() != 0) {
    _internal_set_threeid(from._internal_threeid());
  }
  if (from._internal_voteid() != 0) {
    _internal_set_voteid(from._internal_voteid());
  }
  switch (from.type_case()) {
    case kTeam: {
      _internal_mutable_team()->::inner::InnerCopyEnterByTeam::MergeFrom(from._internal_team());
      break;
    }
    case kChgLvId: {
      _internal_mutable_chglvid()->::inner::InnerCopyEnterByChgLvId::MergeFrom(from._internal_chglvid());
      break;
    }
    case kHome: {
      _internal_mutable_home()->::inner::InnerCopyEnterByHome::MergeFrom(from._internal_home());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerCopyEnter::CopyFrom(const InnerCopyEnter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerCopyEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerCopyEnter::IsInitialized() const {
  return true;
}

void InnerCopyEnter::InternalSwap(InnerCopyEnter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InnerCopyEnter, voteid_)
      + sizeof(InnerCopyEnter::voteid_)
      - PROTOBUF_FIELD_OFFSET(InnerCopyEnter, teamlist_)>(
          reinterpret_cast<char*>(&teamlist_),
          reinterpret_cast<char*>(&other->teamlist_));
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerCopyEnter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[7]);
}

// ===================================================================

class InnerCopyWayByMatch::_Internal {
 public:
};

InnerCopyWayByMatch::InnerCopyWayByMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerCopyWayByMatch)
}
InnerCopyWayByMatch::InnerCopyWayByMatch(const InnerCopyWayByMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mtype_, &from.mtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&dayid_) -
    reinterpret_cast<char*>(&mtype_)) + sizeof(dayid_));
  // @@protoc_insertion_point(copy_constructor:inner.InnerCopyWayByMatch)
}

inline void InnerCopyWayByMatch::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mtype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dayid_) -
    reinterpret_cast<char*>(&mtype_)) + sizeof(dayid_));
}

InnerCopyWayByMatch::~InnerCopyWayByMatch() {
  // @@protoc_insertion_point(destructor:inner.InnerCopyWayByMatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerCopyWayByMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InnerCopyWayByMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerCopyWayByMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerCopyWayByMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dayid_) -
      reinterpret_cast<char*>(&mtype_)) + sizeof(dayid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerCopyWayByMatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 mtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          mtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 seasonId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          seasonid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dayId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          dayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerCopyWayByMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerCopyWayByMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mtype = 1;
  if (this->_internal_mtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mtype(), target);
  }

  // uint32 seasonId = 2;
  if (this->_internal_seasonid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_seasonid(), target);
  }

  // uint32 dayId = 3;
  if (this->_internal_dayid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_dayid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerCopyWayByMatch)
  return target;
}

size_t InnerCopyWayByMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerCopyWayByMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 mtype = 1;
  if (this->_internal_mtype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mtype());
  }

  // uint32 seasonId = 2;
  if (this->_internal_seasonid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_seasonid());
  }

  // uint32 dayId = 3;
  if (this->_internal_dayid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dayid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerCopyWayByMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerCopyWayByMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerCopyWayByMatch::GetClassData() const { return &_class_data_; }

void InnerCopyWayByMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerCopyWayByMatch *>(to)->MergeFrom(
      static_cast<const InnerCopyWayByMatch &>(from));
}


void InnerCopyWayByMatch::MergeFrom(const InnerCopyWayByMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerCopyWayByMatch)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mtype() != 0) {
    _internal_set_mtype(from._internal_mtype());
  }
  if (from._internal_seasonid() != 0) {
    _internal_set_seasonid(from._internal_seasonid());
  }
  if (from._internal_dayid() != 0) {
    _internal_set_dayid(from._internal_dayid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerCopyWayByMatch::CopyFrom(const InnerCopyWayByMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerCopyWayByMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerCopyWayByMatch::IsInitialized() const {
  return true;
}

void InnerCopyWayByMatch::InternalSwap(InnerCopyWayByMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InnerCopyWayByMatch, dayid_)
      + sizeof(InnerCopyWayByMatch::dayid_)
      - PROTOBUF_FIELD_OFFSET(InnerCopyWayByMatch, mtype_)>(
          reinterpret_cast<char*>(&mtype_),
          reinterpret_cast<char*>(&other->mtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerCopyWayByMatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[8]);
}

// ===================================================================

class InnerCopyWayByTeam::_Internal {
 public:
};

InnerCopyWayByTeam::InnerCopyWayByTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:inner.InnerCopyWayByTeam)
}
InnerCopyWayByTeam::InnerCopyWayByTeam(const InnerCopyWayByTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inner.InnerCopyWayByTeam)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerCopyWayByTeam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerCopyWayByTeam::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata InnerCopyWayByTeam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[9]);
}

// ===================================================================

class InnerCopyWay::_Internal {
 public:
  static const ::inner::InnerCopyTeamList& teamlist(const InnerCopyWay* msg);
  static const ::inner::InnerCopyWayByMatch& bymatch(const InnerCopyWay* msg);
  static const ::inner::InnerCopyWayByTeam& byteam(const InnerCopyWay* msg);
};

const ::inner::InnerCopyTeamList&
InnerCopyWay::_Internal::teamlist(const InnerCopyWay* msg) {
  return *msg->teamlist_;
}
const ::inner::InnerCopyWayByMatch&
InnerCopyWay::_Internal::bymatch(const InnerCopyWay* msg) {
  return *msg->type_.bymatch_;
}
const ::inner::InnerCopyWayByTeam&
InnerCopyWay::_Internal::byteam(const InnerCopyWay* msg) {
  return *msg->type_.byteam_;
}
void InnerCopyWay::set_allocated_bymatch(::inner::InnerCopyWayByMatch* bymatch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (bymatch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bymatch);
    if (message_arena != submessage_arena) {
      bymatch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bymatch, submessage_arena);
    }
    set_has_bymatch();
    type_.bymatch_ = bymatch;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerCopyWay.byMatch)
}
void InnerCopyWay::set_allocated_byteam(::inner::InnerCopyWayByTeam* byteam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (byteam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(byteam);
    if (message_arena != submessage_arena) {
      byteam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, byteam, submessage_arena);
    }
    set_has_byteam();
    type_.byteam_ = byteam;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerCopyWay.byTeam)
}
InnerCopyWay::InnerCopyWay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerCopyWay)
}
InnerCopyWay::InnerCopyWay(const InnerCopyWay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_teamlist()) {
    teamlist_ = new ::inner::InnerCopyTeamList(*from.teamlist_);
  } else {
    teamlist_ = nullptr;
  }
  clear_has_type();
  switch (from.type_case()) {
    case kByMatch: {
      _internal_mutable_bymatch()->::inner::InnerCopyWayByMatch::MergeFrom(from._internal_bymatch());
      break;
    }
    case kByTeam: {
      _internal_mutable_byteam()->::inner::InnerCopyWayByTeam::MergeFrom(from._internal_byteam());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:inner.InnerCopyWay)
}

inline void InnerCopyWay::SharedCtor() {
teamlist_ = nullptr;
clear_has_type();
}

InnerCopyWay::~InnerCopyWay() {
  // @@protoc_insertion_point(destructor:inner.InnerCopyWay)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerCopyWay::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete teamlist_;
  if (has_type()) {
    clear_type();
  }
}

void InnerCopyWay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerCopyWay::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:inner.InnerCopyWay)
  switch (type_case()) {
    case kByMatch: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.bymatch_;
      }
      break;
    }
    case kByTeam: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.byteam_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void InnerCopyWay::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerCopyWay)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && teamlist_ != nullptr) {
    delete teamlist_;
  }
  teamlist_ = nullptr;
  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerCopyWay::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .inner.InnerCopyTeamList teamList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_teamlist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerCopyWayByMatch byMatch = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_bymatch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerCopyWayByTeam byTeam = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_byteam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerCopyWay::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerCopyWay)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .inner.InnerCopyTeamList teamList = 1;
  if (this->_internal_has_teamlist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::teamlist(this),
        _Internal::teamlist(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerCopyWayByMatch byMatch = 11;
  if (_internal_has_bymatch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::bymatch(this),
        _Internal::bymatch(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerCopyWayByTeam byTeam = 12;
  if (_internal_has_byteam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::byteam(this),
        _Internal::byteam(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerCopyWay)
  return target;
}

size_t InnerCopyWay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerCopyWay)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .inner.InnerCopyTeamList teamList = 1;
  if (this->_internal_has_teamlist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *teamlist_);
  }

  switch (type_case()) {
    // .inner.InnerCopyWayByMatch byMatch = 11;
    case kByMatch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.bymatch_);
      break;
    }
    // .inner.InnerCopyWayByTeam byTeam = 12;
    case kByTeam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.byteam_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerCopyWay::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerCopyWay::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerCopyWay::GetClassData() const { return &_class_data_; }

void InnerCopyWay::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerCopyWay *>(to)->MergeFrom(
      static_cast<const InnerCopyWay &>(from));
}


void InnerCopyWay::MergeFrom(const InnerCopyWay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerCopyWay)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_teamlist()) {
    _internal_mutable_teamlist()->::inner::InnerCopyTeamList::MergeFrom(from._internal_teamlist());
  }
  switch (from.type_case()) {
    case kByMatch: {
      _internal_mutable_bymatch()->::inner::InnerCopyWayByMatch::MergeFrom(from._internal_bymatch());
      break;
    }
    case kByTeam: {
      _internal_mutable_byteam()->::inner::InnerCopyWayByTeam::MergeFrom(from._internal_byteam());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerCopyWay::CopyFrom(const InnerCopyWay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerCopyWay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerCopyWay::IsInitialized() const {
  return true;
}

void InnerCopyWay::InternalSwap(InnerCopyWay* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(teamlist_, other->teamlist_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerCopyWay::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[10]);
}

// ===================================================================

class InnerCopyPvpF55::_Internal {
 public:
};

InnerCopyPvpF55::InnerCopyPvpF55(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerCopyPvpF55)
}
InnerCopyPvpF55::InnerCopyPvpF55(const InnerCopyPvpF55& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  copyid_ = from.copyid_;
  // @@protoc_insertion_point(copy_constructor:inner.InnerCopyPvpF55)
}

inline void InnerCopyPvpF55::SharedCtor() {
copyid_ = 0u;
}

InnerCopyPvpF55::~InnerCopyPvpF55() {
  // @@protoc_insertion_point(destructor:inner.InnerCopyPvpF55)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerCopyPvpF55::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InnerCopyPvpF55::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerCopyPvpF55::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerCopyPvpF55)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  copyid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerCopyPvpF55::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 copyId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          copyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerCopyPvpF55::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerCopyPvpF55)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 copyId = 1;
  if (this->_internal_copyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_copyid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerCopyPvpF55)
  return target;
}

size_t InnerCopyPvpF55::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerCopyPvpF55)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 copyId = 1;
  if (this->_internal_copyid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_copyid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerCopyPvpF55::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerCopyPvpF55::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerCopyPvpF55::GetClassData() const { return &_class_data_; }

void InnerCopyPvpF55::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerCopyPvpF55 *>(to)->MergeFrom(
      static_cast<const InnerCopyPvpF55 &>(from));
}


void InnerCopyPvpF55::MergeFrom(const InnerCopyPvpF55& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerCopyPvpF55)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_copyid() != 0) {
    _internal_set_copyid(from._internal_copyid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerCopyPvpF55::CopyFrom(const InnerCopyPvpF55& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerCopyPvpF55)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerCopyPvpF55::IsInitialized() const {
  return true;
}

void InnerCopyPvpF55::InternalSwap(InnerCopyPvpF55* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(copyid_, other->copyid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerCopyPvpF55::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[11]);
}

// ===================================================================

class InnerCopyPvp::_Internal {
 public:
  static const ::inner::InnerCopyPvpF55& f55(const InnerCopyPvp* msg);
};

const ::inner::InnerCopyPvpF55&
InnerCopyPvp::_Internal::f55(const InnerCopyPvp* msg) {
  return *msg->type_.f55_;
}
void InnerCopyPvp::set_allocated_f55(::inner::InnerCopyPvpF55* f55) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (f55) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(f55);
    if (message_arena != submessage_arena) {
      f55 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f55, submessage_arena);
    }
    set_has_f55();
    type_.f55_ = f55;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerCopyPvp.f55)
}
InnerCopyPvp::InnerCopyPvp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerCopyPvp)
}
InnerCopyPvp::InnerCopyPvp(const InnerCopyPvp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kF55: {
      _internal_mutable_f55()->::inner::InnerCopyPvpF55::MergeFrom(from._internal_f55());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:inner.InnerCopyPvp)
}

inline void InnerCopyPvp::SharedCtor() {
clear_has_type();
}

InnerCopyPvp::~InnerCopyPvp() {
  // @@protoc_insertion_point(destructor:inner.InnerCopyPvp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerCopyPvp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void InnerCopyPvp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerCopyPvp::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:inner.InnerCopyPvp)
  switch (type_case()) {
    case kF55: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.f55_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void InnerCopyPvp::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerCopyPvp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerCopyPvp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .inner.InnerCopyPvpF55 f55 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_f55(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerCopyPvp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerCopyPvp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .inner.InnerCopyPvpF55 f55 = 11;
  if (_internal_has_f55()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::f55(this),
        _Internal::f55(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerCopyPvp)
  return target;
}

size_t InnerCopyPvp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerCopyPvp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .inner.InnerCopyPvpF55 f55 = 11;
    case kF55: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.f55_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerCopyPvp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerCopyPvp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerCopyPvp::GetClassData() const { return &_class_data_; }

void InnerCopyPvp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerCopyPvp *>(to)->MergeFrom(
      static_cast<const InnerCopyPvp &>(from));
}


void InnerCopyPvp::MergeFrom(const InnerCopyPvp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerCopyPvp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kF55: {
      _internal_mutable_f55()->::inner::InnerCopyPvpF55::MergeFrom(from._internal_f55());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerCopyPvp::CopyFrom(const InnerCopyPvp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerCopyPvp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerCopyPvp::IsInitialized() const {
  return true;
}

void InnerCopyPvp::InternalSwap(InnerCopyPvp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerCopyPvp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[12]);
}

// ===================================================================

class InnerCopyPve::_Internal {
 public:
};

InnerCopyPve::InnerCopyPve(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:inner.InnerCopyPve)
}
InnerCopyPve::InnerCopyPve(const InnerCopyPve& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inner.InnerCopyPve)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerCopyPve::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerCopyPve::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata InnerCopyPve::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[13]);
}

// ===================================================================

class InnerCopyType::_Internal {
 public:
  static const ::inner::InnerCopyPvp& pvp(const InnerCopyType* msg);
  static const ::inner::InnerCopyPve& pve(const InnerCopyType* msg);
};

const ::inner::InnerCopyPvp&
InnerCopyType::_Internal::pvp(const InnerCopyType* msg) {
  return *msg->type_.pvp_;
}
const ::inner::InnerCopyPve&
InnerCopyType::_Internal::pve(const InnerCopyType* msg) {
  return *msg->type_.pve_;
}
void InnerCopyType::set_allocated_pvp(::inner::InnerCopyPvp* pvp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (pvp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pvp);
    if (message_arena != submessage_arena) {
      pvp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvp, submessage_arena);
    }
    set_has_pvp();
    type_.pvp_ = pvp;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerCopyType.pvp)
}
void InnerCopyType::set_allocated_pve(::inner::InnerCopyPve* pve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (pve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pve);
    if (message_arena != submessage_arena) {
      pve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pve, submessage_arena);
    }
    set_has_pve();
    type_.pve_ = pve;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerCopyType.pve)
}
InnerCopyType::InnerCopyType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerCopyType)
}
InnerCopyType::InnerCopyType(const InnerCopyType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&copylvid_, &from.copylvid_,
    static_cast<size_t>(reinterpret_cast<char*>(&threeid_) -
    reinterpret_cast<char*>(&copylvid_)) + sizeof(threeid_));
  clear_has_type();
  switch (from.type_case()) {
    case kPvp: {
      _internal_mutable_pvp()->::inner::InnerCopyPvp::MergeFrom(from._internal_pvp());
      break;
    }
    case kPve: {
      _internal_mutable_pve()->::inner::InnerCopyPve::MergeFrom(from._internal_pve());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:inner.InnerCopyType)
}

inline void InnerCopyType::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&copylvid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&threeid_) -
    reinterpret_cast<char*>(&copylvid_)) + sizeof(threeid_));
clear_has_type();
}

InnerCopyType::~InnerCopyType() {
  // @@protoc_insertion_point(destructor:inner.InnerCopyType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerCopyType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void InnerCopyType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerCopyType::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:inner.InnerCopyType)
  switch (type_case()) {
    case kPvp: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.pvp_;
      }
      break;
    }
    case kPve: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.pve_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void InnerCopyType::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerCopyType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&copylvid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threeid_) -
      reinterpret_cast<char*>(&copylvid_)) + sizeof(threeid_));
  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerCopyType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 copyLvId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          copylvid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 eProc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          eproc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 threeId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          threeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerCopyPvp pvp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerCopyPve pve = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_pve(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerCopyType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerCopyType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 copyLvId = 1;
  if (this->_internal_copylvid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_copylvid(), target);
  }

  // uint32 eProc = 2;
  if (this->_internal_eproc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_eproc(), target);
  }

  // uint32 threeId = 3;
  if (this->_internal_threeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_threeid(), target);
  }

  // .inner.InnerCopyPvp pvp = 11;
  if (_internal_has_pvp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::pvp(this),
        _Internal::pvp(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerCopyPve pve = 12;
  if (_internal_has_pve()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::pve(this),
        _Internal::pve(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerCopyType)
  return target;
}

size_t InnerCopyType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerCopyType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 copyLvId = 1;
  if (this->_internal_copylvid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_copylvid());
  }

  // uint32 eProc = 2;
  if (this->_internal_eproc() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_eproc());
  }

  // uint32 threeId = 3;
  if (this->_internal_threeid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_threeid());
  }

  switch (type_case()) {
    // .inner.InnerCopyPvp pvp = 11;
    case kPvp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.pvp_);
      break;
    }
    // .inner.InnerCopyPve pve = 12;
    case kPve: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.pve_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerCopyType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerCopyType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerCopyType::GetClassData() const { return &_class_data_; }

void InnerCopyType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerCopyType *>(to)->MergeFrom(
      static_cast<const InnerCopyType &>(from));
}


void InnerCopyType::MergeFrom(const InnerCopyType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerCopyType)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_copylvid() != 0) {
    _internal_set_copylvid(from._internal_copylvid());
  }
  if (from._internal_eproc() != 0) {
    _internal_set_eproc(from._internal_eproc());
  }
  if (from._internal_threeid() != 0) {
    _internal_set_threeid(from._internal_threeid());
  }
  switch (from.type_case()) {
    case kPvp: {
      _internal_mutable_pvp()->::inner::InnerCopyPvp::MergeFrom(from._internal_pvp());
      break;
    }
    case kPve: {
      _internal_mutable_pve()->::inner::InnerCopyPve::MergeFrom(from._internal_pve());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerCopyType::CopyFrom(const InnerCopyType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerCopyType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerCopyType::IsInitialized() const {
  return true;
}

void InnerCopyType::InternalSwap(InnerCopyType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InnerCopyType, threeid_)
      + sizeof(InnerCopyType::threeid_)
      - PROTOBUF_FIELD_OFFSET(InnerCopyType, copylvid_)>(
          reinterpret_cast<char*>(&copylvid_),
          reinterpret_cast<char*>(&other->copylvid_));
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerCopyType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[14]);
}

// ===================================================================

class InnerCopyCreateBy::_Internal {
 public:
  static const ::inner::InnerCopyCrit& crit(const InnerCopyCreateBy* msg);
  static const ::inner::InnerCopyType& copy(const InnerCopyCreateBy* msg);
  static const ::inner::InnerCopyWay& way(const InnerCopyCreateBy* msg);
};

const ::inner::InnerCopyCrit&
InnerCopyCreateBy::_Internal::crit(const InnerCopyCreateBy* msg) {
  return *msg->crit_;
}
const ::inner::InnerCopyType&
InnerCopyCreateBy::_Internal::copy(const InnerCopyCreateBy* msg) {
  return *msg->copy_;
}
const ::inner::InnerCopyWay&
InnerCopyCreateBy::_Internal::way(const InnerCopyCreateBy* msg) {
  return *msg->way_;
}
InnerCopyCreateBy::InnerCopyCreateBy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerCopyCreateBy)
}
InnerCopyCreateBy::InnerCopyCreateBy(const InnerCopyCreateBy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_crit()) {
    crit_ = new ::inner::InnerCopyCrit(*from.crit_);
  } else {
    crit_ = nullptr;
  }
  if (from._internal_has_copy()) {
    copy_ = new ::inner::InnerCopyType(*from.copy_);
  } else {
    copy_ = nullptr;
  }
  if (from._internal_has_way()) {
    way_ = new ::inner::InnerCopyWay(*from.way_);
  } else {
    way_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:inner.InnerCopyCreateBy)
}

inline void InnerCopyCreateBy::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&crit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&way_) -
    reinterpret_cast<char*>(&crit_)) + sizeof(way_));
}

InnerCopyCreateBy::~InnerCopyCreateBy() {
  // @@protoc_insertion_point(destructor:inner.InnerCopyCreateBy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerCopyCreateBy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete crit_;
  if (this != internal_default_instance()) delete copy_;
  if (this != internal_default_instance()) delete way_;
}

void InnerCopyCreateBy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerCopyCreateBy::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerCopyCreateBy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && crit_ != nullptr) {
    delete crit_;
  }
  crit_ = nullptr;
  if (GetArenaForAllocation() == nullptr && copy_ != nullptr) {
    delete copy_;
  }
  copy_ = nullptr;
  if (GetArenaForAllocation() == nullptr && way_ != nullptr) {
    delete way_;
  }
  way_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerCopyCreateBy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .inner.InnerCopyCrit crit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_crit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerCopyType copy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_copy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerCopyWay way = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_way(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerCopyCreateBy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerCopyCreateBy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .inner.InnerCopyCrit crit = 1;
  if (this->_internal_has_crit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::crit(this),
        _Internal::crit(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerCopyType copy = 2;
  if (this->_internal_has_copy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::copy(this),
        _Internal::copy(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerCopyWay way = 3;
  if (this->_internal_has_way()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::way(this),
        _Internal::way(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerCopyCreateBy)
  return target;
}

size_t InnerCopyCreateBy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerCopyCreateBy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .inner.InnerCopyCrit crit = 1;
  if (this->_internal_has_crit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *crit_);
  }

  // .inner.InnerCopyType copy = 2;
  if (this->_internal_has_copy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *copy_);
  }

  // .inner.InnerCopyWay way = 3;
  if (this->_internal_has_way()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *way_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerCopyCreateBy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerCopyCreateBy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerCopyCreateBy::GetClassData() const { return &_class_data_; }

void InnerCopyCreateBy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerCopyCreateBy *>(to)->MergeFrom(
      static_cast<const InnerCopyCreateBy &>(from));
}


void InnerCopyCreateBy::MergeFrom(const InnerCopyCreateBy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerCopyCreateBy)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_crit()) {
    _internal_mutable_crit()->::inner::InnerCopyCrit::MergeFrom(from._internal_crit());
  }
  if (from._internal_has_copy()) {
    _internal_mutable_copy()->::inner::InnerCopyType::MergeFrom(from._internal_copy());
  }
  if (from._internal_has_way()) {
    _internal_mutable_way()->::inner::InnerCopyWay::MergeFrom(from._internal_way());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerCopyCreateBy::CopyFrom(const InnerCopyCreateBy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerCopyCreateBy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerCopyCreateBy::IsInitialized() const {
  return true;
}

void InnerCopyCreateBy::InternalSwap(InnerCopyCreateBy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InnerCopyCreateBy, way_)
      + sizeof(InnerCopyCreateBy::way_)
      - PROTOBUF_FIELD_OFFSET(InnerCopyCreateBy, crit_)>(
          reinterpret_cast<char*>(&crit_),
          reinterpret_cast<char*>(&other->crit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerCopyCreateBy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[15]);
}

// ===================================================================

class InnerCopyCrit::_Internal {
 public:
};

InnerCopyCrit::InnerCopyCrit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerCopyCrit)
}
InnerCopyCrit::InnerCopyCrit(const InnerCopyCrit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&critid_, &from.critid_,
    static_cast<size_t>(reinterpret_cast<char*>(&expire_) -
    reinterpret_cast<char*>(&critid_)) + sizeof(expire_));
  // @@protoc_insertion_point(copy_constructor:inner.InnerCopyCrit)
}

inline void InnerCopyCrit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&critid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expire_) -
    reinterpret_cast<char*>(&critid_)) + sizeof(expire_));
}

InnerCopyCrit::~InnerCopyCrit() {
  // @@protoc_insertion_point(destructor:inner.InnerCopyCrit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerCopyCrit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InnerCopyCrit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerCopyCrit::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerCopyCrit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&critid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expire_) -
      reinterpret_cast<char*>(&critid_)) + sizeof(expire_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerCopyCrit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 hashIdF = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          hashidf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 critId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          critid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 expire = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          expire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerCopyCrit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerCopyCrit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 hashIdF = 1;
  if (this->_internal_hashidf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hashidf(), target);
  }

  // uint64 critId = 2;
  if (this->_internal_critid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_critid(), target);
  }

  // uint32 expire = 3;
  if (this->_internal_expire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_expire(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerCopyCrit)
  return target;
}

size_t InnerCopyCrit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerCopyCrit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 critId = 2;
  if (this->_internal_critid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_critid());
  }

  // uint32 hashIdF = 1;
  if (this->_internal_hashidf() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hashidf());
  }

  // uint32 expire = 3;
  if (this->_internal_expire() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_expire());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerCopyCrit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerCopyCrit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerCopyCrit::GetClassData() const { return &_class_data_; }

void InnerCopyCrit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerCopyCrit *>(to)->MergeFrom(
      static_cast<const InnerCopyCrit &>(from));
}


void InnerCopyCrit::MergeFrom(const InnerCopyCrit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerCopyCrit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_critid() != 0) {
    _internal_set_critid(from._internal_critid());
  }
  if (from._internal_hashidf() != 0) {
    _internal_set_hashidf(from._internal_hashidf());
  }
  if (from._internal_expire() != 0) {
    _internal_set_expire(from._internal_expire());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerCopyCrit::CopyFrom(const InnerCopyCrit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerCopyCrit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerCopyCrit::IsInitialized() const {
  return true;
}

void InnerCopyCrit::InternalSwap(InnerCopyCrit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InnerCopyCrit, expire_)
      + sizeof(InnerCopyCrit::expire_)
      - PROTOBUF_FIELD_OFFSET(InnerCopyCrit, critid_)>(
          reinterpret_cast<char*>(&critid_),
          reinterpret_cast<char*>(&other->critid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerCopyCrit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[16]);
}

// ===================================================================

class InnerGameEvent::_Internal {
 public:
  static const ::inner::InnerGameEventDestroy& destroy(const InnerGameEvent* msg);
  static const ::inner::InnerGameEventLogin& login(const InnerGameEvent* msg);
  static const ::inner::InnerGameEventLogout& logout(const InnerGameEvent* msg);
  static const ::inner::InnerGameEventOnline& online(const InnerGameEvent* msg);
  static const ::inner::InnerGameEventOffline& offline(const InnerGameEvent* msg);
  static const ::inner::InnerGameEventChangeMap& changemap(const InnerGameEvent* msg);
  static const ::inner::InnerGameEventDeath& death(const InnerGameEvent* msg);
  static const ::inner::InnerGameEventRebirth& rebirth(const InnerGameEvent* msg);
  static const ::inner::InnerGameEventWakeup& wakeup(const InnerGameEvent* msg);
};

const ::inner::InnerGameEventDestroy&
InnerGameEvent::_Internal::destroy(const InnerGameEvent* msg) {
  return *msg->type_.destroy_;
}
const ::inner::InnerGameEventLogin&
InnerGameEvent::_Internal::login(const InnerGameEvent* msg) {
  return *msg->type_.login_;
}
const ::inner::InnerGameEventLogout&
InnerGameEvent::_Internal::logout(const InnerGameEvent* msg) {
  return *msg->type_.logout_;
}
const ::inner::InnerGameEventOnline&
InnerGameEvent::_Internal::online(const InnerGameEvent* msg) {
  return *msg->type_.online_;
}
const ::inner::InnerGameEventOffline&
InnerGameEvent::_Internal::offline(const InnerGameEvent* msg) {
  return *msg->type_.offline_;
}
const ::inner::InnerGameEventChangeMap&
InnerGameEvent::_Internal::changemap(const InnerGameEvent* msg) {
  return *msg->type_.changemap_;
}
const ::inner::InnerGameEventDeath&
InnerGameEvent::_Internal::death(const InnerGameEvent* msg) {
  return *msg->type_.death_;
}
const ::inner::InnerGameEventRebirth&
InnerGameEvent::_Internal::rebirth(const InnerGameEvent* msg) {
  return *msg->type_.rebirth_;
}
const ::inner::InnerGameEventWakeup&
InnerGameEvent::_Internal::wakeup(const InnerGameEvent* msg) {
  return *msg->type_.wakeup_;
}
void InnerGameEvent::set_allocated_destroy(::inner::InnerGameEventDestroy* destroy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (destroy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(destroy);
    if (message_arena != submessage_arena) {
      destroy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destroy, submessage_arena);
    }
    set_has_destroy();
    type_.destroy_ = destroy;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEvent.destroy)
}
void InnerGameEvent::set_allocated_login(::inner::InnerGameEventLogin* login) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (login) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(login);
    if (message_arena != submessage_arena) {
      login = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login, submessage_arena);
    }
    set_has_login();
    type_.login_ = login;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEvent.login)
}
void InnerGameEvent::set_allocated_logout(::inner::InnerGameEventLogout* logout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (logout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(logout);
    if (message_arena != submessage_arena) {
      logout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logout, submessage_arena);
    }
    set_has_logout();
    type_.logout_ = logout;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEvent.logout)
}
void InnerGameEvent::set_allocated_online(::inner::InnerGameEventOnline* online) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (online) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(online);
    if (message_arena != submessage_arena) {
      online = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, online, submessage_arena);
    }
    set_has_online();
    type_.online_ = online;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEvent.online)
}
void InnerGameEvent::set_allocated_offline(::inner::InnerGameEventOffline* offline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (offline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(offline);
    if (message_arena != submessage_arena) {
      offline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offline, submessage_arena);
    }
    set_has_offline();
    type_.offline_ = offline;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEvent.offline)
}
void InnerGameEvent::set_allocated_changemap(::inner::InnerGameEventChangeMap* changemap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (changemap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(changemap);
    if (message_arena != submessage_arena) {
      changemap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, changemap, submessage_arena);
    }
    set_has_changemap();
    type_.changemap_ = changemap;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEvent.changemap)
}
void InnerGameEvent::set_allocated_death(::inner::InnerGameEventDeath* death) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (death) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(death);
    if (message_arena != submessage_arena) {
      death = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, death, submessage_arena);
    }
    set_has_death();
    type_.death_ = death;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEvent.death)
}
void InnerGameEvent::set_allocated_rebirth(::inner::InnerGameEventRebirth* rebirth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (rebirth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rebirth);
    if (message_arena != submessage_arena) {
      rebirth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rebirth, submessage_arena);
    }
    set_has_rebirth();
    type_.rebirth_ = rebirth;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEvent.rebirth)
}
void InnerGameEvent::set_allocated_wakeup(::inner::InnerGameEventWakeup* wakeup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (wakeup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(wakeup);
    if (message_arena != submessage_arena) {
      wakeup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wakeup, submessage_arena);
    }
    set_has_wakeup();
    type_.wakeup_ = wakeup;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEvent.wakeup)
}
InnerGameEvent::InnerGameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEvent)
}
InnerGameEvent::InnerGameEvent(const InnerGameEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kDestroy: {
      _internal_mutable_destroy()->::inner::InnerGameEventDestroy::MergeFrom(from._internal_destroy());
      break;
    }
    case kLogin: {
      _internal_mutable_login()->::inner::InnerGameEventLogin::MergeFrom(from._internal_login());
      break;
    }
    case kLogout: {
      _internal_mutable_logout()->::inner::InnerGameEventLogout::MergeFrom(from._internal_logout());
      break;
    }
    case kOnline: {
      _internal_mutable_online()->::inner::InnerGameEventOnline::MergeFrom(from._internal_online());
      break;
    }
    case kOffline: {
      _internal_mutable_offline()->::inner::InnerGameEventOffline::MergeFrom(from._internal_offline());
      break;
    }
    case kChangemap: {
      _internal_mutable_changemap()->::inner::InnerGameEventChangeMap::MergeFrom(from._internal_changemap());
      break;
    }
    case kDeath: {
      _internal_mutable_death()->::inner::InnerGameEventDeath::MergeFrom(from._internal_death());
      break;
    }
    case kRebirth: {
      _internal_mutable_rebirth()->::inner::InnerGameEventRebirth::MergeFrom(from._internal_rebirth());
      break;
    }
    case kWakeup: {
      _internal_mutable_wakeup()->::inner::InnerGameEventWakeup::MergeFrom(from._internal_wakeup());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEvent)
}

inline void InnerGameEvent::SharedCtor() {
clear_has_type();
}

InnerGameEvent::~InnerGameEvent() {
  // @@protoc_insertion_point(destructor:inner.InnerGameEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerGameEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void InnerGameEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerGameEvent::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:inner.InnerGameEvent)
  switch (type_case()) {
    case kDestroy: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.destroy_;
      }
      break;
    }
    case kLogin: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.login_;
      }
      break;
    }
    case kLogout: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.logout_;
      }
      break;
    }
    case kOnline: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.online_;
      }
      break;
    }
    case kOffline: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.offline_;
      }
      break;
    }
    case kChangemap: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.changemap_;
      }
      break;
    }
    case kDeath: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.death_;
      }
      break;
    }
    case kRebirth: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.rebirth_;
      }
      break;
    }
    case kWakeup: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.wakeup_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void InnerGameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerGameEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerGameEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .inner.InnerGameEventDestroy destroy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_destroy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerGameEventLogin login = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_login(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerGameEventLogout logout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_logout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerGameEventOnline online = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_online(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerGameEventOffline offline = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_offline(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerGameEventChangeMap changemap = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_changemap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerGameEventDeath death = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_death(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerGameEventRebirth rebirth = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_rebirth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerGameEventWakeup wakeup = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_wakeup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerGameEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerGameEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .inner.InnerGameEventDestroy destroy = 1;
  if (_internal_has_destroy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::destroy(this),
        _Internal::destroy(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerGameEventLogin login = 2;
  if (_internal_has_login()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::login(this),
        _Internal::login(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerGameEventLogout logout = 3;
  if (_internal_has_logout()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::logout(this),
        _Internal::logout(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerGameEventOnline online = 4;
  if (_internal_has_online()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::online(this),
        _Internal::online(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerGameEventOffline offline = 5;
  if (_internal_has_offline()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::offline(this),
        _Internal::offline(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerGameEventChangeMap changemap = 6;
  if (_internal_has_changemap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::changemap(this),
        _Internal::changemap(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerGameEventDeath death = 7;
  if (_internal_has_death()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::death(this),
        _Internal::death(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerGameEventRebirth rebirth = 8;
  if (_internal_has_rebirth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::rebirth(this),
        _Internal::rebirth(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerGameEventWakeup wakeup = 9;
  if (_internal_has_wakeup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::wakeup(this),
        _Internal::wakeup(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerGameEvent)
  return target;
}

size_t InnerGameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerGameEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .inner.InnerGameEventDestroy destroy = 1;
    case kDestroy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.destroy_);
      break;
    }
    // .inner.InnerGameEventLogin login = 2;
    case kLogin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.login_);
      break;
    }
    // .inner.InnerGameEventLogout logout = 3;
    case kLogout: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.logout_);
      break;
    }
    // .inner.InnerGameEventOnline online = 4;
    case kOnline: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.online_);
      break;
    }
    // .inner.InnerGameEventOffline offline = 5;
    case kOffline: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.offline_);
      break;
    }
    // .inner.InnerGameEventChangeMap changemap = 6;
    case kChangemap: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.changemap_);
      break;
    }
    // .inner.InnerGameEventDeath death = 7;
    case kDeath: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.death_);
      break;
    }
    // .inner.InnerGameEventRebirth rebirth = 8;
    case kRebirth: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.rebirth_);
      break;
    }
    // .inner.InnerGameEventWakeup wakeup = 9;
    case kWakeup: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.wakeup_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerGameEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEvent::GetClassData() const { return &_class_data_; }

void InnerGameEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerGameEvent *>(to)->MergeFrom(
      static_cast<const InnerGameEvent &>(from));
}


void InnerGameEvent::MergeFrom(const InnerGameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kDestroy: {
      _internal_mutable_destroy()->::inner::InnerGameEventDestroy::MergeFrom(from._internal_destroy());
      break;
    }
    case kLogin: {
      _internal_mutable_login()->::inner::InnerGameEventLogin::MergeFrom(from._internal_login());
      break;
    }
    case kLogout: {
      _internal_mutable_logout()->::inner::InnerGameEventLogout::MergeFrom(from._internal_logout());
      break;
    }
    case kOnline: {
      _internal_mutable_online()->::inner::InnerGameEventOnline::MergeFrom(from._internal_online());
      break;
    }
    case kOffline: {
      _internal_mutable_offline()->::inner::InnerGameEventOffline::MergeFrom(from._internal_offline());
      break;
    }
    case kChangemap: {
      _internal_mutable_changemap()->::inner::InnerGameEventChangeMap::MergeFrom(from._internal_changemap());
      break;
    }
    case kDeath: {
      _internal_mutable_death()->::inner::InnerGameEventDeath::MergeFrom(from._internal_death());
      break;
    }
    case kRebirth: {
      _internal_mutable_rebirth()->::inner::InnerGameEventRebirth::MergeFrom(from._internal_rebirth());
      break;
    }
    case kWakeup: {
      _internal_mutable_wakeup()->::inner::InnerGameEventWakeup::MergeFrom(from._internal_wakeup());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerGameEvent::CopyFrom(const InnerGameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerGameEvent::IsInitialized() const {
  return true;
}

void InnerGameEvent::InternalSwap(InnerGameEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[17]);
}

// ===================================================================

class InnerGameEventDestroy::_Internal {
 public:
  static const ::inner::InnerGameEventDestroyTeamsvr& teamsvr(const InnerGameEventDestroy* msg);
  static const ::inner::InnerGameEventDestryFriendsvr& friendsvr(const InnerGameEventDestroy* msg);
  static const ::inner::InnerGameEventDestroyFamilysvr& familysvr(const InnerGameEventDestroy* msg);
  static const ::inner::InnerGameEventDestroyRanksvr& ranksvr(const InnerGameEventDestroy* msg);
};

const ::inner::InnerGameEventDestroyTeamsvr&
InnerGameEventDestroy::_Internal::teamsvr(const InnerGameEventDestroy* msg) {
  return *msg->server_.teamsvr_;
}
const ::inner::InnerGameEventDestryFriendsvr&
InnerGameEventDestroy::_Internal::friendsvr(const InnerGameEventDestroy* msg) {
  return *msg->server_.friendsvr_;
}
const ::inner::InnerGameEventDestroyFamilysvr&
InnerGameEventDestroy::_Internal::familysvr(const InnerGameEventDestroy* msg) {
  return *msg->server_.familysvr_;
}
const ::inner::InnerGameEventDestroyRanksvr&
InnerGameEventDestroy::_Internal::ranksvr(const InnerGameEventDestroy* msg) {
  return *msg->server_.ranksvr_;
}
void InnerGameEventDestroy::set_allocated_teamsvr(::inner::InnerGameEventDestroyTeamsvr* teamsvr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_server();
  if (teamsvr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(teamsvr);
    if (message_arena != submessage_arena) {
      teamsvr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teamsvr, submessage_arena);
    }
    set_has_teamsvr();
    server_.teamsvr_ = teamsvr;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventDestroy.teamsvr)
}
void InnerGameEventDestroy::set_allocated_friendsvr(::inner::InnerGameEventDestryFriendsvr* friendsvr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_server();
  if (friendsvr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(friendsvr);
    if (message_arena != submessage_arena) {
      friendsvr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friendsvr, submessage_arena);
    }
    set_has_friendsvr();
    server_.friendsvr_ = friendsvr;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventDestroy.friendsvr)
}
void InnerGameEventDestroy::set_allocated_familysvr(::inner::InnerGameEventDestroyFamilysvr* familysvr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_server();
  if (familysvr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(familysvr);
    if (message_arena != submessage_arena) {
      familysvr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, familysvr, submessage_arena);
    }
    set_has_familysvr();
    server_.familysvr_ = familysvr;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventDestroy.familysvr)
}
void InnerGameEventDestroy::set_allocated_ranksvr(::inner::InnerGameEventDestroyRanksvr* ranksvr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_server();
  if (ranksvr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ranksvr);
    if (message_arena != submessage_arena) {
      ranksvr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ranksvr, submessage_arena);
    }
    set_has_ranksvr();
    server_.ranksvr_ = ranksvr;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventDestroy.ranksvr)
}
InnerGameEventDestroy::InnerGameEventDestroy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventDestroy)
}
InnerGameEventDestroy::InnerGameEventDestroy(const InnerGameEventDestroy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_server();
  switch (from.server_case()) {
    case kTeamsvr: {
      _internal_mutable_teamsvr()->::inner::InnerGameEventDestroyTeamsvr::MergeFrom(from._internal_teamsvr());
      break;
    }
    case kFriendsvr: {
      _internal_mutable_friendsvr()->::inner::InnerGameEventDestryFriendsvr::MergeFrom(from._internal_friendsvr());
      break;
    }
    case kFamilysvr: {
      _internal_mutable_familysvr()->::inner::InnerGameEventDestroyFamilysvr::MergeFrom(from._internal_familysvr());
      break;
    }
    case kRanksvr: {
      _internal_mutable_ranksvr()->::inner::InnerGameEventDestroyRanksvr::MergeFrom(from._internal_ranksvr());
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventDestroy)
}

inline void InnerGameEventDestroy::SharedCtor() {
clear_has_server();
}

InnerGameEventDestroy::~InnerGameEventDestroy() {
  // @@protoc_insertion_point(destructor:inner.InnerGameEventDestroy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerGameEventDestroy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_server()) {
    clear_server();
  }
}

void InnerGameEventDestroy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerGameEventDestroy::clear_server() {
// @@protoc_insertion_point(one_of_clear_start:inner.InnerGameEventDestroy)
  switch (server_case()) {
    case kTeamsvr: {
      if (GetArenaForAllocation() == nullptr) {
        delete server_.teamsvr_;
      }
      break;
    }
    case kFriendsvr: {
      if (GetArenaForAllocation() == nullptr) {
        delete server_.friendsvr_;
      }
      break;
    }
    case kFamilysvr: {
      if (GetArenaForAllocation() == nullptr) {
        delete server_.familysvr_;
      }
      break;
    }
    case kRanksvr: {
      if (GetArenaForAllocation() == nullptr) {
        delete server_.ranksvr_;
      }
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SERVER_NOT_SET;
}


void InnerGameEventDestroy::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerGameEventDestroy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_server();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerGameEventDestroy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .inner.InnerGameEventDestroyTeamsvr teamsvr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_teamsvr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerGameEventDestryFriendsvr friendsvr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_friendsvr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerGameEventDestroyFamilysvr familysvr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_familysvr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerGameEventDestroyRanksvr ranksvr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ranksvr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerGameEventDestroy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerGameEventDestroy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .inner.InnerGameEventDestroyTeamsvr teamsvr = 1;
  if (_internal_has_teamsvr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::teamsvr(this),
        _Internal::teamsvr(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerGameEventDestryFriendsvr friendsvr = 2;
  if (_internal_has_friendsvr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::friendsvr(this),
        _Internal::friendsvr(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerGameEventDestroyFamilysvr familysvr = 3;
  if (_internal_has_familysvr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::familysvr(this),
        _Internal::familysvr(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerGameEventDestroyRanksvr ranksvr = 4;
  if (_internal_has_ranksvr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::ranksvr(this),
        _Internal::ranksvr(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerGameEventDestroy)
  return target;
}

size_t InnerGameEventDestroy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerGameEventDestroy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (server_case()) {
    // .inner.InnerGameEventDestroyTeamsvr teamsvr = 1;
    case kTeamsvr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_.teamsvr_);
      break;
    }
    // .inner.InnerGameEventDestryFriendsvr friendsvr = 2;
    case kFriendsvr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_.friendsvr_);
      break;
    }
    // .inner.InnerGameEventDestroyFamilysvr familysvr = 3;
    case kFamilysvr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_.familysvr_);
      break;
    }
    // .inner.InnerGameEventDestroyRanksvr ranksvr = 4;
    case kRanksvr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_.ranksvr_);
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventDestroy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerGameEventDestroy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventDestroy::GetClassData() const { return &_class_data_; }

void InnerGameEventDestroy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerGameEventDestroy *>(to)->MergeFrom(
      static_cast<const InnerGameEventDestroy &>(from));
}


void InnerGameEventDestroy::MergeFrom(const InnerGameEventDestroy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerGameEventDestroy)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.server_case()) {
    case kTeamsvr: {
      _internal_mutable_teamsvr()->::inner::InnerGameEventDestroyTeamsvr::MergeFrom(from._internal_teamsvr());
      break;
    }
    case kFriendsvr: {
      _internal_mutable_friendsvr()->::inner::InnerGameEventDestryFriendsvr::MergeFrom(from._internal_friendsvr());
      break;
    }
    case kFamilysvr: {
      _internal_mutable_familysvr()->::inner::InnerGameEventDestroyFamilysvr::MergeFrom(from._internal_familysvr());
      break;
    }
    case kRanksvr: {
      _internal_mutable_ranksvr()->::inner::InnerGameEventDestroyRanksvr::MergeFrom(from._internal_ranksvr());
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerGameEventDestroy::CopyFrom(const InnerGameEventDestroy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerGameEventDestroy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerGameEventDestroy::IsInitialized() const {
  return true;
}

void InnerGameEventDestroy::InternalSwap(InnerGameEventDestroy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(server_, other->server_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventDestroy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[18]);
}

// ===================================================================

class InnerGameEventDestroyTeamsvr::_Internal {
 public:
};

InnerGameEventDestroyTeamsvr::InnerGameEventDestroyTeamsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventDestroyTeamsvr)
}
InnerGameEventDestroyTeamsvr::InnerGameEventDestroyTeamsvr(const InnerGameEventDestroyTeamsvr& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventDestroyTeamsvr)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventDestroyTeamsvr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventDestroyTeamsvr::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventDestroyTeamsvr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[19]);
}

// ===================================================================

class InnerGameEventDestryFriendsvr::_Internal {
 public:
};

InnerGameEventDestryFriendsvr::InnerGameEventDestryFriendsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventDestryFriendsvr)
}
InnerGameEventDestryFriendsvr::InnerGameEventDestryFriendsvr(const InnerGameEventDestryFriendsvr& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventDestryFriendsvr)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventDestryFriendsvr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventDestryFriendsvr::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventDestryFriendsvr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[20]);
}

// ===================================================================

class InnerGameEventDestroyFamilysvr::_Internal {
 public:
};

InnerGameEventDestroyFamilysvr::InnerGameEventDestroyFamilysvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventDestroyFamilysvr)
}
InnerGameEventDestroyFamilysvr::InnerGameEventDestroyFamilysvr(const InnerGameEventDestroyFamilysvr& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventDestroyFamilysvr)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventDestroyFamilysvr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventDestroyFamilysvr::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventDestroyFamilysvr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[21]);
}

// ===================================================================

class InnerGameEventDestroyRanksvr::_Internal {
 public:
};

InnerGameEventDestroyRanksvr::InnerGameEventDestroyRanksvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventDestroyRanksvr)
}
InnerGameEventDestroyRanksvr::InnerGameEventDestroyRanksvr(const InnerGameEventDestroyRanksvr& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventDestroyRanksvr)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventDestroyRanksvr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventDestroyRanksvr::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventDestroyRanksvr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[22]);
}

// ===================================================================

class InnerGameEventLogin::_Internal {
 public:
  static const ::inner::InnerGameEventLoginTeamsvr& teamsvr(const InnerGameEventLogin* msg);
  static const ::inner::InnerGameEventLoginFriendsvr& friendsvr(const InnerGameEventLogin* msg);
};

const ::inner::InnerGameEventLoginTeamsvr&
InnerGameEventLogin::_Internal::teamsvr(const InnerGameEventLogin* msg) {
  return *msg->server_.teamsvr_;
}
const ::inner::InnerGameEventLoginFriendsvr&
InnerGameEventLogin::_Internal::friendsvr(const InnerGameEventLogin* msg) {
  return *msg->server_.friendsvr_;
}
void InnerGameEventLogin::set_allocated_teamsvr(::inner::InnerGameEventLoginTeamsvr* teamsvr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_server();
  if (teamsvr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(teamsvr);
    if (message_arena != submessage_arena) {
      teamsvr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teamsvr, submessage_arena);
    }
    set_has_teamsvr();
    server_.teamsvr_ = teamsvr;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventLogin.teamsvr)
}
void InnerGameEventLogin::set_allocated_friendsvr(::inner::InnerGameEventLoginFriendsvr* friendsvr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_server();
  if (friendsvr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(friendsvr);
    if (message_arena != submessage_arena) {
      friendsvr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friendsvr, submessage_arena);
    }
    set_has_friendsvr();
    server_.friendsvr_ = friendsvr;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventLogin.friendsvr)
}
InnerGameEventLogin::InnerGameEventLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventLogin)
}
InnerGameEventLogin::InnerGameEventLogin(const InnerGameEventLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_server();
  switch (from.server_case()) {
    case kTeamsvr: {
      _internal_mutable_teamsvr()->::inner::InnerGameEventLoginTeamsvr::MergeFrom(from._internal_teamsvr());
      break;
    }
    case kFriendsvr: {
      _internal_mutable_friendsvr()->::inner::InnerGameEventLoginFriendsvr::MergeFrom(from._internal_friendsvr());
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventLogin)
}

inline void InnerGameEventLogin::SharedCtor() {
clear_has_server();
}

InnerGameEventLogin::~InnerGameEventLogin() {
  // @@protoc_insertion_point(destructor:inner.InnerGameEventLogin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerGameEventLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_server()) {
    clear_server();
  }
}

void InnerGameEventLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerGameEventLogin::clear_server() {
// @@protoc_insertion_point(one_of_clear_start:inner.InnerGameEventLogin)
  switch (server_case()) {
    case kTeamsvr: {
      if (GetArenaForAllocation() == nullptr) {
        delete server_.teamsvr_;
      }
      break;
    }
    case kFriendsvr: {
      if (GetArenaForAllocation() == nullptr) {
        delete server_.friendsvr_;
      }
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SERVER_NOT_SET;
}


void InnerGameEventLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerGameEventLogin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_server();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerGameEventLogin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .inner.InnerGameEventLoginTeamsvr teamsvr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_teamsvr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerGameEventLoginFriendsvr friendsvr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_friendsvr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerGameEventLogin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerGameEventLogin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .inner.InnerGameEventLoginTeamsvr teamsvr = 1;
  if (_internal_has_teamsvr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::teamsvr(this),
        _Internal::teamsvr(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerGameEventLoginFriendsvr friendsvr = 2;
  if (_internal_has_friendsvr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::friendsvr(this),
        _Internal::friendsvr(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerGameEventLogin)
  return target;
}

size_t InnerGameEventLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerGameEventLogin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (server_case()) {
    // .inner.InnerGameEventLoginTeamsvr teamsvr = 1;
    case kTeamsvr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_.teamsvr_);
      break;
    }
    // .inner.InnerGameEventLoginFriendsvr friendsvr = 2;
    case kFriendsvr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_.friendsvr_);
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventLogin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerGameEventLogin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventLogin::GetClassData() const { return &_class_data_; }

void InnerGameEventLogin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerGameEventLogin *>(to)->MergeFrom(
      static_cast<const InnerGameEventLogin &>(from));
}


void InnerGameEventLogin::MergeFrom(const InnerGameEventLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerGameEventLogin)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.server_case()) {
    case kTeamsvr: {
      _internal_mutable_teamsvr()->::inner::InnerGameEventLoginTeamsvr::MergeFrom(from._internal_teamsvr());
      break;
    }
    case kFriendsvr: {
      _internal_mutable_friendsvr()->::inner::InnerGameEventLoginFriendsvr::MergeFrom(from._internal_friendsvr());
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerGameEventLogin::CopyFrom(const InnerGameEventLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerGameEventLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerGameEventLogin::IsInitialized() const {
  return true;
}

void InnerGameEventLogin::InternalSwap(InnerGameEventLogin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(server_, other->server_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventLogin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[23]);
}

// ===================================================================

class InnerGameEventLoginTeamsvr::_Internal {
 public:
  static const ::common::RoleBrief& brief(const InnerGameEventLoginTeamsvr* msg);
  static const ::common::RoleExtend1& extd1(const InnerGameEventLoginTeamsvr* msg);
  static const ::common::RoleExtend2& extd2(const InnerGameEventLoginTeamsvr* msg);
  static const ::common::RoleExtend3& extd3(const InnerGameEventLoginTeamsvr* msg);
  static const ::common::ExtendFight3v3& f33(const InnerGameEventLoginTeamsvr* msg);
  static const ::common::ExtendFight5v5& f55(const InnerGameEventLoginTeamsvr* msg);
};

const ::common::RoleBrief&
InnerGameEventLoginTeamsvr::_Internal::brief(const InnerGameEventLoginTeamsvr* msg) {
  return *msg->brief_;
}
const ::common::RoleExtend1&
InnerGameEventLoginTeamsvr::_Internal::extd1(const InnerGameEventLoginTeamsvr* msg) {
  return *msg->extd1_;
}
const ::common::RoleExtend2&
InnerGameEventLoginTeamsvr::_Internal::extd2(const InnerGameEventLoginTeamsvr* msg) {
  return *msg->extd2_;
}
const ::common::RoleExtend3&
InnerGameEventLoginTeamsvr::_Internal::extd3(const InnerGameEventLoginTeamsvr* msg) {
  return *msg->extd3_;
}
const ::common::ExtendFight3v3&
InnerGameEventLoginTeamsvr::_Internal::f33(const InnerGameEventLoginTeamsvr* msg) {
  return *msg->f33_;
}
const ::common::ExtendFight5v5&
InnerGameEventLoginTeamsvr::_Internal::f55(const InnerGameEventLoginTeamsvr* msg) {
  return *msg->f55_;
}
void InnerGameEventLoginTeamsvr::clear_brief() {
  if (GetArenaForAllocation() == nullptr && brief_ != nullptr) {
    delete brief_;
  }
  brief_ = nullptr;
}
void InnerGameEventLoginTeamsvr::clear_extd1() {
  if (GetArenaForAllocation() == nullptr && extd1_ != nullptr) {
    delete extd1_;
  }
  extd1_ = nullptr;
}
void InnerGameEventLoginTeamsvr::clear_extd2() {
  if (GetArenaForAllocation() == nullptr && extd2_ != nullptr) {
    delete extd2_;
  }
  extd2_ = nullptr;
}
void InnerGameEventLoginTeamsvr::clear_extd3() {
  if (GetArenaForAllocation() == nullptr && extd3_ != nullptr) {
    delete extd3_;
  }
  extd3_ = nullptr;
}
void InnerGameEventLoginTeamsvr::clear_f33() {
  if (GetArenaForAllocation() == nullptr && f33_ != nullptr) {
    delete f33_;
  }
  f33_ = nullptr;
}
void InnerGameEventLoginTeamsvr::clear_f55() {
  if (GetArenaForAllocation() == nullptr && f55_ != nullptr) {
    delete f55_;
  }
  f55_ = nullptr;
}
InnerGameEventLoginTeamsvr::InnerGameEventLoginTeamsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventLoginTeamsvr)
}
InnerGameEventLoginTeamsvr::InnerGameEventLoginTeamsvr(const InnerGameEventLoginTeamsvr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_brief()) {
    brief_ = new ::common::RoleBrief(*from.brief_);
  } else {
    brief_ = nullptr;
  }
  if (from._internal_has_extd1()) {
    extd1_ = new ::common::RoleExtend1(*from.extd1_);
  } else {
    extd1_ = nullptr;
  }
  if (from._internal_has_extd2()) {
    extd2_ = new ::common::RoleExtend2(*from.extd2_);
  } else {
    extd2_ = nullptr;
  }
  if (from._internal_has_extd3()) {
    extd3_ = new ::common::RoleExtend3(*from.extd3_);
  } else {
    extd3_ = nullptr;
  }
  if (from._internal_has_f33()) {
    f33_ = new ::common::ExtendFight3v3(*from.f33_);
  } else {
    f33_ = nullptr;
  }
  if (from._internal_has_f55()) {
    f55_ = new ::common::ExtendFight5v5(*from.f55_);
  } else {
    f55_ = nullptr;
  }
  scenehashid_ = from.scenehashid_;
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventLoginTeamsvr)
}

inline void InnerGameEventLoginTeamsvr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&brief_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scenehashid_) -
    reinterpret_cast<char*>(&brief_)) + sizeof(scenehashid_));
}

InnerGameEventLoginTeamsvr::~InnerGameEventLoginTeamsvr() {
  // @@protoc_insertion_point(destructor:inner.InnerGameEventLoginTeamsvr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerGameEventLoginTeamsvr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete brief_;
  if (this != internal_default_instance()) delete extd1_;
  if (this != internal_default_instance()) delete extd2_;
  if (this != internal_default_instance()) delete extd3_;
  if (this != internal_default_instance()) delete f33_;
  if (this != internal_default_instance()) delete f55_;
}

void InnerGameEventLoginTeamsvr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerGameEventLoginTeamsvr::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerGameEventLoginTeamsvr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && brief_ != nullptr) {
    delete brief_;
  }
  brief_ = nullptr;
  if (GetArenaForAllocation() == nullptr && extd1_ != nullptr) {
    delete extd1_;
  }
  extd1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && extd2_ != nullptr) {
    delete extd2_;
  }
  extd2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && extd3_ != nullptr) {
    delete extd3_;
  }
  extd3_ = nullptr;
  if (GetArenaForAllocation() == nullptr && f33_ != nullptr) {
    delete f33_;
  }
  f33_ = nullptr;
  if (GetArenaForAllocation() == nullptr && f55_ != nullptr) {
    delete f55_;
  }
  f55_ = nullptr;
  scenehashid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerGameEventLoginTeamsvr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.RoleBrief brief = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_brief(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.RoleExtend1 extd1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_extd1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.RoleExtend2 extd2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extd2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.RoleExtend3 extd3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_extd3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.ExtendFight3v3 f33 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_f33(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.ExtendFight5v5 f55 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_f55(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sceneHashId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          scenehashid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerGameEventLoginTeamsvr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerGameEventLoginTeamsvr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.RoleBrief brief = 1;
  if (this->_internal_has_brief()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::brief(this),
        _Internal::brief(this).GetCachedSize(), target, stream);
  }

  // .common.RoleExtend1 extd1 = 2;
  if (this->_internal_has_extd1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::extd1(this),
        _Internal::extd1(this).GetCachedSize(), target, stream);
  }

  // .common.RoleExtend2 extd2 = 3;
  if (this->_internal_has_extd2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::extd2(this),
        _Internal::extd2(this).GetCachedSize(), target, stream);
  }

  // .common.RoleExtend3 extd3 = 4;
  if (this->_internal_has_extd3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::extd3(this),
        _Internal::extd3(this).GetCachedSize(), target, stream);
  }

  // .common.ExtendFight3v3 f33 = 5;
  if (this->_internal_has_f33()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::f33(this),
        _Internal::f33(this).GetCachedSize(), target, stream);
  }

  // .common.ExtendFight5v5 f55 = 6;
  if (this->_internal_has_f55()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::f55(this),
        _Internal::f55(this).GetCachedSize(), target, stream);
  }

  // uint32 sceneHashId = 7;
  if (this->_internal_scenehashid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_scenehashid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerGameEventLoginTeamsvr)
  return target;
}

size_t InnerGameEventLoginTeamsvr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerGameEventLoginTeamsvr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.RoleBrief brief = 1;
  if (this->_internal_has_brief()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *brief_);
  }

  // .common.RoleExtend1 extd1 = 2;
  if (this->_internal_has_extd1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extd1_);
  }

  // .common.RoleExtend2 extd2 = 3;
  if (this->_internal_has_extd2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extd2_);
  }

  // .common.RoleExtend3 extd3 = 4;
  if (this->_internal_has_extd3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extd3_);
  }

  // .common.ExtendFight3v3 f33 = 5;
  if (this->_internal_has_f33()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f33_);
  }

  // .common.ExtendFight5v5 f55 = 6;
  if (this->_internal_has_f55()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f55_);
  }

  // uint32 sceneHashId = 7;
  if (this->_internal_scenehashid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_scenehashid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventLoginTeamsvr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerGameEventLoginTeamsvr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventLoginTeamsvr::GetClassData() const { return &_class_data_; }

void InnerGameEventLoginTeamsvr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerGameEventLoginTeamsvr *>(to)->MergeFrom(
      static_cast<const InnerGameEventLoginTeamsvr &>(from));
}


void InnerGameEventLoginTeamsvr::MergeFrom(const InnerGameEventLoginTeamsvr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerGameEventLoginTeamsvr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_brief()) {
    _internal_mutable_brief()->::common::RoleBrief::MergeFrom(from._internal_brief());
  }
  if (from._internal_has_extd1()) {
    _internal_mutable_extd1()->::common::RoleExtend1::MergeFrom(from._internal_extd1());
  }
  if (from._internal_has_extd2()) {
    _internal_mutable_extd2()->::common::RoleExtend2::MergeFrom(from._internal_extd2());
  }
  if (from._internal_has_extd3()) {
    _internal_mutable_extd3()->::common::RoleExtend3::MergeFrom(from._internal_extd3());
  }
  if (from._internal_has_f33()) {
    _internal_mutable_f33()->::common::ExtendFight3v3::MergeFrom(from._internal_f33());
  }
  if (from._internal_has_f55()) {
    _internal_mutable_f55()->::common::ExtendFight5v5::MergeFrom(from._internal_f55());
  }
  if (from._internal_scenehashid() != 0) {
    _internal_set_scenehashid(from._internal_scenehashid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerGameEventLoginTeamsvr::CopyFrom(const InnerGameEventLoginTeamsvr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerGameEventLoginTeamsvr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerGameEventLoginTeamsvr::IsInitialized() const {
  return true;
}

void InnerGameEventLoginTeamsvr::InternalSwap(InnerGameEventLoginTeamsvr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InnerGameEventLoginTeamsvr, scenehashid_)
      + sizeof(InnerGameEventLoginTeamsvr::scenehashid_)
      - PROTOBUF_FIELD_OFFSET(InnerGameEventLoginTeamsvr, brief_)>(
          reinterpret_cast<char*>(&brief_),
          reinterpret_cast<char*>(&other->brief_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventLoginTeamsvr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[24]);
}

// ===================================================================

class InnerGameEventLoginFriendsvr::_Internal {
 public:
  static const ::inner::InnerFriendInfo& oinfo(const InnerGameEventLoginFriendsvr* msg);
  static const ::inner::InnerFriendGiftList& ogifts(const InnerGameEventLoginFriendsvr* msg);
};

const ::inner::InnerFriendInfo&
InnerGameEventLoginFriendsvr::_Internal::oinfo(const InnerGameEventLoginFriendsvr* msg) {
  return *msg->oinfo_;
}
const ::inner::InnerFriendGiftList&
InnerGameEventLoginFriendsvr::_Internal::ogifts(const InnerGameEventLoginFriendsvr* msg) {
  return *msg->ogifts_;
}
void InnerGameEventLoginFriendsvr::clear_oinfo() {
  if (GetArenaForAllocation() == nullptr && oinfo_ != nullptr) {
    delete oinfo_;
  }
  oinfo_ = nullptr;
}
void InnerGameEventLoginFriendsvr::clear_ogifts() {
  if (GetArenaForAllocation() == nullptr && ogifts_ != nullptr) {
    delete ogifts_;
  }
  ogifts_ = nullptr;
}
InnerGameEventLoginFriendsvr::InnerGameEventLoginFriendsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventLoginFriendsvr)
}
InnerGameEventLoginFriendsvr::InnerGameEventLoginFriendsvr(const InnerGameEventLoginFriendsvr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_oinfo()) {
    oinfo_ = new ::inner::InnerFriendInfo(*from.oinfo_);
  } else {
    oinfo_ = nullptr;
  }
  if (from._internal_has_ogifts()) {
    ogifts_ = new ::inner::InnerFriendGiftList(*from.ogifts_);
  } else {
    ogifts_ = nullptr;
  }
  llteamid_ = from.llteamid_;
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventLoginFriendsvr)
}

inline void InnerGameEventLoginFriendsvr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&oinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&llteamid_) -
    reinterpret_cast<char*>(&oinfo_)) + sizeof(llteamid_));
}

InnerGameEventLoginFriendsvr::~InnerGameEventLoginFriendsvr() {
  // @@protoc_insertion_point(destructor:inner.InnerGameEventLoginFriendsvr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerGameEventLoginFriendsvr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete oinfo_;
  if (this != internal_default_instance()) delete ogifts_;
}

void InnerGameEventLoginFriendsvr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerGameEventLoginFriendsvr::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerGameEventLoginFriendsvr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && oinfo_ != nullptr) {
    delete oinfo_;
  }
  oinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ogifts_ != nullptr) {
    delete ogifts_;
  }
  ogifts_ = nullptr;
  llteamid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerGameEventLoginFriendsvr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .inner.InnerFriendInfo oInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_oinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerFriendGiftList oGifts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ogifts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 llTeamId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          llteamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerGameEventLoginFriendsvr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerGameEventLoginFriendsvr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .inner.InnerFriendInfo oInfo = 1;
  if (this->_internal_has_oinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::oinfo(this),
        _Internal::oinfo(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerFriendGiftList oGifts = 2;
  if (this->_internal_has_ogifts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ogifts(this),
        _Internal::ogifts(this).GetCachedSize(), target, stream);
  }

  // uint64 llTeamId = 3;
  if (this->_internal_llteamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_llteamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerGameEventLoginFriendsvr)
  return target;
}

size_t InnerGameEventLoginFriendsvr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerGameEventLoginFriendsvr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .inner.InnerFriendInfo oInfo = 1;
  if (this->_internal_has_oinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oinfo_);
  }

  // .inner.InnerFriendGiftList oGifts = 2;
  if (this->_internal_has_ogifts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ogifts_);
  }

  // uint64 llTeamId = 3;
  if (this->_internal_llteamid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_llteamid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventLoginFriendsvr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerGameEventLoginFriendsvr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventLoginFriendsvr::GetClassData() const { return &_class_data_; }

void InnerGameEventLoginFriendsvr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerGameEventLoginFriendsvr *>(to)->MergeFrom(
      static_cast<const InnerGameEventLoginFriendsvr &>(from));
}


void InnerGameEventLoginFriendsvr::MergeFrom(const InnerGameEventLoginFriendsvr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerGameEventLoginFriendsvr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_oinfo()) {
    _internal_mutable_oinfo()->::inner::InnerFriendInfo::MergeFrom(from._internal_oinfo());
  }
  if (from._internal_has_ogifts()) {
    _internal_mutable_ogifts()->::inner::InnerFriendGiftList::MergeFrom(from._internal_ogifts());
  }
  if (from._internal_llteamid() != 0) {
    _internal_set_llteamid(from._internal_llteamid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerGameEventLoginFriendsvr::CopyFrom(const InnerGameEventLoginFriendsvr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerGameEventLoginFriendsvr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerGameEventLoginFriendsvr::IsInitialized() const {
  return true;
}

void InnerGameEventLoginFriendsvr::InternalSwap(InnerGameEventLoginFriendsvr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InnerGameEventLoginFriendsvr, llteamid_)
      + sizeof(InnerGameEventLoginFriendsvr::llteamid_)
      - PROTOBUF_FIELD_OFFSET(InnerGameEventLoginFriendsvr, oinfo_)>(
          reinterpret_cast<char*>(&oinfo_),
          reinterpret_cast<char*>(&other->oinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventLoginFriendsvr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[25]);
}

// ===================================================================

class InnerGameEventLogout::_Internal {
 public:
  static const ::inner::InnerGameEventLogoutTeamvr& teamsvr(const InnerGameEventLogout* msg);
  static const ::inner::InnerGameEventLogoutFriendsvr& friendsvr(const InnerGameEventLogout* msg);
};

const ::inner::InnerGameEventLogoutTeamvr&
InnerGameEventLogout::_Internal::teamsvr(const InnerGameEventLogout* msg) {
  return *msg->server_.teamsvr_;
}
const ::inner::InnerGameEventLogoutFriendsvr&
InnerGameEventLogout::_Internal::friendsvr(const InnerGameEventLogout* msg) {
  return *msg->server_.friendsvr_;
}
void InnerGameEventLogout::set_allocated_teamsvr(::inner::InnerGameEventLogoutTeamvr* teamsvr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_server();
  if (teamsvr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(teamsvr);
    if (message_arena != submessage_arena) {
      teamsvr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teamsvr, submessage_arena);
    }
    set_has_teamsvr();
    server_.teamsvr_ = teamsvr;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventLogout.teamsvr)
}
void InnerGameEventLogout::set_allocated_friendsvr(::inner::InnerGameEventLogoutFriendsvr* friendsvr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_server();
  if (friendsvr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(friendsvr);
    if (message_arena != submessage_arena) {
      friendsvr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friendsvr, submessage_arena);
    }
    set_has_friendsvr();
    server_.friendsvr_ = friendsvr;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventLogout.friendsvr)
}
InnerGameEventLogout::InnerGameEventLogout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventLogout)
}
InnerGameEventLogout::InnerGameEventLogout(const InnerGameEventLogout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_server();
  switch (from.server_case()) {
    case kTeamsvr: {
      _internal_mutable_teamsvr()->::inner::InnerGameEventLogoutTeamvr::MergeFrom(from._internal_teamsvr());
      break;
    }
    case kFriendsvr: {
      _internal_mutable_friendsvr()->::inner::InnerGameEventLogoutFriendsvr::MergeFrom(from._internal_friendsvr());
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventLogout)
}

inline void InnerGameEventLogout::SharedCtor() {
clear_has_server();
}

InnerGameEventLogout::~InnerGameEventLogout() {
  // @@protoc_insertion_point(destructor:inner.InnerGameEventLogout)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerGameEventLogout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_server()) {
    clear_server();
  }
}

void InnerGameEventLogout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerGameEventLogout::clear_server() {
// @@protoc_insertion_point(one_of_clear_start:inner.InnerGameEventLogout)
  switch (server_case()) {
    case kTeamsvr: {
      if (GetArenaForAllocation() == nullptr) {
        delete server_.teamsvr_;
      }
      break;
    }
    case kFriendsvr: {
      if (GetArenaForAllocation() == nullptr) {
        delete server_.friendsvr_;
      }
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SERVER_NOT_SET;
}


void InnerGameEventLogout::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerGameEventLogout)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_server();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerGameEventLogout::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .inner.InnerGameEventLogoutTeamvr teamsvr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_teamsvr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerGameEventLogoutFriendsvr friendsvr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_friendsvr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerGameEventLogout::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerGameEventLogout)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .inner.InnerGameEventLogoutTeamvr teamsvr = 1;
  if (_internal_has_teamsvr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::teamsvr(this),
        _Internal::teamsvr(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerGameEventLogoutFriendsvr friendsvr = 2;
  if (_internal_has_friendsvr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::friendsvr(this),
        _Internal::friendsvr(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerGameEventLogout)
  return target;
}

size_t InnerGameEventLogout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerGameEventLogout)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (server_case()) {
    // .inner.InnerGameEventLogoutTeamvr teamsvr = 1;
    case kTeamsvr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_.teamsvr_);
      break;
    }
    // .inner.InnerGameEventLogoutFriendsvr friendsvr = 2;
    case kFriendsvr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_.friendsvr_);
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventLogout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerGameEventLogout::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventLogout::GetClassData() const { return &_class_data_; }

void InnerGameEventLogout::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerGameEventLogout *>(to)->MergeFrom(
      static_cast<const InnerGameEventLogout &>(from));
}


void InnerGameEventLogout::MergeFrom(const InnerGameEventLogout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerGameEventLogout)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.server_case()) {
    case kTeamsvr: {
      _internal_mutable_teamsvr()->::inner::InnerGameEventLogoutTeamvr::MergeFrom(from._internal_teamsvr());
      break;
    }
    case kFriendsvr: {
      _internal_mutable_friendsvr()->::inner::InnerGameEventLogoutFriendsvr::MergeFrom(from._internal_friendsvr());
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerGameEventLogout::CopyFrom(const InnerGameEventLogout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerGameEventLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerGameEventLogout::IsInitialized() const {
  return true;
}

void InnerGameEventLogout::InternalSwap(InnerGameEventLogout* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(server_, other->server_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventLogout::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[26]);
}

// ===================================================================

class InnerGameEventLogoutTeamvr::_Internal {
 public:
};

InnerGameEventLogoutTeamvr::InnerGameEventLogoutTeamvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventLogoutTeamvr)
}
InnerGameEventLogoutTeamvr::InnerGameEventLogoutTeamvr(const InnerGameEventLogoutTeamvr& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventLogoutTeamvr)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventLogoutTeamvr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventLogoutTeamvr::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventLogoutTeamvr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[27]);
}

// ===================================================================

class InnerGameEventLogoutFriendsvr::_Internal {
 public:
};

InnerGameEventLogoutFriendsvr::InnerGameEventLogoutFriendsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventLogoutFriendsvr)
}
InnerGameEventLogoutFriendsvr::InnerGameEventLogoutFriendsvr(const InnerGameEventLogoutFriendsvr& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventLogoutFriendsvr)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventLogoutFriendsvr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventLogoutFriendsvr::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventLogoutFriendsvr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[28]);
}

// ===================================================================

class InnerGameEventOnline::_Internal {
 public:
  static const ::inner::InnerGameEventOnlineTeamsvr& teamsvr(const InnerGameEventOnline* msg);
  static const ::inner::InnerGameEventOnlineFriendsvr& friendsvr(const InnerGameEventOnline* msg);
};

const ::inner::InnerGameEventOnlineTeamsvr&
InnerGameEventOnline::_Internal::teamsvr(const InnerGameEventOnline* msg) {
  return *msg->server_.teamsvr_;
}
const ::inner::InnerGameEventOnlineFriendsvr&
InnerGameEventOnline::_Internal::friendsvr(const InnerGameEventOnline* msg) {
  return *msg->server_.friendsvr_;
}
void InnerGameEventOnline::set_allocated_teamsvr(::inner::InnerGameEventOnlineTeamsvr* teamsvr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_server();
  if (teamsvr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(teamsvr);
    if (message_arena != submessage_arena) {
      teamsvr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teamsvr, submessage_arena);
    }
    set_has_teamsvr();
    server_.teamsvr_ = teamsvr;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventOnline.teamsvr)
}
void InnerGameEventOnline::set_allocated_friendsvr(::inner::InnerGameEventOnlineFriendsvr* friendsvr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_server();
  if (friendsvr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(friendsvr);
    if (message_arena != submessage_arena) {
      friendsvr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friendsvr, submessage_arena);
    }
    set_has_friendsvr();
    server_.friendsvr_ = friendsvr;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventOnline.friendsvr)
}
InnerGameEventOnline::InnerGameEventOnline(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventOnline)
}
InnerGameEventOnline::InnerGameEventOnline(const InnerGameEventOnline& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_server();
  switch (from.server_case()) {
    case kTeamsvr: {
      _internal_mutable_teamsvr()->::inner::InnerGameEventOnlineTeamsvr::MergeFrom(from._internal_teamsvr());
      break;
    }
    case kFriendsvr: {
      _internal_mutable_friendsvr()->::inner::InnerGameEventOnlineFriendsvr::MergeFrom(from._internal_friendsvr());
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventOnline)
}

inline void InnerGameEventOnline::SharedCtor() {
clear_has_server();
}

InnerGameEventOnline::~InnerGameEventOnline() {
  // @@protoc_insertion_point(destructor:inner.InnerGameEventOnline)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerGameEventOnline::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_server()) {
    clear_server();
  }
}

void InnerGameEventOnline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerGameEventOnline::clear_server() {
// @@protoc_insertion_point(one_of_clear_start:inner.InnerGameEventOnline)
  switch (server_case()) {
    case kTeamsvr: {
      if (GetArenaForAllocation() == nullptr) {
        delete server_.teamsvr_;
      }
      break;
    }
    case kFriendsvr: {
      if (GetArenaForAllocation() == nullptr) {
        delete server_.friendsvr_;
      }
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SERVER_NOT_SET;
}


void InnerGameEventOnline::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerGameEventOnline)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_server();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerGameEventOnline::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .inner.InnerGameEventOnlineTeamsvr teamsvr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_teamsvr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerGameEventOnlineFriendsvr friendsvr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_friendsvr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerGameEventOnline::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerGameEventOnline)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .inner.InnerGameEventOnlineTeamsvr teamsvr = 1;
  if (_internal_has_teamsvr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::teamsvr(this),
        _Internal::teamsvr(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerGameEventOnlineFriendsvr friendsvr = 2;
  if (_internal_has_friendsvr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::friendsvr(this),
        _Internal::friendsvr(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerGameEventOnline)
  return target;
}

size_t InnerGameEventOnline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerGameEventOnline)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (server_case()) {
    // .inner.InnerGameEventOnlineTeamsvr teamsvr = 1;
    case kTeamsvr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_.teamsvr_);
      break;
    }
    // .inner.InnerGameEventOnlineFriendsvr friendsvr = 2;
    case kFriendsvr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_.friendsvr_);
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventOnline::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerGameEventOnline::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventOnline::GetClassData() const { return &_class_data_; }

void InnerGameEventOnline::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerGameEventOnline *>(to)->MergeFrom(
      static_cast<const InnerGameEventOnline &>(from));
}


void InnerGameEventOnline::MergeFrom(const InnerGameEventOnline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerGameEventOnline)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.server_case()) {
    case kTeamsvr: {
      _internal_mutable_teamsvr()->::inner::InnerGameEventOnlineTeamsvr::MergeFrom(from._internal_teamsvr());
      break;
    }
    case kFriendsvr: {
      _internal_mutable_friendsvr()->::inner::InnerGameEventOnlineFriendsvr::MergeFrom(from._internal_friendsvr());
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerGameEventOnline::CopyFrom(const InnerGameEventOnline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerGameEventOnline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerGameEventOnline::IsInitialized() const {
  return true;
}

void InnerGameEventOnline::InternalSwap(InnerGameEventOnline* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(server_, other->server_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventOnline::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[29]);
}

// ===================================================================

class InnerGameEventOnlineTeamsvr::_Internal {
 public:
  static const ::common::RoleExtend2& extd2(const InnerGameEventOnlineTeamsvr* msg);
  static const ::common::RoleExtend3& extd3(const InnerGameEventOnlineTeamsvr* msg);
};

const ::common::RoleExtend2&
InnerGameEventOnlineTeamsvr::_Internal::extd2(const InnerGameEventOnlineTeamsvr* msg) {
  return *msg->extd2_;
}
const ::common::RoleExtend3&
InnerGameEventOnlineTeamsvr::_Internal::extd3(const InnerGameEventOnlineTeamsvr* msg) {
  return *msg->extd3_;
}
void InnerGameEventOnlineTeamsvr::clear_extd2() {
  if (GetArenaForAllocation() == nullptr && extd2_ != nullptr) {
    delete extd2_;
  }
  extd2_ = nullptr;
}
void InnerGameEventOnlineTeamsvr::clear_extd3() {
  if (GetArenaForAllocation() == nullptr && extd3_ != nullptr) {
    delete extd3_;
  }
  extd3_ = nullptr;
}
InnerGameEventOnlineTeamsvr::InnerGameEventOnlineTeamsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventOnlineTeamsvr)
}
InnerGameEventOnlineTeamsvr::InnerGameEventOnlineTeamsvr(const InnerGameEventOnlineTeamsvr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_extd2()) {
    extd2_ = new ::common::RoleExtend2(*from.extd2_);
  } else {
    extd2_ = nullptr;
  }
  if (from._internal_has_extd3()) {
    extd3_ = new ::common::RoleExtend3(*from.extd3_);
  } else {
    extd3_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventOnlineTeamsvr)
}

inline void InnerGameEventOnlineTeamsvr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&extd2_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&extd3_) -
    reinterpret_cast<char*>(&extd2_)) + sizeof(extd3_));
}

InnerGameEventOnlineTeamsvr::~InnerGameEventOnlineTeamsvr() {
  // @@protoc_insertion_point(destructor:inner.InnerGameEventOnlineTeamsvr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerGameEventOnlineTeamsvr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete extd2_;
  if (this != internal_default_instance()) delete extd3_;
}

void InnerGameEventOnlineTeamsvr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerGameEventOnlineTeamsvr::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerGameEventOnlineTeamsvr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && extd2_ != nullptr) {
    delete extd2_;
  }
  extd2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && extd3_ != nullptr) {
    delete extd3_;
  }
  extd3_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerGameEventOnlineTeamsvr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.RoleExtend2 extd2 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_extd2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.RoleExtend3 extd3 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_extd3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerGameEventOnlineTeamsvr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerGameEventOnlineTeamsvr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.RoleExtend2 extd2 = 1;
  if (this->_internal_has_extd2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::extd2(this),
        _Internal::extd2(this).GetCachedSize(), target, stream);
  }

  // .common.RoleExtend3 extd3 = 2;
  if (this->_internal_has_extd3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::extd3(this),
        _Internal::extd3(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerGameEventOnlineTeamsvr)
  return target;
}

size_t InnerGameEventOnlineTeamsvr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerGameEventOnlineTeamsvr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.RoleExtend2 extd2 = 1;
  if (this->_internal_has_extd2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extd2_);
  }

  // .common.RoleExtend3 extd3 = 2;
  if (this->_internal_has_extd3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extd3_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventOnlineTeamsvr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerGameEventOnlineTeamsvr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventOnlineTeamsvr::GetClassData() const { return &_class_data_; }

void InnerGameEventOnlineTeamsvr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerGameEventOnlineTeamsvr *>(to)->MergeFrom(
      static_cast<const InnerGameEventOnlineTeamsvr &>(from));
}


void InnerGameEventOnlineTeamsvr::MergeFrom(const InnerGameEventOnlineTeamsvr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerGameEventOnlineTeamsvr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_extd2()) {
    _internal_mutable_extd2()->::common::RoleExtend2::MergeFrom(from._internal_extd2());
  }
  if (from._internal_has_extd3()) {
    _internal_mutable_extd3()->::common::RoleExtend3::MergeFrom(from._internal_extd3());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerGameEventOnlineTeamsvr::CopyFrom(const InnerGameEventOnlineTeamsvr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerGameEventOnlineTeamsvr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerGameEventOnlineTeamsvr::IsInitialized() const {
  return true;
}

void InnerGameEventOnlineTeamsvr::InternalSwap(InnerGameEventOnlineTeamsvr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InnerGameEventOnlineTeamsvr, extd3_)
      + sizeof(InnerGameEventOnlineTeamsvr::extd3_)
      - PROTOBUF_FIELD_OFFSET(InnerGameEventOnlineTeamsvr, extd2_)>(
          reinterpret_cast<char*>(&extd2_),
          reinterpret_cast<char*>(&other->extd2_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventOnlineTeamsvr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[30]);
}

// ===================================================================

class InnerGameEventOnlineFriendsvr::_Internal {
 public:
  static const ::inner::InnerFriendInfo& oinfo(const InnerGameEventOnlineFriendsvr* msg);
  static const ::inner::InnerFriendGiftList& ogifts(const InnerGameEventOnlineFriendsvr* msg);
};

const ::inner::InnerFriendInfo&
InnerGameEventOnlineFriendsvr::_Internal::oinfo(const InnerGameEventOnlineFriendsvr* msg) {
  return *msg->oinfo_;
}
const ::inner::InnerFriendGiftList&
InnerGameEventOnlineFriendsvr::_Internal::ogifts(const InnerGameEventOnlineFriendsvr* msg) {
  return *msg->ogifts_;
}
void InnerGameEventOnlineFriendsvr::clear_oinfo() {
  if (GetArenaForAllocation() == nullptr && oinfo_ != nullptr) {
    delete oinfo_;
  }
  oinfo_ = nullptr;
}
void InnerGameEventOnlineFriendsvr::clear_ogifts() {
  if (GetArenaForAllocation() == nullptr && ogifts_ != nullptr) {
    delete ogifts_;
  }
  ogifts_ = nullptr;
}
InnerGameEventOnlineFriendsvr::InnerGameEventOnlineFriendsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventOnlineFriendsvr)
}
InnerGameEventOnlineFriendsvr::InnerGameEventOnlineFriendsvr(const InnerGameEventOnlineFriendsvr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_oinfo()) {
    oinfo_ = new ::inner::InnerFriendInfo(*from.oinfo_);
  } else {
    oinfo_ = nullptr;
  }
  if (from._internal_has_ogifts()) {
    ogifts_ = new ::inner::InnerFriendGiftList(*from.ogifts_);
  } else {
    ogifts_ = nullptr;
  }
  llteamid_ = from.llteamid_;
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventOnlineFriendsvr)
}

inline void InnerGameEventOnlineFriendsvr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&oinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&llteamid_) -
    reinterpret_cast<char*>(&oinfo_)) + sizeof(llteamid_));
}

InnerGameEventOnlineFriendsvr::~InnerGameEventOnlineFriendsvr() {
  // @@protoc_insertion_point(destructor:inner.InnerGameEventOnlineFriendsvr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerGameEventOnlineFriendsvr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete oinfo_;
  if (this != internal_default_instance()) delete ogifts_;
}

void InnerGameEventOnlineFriendsvr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerGameEventOnlineFriendsvr::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerGameEventOnlineFriendsvr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && oinfo_ != nullptr) {
    delete oinfo_;
  }
  oinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ogifts_ != nullptr) {
    delete ogifts_;
  }
  ogifts_ = nullptr;
  llteamid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerGameEventOnlineFriendsvr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .inner.InnerFriendInfo oInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_oinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerFriendGiftList oGifts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ogifts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 llTeamId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          llteamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerGameEventOnlineFriendsvr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerGameEventOnlineFriendsvr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .inner.InnerFriendInfo oInfo = 1;
  if (this->_internal_has_oinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::oinfo(this),
        _Internal::oinfo(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerFriendGiftList oGifts = 2;
  if (this->_internal_has_ogifts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ogifts(this),
        _Internal::ogifts(this).GetCachedSize(), target, stream);
  }

  // uint64 llTeamId = 3;
  if (this->_internal_llteamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_llteamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerGameEventOnlineFriendsvr)
  return target;
}

size_t InnerGameEventOnlineFriendsvr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerGameEventOnlineFriendsvr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .inner.InnerFriendInfo oInfo = 1;
  if (this->_internal_has_oinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oinfo_);
  }

  // .inner.InnerFriendGiftList oGifts = 2;
  if (this->_internal_has_ogifts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ogifts_);
  }

  // uint64 llTeamId = 3;
  if (this->_internal_llteamid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_llteamid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventOnlineFriendsvr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerGameEventOnlineFriendsvr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventOnlineFriendsvr::GetClassData() const { return &_class_data_; }

void InnerGameEventOnlineFriendsvr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerGameEventOnlineFriendsvr *>(to)->MergeFrom(
      static_cast<const InnerGameEventOnlineFriendsvr &>(from));
}


void InnerGameEventOnlineFriendsvr::MergeFrom(const InnerGameEventOnlineFriendsvr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerGameEventOnlineFriendsvr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_oinfo()) {
    _internal_mutable_oinfo()->::inner::InnerFriendInfo::MergeFrom(from._internal_oinfo());
  }
  if (from._internal_has_ogifts()) {
    _internal_mutable_ogifts()->::inner::InnerFriendGiftList::MergeFrom(from._internal_ogifts());
  }
  if (from._internal_llteamid() != 0) {
    _internal_set_llteamid(from._internal_llteamid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerGameEventOnlineFriendsvr::CopyFrom(const InnerGameEventOnlineFriendsvr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerGameEventOnlineFriendsvr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerGameEventOnlineFriendsvr::IsInitialized() const {
  return true;
}

void InnerGameEventOnlineFriendsvr::InternalSwap(InnerGameEventOnlineFriendsvr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InnerGameEventOnlineFriendsvr, llteamid_)
      + sizeof(InnerGameEventOnlineFriendsvr::llteamid_)
      - PROTOBUF_FIELD_OFFSET(InnerGameEventOnlineFriendsvr, oinfo_)>(
          reinterpret_cast<char*>(&oinfo_),
          reinterpret_cast<char*>(&other->oinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventOnlineFriendsvr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[31]);
}

// ===================================================================

class InnerGameEventOffline::_Internal {
 public:
  static const ::inner::InnerGameEventOfflineTeamsvr& teamsvr(const InnerGameEventOffline* msg);
  static const ::inner::InnerGameEventOfflineFriendsvr& friendsvr(const InnerGameEventOffline* msg);
};

const ::inner::InnerGameEventOfflineTeamsvr&
InnerGameEventOffline::_Internal::teamsvr(const InnerGameEventOffline* msg) {
  return *msg->server_.teamsvr_;
}
const ::inner::InnerGameEventOfflineFriendsvr&
InnerGameEventOffline::_Internal::friendsvr(const InnerGameEventOffline* msg) {
  return *msg->server_.friendsvr_;
}
void InnerGameEventOffline::set_allocated_teamsvr(::inner::InnerGameEventOfflineTeamsvr* teamsvr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_server();
  if (teamsvr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(teamsvr);
    if (message_arena != submessage_arena) {
      teamsvr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teamsvr, submessage_arena);
    }
    set_has_teamsvr();
    server_.teamsvr_ = teamsvr;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventOffline.teamsvr)
}
void InnerGameEventOffline::set_allocated_friendsvr(::inner::InnerGameEventOfflineFriendsvr* friendsvr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_server();
  if (friendsvr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(friendsvr);
    if (message_arena != submessage_arena) {
      friendsvr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friendsvr, submessage_arena);
    }
    set_has_friendsvr();
    server_.friendsvr_ = friendsvr;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventOffline.friendsvr)
}
InnerGameEventOffline::InnerGameEventOffline(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventOffline)
}
InnerGameEventOffline::InnerGameEventOffline(const InnerGameEventOffline& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_server();
  switch (from.server_case()) {
    case kTeamsvr: {
      _internal_mutable_teamsvr()->::inner::InnerGameEventOfflineTeamsvr::MergeFrom(from._internal_teamsvr());
      break;
    }
    case kFriendsvr: {
      _internal_mutable_friendsvr()->::inner::InnerGameEventOfflineFriendsvr::MergeFrom(from._internal_friendsvr());
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventOffline)
}

inline void InnerGameEventOffline::SharedCtor() {
clear_has_server();
}

InnerGameEventOffline::~InnerGameEventOffline() {
  // @@protoc_insertion_point(destructor:inner.InnerGameEventOffline)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerGameEventOffline::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_server()) {
    clear_server();
  }
}

void InnerGameEventOffline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerGameEventOffline::clear_server() {
// @@protoc_insertion_point(one_of_clear_start:inner.InnerGameEventOffline)
  switch (server_case()) {
    case kTeamsvr: {
      if (GetArenaForAllocation() == nullptr) {
        delete server_.teamsvr_;
      }
      break;
    }
    case kFriendsvr: {
      if (GetArenaForAllocation() == nullptr) {
        delete server_.friendsvr_;
      }
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SERVER_NOT_SET;
}


void InnerGameEventOffline::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerGameEventOffline)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_server();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerGameEventOffline::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .inner.InnerGameEventOfflineTeamsvr teamsvr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_teamsvr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerGameEventOfflineFriendsvr friendsvr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_friendsvr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerGameEventOffline::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerGameEventOffline)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .inner.InnerGameEventOfflineTeamsvr teamsvr = 1;
  if (_internal_has_teamsvr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::teamsvr(this),
        _Internal::teamsvr(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerGameEventOfflineFriendsvr friendsvr = 2;
  if (_internal_has_friendsvr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::friendsvr(this),
        _Internal::friendsvr(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerGameEventOffline)
  return target;
}

size_t InnerGameEventOffline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerGameEventOffline)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (server_case()) {
    // .inner.InnerGameEventOfflineTeamsvr teamsvr = 1;
    case kTeamsvr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_.teamsvr_);
      break;
    }
    // .inner.InnerGameEventOfflineFriendsvr friendsvr = 2;
    case kFriendsvr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_.friendsvr_);
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventOffline::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerGameEventOffline::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventOffline::GetClassData() const { return &_class_data_; }

void InnerGameEventOffline::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerGameEventOffline *>(to)->MergeFrom(
      static_cast<const InnerGameEventOffline &>(from));
}


void InnerGameEventOffline::MergeFrom(const InnerGameEventOffline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerGameEventOffline)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.server_case()) {
    case kTeamsvr: {
      _internal_mutable_teamsvr()->::inner::InnerGameEventOfflineTeamsvr::MergeFrom(from._internal_teamsvr());
      break;
    }
    case kFriendsvr: {
      _internal_mutable_friendsvr()->::inner::InnerGameEventOfflineFriendsvr::MergeFrom(from._internal_friendsvr());
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerGameEventOffline::CopyFrom(const InnerGameEventOffline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerGameEventOffline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerGameEventOffline::IsInitialized() const {
  return true;
}

void InnerGameEventOffline::InternalSwap(InnerGameEventOffline* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(server_, other->server_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventOffline::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[32]);
}

// ===================================================================

class InnerGameEventOfflineTeamsvr::_Internal {
 public:
};

InnerGameEventOfflineTeamsvr::InnerGameEventOfflineTeamsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventOfflineTeamsvr)
}
InnerGameEventOfflineTeamsvr::InnerGameEventOfflineTeamsvr(const InnerGameEventOfflineTeamsvr& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventOfflineTeamsvr)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventOfflineTeamsvr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventOfflineTeamsvr::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventOfflineTeamsvr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[33]);
}

// ===================================================================

class InnerGameEventOfflineFriendsvr::_Internal {
 public:
};

InnerGameEventOfflineFriendsvr::InnerGameEventOfflineFriendsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventOfflineFriendsvr)
}
InnerGameEventOfflineFriendsvr::InnerGameEventOfflineFriendsvr(const InnerGameEventOfflineFriendsvr& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventOfflineFriendsvr)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventOfflineFriendsvr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventOfflineFriendsvr::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventOfflineFriendsvr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[34]);
}

// ===================================================================

class InnerGameEventChangeMap::_Internal {
 public:
  static const ::inner::InnerGameEventChangeMapTeamsvr& teamsvr(const InnerGameEventChangeMap* msg);
  static const ::inner::InnerGameEventChangeMapFriendsvr& friendsvr(const InnerGameEventChangeMap* msg);
};

const ::inner::InnerGameEventChangeMapTeamsvr&
InnerGameEventChangeMap::_Internal::teamsvr(const InnerGameEventChangeMap* msg) {
  return *msg->server_.teamsvr_;
}
const ::inner::InnerGameEventChangeMapFriendsvr&
InnerGameEventChangeMap::_Internal::friendsvr(const InnerGameEventChangeMap* msg) {
  return *msg->server_.friendsvr_;
}
void InnerGameEventChangeMap::set_allocated_teamsvr(::inner::InnerGameEventChangeMapTeamsvr* teamsvr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_server();
  if (teamsvr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(teamsvr);
    if (message_arena != submessage_arena) {
      teamsvr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teamsvr, submessage_arena);
    }
    set_has_teamsvr();
    server_.teamsvr_ = teamsvr;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventChangeMap.teamsvr)
}
void InnerGameEventChangeMap::set_allocated_friendsvr(::inner::InnerGameEventChangeMapFriendsvr* friendsvr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_server();
  if (friendsvr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(friendsvr);
    if (message_arena != submessage_arena) {
      friendsvr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friendsvr, submessage_arena);
    }
    set_has_friendsvr();
    server_.friendsvr_ = friendsvr;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventChangeMap.friendsvr)
}
InnerGameEventChangeMap::InnerGameEventChangeMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventChangeMap)
}
InnerGameEventChangeMap::InnerGameEventChangeMap(const InnerGameEventChangeMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uiprocdirect_ = from.uiprocdirect_;
  clear_has_server();
  switch (from.server_case()) {
    case kTeamsvr: {
      _internal_mutable_teamsvr()->::inner::InnerGameEventChangeMapTeamsvr::MergeFrom(from._internal_teamsvr());
      break;
    }
    case kFriendsvr: {
      _internal_mutable_friendsvr()->::inner::InnerGameEventChangeMapFriendsvr::MergeFrom(from._internal_friendsvr());
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventChangeMap)
}

inline void InnerGameEventChangeMap::SharedCtor() {
uiprocdirect_ = 0u;
clear_has_server();
}

InnerGameEventChangeMap::~InnerGameEventChangeMap() {
  // @@protoc_insertion_point(destructor:inner.InnerGameEventChangeMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerGameEventChangeMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_server()) {
    clear_server();
  }
}

void InnerGameEventChangeMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerGameEventChangeMap::clear_server() {
// @@protoc_insertion_point(one_of_clear_start:inner.InnerGameEventChangeMap)
  switch (server_case()) {
    case kTeamsvr: {
      if (GetArenaForAllocation() == nullptr) {
        delete server_.teamsvr_;
      }
      break;
    }
    case kFriendsvr: {
      if (GetArenaForAllocation() == nullptr) {
        delete server_.friendsvr_;
      }
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SERVER_NOT_SET;
}


void InnerGameEventChangeMap::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerGameEventChangeMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uiprocdirect_ = 0u;
  clear_server();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerGameEventChangeMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .inner.InnerGameEventChangeMapTeamsvr teamsvr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_teamsvr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerGameEventChangeMapFriendsvr friendsvr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_friendsvr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiProcDirect = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uiprocdirect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerGameEventChangeMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerGameEventChangeMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .inner.InnerGameEventChangeMapTeamsvr teamsvr = 1;
  if (_internal_has_teamsvr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::teamsvr(this),
        _Internal::teamsvr(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerGameEventChangeMapFriendsvr friendsvr = 2;
  if (_internal_has_friendsvr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::friendsvr(this),
        _Internal::friendsvr(this).GetCachedSize(), target, stream);
  }

  // uint32 uiProcDirect = 100;
  if (this->_internal_uiprocdirect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(100, this->_internal_uiprocdirect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerGameEventChangeMap)
  return target;
}

size_t InnerGameEventChangeMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerGameEventChangeMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 uiProcDirect = 100;
  if (this->_internal_uiprocdirect() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_uiprocdirect());
  }

  switch (server_case()) {
    // .inner.InnerGameEventChangeMapTeamsvr teamsvr = 1;
    case kTeamsvr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_.teamsvr_);
      break;
    }
    // .inner.InnerGameEventChangeMapFriendsvr friendsvr = 2;
    case kFriendsvr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_.friendsvr_);
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventChangeMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerGameEventChangeMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventChangeMap::GetClassData() const { return &_class_data_; }

void InnerGameEventChangeMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerGameEventChangeMap *>(to)->MergeFrom(
      static_cast<const InnerGameEventChangeMap &>(from));
}


void InnerGameEventChangeMap::MergeFrom(const InnerGameEventChangeMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerGameEventChangeMap)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uiprocdirect() != 0) {
    _internal_set_uiprocdirect(from._internal_uiprocdirect());
  }
  switch (from.server_case()) {
    case kTeamsvr: {
      _internal_mutable_teamsvr()->::inner::InnerGameEventChangeMapTeamsvr::MergeFrom(from._internal_teamsvr());
      break;
    }
    case kFriendsvr: {
      _internal_mutable_friendsvr()->::inner::InnerGameEventChangeMapFriendsvr::MergeFrom(from._internal_friendsvr());
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerGameEventChangeMap::CopyFrom(const InnerGameEventChangeMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerGameEventChangeMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerGameEventChangeMap::IsInitialized() const {
  return true;
}

void InnerGameEventChangeMap::InternalSwap(InnerGameEventChangeMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(uiprocdirect_, other->uiprocdirect_);
  swap(server_, other->server_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventChangeMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[35]);
}

// ===================================================================

class InnerGameEventChangeMapTeamsvr::_Internal {
 public:
  static const ::common::RoleBrief& brief(const InnerGameEventChangeMapTeamsvr* msg);
  static const ::common::RoleExtend1& extd1(const InnerGameEventChangeMapTeamsvr* msg);
  static const ::common::RoleExtend2& extd2(const InnerGameEventChangeMapTeamsvr* msg);
  static const ::common::RoleExtend3& extd3(const InnerGameEventChangeMapTeamsvr* msg);
  static const ::common::ExtendFight3v3& f33(const InnerGameEventChangeMapTeamsvr* msg);
  static const ::common::ExtendFight5v5& f55(const InnerGameEventChangeMapTeamsvr* msg);
};

const ::common::RoleBrief&
InnerGameEventChangeMapTeamsvr::_Internal::brief(const InnerGameEventChangeMapTeamsvr* msg) {
  return *msg->brief_;
}
const ::common::RoleExtend1&
InnerGameEventChangeMapTeamsvr::_Internal::extd1(const InnerGameEventChangeMapTeamsvr* msg) {
  return *msg->extd1_;
}
const ::common::RoleExtend2&
InnerGameEventChangeMapTeamsvr::_Internal::extd2(const InnerGameEventChangeMapTeamsvr* msg) {
  return *msg->extd2_;
}
const ::common::RoleExtend3&
InnerGameEventChangeMapTeamsvr::_Internal::extd3(const InnerGameEventChangeMapTeamsvr* msg) {
  return *msg->extd3_;
}
const ::common::ExtendFight3v3&
InnerGameEventChangeMapTeamsvr::_Internal::f33(const InnerGameEventChangeMapTeamsvr* msg) {
  return *msg->f33_;
}
const ::common::ExtendFight5v5&
InnerGameEventChangeMapTeamsvr::_Internal::f55(const InnerGameEventChangeMapTeamsvr* msg) {
  return *msg->f55_;
}
void InnerGameEventChangeMapTeamsvr::clear_brief() {
  if (GetArenaForAllocation() == nullptr && brief_ != nullptr) {
    delete brief_;
  }
  brief_ = nullptr;
}
void InnerGameEventChangeMapTeamsvr::clear_extd1() {
  if (GetArenaForAllocation() == nullptr && extd1_ != nullptr) {
    delete extd1_;
  }
  extd1_ = nullptr;
}
void InnerGameEventChangeMapTeamsvr::clear_extd2() {
  if (GetArenaForAllocation() == nullptr && extd2_ != nullptr) {
    delete extd2_;
  }
  extd2_ = nullptr;
}
void InnerGameEventChangeMapTeamsvr::clear_extd3() {
  if (GetArenaForAllocation() == nullptr && extd3_ != nullptr) {
    delete extd3_;
  }
  extd3_ = nullptr;
}
void InnerGameEventChangeMapTeamsvr::clear_f33() {
  if (GetArenaForAllocation() == nullptr && f33_ != nullptr) {
    delete f33_;
  }
  f33_ = nullptr;
}
void InnerGameEventChangeMapTeamsvr::clear_f55() {
  if (GetArenaForAllocation() == nullptr && f55_ != nullptr) {
    delete f55_;
  }
  f55_ = nullptr;
}
InnerGameEventChangeMapTeamsvr::InnerGameEventChangeMapTeamsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventChangeMapTeamsvr)
}
InnerGameEventChangeMapTeamsvr::InnerGameEventChangeMapTeamsvr(const InnerGameEventChangeMapTeamsvr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_brief()) {
    brief_ = new ::common::RoleBrief(*from.brief_);
  } else {
    brief_ = nullptr;
  }
  if (from._internal_has_extd1()) {
    extd1_ = new ::common::RoleExtend1(*from.extd1_);
  } else {
    extd1_ = nullptr;
  }
  if (from._internal_has_extd2()) {
    extd2_ = new ::common::RoleExtend2(*from.extd2_);
  } else {
    extd2_ = nullptr;
  }
  if (from._internal_has_extd3()) {
    extd3_ = new ::common::RoleExtend3(*from.extd3_);
  } else {
    extd3_ = nullptr;
  }
  if (from._internal_has_f33()) {
    f33_ = new ::common::ExtendFight3v3(*from.f33_);
  } else {
    f33_ = nullptr;
  }
  if (from._internal_has_f55()) {
    f55_ = new ::common::ExtendFight5v5(*from.f55_);
  } else {
    f55_ = nullptr;
  }
  scenehashid_ = from.scenehashid_;
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventChangeMapTeamsvr)
}

inline void InnerGameEventChangeMapTeamsvr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&brief_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scenehashid_) -
    reinterpret_cast<char*>(&brief_)) + sizeof(scenehashid_));
}

InnerGameEventChangeMapTeamsvr::~InnerGameEventChangeMapTeamsvr() {
  // @@protoc_insertion_point(destructor:inner.InnerGameEventChangeMapTeamsvr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerGameEventChangeMapTeamsvr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete brief_;
  if (this != internal_default_instance()) delete extd1_;
  if (this != internal_default_instance()) delete extd2_;
  if (this != internal_default_instance()) delete extd3_;
  if (this != internal_default_instance()) delete f33_;
  if (this != internal_default_instance()) delete f55_;
}

void InnerGameEventChangeMapTeamsvr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerGameEventChangeMapTeamsvr::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerGameEventChangeMapTeamsvr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && brief_ != nullptr) {
    delete brief_;
  }
  brief_ = nullptr;
  if (GetArenaForAllocation() == nullptr && extd1_ != nullptr) {
    delete extd1_;
  }
  extd1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && extd2_ != nullptr) {
    delete extd2_;
  }
  extd2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && extd3_ != nullptr) {
    delete extd3_;
  }
  extd3_ = nullptr;
  if (GetArenaForAllocation() == nullptr && f33_ != nullptr) {
    delete f33_;
  }
  f33_ = nullptr;
  if (GetArenaForAllocation() == nullptr && f55_ != nullptr) {
    delete f55_;
  }
  f55_ = nullptr;
  scenehashid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerGameEventChangeMapTeamsvr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.RoleBrief brief = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_brief(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.RoleExtend1 extd1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_extd1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.RoleExtend2 extd2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extd2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.RoleExtend3 extd3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_extd3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.ExtendFight3v3 f33 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_f33(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.ExtendFight5v5 f55 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_f55(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sceneHashId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          scenehashid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerGameEventChangeMapTeamsvr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerGameEventChangeMapTeamsvr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.RoleBrief brief = 1;
  if (this->_internal_has_brief()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::brief(this),
        _Internal::brief(this).GetCachedSize(), target, stream);
  }

  // .common.RoleExtend1 extd1 = 2;
  if (this->_internal_has_extd1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::extd1(this),
        _Internal::extd1(this).GetCachedSize(), target, stream);
  }

  // .common.RoleExtend2 extd2 = 3;
  if (this->_internal_has_extd2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::extd2(this),
        _Internal::extd2(this).GetCachedSize(), target, stream);
  }

  // .common.RoleExtend3 extd3 = 4;
  if (this->_internal_has_extd3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::extd3(this),
        _Internal::extd3(this).GetCachedSize(), target, stream);
  }

  // .common.ExtendFight3v3 f33 = 5;
  if (this->_internal_has_f33()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::f33(this),
        _Internal::f33(this).GetCachedSize(), target, stream);
  }

  // .common.ExtendFight5v5 f55 = 6;
  if (this->_internal_has_f55()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::f55(this),
        _Internal::f55(this).GetCachedSize(), target, stream);
  }

  // uint32 sceneHashId = 7;
  if (this->_internal_scenehashid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_scenehashid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerGameEventChangeMapTeamsvr)
  return target;
}

size_t InnerGameEventChangeMapTeamsvr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerGameEventChangeMapTeamsvr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.RoleBrief brief = 1;
  if (this->_internal_has_brief()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *brief_);
  }

  // .common.RoleExtend1 extd1 = 2;
  if (this->_internal_has_extd1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extd1_);
  }

  // .common.RoleExtend2 extd2 = 3;
  if (this->_internal_has_extd2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extd2_);
  }

  // .common.RoleExtend3 extd3 = 4;
  if (this->_internal_has_extd3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extd3_);
  }

  // .common.ExtendFight3v3 f33 = 5;
  if (this->_internal_has_f33()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f33_);
  }

  // .common.ExtendFight5v5 f55 = 6;
  if (this->_internal_has_f55()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f55_);
  }

  // uint32 sceneHashId = 7;
  if (this->_internal_scenehashid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_scenehashid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventChangeMapTeamsvr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerGameEventChangeMapTeamsvr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventChangeMapTeamsvr::GetClassData() const { return &_class_data_; }

void InnerGameEventChangeMapTeamsvr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerGameEventChangeMapTeamsvr *>(to)->MergeFrom(
      static_cast<const InnerGameEventChangeMapTeamsvr &>(from));
}


void InnerGameEventChangeMapTeamsvr::MergeFrom(const InnerGameEventChangeMapTeamsvr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerGameEventChangeMapTeamsvr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_brief()) {
    _internal_mutable_brief()->::common::RoleBrief::MergeFrom(from._internal_brief());
  }
  if (from._internal_has_extd1()) {
    _internal_mutable_extd1()->::common::RoleExtend1::MergeFrom(from._internal_extd1());
  }
  if (from._internal_has_extd2()) {
    _internal_mutable_extd2()->::common::RoleExtend2::MergeFrom(from._internal_extd2());
  }
  if (from._internal_has_extd3()) {
    _internal_mutable_extd3()->::common::RoleExtend3::MergeFrom(from._internal_extd3());
  }
  if (from._internal_has_f33()) {
    _internal_mutable_f33()->::common::ExtendFight3v3::MergeFrom(from._internal_f33());
  }
  if (from._internal_has_f55()) {
    _internal_mutable_f55()->::common::ExtendFight5v5::MergeFrom(from._internal_f55());
  }
  if (from._internal_scenehashid() != 0) {
    _internal_set_scenehashid(from._internal_scenehashid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerGameEventChangeMapTeamsvr::CopyFrom(const InnerGameEventChangeMapTeamsvr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerGameEventChangeMapTeamsvr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerGameEventChangeMapTeamsvr::IsInitialized() const {
  return true;
}

void InnerGameEventChangeMapTeamsvr::InternalSwap(InnerGameEventChangeMapTeamsvr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InnerGameEventChangeMapTeamsvr, scenehashid_)
      + sizeof(InnerGameEventChangeMapTeamsvr::scenehashid_)
      - PROTOBUF_FIELD_OFFSET(InnerGameEventChangeMapTeamsvr, brief_)>(
          reinterpret_cast<char*>(&brief_),
          reinterpret_cast<char*>(&other->brief_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventChangeMapTeamsvr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[36]);
}

// ===================================================================

class InnerGameEventChangeMapFriendsvr::_Internal {
 public:
};

InnerGameEventChangeMapFriendsvr::InnerGameEventChangeMapFriendsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventChangeMapFriendsvr)
}
InnerGameEventChangeMapFriendsvr::InnerGameEventChangeMapFriendsvr(const InnerGameEventChangeMapFriendsvr& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventChangeMapFriendsvr)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventChangeMapFriendsvr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventChangeMapFriendsvr::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventChangeMapFriendsvr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[37]);
}

// ===================================================================

class InnerGameEventDeath::_Internal {
 public:
  static const ::inner::InnerGameEventDeathTeamsvr& teamsvr(const InnerGameEventDeath* msg);
  static const ::inner::InnerGameEventDeathFriendsvr& friendsvr(const InnerGameEventDeath* msg);
};

const ::inner::InnerGameEventDeathTeamsvr&
InnerGameEventDeath::_Internal::teamsvr(const InnerGameEventDeath* msg) {
  return *msg->server_.teamsvr_;
}
const ::inner::InnerGameEventDeathFriendsvr&
InnerGameEventDeath::_Internal::friendsvr(const InnerGameEventDeath* msg) {
  return *msg->server_.friendsvr_;
}
void InnerGameEventDeath::set_allocated_teamsvr(::inner::InnerGameEventDeathTeamsvr* teamsvr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_server();
  if (teamsvr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(teamsvr);
    if (message_arena != submessage_arena) {
      teamsvr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teamsvr, submessage_arena);
    }
    set_has_teamsvr();
    server_.teamsvr_ = teamsvr;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventDeath.teamsvr)
}
void InnerGameEventDeath::set_allocated_friendsvr(::inner::InnerGameEventDeathFriendsvr* friendsvr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_server();
  if (friendsvr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(friendsvr);
    if (message_arena != submessage_arena) {
      friendsvr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friendsvr, submessage_arena);
    }
    set_has_friendsvr();
    server_.friendsvr_ = friendsvr;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventDeath.friendsvr)
}
InnerGameEventDeath::InnerGameEventDeath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventDeath)
}
InnerGameEventDeath::InnerGameEventDeath(const InnerGameEventDeath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_server();
  switch (from.server_case()) {
    case kTeamsvr: {
      _internal_mutable_teamsvr()->::inner::InnerGameEventDeathTeamsvr::MergeFrom(from._internal_teamsvr());
      break;
    }
    case kFriendsvr: {
      _internal_mutable_friendsvr()->::inner::InnerGameEventDeathFriendsvr::MergeFrom(from._internal_friendsvr());
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventDeath)
}

inline void InnerGameEventDeath::SharedCtor() {
clear_has_server();
}

InnerGameEventDeath::~InnerGameEventDeath() {
  // @@protoc_insertion_point(destructor:inner.InnerGameEventDeath)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerGameEventDeath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_server()) {
    clear_server();
  }
}

void InnerGameEventDeath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerGameEventDeath::clear_server() {
// @@protoc_insertion_point(one_of_clear_start:inner.InnerGameEventDeath)
  switch (server_case()) {
    case kTeamsvr: {
      if (GetArenaForAllocation() == nullptr) {
        delete server_.teamsvr_;
      }
      break;
    }
    case kFriendsvr: {
      if (GetArenaForAllocation() == nullptr) {
        delete server_.friendsvr_;
      }
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SERVER_NOT_SET;
}


void InnerGameEventDeath::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerGameEventDeath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_server();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerGameEventDeath::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .inner.InnerGameEventDeathTeamsvr teamsvr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_teamsvr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerGameEventDeathFriendsvr friendsvr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_friendsvr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerGameEventDeath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerGameEventDeath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .inner.InnerGameEventDeathTeamsvr teamsvr = 1;
  if (_internal_has_teamsvr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::teamsvr(this),
        _Internal::teamsvr(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerGameEventDeathFriendsvr friendsvr = 2;
  if (_internal_has_friendsvr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::friendsvr(this),
        _Internal::friendsvr(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerGameEventDeath)
  return target;
}

size_t InnerGameEventDeath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerGameEventDeath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (server_case()) {
    // .inner.InnerGameEventDeathTeamsvr teamsvr = 1;
    case kTeamsvr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_.teamsvr_);
      break;
    }
    // .inner.InnerGameEventDeathFriendsvr friendsvr = 2;
    case kFriendsvr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_.friendsvr_);
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventDeath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerGameEventDeath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventDeath::GetClassData() const { return &_class_data_; }

void InnerGameEventDeath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerGameEventDeath *>(to)->MergeFrom(
      static_cast<const InnerGameEventDeath &>(from));
}


void InnerGameEventDeath::MergeFrom(const InnerGameEventDeath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerGameEventDeath)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.server_case()) {
    case kTeamsvr: {
      _internal_mutable_teamsvr()->::inner::InnerGameEventDeathTeamsvr::MergeFrom(from._internal_teamsvr());
      break;
    }
    case kFriendsvr: {
      _internal_mutable_friendsvr()->::inner::InnerGameEventDeathFriendsvr::MergeFrom(from._internal_friendsvr());
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerGameEventDeath::CopyFrom(const InnerGameEventDeath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerGameEventDeath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerGameEventDeath::IsInitialized() const {
  return true;
}

void InnerGameEventDeath::InternalSwap(InnerGameEventDeath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(server_, other->server_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventDeath::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[38]);
}

// ===================================================================

class InnerGameEventDeathTeamsvr::_Internal {
 public:
  static const ::common::RoleExtend3& extd3(const InnerGameEventDeathTeamsvr* msg);
};

const ::common::RoleExtend3&
InnerGameEventDeathTeamsvr::_Internal::extd3(const InnerGameEventDeathTeamsvr* msg) {
  return *msg->extd3_;
}
void InnerGameEventDeathTeamsvr::clear_extd3() {
  if (GetArenaForAllocation() == nullptr && extd3_ != nullptr) {
    delete extd3_;
  }
  extd3_ = nullptr;
}
InnerGameEventDeathTeamsvr::InnerGameEventDeathTeamsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventDeathTeamsvr)
}
InnerGameEventDeathTeamsvr::InnerGameEventDeathTeamsvr(const InnerGameEventDeathTeamsvr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_extd3()) {
    extd3_ = new ::common::RoleExtend3(*from.extd3_);
  } else {
    extd3_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventDeathTeamsvr)
}

inline void InnerGameEventDeathTeamsvr::SharedCtor() {
extd3_ = nullptr;
}

InnerGameEventDeathTeamsvr::~InnerGameEventDeathTeamsvr() {
  // @@protoc_insertion_point(destructor:inner.InnerGameEventDeathTeamsvr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerGameEventDeathTeamsvr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete extd3_;
}

void InnerGameEventDeathTeamsvr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerGameEventDeathTeamsvr::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerGameEventDeathTeamsvr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && extd3_ != nullptr) {
    delete extd3_;
  }
  extd3_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerGameEventDeathTeamsvr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.RoleExtend3 extd3 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_extd3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerGameEventDeathTeamsvr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerGameEventDeathTeamsvr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.RoleExtend3 extd3 = 1;
  if (this->_internal_has_extd3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::extd3(this),
        _Internal::extd3(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerGameEventDeathTeamsvr)
  return target;
}

size_t InnerGameEventDeathTeamsvr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerGameEventDeathTeamsvr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.RoleExtend3 extd3 = 1;
  if (this->_internal_has_extd3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extd3_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventDeathTeamsvr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerGameEventDeathTeamsvr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventDeathTeamsvr::GetClassData() const { return &_class_data_; }

void InnerGameEventDeathTeamsvr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerGameEventDeathTeamsvr *>(to)->MergeFrom(
      static_cast<const InnerGameEventDeathTeamsvr &>(from));
}


void InnerGameEventDeathTeamsvr::MergeFrom(const InnerGameEventDeathTeamsvr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerGameEventDeathTeamsvr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_extd3()) {
    _internal_mutable_extd3()->::common::RoleExtend3::MergeFrom(from._internal_extd3());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerGameEventDeathTeamsvr::CopyFrom(const InnerGameEventDeathTeamsvr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerGameEventDeathTeamsvr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerGameEventDeathTeamsvr::IsInitialized() const {
  return true;
}

void InnerGameEventDeathTeamsvr::InternalSwap(InnerGameEventDeathTeamsvr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(extd3_, other->extd3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventDeathTeamsvr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[39]);
}

// ===================================================================

class InnerGameEventDeathFriendsvr::_Internal {
 public:
};

InnerGameEventDeathFriendsvr::InnerGameEventDeathFriendsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventDeathFriendsvr)
}
InnerGameEventDeathFriendsvr::InnerGameEventDeathFriendsvr(const InnerGameEventDeathFriendsvr& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventDeathFriendsvr)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventDeathFriendsvr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventDeathFriendsvr::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventDeathFriendsvr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[40]);
}

// ===================================================================

class InnerGameEventRebirth::_Internal {
 public:
  static const ::inner::InnerGameEventRebirthTeamsvr& teamsvr(const InnerGameEventRebirth* msg);
  static const ::inner::InnerGameEventRebirthFriendsvr& friendsvr(const InnerGameEventRebirth* msg);
};

const ::inner::InnerGameEventRebirthTeamsvr&
InnerGameEventRebirth::_Internal::teamsvr(const InnerGameEventRebirth* msg) {
  return *msg->server_.teamsvr_;
}
const ::inner::InnerGameEventRebirthFriendsvr&
InnerGameEventRebirth::_Internal::friendsvr(const InnerGameEventRebirth* msg) {
  return *msg->server_.friendsvr_;
}
void InnerGameEventRebirth::set_allocated_teamsvr(::inner::InnerGameEventRebirthTeamsvr* teamsvr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_server();
  if (teamsvr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(teamsvr);
    if (message_arena != submessage_arena) {
      teamsvr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teamsvr, submessage_arena);
    }
    set_has_teamsvr();
    server_.teamsvr_ = teamsvr;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventRebirth.teamsvr)
}
void InnerGameEventRebirth::set_allocated_friendsvr(::inner::InnerGameEventRebirthFriendsvr* friendsvr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_server();
  if (friendsvr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(friendsvr);
    if (message_arena != submessage_arena) {
      friendsvr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friendsvr, submessage_arena);
    }
    set_has_friendsvr();
    server_.friendsvr_ = friendsvr;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventRebirth.friendsvr)
}
InnerGameEventRebirth::InnerGameEventRebirth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventRebirth)
}
InnerGameEventRebirth::InnerGameEventRebirth(const InnerGameEventRebirth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_server();
  switch (from.server_case()) {
    case kTeamsvr: {
      _internal_mutable_teamsvr()->::inner::InnerGameEventRebirthTeamsvr::MergeFrom(from._internal_teamsvr());
      break;
    }
    case kFriendsvr: {
      _internal_mutable_friendsvr()->::inner::InnerGameEventRebirthFriendsvr::MergeFrom(from._internal_friendsvr());
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventRebirth)
}

inline void InnerGameEventRebirth::SharedCtor() {
clear_has_server();
}

InnerGameEventRebirth::~InnerGameEventRebirth() {
  // @@protoc_insertion_point(destructor:inner.InnerGameEventRebirth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerGameEventRebirth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_server()) {
    clear_server();
  }
}

void InnerGameEventRebirth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerGameEventRebirth::clear_server() {
// @@protoc_insertion_point(one_of_clear_start:inner.InnerGameEventRebirth)
  switch (server_case()) {
    case kTeamsvr: {
      if (GetArenaForAllocation() == nullptr) {
        delete server_.teamsvr_;
      }
      break;
    }
    case kFriendsvr: {
      if (GetArenaForAllocation() == nullptr) {
        delete server_.friendsvr_;
      }
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SERVER_NOT_SET;
}


void InnerGameEventRebirth::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerGameEventRebirth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_server();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerGameEventRebirth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .inner.InnerGameEventRebirthTeamsvr teamsvr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_teamsvr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerGameEventRebirthFriendsvr friendsvr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_friendsvr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerGameEventRebirth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerGameEventRebirth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .inner.InnerGameEventRebirthTeamsvr teamsvr = 1;
  if (_internal_has_teamsvr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::teamsvr(this),
        _Internal::teamsvr(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerGameEventRebirthFriendsvr friendsvr = 2;
  if (_internal_has_friendsvr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::friendsvr(this),
        _Internal::friendsvr(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerGameEventRebirth)
  return target;
}

size_t InnerGameEventRebirth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerGameEventRebirth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (server_case()) {
    // .inner.InnerGameEventRebirthTeamsvr teamsvr = 1;
    case kTeamsvr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_.teamsvr_);
      break;
    }
    // .inner.InnerGameEventRebirthFriendsvr friendsvr = 2;
    case kFriendsvr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_.friendsvr_);
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventRebirth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerGameEventRebirth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventRebirth::GetClassData() const { return &_class_data_; }

void InnerGameEventRebirth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerGameEventRebirth *>(to)->MergeFrom(
      static_cast<const InnerGameEventRebirth &>(from));
}


void InnerGameEventRebirth::MergeFrom(const InnerGameEventRebirth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerGameEventRebirth)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.server_case()) {
    case kTeamsvr: {
      _internal_mutable_teamsvr()->::inner::InnerGameEventRebirthTeamsvr::MergeFrom(from._internal_teamsvr());
      break;
    }
    case kFriendsvr: {
      _internal_mutable_friendsvr()->::inner::InnerGameEventRebirthFriendsvr::MergeFrom(from._internal_friendsvr());
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerGameEventRebirth::CopyFrom(const InnerGameEventRebirth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerGameEventRebirth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerGameEventRebirth::IsInitialized() const {
  return true;
}

void InnerGameEventRebirth::InternalSwap(InnerGameEventRebirth* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(server_, other->server_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventRebirth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[41]);
}

// ===================================================================

class InnerGameEventRebirthTeamsvr::_Internal {
 public:
  static const ::common::RoleExtend2& extd2(const InnerGameEventRebirthTeamsvr* msg);
  static const ::common::RoleExtend3& extd3(const InnerGameEventRebirthTeamsvr* msg);
};

const ::common::RoleExtend2&
InnerGameEventRebirthTeamsvr::_Internal::extd2(const InnerGameEventRebirthTeamsvr* msg) {
  return *msg->extd2_;
}
const ::common::RoleExtend3&
InnerGameEventRebirthTeamsvr::_Internal::extd3(const InnerGameEventRebirthTeamsvr* msg) {
  return *msg->extd3_;
}
void InnerGameEventRebirthTeamsvr::clear_extd2() {
  if (GetArenaForAllocation() == nullptr && extd2_ != nullptr) {
    delete extd2_;
  }
  extd2_ = nullptr;
}
void InnerGameEventRebirthTeamsvr::clear_extd3() {
  if (GetArenaForAllocation() == nullptr && extd3_ != nullptr) {
    delete extd3_;
  }
  extd3_ = nullptr;
}
InnerGameEventRebirthTeamsvr::InnerGameEventRebirthTeamsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventRebirthTeamsvr)
}
InnerGameEventRebirthTeamsvr::InnerGameEventRebirthTeamsvr(const InnerGameEventRebirthTeamsvr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_extd2()) {
    extd2_ = new ::common::RoleExtend2(*from.extd2_);
  } else {
    extd2_ = nullptr;
  }
  if (from._internal_has_extd3()) {
    extd3_ = new ::common::RoleExtend3(*from.extd3_);
  } else {
    extd3_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventRebirthTeamsvr)
}

inline void InnerGameEventRebirthTeamsvr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&extd2_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&extd3_) -
    reinterpret_cast<char*>(&extd2_)) + sizeof(extd3_));
}

InnerGameEventRebirthTeamsvr::~InnerGameEventRebirthTeamsvr() {
  // @@protoc_insertion_point(destructor:inner.InnerGameEventRebirthTeamsvr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerGameEventRebirthTeamsvr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete extd2_;
  if (this != internal_default_instance()) delete extd3_;
}

void InnerGameEventRebirthTeamsvr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerGameEventRebirthTeamsvr::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerGameEventRebirthTeamsvr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && extd2_ != nullptr) {
    delete extd2_;
  }
  extd2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && extd3_ != nullptr) {
    delete extd3_;
  }
  extd3_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerGameEventRebirthTeamsvr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.RoleExtend2 extd2 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_extd2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.RoleExtend3 extd3 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_extd3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerGameEventRebirthTeamsvr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerGameEventRebirthTeamsvr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.RoleExtend2 extd2 = 1;
  if (this->_internal_has_extd2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::extd2(this),
        _Internal::extd2(this).GetCachedSize(), target, stream);
  }

  // .common.RoleExtend3 extd3 = 2;
  if (this->_internal_has_extd3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::extd3(this),
        _Internal::extd3(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerGameEventRebirthTeamsvr)
  return target;
}

size_t InnerGameEventRebirthTeamsvr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerGameEventRebirthTeamsvr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.RoleExtend2 extd2 = 1;
  if (this->_internal_has_extd2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extd2_);
  }

  // .common.RoleExtend3 extd3 = 2;
  if (this->_internal_has_extd3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extd3_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventRebirthTeamsvr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerGameEventRebirthTeamsvr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventRebirthTeamsvr::GetClassData() const { return &_class_data_; }

void InnerGameEventRebirthTeamsvr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerGameEventRebirthTeamsvr *>(to)->MergeFrom(
      static_cast<const InnerGameEventRebirthTeamsvr &>(from));
}


void InnerGameEventRebirthTeamsvr::MergeFrom(const InnerGameEventRebirthTeamsvr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerGameEventRebirthTeamsvr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_extd2()) {
    _internal_mutable_extd2()->::common::RoleExtend2::MergeFrom(from._internal_extd2());
  }
  if (from._internal_has_extd3()) {
    _internal_mutable_extd3()->::common::RoleExtend3::MergeFrom(from._internal_extd3());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerGameEventRebirthTeamsvr::CopyFrom(const InnerGameEventRebirthTeamsvr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerGameEventRebirthTeamsvr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerGameEventRebirthTeamsvr::IsInitialized() const {
  return true;
}

void InnerGameEventRebirthTeamsvr::InternalSwap(InnerGameEventRebirthTeamsvr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InnerGameEventRebirthTeamsvr, extd3_)
      + sizeof(InnerGameEventRebirthTeamsvr::extd3_)
      - PROTOBUF_FIELD_OFFSET(InnerGameEventRebirthTeamsvr, extd2_)>(
          reinterpret_cast<char*>(&extd2_),
          reinterpret_cast<char*>(&other->extd2_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventRebirthTeamsvr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[42]);
}

// ===================================================================

class InnerGameEventRebirthFriendsvr::_Internal {
 public:
};

InnerGameEventRebirthFriendsvr::InnerGameEventRebirthFriendsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventRebirthFriendsvr)
}
InnerGameEventRebirthFriendsvr::InnerGameEventRebirthFriendsvr(const InnerGameEventRebirthFriendsvr& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventRebirthFriendsvr)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventRebirthFriendsvr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventRebirthFriendsvr::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventRebirthFriendsvr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[43]);
}

// ===================================================================

class InnerGameEventWakeup::_Internal {
 public:
  static const ::inner::InnerGameEventWakeupTeamsvr& teamsvr(const InnerGameEventWakeup* msg);
  static const ::inner::InnerGameEventWakeupFriendsvr& friendsvr(const InnerGameEventWakeup* msg);
};

const ::inner::InnerGameEventWakeupTeamsvr&
InnerGameEventWakeup::_Internal::teamsvr(const InnerGameEventWakeup* msg) {
  return *msg->server_.teamsvr_;
}
const ::inner::InnerGameEventWakeupFriendsvr&
InnerGameEventWakeup::_Internal::friendsvr(const InnerGameEventWakeup* msg) {
  return *msg->server_.friendsvr_;
}
void InnerGameEventWakeup::set_allocated_teamsvr(::inner::InnerGameEventWakeupTeamsvr* teamsvr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_server();
  if (teamsvr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(teamsvr);
    if (message_arena != submessage_arena) {
      teamsvr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teamsvr, submessage_arena);
    }
    set_has_teamsvr();
    server_.teamsvr_ = teamsvr;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventWakeup.teamsvr)
}
void InnerGameEventWakeup::set_allocated_friendsvr(::inner::InnerGameEventWakeupFriendsvr* friendsvr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_server();
  if (friendsvr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(friendsvr);
    if (message_arena != submessage_arena) {
      friendsvr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friendsvr, submessage_arena);
    }
    set_has_friendsvr();
    server_.friendsvr_ = friendsvr;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventWakeup.friendsvr)
}
InnerGameEventWakeup::InnerGameEventWakeup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventWakeup)
}
InnerGameEventWakeup::InnerGameEventWakeup(const InnerGameEventWakeup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_server();
  switch (from.server_case()) {
    case kTeamsvr: {
      _internal_mutable_teamsvr()->::inner::InnerGameEventWakeupTeamsvr::MergeFrom(from._internal_teamsvr());
      break;
    }
    case kFriendsvr: {
      _internal_mutable_friendsvr()->::inner::InnerGameEventWakeupFriendsvr::MergeFrom(from._internal_friendsvr());
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventWakeup)
}

inline void InnerGameEventWakeup::SharedCtor() {
clear_has_server();
}

InnerGameEventWakeup::~InnerGameEventWakeup() {
  // @@protoc_insertion_point(destructor:inner.InnerGameEventWakeup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerGameEventWakeup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_server()) {
    clear_server();
  }
}

void InnerGameEventWakeup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerGameEventWakeup::clear_server() {
// @@protoc_insertion_point(one_of_clear_start:inner.InnerGameEventWakeup)
  switch (server_case()) {
    case kTeamsvr: {
      if (GetArenaForAllocation() == nullptr) {
        delete server_.teamsvr_;
      }
      break;
    }
    case kFriendsvr: {
      if (GetArenaForAllocation() == nullptr) {
        delete server_.friendsvr_;
      }
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SERVER_NOT_SET;
}


void InnerGameEventWakeup::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerGameEventWakeup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_server();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerGameEventWakeup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .inner.InnerGameEventWakeupTeamsvr teamsvr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_teamsvr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerGameEventWakeupFriendsvr friendsvr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_friendsvr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerGameEventWakeup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerGameEventWakeup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .inner.InnerGameEventWakeupTeamsvr teamsvr = 1;
  if (_internal_has_teamsvr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::teamsvr(this),
        _Internal::teamsvr(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerGameEventWakeupFriendsvr friendsvr = 2;
  if (_internal_has_friendsvr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::friendsvr(this),
        _Internal::friendsvr(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerGameEventWakeup)
  return target;
}

size_t InnerGameEventWakeup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerGameEventWakeup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (server_case()) {
    // .inner.InnerGameEventWakeupTeamsvr teamsvr = 1;
    case kTeamsvr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_.teamsvr_);
      break;
    }
    // .inner.InnerGameEventWakeupFriendsvr friendsvr = 2;
    case kFriendsvr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_.friendsvr_);
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventWakeup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerGameEventWakeup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventWakeup::GetClassData() const { return &_class_data_; }

void InnerGameEventWakeup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerGameEventWakeup *>(to)->MergeFrom(
      static_cast<const InnerGameEventWakeup &>(from));
}


void InnerGameEventWakeup::MergeFrom(const InnerGameEventWakeup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerGameEventWakeup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.server_case()) {
    case kTeamsvr: {
      _internal_mutable_teamsvr()->::inner::InnerGameEventWakeupTeamsvr::MergeFrom(from._internal_teamsvr());
      break;
    }
    case kFriendsvr: {
      _internal_mutable_friendsvr()->::inner::InnerGameEventWakeupFriendsvr::MergeFrom(from._internal_friendsvr());
      break;
    }
    case SERVER_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerGameEventWakeup::CopyFrom(const InnerGameEventWakeup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerGameEventWakeup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerGameEventWakeup::IsInitialized() const {
  return true;
}

void InnerGameEventWakeup::InternalSwap(InnerGameEventWakeup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(server_, other->server_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventWakeup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[44]);
}

// ===================================================================

class InnerGameEventWakeupTeamsvr::_Internal {
 public:
  static const ::common::RoleBrief& brief(const InnerGameEventWakeupTeamsvr* msg);
  static const ::common::RoleExtend1& extd1(const InnerGameEventWakeupTeamsvr* msg);
  static const ::common::RoleExtend2& extd2(const InnerGameEventWakeupTeamsvr* msg);
  static const ::common::RoleExtend3& extd3(const InnerGameEventWakeupTeamsvr* msg);
  static const ::common::ExtendFight3v3& f33(const InnerGameEventWakeupTeamsvr* msg);
  static const ::common::ExtendFight5v5& f55(const InnerGameEventWakeupTeamsvr* msg);
};

const ::common::RoleBrief&
InnerGameEventWakeupTeamsvr::_Internal::brief(const InnerGameEventWakeupTeamsvr* msg) {
  return *msg->brief_;
}
const ::common::RoleExtend1&
InnerGameEventWakeupTeamsvr::_Internal::extd1(const InnerGameEventWakeupTeamsvr* msg) {
  return *msg->extd1_;
}
const ::common::RoleExtend2&
InnerGameEventWakeupTeamsvr::_Internal::extd2(const InnerGameEventWakeupTeamsvr* msg) {
  return *msg->extd2_;
}
const ::common::RoleExtend3&
InnerGameEventWakeupTeamsvr::_Internal::extd3(const InnerGameEventWakeupTeamsvr* msg) {
  return *msg->extd3_;
}
const ::common::ExtendFight3v3&
InnerGameEventWakeupTeamsvr::_Internal::f33(const InnerGameEventWakeupTeamsvr* msg) {
  return *msg->f33_;
}
const ::common::ExtendFight5v5&
InnerGameEventWakeupTeamsvr::_Internal::f55(const InnerGameEventWakeupTeamsvr* msg) {
  return *msg->f55_;
}
void InnerGameEventWakeupTeamsvr::clear_brief() {
  if (GetArenaForAllocation() == nullptr && brief_ != nullptr) {
    delete brief_;
  }
  brief_ = nullptr;
}
void InnerGameEventWakeupTeamsvr::clear_extd1() {
  if (GetArenaForAllocation() == nullptr && extd1_ != nullptr) {
    delete extd1_;
  }
  extd1_ = nullptr;
}
void InnerGameEventWakeupTeamsvr::clear_extd2() {
  if (GetArenaForAllocation() == nullptr && extd2_ != nullptr) {
    delete extd2_;
  }
  extd2_ = nullptr;
}
void InnerGameEventWakeupTeamsvr::clear_extd3() {
  if (GetArenaForAllocation() == nullptr && extd3_ != nullptr) {
    delete extd3_;
  }
  extd3_ = nullptr;
}
void InnerGameEventWakeupTeamsvr::clear_f33() {
  if (GetArenaForAllocation() == nullptr && f33_ != nullptr) {
    delete f33_;
  }
  f33_ = nullptr;
}
void InnerGameEventWakeupTeamsvr::clear_f55() {
  if (GetArenaForAllocation() == nullptr && f55_ != nullptr) {
    delete f55_;
  }
  f55_ = nullptr;
}
InnerGameEventWakeupTeamsvr::InnerGameEventWakeupTeamsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventWakeupTeamsvr)
}
InnerGameEventWakeupTeamsvr::InnerGameEventWakeupTeamsvr(const InnerGameEventWakeupTeamsvr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_brief()) {
    brief_ = new ::common::RoleBrief(*from.brief_);
  } else {
    brief_ = nullptr;
  }
  if (from._internal_has_extd1()) {
    extd1_ = new ::common::RoleExtend1(*from.extd1_);
  } else {
    extd1_ = nullptr;
  }
  if (from._internal_has_extd2()) {
    extd2_ = new ::common::RoleExtend2(*from.extd2_);
  } else {
    extd2_ = nullptr;
  }
  if (from._internal_has_extd3()) {
    extd3_ = new ::common::RoleExtend3(*from.extd3_);
  } else {
    extd3_ = nullptr;
  }
  if (from._internal_has_f33()) {
    f33_ = new ::common::ExtendFight3v3(*from.f33_);
  } else {
    f33_ = nullptr;
  }
  if (from._internal_has_f55()) {
    f55_ = new ::common::ExtendFight5v5(*from.f55_);
  } else {
    f55_ = nullptr;
  }
  scenehashid_ = from.scenehashid_;
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventWakeupTeamsvr)
}

inline void InnerGameEventWakeupTeamsvr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&brief_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scenehashid_) -
    reinterpret_cast<char*>(&brief_)) + sizeof(scenehashid_));
}

InnerGameEventWakeupTeamsvr::~InnerGameEventWakeupTeamsvr() {
  // @@protoc_insertion_point(destructor:inner.InnerGameEventWakeupTeamsvr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerGameEventWakeupTeamsvr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete brief_;
  if (this != internal_default_instance()) delete extd1_;
  if (this != internal_default_instance()) delete extd2_;
  if (this != internal_default_instance()) delete extd3_;
  if (this != internal_default_instance()) delete f33_;
  if (this != internal_default_instance()) delete f55_;
}

void InnerGameEventWakeupTeamsvr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerGameEventWakeupTeamsvr::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerGameEventWakeupTeamsvr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && brief_ != nullptr) {
    delete brief_;
  }
  brief_ = nullptr;
  if (GetArenaForAllocation() == nullptr && extd1_ != nullptr) {
    delete extd1_;
  }
  extd1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && extd2_ != nullptr) {
    delete extd2_;
  }
  extd2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && extd3_ != nullptr) {
    delete extd3_;
  }
  extd3_ = nullptr;
  if (GetArenaForAllocation() == nullptr && f33_ != nullptr) {
    delete f33_;
  }
  f33_ = nullptr;
  if (GetArenaForAllocation() == nullptr && f55_ != nullptr) {
    delete f55_;
  }
  f55_ = nullptr;
  scenehashid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerGameEventWakeupTeamsvr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.RoleBrief brief = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_brief(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.RoleExtend1 extd1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_extd1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.RoleExtend2 extd2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extd2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.RoleExtend3 extd3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_extd3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.ExtendFight3v3 f33 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_f33(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.ExtendFight5v5 f55 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_f55(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sceneHashId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          scenehashid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerGameEventWakeupTeamsvr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerGameEventWakeupTeamsvr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.RoleBrief brief = 1;
  if (this->_internal_has_brief()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::brief(this),
        _Internal::brief(this).GetCachedSize(), target, stream);
  }

  // .common.RoleExtend1 extd1 = 2;
  if (this->_internal_has_extd1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::extd1(this),
        _Internal::extd1(this).GetCachedSize(), target, stream);
  }

  // .common.RoleExtend2 extd2 = 3;
  if (this->_internal_has_extd2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::extd2(this),
        _Internal::extd2(this).GetCachedSize(), target, stream);
  }

  // .common.RoleExtend3 extd3 = 4;
  if (this->_internal_has_extd3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::extd3(this),
        _Internal::extd3(this).GetCachedSize(), target, stream);
  }

  // .common.ExtendFight3v3 f33 = 5;
  if (this->_internal_has_f33()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::f33(this),
        _Internal::f33(this).GetCachedSize(), target, stream);
  }

  // .common.ExtendFight5v5 f55 = 6;
  if (this->_internal_has_f55()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::f55(this),
        _Internal::f55(this).GetCachedSize(), target, stream);
  }

  // uint32 sceneHashId = 7;
  if (this->_internal_scenehashid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_scenehashid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerGameEventWakeupTeamsvr)
  return target;
}

size_t InnerGameEventWakeupTeamsvr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerGameEventWakeupTeamsvr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.RoleBrief brief = 1;
  if (this->_internal_has_brief()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *brief_);
  }

  // .common.RoleExtend1 extd1 = 2;
  if (this->_internal_has_extd1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extd1_);
  }

  // .common.RoleExtend2 extd2 = 3;
  if (this->_internal_has_extd2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extd2_);
  }

  // .common.RoleExtend3 extd3 = 4;
  if (this->_internal_has_extd3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extd3_);
  }

  // .common.ExtendFight3v3 f33 = 5;
  if (this->_internal_has_f33()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f33_);
  }

  // .common.ExtendFight5v5 f55 = 6;
  if (this->_internal_has_f55()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f55_);
  }

  // uint32 sceneHashId = 7;
  if (this->_internal_scenehashid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_scenehashid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventWakeupTeamsvr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerGameEventWakeupTeamsvr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventWakeupTeamsvr::GetClassData() const { return &_class_data_; }

void InnerGameEventWakeupTeamsvr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerGameEventWakeupTeamsvr *>(to)->MergeFrom(
      static_cast<const InnerGameEventWakeupTeamsvr &>(from));
}


void InnerGameEventWakeupTeamsvr::MergeFrom(const InnerGameEventWakeupTeamsvr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerGameEventWakeupTeamsvr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_brief()) {
    _internal_mutable_brief()->::common::RoleBrief::MergeFrom(from._internal_brief());
  }
  if (from._internal_has_extd1()) {
    _internal_mutable_extd1()->::common::RoleExtend1::MergeFrom(from._internal_extd1());
  }
  if (from._internal_has_extd2()) {
    _internal_mutable_extd2()->::common::RoleExtend2::MergeFrom(from._internal_extd2());
  }
  if (from._internal_has_extd3()) {
    _internal_mutable_extd3()->::common::RoleExtend3::MergeFrom(from._internal_extd3());
  }
  if (from._internal_has_f33()) {
    _internal_mutable_f33()->::common::ExtendFight3v3::MergeFrom(from._internal_f33());
  }
  if (from._internal_has_f55()) {
    _internal_mutable_f55()->::common::ExtendFight5v5::MergeFrom(from._internal_f55());
  }
  if (from._internal_scenehashid() != 0) {
    _internal_set_scenehashid(from._internal_scenehashid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerGameEventWakeupTeamsvr::CopyFrom(const InnerGameEventWakeupTeamsvr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerGameEventWakeupTeamsvr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerGameEventWakeupTeamsvr::IsInitialized() const {
  return true;
}

void InnerGameEventWakeupTeamsvr::InternalSwap(InnerGameEventWakeupTeamsvr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InnerGameEventWakeupTeamsvr, scenehashid_)
      + sizeof(InnerGameEventWakeupTeamsvr::scenehashid_)
      - PROTOBUF_FIELD_OFFSET(InnerGameEventWakeupTeamsvr, brief_)>(
          reinterpret_cast<char*>(&brief_),
          reinterpret_cast<char*>(&other->brief_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventWakeupTeamsvr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[45]);
}

// ===================================================================

class InnerGameEventWakeupFriendsvr::_Internal {
 public:
  static const ::inner::InnerFriendInfo& oinfo(const InnerGameEventWakeupFriendsvr* msg);
  static const ::inner::InnerFriendGiftList& ogifts(const InnerGameEventWakeupFriendsvr* msg);
};

const ::inner::InnerFriendInfo&
InnerGameEventWakeupFriendsvr::_Internal::oinfo(const InnerGameEventWakeupFriendsvr* msg) {
  return *msg->oinfo_;
}
const ::inner::InnerFriendGiftList&
InnerGameEventWakeupFriendsvr::_Internal::ogifts(const InnerGameEventWakeupFriendsvr* msg) {
  return *msg->ogifts_;
}
void InnerGameEventWakeupFriendsvr::clear_oinfo() {
  if (GetArenaForAllocation() == nullptr && oinfo_ != nullptr) {
    delete oinfo_;
  }
  oinfo_ = nullptr;
}
void InnerGameEventWakeupFriendsvr::clear_ogifts() {
  if (GetArenaForAllocation() == nullptr && ogifts_ != nullptr) {
    delete ogifts_;
  }
  ogifts_ = nullptr;
}
InnerGameEventWakeupFriendsvr::InnerGameEventWakeupFriendsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerGameEventWakeupFriendsvr)
}
InnerGameEventWakeupFriendsvr::InnerGameEventWakeupFriendsvr(const InnerGameEventWakeupFriendsvr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_oinfo()) {
    oinfo_ = new ::inner::InnerFriendInfo(*from.oinfo_);
  } else {
    oinfo_ = nullptr;
  }
  if (from._internal_has_ogifts()) {
    ogifts_ = new ::inner::InnerFriendGiftList(*from.ogifts_);
  } else {
    ogifts_ = nullptr;
  }
  llteamid_ = from.llteamid_;
  // @@protoc_insertion_point(copy_constructor:inner.InnerGameEventWakeupFriendsvr)
}

inline void InnerGameEventWakeupFriendsvr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&oinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&llteamid_) -
    reinterpret_cast<char*>(&oinfo_)) + sizeof(llteamid_));
}

InnerGameEventWakeupFriendsvr::~InnerGameEventWakeupFriendsvr() {
  // @@protoc_insertion_point(destructor:inner.InnerGameEventWakeupFriendsvr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerGameEventWakeupFriendsvr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete oinfo_;
  if (this != internal_default_instance()) delete ogifts_;
}

void InnerGameEventWakeupFriendsvr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerGameEventWakeupFriendsvr::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerGameEventWakeupFriendsvr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && oinfo_ != nullptr) {
    delete oinfo_;
  }
  oinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ogifts_ != nullptr) {
    delete ogifts_;
  }
  ogifts_ = nullptr;
  llteamid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerGameEventWakeupFriendsvr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .inner.InnerFriendInfo oInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_oinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerFriendGiftList oGifts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ogifts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 llTeamId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          llteamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerGameEventWakeupFriendsvr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerGameEventWakeupFriendsvr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .inner.InnerFriendInfo oInfo = 1;
  if (this->_internal_has_oinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::oinfo(this),
        _Internal::oinfo(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerFriendGiftList oGifts = 2;
  if (this->_internal_has_ogifts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ogifts(this),
        _Internal::ogifts(this).GetCachedSize(), target, stream);
  }

  // uint64 llTeamId = 3;
  if (this->_internal_llteamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_llteamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerGameEventWakeupFriendsvr)
  return target;
}

size_t InnerGameEventWakeupFriendsvr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerGameEventWakeupFriendsvr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .inner.InnerFriendInfo oInfo = 1;
  if (this->_internal_has_oinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oinfo_);
  }

  // .inner.InnerFriendGiftList oGifts = 2;
  if (this->_internal_has_ogifts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ogifts_);
  }

  // uint64 llTeamId = 3;
  if (this->_internal_llteamid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_llteamid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerGameEventWakeupFriendsvr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerGameEventWakeupFriendsvr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerGameEventWakeupFriendsvr::GetClassData() const { return &_class_data_; }

void InnerGameEventWakeupFriendsvr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerGameEventWakeupFriendsvr *>(to)->MergeFrom(
      static_cast<const InnerGameEventWakeupFriendsvr &>(from));
}


void InnerGameEventWakeupFriendsvr::MergeFrom(const InnerGameEventWakeupFriendsvr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerGameEventWakeupFriendsvr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_oinfo()) {
    _internal_mutable_oinfo()->::inner::InnerFriendInfo::MergeFrom(from._internal_oinfo());
  }
  if (from._internal_has_ogifts()) {
    _internal_mutable_ogifts()->::inner::InnerFriendGiftList::MergeFrom(from._internal_ogifts());
  }
  if (from._internal_llteamid() != 0) {
    _internal_set_llteamid(from._internal_llteamid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerGameEventWakeupFriendsvr::CopyFrom(const InnerGameEventWakeupFriendsvr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerGameEventWakeupFriendsvr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerGameEventWakeupFriendsvr::IsInitialized() const {
  return true;
}

void InnerGameEventWakeupFriendsvr::InternalSwap(InnerGameEventWakeupFriendsvr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InnerGameEventWakeupFriendsvr, llteamid_)
      + sizeof(InnerGameEventWakeupFriendsvr::llteamid_)
      - PROTOBUF_FIELD_OFFSET(InnerGameEventWakeupFriendsvr, oinfo_)>(
          reinterpret_cast<char*>(&oinfo_),
          reinterpret_cast<char*>(&other->oinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerGameEventWakeupFriendsvr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_innercommon_2eproto_getter, &descriptor_table_innercommon_2eproto_once,
      file_level_metadata_innercommon_2eproto[46]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace inner
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::inner::InnerRoleIdList*
Arena::CreateMaybeMessage< ::inner::InnerRoleIdList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerRoleIdList >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerCopyTeamMem*
Arena::CreateMaybeMessage< ::inner::InnerCopyTeamMem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerCopyTeamMem >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerCopyTeam*
Arena::CreateMaybeMessage< ::inner::InnerCopyTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerCopyTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerCopyTeamList*
Arena::CreateMaybeMessage< ::inner::InnerCopyTeamList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerCopyTeamList >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerCopyEnterByTeam*
Arena::CreateMaybeMessage< ::inner::InnerCopyEnterByTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerCopyEnterByTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerCopyEnterByChgLvId*
Arena::CreateMaybeMessage< ::inner::InnerCopyEnterByChgLvId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerCopyEnterByChgLvId >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerCopyEnterByHome*
Arena::CreateMaybeMessage< ::inner::InnerCopyEnterByHome >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerCopyEnterByHome >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerCopyEnter*
Arena::CreateMaybeMessage< ::inner::InnerCopyEnter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerCopyEnter >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerCopyWayByMatch*
Arena::CreateMaybeMessage< ::inner::InnerCopyWayByMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerCopyWayByMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerCopyWayByTeam*
Arena::CreateMaybeMessage< ::inner::InnerCopyWayByTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerCopyWayByTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerCopyWay*
Arena::CreateMaybeMessage< ::inner::InnerCopyWay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerCopyWay >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerCopyPvpF55*
Arena::CreateMaybeMessage< ::inner::InnerCopyPvpF55 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerCopyPvpF55 >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerCopyPvp*
Arena::CreateMaybeMessage< ::inner::InnerCopyPvp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerCopyPvp >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerCopyPve*
Arena::CreateMaybeMessage< ::inner::InnerCopyPve >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerCopyPve >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerCopyType*
Arena::CreateMaybeMessage< ::inner::InnerCopyType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerCopyType >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerCopyCreateBy*
Arena::CreateMaybeMessage< ::inner::InnerCopyCreateBy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerCopyCreateBy >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerCopyCrit*
Arena::CreateMaybeMessage< ::inner::InnerCopyCrit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerCopyCrit >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEvent*
Arena::CreateMaybeMessage< ::inner::InnerGameEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventDestroy*
Arena::CreateMaybeMessage< ::inner::InnerGameEventDestroy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventDestroy >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventDestroyTeamsvr*
Arena::CreateMaybeMessage< ::inner::InnerGameEventDestroyTeamsvr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventDestroyTeamsvr >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventDestryFriendsvr*
Arena::CreateMaybeMessage< ::inner::InnerGameEventDestryFriendsvr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventDestryFriendsvr >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventDestroyFamilysvr*
Arena::CreateMaybeMessage< ::inner::InnerGameEventDestroyFamilysvr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventDestroyFamilysvr >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventDestroyRanksvr*
Arena::CreateMaybeMessage< ::inner::InnerGameEventDestroyRanksvr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventDestroyRanksvr >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventLogin*
Arena::CreateMaybeMessage< ::inner::InnerGameEventLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventLoginTeamsvr*
Arena::CreateMaybeMessage< ::inner::InnerGameEventLoginTeamsvr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventLoginTeamsvr >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventLoginFriendsvr*
Arena::CreateMaybeMessage< ::inner::InnerGameEventLoginFriendsvr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventLoginFriendsvr >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventLogout*
Arena::CreateMaybeMessage< ::inner::InnerGameEventLogout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventLogout >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventLogoutTeamvr*
Arena::CreateMaybeMessage< ::inner::InnerGameEventLogoutTeamvr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventLogoutTeamvr >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventLogoutFriendsvr*
Arena::CreateMaybeMessage< ::inner::InnerGameEventLogoutFriendsvr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventLogoutFriendsvr >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventOnline*
Arena::CreateMaybeMessage< ::inner::InnerGameEventOnline >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventOnline >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventOnlineTeamsvr*
Arena::CreateMaybeMessage< ::inner::InnerGameEventOnlineTeamsvr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventOnlineTeamsvr >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventOnlineFriendsvr*
Arena::CreateMaybeMessage< ::inner::InnerGameEventOnlineFriendsvr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventOnlineFriendsvr >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventOffline*
Arena::CreateMaybeMessage< ::inner::InnerGameEventOffline >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventOffline >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventOfflineTeamsvr*
Arena::CreateMaybeMessage< ::inner::InnerGameEventOfflineTeamsvr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventOfflineTeamsvr >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventOfflineFriendsvr*
Arena::CreateMaybeMessage< ::inner::InnerGameEventOfflineFriendsvr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventOfflineFriendsvr >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventChangeMap*
Arena::CreateMaybeMessage< ::inner::InnerGameEventChangeMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventChangeMap >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventChangeMapTeamsvr*
Arena::CreateMaybeMessage< ::inner::InnerGameEventChangeMapTeamsvr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventChangeMapTeamsvr >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventChangeMapFriendsvr*
Arena::CreateMaybeMessage< ::inner::InnerGameEventChangeMapFriendsvr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventChangeMapFriendsvr >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventDeath*
Arena::CreateMaybeMessage< ::inner::InnerGameEventDeath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventDeath >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventDeathTeamsvr*
Arena::CreateMaybeMessage< ::inner::InnerGameEventDeathTeamsvr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventDeathTeamsvr >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventDeathFriendsvr*
Arena::CreateMaybeMessage< ::inner::InnerGameEventDeathFriendsvr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventDeathFriendsvr >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventRebirth*
Arena::CreateMaybeMessage< ::inner::InnerGameEventRebirth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventRebirth >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventRebirthTeamsvr*
Arena::CreateMaybeMessage< ::inner::InnerGameEventRebirthTeamsvr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventRebirthTeamsvr >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventRebirthFriendsvr*
Arena::CreateMaybeMessage< ::inner::InnerGameEventRebirthFriendsvr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventRebirthFriendsvr >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventWakeup*
Arena::CreateMaybeMessage< ::inner::InnerGameEventWakeup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventWakeup >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventWakeupTeamsvr*
Arena::CreateMaybeMessage< ::inner::InnerGameEventWakeupTeamsvr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventWakeupTeamsvr >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerGameEventWakeupFriendsvr*
Arena::CreateMaybeMessage< ::inner::InnerGameEventWakeupFriendsvr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerGameEventWakeupFriendsvr >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
