// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace common {
class ClientCopyScene;
struct ClientCopySceneDefaultTypeInternal;
extern ClientCopySceneDefaultTypeInternal _ClientCopyScene_default_instance_;
class ClientPos;
struct ClientPosDefaultTypeInternal;
extern ClientPosDefaultTypeInternal _ClientPos_default_instance_;
class ClientPosDirect;
struct ClientPosDirectDefaultTypeInternal;
extern ClientPosDirectDefaultTypeInternal _ClientPosDirect_default_instance_;
class ClientPosTerminate;
struct ClientPosTerminateDefaultTypeInternal;
extern ClientPosTerminateDefaultTypeInternal _ClientPosTerminate_default_instance_;
class ClientSceneId;
struct ClientSceneIdDefaultTypeInternal;
extern ClientSceneIdDefaultTypeInternal _ClientSceneId_default_instance_;
class ClientStaticScene;
struct ClientStaticSceneDefaultTypeInternal;
extern ClientStaticSceneDefaultTypeInternal _ClientStaticScene_default_instance_;
class EquipView;
struct EquipViewDefaultTypeInternal;
extern EquipViewDefaultTypeInternal _EquipView_default_instance_;
class FashionStain;
struct FashionStainDefaultTypeInternal;
extern FashionStainDefaultTypeInternal _FashionStain_default_instance_;
class FashionView;
struct FashionViewDefaultTypeInternal;
extern FashionViewDefaultTypeInternal _FashionView_default_instance_;
class ModelPart;
struct ModelPartDefaultTypeInternal;
extern ModelPartDefaultTypeInternal _ModelPart_default_instance_;
class ModelPartList;
struct ModelPartListDefaultTypeInternal;
extern ModelPartListDefaultTypeInternal _ModelPartList_default_instance_;
class ModuleViewFashion;
struct ModuleViewFashionDefaultTypeInternal;
extern ModuleViewFashionDefaultTypeInternal _ModuleViewFashion_default_instance_;
class OneFashionStain;
struct OneFashionStainDefaultTypeInternal;
extern OneFashionStainDefaultTypeInternal _OneFashionStain_default_instance_;
class RoleBrief;
struct RoleBriefDefaultTypeInternal;
extern RoleBriefDefaultTypeInternal _RoleBrief_default_instance_;
class RoleExtend1;
struct RoleExtend1DefaultTypeInternal;
extern RoleExtend1DefaultTypeInternal _RoleExtend1_default_instance_;
class RoleExtend2;
struct RoleExtend2DefaultTypeInternal;
extern RoleExtend2DefaultTypeInternal _RoleExtend2_default_instance_;
class RoleExtend3;
struct RoleExtend3DefaultTypeInternal;
extern RoleExtend3DefaultTypeInternal _RoleExtend3_default_instance_;
class RoleVoteState;
struct RoleVoteStateDefaultTypeInternal;
extern RoleVoteStateDefaultTypeInternal _RoleVoteState_default_instance_;
class RoleVoteStateList;
struct RoleVoteStateListDefaultTypeInternal;
extern RoleVoteStateListDefaultTypeInternal _RoleVoteStateList_default_instance_;
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> ::common::ClientCopyScene* Arena::CreateMaybeMessage<::common::ClientCopyScene>(Arena*);
template<> ::common::ClientPos* Arena::CreateMaybeMessage<::common::ClientPos>(Arena*);
template<> ::common::ClientPosDirect* Arena::CreateMaybeMessage<::common::ClientPosDirect>(Arena*);
template<> ::common::ClientPosTerminate* Arena::CreateMaybeMessage<::common::ClientPosTerminate>(Arena*);
template<> ::common::ClientSceneId* Arena::CreateMaybeMessage<::common::ClientSceneId>(Arena*);
template<> ::common::ClientStaticScene* Arena::CreateMaybeMessage<::common::ClientStaticScene>(Arena*);
template<> ::common::EquipView* Arena::CreateMaybeMessage<::common::EquipView>(Arena*);
template<> ::common::FashionStain* Arena::CreateMaybeMessage<::common::FashionStain>(Arena*);
template<> ::common::FashionView* Arena::CreateMaybeMessage<::common::FashionView>(Arena*);
template<> ::common::ModelPart* Arena::CreateMaybeMessage<::common::ModelPart>(Arena*);
template<> ::common::ModelPartList* Arena::CreateMaybeMessage<::common::ModelPartList>(Arena*);
template<> ::common::ModuleViewFashion* Arena::CreateMaybeMessage<::common::ModuleViewFashion>(Arena*);
template<> ::common::OneFashionStain* Arena::CreateMaybeMessage<::common::OneFashionStain>(Arena*);
template<> ::common::RoleBrief* Arena::CreateMaybeMessage<::common::RoleBrief>(Arena*);
template<> ::common::RoleExtend1* Arena::CreateMaybeMessage<::common::RoleExtend1>(Arena*);
template<> ::common::RoleExtend2* Arena::CreateMaybeMessage<::common::RoleExtend2>(Arena*);
template<> ::common::RoleExtend3* Arena::CreateMaybeMessage<::common::RoleExtend3>(Arena*);
template<> ::common::RoleVoteState* Arena::CreateMaybeMessage<::common::RoleVoteState>(Arena*);
template<> ::common::RoleVoteStateList* Arena::CreateMaybeMessage<::common::RoleVoteStateList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace common {

// ===================================================================

class ModelPart final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ModelPart) */ {
 public:
  inline ModelPart() : ModelPart(nullptr) {}
  ~ModelPart() override;
  explicit PROTOBUF_CONSTEXPR ModelPart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelPart(const ModelPart& from);
  ModelPart(ModelPart&& from) noexcept
    : ModelPart() {
    *this = ::std::move(from);
  }

  inline ModelPart& operator=(const ModelPart& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelPart& operator=(ModelPart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelPart& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelPart* internal_default_instance() {
    return reinterpret_cast<const ModelPart*>(
               &_ModelPart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ModelPart& a, ModelPart& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelPart* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelPart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelPart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelPart>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelPart& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModelPart& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelPart* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ModelPart";
  }
  protected:
  explicit ModelPart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartIdFieldNumber = 1,
    kPartValFieldNumber = 2,
  };
  // uint32 partId = 1;
  void clear_partid();
  uint32_t partid() const;
  void set_partid(uint32_t value);
  private:
  uint32_t _internal_partid() const;
  void _internal_set_partid(uint32_t value);
  public:

  // uint32 partVal = 2;
  void clear_partval();
  uint32_t partval() const;
  void set_partval(uint32_t value);
  private:
  uint32_t _internal_partval() const;
  void _internal_set_partval(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ModelPart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t partid_;
  uint32_t partval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ModelPartList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ModelPartList) */ {
 public:
  inline ModelPartList() : ModelPartList(nullptr) {}
  ~ModelPartList() override;
  explicit PROTOBUF_CONSTEXPR ModelPartList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelPartList(const ModelPartList& from);
  ModelPartList(ModelPartList&& from) noexcept
    : ModelPartList() {
    *this = ::std::move(from);
  }

  inline ModelPartList& operator=(const ModelPartList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelPartList& operator=(ModelPartList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelPartList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelPartList* internal_default_instance() {
    return reinterpret_cast<const ModelPartList*>(
               &_ModelPartList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ModelPartList& a, ModelPartList& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelPartList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelPartList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelPartList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelPartList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelPartList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModelPartList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelPartList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ModelPartList";
  }
  protected:
  explicit ModelPartList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartsFieldNumber = 1,
  };
  // repeated .common.ModelPart parts = 1;
  int parts_size() const;
  private:
  int _internal_parts_size() const;
  public:
  void clear_parts();
  ::common::ModelPart* mutable_parts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ModelPart >*
      mutable_parts();
  private:
  const ::common::ModelPart& _internal_parts(int index) const;
  ::common::ModelPart* _internal_add_parts();
  public:
  const ::common::ModelPart& parts(int index) const;
  ::common::ModelPart* add_parts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ModelPart >&
      parts() const;

  // @@protoc_insertion_point(class_scope:common.ModelPartList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ModelPart > parts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class OneFashionStain final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.OneFashionStain) */ {
 public:
  inline OneFashionStain() : OneFashionStain(nullptr) {}
  ~OneFashionStain() override;
  explicit PROTOBUF_CONSTEXPR OneFashionStain(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OneFashionStain(const OneFashionStain& from);
  OneFashionStain(OneFashionStain&& from) noexcept
    : OneFashionStain() {
    *this = ::std::move(from);
  }

  inline OneFashionStain& operator=(const OneFashionStain& from) {
    CopyFrom(from);
    return *this;
  }
  inline OneFashionStain& operator=(OneFashionStain&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OneFashionStain& default_instance() {
    return *internal_default_instance();
  }
  static inline const OneFashionStain* internal_default_instance() {
    return reinterpret_cast<const OneFashionStain*>(
               &_OneFashionStain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OneFashionStain& a, OneFashionStain& b) {
    a.Swap(&b);
  }
  inline void Swap(OneFashionStain* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OneFashionStain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OneFashionStain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OneFashionStain>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OneFashionStain& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OneFashionStain& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneFashionStain* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.OneFashionStain";
  }
  protected:
  explicit OneFashionStain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartFieldNumber = 1,
    kColorFieldNumber = 2,
  };
  // uint32 part = 1;
  void clear_part();
  uint32_t part() const;
  void set_part(uint32_t value);
  private:
  uint32_t _internal_part() const;
  void _internal_set_part(uint32_t value);
  public:

  // uint32 color = 2;
  void clear_color();
  uint32_t color() const;
  void set_color(uint32_t value);
  private:
  uint32_t _internal_color() const;
  void _internal_set_color(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.OneFashionStain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t part_;
  uint32_t color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class FashionStain final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.FashionStain) */ {
 public:
  inline FashionStain() : FashionStain(nullptr) {}
  ~FashionStain() override;
  explicit PROTOBUF_CONSTEXPR FashionStain(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FashionStain(const FashionStain& from);
  FashionStain(FashionStain&& from) noexcept
    : FashionStain() {
    *this = ::std::move(from);
  }

  inline FashionStain& operator=(const FashionStain& from) {
    CopyFrom(from);
    return *this;
  }
  inline FashionStain& operator=(FashionStain&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FashionStain& default_instance() {
    return *internal_default_instance();
  }
  static inline const FashionStain* internal_default_instance() {
    return reinterpret_cast<const FashionStain*>(
               &_FashionStain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FashionStain& a, FashionStain& b) {
    a.Swap(&b);
  }
  inline void Swap(FashionStain* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FashionStain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FashionStain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FashionStain>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FashionStain& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FashionStain& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FashionStain* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.FashionStain";
  }
  protected:
  explicit FashionStain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOnestainFieldNumber = 1,
  };
  // repeated .common.OneFashionStain onestain = 1;
  int onestain_size() const;
  private:
  int _internal_onestain_size() const;
  public:
  void clear_onestain();
  ::common::OneFashionStain* mutable_onestain(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::OneFashionStain >*
      mutable_onestain();
  private:
  const ::common::OneFashionStain& _internal_onestain(int index) const;
  ::common::OneFashionStain* _internal_add_onestain();
  public:
  const ::common::OneFashionStain& onestain(int index) const;
  ::common::OneFashionStain* add_onestain();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::OneFashionStain >&
      onestain() const;

  // @@protoc_insertion_point(class_scope:common.FashionStain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::OneFashionStain > onestain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class FashionView final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.FashionView) */ {
 public:
  inline FashionView() : FashionView(nullptr) {}
  ~FashionView() override;
  explicit PROTOBUF_CONSTEXPR FashionView(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FashionView(const FashionView& from);
  FashionView(FashionView&& from) noexcept
    : FashionView() {
    *this = ::std::move(from);
  }

  inline FashionView& operator=(const FashionView& from) {
    CopyFrom(from);
    return *this;
  }
  inline FashionView& operator=(FashionView&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FashionView& default_instance() {
    return *internal_default_instance();
  }
  static inline const FashionView* internal_default_instance() {
    return reinterpret_cast<const FashionView*>(
               &_FashionView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FashionView& a, FashionView& b) {
    a.Swap(&b);
  }
  inline void Swap(FashionView* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FashionView* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FashionView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FashionView>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FashionView& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FashionView& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FashionView* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.FashionView";
  }
  protected:
  explicit FashionView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStainFieldNumber = 2,
    kCurrentFieldNumber = 1,
  };
  // .common.FashionStain stain = 2;
  bool has_stain() const;
  private:
  bool _internal_has_stain() const;
  public:
  void clear_stain();
  const ::common::FashionStain& stain() const;
  PROTOBUF_NODISCARD ::common::FashionStain* release_stain();
  ::common::FashionStain* mutable_stain();
  void set_allocated_stain(::common::FashionStain* stain);
  private:
  const ::common::FashionStain& _internal_stain() const;
  ::common::FashionStain* _internal_mutable_stain();
  public:
  void unsafe_arena_set_allocated_stain(
      ::common::FashionStain* stain);
  ::common::FashionStain* unsafe_arena_release_stain();

  // uint32 current = 1;
  void clear_current();
  uint32_t current() const;
  void set_current(uint32_t value);
  private:
  uint32_t _internal_current() const;
  void _internal_set_current(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.FashionView)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::FashionStain* stain_;
  uint32_t current_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ModuleViewFashion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ModuleViewFashion) */ {
 public:
  inline ModuleViewFashion() : ModuleViewFashion(nullptr) {}
  ~ModuleViewFashion() override;
  explicit PROTOBUF_CONSTEXPR ModuleViewFashion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleViewFashion(const ModuleViewFashion& from);
  ModuleViewFashion(ModuleViewFashion&& from) noexcept
    : ModuleViewFashion() {
    *this = ::std::move(from);
  }

  inline ModuleViewFashion& operator=(const ModuleViewFashion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleViewFashion& operator=(ModuleViewFashion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleViewFashion& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleViewFashion* internal_default_instance() {
    return reinterpret_cast<const ModuleViewFashion*>(
               &_ModuleViewFashion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ModuleViewFashion& a, ModuleViewFashion& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleViewFashion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleViewFashion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleViewFashion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleViewFashion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleViewFashion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleViewFashion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleViewFashion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ModuleViewFashion";
  }
  protected:
  explicit ModuleViewFashion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadFieldNumber = 1,
    kFaceFieldNumber = 2,
    kMouthFieldNumber = 3,
    kClothFieldNumber = 4,
    kBackFieldNumber = 5,
    kTailFieldNumber = 6,
    kHairFieldNumber = 7,
    kWeaponFieldNumber = 8,
  };
  // .common.FashionView head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::common::FashionView& head() const;
  PROTOBUF_NODISCARD ::common::FashionView* release_head();
  ::common::FashionView* mutable_head();
  void set_allocated_head(::common::FashionView* head);
  private:
  const ::common::FashionView& _internal_head() const;
  ::common::FashionView* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::common::FashionView* head);
  ::common::FashionView* unsafe_arena_release_head();

  // .common.FashionView face = 2;
  bool has_face() const;
  private:
  bool _internal_has_face() const;
  public:
  void clear_face();
  const ::common::FashionView& face() const;
  PROTOBUF_NODISCARD ::common::FashionView* release_face();
  ::common::FashionView* mutable_face();
  void set_allocated_face(::common::FashionView* face);
  private:
  const ::common::FashionView& _internal_face() const;
  ::common::FashionView* _internal_mutable_face();
  public:
  void unsafe_arena_set_allocated_face(
      ::common::FashionView* face);
  ::common::FashionView* unsafe_arena_release_face();

  // .common.FashionView mouth = 3;
  bool has_mouth() const;
  private:
  bool _internal_has_mouth() const;
  public:
  void clear_mouth();
  const ::common::FashionView& mouth() const;
  PROTOBUF_NODISCARD ::common::FashionView* release_mouth();
  ::common::FashionView* mutable_mouth();
  void set_allocated_mouth(::common::FashionView* mouth);
  private:
  const ::common::FashionView& _internal_mouth() const;
  ::common::FashionView* _internal_mutable_mouth();
  public:
  void unsafe_arena_set_allocated_mouth(
      ::common::FashionView* mouth);
  ::common::FashionView* unsafe_arena_release_mouth();

  // .common.FashionView cloth = 4;
  bool has_cloth() const;
  private:
  bool _internal_has_cloth() const;
  public:
  void clear_cloth();
  const ::common::FashionView& cloth() const;
  PROTOBUF_NODISCARD ::common::FashionView* release_cloth();
  ::common::FashionView* mutable_cloth();
  void set_allocated_cloth(::common::FashionView* cloth);
  private:
  const ::common::FashionView& _internal_cloth() const;
  ::common::FashionView* _internal_mutable_cloth();
  public:
  void unsafe_arena_set_allocated_cloth(
      ::common::FashionView* cloth);
  ::common::FashionView* unsafe_arena_release_cloth();

  // .common.FashionView back = 5;
  bool has_back() const;
  private:
  bool _internal_has_back() const;
  public:
  void clear_back();
  const ::common::FashionView& back() const;
  PROTOBUF_NODISCARD ::common::FashionView* release_back();
  ::common::FashionView* mutable_back();
  void set_allocated_back(::common::FashionView* back);
  private:
  const ::common::FashionView& _internal_back() const;
  ::common::FashionView* _internal_mutable_back();
  public:
  void unsafe_arena_set_allocated_back(
      ::common::FashionView* back);
  ::common::FashionView* unsafe_arena_release_back();

  // .common.FashionView tail = 6;
  bool has_tail() const;
  private:
  bool _internal_has_tail() const;
  public:
  void clear_tail();
  const ::common::FashionView& tail() const;
  PROTOBUF_NODISCARD ::common::FashionView* release_tail();
  ::common::FashionView* mutable_tail();
  void set_allocated_tail(::common::FashionView* tail);
  private:
  const ::common::FashionView& _internal_tail() const;
  ::common::FashionView* _internal_mutable_tail();
  public:
  void unsafe_arena_set_allocated_tail(
      ::common::FashionView* tail);
  ::common::FashionView* unsafe_arena_release_tail();

  // .common.FashionView hair = 7;
  bool has_hair() const;
  private:
  bool _internal_has_hair() const;
  public:
  void clear_hair();
  const ::common::FashionView& hair() const;
  PROTOBUF_NODISCARD ::common::FashionView* release_hair();
  ::common::FashionView* mutable_hair();
  void set_allocated_hair(::common::FashionView* hair);
  private:
  const ::common::FashionView& _internal_hair() const;
  ::common::FashionView* _internal_mutable_hair();
  public:
  void unsafe_arena_set_allocated_hair(
      ::common::FashionView* hair);
  ::common::FashionView* unsafe_arena_release_hair();

  // .common.FashionView weapon = 8;
  bool has_weapon() const;
  private:
  bool _internal_has_weapon() const;
  public:
  void clear_weapon();
  const ::common::FashionView& weapon() const;
  PROTOBUF_NODISCARD ::common::FashionView* release_weapon();
  ::common::FashionView* mutable_weapon();
  void set_allocated_weapon(::common::FashionView* weapon);
  private:
  const ::common::FashionView& _internal_weapon() const;
  ::common::FashionView* _internal_mutable_weapon();
  public:
  void unsafe_arena_set_allocated_weapon(
      ::common::FashionView* weapon);
  ::common::FashionView* unsafe_arena_release_weapon();

  // @@protoc_insertion_point(class_scope:common.ModuleViewFashion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::FashionView* head_;
  ::common::FashionView* face_;
  ::common::FashionView* mouth_;
  ::common::FashionView* cloth_;
  ::common::FashionView* back_;
  ::common::FashionView* tail_;
  ::common::FashionView* hair_;
  ::common::FashionView* weapon_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ClientSceneId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ClientSceneId) */ {
 public:
  inline ClientSceneId() : ClientSceneId(nullptr) {}
  ~ClientSceneId() override;
  explicit PROTOBUF_CONSTEXPR ClientSceneId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientSceneId(const ClientSceneId& from);
  ClientSceneId(ClientSceneId&& from) noexcept
    : ClientSceneId() {
    *this = ::std::move(from);
  }

  inline ClientSceneId& operator=(const ClientSceneId& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientSceneId& operator=(ClientSceneId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientSceneId& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientSceneId* internal_default_instance() {
    return reinterpret_cast<const ClientSceneId*>(
               &_ClientSceneId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ClientSceneId& a, ClientSceneId& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientSceneId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientSceneId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientSceneId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientSceneId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientSceneId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClientSceneId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientSceneId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ClientSceneId";
  }
  protected:
  explicit ClientSceneId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapIdFieldNumber = 1,
    kProcTypeFieldNumber = 2,
    kProcParamFieldNumber = 3,
  };
  // uint32 mapId = 1;
  void clear_mapid();
  uint32_t mapid() const;
  void set_mapid(uint32_t value);
  private:
  uint32_t _internal_mapid() const;
  void _internal_set_mapid(uint32_t value);
  public:

  // uint32 procType = 2;
  void clear_proctype();
  uint32_t proctype() const;
  void set_proctype(uint32_t value);
  private:
  uint32_t _internal_proctype() const;
  void _internal_set_proctype(uint32_t value);
  public:

  // uint32 procParam = 3;
  void clear_procparam();
  uint32_t procparam() const;
  void set_procparam(uint32_t value);
  private:
  uint32_t _internal_procparam() const;
  void _internal_set_procparam(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ClientSceneId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t mapid_;
  uint32_t proctype_;
  uint32_t procparam_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ClientStaticScene final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ClientStaticScene) */ {
 public:
  inline ClientStaticScene() : ClientStaticScene(nullptr) {}
  ~ClientStaticScene() override;
  explicit PROTOBUF_CONSTEXPR ClientStaticScene(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientStaticScene(const ClientStaticScene& from);
  ClientStaticScene(ClientStaticScene&& from) noexcept
    : ClientStaticScene() {
    *this = ::std::move(from);
  }

  inline ClientStaticScene& operator=(const ClientStaticScene& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientStaticScene& operator=(ClientStaticScene&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientStaticScene& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientStaticScene* internal_default_instance() {
    return reinterpret_cast<const ClientStaticScene*>(
               &_ClientStaticScene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ClientStaticScene& a, ClientStaticScene& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientStaticScene* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientStaticScene* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientStaticScene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientStaticScene>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientStaticScene& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClientStaticScene& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientStaticScene* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ClientStaticScene";
  }
  protected:
  explicit ClientStaticScene(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineIdFieldNumber = 1,
  };
  // uint32 lineId = 1;
  void clear_lineid();
  uint32_t lineid() const;
  void set_lineid(uint32_t value);
  private:
  uint32_t _internal_lineid() const;
  void _internal_set_lineid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ClientStaticScene)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t lineid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ClientCopyScene final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ClientCopyScene) */ {
 public:
  inline ClientCopyScene() : ClientCopyScene(nullptr) {}
  ~ClientCopyScene() override;
  explicit PROTOBUF_CONSTEXPR ClientCopyScene(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientCopyScene(const ClientCopyScene& from);
  ClientCopyScene(ClientCopyScene&& from) noexcept
    : ClientCopyScene() {
    *this = ::std::move(from);
  }

  inline ClientCopyScene& operator=(const ClientCopyScene& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientCopyScene& operator=(ClientCopyScene&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientCopyScene& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientCopyScene* internal_default_instance() {
    return reinterpret_cast<const ClientCopyScene*>(
               &_ClientCopyScene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ClientCopyScene& a, ClientCopyScene& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientCopyScene* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientCopyScene* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientCopyScene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientCopyScene>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientCopyScene& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClientCopyScene& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientCopyScene* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ClientCopyScene";
  }
  protected:
  explicit ClientCopyScene(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCopyLvIdFieldNumber = 1,
    kAutoIdFieldNumber = 2,
  };
  // uint32 copyLvId = 1;
  void clear_copylvid();
  uint32_t copylvid() const;
  void set_copylvid(uint32_t value);
  private:
  uint32_t _internal_copylvid() const;
  void _internal_set_copylvid(uint32_t value);
  public:

  // uint32 autoId = 2;
  void clear_autoid();
  uint32_t autoid() const;
  void set_autoid(uint32_t value);
  private:
  uint32_t _internal_autoid() const;
  void _internal_set_autoid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ClientCopyScene)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t copylvid_;
  uint32_t autoid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ClientPos final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ClientPos) */ {
 public:
  inline ClientPos() : ClientPos(nullptr) {}
  ~ClientPos() override;
  explicit PROTOBUF_CONSTEXPR ClientPos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientPos(const ClientPos& from);
  ClientPos(ClientPos&& from) noexcept
    : ClientPos() {
    *this = ::std::move(from);
  }

  inline ClientPos& operator=(const ClientPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientPos& operator=(ClientPos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientPos& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientPos* internal_default_instance() {
    return reinterpret_cast<const ClientPos*>(
               &_ClientPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ClientPos& a, ClientPos& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientPos* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientPos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientPos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientPos>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientPos& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClientPos& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientPos* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ClientPos";
  }
  protected:
  explicit ClientPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoxXFieldNumber = 1,
    kPosYFieldNumber = 2,
    kOffsetXFieldNumber = 3,
    kOffsetYFieldNumber = 4,
  };
  // uint32 poxX = 1;
  void clear_poxx();
  uint32_t poxx() const;
  void set_poxx(uint32_t value);
  private:
  uint32_t _internal_poxx() const;
  void _internal_set_poxx(uint32_t value);
  public:

  // uint32 posY = 2;
  void clear_posy();
  uint32_t posy() const;
  void set_posy(uint32_t value);
  private:
  uint32_t _internal_posy() const;
  void _internal_set_posy(uint32_t value);
  public:

  // uint32 offsetX = 3;
  void clear_offsetx();
  uint32_t offsetx() const;
  void set_offsetx(uint32_t value);
  private:
  uint32_t _internal_offsetx() const;
  void _internal_set_offsetx(uint32_t value);
  public:

  // uint32 offsetY = 4;
  void clear_offsety();
  uint32_t offsety() const;
  void set_offsety(uint32_t value);
  private:
  uint32_t _internal_offsety() const;
  void _internal_set_offsety(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ClientPos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t poxx_;
  uint32_t posy_;
  uint32_t offsetx_;
  uint32_t offsety_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ClientPosDirect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ClientPosDirect) */ {
 public:
  inline ClientPosDirect() : ClientPosDirect(nullptr) {}
  ~ClientPosDirect() override;
  explicit PROTOBUF_CONSTEXPR ClientPosDirect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientPosDirect(const ClientPosDirect& from);
  ClientPosDirect(ClientPosDirect&& from) noexcept
    : ClientPosDirect() {
    *this = ::std::move(from);
  }

  inline ClientPosDirect& operator=(const ClientPosDirect& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientPosDirect& operator=(ClientPosDirect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientPosDirect& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientPosDirect* internal_default_instance() {
    return reinterpret_cast<const ClientPosDirect*>(
               &_ClientPosDirect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ClientPosDirect& a, ClientPosDirect& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientPosDirect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientPosDirect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientPosDirect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientPosDirect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientPosDirect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClientPosDirect& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientPosDirect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ClientPosDirect";
  }
  protected:
  explicit ClientPosDirect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCposFieldNumber = 1,
    kDirectFieldNumber = 2,
  };
  // .common.ClientPos cpos = 1;
  bool has_cpos() const;
  private:
  bool _internal_has_cpos() const;
  public:
  void clear_cpos();
  const ::common::ClientPos& cpos() const;
  PROTOBUF_NODISCARD ::common::ClientPos* release_cpos();
  ::common::ClientPos* mutable_cpos();
  void set_allocated_cpos(::common::ClientPos* cpos);
  private:
  const ::common::ClientPos& _internal_cpos() const;
  ::common::ClientPos* _internal_mutable_cpos();
  public:
  void unsafe_arena_set_allocated_cpos(
      ::common::ClientPos* cpos);
  ::common::ClientPos* unsafe_arena_release_cpos();

  // uint32 direct = 2;
  void clear_direct();
  uint32_t direct() const;
  void set_direct(uint32_t value);
  private:
  uint32_t _internal_direct() const;
  void _internal_set_direct(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ClientPosDirect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::ClientPos* cpos_;
  uint32_t direct_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ClientPosTerminate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ClientPosTerminate) */ {
 public:
  inline ClientPosTerminate() : ClientPosTerminate(nullptr) {}
  ~ClientPosTerminate() override;
  explicit PROTOBUF_CONSTEXPR ClientPosTerminate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientPosTerminate(const ClientPosTerminate& from);
  ClientPosTerminate(ClientPosTerminate&& from) noexcept
    : ClientPosTerminate() {
    *this = ::std::move(from);
  }

  inline ClientPosTerminate& operator=(const ClientPosTerminate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientPosTerminate& operator=(ClientPosTerminate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientPosTerminate& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientPosTerminate* internal_default_instance() {
    return reinterpret_cast<const ClientPosTerminate*>(
               &_ClientPosTerminate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ClientPosTerminate& a, ClientPosTerminate& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientPosTerminate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientPosTerminate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientPosTerminate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientPosTerminate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientPosTerminate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClientPosTerminate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientPosTerminate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ClientPosTerminate";
  }
  protected:
  explicit ClientPosTerminate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosListFieldNumber = 2,
    kServertimeFieldNumber = 1,
  };
  // repeated .common.ClientPos posList = 2;
  int poslist_size() const;
  private:
  int _internal_poslist_size() const;
  public:
  void clear_poslist();
  ::common::ClientPos* mutable_poslist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ClientPos >*
      mutable_poslist();
  private:
  const ::common::ClientPos& _internal_poslist(int index) const;
  ::common::ClientPos* _internal_add_poslist();
  public:
  const ::common::ClientPos& poslist(int index) const;
  ::common::ClientPos* add_poslist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ClientPos >&
      poslist() const;

  // uint64 servertime = 1;
  void clear_servertime();
  uint64_t servertime() const;
  void set_servertime(uint64_t value);
  private:
  uint64_t _internal_servertime() const;
  void _internal_set_servertime(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ClientPosTerminate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ClientPos > poslist_;
  uint64_t servertime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class EquipView final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.EquipView) */ {
 public:
  inline EquipView() : EquipView(nullptr) {}
  ~EquipView() override;
  explicit PROTOBUF_CONSTEXPR EquipView(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EquipView(const EquipView& from);
  EquipView(EquipView&& from) noexcept
    : EquipView() {
    *this = ::std::move(from);
  }

  inline EquipView& operator=(const EquipView& from) {
    CopyFrom(from);
    return *this;
  }
  inline EquipView& operator=(EquipView&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EquipView& default_instance() {
    return *internal_default_instance();
  }
  static inline const EquipView* internal_default_instance() {
    return reinterpret_cast<const EquipView*>(
               &_EquipView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(EquipView& a, EquipView& b) {
    a.Swap(&b);
  }
  inline void Swap(EquipView* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EquipView* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EquipView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EquipView>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EquipView& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EquipView& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EquipView* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.EquipView";
  }
  protected:
  explicit EquipView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEquipTidFieldNumber = 1,
    kStrengthLevelFieldNumber = 2,
  };
  // uint32 equipTid = 1;
  void clear_equiptid();
  uint32_t equiptid() const;
  void set_equiptid(uint32_t value);
  private:
  uint32_t _internal_equiptid() const;
  void _internal_set_equiptid(uint32_t value);
  public:

  // uint32 strengthLevel = 2;
  void clear_strengthlevel();
  uint32_t strengthlevel() const;
  void set_strengthlevel(uint32_t value);
  private:
  uint32_t _internal_strengthlevel() const;
  void _internal_set_strengthlevel(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.EquipView)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t equiptid_;
  uint32_t strengthlevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class RoleBrief final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.RoleBrief) */ {
 public:
  inline RoleBrief() : RoleBrief(nullptr) {}
  ~RoleBrief() override;
  explicit PROTOBUF_CONSTEXPR RoleBrief(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleBrief(const RoleBrief& from);
  RoleBrief(RoleBrief&& from) noexcept
    : RoleBrief() {
    *this = ::std::move(from);
  }

  inline RoleBrief& operator=(const RoleBrief& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleBrief& operator=(RoleBrief&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleBrief& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleBrief* internal_default_instance() {
    return reinterpret_cast<const RoleBrief*>(
               &_RoleBrief_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RoleBrief& a, RoleBrief& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleBrief* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleBrief* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleBrief* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleBrief>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleBrief& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoleBrief& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleBrief* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.RoleBrief";
  }
  protected:
  explicit RoleBrief(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kRoleIdFieldNumber = 1,
    kHeadIconFieldNumber = 3,
    kHeadFrameFieldNumber = 4,
    kCareerIdFieldNumber = 5,
    kLevelFieldNumber = 6,
    kSexFieldNumber = 7,
    kCareerLevelFieldNumber = 8,
    kZoneIdFFieldNumber = 9,
  };
  // bytes nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // uint64 roleId = 1;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // uint32 headIcon = 3;
  void clear_headicon();
  uint32_t headicon() const;
  void set_headicon(uint32_t value);
  private:
  uint32_t _internal_headicon() const;
  void _internal_set_headicon(uint32_t value);
  public:

  // uint32 headFrame = 4;
  void clear_headframe();
  uint32_t headframe() const;
  void set_headframe(uint32_t value);
  private:
  uint32_t _internal_headframe() const;
  void _internal_set_headframe(uint32_t value);
  public:

  // uint32 careerId = 5;
  void clear_careerid();
  uint32_t careerid() const;
  void set_careerid(uint32_t value);
  private:
  uint32_t _internal_careerid() const;
  void _internal_set_careerid(uint32_t value);
  public:

  // uint32 level = 6;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 sex = 7;
  void clear_sex();
  uint32_t sex() const;
  void set_sex(uint32_t value);
  private:
  uint32_t _internal_sex() const;
  void _internal_set_sex(uint32_t value);
  public:

  // uint32 careerLevel = 8;
  void clear_careerlevel();
  uint32_t careerlevel() const;
  void set_careerlevel(uint32_t value);
  private:
  uint32_t _internal_careerlevel() const;
  void _internal_set_careerlevel(uint32_t value);
  public:

  // uint32 zoneIdF = 9;
  void clear_zoneidf();
  uint32_t zoneidf() const;
  void set_zoneidf(uint32_t value);
  private:
  uint32_t _internal_zoneidf() const;
  void _internal_set_zoneidf(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.RoleBrief)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  uint64_t roleid_;
  uint32_t headicon_;
  uint32_t headframe_;
  uint32_t careerid_;
  uint32_t level_;
  uint32_t sex_;
  uint32_t careerlevel_;
  uint32_t zoneidf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class RoleExtend1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.RoleExtend1) */ {
 public:
  inline RoleExtend1() : RoleExtend1(nullptr) {}
  ~RoleExtend1() override;
  explicit PROTOBUF_CONSTEXPR RoleExtend1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleExtend1(const RoleExtend1& from);
  RoleExtend1(RoleExtend1&& from) noexcept
    : RoleExtend1() {
    *this = ::std::move(from);
  }

  inline RoleExtend1& operator=(const RoleExtend1& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleExtend1& operator=(RoleExtend1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleExtend1& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleExtend1* internal_default_instance() {
    return reinterpret_cast<const RoleExtend1*>(
               &_RoleExtend1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RoleExtend1& a, RoleExtend1& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleExtend1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleExtend1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleExtend1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleExtend1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleExtend1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoleExtend1& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleExtend1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.RoleExtend1";
  }
  protected:
  explicit RoleExtend1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFamilyNameFieldNumber = 4,
    kMpListFieldNumber = 3,
    kFashionFieldNumber = 7,
    kMainHandFieldNumber = 8,
    kOffHandFieldNumber = 9,
    kTeamIdFieldNumber = 1,
    kFamilyIdFieldNumber = 2,
    kLeaderSceneIdFieldNumber = 5,
    kFightPointFieldNumber = 6,
    kChatFontFieldNumber = 10,
    kChatFrameFieldNumber = 11,
    kLoginTimeFieldNumber = 12,
    kLogoutTimeFieldNumber = 13,
    kOfflineTimeFieldNumber = 14,
    kOnlineTimeFieldNumber = 15,
  };
  // string familyName = 4;
  void clear_familyname();
  const std::string& familyname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_familyname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_familyname();
  PROTOBUF_NODISCARD std::string* release_familyname();
  void set_allocated_familyname(std::string* familyname);
  private:
  const std::string& _internal_familyname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_familyname(const std::string& value);
  std::string* _internal_mutable_familyname();
  public:

  // .common.ModelPartList mpList = 3;
  bool has_mplist() const;
  private:
  bool _internal_has_mplist() const;
  public:
  void clear_mplist();
  const ::common::ModelPartList& mplist() const;
  PROTOBUF_NODISCARD ::common::ModelPartList* release_mplist();
  ::common::ModelPartList* mutable_mplist();
  void set_allocated_mplist(::common::ModelPartList* mplist);
  private:
  const ::common::ModelPartList& _internal_mplist() const;
  ::common::ModelPartList* _internal_mutable_mplist();
  public:
  void unsafe_arena_set_allocated_mplist(
      ::common::ModelPartList* mplist);
  ::common::ModelPartList* unsafe_arena_release_mplist();

  // .common.ModuleViewFashion fashion = 7;
  bool has_fashion() const;
  private:
  bool _internal_has_fashion() const;
  public:
  void clear_fashion();
  const ::common::ModuleViewFashion& fashion() const;
  PROTOBUF_NODISCARD ::common::ModuleViewFashion* release_fashion();
  ::common::ModuleViewFashion* mutable_fashion();
  void set_allocated_fashion(::common::ModuleViewFashion* fashion);
  private:
  const ::common::ModuleViewFashion& _internal_fashion() const;
  ::common::ModuleViewFashion* _internal_mutable_fashion();
  public:
  void unsafe_arena_set_allocated_fashion(
      ::common::ModuleViewFashion* fashion);
  ::common::ModuleViewFashion* unsafe_arena_release_fashion();

  // .common.EquipView mainHand = 8;
  bool has_mainhand() const;
  private:
  bool _internal_has_mainhand() const;
  public:
  void clear_mainhand();
  const ::common::EquipView& mainhand() const;
  PROTOBUF_NODISCARD ::common::EquipView* release_mainhand();
  ::common::EquipView* mutable_mainhand();
  void set_allocated_mainhand(::common::EquipView* mainhand);
  private:
  const ::common::EquipView& _internal_mainhand() const;
  ::common::EquipView* _internal_mutable_mainhand();
  public:
  void unsafe_arena_set_allocated_mainhand(
      ::common::EquipView* mainhand);
  ::common::EquipView* unsafe_arena_release_mainhand();

  // .common.EquipView offHand = 9;
  bool has_offhand() const;
  private:
  bool _internal_has_offhand() const;
  public:
  void clear_offhand();
  const ::common::EquipView& offhand() const;
  PROTOBUF_NODISCARD ::common::EquipView* release_offhand();
  ::common::EquipView* mutable_offhand();
  void set_allocated_offhand(::common::EquipView* offhand);
  private:
  const ::common::EquipView& _internal_offhand() const;
  ::common::EquipView* _internal_mutable_offhand();
  public:
  void unsafe_arena_set_allocated_offhand(
      ::common::EquipView* offhand);
  ::common::EquipView* unsafe_arena_release_offhand();

  // uint64 teamId = 1;
  void clear_teamid();
  uint64_t teamid() const;
  void set_teamid(uint64_t value);
  private:
  uint64_t _internal_teamid() const;
  void _internal_set_teamid(uint64_t value);
  public:

  // uint64 familyId = 2;
  void clear_familyid();
  uint64_t familyid() const;
  void set_familyid(uint64_t value);
  private:
  uint64_t _internal_familyid() const;
  void _internal_set_familyid(uint64_t value);
  public:

  // uint64 leaderSceneId = 5;
  void clear_leadersceneid();
  uint64_t leadersceneid() const;
  void set_leadersceneid(uint64_t value);
  private:
  uint64_t _internal_leadersceneid() const;
  void _internal_set_leadersceneid(uint64_t value);
  public:

  // uint32 fightPoint = 6;
  void clear_fightpoint();
  uint32_t fightpoint() const;
  void set_fightpoint(uint32_t value);
  private:
  uint32_t _internal_fightpoint() const;
  void _internal_set_fightpoint(uint32_t value);
  public:

  // uint32 chatFont = 10;
  void clear_chatfont();
  uint32_t chatfont() const;
  void set_chatfont(uint32_t value);
  private:
  uint32_t _internal_chatfont() const;
  void _internal_set_chatfont(uint32_t value);
  public:

  // uint32 chatFrame = 11;
  void clear_chatframe();
  uint32_t chatframe() const;
  void set_chatframe(uint32_t value);
  private:
  uint32_t _internal_chatframe() const;
  void _internal_set_chatframe(uint32_t value);
  public:

  // uint32 loginTime = 12;
  void clear_logintime();
  uint32_t logintime() const;
  void set_logintime(uint32_t value);
  private:
  uint32_t _internal_logintime() const;
  void _internal_set_logintime(uint32_t value);
  public:

  // uint32 logoutTime = 13;
  void clear_logouttime();
  uint32_t logouttime() const;
  void set_logouttime(uint32_t value);
  private:
  uint32_t _internal_logouttime() const;
  void _internal_set_logouttime(uint32_t value);
  public:

  // uint32 offlineTime = 14;
  void clear_offlinetime();
  uint32_t offlinetime() const;
  void set_offlinetime(uint32_t value);
  private:
  uint32_t _internal_offlinetime() const;
  void _internal_set_offlinetime(uint32_t value);
  public:

  // uint32 onlineTime = 15;
  void clear_onlinetime();
  uint32_t onlinetime() const;
  void set_onlinetime(uint32_t value);
  private:
  uint32_t _internal_onlinetime() const;
  void _internal_set_onlinetime(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.RoleExtend1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr familyname_;
  ::common::ModelPartList* mplist_;
  ::common::ModuleViewFashion* fashion_;
  ::common::EquipView* mainhand_;
  ::common::EquipView* offhand_;
  uint64_t teamid_;
  uint64_t familyid_;
  uint64_t leadersceneid_;
  uint32_t fightpoint_;
  uint32_t chatfont_;
  uint32_t chatframe_;
  uint32_t logintime_;
  uint32_t logouttime_;
  uint32_t offlinetime_;
  uint32_t onlinetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class RoleExtend2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.RoleExtend2) */ {
 public:
  inline RoleExtend2() : RoleExtend2(nullptr) {}
  ~RoleExtend2() override;
  explicit PROTOBUF_CONSTEXPR RoleExtend2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleExtend2(const RoleExtend2& from);
  RoleExtend2(RoleExtend2&& from) noexcept
    : RoleExtend2() {
    *this = ::std::move(from);
  }

  inline RoleExtend2& operator=(const RoleExtend2& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleExtend2& operator=(RoleExtend2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleExtend2& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleExtend2* internal_default_instance() {
    return reinterpret_cast<const RoleExtend2*>(
               &_RoleExtend2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RoleExtend2& a, RoleExtend2& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleExtend2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleExtend2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleExtend2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleExtend2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleExtend2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoleExtend2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleExtend2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.RoleExtend2";
  }
  protected:
  explicit RoleExtend2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneIdFieldNumber = 1,
    kCposFieldNumber = 2,
  };
  // .common.ClientSceneId sceneId = 1;
  bool has_sceneid() const;
  private:
  bool _internal_has_sceneid() const;
  public:
  void clear_sceneid();
  const ::common::ClientSceneId& sceneid() const;
  PROTOBUF_NODISCARD ::common::ClientSceneId* release_sceneid();
  ::common::ClientSceneId* mutable_sceneid();
  void set_allocated_sceneid(::common::ClientSceneId* sceneid);
  private:
  const ::common::ClientSceneId& _internal_sceneid() const;
  ::common::ClientSceneId* _internal_mutable_sceneid();
  public:
  void unsafe_arena_set_allocated_sceneid(
      ::common::ClientSceneId* sceneid);
  ::common::ClientSceneId* unsafe_arena_release_sceneid();

  // .common.ClientPos cpos = 2;
  bool has_cpos() const;
  private:
  bool _internal_has_cpos() const;
  public:
  void clear_cpos();
  const ::common::ClientPos& cpos() const;
  PROTOBUF_NODISCARD ::common::ClientPos* release_cpos();
  ::common::ClientPos* mutable_cpos();
  void set_allocated_cpos(::common::ClientPos* cpos);
  private:
  const ::common::ClientPos& _internal_cpos() const;
  ::common::ClientPos* _internal_mutable_cpos();
  public:
  void unsafe_arena_set_allocated_cpos(
      ::common::ClientPos* cpos);
  ::common::ClientPos* unsafe_arena_release_cpos();

  // @@protoc_insertion_point(class_scope:common.RoleExtend2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::ClientSceneId* sceneid_;
  ::common::ClientPos* cpos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class RoleExtend3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.RoleExtend3) */ {
 public:
  inline RoleExtend3() : RoleExtend3(nullptr) {}
  ~RoleExtend3() override;
  explicit PROTOBUF_CONSTEXPR RoleExtend3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleExtend3(const RoleExtend3& from);
  RoleExtend3(RoleExtend3&& from) noexcept
    : RoleExtend3() {
    *this = ::std::move(from);
  }

  inline RoleExtend3& operator=(const RoleExtend3& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleExtend3& operator=(RoleExtend3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleExtend3& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleExtend3* internal_default_instance() {
    return reinterpret_cast<const RoleExtend3*>(
               &_RoleExtend3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RoleExtend3& a, RoleExtend3& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleExtend3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleExtend3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleExtend3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleExtend3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleExtend3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoleExtend3& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleExtend3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.RoleExtend3";
  }
  protected:
  explicit RoleExtend3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHpFieldNumber = 1,
    kMaxHpFieldNumber = 2,
    kMpFieldNumber = 3,
    kMaxMpFieldNumber = 4,
  };
  // uint32 hp = 1;
  void clear_hp();
  uint32_t hp() const;
  void set_hp(uint32_t value);
  private:
  uint32_t _internal_hp() const;
  void _internal_set_hp(uint32_t value);
  public:

  // uint32 maxHp = 2;
  void clear_maxhp();
  uint32_t maxhp() const;
  void set_maxhp(uint32_t value);
  private:
  uint32_t _internal_maxhp() const;
  void _internal_set_maxhp(uint32_t value);
  public:

  // uint32 mp = 3;
  void clear_mp();
  uint32_t mp() const;
  void set_mp(uint32_t value);
  private:
  uint32_t _internal_mp() const;
  void _internal_set_mp(uint32_t value);
  public:

  // uint32 maxMp = 4;
  void clear_maxmp();
  uint32_t maxmp() const;
  void set_maxmp(uint32_t value);
  private:
  uint32_t _internal_maxmp() const;
  void _internal_set_maxmp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.RoleExtend3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t hp_;
  uint32_t maxhp_;
  uint32_t mp_;
  uint32_t maxmp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class RoleVoteState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.RoleVoteState) */ {
 public:
  inline RoleVoteState() : RoleVoteState(nullptr) {}
  ~RoleVoteState() override;
  explicit PROTOBUF_CONSTEXPR RoleVoteState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleVoteState(const RoleVoteState& from);
  RoleVoteState(RoleVoteState&& from) noexcept
    : RoleVoteState() {
    *this = ::std::move(from);
  }

  inline RoleVoteState& operator=(const RoleVoteState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleVoteState& operator=(RoleVoteState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleVoteState& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleVoteState* internal_default_instance() {
    return reinterpret_cast<const RoleVoteState*>(
               &_RoleVoteState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(RoleVoteState& a, RoleVoteState& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleVoteState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleVoteState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleVoteState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleVoteState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleVoteState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoleVoteState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleVoteState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.RoleVoteState";
  }
  protected:
  explicit RoleVoteState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // uint64 roleId = 1;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // uint32 state = 2;
  void clear_state();
  uint32_t state() const;
  void set_state(uint32_t value);
  private:
  uint32_t _internal_state() const;
  void _internal_set_state(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.RoleVoteState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t roleid_;
  uint32_t state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class RoleVoteStateList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.RoleVoteStateList) */ {
 public:
  inline RoleVoteStateList() : RoleVoteStateList(nullptr) {}
  ~RoleVoteStateList() override;
  explicit PROTOBUF_CONSTEXPR RoleVoteStateList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleVoteStateList(const RoleVoteStateList& from);
  RoleVoteStateList(RoleVoteStateList&& from) noexcept
    : RoleVoteStateList() {
    *this = ::std::move(from);
  }

  inline RoleVoteStateList& operator=(const RoleVoteStateList& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleVoteStateList& operator=(RoleVoteStateList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleVoteStateList& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleVoteStateList* internal_default_instance() {
    return reinterpret_cast<const RoleVoteStateList*>(
               &_RoleVoteStateList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(RoleVoteStateList& a, RoleVoteStateList& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleVoteStateList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleVoteStateList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleVoteStateList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleVoteStateList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleVoteStateList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoleVoteStateList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleVoteStateList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.RoleVoteStateList";
  }
  protected:
  explicit RoleVoteStateList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 1,
  };
  // repeated .common.RoleVoteState roles = 1;
  int roles_size() const;
  private:
  int _internal_roles_size() const;
  public:
  void clear_roles();
  ::common::RoleVoteState* mutable_roles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::RoleVoteState >*
      mutable_roles();
  private:
  const ::common::RoleVoteState& _internal_roles(int index) const;
  ::common::RoleVoteState* _internal_add_roles();
  public:
  const ::common::RoleVoteState& roles(int index) const;
  ::common::RoleVoteState* add_roles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::RoleVoteState >&
      roles() const;

  // @@protoc_insertion_point(class_scope:common.RoleVoteStateList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::RoleVoteState > roles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ModelPart

// uint32 partId = 1;
inline void ModelPart::clear_partid() {
  partid_ = 0u;
}
inline uint32_t ModelPart::_internal_partid() const {
  return partid_;
}
inline uint32_t ModelPart::partid() const {
  // @@protoc_insertion_point(field_get:common.ModelPart.partId)
  return _internal_partid();
}
inline void ModelPart::_internal_set_partid(uint32_t value) {
  
  partid_ = value;
}
inline void ModelPart::set_partid(uint32_t value) {
  _internal_set_partid(value);
  // @@protoc_insertion_point(field_set:common.ModelPart.partId)
}

// uint32 partVal = 2;
inline void ModelPart::clear_partval() {
  partval_ = 0u;
}
inline uint32_t ModelPart::_internal_partval() const {
  return partval_;
}
inline uint32_t ModelPart::partval() const {
  // @@protoc_insertion_point(field_get:common.ModelPart.partVal)
  return _internal_partval();
}
inline void ModelPart::_internal_set_partval(uint32_t value) {
  
  partval_ = value;
}
inline void ModelPart::set_partval(uint32_t value) {
  _internal_set_partval(value);
  // @@protoc_insertion_point(field_set:common.ModelPart.partVal)
}

// -------------------------------------------------------------------

// ModelPartList

// repeated .common.ModelPart parts = 1;
inline int ModelPartList::_internal_parts_size() const {
  return parts_.size();
}
inline int ModelPartList::parts_size() const {
  return _internal_parts_size();
}
inline void ModelPartList::clear_parts() {
  parts_.Clear();
}
inline ::common::ModelPart* ModelPartList::mutable_parts(int index) {
  // @@protoc_insertion_point(field_mutable:common.ModelPartList.parts)
  return parts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ModelPart >*
ModelPartList::mutable_parts() {
  // @@protoc_insertion_point(field_mutable_list:common.ModelPartList.parts)
  return &parts_;
}
inline const ::common::ModelPart& ModelPartList::_internal_parts(int index) const {
  return parts_.Get(index);
}
inline const ::common::ModelPart& ModelPartList::parts(int index) const {
  // @@protoc_insertion_point(field_get:common.ModelPartList.parts)
  return _internal_parts(index);
}
inline ::common::ModelPart* ModelPartList::_internal_add_parts() {
  return parts_.Add();
}
inline ::common::ModelPart* ModelPartList::add_parts() {
  ::common::ModelPart* _add = _internal_add_parts();
  // @@protoc_insertion_point(field_add:common.ModelPartList.parts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ModelPart >&
ModelPartList::parts() const {
  // @@protoc_insertion_point(field_list:common.ModelPartList.parts)
  return parts_;
}

// -------------------------------------------------------------------

// OneFashionStain

// uint32 part = 1;
inline void OneFashionStain::clear_part() {
  part_ = 0u;
}
inline uint32_t OneFashionStain::_internal_part() const {
  return part_;
}
inline uint32_t OneFashionStain::part() const {
  // @@protoc_insertion_point(field_get:common.OneFashionStain.part)
  return _internal_part();
}
inline void OneFashionStain::_internal_set_part(uint32_t value) {
  
  part_ = value;
}
inline void OneFashionStain::set_part(uint32_t value) {
  _internal_set_part(value);
  // @@protoc_insertion_point(field_set:common.OneFashionStain.part)
}

// uint32 color = 2;
inline void OneFashionStain::clear_color() {
  color_ = 0u;
}
inline uint32_t OneFashionStain::_internal_color() const {
  return color_;
}
inline uint32_t OneFashionStain::color() const {
  // @@protoc_insertion_point(field_get:common.OneFashionStain.color)
  return _internal_color();
}
inline void OneFashionStain::_internal_set_color(uint32_t value) {
  
  color_ = value;
}
inline void OneFashionStain::set_color(uint32_t value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:common.OneFashionStain.color)
}

// -------------------------------------------------------------------

// FashionStain

// repeated .common.OneFashionStain onestain = 1;
inline int FashionStain::_internal_onestain_size() const {
  return onestain_.size();
}
inline int FashionStain::onestain_size() const {
  return _internal_onestain_size();
}
inline void FashionStain::clear_onestain() {
  onestain_.Clear();
}
inline ::common::OneFashionStain* FashionStain::mutable_onestain(int index) {
  // @@protoc_insertion_point(field_mutable:common.FashionStain.onestain)
  return onestain_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::OneFashionStain >*
FashionStain::mutable_onestain() {
  // @@protoc_insertion_point(field_mutable_list:common.FashionStain.onestain)
  return &onestain_;
}
inline const ::common::OneFashionStain& FashionStain::_internal_onestain(int index) const {
  return onestain_.Get(index);
}
inline const ::common::OneFashionStain& FashionStain::onestain(int index) const {
  // @@protoc_insertion_point(field_get:common.FashionStain.onestain)
  return _internal_onestain(index);
}
inline ::common::OneFashionStain* FashionStain::_internal_add_onestain() {
  return onestain_.Add();
}
inline ::common::OneFashionStain* FashionStain::add_onestain() {
  ::common::OneFashionStain* _add = _internal_add_onestain();
  // @@protoc_insertion_point(field_add:common.FashionStain.onestain)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::OneFashionStain >&
FashionStain::onestain() const {
  // @@protoc_insertion_point(field_list:common.FashionStain.onestain)
  return onestain_;
}

// -------------------------------------------------------------------

// FashionView

// uint32 current = 1;
inline void FashionView::clear_current() {
  current_ = 0u;
}
inline uint32_t FashionView::_internal_current() const {
  return current_;
}
inline uint32_t FashionView::current() const {
  // @@protoc_insertion_point(field_get:common.FashionView.current)
  return _internal_current();
}
inline void FashionView::_internal_set_current(uint32_t value) {
  
  current_ = value;
}
inline void FashionView::set_current(uint32_t value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:common.FashionView.current)
}

// .common.FashionStain stain = 2;
inline bool FashionView::_internal_has_stain() const {
  return this != internal_default_instance() && stain_ != nullptr;
}
inline bool FashionView::has_stain() const {
  return _internal_has_stain();
}
inline void FashionView::clear_stain() {
  if (GetArenaForAllocation() == nullptr && stain_ != nullptr) {
    delete stain_;
  }
  stain_ = nullptr;
}
inline const ::common::FashionStain& FashionView::_internal_stain() const {
  const ::common::FashionStain* p = stain_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::FashionStain&>(
      ::common::_FashionStain_default_instance_);
}
inline const ::common::FashionStain& FashionView::stain() const {
  // @@protoc_insertion_point(field_get:common.FashionView.stain)
  return _internal_stain();
}
inline void FashionView::unsafe_arena_set_allocated_stain(
    ::common::FashionStain* stain) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stain_);
  }
  stain_ = stain;
  if (stain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.FashionView.stain)
}
inline ::common::FashionStain* FashionView::release_stain() {
  
  ::common::FashionStain* temp = stain_;
  stain_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::FashionStain* FashionView::unsafe_arena_release_stain() {
  // @@protoc_insertion_point(field_release:common.FashionView.stain)
  
  ::common::FashionStain* temp = stain_;
  stain_ = nullptr;
  return temp;
}
inline ::common::FashionStain* FashionView::_internal_mutable_stain() {
  
  if (stain_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::FashionStain>(GetArenaForAllocation());
    stain_ = p;
  }
  return stain_;
}
inline ::common::FashionStain* FashionView::mutable_stain() {
  ::common::FashionStain* _msg = _internal_mutable_stain();
  // @@protoc_insertion_point(field_mutable:common.FashionView.stain)
  return _msg;
}
inline void FashionView::set_allocated_stain(::common::FashionStain* stain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stain_;
  }
  if (stain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stain);
    if (message_arena != submessage_arena) {
      stain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stain, submessage_arena);
    }
    
  } else {
    
  }
  stain_ = stain;
  // @@protoc_insertion_point(field_set_allocated:common.FashionView.stain)
}

// -------------------------------------------------------------------

// ModuleViewFashion

// .common.FashionView head = 1;
inline bool ModuleViewFashion::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool ModuleViewFashion::has_head() const {
  return _internal_has_head();
}
inline void ModuleViewFashion::clear_head() {
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
inline const ::common::FashionView& ModuleViewFashion::_internal_head() const {
  const ::common::FashionView* p = head_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::FashionView&>(
      ::common::_FashionView_default_instance_);
}
inline const ::common::FashionView& ModuleViewFashion::head() const {
  // @@protoc_insertion_point(field_get:common.ModuleViewFashion.head)
  return _internal_head();
}
inline void ModuleViewFashion::unsafe_arena_set_allocated_head(
    ::common::FashionView* head) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ModuleViewFashion.head)
}
inline ::common::FashionView* ModuleViewFashion::release_head() {
  
  ::common::FashionView* temp = head_;
  head_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::FashionView* ModuleViewFashion::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:common.ModuleViewFashion.head)
  
  ::common::FashionView* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::common::FashionView* ModuleViewFashion::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::FashionView>(GetArenaForAllocation());
    head_ = p;
  }
  return head_;
}
inline ::common::FashionView* ModuleViewFashion::mutable_head() {
  ::common::FashionView* _msg = _internal_mutable_head();
  // @@protoc_insertion_point(field_mutable:common.ModuleViewFashion.head)
  return _msg;
}
inline void ModuleViewFashion::set_allocated_head(::common::FashionView* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete head_;
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(head);
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:common.ModuleViewFashion.head)
}

// .common.FashionView face = 2;
inline bool ModuleViewFashion::_internal_has_face() const {
  return this != internal_default_instance() && face_ != nullptr;
}
inline bool ModuleViewFashion::has_face() const {
  return _internal_has_face();
}
inline void ModuleViewFashion::clear_face() {
  if (GetArenaForAllocation() == nullptr && face_ != nullptr) {
    delete face_;
  }
  face_ = nullptr;
}
inline const ::common::FashionView& ModuleViewFashion::_internal_face() const {
  const ::common::FashionView* p = face_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::FashionView&>(
      ::common::_FashionView_default_instance_);
}
inline const ::common::FashionView& ModuleViewFashion::face() const {
  // @@protoc_insertion_point(field_get:common.ModuleViewFashion.face)
  return _internal_face();
}
inline void ModuleViewFashion::unsafe_arena_set_allocated_face(
    ::common::FashionView* face) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(face_);
  }
  face_ = face;
  if (face) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ModuleViewFashion.face)
}
inline ::common::FashionView* ModuleViewFashion::release_face() {
  
  ::common::FashionView* temp = face_;
  face_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::FashionView* ModuleViewFashion::unsafe_arena_release_face() {
  // @@protoc_insertion_point(field_release:common.ModuleViewFashion.face)
  
  ::common::FashionView* temp = face_;
  face_ = nullptr;
  return temp;
}
inline ::common::FashionView* ModuleViewFashion::_internal_mutable_face() {
  
  if (face_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::FashionView>(GetArenaForAllocation());
    face_ = p;
  }
  return face_;
}
inline ::common::FashionView* ModuleViewFashion::mutable_face() {
  ::common::FashionView* _msg = _internal_mutable_face();
  // @@protoc_insertion_point(field_mutable:common.ModuleViewFashion.face)
  return _msg;
}
inline void ModuleViewFashion::set_allocated_face(::common::FashionView* face) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete face_;
  }
  if (face) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(face);
    if (message_arena != submessage_arena) {
      face = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, face, submessage_arena);
    }
    
  } else {
    
  }
  face_ = face;
  // @@protoc_insertion_point(field_set_allocated:common.ModuleViewFashion.face)
}

// .common.FashionView mouth = 3;
inline bool ModuleViewFashion::_internal_has_mouth() const {
  return this != internal_default_instance() && mouth_ != nullptr;
}
inline bool ModuleViewFashion::has_mouth() const {
  return _internal_has_mouth();
}
inline void ModuleViewFashion::clear_mouth() {
  if (GetArenaForAllocation() == nullptr && mouth_ != nullptr) {
    delete mouth_;
  }
  mouth_ = nullptr;
}
inline const ::common::FashionView& ModuleViewFashion::_internal_mouth() const {
  const ::common::FashionView* p = mouth_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::FashionView&>(
      ::common::_FashionView_default_instance_);
}
inline const ::common::FashionView& ModuleViewFashion::mouth() const {
  // @@protoc_insertion_point(field_get:common.ModuleViewFashion.mouth)
  return _internal_mouth();
}
inline void ModuleViewFashion::unsafe_arena_set_allocated_mouth(
    ::common::FashionView* mouth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mouth_);
  }
  mouth_ = mouth;
  if (mouth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ModuleViewFashion.mouth)
}
inline ::common::FashionView* ModuleViewFashion::release_mouth() {
  
  ::common::FashionView* temp = mouth_;
  mouth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::FashionView* ModuleViewFashion::unsafe_arena_release_mouth() {
  // @@protoc_insertion_point(field_release:common.ModuleViewFashion.mouth)
  
  ::common::FashionView* temp = mouth_;
  mouth_ = nullptr;
  return temp;
}
inline ::common::FashionView* ModuleViewFashion::_internal_mutable_mouth() {
  
  if (mouth_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::FashionView>(GetArenaForAllocation());
    mouth_ = p;
  }
  return mouth_;
}
inline ::common::FashionView* ModuleViewFashion::mutable_mouth() {
  ::common::FashionView* _msg = _internal_mutable_mouth();
  // @@protoc_insertion_point(field_mutable:common.ModuleViewFashion.mouth)
  return _msg;
}
inline void ModuleViewFashion::set_allocated_mouth(::common::FashionView* mouth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mouth_;
  }
  if (mouth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mouth);
    if (message_arena != submessage_arena) {
      mouth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mouth, submessage_arena);
    }
    
  } else {
    
  }
  mouth_ = mouth;
  // @@protoc_insertion_point(field_set_allocated:common.ModuleViewFashion.mouth)
}

// .common.FashionView cloth = 4;
inline bool ModuleViewFashion::_internal_has_cloth() const {
  return this != internal_default_instance() && cloth_ != nullptr;
}
inline bool ModuleViewFashion::has_cloth() const {
  return _internal_has_cloth();
}
inline void ModuleViewFashion::clear_cloth() {
  if (GetArenaForAllocation() == nullptr && cloth_ != nullptr) {
    delete cloth_;
  }
  cloth_ = nullptr;
}
inline const ::common::FashionView& ModuleViewFashion::_internal_cloth() const {
  const ::common::FashionView* p = cloth_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::FashionView&>(
      ::common::_FashionView_default_instance_);
}
inline const ::common::FashionView& ModuleViewFashion::cloth() const {
  // @@protoc_insertion_point(field_get:common.ModuleViewFashion.cloth)
  return _internal_cloth();
}
inline void ModuleViewFashion::unsafe_arena_set_allocated_cloth(
    ::common::FashionView* cloth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cloth_);
  }
  cloth_ = cloth;
  if (cloth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ModuleViewFashion.cloth)
}
inline ::common::FashionView* ModuleViewFashion::release_cloth() {
  
  ::common::FashionView* temp = cloth_;
  cloth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::FashionView* ModuleViewFashion::unsafe_arena_release_cloth() {
  // @@protoc_insertion_point(field_release:common.ModuleViewFashion.cloth)
  
  ::common::FashionView* temp = cloth_;
  cloth_ = nullptr;
  return temp;
}
inline ::common::FashionView* ModuleViewFashion::_internal_mutable_cloth() {
  
  if (cloth_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::FashionView>(GetArenaForAllocation());
    cloth_ = p;
  }
  return cloth_;
}
inline ::common::FashionView* ModuleViewFashion::mutable_cloth() {
  ::common::FashionView* _msg = _internal_mutable_cloth();
  // @@protoc_insertion_point(field_mutable:common.ModuleViewFashion.cloth)
  return _msg;
}
inline void ModuleViewFashion::set_allocated_cloth(::common::FashionView* cloth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cloth_;
  }
  if (cloth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cloth);
    if (message_arena != submessage_arena) {
      cloth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cloth, submessage_arena);
    }
    
  } else {
    
  }
  cloth_ = cloth;
  // @@protoc_insertion_point(field_set_allocated:common.ModuleViewFashion.cloth)
}

// .common.FashionView back = 5;
inline bool ModuleViewFashion::_internal_has_back() const {
  return this != internal_default_instance() && back_ != nullptr;
}
inline bool ModuleViewFashion::has_back() const {
  return _internal_has_back();
}
inline void ModuleViewFashion::clear_back() {
  if (GetArenaForAllocation() == nullptr && back_ != nullptr) {
    delete back_;
  }
  back_ = nullptr;
}
inline const ::common::FashionView& ModuleViewFashion::_internal_back() const {
  const ::common::FashionView* p = back_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::FashionView&>(
      ::common::_FashionView_default_instance_);
}
inline const ::common::FashionView& ModuleViewFashion::back() const {
  // @@protoc_insertion_point(field_get:common.ModuleViewFashion.back)
  return _internal_back();
}
inline void ModuleViewFashion::unsafe_arena_set_allocated_back(
    ::common::FashionView* back) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(back_);
  }
  back_ = back;
  if (back) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ModuleViewFashion.back)
}
inline ::common::FashionView* ModuleViewFashion::release_back() {
  
  ::common::FashionView* temp = back_;
  back_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::FashionView* ModuleViewFashion::unsafe_arena_release_back() {
  // @@protoc_insertion_point(field_release:common.ModuleViewFashion.back)
  
  ::common::FashionView* temp = back_;
  back_ = nullptr;
  return temp;
}
inline ::common::FashionView* ModuleViewFashion::_internal_mutable_back() {
  
  if (back_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::FashionView>(GetArenaForAllocation());
    back_ = p;
  }
  return back_;
}
inline ::common::FashionView* ModuleViewFashion::mutable_back() {
  ::common::FashionView* _msg = _internal_mutable_back();
  // @@protoc_insertion_point(field_mutable:common.ModuleViewFashion.back)
  return _msg;
}
inline void ModuleViewFashion::set_allocated_back(::common::FashionView* back) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete back_;
  }
  if (back) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(back);
    if (message_arena != submessage_arena) {
      back = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, back, submessage_arena);
    }
    
  } else {
    
  }
  back_ = back;
  // @@protoc_insertion_point(field_set_allocated:common.ModuleViewFashion.back)
}

// .common.FashionView tail = 6;
inline bool ModuleViewFashion::_internal_has_tail() const {
  return this != internal_default_instance() && tail_ != nullptr;
}
inline bool ModuleViewFashion::has_tail() const {
  return _internal_has_tail();
}
inline void ModuleViewFashion::clear_tail() {
  if (GetArenaForAllocation() == nullptr && tail_ != nullptr) {
    delete tail_;
  }
  tail_ = nullptr;
}
inline const ::common::FashionView& ModuleViewFashion::_internal_tail() const {
  const ::common::FashionView* p = tail_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::FashionView&>(
      ::common::_FashionView_default_instance_);
}
inline const ::common::FashionView& ModuleViewFashion::tail() const {
  // @@protoc_insertion_point(field_get:common.ModuleViewFashion.tail)
  return _internal_tail();
}
inline void ModuleViewFashion::unsafe_arena_set_allocated_tail(
    ::common::FashionView* tail) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tail_);
  }
  tail_ = tail;
  if (tail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ModuleViewFashion.tail)
}
inline ::common::FashionView* ModuleViewFashion::release_tail() {
  
  ::common::FashionView* temp = tail_;
  tail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::FashionView* ModuleViewFashion::unsafe_arena_release_tail() {
  // @@protoc_insertion_point(field_release:common.ModuleViewFashion.tail)
  
  ::common::FashionView* temp = tail_;
  tail_ = nullptr;
  return temp;
}
inline ::common::FashionView* ModuleViewFashion::_internal_mutable_tail() {
  
  if (tail_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::FashionView>(GetArenaForAllocation());
    tail_ = p;
  }
  return tail_;
}
inline ::common::FashionView* ModuleViewFashion::mutable_tail() {
  ::common::FashionView* _msg = _internal_mutable_tail();
  // @@protoc_insertion_point(field_mutable:common.ModuleViewFashion.tail)
  return _msg;
}
inline void ModuleViewFashion::set_allocated_tail(::common::FashionView* tail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tail_;
  }
  if (tail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tail);
    if (message_arena != submessage_arena) {
      tail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tail, submessage_arena);
    }
    
  } else {
    
  }
  tail_ = tail;
  // @@protoc_insertion_point(field_set_allocated:common.ModuleViewFashion.tail)
}

// .common.FashionView hair = 7;
inline bool ModuleViewFashion::_internal_has_hair() const {
  return this != internal_default_instance() && hair_ != nullptr;
}
inline bool ModuleViewFashion::has_hair() const {
  return _internal_has_hair();
}
inline void ModuleViewFashion::clear_hair() {
  if (GetArenaForAllocation() == nullptr && hair_ != nullptr) {
    delete hair_;
  }
  hair_ = nullptr;
}
inline const ::common::FashionView& ModuleViewFashion::_internal_hair() const {
  const ::common::FashionView* p = hair_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::FashionView&>(
      ::common::_FashionView_default_instance_);
}
inline const ::common::FashionView& ModuleViewFashion::hair() const {
  // @@protoc_insertion_point(field_get:common.ModuleViewFashion.hair)
  return _internal_hair();
}
inline void ModuleViewFashion::unsafe_arena_set_allocated_hair(
    ::common::FashionView* hair) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hair_);
  }
  hair_ = hair;
  if (hair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ModuleViewFashion.hair)
}
inline ::common::FashionView* ModuleViewFashion::release_hair() {
  
  ::common::FashionView* temp = hair_;
  hair_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::FashionView* ModuleViewFashion::unsafe_arena_release_hair() {
  // @@protoc_insertion_point(field_release:common.ModuleViewFashion.hair)
  
  ::common::FashionView* temp = hair_;
  hair_ = nullptr;
  return temp;
}
inline ::common::FashionView* ModuleViewFashion::_internal_mutable_hair() {
  
  if (hair_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::FashionView>(GetArenaForAllocation());
    hair_ = p;
  }
  return hair_;
}
inline ::common::FashionView* ModuleViewFashion::mutable_hair() {
  ::common::FashionView* _msg = _internal_mutable_hair();
  // @@protoc_insertion_point(field_mutable:common.ModuleViewFashion.hair)
  return _msg;
}
inline void ModuleViewFashion::set_allocated_hair(::common::FashionView* hair) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete hair_;
  }
  if (hair) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hair);
    if (message_arena != submessage_arena) {
      hair = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hair, submessage_arena);
    }
    
  } else {
    
  }
  hair_ = hair;
  // @@protoc_insertion_point(field_set_allocated:common.ModuleViewFashion.hair)
}

// .common.FashionView weapon = 8;
inline bool ModuleViewFashion::_internal_has_weapon() const {
  return this != internal_default_instance() && weapon_ != nullptr;
}
inline bool ModuleViewFashion::has_weapon() const {
  return _internal_has_weapon();
}
inline void ModuleViewFashion::clear_weapon() {
  if (GetArenaForAllocation() == nullptr && weapon_ != nullptr) {
    delete weapon_;
  }
  weapon_ = nullptr;
}
inline const ::common::FashionView& ModuleViewFashion::_internal_weapon() const {
  const ::common::FashionView* p = weapon_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::FashionView&>(
      ::common::_FashionView_default_instance_);
}
inline const ::common::FashionView& ModuleViewFashion::weapon() const {
  // @@protoc_insertion_point(field_get:common.ModuleViewFashion.weapon)
  return _internal_weapon();
}
inline void ModuleViewFashion::unsafe_arena_set_allocated_weapon(
    ::common::FashionView* weapon) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weapon_);
  }
  weapon_ = weapon;
  if (weapon) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ModuleViewFashion.weapon)
}
inline ::common::FashionView* ModuleViewFashion::release_weapon() {
  
  ::common::FashionView* temp = weapon_;
  weapon_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::FashionView* ModuleViewFashion::unsafe_arena_release_weapon() {
  // @@protoc_insertion_point(field_release:common.ModuleViewFashion.weapon)
  
  ::common::FashionView* temp = weapon_;
  weapon_ = nullptr;
  return temp;
}
inline ::common::FashionView* ModuleViewFashion::_internal_mutable_weapon() {
  
  if (weapon_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::FashionView>(GetArenaForAllocation());
    weapon_ = p;
  }
  return weapon_;
}
inline ::common::FashionView* ModuleViewFashion::mutable_weapon() {
  ::common::FashionView* _msg = _internal_mutable_weapon();
  // @@protoc_insertion_point(field_mutable:common.ModuleViewFashion.weapon)
  return _msg;
}
inline void ModuleViewFashion::set_allocated_weapon(::common::FashionView* weapon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete weapon_;
  }
  if (weapon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(weapon);
    if (message_arena != submessage_arena) {
      weapon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weapon, submessage_arena);
    }
    
  } else {
    
  }
  weapon_ = weapon;
  // @@protoc_insertion_point(field_set_allocated:common.ModuleViewFashion.weapon)
}

// -------------------------------------------------------------------

// ClientSceneId

// uint32 mapId = 1;
inline void ClientSceneId::clear_mapid() {
  mapid_ = 0u;
}
inline uint32_t ClientSceneId::_internal_mapid() const {
  return mapid_;
}
inline uint32_t ClientSceneId::mapid() const {
  // @@protoc_insertion_point(field_get:common.ClientSceneId.mapId)
  return _internal_mapid();
}
inline void ClientSceneId::_internal_set_mapid(uint32_t value) {
  
  mapid_ = value;
}
inline void ClientSceneId::set_mapid(uint32_t value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:common.ClientSceneId.mapId)
}

// uint32 procType = 2;
inline void ClientSceneId::clear_proctype() {
  proctype_ = 0u;
}
inline uint32_t ClientSceneId::_internal_proctype() const {
  return proctype_;
}
inline uint32_t ClientSceneId::proctype() const {
  // @@protoc_insertion_point(field_get:common.ClientSceneId.procType)
  return _internal_proctype();
}
inline void ClientSceneId::_internal_set_proctype(uint32_t value) {
  
  proctype_ = value;
}
inline void ClientSceneId::set_proctype(uint32_t value) {
  _internal_set_proctype(value);
  // @@protoc_insertion_point(field_set:common.ClientSceneId.procType)
}

// uint32 procParam = 3;
inline void ClientSceneId::clear_procparam() {
  procparam_ = 0u;
}
inline uint32_t ClientSceneId::_internal_procparam() const {
  return procparam_;
}
inline uint32_t ClientSceneId::procparam() const {
  // @@protoc_insertion_point(field_get:common.ClientSceneId.procParam)
  return _internal_procparam();
}
inline void ClientSceneId::_internal_set_procparam(uint32_t value) {
  
  procparam_ = value;
}
inline void ClientSceneId::set_procparam(uint32_t value) {
  _internal_set_procparam(value);
  // @@protoc_insertion_point(field_set:common.ClientSceneId.procParam)
}

// -------------------------------------------------------------------

// ClientStaticScene

// uint32 lineId = 1;
inline void ClientStaticScene::clear_lineid() {
  lineid_ = 0u;
}
inline uint32_t ClientStaticScene::_internal_lineid() const {
  return lineid_;
}
inline uint32_t ClientStaticScene::lineid() const {
  // @@protoc_insertion_point(field_get:common.ClientStaticScene.lineId)
  return _internal_lineid();
}
inline void ClientStaticScene::_internal_set_lineid(uint32_t value) {
  
  lineid_ = value;
}
inline void ClientStaticScene::set_lineid(uint32_t value) {
  _internal_set_lineid(value);
  // @@protoc_insertion_point(field_set:common.ClientStaticScene.lineId)
}

// -------------------------------------------------------------------

// ClientCopyScene

// uint32 copyLvId = 1;
inline void ClientCopyScene::clear_copylvid() {
  copylvid_ = 0u;
}
inline uint32_t ClientCopyScene::_internal_copylvid() const {
  return copylvid_;
}
inline uint32_t ClientCopyScene::copylvid() const {
  // @@protoc_insertion_point(field_get:common.ClientCopyScene.copyLvId)
  return _internal_copylvid();
}
inline void ClientCopyScene::_internal_set_copylvid(uint32_t value) {
  
  copylvid_ = value;
}
inline void ClientCopyScene::set_copylvid(uint32_t value) {
  _internal_set_copylvid(value);
  // @@protoc_insertion_point(field_set:common.ClientCopyScene.copyLvId)
}

// uint32 autoId = 2;
inline void ClientCopyScene::clear_autoid() {
  autoid_ = 0u;
}
inline uint32_t ClientCopyScene::_internal_autoid() const {
  return autoid_;
}
inline uint32_t ClientCopyScene::autoid() const {
  // @@protoc_insertion_point(field_get:common.ClientCopyScene.autoId)
  return _internal_autoid();
}
inline void ClientCopyScene::_internal_set_autoid(uint32_t value) {
  
  autoid_ = value;
}
inline void ClientCopyScene::set_autoid(uint32_t value) {
  _internal_set_autoid(value);
  // @@protoc_insertion_point(field_set:common.ClientCopyScene.autoId)
}

// -------------------------------------------------------------------

// ClientPos

// uint32 poxX = 1;
inline void ClientPos::clear_poxx() {
  poxx_ = 0u;
}
inline uint32_t ClientPos::_internal_poxx() const {
  return poxx_;
}
inline uint32_t ClientPos::poxx() const {
  // @@protoc_insertion_point(field_get:common.ClientPos.poxX)
  return _internal_poxx();
}
inline void ClientPos::_internal_set_poxx(uint32_t value) {
  
  poxx_ = value;
}
inline void ClientPos::set_poxx(uint32_t value) {
  _internal_set_poxx(value);
  // @@protoc_insertion_point(field_set:common.ClientPos.poxX)
}

// uint32 posY = 2;
inline void ClientPos::clear_posy() {
  posy_ = 0u;
}
inline uint32_t ClientPos::_internal_posy() const {
  return posy_;
}
inline uint32_t ClientPos::posy() const {
  // @@protoc_insertion_point(field_get:common.ClientPos.posY)
  return _internal_posy();
}
inline void ClientPos::_internal_set_posy(uint32_t value) {
  
  posy_ = value;
}
inline void ClientPos::set_posy(uint32_t value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:common.ClientPos.posY)
}

// uint32 offsetX = 3;
inline void ClientPos::clear_offsetx() {
  offsetx_ = 0u;
}
inline uint32_t ClientPos::_internal_offsetx() const {
  return offsetx_;
}
inline uint32_t ClientPos::offsetx() const {
  // @@protoc_insertion_point(field_get:common.ClientPos.offsetX)
  return _internal_offsetx();
}
inline void ClientPos::_internal_set_offsetx(uint32_t value) {
  
  offsetx_ = value;
}
inline void ClientPos::set_offsetx(uint32_t value) {
  _internal_set_offsetx(value);
  // @@protoc_insertion_point(field_set:common.ClientPos.offsetX)
}

// uint32 offsetY = 4;
inline void ClientPos::clear_offsety() {
  offsety_ = 0u;
}
inline uint32_t ClientPos::_internal_offsety() const {
  return offsety_;
}
inline uint32_t ClientPos::offsety() const {
  // @@protoc_insertion_point(field_get:common.ClientPos.offsetY)
  return _internal_offsety();
}
inline void ClientPos::_internal_set_offsety(uint32_t value) {
  
  offsety_ = value;
}
inline void ClientPos::set_offsety(uint32_t value) {
  _internal_set_offsety(value);
  // @@protoc_insertion_point(field_set:common.ClientPos.offsetY)
}

// -------------------------------------------------------------------

// ClientPosDirect

// .common.ClientPos cpos = 1;
inline bool ClientPosDirect::_internal_has_cpos() const {
  return this != internal_default_instance() && cpos_ != nullptr;
}
inline bool ClientPosDirect::has_cpos() const {
  return _internal_has_cpos();
}
inline void ClientPosDirect::clear_cpos() {
  if (GetArenaForAllocation() == nullptr && cpos_ != nullptr) {
    delete cpos_;
  }
  cpos_ = nullptr;
}
inline const ::common::ClientPos& ClientPosDirect::_internal_cpos() const {
  const ::common::ClientPos* p = cpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ClientPos&>(
      ::common::_ClientPos_default_instance_);
}
inline const ::common::ClientPos& ClientPosDirect::cpos() const {
  // @@protoc_insertion_point(field_get:common.ClientPosDirect.cpos)
  return _internal_cpos();
}
inline void ClientPosDirect::unsafe_arena_set_allocated_cpos(
    ::common::ClientPos* cpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpos_);
  }
  cpos_ = cpos;
  if (cpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ClientPosDirect.cpos)
}
inline ::common::ClientPos* ClientPosDirect::release_cpos() {
  
  ::common::ClientPos* temp = cpos_;
  cpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ClientPos* ClientPosDirect::unsafe_arena_release_cpos() {
  // @@protoc_insertion_point(field_release:common.ClientPosDirect.cpos)
  
  ::common::ClientPos* temp = cpos_;
  cpos_ = nullptr;
  return temp;
}
inline ::common::ClientPos* ClientPosDirect::_internal_mutable_cpos() {
  
  if (cpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ClientPos>(GetArenaForAllocation());
    cpos_ = p;
  }
  return cpos_;
}
inline ::common::ClientPos* ClientPosDirect::mutable_cpos() {
  ::common::ClientPos* _msg = _internal_mutable_cpos();
  // @@protoc_insertion_point(field_mutable:common.ClientPosDirect.cpos)
  return _msg;
}
inline void ClientPosDirect::set_allocated_cpos(::common::ClientPos* cpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cpos_;
  }
  if (cpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cpos);
    if (message_arena != submessage_arena) {
      cpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpos, submessage_arena);
    }
    
  } else {
    
  }
  cpos_ = cpos;
  // @@protoc_insertion_point(field_set_allocated:common.ClientPosDirect.cpos)
}

// uint32 direct = 2;
inline void ClientPosDirect::clear_direct() {
  direct_ = 0u;
}
inline uint32_t ClientPosDirect::_internal_direct() const {
  return direct_;
}
inline uint32_t ClientPosDirect::direct() const {
  // @@protoc_insertion_point(field_get:common.ClientPosDirect.direct)
  return _internal_direct();
}
inline void ClientPosDirect::_internal_set_direct(uint32_t value) {
  
  direct_ = value;
}
inline void ClientPosDirect::set_direct(uint32_t value) {
  _internal_set_direct(value);
  // @@protoc_insertion_point(field_set:common.ClientPosDirect.direct)
}

// -------------------------------------------------------------------

// ClientPosTerminate

// uint64 servertime = 1;
inline void ClientPosTerminate::clear_servertime() {
  servertime_ = uint64_t{0u};
}
inline uint64_t ClientPosTerminate::_internal_servertime() const {
  return servertime_;
}
inline uint64_t ClientPosTerminate::servertime() const {
  // @@protoc_insertion_point(field_get:common.ClientPosTerminate.servertime)
  return _internal_servertime();
}
inline void ClientPosTerminate::_internal_set_servertime(uint64_t value) {
  
  servertime_ = value;
}
inline void ClientPosTerminate::set_servertime(uint64_t value) {
  _internal_set_servertime(value);
  // @@protoc_insertion_point(field_set:common.ClientPosTerminate.servertime)
}

// repeated .common.ClientPos posList = 2;
inline int ClientPosTerminate::_internal_poslist_size() const {
  return poslist_.size();
}
inline int ClientPosTerminate::poslist_size() const {
  return _internal_poslist_size();
}
inline void ClientPosTerminate::clear_poslist() {
  poslist_.Clear();
}
inline ::common::ClientPos* ClientPosTerminate::mutable_poslist(int index) {
  // @@protoc_insertion_point(field_mutable:common.ClientPosTerminate.posList)
  return poslist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ClientPos >*
ClientPosTerminate::mutable_poslist() {
  // @@protoc_insertion_point(field_mutable_list:common.ClientPosTerminate.posList)
  return &poslist_;
}
inline const ::common::ClientPos& ClientPosTerminate::_internal_poslist(int index) const {
  return poslist_.Get(index);
}
inline const ::common::ClientPos& ClientPosTerminate::poslist(int index) const {
  // @@protoc_insertion_point(field_get:common.ClientPosTerminate.posList)
  return _internal_poslist(index);
}
inline ::common::ClientPos* ClientPosTerminate::_internal_add_poslist() {
  return poslist_.Add();
}
inline ::common::ClientPos* ClientPosTerminate::add_poslist() {
  ::common::ClientPos* _add = _internal_add_poslist();
  // @@protoc_insertion_point(field_add:common.ClientPosTerminate.posList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ClientPos >&
ClientPosTerminate::poslist() const {
  // @@protoc_insertion_point(field_list:common.ClientPosTerminate.posList)
  return poslist_;
}

// -------------------------------------------------------------------

// EquipView

// uint32 equipTid = 1;
inline void EquipView::clear_equiptid() {
  equiptid_ = 0u;
}
inline uint32_t EquipView::_internal_equiptid() const {
  return equiptid_;
}
inline uint32_t EquipView::equiptid() const {
  // @@protoc_insertion_point(field_get:common.EquipView.equipTid)
  return _internal_equiptid();
}
inline void EquipView::_internal_set_equiptid(uint32_t value) {
  
  equiptid_ = value;
}
inline void EquipView::set_equiptid(uint32_t value) {
  _internal_set_equiptid(value);
  // @@protoc_insertion_point(field_set:common.EquipView.equipTid)
}

// uint32 strengthLevel = 2;
inline void EquipView::clear_strengthlevel() {
  strengthlevel_ = 0u;
}
inline uint32_t EquipView::_internal_strengthlevel() const {
  return strengthlevel_;
}
inline uint32_t EquipView::strengthlevel() const {
  // @@protoc_insertion_point(field_get:common.EquipView.strengthLevel)
  return _internal_strengthlevel();
}
inline void EquipView::_internal_set_strengthlevel(uint32_t value) {
  
  strengthlevel_ = value;
}
inline void EquipView::set_strengthlevel(uint32_t value) {
  _internal_set_strengthlevel(value);
  // @@protoc_insertion_point(field_set:common.EquipView.strengthLevel)
}

// -------------------------------------------------------------------

// RoleBrief

// uint64 roleId = 1;
inline void RoleBrief::clear_roleid() {
  roleid_ = uint64_t{0u};
}
inline uint64_t RoleBrief::_internal_roleid() const {
  return roleid_;
}
inline uint64_t RoleBrief::roleid() const {
  // @@protoc_insertion_point(field_get:common.RoleBrief.roleId)
  return _internal_roleid();
}
inline void RoleBrief::_internal_set_roleid(uint64_t value) {
  
  roleid_ = value;
}
inline void RoleBrief::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:common.RoleBrief.roleId)
}

// bytes nickname = 2;
inline void RoleBrief::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& RoleBrief::nickname() const {
  // @@protoc_insertion_point(field_get:common.RoleBrief.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleBrief::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.RoleBrief.nickname)
}
inline std::string* RoleBrief::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:common.RoleBrief.nickname)
  return _s;
}
inline const std::string& RoleBrief::_internal_nickname() const {
  return nickname_.Get();
}
inline void RoleBrief::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleBrief::_internal_mutable_nickname() {
  
  return nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleBrief::release_nickname() {
  // @@protoc_insertion_point(field_release:common.RoleBrief.nickname)
  return nickname_.Release();
}
inline void RoleBrief::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nickname_.IsDefault()) {
    nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.RoleBrief.nickname)
}

// uint32 headIcon = 3;
inline void RoleBrief::clear_headicon() {
  headicon_ = 0u;
}
inline uint32_t RoleBrief::_internal_headicon() const {
  return headicon_;
}
inline uint32_t RoleBrief::headicon() const {
  // @@protoc_insertion_point(field_get:common.RoleBrief.headIcon)
  return _internal_headicon();
}
inline void RoleBrief::_internal_set_headicon(uint32_t value) {
  
  headicon_ = value;
}
inline void RoleBrief::set_headicon(uint32_t value) {
  _internal_set_headicon(value);
  // @@protoc_insertion_point(field_set:common.RoleBrief.headIcon)
}

// uint32 headFrame = 4;
inline void RoleBrief::clear_headframe() {
  headframe_ = 0u;
}
inline uint32_t RoleBrief::_internal_headframe() const {
  return headframe_;
}
inline uint32_t RoleBrief::headframe() const {
  // @@protoc_insertion_point(field_get:common.RoleBrief.headFrame)
  return _internal_headframe();
}
inline void RoleBrief::_internal_set_headframe(uint32_t value) {
  
  headframe_ = value;
}
inline void RoleBrief::set_headframe(uint32_t value) {
  _internal_set_headframe(value);
  // @@protoc_insertion_point(field_set:common.RoleBrief.headFrame)
}

// uint32 careerId = 5;
inline void RoleBrief::clear_careerid() {
  careerid_ = 0u;
}
inline uint32_t RoleBrief::_internal_careerid() const {
  return careerid_;
}
inline uint32_t RoleBrief::careerid() const {
  // @@protoc_insertion_point(field_get:common.RoleBrief.careerId)
  return _internal_careerid();
}
inline void RoleBrief::_internal_set_careerid(uint32_t value) {
  
  careerid_ = value;
}
inline void RoleBrief::set_careerid(uint32_t value) {
  _internal_set_careerid(value);
  // @@protoc_insertion_point(field_set:common.RoleBrief.careerId)
}

// uint32 level = 6;
inline void RoleBrief::clear_level() {
  level_ = 0u;
}
inline uint32_t RoleBrief::_internal_level() const {
  return level_;
}
inline uint32_t RoleBrief::level() const {
  // @@protoc_insertion_point(field_get:common.RoleBrief.level)
  return _internal_level();
}
inline void RoleBrief::_internal_set_level(uint32_t value) {
  
  level_ = value;
}
inline void RoleBrief::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:common.RoleBrief.level)
}

// uint32 sex = 7;
inline void RoleBrief::clear_sex() {
  sex_ = 0u;
}
inline uint32_t RoleBrief::_internal_sex() const {
  return sex_;
}
inline uint32_t RoleBrief::sex() const {
  // @@protoc_insertion_point(field_get:common.RoleBrief.sex)
  return _internal_sex();
}
inline void RoleBrief::_internal_set_sex(uint32_t value) {
  
  sex_ = value;
}
inline void RoleBrief::set_sex(uint32_t value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:common.RoleBrief.sex)
}

// uint32 careerLevel = 8;
inline void RoleBrief::clear_careerlevel() {
  careerlevel_ = 0u;
}
inline uint32_t RoleBrief::_internal_careerlevel() const {
  return careerlevel_;
}
inline uint32_t RoleBrief::careerlevel() const {
  // @@protoc_insertion_point(field_get:common.RoleBrief.careerLevel)
  return _internal_careerlevel();
}
inline void RoleBrief::_internal_set_careerlevel(uint32_t value) {
  
  careerlevel_ = value;
}
inline void RoleBrief::set_careerlevel(uint32_t value) {
  _internal_set_careerlevel(value);
  // @@protoc_insertion_point(field_set:common.RoleBrief.careerLevel)
}

// uint32 zoneIdF = 9;
inline void RoleBrief::clear_zoneidf() {
  zoneidf_ = 0u;
}
inline uint32_t RoleBrief::_internal_zoneidf() const {
  return zoneidf_;
}
inline uint32_t RoleBrief::zoneidf() const {
  // @@protoc_insertion_point(field_get:common.RoleBrief.zoneIdF)
  return _internal_zoneidf();
}
inline void RoleBrief::_internal_set_zoneidf(uint32_t value) {
  
  zoneidf_ = value;
}
inline void RoleBrief::set_zoneidf(uint32_t value) {
  _internal_set_zoneidf(value);
  // @@protoc_insertion_point(field_set:common.RoleBrief.zoneIdF)
}

// -------------------------------------------------------------------

// RoleExtend1

// uint64 teamId = 1;
inline void RoleExtend1::clear_teamid() {
  teamid_ = uint64_t{0u};
}
inline uint64_t RoleExtend1::_internal_teamid() const {
  return teamid_;
}
inline uint64_t RoleExtend1::teamid() const {
  // @@protoc_insertion_point(field_get:common.RoleExtend1.teamId)
  return _internal_teamid();
}
inline void RoleExtend1::_internal_set_teamid(uint64_t value) {
  
  teamid_ = value;
}
inline void RoleExtend1::set_teamid(uint64_t value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:common.RoleExtend1.teamId)
}

// uint64 familyId = 2;
inline void RoleExtend1::clear_familyid() {
  familyid_ = uint64_t{0u};
}
inline uint64_t RoleExtend1::_internal_familyid() const {
  return familyid_;
}
inline uint64_t RoleExtend1::familyid() const {
  // @@protoc_insertion_point(field_get:common.RoleExtend1.familyId)
  return _internal_familyid();
}
inline void RoleExtend1::_internal_set_familyid(uint64_t value) {
  
  familyid_ = value;
}
inline void RoleExtend1::set_familyid(uint64_t value) {
  _internal_set_familyid(value);
  // @@protoc_insertion_point(field_set:common.RoleExtend1.familyId)
}

// .common.ModelPartList mpList = 3;
inline bool RoleExtend1::_internal_has_mplist() const {
  return this != internal_default_instance() && mplist_ != nullptr;
}
inline bool RoleExtend1::has_mplist() const {
  return _internal_has_mplist();
}
inline void RoleExtend1::clear_mplist() {
  if (GetArenaForAllocation() == nullptr && mplist_ != nullptr) {
    delete mplist_;
  }
  mplist_ = nullptr;
}
inline const ::common::ModelPartList& RoleExtend1::_internal_mplist() const {
  const ::common::ModelPartList* p = mplist_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ModelPartList&>(
      ::common::_ModelPartList_default_instance_);
}
inline const ::common::ModelPartList& RoleExtend1::mplist() const {
  // @@protoc_insertion_point(field_get:common.RoleExtend1.mpList)
  return _internal_mplist();
}
inline void RoleExtend1::unsafe_arena_set_allocated_mplist(
    ::common::ModelPartList* mplist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mplist_);
  }
  mplist_ = mplist;
  if (mplist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.RoleExtend1.mpList)
}
inline ::common::ModelPartList* RoleExtend1::release_mplist() {
  
  ::common::ModelPartList* temp = mplist_;
  mplist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ModelPartList* RoleExtend1::unsafe_arena_release_mplist() {
  // @@protoc_insertion_point(field_release:common.RoleExtend1.mpList)
  
  ::common::ModelPartList* temp = mplist_;
  mplist_ = nullptr;
  return temp;
}
inline ::common::ModelPartList* RoleExtend1::_internal_mutable_mplist() {
  
  if (mplist_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ModelPartList>(GetArenaForAllocation());
    mplist_ = p;
  }
  return mplist_;
}
inline ::common::ModelPartList* RoleExtend1::mutable_mplist() {
  ::common::ModelPartList* _msg = _internal_mutable_mplist();
  // @@protoc_insertion_point(field_mutable:common.RoleExtend1.mpList)
  return _msg;
}
inline void RoleExtend1::set_allocated_mplist(::common::ModelPartList* mplist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mplist_;
  }
  if (mplist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mplist);
    if (message_arena != submessage_arena) {
      mplist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mplist, submessage_arena);
    }
    
  } else {
    
  }
  mplist_ = mplist;
  // @@protoc_insertion_point(field_set_allocated:common.RoleExtend1.mpList)
}

// string familyName = 4;
inline void RoleExtend1::clear_familyname() {
  familyname_.ClearToEmpty();
}
inline const std::string& RoleExtend1::familyname() const {
  // @@protoc_insertion_point(field_get:common.RoleExtend1.familyName)
  return _internal_familyname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleExtend1::set_familyname(ArgT0&& arg0, ArgT... args) {
 
 familyname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.RoleExtend1.familyName)
}
inline std::string* RoleExtend1::mutable_familyname() {
  std::string* _s = _internal_mutable_familyname();
  // @@protoc_insertion_point(field_mutable:common.RoleExtend1.familyName)
  return _s;
}
inline const std::string& RoleExtend1::_internal_familyname() const {
  return familyname_.Get();
}
inline void RoleExtend1::_internal_set_familyname(const std::string& value) {
  
  familyname_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleExtend1::_internal_mutable_familyname() {
  
  return familyname_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleExtend1::release_familyname() {
  // @@protoc_insertion_point(field_release:common.RoleExtend1.familyName)
  return familyname_.Release();
}
inline void RoleExtend1::set_allocated_familyname(std::string* familyname) {
  if (familyname != nullptr) {
    
  } else {
    
  }
  familyname_.SetAllocated(familyname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (familyname_.IsDefault()) {
    familyname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.RoleExtend1.familyName)
}

// uint64 leaderSceneId = 5;
inline void RoleExtend1::clear_leadersceneid() {
  leadersceneid_ = uint64_t{0u};
}
inline uint64_t RoleExtend1::_internal_leadersceneid() const {
  return leadersceneid_;
}
inline uint64_t RoleExtend1::leadersceneid() const {
  // @@protoc_insertion_point(field_get:common.RoleExtend1.leaderSceneId)
  return _internal_leadersceneid();
}
inline void RoleExtend1::_internal_set_leadersceneid(uint64_t value) {
  
  leadersceneid_ = value;
}
inline void RoleExtend1::set_leadersceneid(uint64_t value) {
  _internal_set_leadersceneid(value);
  // @@protoc_insertion_point(field_set:common.RoleExtend1.leaderSceneId)
}

// uint32 fightPoint = 6;
inline void RoleExtend1::clear_fightpoint() {
  fightpoint_ = 0u;
}
inline uint32_t RoleExtend1::_internal_fightpoint() const {
  return fightpoint_;
}
inline uint32_t RoleExtend1::fightpoint() const {
  // @@protoc_insertion_point(field_get:common.RoleExtend1.fightPoint)
  return _internal_fightpoint();
}
inline void RoleExtend1::_internal_set_fightpoint(uint32_t value) {
  
  fightpoint_ = value;
}
inline void RoleExtend1::set_fightpoint(uint32_t value) {
  _internal_set_fightpoint(value);
  // @@protoc_insertion_point(field_set:common.RoleExtend1.fightPoint)
}

// .common.ModuleViewFashion fashion = 7;
inline bool RoleExtend1::_internal_has_fashion() const {
  return this != internal_default_instance() && fashion_ != nullptr;
}
inline bool RoleExtend1::has_fashion() const {
  return _internal_has_fashion();
}
inline void RoleExtend1::clear_fashion() {
  if (GetArenaForAllocation() == nullptr && fashion_ != nullptr) {
    delete fashion_;
  }
  fashion_ = nullptr;
}
inline const ::common::ModuleViewFashion& RoleExtend1::_internal_fashion() const {
  const ::common::ModuleViewFashion* p = fashion_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ModuleViewFashion&>(
      ::common::_ModuleViewFashion_default_instance_);
}
inline const ::common::ModuleViewFashion& RoleExtend1::fashion() const {
  // @@protoc_insertion_point(field_get:common.RoleExtend1.fashion)
  return _internal_fashion();
}
inline void RoleExtend1::unsafe_arena_set_allocated_fashion(
    ::common::ModuleViewFashion* fashion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fashion_);
  }
  fashion_ = fashion;
  if (fashion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.RoleExtend1.fashion)
}
inline ::common::ModuleViewFashion* RoleExtend1::release_fashion() {
  
  ::common::ModuleViewFashion* temp = fashion_;
  fashion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ModuleViewFashion* RoleExtend1::unsafe_arena_release_fashion() {
  // @@protoc_insertion_point(field_release:common.RoleExtend1.fashion)
  
  ::common::ModuleViewFashion* temp = fashion_;
  fashion_ = nullptr;
  return temp;
}
inline ::common::ModuleViewFashion* RoleExtend1::_internal_mutable_fashion() {
  
  if (fashion_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ModuleViewFashion>(GetArenaForAllocation());
    fashion_ = p;
  }
  return fashion_;
}
inline ::common::ModuleViewFashion* RoleExtend1::mutable_fashion() {
  ::common::ModuleViewFashion* _msg = _internal_mutable_fashion();
  // @@protoc_insertion_point(field_mutable:common.RoleExtend1.fashion)
  return _msg;
}
inline void RoleExtend1::set_allocated_fashion(::common::ModuleViewFashion* fashion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fashion_;
  }
  if (fashion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fashion);
    if (message_arena != submessage_arena) {
      fashion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fashion, submessage_arena);
    }
    
  } else {
    
  }
  fashion_ = fashion;
  // @@protoc_insertion_point(field_set_allocated:common.RoleExtend1.fashion)
}

// .common.EquipView mainHand = 8;
inline bool RoleExtend1::_internal_has_mainhand() const {
  return this != internal_default_instance() && mainhand_ != nullptr;
}
inline bool RoleExtend1::has_mainhand() const {
  return _internal_has_mainhand();
}
inline void RoleExtend1::clear_mainhand() {
  if (GetArenaForAllocation() == nullptr && mainhand_ != nullptr) {
    delete mainhand_;
  }
  mainhand_ = nullptr;
}
inline const ::common::EquipView& RoleExtend1::_internal_mainhand() const {
  const ::common::EquipView* p = mainhand_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::EquipView&>(
      ::common::_EquipView_default_instance_);
}
inline const ::common::EquipView& RoleExtend1::mainhand() const {
  // @@protoc_insertion_point(field_get:common.RoleExtend1.mainHand)
  return _internal_mainhand();
}
inline void RoleExtend1::unsafe_arena_set_allocated_mainhand(
    ::common::EquipView* mainhand) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mainhand_);
  }
  mainhand_ = mainhand;
  if (mainhand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.RoleExtend1.mainHand)
}
inline ::common::EquipView* RoleExtend1::release_mainhand() {
  
  ::common::EquipView* temp = mainhand_;
  mainhand_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::EquipView* RoleExtend1::unsafe_arena_release_mainhand() {
  // @@protoc_insertion_point(field_release:common.RoleExtend1.mainHand)
  
  ::common::EquipView* temp = mainhand_;
  mainhand_ = nullptr;
  return temp;
}
inline ::common::EquipView* RoleExtend1::_internal_mutable_mainhand() {
  
  if (mainhand_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::EquipView>(GetArenaForAllocation());
    mainhand_ = p;
  }
  return mainhand_;
}
inline ::common::EquipView* RoleExtend1::mutable_mainhand() {
  ::common::EquipView* _msg = _internal_mutable_mainhand();
  // @@protoc_insertion_point(field_mutable:common.RoleExtend1.mainHand)
  return _msg;
}
inline void RoleExtend1::set_allocated_mainhand(::common::EquipView* mainhand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mainhand_;
  }
  if (mainhand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mainhand);
    if (message_arena != submessage_arena) {
      mainhand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mainhand, submessage_arena);
    }
    
  } else {
    
  }
  mainhand_ = mainhand;
  // @@protoc_insertion_point(field_set_allocated:common.RoleExtend1.mainHand)
}

// .common.EquipView offHand = 9;
inline bool RoleExtend1::_internal_has_offhand() const {
  return this != internal_default_instance() && offhand_ != nullptr;
}
inline bool RoleExtend1::has_offhand() const {
  return _internal_has_offhand();
}
inline void RoleExtend1::clear_offhand() {
  if (GetArenaForAllocation() == nullptr && offhand_ != nullptr) {
    delete offhand_;
  }
  offhand_ = nullptr;
}
inline const ::common::EquipView& RoleExtend1::_internal_offhand() const {
  const ::common::EquipView* p = offhand_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::EquipView&>(
      ::common::_EquipView_default_instance_);
}
inline const ::common::EquipView& RoleExtend1::offhand() const {
  // @@protoc_insertion_point(field_get:common.RoleExtend1.offHand)
  return _internal_offhand();
}
inline void RoleExtend1::unsafe_arena_set_allocated_offhand(
    ::common::EquipView* offhand) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offhand_);
  }
  offhand_ = offhand;
  if (offhand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.RoleExtend1.offHand)
}
inline ::common::EquipView* RoleExtend1::release_offhand() {
  
  ::common::EquipView* temp = offhand_;
  offhand_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::EquipView* RoleExtend1::unsafe_arena_release_offhand() {
  // @@protoc_insertion_point(field_release:common.RoleExtend1.offHand)
  
  ::common::EquipView* temp = offhand_;
  offhand_ = nullptr;
  return temp;
}
inline ::common::EquipView* RoleExtend1::_internal_mutable_offhand() {
  
  if (offhand_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::EquipView>(GetArenaForAllocation());
    offhand_ = p;
  }
  return offhand_;
}
inline ::common::EquipView* RoleExtend1::mutable_offhand() {
  ::common::EquipView* _msg = _internal_mutable_offhand();
  // @@protoc_insertion_point(field_mutable:common.RoleExtend1.offHand)
  return _msg;
}
inline void RoleExtend1::set_allocated_offhand(::common::EquipView* offhand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete offhand_;
  }
  if (offhand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(offhand);
    if (message_arena != submessage_arena) {
      offhand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offhand, submessage_arena);
    }
    
  } else {
    
  }
  offhand_ = offhand;
  // @@protoc_insertion_point(field_set_allocated:common.RoleExtend1.offHand)
}

// uint32 chatFont = 10;
inline void RoleExtend1::clear_chatfont() {
  chatfont_ = 0u;
}
inline uint32_t RoleExtend1::_internal_chatfont() const {
  return chatfont_;
}
inline uint32_t RoleExtend1::chatfont() const {
  // @@protoc_insertion_point(field_get:common.RoleExtend1.chatFont)
  return _internal_chatfont();
}
inline void RoleExtend1::_internal_set_chatfont(uint32_t value) {
  
  chatfont_ = value;
}
inline void RoleExtend1::set_chatfont(uint32_t value) {
  _internal_set_chatfont(value);
  // @@protoc_insertion_point(field_set:common.RoleExtend1.chatFont)
}

// uint32 chatFrame = 11;
inline void RoleExtend1::clear_chatframe() {
  chatframe_ = 0u;
}
inline uint32_t RoleExtend1::_internal_chatframe() const {
  return chatframe_;
}
inline uint32_t RoleExtend1::chatframe() const {
  // @@protoc_insertion_point(field_get:common.RoleExtend1.chatFrame)
  return _internal_chatframe();
}
inline void RoleExtend1::_internal_set_chatframe(uint32_t value) {
  
  chatframe_ = value;
}
inline void RoleExtend1::set_chatframe(uint32_t value) {
  _internal_set_chatframe(value);
  // @@protoc_insertion_point(field_set:common.RoleExtend1.chatFrame)
}

// uint32 loginTime = 12;
inline void RoleExtend1::clear_logintime() {
  logintime_ = 0u;
}
inline uint32_t RoleExtend1::_internal_logintime() const {
  return logintime_;
}
inline uint32_t RoleExtend1::logintime() const {
  // @@protoc_insertion_point(field_get:common.RoleExtend1.loginTime)
  return _internal_logintime();
}
inline void RoleExtend1::_internal_set_logintime(uint32_t value) {
  
  logintime_ = value;
}
inline void RoleExtend1::set_logintime(uint32_t value) {
  _internal_set_logintime(value);
  // @@protoc_insertion_point(field_set:common.RoleExtend1.loginTime)
}

// uint32 logoutTime = 13;
inline void RoleExtend1::clear_logouttime() {
  logouttime_ = 0u;
}
inline uint32_t RoleExtend1::_internal_logouttime() const {
  return logouttime_;
}
inline uint32_t RoleExtend1::logouttime() const {
  // @@protoc_insertion_point(field_get:common.RoleExtend1.logoutTime)
  return _internal_logouttime();
}
inline void RoleExtend1::_internal_set_logouttime(uint32_t value) {
  
  logouttime_ = value;
}
inline void RoleExtend1::set_logouttime(uint32_t value) {
  _internal_set_logouttime(value);
  // @@protoc_insertion_point(field_set:common.RoleExtend1.logoutTime)
}

// uint32 offlineTime = 14;
inline void RoleExtend1::clear_offlinetime() {
  offlinetime_ = 0u;
}
inline uint32_t RoleExtend1::_internal_offlinetime() const {
  return offlinetime_;
}
inline uint32_t RoleExtend1::offlinetime() const {
  // @@protoc_insertion_point(field_get:common.RoleExtend1.offlineTime)
  return _internal_offlinetime();
}
inline void RoleExtend1::_internal_set_offlinetime(uint32_t value) {
  
  offlinetime_ = value;
}
inline void RoleExtend1::set_offlinetime(uint32_t value) {
  _internal_set_offlinetime(value);
  // @@protoc_insertion_point(field_set:common.RoleExtend1.offlineTime)
}

// uint32 onlineTime = 15;
inline void RoleExtend1::clear_onlinetime() {
  onlinetime_ = 0u;
}
inline uint32_t RoleExtend1::_internal_onlinetime() const {
  return onlinetime_;
}
inline uint32_t RoleExtend1::onlinetime() const {
  // @@protoc_insertion_point(field_get:common.RoleExtend1.onlineTime)
  return _internal_onlinetime();
}
inline void RoleExtend1::_internal_set_onlinetime(uint32_t value) {
  
  onlinetime_ = value;
}
inline void RoleExtend1::set_onlinetime(uint32_t value) {
  _internal_set_onlinetime(value);
  // @@protoc_insertion_point(field_set:common.RoleExtend1.onlineTime)
}

// -------------------------------------------------------------------

// RoleExtend2

// .common.ClientSceneId sceneId = 1;
inline bool RoleExtend2::_internal_has_sceneid() const {
  return this != internal_default_instance() && sceneid_ != nullptr;
}
inline bool RoleExtend2::has_sceneid() const {
  return _internal_has_sceneid();
}
inline void RoleExtend2::clear_sceneid() {
  if (GetArenaForAllocation() == nullptr && sceneid_ != nullptr) {
    delete sceneid_;
  }
  sceneid_ = nullptr;
}
inline const ::common::ClientSceneId& RoleExtend2::_internal_sceneid() const {
  const ::common::ClientSceneId* p = sceneid_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ClientSceneId&>(
      ::common::_ClientSceneId_default_instance_);
}
inline const ::common::ClientSceneId& RoleExtend2::sceneid() const {
  // @@protoc_insertion_point(field_get:common.RoleExtend2.sceneId)
  return _internal_sceneid();
}
inline void RoleExtend2::unsafe_arena_set_allocated_sceneid(
    ::common::ClientSceneId* sceneid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sceneid_);
  }
  sceneid_ = sceneid;
  if (sceneid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.RoleExtend2.sceneId)
}
inline ::common::ClientSceneId* RoleExtend2::release_sceneid() {
  
  ::common::ClientSceneId* temp = sceneid_;
  sceneid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ClientSceneId* RoleExtend2::unsafe_arena_release_sceneid() {
  // @@protoc_insertion_point(field_release:common.RoleExtend2.sceneId)
  
  ::common::ClientSceneId* temp = sceneid_;
  sceneid_ = nullptr;
  return temp;
}
inline ::common::ClientSceneId* RoleExtend2::_internal_mutable_sceneid() {
  
  if (sceneid_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ClientSceneId>(GetArenaForAllocation());
    sceneid_ = p;
  }
  return sceneid_;
}
inline ::common::ClientSceneId* RoleExtend2::mutable_sceneid() {
  ::common::ClientSceneId* _msg = _internal_mutable_sceneid();
  // @@protoc_insertion_point(field_mutable:common.RoleExtend2.sceneId)
  return _msg;
}
inline void RoleExtend2::set_allocated_sceneid(::common::ClientSceneId* sceneid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sceneid_;
  }
  if (sceneid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sceneid);
    if (message_arena != submessage_arena) {
      sceneid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sceneid, submessage_arena);
    }
    
  } else {
    
  }
  sceneid_ = sceneid;
  // @@protoc_insertion_point(field_set_allocated:common.RoleExtend2.sceneId)
}

// .common.ClientPos cpos = 2;
inline bool RoleExtend2::_internal_has_cpos() const {
  return this != internal_default_instance() && cpos_ != nullptr;
}
inline bool RoleExtend2::has_cpos() const {
  return _internal_has_cpos();
}
inline void RoleExtend2::clear_cpos() {
  if (GetArenaForAllocation() == nullptr && cpos_ != nullptr) {
    delete cpos_;
  }
  cpos_ = nullptr;
}
inline const ::common::ClientPos& RoleExtend2::_internal_cpos() const {
  const ::common::ClientPos* p = cpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ClientPos&>(
      ::common::_ClientPos_default_instance_);
}
inline const ::common::ClientPos& RoleExtend2::cpos() const {
  // @@protoc_insertion_point(field_get:common.RoleExtend2.cpos)
  return _internal_cpos();
}
inline void RoleExtend2::unsafe_arena_set_allocated_cpos(
    ::common::ClientPos* cpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpos_);
  }
  cpos_ = cpos;
  if (cpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.RoleExtend2.cpos)
}
inline ::common::ClientPos* RoleExtend2::release_cpos() {
  
  ::common::ClientPos* temp = cpos_;
  cpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ClientPos* RoleExtend2::unsafe_arena_release_cpos() {
  // @@protoc_insertion_point(field_release:common.RoleExtend2.cpos)
  
  ::common::ClientPos* temp = cpos_;
  cpos_ = nullptr;
  return temp;
}
inline ::common::ClientPos* RoleExtend2::_internal_mutable_cpos() {
  
  if (cpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ClientPos>(GetArenaForAllocation());
    cpos_ = p;
  }
  return cpos_;
}
inline ::common::ClientPos* RoleExtend2::mutable_cpos() {
  ::common::ClientPos* _msg = _internal_mutable_cpos();
  // @@protoc_insertion_point(field_mutable:common.RoleExtend2.cpos)
  return _msg;
}
inline void RoleExtend2::set_allocated_cpos(::common::ClientPos* cpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cpos_;
  }
  if (cpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cpos);
    if (message_arena != submessage_arena) {
      cpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpos, submessage_arena);
    }
    
  } else {
    
  }
  cpos_ = cpos;
  // @@protoc_insertion_point(field_set_allocated:common.RoleExtend2.cpos)
}

// -------------------------------------------------------------------

// RoleExtend3

// uint32 hp = 1;
inline void RoleExtend3::clear_hp() {
  hp_ = 0u;
}
inline uint32_t RoleExtend3::_internal_hp() const {
  return hp_;
}
inline uint32_t RoleExtend3::hp() const {
  // @@protoc_insertion_point(field_get:common.RoleExtend3.hp)
  return _internal_hp();
}
inline void RoleExtend3::_internal_set_hp(uint32_t value) {
  
  hp_ = value;
}
inline void RoleExtend3::set_hp(uint32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:common.RoleExtend3.hp)
}

// uint32 maxHp = 2;
inline void RoleExtend3::clear_maxhp() {
  maxhp_ = 0u;
}
inline uint32_t RoleExtend3::_internal_maxhp() const {
  return maxhp_;
}
inline uint32_t RoleExtend3::maxhp() const {
  // @@protoc_insertion_point(field_get:common.RoleExtend3.maxHp)
  return _internal_maxhp();
}
inline void RoleExtend3::_internal_set_maxhp(uint32_t value) {
  
  maxhp_ = value;
}
inline void RoleExtend3::set_maxhp(uint32_t value) {
  _internal_set_maxhp(value);
  // @@protoc_insertion_point(field_set:common.RoleExtend3.maxHp)
}

// uint32 mp = 3;
inline void RoleExtend3::clear_mp() {
  mp_ = 0u;
}
inline uint32_t RoleExtend3::_internal_mp() const {
  return mp_;
}
inline uint32_t RoleExtend3::mp() const {
  // @@protoc_insertion_point(field_get:common.RoleExtend3.mp)
  return _internal_mp();
}
inline void RoleExtend3::_internal_set_mp(uint32_t value) {
  
  mp_ = value;
}
inline void RoleExtend3::set_mp(uint32_t value) {
  _internal_set_mp(value);
  // @@protoc_insertion_point(field_set:common.RoleExtend3.mp)
}

// uint32 maxMp = 4;
inline void RoleExtend3::clear_maxmp() {
  maxmp_ = 0u;
}
inline uint32_t RoleExtend3::_internal_maxmp() const {
  return maxmp_;
}
inline uint32_t RoleExtend3::maxmp() const {
  // @@protoc_insertion_point(field_get:common.RoleExtend3.maxMp)
  return _internal_maxmp();
}
inline void RoleExtend3::_internal_set_maxmp(uint32_t value) {
  
  maxmp_ = value;
}
inline void RoleExtend3::set_maxmp(uint32_t value) {
  _internal_set_maxmp(value);
  // @@protoc_insertion_point(field_set:common.RoleExtend3.maxMp)
}

// -------------------------------------------------------------------

// RoleVoteState

// uint64 roleId = 1;
inline void RoleVoteState::clear_roleid() {
  roleid_ = uint64_t{0u};
}
inline uint64_t RoleVoteState::_internal_roleid() const {
  return roleid_;
}
inline uint64_t RoleVoteState::roleid() const {
  // @@protoc_insertion_point(field_get:common.RoleVoteState.roleId)
  return _internal_roleid();
}
inline void RoleVoteState::_internal_set_roleid(uint64_t value) {
  
  roleid_ = value;
}
inline void RoleVoteState::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:common.RoleVoteState.roleId)
}

// uint32 state = 2;
inline void RoleVoteState::clear_state() {
  state_ = 0u;
}
inline uint32_t RoleVoteState::_internal_state() const {
  return state_;
}
inline uint32_t RoleVoteState::state() const {
  // @@protoc_insertion_point(field_get:common.RoleVoteState.state)
  return _internal_state();
}
inline void RoleVoteState::_internal_set_state(uint32_t value) {
  
  state_ = value;
}
inline void RoleVoteState::set_state(uint32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:common.RoleVoteState.state)
}

// -------------------------------------------------------------------

// RoleVoteStateList

// repeated .common.RoleVoteState roles = 1;
inline int RoleVoteStateList::_internal_roles_size() const {
  return roles_.size();
}
inline int RoleVoteStateList::roles_size() const {
  return _internal_roles_size();
}
inline void RoleVoteStateList::clear_roles() {
  roles_.Clear();
}
inline ::common::RoleVoteState* RoleVoteStateList::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:common.RoleVoteStateList.roles)
  return roles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::RoleVoteState >*
RoleVoteStateList::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:common.RoleVoteStateList.roles)
  return &roles_;
}
inline const ::common::RoleVoteState& RoleVoteStateList::_internal_roles(int index) const {
  return roles_.Get(index);
}
inline const ::common::RoleVoteState& RoleVoteStateList::roles(int index) const {
  // @@protoc_insertion_point(field_get:common.RoleVoteStateList.roles)
  return _internal_roles(index);
}
inline ::common::RoleVoteState* RoleVoteStateList::_internal_add_roles() {
  return roles_.Add();
}
inline ::common::RoleVoteState* RoleVoteStateList::add_roles() {
  ::common::RoleVoteState* _add = _internal_add_roles();
  // @@protoc_insertion_point(field_add:common.RoleVoteStateList.roles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::RoleVoteState >&
RoleVoteStateList::roles() const {
  // @@protoc_insertion_point(field_list:common.RoleVoteStateList.roles)
  return roles_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
