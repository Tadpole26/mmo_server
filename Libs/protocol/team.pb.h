// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: team.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_team_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_team_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "teamcommon.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_team_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_team_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_team_2eproto;
namespace client {
class ModuleTeam_Ntf_AddInvited;
struct ModuleTeam_Ntf_AddInvitedDefaultTypeInternal;
extern ModuleTeam_Ntf_AddInvitedDefaultTypeInternal _ModuleTeam_Ntf_AddInvited_default_instance_;
class ModuleTeam_Ntf_AddMember;
struct ModuleTeam_Ntf_AddMemberDefaultTypeInternal;
extern ModuleTeam_Ntf_AddMemberDefaultTypeInternal _ModuleTeam_Ntf_AddMember_default_instance_;
class ModuleTeam_Ntf_CreateTeam;
struct ModuleTeam_Ntf_CreateTeamDefaultTypeInternal;
extern ModuleTeam_Ntf_CreateTeamDefaultTypeInternal _ModuleTeam_Ntf_CreateTeam_default_instance_;
class ModuleTeam_Ntf_LeaderAddApply;
struct ModuleTeam_Ntf_LeaderAddApplyDefaultTypeInternal;
extern ModuleTeam_Ntf_LeaderAddApplyDefaultTypeInternal _ModuleTeam_Ntf_LeaderAddApply_default_instance_;
class ModuleTeam_Ntf_LeaderEmptyApply;
struct ModuleTeam_Ntf_LeaderEmptyApplyDefaultTypeInternal;
extern ModuleTeam_Ntf_LeaderEmptyApplyDefaultTypeInternal _ModuleTeam_Ntf_LeaderEmptyApply_default_instance_;
class ModuleTeam_Ntf_LeaderRemoveApply;
struct ModuleTeam_Ntf_LeaderRemoveApplyDefaultTypeInternal;
extern ModuleTeam_Ntf_LeaderRemoveApplyDefaultTypeInternal _ModuleTeam_Ntf_LeaderRemoveApply_default_instance_;
class ModuleTeam_Ntf_LeaderTogetherMember;
struct ModuleTeam_Ntf_LeaderTogetherMemberDefaultTypeInternal;
extern ModuleTeam_Ntf_LeaderTogetherMemberDefaultTypeInternal _ModuleTeam_Ntf_LeaderTogetherMember_default_instance_;
class ModuleTeam_Ntf_LeaderUpdateApply;
struct ModuleTeam_Ntf_LeaderUpdateApplyDefaultTypeInternal;
extern ModuleTeam_Ntf_LeaderUpdateApplyDefaultTypeInternal _ModuleTeam_Ntf_LeaderUpdateApply_default_instance_;
class ModuleTeam_Ntf_LeaveTeam;
struct ModuleTeam_Ntf_LeaveTeamDefaultTypeInternal;
extern ModuleTeam_Ntf_LeaveTeamDefaultTypeInternal _ModuleTeam_Ntf_LeaveTeam_default_instance_;
class ModuleTeam_Ntf_MountTeam;
struct ModuleTeam_Ntf_MountTeamDefaultTypeInternal;
extern ModuleTeam_Ntf_MountTeamDefaultTypeInternal _ModuleTeam_Ntf_MountTeam_default_instance_;
class ModuleTeam_Ntf_RemoveMember;
struct ModuleTeam_Ntf_RemoveMemberDefaultTypeInternal;
extern ModuleTeam_Ntf_RemoveMemberDefaultTypeInternal _ModuleTeam_Ntf_RemoveMember_default_instance_;
class ModuleTeam_Ntf_SelfJoinTeam;
struct ModuleTeam_Ntf_SelfJoinTeamDefaultTypeInternal;
extern ModuleTeam_Ntf_SelfJoinTeamDefaultTypeInternal _ModuleTeam_Ntf_SelfJoinTeam_default_instance_;
class ModuleTeam_Ntf_TeamRecruitInfo;
struct ModuleTeam_Ntf_TeamRecruitInfoDefaultTypeInternal;
extern ModuleTeam_Ntf_TeamRecruitInfoDefaultTypeInternal _ModuleTeam_Ntf_TeamRecruitInfo_default_instance_;
class ModuleTeam_Ntf_UpdateMember;
struct ModuleTeam_Ntf_UpdateMemberDefaultTypeInternal;
extern ModuleTeam_Ntf_UpdateMemberDefaultTypeInternal _ModuleTeam_Ntf_UpdateMember_default_instance_;
class ModuleTeam_Ntf_UpdateTeam;
struct ModuleTeam_Ntf_UpdateTeamDefaultTypeInternal;
extern ModuleTeam_Ntf_UpdateTeamDefaultTypeInternal _ModuleTeam_Ntf_UpdateTeam_default_instance_;
class ModuleTeam_Ntf_VoteBegin;
struct ModuleTeam_Ntf_VoteBeginDefaultTypeInternal;
extern ModuleTeam_Ntf_VoteBeginDefaultTypeInternal _ModuleTeam_Ntf_VoteBegin_default_instance_;
class ModuleTeam_Ntf_VoteEnd;
struct ModuleTeam_Ntf_VoteEndDefaultTypeInternal;
extern ModuleTeam_Ntf_VoteEndDefaultTypeInternal _ModuleTeam_Ntf_VoteEnd_default_instance_;
class ModuleTeam_Ntf_VoteUpdate;
struct ModuleTeam_Ntf_VoteUpdateDefaultTypeInternal;
extern ModuleTeam_Ntf_VoteUpdateDefaultTypeInternal _ModuleTeam_Ntf_VoteUpdate_default_instance_;
class ModuleTeam_Req_AgreeInvited;
struct ModuleTeam_Req_AgreeInvitedDefaultTypeInternal;
extern ModuleTeam_Req_AgreeInvitedDefaultTypeInternal _ModuleTeam_Req_AgreeInvited_default_instance_;
class ModuleTeam_Req_ApplyTeam;
struct ModuleTeam_Req_ApplyTeamDefaultTypeInternal;
extern ModuleTeam_Req_ApplyTeamDefaultTypeInternal _ModuleTeam_Req_ApplyTeam_default_instance_;
class ModuleTeam_Req_AreeTogether;
struct ModuleTeam_Req_AreeTogetherDefaultTypeInternal;
extern ModuleTeam_Req_AreeTogetherDefaultTypeInternal _ModuleTeam_Req_AreeTogether_default_instance_;
class ModuleTeam_Req_CancelFollow;
struct ModuleTeam_Req_CancelFollowDefaultTypeInternal;
extern ModuleTeam_Req_CancelFollowDefaultTypeInternal _ModuleTeam_Req_CancelFollow_default_instance_;
class ModuleTeam_Req_CreateTeam;
struct ModuleTeam_Req_CreateTeamDefaultTypeInternal;
extern ModuleTeam_Req_CreateTeamDefaultTypeInternal _ModuleTeam_Req_CreateTeam_default_instance_;
class ModuleTeam_Req_FollowJumpMap;
struct ModuleTeam_Req_FollowJumpMapDefaultTypeInternal;
extern ModuleTeam_Req_FollowJumpMapDefaultTypeInternal _ModuleTeam_Req_FollowJumpMap_default_instance_;
class ModuleTeam_Req_FollowLeader;
struct ModuleTeam_Req_FollowLeaderDefaultTypeInternal;
extern ModuleTeam_Req_FollowLeaderDefaultTypeInternal _ModuleTeam_Req_FollowLeader_default_instance_;
class ModuleTeam_Req_InviteFamily;
struct ModuleTeam_Req_InviteFamilyDefaultTypeInternal;
extern ModuleTeam_Req_InviteFamilyDefaultTypeInternal _ModuleTeam_Req_InviteFamily_default_instance_;
class ModuleTeam_Req_InviteFriend;
struct ModuleTeam_Req_InviteFriendDefaultTypeInternal;
extern ModuleTeam_Req_InviteFriendDefaultTypeInternal _ModuleTeam_Req_InviteFriend_default_instance_;
class ModuleTeam_Req_InvitePlayer;
struct ModuleTeam_Req_InvitePlayerDefaultTypeInternal;
extern ModuleTeam_Req_InvitePlayerDefaultTypeInternal _ModuleTeam_Req_InvitePlayer_default_instance_;
class ModuleTeam_Req_LeaderAgreeAllApply;
struct ModuleTeam_Req_LeaderAgreeAllApplyDefaultTypeInternal;
extern ModuleTeam_Req_LeaderAgreeAllApplyDefaultTypeInternal _ModuleTeam_Req_LeaderAgreeAllApply_default_instance_;
class ModuleTeam_Req_LeaderAgreeApply;
struct ModuleTeam_Req_LeaderAgreeApplyDefaultTypeInternal;
extern ModuleTeam_Req_LeaderAgreeApplyDefaultTypeInternal _ModuleTeam_Req_LeaderAgreeApply_default_instance_;
class ModuleTeam_Req_LeaderAppoint;
struct ModuleTeam_Req_LeaderAppointDefaultTypeInternal;
extern ModuleTeam_Req_LeaderAppointDefaultTypeInternal _ModuleTeam_Req_LeaderAppoint_default_instance_;
class ModuleTeam_Req_LeaderCancelMatch;
struct ModuleTeam_Req_LeaderCancelMatchDefaultTypeInternal;
extern ModuleTeam_Req_LeaderCancelMatchDefaultTypeInternal _ModuleTeam_Req_LeaderCancelMatch_default_instance_;
class ModuleTeam_Req_LeaderChangeTarget;
struct ModuleTeam_Req_LeaderChangeTargetDefaultTypeInternal;
extern ModuleTeam_Req_LeaderChangeTargetDefaultTypeInternal _ModuleTeam_Req_LeaderChangeTarget_default_instance_;
class ModuleTeam_Req_LeaderFireMember;
struct ModuleTeam_Req_LeaderFireMemberDefaultTypeInternal;
extern ModuleTeam_Req_LeaderFireMemberDefaultTypeInternal _ModuleTeam_Req_LeaderFireMember_default_instance_;
class ModuleTeam_Req_LeaderRefuseAllApply;
struct ModuleTeam_Req_LeaderRefuseAllApplyDefaultTypeInternal;
extern ModuleTeam_Req_LeaderRefuseAllApplyDefaultTypeInternal _ModuleTeam_Req_LeaderRefuseAllApply_default_instance_;
class ModuleTeam_Req_LeaderRefuseApply;
struct ModuleTeam_Req_LeaderRefuseApplyDefaultTypeInternal;
extern ModuleTeam_Req_LeaderRefuseApplyDefaultTypeInternal _ModuleTeam_Req_LeaderRefuseApply_default_instance_;
class ModuleTeam_Req_LeaderStartMatch;
struct ModuleTeam_Req_LeaderStartMatchDefaultTypeInternal;
extern ModuleTeam_Req_LeaderStartMatchDefaultTypeInternal _ModuleTeam_Req_LeaderStartMatch_default_instance_;
class ModuleTeam_Req_LeaderTogetherMember;
struct ModuleTeam_Req_LeaderTogetherMemberDefaultTypeInternal;
extern ModuleTeam_Req_LeaderTogetherMemberDefaultTypeInternal _ModuleTeam_Req_LeaderTogetherMember_default_instance_;
class ModuleTeam_Req_LeaveTeam;
struct ModuleTeam_Req_LeaveTeamDefaultTypeInternal;
extern ModuleTeam_Req_LeaveTeamDefaultTypeInternal _ModuleTeam_Req_LeaveTeam_default_instance_;
class ModuleTeam_Req_PersonCancelMatch;
struct ModuleTeam_Req_PersonCancelMatchDefaultTypeInternal;
extern ModuleTeam_Req_PersonCancelMatchDefaultTypeInternal _ModuleTeam_Req_PersonCancelMatch_default_instance_;
class ModuleTeam_Req_PersonChangeTarget;
struct ModuleTeam_Req_PersonChangeTargetDefaultTypeInternal;
extern ModuleTeam_Req_PersonChangeTargetDefaultTypeInternal _ModuleTeam_Req_PersonChangeTarget_default_instance_;
class ModuleTeam_Req_RefuseInvited;
struct ModuleTeam_Req_RefuseInvitedDefaultTypeInternal;
extern ModuleTeam_Req_RefuseInvitedDefaultTypeInternal _ModuleTeam_Req_RefuseInvited_default_instance_;
class ModuleTeam_Req_RefuseTogether;
struct ModuleTeam_Req_RefuseTogetherDefaultTypeInternal;
extern ModuleTeam_Req_RefuseTogetherDefaultTypeInternal _ModuleTeam_Req_RefuseTogether_default_instance_;
class ModuleTeam_Req_ReplaceLeader;
struct ModuleTeam_Req_ReplaceLeaderDefaultTypeInternal;
extern ModuleTeam_Req_ReplaceLeaderDefaultTypeInternal _ModuleTeam_Req_ReplaceLeader_default_instance_;
class ModuleTeam_Req_Vote;
struct ModuleTeam_Req_VoteDefaultTypeInternal;
extern ModuleTeam_Req_VoteDefaultTypeInternal _ModuleTeam_Req_Vote_default_instance_;
}  // namespace client
PROTOBUF_NAMESPACE_OPEN
template<> ::client::ModuleTeam_Ntf_AddInvited* Arena::CreateMaybeMessage<::client::ModuleTeam_Ntf_AddInvited>(Arena*);
template<> ::client::ModuleTeam_Ntf_AddMember* Arena::CreateMaybeMessage<::client::ModuleTeam_Ntf_AddMember>(Arena*);
template<> ::client::ModuleTeam_Ntf_CreateTeam* Arena::CreateMaybeMessage<::client::ModuleTeam_Ntf_CreateTeam>(Arena*);
template<> ::client::ModuleTeam_Ntf_LeaderAddApply* Arena::CreateMaybeMessage<::client::ModuleTeam_Ntf_LeaderAddApply>(Arena*);
template<> ::client::ModuleTeam_Ntf_LeaderEmptyApply* Arena::CreateMaybeMessage<::client::ModuleTeam_Ntf_LeaderEmptyApply>(Arena*);
template<> ::client::ModuleTeam_Ntf_LeaderRemoveApply* Arena::CreateMaybeMessage<::client::ModuleTeam_Ntf_LeaderRemoveApply>(Arena*);
template<> ::client::ModuleTeam_Ntf_LeaderTogetherMember* Arena::CreateMaybeMessage<::client::ModuleTeam_Ntf_LeaderTogetherMember>(Arena*);
template<> ::client::ModuleTeam_Ntf_LeaderUpdateApply* Arena::CreateMaybeMessage<::client::ModuleTeam_Ntf_LeaderUpdateApply>(Arena*);
template<> ::client::ModuleTeam_Ntf_LeaveTeam* Arena::CreateMaybeMessage<::client::ModuleTeam_Ntf_LeaveTeam>(Arena*);
template<> ::client::ModuleTeam_Ntf_MountTeam* Arena::CreateMaybeMessage<::client::ModuleTeam_Ntf_MountTeam>(Arena*);
template<> ::client::ModuleTeam_Ntf_RemoveMember* Arena::CreateMaybeMessage<::client::ModuleTeam_Ntf_RemoveMember>(Arena*);
template<> ::client::ModuleTeam_Ntf_SelfJoinTeam* Arena::CreateMaybeMessage<::client::ModuleTeam_Ntf_SelfJoinTeam>(Arena*);
template<> ::client::ModuleTeam_Ntf_TeamRecruitInfo* Arena::CreateMaybeMessage<::client::ModuleTeam_Ntf_TeamRecruitInfo>(Arena*);
template<> ::client::ModuleTeam_Ntf_UpdateMember* Arena::CreateMaybeMessage<::client::ModuleTeam_Ntf_UpdateMember>(Arena*);
template<> ::client::ModuleTeam_Ntf_UpdateTeam* Arena::CreateMaybeMessage<::client::ModuleTeam_Ntf_UpdateTeam>(Arena*);
template<> ::client::ModuleTeam_Ntf_VoteBegin* Arena::CreateMaybeMessage<::client::ModuleTeam_Ntf_VoteBegin>(Arena*);
template<> ::client::ModuleTeam_Ntf_VoteEnd* Arena::CreateMaybeMessage<::client::ModuleTeam_Ntf_VoteEnd>(Arena*);
template<> ::client::ModuleTeam_Ntf_VoteUpdate* Arena::CreateMaybeMessage<::client::ModuleTeam_Ntf_VoteUpdate>(Arena*);
template<> ::client::ModuleTeam_Req_AgreeInvited* Arena::CreateMaybeMessage<::client::ModuleTeam_Req_AgreeInvited>(Arena*);
template<> ::client::ModuleTeam_Req_ApplyTeam* Arena::CreateMaybeMessage<::client::ModuleTeam_Req_ApplyTeam>(Arena*);
template<> ::client::ModuleTeam_Req_AreeTogether* Arena::CreateMaybeMessage<::client::ModuleTeam_Req_AreeTogether>(Arena*);
template<> ::client::ModuleTeam_Req_CancelFollow* Arena::CreateMaybeMessage<::client::ModuleTeam_Req_CancelFollow>(Arena*);
template<> ::client::ModuleTeam_Req_CreateTeam* Arena::CreateMaybeMessage<::client::ModuleTeam_Req_CreateTeam>(Arena*);
template<> ::client::ModuleTeam_Req_FollowJumpMap* Arena::CreateMaybeMessage<::client::ModuleTeam_Req_FollowJumpMap>(Arena*);
template<> ::client::ModuleTeam_Req_FollowLeader* Arena::CreateMaybeMessage<::client::ModuleTeam_Req_FollowLeader>(Arena*);
template<> ::client::ModuleTeam_Req_InviteFamily* Arena::CreateMaybeMessage<::client::ModuleTeam_Req_InviteFamily>(Arena*);
template<> ::client::ModuleTeam_Req_InviteFriend* Arena::CreateMaybeMessage<::client::ModuleTeam_Req_InviteFriend>(Arena*);
template<> ::client::ModuleTeam_Req_InvitePlayer* Arena::CreateMaybeMessage<::client::ModuleTeam_Req_InvitePlayer>(Arena*);
template<> ::client::ModuleTeam_Req_LeaderAgreeAllApply* Arena::CreateMaybeMessage<::client::ModuleTeam_Req_LeaderAgreeAllApply>(Arena*);
template<> ::client::ModuleTeam_Req_LeaderAgreeApply* Arena::CreateMaybeMessage<::client::ModuleTeam_Req_LeaderAgreeApply>(Arena*);
template<> ::client::ModuleTeam_Req_LeaderAppoint* Arena::CreateMaybeMessage<::client::ModuleTeam_Req_LeaderAppoint>(Arena*);
template<> ::client::ModuleTeam_Req_LeaderCancelMatch* Arena::CreateMaybeMessage<::client::ModuleTeam_Req_LeaderCancelMatch>(Arena*);
template<> ::client::ModuleTeam_Req_LeaderChangeTarget* Arena::CreateMaybeMessage<::client::ModuleTeam_Req_LeaderChangeTarget>(Arena*);
template<> ::client::ModuleTeam_Req_LeaderFireMember* Arena::CreateMaybeMessage<::client::ModuleTeam_Req_LeaderFireMember>(Arena*);
template<> ::client::ModuleTeam_Req_LeaderRefuseAllApply* Arena::CreateMaybeMessage<::client::ModuleTeam_Req_LeaderRefuseAllApply>(Arena*);
template<> ::client::ModuleTeam_Req_LeaderRefuseApply* Arena::CreateMaybeMessage<::client::ModuleTeam_Req_LeaderRefuseApply>(Arena*);
template<> ::client::ModuleTeam_Req_LeaderStartMatch* Arena::CreateMaybeMessage<::client::ModuleTeam_Req_LeaderStartMatch>(Arena*);
template<> ::client::ModuleTeam_Req_LeaderTogetherMember* Arena::CreateMaybeMessage<::client::ModuleTeam_Req_LeaderTogetherMember>(Arena*);
template<> ::client::ModuleTeam_Req_LeaveTeam* Arena::CreateMaybeMessage<::client::ModuleTeam_Req_LeaveTeam>(Arena*);
template<> ::client::ModuleTeam_Req_PersonCancelMatch* Arena::CreateMaybeMessage<::client::ModuleTeam_Req_PersonCancelMatch>(Arena*);
template<> ::client::ModuleTeam_Req_PersonChangeTarget* Arena::CreateMaybeMessage<::client::ModuleTeam_Req_PersonChangeTarget>(Arena*);
template<> ::client::ModuleTeam_Req_RefuseInvited* Arena::CreateMaybeMessage<::client::ModuleTeam_Req_RefuseInvited>(Arena*);
template<> ::client::ModuleTeam_Req_RefuseTogether* Arena::CreateMaybeMessage<::client::ModuleTeam_Req_RefuseTogether>(Arena*);
template<> ::client::ModuleTeam_Req_ReplaceLeader* Arena::CreateMaybeMessage<::client::ModuleTeam_Req_ReplaceLeader>(Arena*);
template<> ::client::ModuleTeam_Req_Vote* Arena::CreateMaybeMessage<::client::ModuleTeam_Req_Vote>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace client {

enum enModuleTeam : int {
  enModuleTeam_None = 0,
  enModuleTeam_Req_CreateTeam = 1,
  enModuleTeam_Ntf_CreateTeam = 2,
  enModuleTeam_Ntf_SelfJoinTeam = 3,
  enModuleTeam_Ntf_UpdateTeam = 4,
  enModuleTeam_Ntf_AddMember = 5,
  enModuleTeam_Ntf_RemoveMember = 6,
  enModuleTeam_Ntf_UpdateMember = 7,
  enModuleTeam_Req_LeaderFireMember = 8,
  enModuleTeam_Req_LeaderChangeTarget = 9,
  enModuleTeam_Req_LeaderCancelMatch = 10,
  enModuleTeam_Req_LeaderTogetherMember = 11,
  enModuleTeam_Req_LeaderAppoint = 12,
  enModuleTeam_Req_LeaderRefuseAllApply = 13,
  enModuleTeam_Req_LeaderAgreeAllApply = 14,
  enModuleTeam_Req_LeaderRefuseApply = 15,
  enModuleTeam_Req_LeaderAgreeApply = 16,
  enModuleTeam_Ntf_LeaderAddApply = 17,
  enModuleTeam_Ntf_LeaderRemoveApply = 18,
  enModuleTeam_Ntf_LeaderUpdateApply = 19,
  enModuleTeam_Req_InviteFriend = 20,
  enModuleTeam_Req_InviteFamily = 21,
  enModuleTeam_Req_InvitePlayer = 22,
  enModuleTeam_Ntf_AddInvited = 23,
  enModuleTeam_Req_AgreeInvited = 24,
  enModuleTeam_Req_RefuseInvited = 25,
  enModuleTeam_Req_LeaveTeam = 26,
  enModuleTeam_Ntf_LeaveTeam = 27,
  enModuleTeam_Req_ApplyTeam = 28,
  enModuleTeam_Req_FollowLeader = 29,
  enModuleTeam_Req_CancelFollow = 30,
  enModuleTeam_Req_AreeTogether = 31,
  enModuleTeam_Req_RefuseTogether = 32,
  enModuleTeam_Req_ReplaceLeader = 33,
  enModuleTeam_Req_PersonChangeTarget = 34,
  enModuleTeam_Req_PersonCancelMatch = 35,
  enModuleTeam_Ntf_LeaderTogetherMember = 36,
  enModuleTeam_Ntf_LeaderEmptyApply = 37,
  enModuleTeam_Ntf_TeamRecruitInfo = 38,
  enModuleTeam_Req_LeaderStartMatch = 39,
  enModuleTeam_Ntf_VoteBegin = 40,
  enModuleTeam_Req_Vote = 41,
  enModuleTeam_Ntf_VoteUpdate = 42,
  enModuleTeam_Ntf_VoteEnd = 43,
  enModuleTeam_Ntf_MountTeam = 44,
  enModuleTeam_Req_FollowJumpMap = 45,
  enModuleFriend_RealMax = 46,
  enModuleTeam_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  enModuleTeam_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool enModuleTeam_IsValid(int value);
constexpr enModuleTeam enModuleTeam_MIN = enModuleTeam_None;
constexpr enModuleTeam enModuleTeam_MAX = enModuleFriend_RealMax;
constexpr int enModuleTeam_ARRAYSIZE = enModuleTeam_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enModuleTeam_descriptor();
template<typename T>
inline const std::string& enModuleTeam_Name(T enum_t_value) {
  static_assert(::std::is_same<T, enModuleTeam>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function enModuleTeam_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    enModuleTeam_descriptor(), enum_t_value);
}
inline bool enModuleTeam_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, enModuleTeam* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<enModuleTeam>(
    enModuleTeam_descriptor(), name, value);
}
// ===================================================================

class ModuleTeam_Req_CreateTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Req_CreateTeam) */ {
 public:
  inline ModuleTeam_Req_CreateTeam() : ModuleTeam_Req_CreateTeam(nullptr) {}
  ~ModuleTeam_Req_CreateTeam() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Req_CreateTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Req_CreateTeam(const ModuleTeam_Req_CreateTeam& from);
  ModuleTeam_Req_CreateTeam(ModuleTeam_Req_CreateTeam&& from) noexcept
    : ModuleTeam_Req_CreateTeam() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Req_CreateTeam& operator=(const ModuleTeam_Req_CreateTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Req_CreateTeam& operator=(ModuleTeam_Req_CreateTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Req_CreateTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Req_CreateTeam* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Req_CreateTeam*>(
               &_ModuleTeam_Req_CreateTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ModuleTeam_Req_CreateTeam& a, ModuleTeam_Req_CreateTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Req_CreateTeam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Req_CreateTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Req_CreateTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Req_CreateTeam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Req_CreateTeam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Req_CreateTeam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Req_CreateTeam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Req_CreateTeam";
  }
  protected:
  explicit ModuleTeam_Req_CreateTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetIdFieldNumber = 1,
    kMinLevelFieldNumber = 2,
    kMaxLevelFieldNumber = 3,
  };
  // uint32 targetId = 1;
  void clear_targetid();
  uint32_t targetid() const;
  void set_targetid(uint32_t value);
  private:
  uint32_t _internal_targetid() const;
  void _internal_set_targetid(uint32_t value);
  public:

  // uint32 minLevel = 2;
  void clear_minlevel();
  uint32_t minlevel() const;
  void set_minlevel(uint32_t value);
  private:
  uint32_t _internal_minlevel() const;
  void _internal_set_minlevel(uint32_t value);
  public:

  // uint32 maxLevel = 3;
  void clear_maxlevel();
  uint32_t maxlevel() const;
  void set_maxlevel(uint32_t value);
  private:
  uint32_t _internal_maxlevel() const;
  void _internal_set_maxlevel(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Req_CreateTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t targetid_;
  uint32_t minlevel_;
  uint32_t maxlevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Ntf_CreateTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Ntf_CreateTeam) */ {
 public:
  inline ModuleTeam_Ntf_CreateTeam() : ModuleTeam_Ntf_CreateTeam(nullptr) {}
  ~ModuleTeam_Ntf_CreateTeam() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Ntf_CreateTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Ntf_CreateTeam(const ModuleTeam_Ntf_CreateTeam& from);
  ModuleTeam_Ntf_CreateTeam(ModuleTeam_Ntf_CreateTeam&& from) noexcept
    : ModuleTeam_Ntf_CreateTeam() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Ntf_CreateTeam& operator=(const ModuleTeam_Ntf_CreateTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Ntf_CreateTeam& operator=(ModuleTeam_Ntf_CreateTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Ntf_CreateTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Ntf_CreateTeam* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Ntf_CreateTeam*>(
               &_ModuleTeam_Ntf_CreateTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ModuleTeam_Ntf_CreateTeam& a, ModuleTeam_Ntf_CreateTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Ntf_CreateTeam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Ntf_CreateTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Ntf_CreateTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Ntf_CreateTeam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Ntf_CreateTeam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Ntf_CreateTeam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Ntf_CreateTeam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Ntf_CreateTeam";
  }
  protected:
  explicit ModuleTeam_Ntf_CreateTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kMemberListFieldNumber = 2,
    kNotteamFieldNumber = 3,
    kOwnTeamFieldNumber = 4,
  };
  // .common.TeamBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::common::TeamBase& base() const;
  PROTOBUF_NODISCARD ::common::TeamBase* release_base();
  ::common::TeamBase* mutable_base();
  void set_allocated_base(::common::TeamBase* base);
  private:
  const ::common::TeamBase& _internal_base() const;
  ::common::TeamBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::common::TeamBase* base);
  ::common::TeamBase* unsafe_arena_release_base();

  // .common.TeamMemberList memberList = 2;
  bool has_memberlist() const;
  private:
  bool _internal_has_memberlist() const;
  public:
  void clear_memberlist();
  const ::common::TeamMemberList& memberlist() const;
  PROTOBUF_NODISCARD ::common::TeamMemberList* release_memberlist();
  ::common::TeamMemberList* mutable_memberlist();
  void set_allocated_memberlist(::common::TeamMemberList* memberlist);
  private:
  const ::common::TeamMemberList& _internal_memberlist() const;
  ::common::TeamMemberList* _internal_mutable_memberlist();
  public:
  void unsafe_arena_set_allocated_memberlist(
      ::common::TeamMemberList* memberlist);
  ::common::TeamMemberList* unsafe_arena_release_memberlist();

  // .common.NotOwnTeamInfo notteam = 3;
  bool has_notteam() const;
  private:
  bool _internal_has_notteam() const;
  public:
  void clear_notteam();
  const ::common::NotOwnTeamInfo& notteam() const;
  PROTOBUF_NODISCARD ::common::NotOwnTeamInfo* release_notteam();
  ::common::NotOwnTeamInfo* mutable_notteam();
  void set_allocated_notteam(::common::NotOwnTeamInfo* notteam);
  private:
  const ::common::NotOwnTeamInfo& _internal_notteam() const;
  ::common::NotOwnTeamInfo* _internal_mutable_notteam();
  public:
  void unsafe_arena_set_allocated_notteam(
      ::common::NotOwnTeamInfo* notteam);
  ::common::NotOwnTeamInfo* unsafe_arena_release_notteam();

  // .common.OwnTeamInfo ownTeam = 4;
  bool has_ownteam() const;
  private:
  bool _internal_has_ownteam() const;
  public:
  void clear_ownteam();
  const ::common::OwnTeamInfo& ownteam() const;
  PROTOBUF_NODISCARD ::common::OwnTeamInfo* release_ownteam();
  ::common::OwnTeamInfo* mutable_ownteam();
  void set_allocated_ownteam(::common::OwnTeamInfo* ownteam);
  private:
  const ::common::OwnTeamInfo& _internal_ownteam() const;
  ::common::OwnTeamInfo* _internal_mutable_ownteam();
  public:
  void unsafe_arena_set_allocated_ownteam(
      ::common::OwnTeamInfo* ownteam);
  ::common::OwnTeamInfo* unsafe_arena_release_ownteam();

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Ntf_CreateTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::TeamBase* base_;
  ::common::TeamMemberList* memberlist_;
  ::common::NotOwnTeamInfo* notteam_;
  ::common::OwnTeamInfo* ownteam_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Ntf_SelfJoinTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Ntf_SelfJoinTeam) */ {
 public:
  inline ModuleTeam_Ntf_SelfJoinTeam() : ModuleTeam_Ntf_SelfJoinTeam(nullptr) {}
  ~ModuleTeam_Ntf_SelfJoinTeam() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Ntf_SelfJoinTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Ntf_SelfJoinTeam(const ModuleTeam_Ntf_SelfJoinTeam& from);
  ModuleTeam_Ntf_SelfJoinTeam(ModuleTeam_Ntf_SelfJoinTeam&& from) noexcept
    : ModuleTeam_Ntf_SelfJoinTeam() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Ntf_SelfJoinTeam& operator=(const ModuleTeam_Ntf_SelfJoinTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Ntf_SelfJoinTeam& operator=(ModuleTeam_Ntf_SelfJoinTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Ntf_SelfJoinTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Ntf_SelfJoinTeam* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Ntf_SelfJoinTeam*>(
               &_ModuleTeam_Ntf_SelfJoinTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ModuleTeam_Ntf_SelfJoinTeam& a, ModuleTeam_Ntf_SelfJoinTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Ntf_SelfJoinTeam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Ntf_SelfJoinTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Ntf_SelfJoinTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Ntf_SelfJoinTeam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Ntf_SelfJoinTeam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Ntf_SelfJoinTeam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Ntf_SelfJoinTeam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Ntf_SelfJoinTeam";
  }
  protected:
  explicit ModuleTeam_Ntf_SelfJoinTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kMemberListFieldNumber = 2,
    kNotteamFieldNumber = 3,
    kOwnTeamFieldNumber = 4,
  };
  // .common.TeamBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::common::TeamBase& base() const;
  PROTOBUF_NODISCARD ::common::TeamBase* release_base();
  ::common::TeamBase* mutable_base();
  void set_allocated_base(::common::TeamBase* base);
  private:
  const ::common::TeamBase& _internal_base() const;
  ::common::TeamBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::common::TeamBase* base);
  ::common::TeamBase* unsafe_arena_release_base();

  // .common.TeamMemberList memberList = 2;
  bool has_memberlist() const;
  private:
  bool _internal_has_memberlist() const;
  public:
  void clear_memberlist();
  const ::common::TeamMemberList& memberlist() const;
  PROTOBUF_NODISCARD ::common::TeamMemberList* release_memberlist();
  ::common::TeamMemberList* mutable_memberlist();
  void set_allocated_memberlist(::common::TeamMemberList* memberlist);
  private:
  const ::common::TeamMemberList& _internal_memberlist() const;
  ::common::TeamMemberList* _internal_mutable_memberlist();
  public:
  void unsafe_arena_set_allocated_memberlist(
      ::common::TeamMemberList* memberlist);
  ::common::TeamMemberList* unsafe_arena_release_memberlist();

  // .common.NotOwnTeamInfo notteam = 3;
  bool has_notteam() const;
  private:
  bool _internal_has_notteam() const;
  public:
  void clear_notteam();
  const ::common::NotOwnTeamInfo& notteam() const;
  PROTOBUF_NODISCARD ::common::NotOwnTeamInfo* release_notteam();
  ::common::NotOwnTeamInfo* mutable_notteam();
  void set_allocated_notteam(::common::NotOwnTeamInfo* notteam);
  private:
  const ::common::NotOwnTeamInfo& _internal_notteam() const;
  ::common::NotOwnTeamInfo* _internal_mutable_notteam();
  public:
  void unsafe_arena_set_allocated_notteam(
      ::common::NotOwnTeamInfo* notteam);
  ::common::NotOwnTeamInfo* unsafe_arena_release_notteam();

  // .common.OwnTeamInfo ownTeam = 4;
  bool has_ownteam() const;
  private:
  bool _internal_has_ownteam() const;
  public:
  void clear_ownteam();
  const ::common::OwnTeamInfo& ownteam() const;
  PROTOBUF_NODISCARD ::common::OwnTeamInfo* release_ownteam();
  ::common::OwnTeamInfo* mutable_ownteam();
  void set_allocated_ownteam(::common::OwnTeamInfo* ownteam);
  private:
  const ::common::OwnTeamInfo& _internal_ownteam() const;
  ::common::OwnTeamInfo* _internal_mutable_ownteam();
  public:
  void unsafe_arena_set_allocated_ownteam(
      ::common::OwnTeamInfo* ownteam);
  ::common::OwnTeamInfo* unsafe_arena_release_ownteam();

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Ntf_SelfJoinTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::TeamBase* base_;
  ::common::TeamMemberList* memberlist_;
  ::common::NotOwnTeamInfo* notteam_;
  ::common::OwnTeamInfo* ownteam_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Ntf_UpdateTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Ntf_UpdateTeam) */ {
 public:
  inline ModuleTeam_Ntf_UpdateTeam() : ModuleTeam_Ntf_UpdateTeam(nullptr) {}
  ~ModuleTeam_Ntf_UpdateTeam() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Ntf_UpdateTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Ntf_UpdateTeam(const ModuleTeam_Ntf_UpdateTeam& from);
  ModuleTeam_Ntf_UpdateTeam(ModuleTeam_Ntf_UpdateTeam&& from) noexcept
    : ModuleTeam_Ntf_UpdateTeam() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Ntf_UpdateTeam& operator=(const ModuleTeam_Ntf_UpdateTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Ntf_UpdateTeam& operator=(ModuleTeam_Ntf_UpdateTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Ntf_UpdateTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Ntf_UpdateTeam* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Ntf_UpdateTeam*>(
               &_ModuleTeam_Ntf_UpdateTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ModuleTeam_Ntf_UpdateTeam& a, ModuleTeam_Ntf_UpdateTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Ntf_UpdateTeam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Ntf_UpdateTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Ntf_UpdateTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Ntf_UpdateTeam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Ntf_UpdateTeam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Ntf_UpdateTeam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Ntf_UpdateTeam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Ntf_UpdateTeam";
  }
  protected:
  explicit ModuleTeam_Ntf_UpdateTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldListFieldNumber = 1,
  };
  // .common.TeamFieldList fieldList = 1;
  bool has_fieldlist() const;
  private:
  bool _internal_has_fieldlist() const;
  public:
  void clear_fieldlist();
  const ::common::TeamFieldList& fieldlist() const;
  PROTOBUF_NODISCARD ::common::TeamFieldList* release_fieldlist();
  ::common::TeamFieldList* mutable_fieldlist();
  void set_allocated_fieldlist(::common::TeamFieldList* fieldlist);
  private:
  const ::common::TeamFieldList& _internal_fieldlist() const;
  ::common::TeamFieldList* _internal_mutable_fieldlist();
  public:
  void unsafe_arena_set_allocated_fieldlist(
      ::common::TeamFieldList* fieldlist);
  ::common::TeamFieldList* unsafe_arena_release_fieldlist();

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Ntf_UpdateTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::TeamFieldList* fieldlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Ntf_AddMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Ntf_AddMember) */ {
 public:
  inline ModuleTeam_Ntf_AddMember() : ModuleTeam_Ntf_AddMember(nullptr) {}
  ~ModuleTeam_Ntf_AddMember() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Ntf_AddMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Ntf_AddMember(const ModuleTeam_Ntf_AddMember& from);
  ModuleTeam_Ntf_AddMember(ModuleTeam_Ntf_AddMember&& from) noexcept
    : ModuleTeam_Ntf_AddMember() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Ntf_AddMember& operator=(const ModuleTeam_Ntf_AddMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Ntf_AddMember& operator=(ModuleTeam_Ntf_AddMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Ntf_AddMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Ntf_AddMember* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Ntf_AddMember*>(
               &_ModuleTeam_Ntf_AddMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ModuleTeam_Ntf_AddMember& a, ModuleTeam_Ntf_AddMember& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Ntf_AddMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Ntf_AddMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Ntf_AddMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Ntf_AddMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Ntf_AddMember& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Ntf_AddMember& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Ntf_AddMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Ntf_AddMember";
  }
  protected:
  explicit ModuleTeam_Ntf_AddMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemeberListFieldNumber = 1,
  };
  // .common.TeamMemberList memeberList = 1;
  bool has_memeberlist() const;
  private:
  bool _internal_has_memeberlist() const;
  public:
  void clear_memeberlist();
  const ::common::TeamMemberList& memeberlist() const;
  PROTOBUF_NODISCARD ::common::TeamMemberList* release_memeberlist();
  ::common::TeamMemberList* mutable_memeberlist();
  void set_allocated_memeberlist(::common::TeamMemberList* memeberlist);
  private:
  const ::common::TeamMemberList& _internal_memeberlist() const;
  ::common::TeamMemberList* _internal_mutable_memeberlist();
  public:
  void unsafe_arena_set_allocated_memeberlist(
      ::common::TeamMemberList* memeberlist);
  ::common::TeamMemberList* unsafe_arena_release_memeberlist();

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Ntf_AddMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::TeamMemberList* memeberlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Ntf_RemoveMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Ntf_RemoveMember) */ {
 public:
  inline ModuleTeam_Ntf_RemoveMember() : ModuleTeam_Ntf_RemoveMember(nullptr) {}
  ~ModuleTeam_Ntf_RemoveMember() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Ntf_RemoveMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Ntf_RemoveMember(const ModuleTeam_Ntf_RemoveMember& from);
  ModuleTeam_Ntf_RemoveMember(ModuleTeam_Ntf_RemoveMember&& from) noexcept
    : ModuleTeam_Ntf_RemoveMember() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Ntf_RemoveMember& operator=(const ModuleTeam_Ntf_RemoveMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Ntf_RemoveMember& operator=(ModuleTeam_Ntf_RemoveMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Ntf_RemoveMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Ntf_RemoveMember* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Ntf_RemoveMember*>(
               &_ModuleTeam_Ntf_RemoveMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ModuleTeam_Ntf_RemoveMember& a, ModuleTeam_Ntf_RemoveMember& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Ntf_RemoveMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Ntf_RemoveMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Ntf_RemoveMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Ntf_RemoveMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Ntf_RemoveMember& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Ntf_RemoveMember& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Ntf_RemoveMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Ntf_RemoveMember";
  }
  protected:
  explicit ModuleTeam_Ntf_RemoveMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdsFieldNumber = 1,
  };
  // repeated uint64 roleIds = 1;
  int roleids_size() const;
  private:
  int _internal_roleids_size() const;
  public:
  void clear_roleids();
  private:
  uint64_t _internal_roleids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_roleids() const;
  void _internal_add_roleids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_roleids();
  public:
  uint64_t roleids(int index) const;
  void set_roleids(int index, uint64_t value);
  void add_roleids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      roleids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_roleids();

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Ntf_RemoveMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > roleids_;
  mutable std::atomic<int> _roleids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Ntf_UpdateMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Ntf_UpdateMember) */ {
 public:
  inline ModuleTeam_Ntf_UpdateMember() : ModuleTeam_Ntf_UpdateMember(nullptr) {}
  ~ModuleTeam_Ntf_UpdateMember() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Ntf_UpdateMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Ntf_UpdateMember(const ModuleTeam_Ntf_UpdateMember& from);
  ModuleTeam_Ntf_UpdateMember(ModuleTeam_Ntf_UpdateMember&& from) noexcept
    : ModuleTeam_Ntf_UpdateMember() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Ntf_UpdateMember& operator=(const ModuleTeam_Ntf_UpdateMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Ntf_UpdateMember& operator=(ModuleTeam_Ntf_UpdateMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Ntf_UpdateMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Ntf_UpdateMember* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Ntf_UpdateMember*>(
               &_ModuleTeam_Ntf_UpdateMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ModuleTeam_Ntf_UpdateMember& a, ModuleTeam_Ntf_UpdateMember& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Ntf_UpdateMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Ntf_UpdateMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Ntf_UpdateMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Ntf_UpdateMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Ntf_UpdateMember& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Ntf_UpdateMember& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Ntf_UpdateMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Ntf_UpdateMember";
  }
  protected:
  explicit ModuleTeam_Ntf_UpdateMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldListFieldNumber = 2,
    kRoleIdFieldNumber = 1,
  };
  // .common.TeamMemberFieldList fieldList = 2;
  bool has_fieldlist() const;
  private:
  bool _internal_has_fieldlist() const;
  public:
  void clear_fieldlist();
  const ::common::TeamMemberFieldList& fieldlist() const;
  PROTOBUF_NODISCARD ::common::TeamMemberFieldList* release_fieldlist();
  ::common::TeamMemberFieldList* mutable_fieldlist();
  void set_allocated_fieldlist(::common::TeamMemberFieldList* fieldlist);
  private:
  const ::common::TeamMemberFieldList& _internal_fieldlist() const;
  ::common::TeamMemberFieldList* _internal_mutable_fieldlist();
  public:
  void unsafe_arena_set_allocated_fieldlist(
      ::common::TeamMemberFieldList* fieldlist);
  ::common::TeamMemberFieldList* unsafe_arena_release_fieldlist();

  // uint64 roleId = 1;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Ntf_UpdateMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::TeamMemberFieldList* fieldlist_;
  uint64_t roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Req_LeaderFireMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Req_LeaderFireMember) */ {
 public:
  inline ModuleTeam_Req_LeaderFireMember() : ModuleTeam_Req_LeaderFireMember(nullptr) {}
  ~ModuleTeam_Req_LeaderFireMember() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Req_LeaderFireMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Req_LeaderFireMember(const ModuleTeam_Req_LeaderFireMember& from);
  ModuleTeam_Req_LeaderFireMember(ModuleTeam_Req_LeaderFireMember&& from) noexcept
    : ModuleTeam_Req_LeaderFireMember() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Req_LeaderFireMember& operator=(const ModuleTeam_Req_LeaderFireMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Req_LeaderFireMember& operator=(ModuleTeam_Req_LeaderFireMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Req_LeaderFireMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Req_LeaderFireMember* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Req_LeaderFireMember*>(
               &_ModuleTeam_Req_LeaderFireMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ModuleTeam_Req_LeaderFireMember& a, ModuleTeam_Req_LeaderFireMember& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Req_LeaderFireMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Req_LeaderFireMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Req_LeaderFireMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Req_LeaderFireMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Req_LeaderFireMember& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Req_LeaderFireMember& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Req_LeaderFireMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Req_LeaderFireMember";
  }
  protected:
  explicit ModuleTeam_Req_LeaderFireMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
  };
  // uint64 roleId = 1;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Req_LeaderFireMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Req_LeaderChangeTarget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Req_LeaderChangeTarget) */ {
 public:
  inline ModuleTeam_Req_LeaderChangeTarget() : ModuleTeam_Req_LeaderChangeTarget(nullptr) {}
  ~ModuleTeam_Req_LeaderChangeTarget() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Req_LeaderChangeTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Req_LeaderChangeTarget(const ModuleTeam_Req_LeaderChangeTarget& from);
  ModuleTeam_Req_LeaderChangeTarget(ModuleTeam_Req_LeaderChangeTarget&& from) noexcept
    : ModuleTeam_Req_LeaderChangeTarget() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Req_LeaderChangeTarget& operator=(const ModuleTeam_Req_LeaderChangeTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Req_LeaderChangeTarget& operator=(ModuleTeam_Req_LeaderChangeTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Req_LeaderChangeTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Req_LeaderChangeTarget* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Req_LeaderChangeTarget*>(
               &_ModuleTeam_Req_LeaderChangeTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ModuleTeam_Req_LeaderChangeTarget& a, ModuleTeam_Req_LeaderChangeTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Req_LeaderChangeTarget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Req_LeaderChangeTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Req_LeaderChangeTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Req_LeaderChangeTarget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Req_LeaderChangeTarget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Req_LeaderChangeTarget& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Req_LeaderChangeTarget* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Req_LeaderChangeTarget";
  }
  protected:
  explicit ModuleTeam_Req_LeaderChangeTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetIdFieldNumber = 1,
    kMinLevelFieldNumber = 2,
    kMaxLevelFieldNumber = 3,
  };
  // uint32 targetId = 1;
  void clear_targetid();
  uint32_t targetid() const;
  void set_targetid(uint32_t value);
  private:
  uint32_t _internal_targetid() const;
  void _internal_set_targetid(uint32_t value);
  public:

  // uint32 minLevel = 2;
  void clear_minlevel();
  uint32_t minlevel() const;
  void set_minlevel(uint32_t value);
  private:
  uint32_t _internal_minlevel() const;
  void _internal_set_minlevel(uint32_t value);
  public:

  // uint32 maxLevel = 3;
  void clear_maxlevel();
  uint32_t maxlevel() const;
  void set_maxlevel(uint32_t value);
  private:
  uint32_t _internal_maxlevel() const;
  void _internal_set_maxlevel(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Req_LeaderChangeTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t targetid_;
  uint32_t minlevel_;
  uint32_t maxlevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Req_LeaderCancelMatch final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Req_LeaderCancelMatch) */ {
 public:
  inline ModuleTeam_Req_LeaderCancelMatch() : ModuleTeam_Req_LeaderCancelMatch(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Req_LeaderCancelMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Req_LeaderCancelMatch(const ModuleTeam_Req_LeaderCancelMatch& from);
  ModuleTeam_Req_LeaderCancelMatch(ModuleTeam_Req_LeaderCancelMatch&& from) noexcept
    : ModuleTeam_Req_LeaderCancelMatch() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Req_LeaderCancelMatch& operator=(const ModuleTeam_Req_LeaderCancelMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Req_LeaderCancelMatch& operator=(ModuleTeam_Req_LeaderCancelMatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Req_LeaderCancelMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Req_LeaderCancelMatch* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Req_LeaderCancelMatch*>(
               &_ModuleTeam_Req_LeaderCancelMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ModuleTeam_Req_LeaderCancelMatch& a, ModuleTeam_Req_LeaderCancelMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Req_LeaderCancelMatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Req_LeaderCancelMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Req_LeaderCancelMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Req_LeaderCancelMatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ModuleTeam_Req_LeaderCancelMatch& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ModuleTeam_Req_LeaderCancelMatch& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Req_LeaderCancelMatch";
  }
  protected:
  explicit ModuleTeam_Req_LeaderCancelMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Req_LeaderCancelMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Req_LeaderTogetherMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Req_LeaderTogetherMember) */ {
 public:
  inline ModuleTeam_Req_LeaderTogetherMember() : ModuleTeam_Req_LeaderTogetherMember(nullptr) {}
  ~ModuleTeam_Req_LeaderTogetherMember() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Req_LeaderTogetherMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Req_LeaderTogetherMember(const ModuleTeam_Req_LeaderTogetherMember& from);
  ModuleTeam_Req_LeaderTogetherMember(ModuleTeam_Req_LeaderTogetherMember&& from) noexcept
    : ModuleTeam_Req_LeaderTogetherMember() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Req_LeaderTogetherMember& operator=(const ModuleTeam_Req_LeaderTogetherMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Req_LeaderTogetherMember& operator=(ModuleTeam_Req_LeaderTogetherMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Req_LeaderTogetherMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Req_LeaderTogetherMember* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Req_LeaderTogetherMember*>(
               &_ModuleTeam_Req_LeaderTogetherMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ModuleTeam_Req_LeaderTogetherMember& a, ModuleTeam_Req_LeaderTogetherMember& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Req_LeaderTogetherMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Req_LeaderTogetherMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Req_LeaderTogetherMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Req_LeaderTogetherMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Req_LeaderTogetherMember& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Req_LeaderTogetherMember& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Req_LeaderTogetherMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Req_LeaderTogetherMember";
  }
  protected:
  explicit ModuleTeam_Req_LeaderTogetherMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
  };
  // uint64 roleId = 1;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Req_LeaderTogetherMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Req_LeaderAppoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Req_LeaderAppoint) */ {
 public:
  inline ModuleTeam_Req_LeaderAppoint() : ModuleTeam_Req_LeaderAppoint(nullptr) {}
  ~ModuleTeam_Req_LeaderAppoint() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Req_LeaderAppoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Req_LeaderAppoint(const ModuleTeam_Req_LeaderAppoint& from);
  ModuleTeam_Req_LeaderAppoint(ModuleTeam_Req_LeaderAppoint&& from) noexcept
    : ModuleTeam_Req_LeaderAppoint() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Req_LeaderAppoint& operator=(const ModuleTeam_Req_LeaderAppoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Req_LeaderAppoint& operator=(ModuleTeam_Req_LeaderAppoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Req_LeaderAppoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Req_LeaderAppoint* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Req_LeaderAppoint*>(
               &_ModuleTeam_Req_LeaderAppoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ModuleTeam_Req_LeaderAppoint& a, ModuleTeam_Req_LeaderAppoint& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Req_LeaderAppoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Req_LeaderAppoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Req_LeaderAppoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Req_LeaderAppoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Req_LeaderAppoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Req_LeaderAppoint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Req_LeaderAppoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Req_LeaderAppoint";
  }
  protected:
  explicit ModuleTeam_Req_LeaderAppoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
  };
  // uint64 roleId = 1;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Req_LeaderAppoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Req_LeaderRefuseAllApply final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Req_LeaderRefuseAllApply) */ {
 public:
  inline ModuleTeam_Req_LeaderRefuseAllApply() : ModuleTeam_Req_LeaderRefuseAllApply(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Req_LeaderRefuseAllApply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Req_LeaderRefuseAllApply(const ModuleTeam_Req_LeaderRefuseAllApply& from);
  ModuleTeam_Req_LeaderRefuseAllApply(ModuleTeam_Req_LeaderRefuseAllApply&& from) noexcept
    : ModuleTeam_Req_LeaderRefuseAllApply() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Req_LeaderRefuseAllApply& operator=(const ModuleTeam_Req_LeaderRefuseAllApply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Req_LeaderRefuseAllApply& operator=(ModuleTeam_Req_LeaderRefuseAllApply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Req_LeaderRefuseAllApply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Req_LeaderRefuseAllApply* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Req_LeaderRefuseAllApply*>(
               &_ModuleTeam_Req_LeaderRefuseAllApply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ModuleTeam_Req_LeaderRefuseAllApply& a, ModuleTeam_Req_LeaderRefuseAllApply& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Req_LeaderRefuseAllApply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Req_LeaderRefuseAllApply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Req_LeaderRefuseAllApply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Req_LeaderRefuseAllApply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ModuleTeam_Req_LeaderRefuseAllApply& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ModuleTeam_Req_LeaderRefuseAllApply& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Req_LeaderRefuseAllApply";
  }
  protected:
  explicit ModuleTeam_Req_LeaderRefuseAllApply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Req_LeaderRefuseAllApply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Req_LeaderAgreeAllApply final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Req_LeaderAgreeAllApply) */ {
 public:
  inline ModuleTeam_Req_LeaderAgreeAllApply() : ModuleTeam_Req_LeaderAgreeAllApply(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Req_LeaderAgreeAllApply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Req_LeaderAgreeAllApply(const ModuleTeam_Req_LeaderAgreeAllApply& from);
  ModuleTeam_Req_LeaderAgreeAllApply(ModuleTeam_Req_LeaderAgreeAllApply&& from) noexcept
    : ModuleTeam_Req_LeaderAgreeAllApply() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Req_LeaderAgreeAllApply& operator=(const ModuleTeam_Req_LeaderAgreeAllApply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Req_LeaderAgreeAllApply& operator=(ModuleTeam_Req_LeaderAgreeAllApply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Req_LeaderAgreeAllApply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Req_LeaderAgreeAllApply* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Req_LeaderAgreeAllApply*>(
               &_ModuleTeam_Req_LeaderAgreeAllApply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ModuleTeam_Req_LeaderAgreeAllApply& a, ModuleTeam_Req_LeaderAgreeAllApply& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Req_LeaderAgreeAllApply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Req_LeaderAgreeAllApply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Req_LeaderAgreeAllApply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Req_LeaderAgreeAllApply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ModuleTeam_Req_LeaderAgreeAllApply& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ModuleTeam_Req_LeaderAgreeAllApply& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Req_LeaderAgreeAllApply";
  }
  protected:
  explicit ModuleTeam_Req_LeaderAgreeAllApply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Req_LeaderAgreeAllApply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Req_LeaderRefuseApply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Req_LeaderRefuseApply) */ {
 public:
  inline ModuleTeam_Req_LeaderRefuseApply() : ModuleTeam_Req_LeaderRefuseApply(nullptr) {}
  ~ModuleTeam_Req_LeaderRefuseApply() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Req_LeaderRefuseApply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Req_LeaderRefuseApply(const ModuleTeam_Req_LeaderRefuseApply& from);
  ModuleTeam_Req_LeaderRefuseApply(ModuleTeam_Req_LeaderRefuseApply&& from) noexcept
    : ModuleTeam_Req_LeaderRefuseApply() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Req_LeaderRefuseApply& operator=(const ModuleTeam_Req_LeaderRefuseApply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Req_LeaderRefuseApply& operator=(ModuleTeam_Req_LeaderRefuseApply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Req_LeaderRefuseApply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Req_LeaderRefuseApply* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Req_LeaderRefuseApply*>(
               &_ModuleTeam_Req_LeaderRefuseApply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ModuleTeam_Req_LeaderRefuseApply& a, ModuleTeam_Req_LeaderRefuseApply& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Req_LeaderRefuseApply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Req_LeaderRefuseApply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Req_LeaderRefuseApply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Req_LeaderRefuseApply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Req_LeaderRefuseApply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Req_LeaderRefuseApply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Req_LeaderRefuseApply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Req_LeaderRefuseApply";
  }
  protected:
  explicit ModuleTeam_Req_LeaderRefuseApply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
    kZoneIdFFieldNumber = 2,
  };
  // uint64 roleId = 1;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // uint32 zoneIdF = 2;
  void clear_zoneidf();
  uint32_t zoneidf() const;
  void set_zoneidf(uint32_t value);
  private:
  uint32_t _internal_zoneidf() const;
  void _internal_set_zoneidf(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Req_LeaderRefuseApply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t roleid_;
  uint32_t zoneidf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Req_LeaderAgreeApply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Req_LeaderAgreeApply) */ {
 public:
  inline ModuleTeam_Req_LeaderAgreeApply() : ModuleTeam_Req_LeaderAgreeApply(nullptr) {}
  ~ModuleTeam_Req_LeaderAgreeApply() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Req_LeaderAgreeApply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Req_LeaderAgreeApply(const ModuleTeam_Req_LeaderAgreeApply& from);
  ModuleTeam_Req_LeaderAgreeApply(ModuleTeam_Req_LeaderAgreeApply&& from) noexcept
    : ModuleTeam_Req_LeaderAgreeApply() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Req_LeaderAgreeApply& operator=(const ModuleTeam_Req_LeaderAgreeApply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Req_LeaderAgreeApply& operator=(ModuleTeam_Req_LeaderAgreeApply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Req_LeaderAgreeApply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Req_LeaderAgreeApply* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Req_LeaderAgreeApply*>(
               &_ModuleTeam_Req_LeaderAgreeApply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ModuleTeam_Req_LeaderAgreeApply& a, ModuleTeam_Req_LeaderAgreeApply& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Req_LeaderAgreeApply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Req_LeaderAgreeApply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Req_LeaderAgreeApply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Req_LeaderAgreeApply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Req_LeaderAgreeApply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Req_LeaderAgreeApply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Req_LeaderAgreeApply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Req_LeaderAgreeApply";
  }
  protected:
  explicit ModuleTeam_Req_LeaderAgreeApply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
    kZoneIdFFieldNumber = 2,
  };
  // uint64 roleId = 1;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // uint32 zoneIdF = 2;
  void clear_zoneidf();
  uint32_t zoneidf() const;
  void set_zoneidf(uint32_t value);
  private:
  uint32_t _internal_zoneidf() const;
  void _internal_set_zoneidf(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Req_LeaderAgreeApply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t roleid_;
  uint32_t zoneidf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Ntf_LeaderAddApply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Ntf_LeaderAddApply) */ {
 public:
  inline ModuleTeam_Ntf_LeaderAddApply() : ModuleTeam_Ntf_LeaderAddApply(nullptr) {}
  ~ModuleTeam_Ntf_LeaderAddApply() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Ntf_LeaderAddApply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Ntf_LeaderAddApply(const ModuleTeam_Ntf_LeaderAddApply& from);
  ModuleTeam_Ntf_LeaderAddApply(ModuleTeam_Ntf_LeaderAddApply&& from) noexcept
    : ModuleTeam_Ntf_LeaderAddApply() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Ntf_LeaderAddApply& operator=(const ModuleTeam_Ntf_LeaderAddApply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Ntf_LeaderAddApply& operator=(ModuleTeam_Ntf_LeaderAddApply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Ntf_LeaderAddApply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Ntf_LeaderAddApply* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Ntf_LeaderAddApply*>(
               &_ModuleTeam_Ntf_LeaderAddApply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ModuleTeam_Ntf_LeaderAddApply& a, ModuleTeam_Ntf_LeaderAddApply& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Ntf_LeaderAddApply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Ntf_LeaderAddApply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Ntf_LeaderAddApply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Ntf_LeaderAddApply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Ntf_LeaderAddApply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Ntf_LeaderAddApply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Ntf_LeaderAddApply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Ntf_LeaderAddApply";
  }
  protected:
  explicit ModuleTeam_Ntf_LeaderAddApply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplyListFieldNumber = 1,
  };
  // .common.TeamApplyList applyList = 1;
  bool has_applylist() const;
  private:
  bool _internal_has_applylist() const;
  public:
  void clear_applylist();
  const ::common::TeamApplyList& applylist() const;
  PROTOBUF_NODISCARD ::common::TeamApplyList* release_applylist();
  ::common::TeamApplyList* mutable_applylist();
  void set_allocated_applylist(::common::TeamApplyList* applylist);
  private:
  const ::common::TeamApplyList& _internal_applylist() const;
  ::common::TeamApplyList* _internal_mutable_applylist();
  public:
  void unsafe_arena_set_allocated_applylist(
      ::common::TeamApplyList* applylist);
  ::common::TeamApplyList* unsafe_arena_release_applylist();

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Ntf_LeaderAddApply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::TeamApplyList* applylist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Ntf_LeaderRemoveApply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Ntf_LeaderRemoveApply) */ {
 public:
  inline ModuleTeam_Ntf_LeaderRemoveApply() : ModuleTeam_Ntf_LeaderRemoveApply(nullptr) {}
  ~ModuleTeam_Ntf_LeaderRemoveApply() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Ntf_LeaderRemoveApply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Ntf_LeaderRemoveApply(const ModuleTeam_Ntf_LeaderRemoveApply& from);
  ModuleTeam_Ntf_LeaderRemoveApply(ModuleTeam_Ntf_LeaderRemoveApply&& from) noexcept
    : ModuleTeam_Ntf_LeaderRemoveApply() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Ntf_LeaderRemoveApply& operator=(const ModuleTeam_Ntf_LeaderRemoveApply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Ntf_LeaderRemoveApply& operator=(ModuleTeam_Ntf_LeaderRemoveApply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Ntf_LeaderRemoveApply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Ntf_LeaderRemoveApply* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Ntf_LeaderRemoveApply*>(
               &_ModuleTeam_Ntf_LeaderRemoveApply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ModuleTeam_Ntf_LeaderRemoveApply& a, ModuleTeam_Ntf_LeaderRemoveApply& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Ntf_LeaderRemoveApply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Ntf_LeaderRemoveApply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Ntf_LeaderRemoveApply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Ntf_LeaderRemoveApply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Ntf_LeaderRemoveApply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Ntf_LeaderRemoveApply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Ntf_LeaderRemoveApply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Ntf_LeaderRemoveApply";
  }
  protected:
  explicit ModuleTeam_Ntf_LeaderRemoveApply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdsFieldNumber = 1,
  };
  // repeated uint64 roleIds = 1;
  int roleids_size() const;
  private:
  int _internal_roleids_size() const;
  public:
  void clear_roleids();
  private:
  uint64_t _internal_roleids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_roleids() const;
  void _internal_add_roleids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_roleids();
  public:
  uint64_t roleids(int index) const;
  void set_roleids(int index, uint64_t value);
  void add_roleids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      roleids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_roleids();

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Ntf_LeaderRemoveApply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > roleids_;
  mutable std::atomic<int> _roleids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Ntf_LeaderUpdateApply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Ntf_LeaderUpdateApply) */ {
 public:
  inline ModuleTeam_Ntf_LeaderUpdateApply() : ModuleTeam_Ntf_LeaderUpdateApply(nullptr) {}
  ~ModuleTeam_Ntf_LeaderUpdateApply() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Ntf_LeaderUpdateApply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Ntf_LeaderUpdateApply(const ModuleTeam_Ntf_LeaderUpdateApply& from);
  ModuleTeam_Ntf_LeaderUpdateApply(ModuleTeam_Ntf_LeaderUpdateApply&& from) noexcept
    : ModuleTeam_Ntf_LeaderUpdateApply() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Ntf_LeaderUpdateApply& operator=(const ModuleTeam_Ntf_LeaderUpdateApply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Ntf_LeaderUpdateApply& operator=(ModuleTeam_Ntf_LeaderUpdateApply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Ntf_LeaderUpdateApply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Ntf_LeaderUpdateApply* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Ntf_LeaderUpdateApply*>(
               &_ModuleTeam_Ntf_LeaderUpdateApply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ModuleTeam_Ntf_LeaderUpdateApply& a, ModuleTeam_Ntf_LeaderUpdateApply& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Ntf_LeaderUpdateApply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Ntf_LeaderUpdateApply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Ntf_LeaderUpdateApply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Ntf_LeaderUpdateApply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Ntf_LeaderUpdateApply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Ntf_LeaderUpdateApply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Ntf_LeaderUpdateApply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Ntf_LeaderUpdateApply";
  }
  protected:
  explicit ModuleTeam_Ntf_LeaderUpdateApply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplyListFieldNumber = 1,
  };
  // .common.TeamApplyList applyList = 1;
  bool has_applylist() const;
  private:
  bool _internal_has_applylist() const;
  public:
  void clear_applylist();
  const ::common::TeamApplyList& applylist() const;
  PROTOBUF_NODISCARD ::common::TeamApplyList* release_applylist();
  ::common::TeamApplyList* mutable_applylist();
  void set_allocated_applylist(::common::TeamApplyList* applylist);
  private:
  const ::common::TeamApplyList& _internal_applylist() const;
  ::common::TeamApplyList* _internal_mutable_applylist();
  public:
  void unsafe_arena_set_allocated_applylist(
      ::common::TeamApplyList* applylist);
  ::common::TeamApplyList* unsafe_arena_release_applylist();

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Ntf_LeaderUpdateApply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::TeamApplyList* applylist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Req_InviteFriend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Req_InviteFriend) */ {
 public:
  inline ModuleTeam_Req_InviteFriend() : ModuleTeam_Req_InviteFriend(nullptr) {}
  ~ModuleTeam_Req_InviteFriend() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Req_InviteFriend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Req_InviteFriend(const ModuleTeam_Req_InviteFriend& from);
  ModuleTeam_Req_InviteFriend(ModuleTeam_Req_InviteFriend&& from) noexcept
    : ModuleTeam_Req_InviteFriend() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Req_InviteFriend& operator=(const ModuleTeam_Req_InviteFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Req_InviteFriend& operator=(ModuleTeam_Req_InviteFriend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Req_InviteFriend& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Req_InviteFriend* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Req_InviteFriend*>(
               &_ModuleTeam_Req_InviteFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ModuleTeam_Req_InviteFriend& a, ModuleTeam_Req_InviteFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Req_InviteFriend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Req_InviteFriend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Req_InviteFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Req_InviteFriend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Req_InviteFriend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Req_InviteFriend& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Req_InviteFriend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Req_InviteFriend";
  }
  protected:
  explicit ModuleTeam_Req_InviteFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
  };
  // uint64 roleId = 1;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Req_InviteFriend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Req_InviteFamily final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Req_InviteFamily) */ {
 public:
  inline ModuleTeam_Req_InviteFamily() : ModuleTeam_Req_InviteFamily(nullptr) {}
  ~ModuleTeam_Req_InviteFamily() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Req_InviteFamily(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Req_InviteFamily(const ModuleTeam_Req_InviteFamily& from);
  ModuleTeam_Req_InviteFamily(ModuleTeam_Req_InviteFamily&& from) noexcept
    : ModuleTeam_Req_InviteFamily() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Req_InviteFamily& operator=(const ModuleTeam_Req_InviteFamily& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Req_InviteFamily& operator=(ModuleTeam_Req_InviteFamily&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Req_InviteFamily& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Req_InviteFamily* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Req_InviteFamily*>(
               &_ModuleTeam_Req_InviteFamily_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ModuleTeam_Req_InviteFamily& a, ModuleTeam_Req_InviteFamily& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Req_InviteFamily* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Req_InviteFamily* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Req_InviteFamily* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Req_InviteFamily>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Req_InviteFamily& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Req_InviteFamily& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Req_InviteFamily* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Req_InviteFamily";
  }
  protected:
  explicit ModuleTeam_Req_InviteFamily(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
  };
  // uint64 roleId = 1;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Req_InviteFamily)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Req_InvitePlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Req_InvitePlayer) */ {
 public:
  inline ModuleTeam_Req_InvitePlayer() : ModuleTeam_Req_InvitePlayer(nullptr) {}
  ~ModuleTeam_Req_InvitePlayer() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Req_InvitePlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Req_InvitePlayer(const ModuleTeam_Req_InvitePlayer& from);
  ModuleTeam_Req_InvitePlayer(ModuleTeam_Req_InvitePlayer&& from) noexcept
    : ModuleTeam_Req_InvitePlayer() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Req_InvitePlayer& operator=(const ModuleTeam_Req_InvitePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Req_InvitePlayer& operator=(ModuleTeam_Req_InvitePlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Req_InvitePlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Req_InvitePlayer* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Req_InvitePlayer*>(
               &_ModuleTeam_Req_InvitePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ModuleTeam_Req_InvitePlayer& a, ModuleTeam_Req_InvitePlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Req_InvitePlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Req_InvitePlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Req_InvitePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Req_InvitePlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Req_InvitePlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Req_InvitePlayer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Req_InvitePlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Req_InvitePlayer";
  }
  protected:
  explicit ModuleTeam_Req_InvitePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
    kZoneIdFFieldNumber = 2,
  };
  // uint64 roleId = 1;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // uint32 zoneIdF = 2;
  void clear_zoneidf();
  uint32_t zoneidf() const;
  void set_zoneidf(uint32_t value);
  private:
  uint32_t _internal_zoneidf() const;
  void _internal_set_zoneidf(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Req_InvitePlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t roleid_;
  uint32_t zoneidf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Ntf_AddInvited final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Ntf_AddInvited) */ {
 public:
  inline ModuleTeam_Ntf_AddInvited() : ModuleTeam_Ntf_AddInvited(nullptr) {}
  ~ModuleTeam_Ntf_AddInvited() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Ntf_AddInvited(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Ntf_AddInvited(const ModuleTeam_Ntf_AddInvited& from);
  ModuleTeam_Ntf_AddInvited(ModuleTeam_Ntf_AddInvited&& from) noexcept
    : ModuleTeam_Ntf_AddInvited() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Ntf_AddInvited& operator=(const ModuleTeam_Ntf_AddInvited& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Ntf_AddInvited& operator=(ModuleTeam_Ntf_AddInvited&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Ntf_AddInvited& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Ntf_AddInvited* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Ntf_AddInvited*>(
               &_ModuleTeam_Ntf_AddInvited_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ModuleTeam_Ntf_AddInvited& a, ModuleTeam_Ntf_AddInvited& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Ntf_AddInvited* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Ntf_AddInvited* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Ntf_AddInvited* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Ntf_AddInvited>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Ntf_AddInvited& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Ntf_AddInvited& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Ntf_AddInvited* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Ntf_AddInvited";
  }
  protected:
  explicit ModuleTeam_Ntf_AddInvited(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvitedFieldNumber = 1,
  };
  // .common.TeamInvited invited = 1;
  bool has_invited() const;
  private:
  bool _internal_has_invited() const;
  public:
  void clear_invited();
  const ::common::TeamInvited& invited() const;
  PROTOBUF_NODISCARD ::common::TeamInvited* release_invited();
  ::common::TeamInvited* mutable_invited();
  void set_allocated_invited(::common::TeamInvited* invited);
  private:
  const ::common::TeamInvited& _internal_invited() const;
  ::common::TeamInvited* _internal_mutable_invited();
  public:
  void unsafe_arena_set_allocated_invited(
      ::common::TeamInvited* invited);
  ::common::TeamInvited* unsafe_arena_release_invited();

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Ntf_AddInvited)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::TeamInvited* invited_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Req_AgreeInvited final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Req_AgreeInvited) */ {
 public:
  inline ModuleTeam_Req_AgreeInvited() : ModuleTeam_Req_AgreeInvited(nullptr) {}
  ~ModuleTeam_Req_AgreeInvited() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Req_AgreeInvited(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Req_AgreeInvited(const ModuleTeam_Req_AgreeInvited& from);
  ModuleTeam_Req_AgreeInvited(ModuleTeam_Req_AgreeInvited&& from) noexcept
    : ModuleTeam_Req_AgreeInvited() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Req_AgreeInvited& operator=(const ModuleTeam_Req_AgreeInvited& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Req_AgreeInvited& operator=(ModuleTeam_Req_AgreeInvited&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Req_AgreeInvited& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Req_AgreeInvited* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Req_AgreeInvited*>(
               &_ModuleTeam_Req_AgreeInvited_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ModuleTeam_Req_AgreeInvited& a, ModuleTeam_Req_AgreeInvited& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Req_AgreeInvited* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Req_AgreeInvited* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Req_AgreeInvited* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Req_AgreeInvited>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Req_AgreeInvited& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Req_AgreeInvited& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Req_AgreeInvited* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Req_AgreeInvited";
  }
  protected:
  explicit ModuleTeam_Req_AgreeInvited(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamIdFieldNumber = 1,
    kLeaderSceneIdFieldNumber = 2,
  };
  // uint64 teamId = 1;
  void clear_teamid();
  uint64_t teamid() const;
  void set_teamid(uint64_t value);
  private:
  uint64_t _internal_teamid() const;
  void _internal_set_teamid(uint64_t value);
  public:

  // uint64 leaderSceneId = 2;
  void clear_leadersceneid();
  uint64_t leadersceneid() const;
  void set_leadersceneid(uint64_t value);
  private:
  uint64_t _internal_leadersceneid() const;
  void _internal_set_leadersceneid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Req_AgreeInvited)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t teamid_;
  uint64_t leadersceneid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Req_RefuseInvited final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Req_RefuseInvited) */ {
 public:
  inline ModuleTeam_Req_RefuseInvited() : ModuleTeam_Req_RefuseInvited(nullptr) {}
  ~ModuleTeam_Req_RefuseInvited() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Req_RefuseInvited(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Req_RefuseInvited(const ModuleTeam_Req_RefuseInvited& from);
  ModuleTeam_Req_RefuseInvited(ModuleTeam_Req_RefuseInvited&& from) noexcept
    : ModuleTeam_Req_RefuseInvited() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Req_RefuseInvited& operator=(const ModuleTeam_Req_RefuseInvited& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Req_RefuseInvited& operator=(ModuleTeam_Req_RefuseInvited&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Req_RefuseInvited& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Req_RefuseInvited* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Req_RefuseInvited*>(
               &_ModuleTeam_Req_RefuseInvited_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ModuleTeam_Req_RefuseInvited& a, ModuleTeam_Req_RefuseInvited& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Req_RefuseInvited* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Req_RefuseInvited* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Req_RefuseInvited* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Req_RefuseInvited>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Req_RefuseInvited& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Req_RefuseInvited& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Req_RefuseInvited* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Req_RefuseInvited";
  }
  protected:
  explicit ModuleTeam_Req_RefuseInvited(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamIdFieldNumber = 1,
  };
  // uint64 teamId = 1;
  void clear_teamid();
  uint64_t teamid() const;
  void set_teamid(uint64_t value);
  private:
  uint64_t _internal_teamid() const;
  void _internal_set_teamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Req_RefuseInvited)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t teamid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Req_LeaveTeam final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Req_LeaveTeam) */ {
 public:
  inline ModuleTeam_Req_LeaveTeam() : ModuleTeam_Req_LeaveTeam(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Req_LeaveTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Req_LeaveTeam(const ModuleTeam_Req_LeaveTeam& from);
  ModuleTeam_Req_LeaveTeam(ModuleTeam_Req_LeaveTeam&& from) noexcept
    : ModuleTeam_Req_LeaveTeam() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Req_LeaveTeam& operator=(const ModuleTeam_Req_LeaveTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Req_LeaveTeam& operator=(ModuleTeam_Req_LeaveTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Req_LeaveTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Req_LeaveTeam* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Req_LeaveTeam*>(
               &_ModuleTeam_Req_LeaveTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ModuleTeam_Req_LeaveTeam& a, ModuleTeam_Req_LeaveTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Req_LeaveTeam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Req_LeaveTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Req_LeaveTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Req_LeaveTeam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ModuleTeam_Req_LeaveTeam& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ModuleTeam_Req_LeaveTeam& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Req_LeaveTeam";
  }
  protected:
  explicit ModuleTeam_Req_LeaveTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Req_LeaveTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Ntf_LeaveTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Ntf_LeaveTeam) */ {
 public:
  inline ModuleTeam_Ntf_LeaveTeam() : ModuleTeam_Ntf_LeaveTeam(nullptr) {}
  ~ModuleTeam_Ntf_LeaveTeam() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Ntf_LeaveTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Ntf_LeaveTeam(const ModuleTeam_Ntf_LeaveTeam& from);
  ModuleTeam_Ntf_LeaveTeam(ModuleTeam_Ntf_LeaveTeam&& from) noexcept
    : ModuleTeam_Ntf_LeaveTeam() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Ntf_LeaveTeam& operator=(const ModuleTeam_Ntf_LeaveTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Ntf_LeaveTeam& operator=(ModuleTeam_Ntf_LeaveTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Ntf_LeaveTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Ntf_LeaveTeam* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Ntf_LeaveTeam*>(
               &_ModuleTeam_Ntf_LeaveTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ModuleTeam_Ntf_LeaveTeam& a, ModuleTeam_Ntf_LeaveTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Ntf_LeaveTeam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Ntf_LeaveTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Ntf_LeaveTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Ntf_LeaveTeam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Ntf_LeaveTeam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Ntf_LeaveTeam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Ntf_LeaveTeam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Ntf_LeaveTeam";
  }
  protected:
  explicit ModuleTeam_Ntf_LeaveTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Ntf_LeaveTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Req_ApplyTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Req_ApplyTeam) */ {
 public:
  inline ModuleTeam_Req_ApplyTeam() : ModuleTeam_Req_ApplyTeam(nullptr) {}
  ~ModuleTeam_Req_ApplyTeam() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Req_ApplyTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Req_ApplyTeam(const ModuleTeam_Req_ApplyTeam& from);
  ModuleTeam_Req_ApplyTeam(ModuleTeam_Req_ApplyTeam&& from) noexcept
    : ModuleTeam_Req_ApplyTeam() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Req_ApplyTeam& operator=(const ModuleTeam_Req_ApplyTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Req_ApplyTeam& operator=(ModuleTeam_Req_ApplyTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Req_ApplyTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Req_ApplyTeam* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Req_ApplyTeam*>(
               &_ModuleTeam_Req_ApplyTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ModuleTeam_Req_ApplyTeam& a, ModuleTeam_Req_ApplyTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Req_ApplyTeam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Req_ApplyTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Req_ApplyTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Req_ApplyTeam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Req_ApplyTeam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Req_ApplyTeam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Req_ApplyTeam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Req_ApplyTeam";
  }
  protected:
  explicit ModuleTeam_Req_ApplyTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamIdFieldNumber = 1,
    kLeaderSceneIdFieldNumber = 2,
  };
  // uint64 teamId = 1;
  void clear_teamid();
  uint64_t teamid() const;
  void set_teamid(uint64_t value);
  private:
  uint64_t _internal_teamid() const;
  void _internal_set_teamid(uint64_t value);
  public:

  // uint64 leaderSceneId = 2;
  void clear_leadersceneid();
  uint64_t leadersceneid() const;
  void set_leadersceneid(uint64_t value);
  private:
  uint64_t _internal_leadersceneid() const;
  void _internal_set_leadersceneid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Req_ApplyTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t teamid_;
  uint64_t leadersceneid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Req_FollowLeader final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Req_FollowLeader) */ {
 public:
  inline ModuleTeam_Req_FollowLeader() : ModuleTeam_Req_FollowLeader(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Req_FollowLeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Req_FollowLeader(const ModuleTeam_Req_FollowLeader& from);
  ModuleTeam_Req_FollowLeader(ModuleTeam_Req_FollowLeader&& from) noexcept
    : ModuleTeam_Req_FollowLeader() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Req_FollowLeader& operator=(const ModuleTeam_Req_FollowLeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Req_FollowLeader& operator=(ModuleTeam_Req_FollowLeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Req_FollowLeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Req_FollowLeader* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Req_FollowLeader*>(
               &_ModuleTeam_Req_FollowLeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ModuleTeam_Req_FollowLeader& a, ModuleTeam_Req_FollowLeader& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Req_FollowLeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Req_FollowLeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Req_FollowLeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Req_FollowLeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ModuleTeam_Req_FollowLeader& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ModuleTeam_Req_FollowLeader& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Req_FollowLeader";
  }
  protected:
  explicit ModuleTeam_Req_FollowLeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Req_FollowLeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Req_CancelFollow final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Req_CancelFollow) */ {
 public:
  inline ModuleTeam_Req_CancelFollow() : ModuleTeam_Req_CancelFollow(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Req_CancelFollow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Req_CancelFollow(const ModuleTeam_Req_CancelFollow& from);
  ModuleTeam_Req_CancelFollow(ModuleTeam_Req_CancelFollow&& from) noexcept
    : ModuleTeam_Req_CancelFollow() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Req_CancelFollow& operator=(const ModuleTeam_Req_CancelFollow& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Req_CancelFollow& operator=(ModuleTeam_Req_CancelFollow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Req_CancelFollow& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Req_CancelFollow* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Req_CancelFollow*>(
               &_ModuleTeam_Req_CancelFollow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ModuleTeam_Req_CancelFollow& a, ModuleTeam_Req_CancelFollow& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Req_CancelFollow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Req_CancelFollow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Req_CancelFollow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Req_CancelFollow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ModuleTeam_Req_CancelFollow& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ModuleTeam_Req_CancelFollow& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Req_CancelFollow";
  }
  protected:
  explicit ModuleTeam_Req_CancelFollow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Req_CancelFollow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Req_AreeTogether final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Req_AreeTogether) */ {
 public:
  inline ModuleTeam_Req_AreeTogether() : ModuleTeam_Req_AreeTogether(nullptr) {}
  ~ModuleTeam_Req_AreeTogether() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Req_AreeTogether(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Req_AreeTogether(const ModuleTeam_Req_AreeTogether& from);
  ModuleTeam_Req_AreeTogether(ModuleTeam_Req_AreeTogether&& from) noexcept
    : ModuleTeam_Req_AreeTogether() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Req_AreeTogether& operator=(const ModuleTeam_Req_AreeTogether& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Req_AreeTogether& operator=(ModuleTeam_Req_AreeTogether&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Req_AreeTogether& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Req_AreeTogether* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Req_AreeTogether*>(
               &_ModuleTeam_Req_AreeTogether_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ModuleTeam_Req_AreeTogether& a, ModuleTeam_Req_AreeTogether& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Req_AreeTogether* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Req_AreeTogether* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Req_AreeTogether* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Req_AreeTogether>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Req_AreeTogether& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Req_AreeTogether& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Req_AreeTogether* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Req_AreeTogether";
  }
  protected:
  explicit ModuleTeam_Req_AreeTogether(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamIdFieldNumber = 1,
  };
  // uint64 teamId = 1;
  void clear_teamid();
  uint64_t teamid() const;
  void set_teamid(uint64_t value);
  private:
  uint64_t _internal_teamid() const;
  void _internal_set_teamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Req_AreeTogether)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t teamid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Req_RefuseTogether final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Req_RefuseTogether) */ {
 public:
  inline ModuleTeam_Req_RefuseTogether() : ModuleTeam_Req_RefuseTogether(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Req_RefuseTogether(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Req_RefuseTogether(const ModuleTeam_Req_RefuseTogether& from);
  ModuleTeam_Req_RefuseTogether(ModuleTeam_Req_RefuseTogether&& from) noexcept
    : ModuleTeam_Req_RefuseTogether() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Req_RefuseTogether& operator=(const ModuleTeam_Req_RefuseTogether& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Req_RefuseTogether& operator=(ModuleTeam_Req_RefuseTogether&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Req_RefuseTogether& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Req_RefuseTogether* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Req_RefuseTogether*>(
               &_ModuleTeam_Req_RefuseTogether_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ModuleTeam_Req_RefuseTogether& a, ModuleTeam_Req_RefuseTogether& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Req_RefuseTogether* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Req_RefuseTogether* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Req_RefuseTogether* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Req_RefuseTogether>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ModuleTeam_Req_RefuseTogether& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ModuleTeam_Req_RefuseTogether& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Req_RefuseTogether";
  }
  protected:
  explicit ModuleTeam_Req_RefuseTogether(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Req_RefuseTogether)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Req_ReplaceLeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Req_ReplaceLeader) */ {
 public:
  inline ModuleTeam_Req_ReplaceLeader() : ModuleTeam_Req_ReplaceLeader(nullptr) {}
  ~ModuleTeam_Req_ReplaceLeader() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Req_ReplaceLeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Req_ReplaceLeader(const ModuleTeam_Req_ReplaceLeader& from);
  ModuleTeam_Req_ReplaceLeader(ModuleTeam_Req_ReplaceLeader&& from) noexcept
    : ModuleTeam_Req_ReplaceLeader() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Req_ReplaceLeader& operator=(const ModuleTeam_Req_ReplaceLeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Req_ReplaceLeader& operator=(ModuleTeam_Req_ReplaceLeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Req_ReplaceLeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Req_ReplaceLeader* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Req_ReplaceLeader*>(
               &_ModuleTeam_Req_ReplaceLeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ModuleTeam_Req_ReplaceLeader& a, ModuleTeam_Req_ReplaceLeader& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Req_ReplaceLeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Req_ReplaceLeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Req_ReplaceLeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Req_ReplaceLeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Req_ReplaceLeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Req_ReplaceLeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Req_ReplaceLeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Req_ReplaceLeader";
  }
  protected:
  explicit ModuleTeam_Req_ReplaceLeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
  };
  // uint64 roleId = 1;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Req_ReplaceLeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Req_PersonChangeTarget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Req_PersonChangeTarget) */ {
 public:
  inline ModuleTeam_Req_PersonChangeTarget() : ModuleTeam_Req_PersonChangeTarget(nullptr) {}
  ~ModuleTeam_Req_PersonChangeTarget() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Req_PersonChangeTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Req_PersonChangeTarget(const ModuleTeam_Req_PersonChangeTarget& from);
  ModuleTeam_Req_PersonChangeTarget(ModuleTeam_Req_PersonChangeTarget&& from) noexcept
    : ModuleTeam_Req_PersonChangeTarget() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Req_PersonChangeTarget& operator=(const ModuleTeam_Req_PersonChangeTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Req_PersonChangeTarget& operator=(ModuleTeam_Req_PersonChangeTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Req_PersonChangeTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Req_PersonChangeTarget* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Req_PersonChangeTarget*>(
               &_ModuleTeam_Req_PersonChangeTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ModuleTeam_Req_PersonChangeTarget& a, ModuleTeam_Req_PersonChangeTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Req_PersonChangeTarget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Req_PersonChangeTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Req_PersonChangeTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Req_PersonChangeTarget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Req_PersonChangeTarget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Req_PersonChangeTarget& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Req_PersonChangeTarget* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Req_PersonChangeTarget";
  }
  protected:
  explicit ModuleTeam_Req_PersonChangeTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargerIdFieldNumber = 1,
  };
  // uint32 targerId = 1;
  void clear_targerid();
  uint32_t targerid() const;
  void set_targerid(uint32_t value);
  private:
  uint32_t _internal_targerid() const;
  void _internal_set_targerid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Req_PersonChangeTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t targerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Req_PersonCancelMatch final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Req_PersonCancelMatch) */ {
 public:
  inline ModuleTeam_Req_PersonCancelMatch() : ModuleTeam_Req_PersonCancelMatch(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Req_PersonCancelMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Req_PersonCancelMatch(const ModuleTeam_Req_PersonCancelMatch& from);
  ModuleTeam_Req_PersonCancelMatch(ModuleTeam_Req_PersonCancelMatch&& from) noexcept
    : ModuleTeam_Req_PersonCancelMatch() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Req_PersonCancelMatch& operator=(const ModuleTeam_Req_PersonCancelMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Req_PersonCancelMatch& operator=(ModuleTeam_Req_PersonCancelMatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Req_PersonCancelMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Req_PersonCancelMatch* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Req_PersonCancelMatch*>(
               &_ModuleTeam_Req_PersonCancelMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ModuleTeam_Req_PersonCancelMatch& a, ModuleTeam_Req_PersonCancelMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Req_PersonCancelMatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Req_PersonCancelMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Req_PersonCancelMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Req_PersonCancelMatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ModuleTeam_Req_PersonCancelMatch& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ModuleTeam_Req_PersonCancelMatch& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Req_PersonCancelMatch";
  }
  protected:
  explicit ModuleTeam_Req_PersonCancelMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Req_PersonCancelMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Ntf_LeaderTogetherMember final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Ntf_LeaderTogetherMember) */ {
 public:
  inline ModuleTeam_Ntf_LeaderTogetherMember() : ModuleTeam_Ntf_LeaderTogetherMember(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Ntf_LeaderTogetherMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Ntf_LeaderTogetherMember(const ModuleTeam_Ntf_LeaderTogetherMember& from);
  ModuleTeam_Ntf_LeaderTogetherMember(ModuleTeam_Ntf_LeaderTogetherMember&& from) noexcept
    : ModuleTeam_Ntf_LeaderTogetherMember() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Ntf_LeaderTogetherMember& operator=(const ModuleTeam_Ntf_LeaderTogetherMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Ntf_LeaderTogetherMember& operator=(ModuleTeam_Ntf_LeaderTogetherMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Ntf_LeaderTogetherMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Ntf_LeaderTogetherMember* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Ntf_LeaderTogetherMember*>(
               &_ModuleTeam_Ntf_LeaderTogetherMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(ModuleTeam_Ntf_LeaderTogetherMember& a, ModuleTeam_Ntf_LeaderTogetherMember& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Ntf_LeaderTogetherMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Ntf_LeaderTogetherMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Ntf_LeaderTogetherMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Ntf_LeaderTogetherMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ModuleTeam_Ntf_LeaderTogetherMember& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ModuleTeam_Ntf_LeaderTogetherMember& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Ntf_LeaderTogetherMember";
  }
  protected:
  explicit ModuleTeam_Ntf_LeaderTogetherMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Ntf_LeaderTogetherMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Ntf_LeaderEmptyApply final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Ntf_LeaderEmptyApply) */ {
 public:
  inline ModuleTeam_Ntf_LeaderEmptyApply() : ModuleTeam_Ntf_LeaderEmptyApply(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Ntf_LeaderEmptyApply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Ntf_LeaderEmptyApply(const ModuleTeam_Ntf_LeaderEmptyApply& from);
  ModuleTeam_Ntf_LeaderEmptyApply(ModuleTeam_Ntf_LeaderEmptyApply&& from) noexcept
    : ModuleTeam_Ntf_LeaderEmptyApply() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Ntf_LeaderEmptyApply& operator=(const ModuleTeam_Ntf_LeaderEmptyApply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Ntf_LeaderEmptyApply& operator=(ModuleTeam_Ntf_LeaderEmptyApply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Ntf_LeaderEmptyApply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Ntf_LeaderEmptyApply* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Ntf_LeaderEmptyApply*>(
               &_ModuleTeam_Ntf_LeaderEmptyApply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(ModuleTeam_Ntf_LeaderEmptyApply& a, ModuleTeam_Ntf_LeaderEmptyApply& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Ntf_LeaderEmptyApply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Ntf_LeaderEmptyApply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Ntf_LeaderEmptyApply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Ntf_LeaderEmptyApply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ModuleTeam_Ntf_LeaderEmptyApply& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ModuleTeam_Ntf_LeaderEmptyApply& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Ntf_LeaderEmptyApply";
  }
  protected:
  explicit ModuleTeam_Ntf_LeaderEmptyApply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Ntf_LeaderEmptyApply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Ntf_TeamRecruitInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Ntf_TeamRecruitInfo) */ {
 public:
  inline ModuleTeam_Ntf_TeamRecruitInfo() : ModuleTeam_Ntf_TeamRecruitInfo(nullptr) {}
  ~ModuleTeam_Ntf_TeamRecruitInfo() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Ntf_TeamRecruitInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Ntf_TeamRecruitInfo(const ModuleTeam_Ntf_TeamRecruitInfo& from);
  ModuleTeam_Ntf_TeamRecruitInfo(ModuleTeam_Ntf_TeamRecruitInfo&& from) noexcept
    : ModuleTeam_Ntf_TeamRecruitInfo() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Ntf_TeamRecruitInfo& operator=(const ModuleTeam_Ntf_TeamRecruitInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Ntf_TeamRecruitInfo& operator=(ModuleTeam_Ntf_TeamRecruitInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Ntf_TeamRecruitInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Ntf_TeamRecruitInfo* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Ntf_TeamRecruitInfo*>(
               &_ModuleTeam_Ntf_TeamRecruitInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ModuleTeam_Ntf_TeamRecruitInfo& a, ModuleTeam_Ntf_TeamRecruitInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Ntf_TeamRecruitInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Ntf_TeamRecruitInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Ntf_TeamRecruitInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Ntf_TeamRecruitInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Ntf_TeamRecruitInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Ntf_TeamRecruitInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Ntf_TeamRecruitInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Ntf_TeamRecruitInfo";
  }
  protected:
  explicit ModuleTeam_Ntf_TeamRecruitInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecruitFieldNumber = 1,
  };
  // .common.RecruitTeam recruit = 1;
  bool has_recruit() const;
  private:
  bool _internal_has_recruit() const;
  public:
  void clear_recruit();
  const ::common::RecruitTeam& recruit() const;
  PROTOBUF_NODISCARD ::common::RecruitTeam* release_recruit();
  ::common::RecruitTeam* mutable_recruit();
  void set_allocated_recruit(::common::RecruitTeam* recruit);
  private:
  const ::common::RecruitTeam& _internal_recruit() const;
  ::common::RecruitTeam* _internal_mutable_recruit();
  public:
  void unsafe_arena_set_allocated_recruit(
      ::common::RecruitTeam* recruit);
  ::common::RecruitTeam* unsafe_arena_release_recruit();

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Ntf_TeamRecruitInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::RecruitTeam* recruit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Req_LeaderStartMatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Req_LeaderStartMatch) */ {
 public:
  inline ModuleTeam_Req_LeaderStartMatch() : ModuleTeam_Req_LeaderStartMatch(nullptr) {}
  ~ModuleTeam_Req_LeaderStartMatch() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Req_LeaderStartMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Req_LeaderStartMatch(const ModuleTeam_Req_LeaderStartMatch& from);
  ModuleTeam_Req_LeaderStartMatch(ModuleTeam_Req_LeaderStartMatch&& from) noexcept
    : ModuleTeam_Req_LeaderStartMatch() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Req_LeaderStartMatch& operator=(const ModuleTeam_Req_LeaderStartMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Req_LeaderStartMatch& operator=(ModuleTeam_Req_LeaderStartMatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Req_LeaderStartMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Req_LeaderStartMatch* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Req_LeaderStartMatch*>(
               &_ModuleTeam_Req_LeaderStartMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(ModuleTeam_Req_LeaderStartMatch& a, ModuleTeam_Req_LeaderStartMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Req_LeaderStartMatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Req_LeaderStartMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Req_LeaderStartMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Req_LeaderStartMatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Req_LeaderStartMatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Req_LeaderStartMatch& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Req_LeaderStartMatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Req_LeaderStartMatch";
  }
  protected:
  explicit ModuleTeam_Req_LeaderStartMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // bytes text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Req_LeaderStartMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Ntf_VoteBegin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Ntf_VoteBegin) */ {
 public:
  inline ModuleTeam_Ntf_VoteBegin() : ModuleTeam_Ntf_VoteBegin(nullptr) {}
  ~ModuleTeam_Ntf_VoteBegin() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Ntf_VoteBegin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Ntf_VoteBegin(const ModuleTeam_Ntf_VoteBegin& from);
  ModuleTeam_Ntf_VoteBegin(ModuleTeam_Ntf_VoteBegin&& from) noexcept
    : ModuleTeam_Ntf_VoteBegin() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Ntf_VoteBegin& operator=(const ModuleTeam_Ntf_VoteBegin& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Ntf_VoteBegin& operator=(ModuleTeam_Ntf_VoteBegin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Ntf_VoteBegin& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Ntf_VoteBegin* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Ntf_VoteBegin*>(
               &_ModuleTeam_Ntf_VoteBegin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ModuleTeam_Ntf_VoteBegin& a, ModuleTeam_Ntf_VoteBegin& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Ntf_VoteBegin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Ntf_VoteBegin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Ntf_VoteBegin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Ntf_VoteBegin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Ntf_VoteBegin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Ntf_VoteBegin& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Ntf_VoteBegin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Ntf_VoteBegin";
  }
  protected:
  explicit ModuleTeam_Ntf_VoteBegin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kRolelistFieldNumber = 2,
  };
  // .common.TeamVoteBaseData base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::common::TeamVoteBaseData& base() const;
  PROTOBUF_NODISCARD ::common::TeamVoteBaseData* release_base();
  ::common::TeamVoteBaseData* mutable_base();
  void set_allocated_base(::common::TeamVoteBaseData* base);
  private:
  const ::common::TeamVoteBaseData& _internal_base() const;
  ::common::TeamVoteBaseData* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::common::TeamVoteBaseData* base);
  ::common::TeamVoteBaseData* unsafe_arena_release_base();

  // .common.RoleVoteStateList rolelist = 2;
  bool has_rolelist() const;
  private:
  bool _internal_has_rolelist() const;
  public:
  void clear_rolelist();
  const ::common::RoleVoteStateList& rolelist() const;
  PROTOBUF_NODISCARD ::common::RoleVoteStateList* release_rolelist();
  ::common::RoleVoteStateList* mutable_rolelist();
  void set_allocated_rolelist(::common::RoleVoteStateList* rolelist);
  private:
  const ::common::RoleVoteStateList& _internal_rolelist() const;
  ::common::RoleVoteStateList* _internal_mutable_rolelist();
  public:
  void unsafe_arena_set_allocated_rolelist(
      ::common::RoleVoteStateList* rolelist);
  ::common::RoleVoteStateList* unsafe_arena_release_rolelist();

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Ntf_VoteBegin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::TeamVoteBaseData* base_;
  ::common::RoleVoteStateList* rolelist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Req_Vote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Req_Vote) */ {
 public:
  inline ModuleTeam_Req_Vote() : ModuleTeam_Req_Vote(nullptr) {}
  ~ModuleTeam_Req_Vote() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Req_Vote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Req_Vote(const ModuleTeam_Req_Vote& from);
  ModuleTeam_Req_Vote(ModuleTeam_Req_Vote&& from) noexcept
    : ModuleTeam_Req_Vote() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Req_Vote& operator=(const ModuleTeam_Req_Vote& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Req_Vote& operator=(ModuleTeam_Req_Vote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Req_Vote& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Req_Vote* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Req_Vote*>(
               &_ModuleTeam_Req_Vote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(ModuleTeam_Req_Vote& a, ModuleTeam_Req_Vote& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Req_Vote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Req_Vote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Req_Vote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Req_Vote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Req_Vote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Req_Vote& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Req_Vote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Req_Vote";
  }
  protected:
  explicit ModuleTeam_Req_Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgreeFieldNumber = 1,
  };
  // bool agree = 1;
  void clear_agree();
  bool agree() const;
  void set_agree(bool value);
  private:
  bool _internal_agree() const;
  void _internal_set_agree(bool value);
  public:

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Req_Vote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool agree_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Ntf_VoteUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Ntf_VoteUpdate) */ {
 public:
  inline ModuleTeam_Ntf_VoteUpdate() : ModuleTeam_Ntf_VoteUpdate(nullptr) {}
  ~ModuleTeam_Ntf_VoteUpdate() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Ntf_VoteUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Ntf_VoteUpdate(const ModuleTeam_Ntf_VoteUpdate& from);
  ModuleTeam_Ntf_VoteUpdate(ModuleTeam_Ntf_VoteUpdate&& from) noexcept
    : ModuleTeam_Ntf_VoteUpdate() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Ntf_VoteUpdate& operator=(const ModuleTeam_Ntf_VoteUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Ntf_VoteUpdate& operator=(ModuleTeam_Ntf_VoteUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Ntf_VoteUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Ntf_VoteUpdate* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Ntf_VoteUpdate*>(
               &_ModuleTeam_Ntf_VoteUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ModuleTeam_Ntf_VoteUpdate& a, ModuleTeam_Ntf_VoteUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Ntf_VoteUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Ntf_VoteUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Ntf_VoteUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Ntf_VoteUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Ntf_VoteUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Ntf_VoteUpdate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Ntf_VoteUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Ntf_VoteUpdate";
  }
  protected:
  explicit ModuleTeam_Ntf_VoteUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 1,
  };
  // .common.RoleVoteState role = 1;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  const ::common::RoleVoteState& role() const;
  PROTOBUF_NODISCARD ::common::RoleVoteState* release_role();
  ::common::RoleVoteState* mutable_role();
  void set_allocated_role(::common::RoleVoteState* role);
  private:
  const ::common::RoleVoteState& _internal_role() const;
  ::common::RoleVoteState* _internal_mutable_role();
  public:
  void unsafe_arena_set_allocated_role(
      ::common::RoleVoteState* role);
  ::common::RoleVoteState* unsafe_arena_release_role();

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Ntf_VoteUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::RoleVoteState* role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Ntf_VoteEnd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Ntf_VoteEnd) */ {
 public:
  inline ModuleTeam_Ntf_VoteEnd() : ModuleTeam_Ntf_VoteEnd(nullptr) {}
  ~ModuleTeam_Ntf_VoteEnd() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Ntf_VoteEnd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Ntf_VoteEnd(const ModuleTeam_Ntf_VoteEnd& from);
  ModuleTeam_Ntf_VoteEnd(ModuleTeam_Ntf_VoteEnd&& from) noexcept
    : ModuleTeam_Ntf_VoteEnd() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Ntf_VoteEnd& operator=(const ModuleTeam_Ntf_VoteEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Ntf_VoteEnd& operator=(ModuleTeam_Ntf_VoteEnd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Ntf_VoteEnd& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Ntf_VoteEnd* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Ntf_VoteEnd*>(
               &_ModuleTeam_Ntf_VoteEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(ModuleTeam_Ntf_VoteEnd& a, ModuleTeam_Ntf_VoteEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Ntf_VoteEnd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Ntf_VoteEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Ntf_VoteEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Ntf_VoteEnd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Ntf_VoteEnd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Ntf_VoteEnd& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Ntf_VoteEnd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Ntf_VoteEnd";
  }
  protected:
  explicit ModuleTeam_Ntf_VoteEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPassFieldNumber = 1,
  };
  // bool pass = 1;
  void clear_pass();
  bool pass() const;
  void set_pass(bool value);
  private:
  bool _internal_pass() const;
  void _internal_set_pass(bool value);
  public:

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Ntf_VoteEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool pass_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Ntf_MountTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Ntf_MountTeam) */ {
 public:
  inline ModuleTeam_Ntf_MountTeam() : ModuleTeam_Ntf_MountTeam(nullptr) {}
  ~ModuleTeam_Ntf_MountTeam() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Ntf_MountTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Ntf_MountTeam(const ModuleTeam_Ntf_MountTeam& from);
  ModuleTeam_Ntf_MountTeam(ModuleTeam_Ntf_MountTeam&& from) noexcept
    : ModuleTeam_Ntf_MountTeam() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Ntf_MountTeam& operator=(const ModuleTeam_Ntf_MountTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Ntf_MountTeam& operator=(ModuleTeam_Ntf_MountTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Ntf_MountTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Ntf_MountTeam* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Ntf_MountTeam*>(
               &_ModuleTeam_Ntf_MountTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(ModuleTeam_Ntf_MountTeam& a, ModuleTeam_Ntf_MountTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Ntf_MountTeam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Ntf_MountTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Ntf_MountTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Ntf_MountTeam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam_Ntf_MountTeam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam_Ntf_MountTeam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam_Ntf_MountTeam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Ntf_MountTeam";
  }
  protected:
  explicit ModuleTeam_Ntf_MountTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamFieldNumber = 1,
  };
  // .common.ModuleTeam team = 1;
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  const ::common::ModuleTeam& team() const;
  PROTOBUF_NODISCARD ::common::ModuleTeam* release_team();
  ::common::ModuleTeam* mutable_team();
  void set_allocated_team(::common::ModuleTeam* team);
  private:
  const ::common::ModuleTeam& _internal_team() const;
  ::common::ModuleTeam* _internal_mutable_team();
  public:
  void unsafe_arena_set_allocated_team(
      ::common::ModuleTeam* team);
  ::common::ModuleTeam* unsafe_arena_release_team();

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Ntf_MountTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::ModuleTeam* team_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeam_Req_FollowJumpMap final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:client.ModuleTeam_Req_FollowJumpMap) */ {
 public:
  inline ModuleTeam_Req_FollowJumpMap() : ModuleTeam_Req_FollowJumpMap(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ModuleTeam_Req_FollowJumpMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam_Req_FollowJumpMap(const ModuleTeam_Req_FollowJumpMap& from);
  ModuleTeam_Req_FollowJumpMap(ModuleTeam_Req_FollowJumpMap&& from) noexcept
    : ModuleTeam_Req_FollowJumpMap() {
    *this = ::std::move(from);
  }

  inline ModuleTeam_Req_FollowJumpMap& operator=(const ModuleTeam_Req_FollowJumpMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam_Req_FollowJumpMap& operator=(ModuleTeam_Req_FollowJumpMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam_Req_FollowJumpMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam_Req_FollowJumpMap* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam_Req_FollowJumpMap*>(
               &_ModuleTeam_Req_FollowJumpMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(ModuleTeam_Req_FollowJumpMap& a, ModuleTeam_Req_FollowJumpMap& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam_Req_FollowJumpMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam_Req_FollowJumpMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam_Req_FollowJumpMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam_Req_FollowJumpMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ModuleTeam_Req_FollowJumpMap& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ModuleTeam_Req_FollowJumpMap& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleTeam_Req_FollowJumpMap";
  }
  protected:
  explicit ModuleTeam_Req_FollowJumpMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:client.ModuleTeam_Req_FollowJumpMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_team_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ModuleTeam_Req_CreateTeam

// uint32 targetId = 1;
inline void ModuleTeam_Req_CreateTeam::clear_targetid() {
  targetid_ = 0u;
}
inline uint32_t ModuleTeam_Req_CreateTeam::_internal_targetid() const {
  return targetid_;
}
inline uint32_t ModuleTeam_Req_CreateTeam::targetid() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Req_CreateTeam.targetId)
  return _internal_targetid();
}
inline void ModuleTeam_Req_CreateTeam::_internal_set_targetid(uint32_t value) {
  
  targetid_ = value;
}
inline void ModuleTeam_Req_CreateTeam::set_targetid(uint32_t value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Req_CreateTeam.targetId)
}

// uint32 minLevel = 2;
inline void ModuleTeam_Req_CreateTeam::clear_minlevel() {
  minlevel_ = 0u;
}
inline uint32_t ModuleTeam_Req_CreateTeam::_internal_minlevel() const {
  return minlevel_;
}
inline uint32_t ModuleTeam_Req_CreateTeam::minlevel() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Req_CreateTeam.minLevel)
  return _internal_minlevel();
}
inline void ModuleTeam_Req_CreateTeam::_internal_set_minlevel(uint32_t value) {
  
  minlevel_ = value;
}
inline void ModuleTeam_Req_CreateTeam::set_minlevel(uint32_t value) {
  _internal_set_minlevel(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Req_CreateTeam.minLevel)
}

// uint32 maxLevel = 3;
inline void ModuleTeam_Req_CreateTeam::clear_maxlevel() {
  maxlevel_ = 0u;
}
inline uint32_t ModuleTeam_Req_CreateTeam::_internal_maxlevel() const {
  return maxlevel_;
}
inline uint32_t ModuleTeam_Req_CreateTeam::maxlevel() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Req_CreateTeam.maxLevel)
  return _internal_maxlevel();
}
inline void ModuleTeam_Req_CreateTeam::_internal_set_maxlevel(uint32_t value) {
  
  maxlevel_ = value;
}
inline void ModuleTeam_Req_CreateTeam::set_maxlevel(uint32_t value) {
  _internal_set_maxlevel(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Req_CreateTeam.maxLevel)
}

// -------------------------------------------------------------------

// ModuleTeam_Ntf_CreateTeam

// .common.TeamBase base = 1;
inline bool ModuleTeam_Ntf_CreateTeam::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool ModuleTeam_Ntf_CreateTeam::has_base() const {
  return _internal_has_base();
}
inline const ::common::TeamBase& ModuleTeam_Ntf_CreateTeam::_internal_base() const {
  const ::common::TeamBase* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::TeamBase&>(
      ::common::_TeamBase_default_instance_);
}
inline const ::common::TeamBase& ModuleTeam_Ntf_CreateTeam::base() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Ntf_CreateTeam.base)
  return _internal_base();
}
inline void ModuleTeam_Ntf_CreateTeam::unsafe_arena_set_allocated_base(
    ::common::TeamBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client.ModuleTeam_Ntf_CreateTeam.base)
}
inline ::common::TeamBase* ModuleTeam_Ntf_CreateTeam::release_base() {
  
  ::common::TeamBase* temp = base_;
  base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::TeamBase* ModuleTeam_Ntf_CreateTeam::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:client.ModuleTeam_Ntf_CreateTeam.base)
  
  ::common::TeamBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::common::TeamBase* ModuleTeam_Ntf_CreateTeam::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::TeamBase>(GetArenaForAllocation());
    base_ = p;
  }
  return base_;
}
inline ::common::TeamBase* ModuleTeam_Ntf_CreateTeam::mutable_base() {
  ::common::TeamBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:client.ModuleTeam_Ntf_CreateTeam.base)
  return _msg;
}
inline void ModuleTeam_Ntf_CreateTeam::set_allocated_base(::common::TeamBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:client.ModuleTeam_Ntf_CreateTeam.base)
}

// .common.TeamMemberList memberList = 2;
inline bool ModuleTeam_Ntf_CreateTeam::_internal_has_memberlist() const {
  return this != internal_default_instance() && memberlist_ != nullptr;
}
inline bool ModuleTeam_Ntf_CreateTeam::has_memberlist() const {
  return _internal_has_memberlist();
}
inline const ::common::TeamMemberList& ModuleTeam_Ntf_CreateTeam::_internal_memberlist() const {
  const ::common::TeamMemberList* p = memberlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::TeamMemberList&>(
      ::common::_TeamMemberList_default_instance_);
}
inline const ::common::TeamMemberList& ModuleTeam_Ntf_CreateTeam::memberlist() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Ntf_CreateTeam.memberList)
  return _internal_memberlist();
}
inline void ModuleTeam_Ntf_CreateTeam::unsafe_arena_set_allocated_memberlist(
    ::common::TeamMemberList* memberlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memberlist_);
  }
  memberlist_ = memberlist;
  if (memberlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client.ModuleTeam_Ntf_CreateTeam.memberList)
}
inline ::common::TeamMemberList* ModuleTeam_Ntf_CreateTeam::release_memberlist() {
  
  ::common::TeamMemberList* temp = memberlist_;
  memberlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::TeamMemberList* ModuleTeam_Ntf_CreateTeam::unsafe_arena_release_memberlist() {
  // @@protoc_insertion_point(field_release:client.ModuleTeam_Ntf_CreateTeam.memberList)
  
  ::common::TeamMemberList* temp = memberlist_;
  memberlist_ = nullptr;
  return temp;
}
inline ::common::TeamMemberList* ModuleTeam_Ntf_CreateTeam::_internal_mutable_memberlist() {
  
  if (memberlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::TeamMemberList>(GetArenaForAllocation());
    memberlist_ = p;
  }
  return memberlist_;
}
inline ::common::TeamMemberList* ModuleTeam_Ntf_CreateTeam::mutable_memberlist() {
  ::common::TeamMemberList* _msg = _internal_mutable_memberlist();
  // @@protoc_insertion_point(field_mutable:client.ModuleTeam_Ntf_CreateTeam.memberList)
  return _msg;
}
inline void ModuleTeam_Ntf_CreateTeam::set_allocated_memberlist(::common::TeamMemberList* memberlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(memberlist_);
  }
  if (memberlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memberlist));
    if (message_arena != submessage_arena) {
      memberlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memberlist, submessage_arena);
    }
    
  } else {
    
  }
  memberlist_ = memberlist;
  // @@protoc_insertion_point(field_set_allocated:client.ModuleTeam_Ntf_CreateTeam.memberList)
}

// .common.NotOwnTeamInfo notteam = 3;
inline bool ModuleTeam_Ntf_CreateTeam::_internal_has_notteam() const {
  return this != internal_default_instance() && notteam_ != nullptr;
}
inline bool ModuleTeam_Ntf_CreateTeam::has_notteam() const {
  return _internal_has_notteam();
}
inline const ::common::NotOwnTeamInfo& ModuleTeam_Ntf_CreateTeam::_internal_notteam() const {
  const ::common::NotOwnTeamInfo* p = notteam_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::NotOwnTeamInfo&>(
      ::common::_NotOwnTeamInfo_default_instance_);
}
inline const ::common::NotOwnTeamInfo& ModuleTeam_Ntf_CreateTeam::notteam() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Ntf_CreateTeam.notteam)
  return _internal_notteam();
}
inline void ModuleTeam_Ntf_CreateTeam::unsafe_arena_set_allocated_notteam(
    ::common::NotOwnTeamInfo* notteam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(notteam_);
  }
  notteam_ = notteam;
  if (notteam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client.ModuleTeam_Ntf_CreateTeam.notteam)
}
inline ::common::NotOwnTeamInfo* ModuleTeam_Ntf_CreateTeam::release_notteam() {
  
  ::common::NotOwnTeamInfo* temp = notteam_;
  notteam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::NotOwnTeamInfo* ModuleTeam_Ntf_CreateTeam::unsafe_arena_release_notteam() {
  // @@protoc_insertion_point(field_release:client.ModuleTeam_Ntf_CreateTeam.notteam)
  
  ::common::NotOwnTeamInfo* temp = notteam_;
  notteam_ = nullptr;
  return temp;
}
inline ::common::NotOwnTeamInfo* ModuleTeam_Ntf_CreateTeam::_internal_mutable_notteam() {
  
  if (notteam_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::NotOwnTeamInfo>(GetArenaForAllocation());
    notteam_ = p;
  }
  return notteam_;
}
inline ::common::NotOwnTeamInfo* ModuleTeam_Ntf_CreateTeam::mutable_notteam() {
  ::common::NotOwnTeamInfo* _msg = _internal_mutable_notteam();
  // @@protoc_insertion_point(field_mutable:client.ModuleTeam_Ntf_CreateTeam.notteam)
  return _msg;
}
inline void ModuleTeam_Ntf_CreateTeam::set_allocated_notteam(::common::NotOwnTeamInfo* notteam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(notteam_);
  }
  if (notteam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(notteam));
    if (message_arena != submessage_arena) {
      notteam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notteam, submessage_arena);
    }
    
  } else {
    
  }
  notteam_ = notteam;
  // @@protoc_insertion_point(field_set_allocated:client.ModuleTeam_Ntf_CreateTeam.notteam)
}

// .common.OwnTeamInfo ownTeam = 4;
inline bool ModuleTeam_Ntf_CreateTeam::_internal_has_ownteam() const {
  return this != internal_default_instance() && ownteam_ != nullptr;
}
inline bool ModuleTeam_Ntf_CreateTeam::has_ownteam() const {
  return _internal_has_ownteam();
}
inline const ::common::OwnTeamInfo& ModuleTeam_Ntf_CreateTeam::_internal_ownteam() const {
  const ::common::OwnTeamInfo* p = ownteam_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::OwnTeamInfo&>(
      ::common::_OwnTeamInfo_default_instance_);
}
inline const ::common::OwnTeamInfo& ModuleTeam_Ntf_CreateTeam::ownteam() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Ntf_CreateTeam.ownTeam)
  return _internal_ownteam();
}
inline void ModuleTeam_Ntf_CreateTeam::unsafe_arena_set_allocated_ownteam(
    ::common::OwnTeamInfo* ownteam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ownteam_);
  }
  ownteam_ = ownteam;
  if (ownteam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client.ModuleTeam_Ntf_CreateTeam.ownTeam)
}
inline ::common::OwnTeamInfo* ModuleTeam_Ntf_CreateTeam::release_ownteam() {
  
  ::common::OwnTeamInfo* temp = ownteam_;
  ownteam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::OwnTeamInfo* ModuleTeam_Ntf_CreateTeam::unsafe_arena_release_ownteam() {
  // @@protoc_insertion_point(field_release:client.ModuleTeam_Ntf_CreateTeam.ownTeam)
  
  ::common::OwnTeamInfo* temp = ownteam_;
  ownteam_ = nullptr;
  return temp;
}
inline ::common::OwnTeamInfo* ModuleTeam_Ntf_CreateTeam::_internal_mutable_ownteam() {
  
  if (ownteam_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::OwnTeamInfo>(GetArenaForAllocation());
    ownteam_ = p;
  }
  return ownteam_;
}
inline ::common::OwnTeamInfo* ModuleTeam_Ntf_CreateTeam::mutable_ownteam() {
  ::common::OwnTeamInfo* _msg = _internal_mutable_ownteam();
  // @@protoc_insertion_point(field_mutable:client.ModuleTeam_Ntf_CreateTeam.ownTeam)
  return _msg;
}
inline void ModuleTeam_Ntf_CreateTeam::set_allocated_ownteam(::common::OwnTeamInfo* ownteam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ownteam_);
  }
  if (ownteam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ownteam));
    if (message_arena != submessage_arena) {
      ownteam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ownteam, submessage_arena);
    }
    
  } else {
    
  }
  ownteam_ = ownteam;
  // @@protoc_insertion_point(field_set_allocated:client.ModuleTeam_Ntf_CreateTeam.ownTeam)
}

// -------------------------------------------------------------------

// ModuleTeam_Ntf_SelfJoinTeam

// .common.TeamBase base = 1;
inline bool ModuleTeam_Ntf_SelfJoinTeam::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool ModuleTeam_Ntf_SelfJoinTeam::has_base() const {
  return _internal_has_base();
}
inline const ::common::TeamBase& ModuleTeam_Ntf_SelfJoinTeam::_internal_base() const {
  const ::common::TeamBase* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::TeamBase&>(
      ::common::_TeamBase_default_instance_);
}
inline const ::common::TeamBase& ModuleTeam_Ntf_SelfJoinTeam::base() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Ntf_SelfJoinTeam.base)
  return _internal_base();
}
inline void ModuleTeam_Ntf_SelfJoinTeam::unsafe_arena_set_allocated_base(
    ::common::TeamBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client.ModuleTeam_Ntf_SelfJoinTeam.base)
}
inline ::common::TeamBase* ModuleTeam_Ntf_SelfJoinTeam::release_base() {
  
  ::common::TeamBase* temp = base_;
  base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::TeamBase* ModuleTeam_Ntf_SelfJoinTeam::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:client.ModuleTeam_Ntf_SelfJoinTeam.base)
  
  ::common::TeamBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::common::TeamBase* ModuleTeam_Ntf_SelfJoinTeam::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::TeamBase>(GetArenaForAllocation());
    base_ = p;
  }
  return base_;
}
inline ::common::TeamBase* ModuleTeam_Ntf_SelfJoinTeam::mutable_base() {
  ::common::TeamBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:client.ModuleTeam_Ntf_SelfJoinTeam.base)
  return _msg;
}
inline void ModuleTeam_Ntf_SelfJoinTeam::set_allocated_base(::common::TeamBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:client.ModuleTeam_Ntf_SelfJoinTeam.base)
}

// .common.TeamMemberList memberList = 2;
inline bool ModuleTeam_Ntf_SelfJoinTeam::_internal_has_memberlist() const {
  return this != internal_default_instance() && memberlist_ != nullptr;
}
inline bool ModuleTeam_Ntf_SelfJoinTeam::has_memberlist() const {
  return _internal_has_memberlist();
}
inline const ::common::TeamMemberList& ModuleTeam_Ntf_SelfJoinTeam::_internal_memberlist() const {
  const ::common::TeamMemberList* p = memberlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::TeamMemberList&>(
      ::common::_TeamMemberList_default_instance_);
}
inline const ::common::TeamMemberList& ModuleTeam_Ntf_SelfJoinTeam::memberlist() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Ntf_SelfJoinTeam.memberList)
  return _internal_memberlist();
}
inline void ModuleTeam_Ntf_SelfJoinTeam::unsafe_arena_set_allocated_memberlist(
    ::common::TeamMemberList* memberlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memberlist_);
  }
  memberlist_ = memberlist;
  if (memberlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client.ModuleTeam_Ntf_SelfJoinTeam.memberList)
}
inline ::common::TeamMemberList* ModuleTeam_Ntf_SelfJoinTeam::release_memberlist() {
  
  ::common::TeamMemberList* temp = memberlist_;
  memberlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::TeamMemberList* ModuleTeam_Ntf_SelfJoinTeam::unsafe_arena_release_memberlist() {
  // @@protoc_insertion_point(field_release:client.ModuleTeam_Ntf_SelfJoinTeam.memberList)
  
  ::common::TeamMemberList* temp = memberlist_;
  memberlist_ = nullptr;
  return temp;
}
inline ::common::TeamMemberList* ModuleTeam_Ntf_SelfJoinTeam::_internal_mutable_memberlist() {
  
  if (memberlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::TeamMemberList>(GetArenaForAllocation());
    memberlist_ = p;
  }
  return memberlist_;
}
inline ::common::TeamMemberList* ModuleTeam_Ntf_SelfJoinTeam::mutable_memberlist() {
  ::common::TeamMemberList* _msg = _internal_mutable_memberlist();
  // @@protoc_insertion_point(field_mutable:client.ModuleTeam_Ntf_SelfJoinTeam.memberList)
  return _msg;
}
inline void ModuleTeam_Ntf_SelfJoinTeam::set_allocated_memberlist(::common::TeamMemberList* memberlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(memberlist_);
  }
  if (memberlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memberlist));
    if (message_arena != submessage_arena) {
      memberlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memberlist, submessage_arena);
    }
    
  } else {
    
  }
  memberlist_ = memberlist;
  // @@protoc_insertion_point(field_set_allocated:client.ModuleTeam_Ntf_SelfJoinTeam.memberList)
}

// .common.NotOwnTeamInfo notteam = 3;
inline bool ModuleTeam_Ntf_SelfJoinTeam::_internal_has_notteam() const {
  return this != internal_default_instance() && notteam_ != nullptr;
}
inline bool ModuleTeam_Ntf_SelfJoinTeam::has_notteam() const {
  return _internal_has_notteam();
}
inline const ::common::NotOwnTeamInfo& ModuleTeam_Ntf_SelfJoinTeam::_internal_notteam() const {
  const ::common::NotOwnTeamInfo* p = notteam_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::NotOwnTeamInfo&>(
      ::common::_NotOwnTeamInfo_default_instance_);
}
inline const ::common::NotOwnTeamInfo& ModuleTeam_Ntf_SelfJoinTeam::notteam() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Ntf_SelfJoinTeam.notteam)
  return _internal_notteam();
}
inline void ModuleTeam_Ntf_SelfJoinTeam::unsafe_arena_set_allocated_notteam(
    ::common::NotOwnTeamInfo* notteam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(notteam_);
  }
  notteam_ = notteam;
  if (notteam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client.ModuleTeam_Ntf_SelfJoinTeam.notteam)
}
inline ::common::NotOwnTeamInfo* ModuleTeam_Ntf_SelfJoinTeam::release_notteam() {
  
  ::common::NotOwnTeamInfo* temp = notteam_;
  notteam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::NotOwnTeamInfo* ModuleTeam_Ntf_SelfJoinTeam::unsafe_arena_release_notteam() {
  // @@protoc_insertion_point(field_release:client.ModuleTeam_Ntf_SelfJoinTeam.notteam)
  
  ::common::NotOwnTeamInfo* temp = notteam_;
  notteam_ = nullptr;
  return temp;
}
inline ::common::NotOwnTeamInfo* ModuleTeam_Ntf_SelfJoinTeam::_internal_mutable_notteam() {
  
  if (notteam_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::NotOwnTeamInfo>(GetArenaForAllocation());
    notteam_ = p;
  }
  return notteam_;
}
inline ::common::NotOwnTeamInfo* ModuleTeam_Ntf_SelfJoinTeam::mutable_notteam() {
  ::common::NotOwnTeamInfo* _msg = _internal_mutable_notteam();
  // @@protoc_insertion_point(field_mutable:client.ModuleTeam_Ntf_SelfJoinTeam.notteam)
  return _msg;
}
inline void ModuleTeam_Ntf_SelfJoinTeam::set_allocated_notteam(::common::NotOwnTeamInfo* notteam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(notteam_);
  }
  if (notteam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(notteam));
    if (message_arena != submessage_arena) {
      notteam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notteam, submessage_arena);
    }
    
  } else {
    
  }
  notteam_ = notteam;
  // @@protoc_insertion_point(field_set_allocated:client.ModuleTeam_Ntf_SelfJoinTeam.notteam)
}

// .common.OwnTeamInfo ownTeam = 4;
inline bool ModuleTeam_Ntf_SelfJoinTeam::_internal_has_ownteam() const {
  return this != internal_default_instance() && ownteam_ != nullptr;
}
inline bool ModuleTeam_Ntf_SelfJoinTeam::has_ownteam() const {
  return _internal_has_ownteam();
}
inline const ::common::OwnTeamInfo& ModuleTeam_Ntf_SelfJoinTeam::_internal_ownteam() const {
  const ::common::OwnTeamInfo* p = ownteam_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::OwnTeamInfo&>(
      ::common::_OwnTeamInfo_default_instance_);
}
inline const ::common::OwnTeamInfo& ModuleTeam_Ntf_SelfJoinTeam::ownteam() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Ntf_SelfJoinTeam.ownTeam)
  return _internal_ownteam();
}
inline void ModuleTeam_Ntf_SelfJoinTeam::unsafe_arena_set_allocated_ownteam(
    ::common::OwnTeamInfo* ownteam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ownteam_);
  }
  ownteam_ = ownteam;
  if (ownteam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client.ModuleTeam_Ntf_SelfJoinTeam.ownTeam)
}
inline ::common::OwnTeamInfo* ModuleTeam_Ntf_SelfJoinTeam::release_ownteam() {
  
  ::common::OwnTeamInfo* temp = ownteam_;
  ownteam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::OwnTeamInfo* ModuleTeam_Ntf_SelfJoinTeam::unsafe_arena_release_ownteam() {
  // @@protoc_insertion_point(field_release:client.ModuleTeam_Ntf_SelfJoinTeam.ownTeam)
  
  ::common::OwnTeamInfo* temp = ownteam_;
  ownteam_ = nullptr;
  return temp;
}
inline ::common::OwnTeamInfo* ModuleTeam_Ntf_SelfJoinTeam::_internal_mutable_ownteam() {
  
  if (ownteam_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::OwnTeamInfo>(GetArenaForAllocation());
    ownteam_ = p;
  }
  return ownteam_;
}
inline ::common::OwnTeamInfo* ModuleTeam_Ntf_SelfJoinTeam::mutable_ownteam() {
  ::common::OwnTeamInfo* _msg = _internal_mutable_ownteam();
  // @@protoc_insertion_point(field_mutable:client.ModuleTeam_Ntf_SelfJoinTeam.ownTeam)
  return _msg;
}
inline void ModuleTeam_Ntf_SelfJoinTeam::set_allocated_ownteam(::common::OwnTeamInfo* ownteam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ownteam_);
  }
  if (ownteam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ownteam));
    if (message_arena != submessage_arena) {
      ownteam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ownteam, submessage_arena);
    }
    
  } else {
    
  }
  ownteam_ = ownteam;
  // @@protoc_insertion_point(field_set_allocated:client.ModuleTeam_Ntf_SelfJoinTeam.ownTeam)
}

// -------------------------------------------------------------------

// ModuleTeam_Ntf_UpdateTeam

// .common.TeamFieldList fieldList = 1;
inline bool ModuleTeam_Ntf_UpdateTeam::_internal_has_fieldlist() const {
  return this != internal_default_instance() && fieldlist_ != nullptr;
}
inline bool ModuleTeam_Ntf_UpdateTeam::has_fieldlist() const {
  return _internal_has_fieldlist();
}
inline const ::common::TeamFieldList& ModuleTeam_Ntf_UpdateTeam::_internal_fieldlist() const {
  const ::common::TeamFieldList* p = fieldlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::TeamFieldList&>(
      ::common::_TeamFieldList_default_instance_);
}
inline const ::common::TeamFieldList& ModuleTeam_Ntf_UpdateTeam::fieldlist() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Ntf_UpdateTeam.fieldList)
  return _internal_fieldlist();
}
inline void ModuleTeam_Ntf_UpdateTeam::unsafe_arena_set_allocated_fieldlist(
    ::common::TeamFieldList* fieldlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fieldlist_);
  }
  fieldlist_ = fieldlist;
  if (fieldlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client.ModuleTeam_Ntf_UpdateTeam.fieldList)
}
inline ::common::TeamFieldList* ModuleTeam_Ntf_UpdateTeam::release_fieldlist() {
  
  ::common::TeamFieldList* temp = fieldlist_;
  fieldlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::TeamFieldList* ModuleTeam_Ntf_UpdateTeam::unsafe_arena_release_fieldlist() {
  // @@protoc_insertion_point(field_release:client.ModuleTeam_Ntf_UpdateTeam.fieldList)
  
  ::common::TeamFieldList* temp = fieldlist_;
  fieldlist_ = nullptr;
  return temp;
}
inline ::common::TeamFieldList* ModuleTeam_Ntf_UpdateTeam::_internal_mutable_fieldlist() {
  
  if (fieldlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::TeamFieldList>(GetArenaForAllocation());
    fieldlist_ = p;
  }
  return fieldlist_;
}
inline ::common::TeamFieldList* ModuleTeam_Ntf_UpdateTeam::mutable_fieldlist() {
  ::common::TeamFieldList* _msg = _internal_mutable_fieldlist();
  // @@protoc_insertion_point(field_mutable:client.ModuleTeam_Ntf_UpdateTeam.fieldList)
  return _msg;
}
inline void ModuleTeam_Ntf_UpdateTeam::set_allocated_fieldlist(::common::TeamFieldList* fieldlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fieldlist_);
  }
  if (fieldlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fieldlist));
    if (message_arena != submessage_arena) {
      fieldlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fieldlist, submessage_arena);
    }
    
  } else {
    
  }
  fieldlist_ = fieldlist;
  // @@protoc_insertion_point(field_set_allocated:client.ModuleTeam_Ntf_UpdateTeam.fieldList)
}

// -------------------------------------------------------------------

// ModuleTeam_Ntf_AddMember

// .common.TeamMemberList memeberList = 1;
inline bool ModuleTeam_Ntf_AddMember::_internal_has_memeberlist() const {
  return this != internal_default_instance() && memeberlist_ != nullptr;
}
inline bool ModuleTeam_Ntf_AddMember::has_memeberlist() const {
  return _internal_has_memeberlist();
}
inline const ::common::TeamMemberList& ModuleTeam_Ntf_AddMember::_internal_memeberlist() const {
  const ::common::TeamMemberList* p = memeberlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::TeamMemberList&>(
      ::common::_TeamMemberList_default_instance_);
}
inline const ::common::TeamMemberList& ModuleTeam_Ntf_AddMember::memeberlist() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Ntf_AddMember.memeberList)
  return _internal_memeberlist();
}
inline void ModuleTeam_Ntf_AddMember::unsafe_arena_set_allocated_memeberlist(
    ::common::TeamMemberList* memeberlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memeberlist_);
  }
  memeberlist_ = memeberlist;
  if (memeberlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client.ModuleTeam_Ntf_AddMember.memeberList)
}
inline ::common::TeamMemberList* ModuleTeam_Ntf_AddMember::release_memeberlist() {
  
  ::common::TeamMemberList* temp = memeberlist_;
  memeberlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::TeamMemberList* ModuleTeam_Ntf_AddMember::unsafe_arena_release_memeberlist() {
  // @@protoc_insertion_point(field_release:client.ModuleTeam_Ntf_AddMember.memeberList)
  
  ::common::TeamMemberList* temp = memeberlist_;
  memeberlist_ = nullptr;
  return temp;
}
inline ::common::TeamMemberList* ModuleTeam_Ntf_AddMember::_internal_mutable_memeberlist() {
  
  if (memeberlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::TeamMemberList>(GetArenaForAllocation());
    memeberlist_ = p;
  }
  return memeberlist_;
}
inline ::common::TeamMemberList* ModuleTeam_Ntf_AddMember::mutable_memeberlist() {
  ::common::TeamMemberList* _msg = _internal_mutable_memeberlist();
  // @@protoc_insertion_point(field_mutable:client.ModuleTeam_Ntf_AddMember.memeberList)
  return _msg;
}
inline void ModuleTeam_Ntf_AddMember::set_allocated_memeberlist(::common::TeamMemberList* memeberlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(memeberlist_);
  }
  if (memeberlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memeberlist));
    if (message_arena != submessage_arena) {
      memeberlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memeberlist, submessage_arena);
    }
    
  } else {
    
  }
  memeberlist_ = memeberlist;
  // @@protoc_insertion_point(field_set_allocated:client.ModuleTeam_Ntf_AddMember.memeberList)
}

// -------------------------------------------------------------------

// ModuleTeam_Ntf_RemoveMember

// repeated uint64 roleIds = 1;
inline int ModuleTeam_Ntf_RemoveMember::_internal_roleids_size() const {
  return roleids_.size();
}
inline int ModuleTeam_Ntf_RemoveMember::roleids_size() const {
  return _internal_roleids_size();
}
inline void ModuleTeam_Ntf_RemoveMember::clear_roleids() {
  roleids_.Clear();
}
inline uint64_t ModuleTeam_Ntf_RemoveMember::_internal_roleids(int index) const {
  return roleids_.Get(index);
}
inline uint64_t ModuleTeam_Ntf_RemoveMember::roleids(int index) const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Ntf_RemoveMember.roleIds)
  return _internal_roleids(index);
}
inline void ModuleTeam_Ntf_RemoveMember::set_roleids(int index, uint64_t value) {
  roleids_.Set(index, value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Ntf_RemoveMember.roleIds)
}
inline void ModuleTeam_Ntf_RemoveMember::_internal_add_roleids(uint64_t value) {
  roleids_.Add(value);
}
inline void ModuleTeam_Ntf_RemoveMember::add_roleids(uint64_t value) {
  _internal_add_roleids(value);
  // @@protoc_insertion_point(field_add:client.ModuleTeam_Ntf_RemoveMember.roleIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ModuleTeam_Ntf_RemoveMember::_internal_roleids() const {
  return roleids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ModuleTeam_Ntf_RemoveMember::roleids() const {
  // @@protoc_insertion_point(field_list:client.ModuleTeam_Ntf_RemoveMember.roleIds)
  return _internal_roleids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ModuleTeam_Ntf_RemoveMember::_internal_mutable_roleids() {
  return &roleids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ModuleTeam_Ntf_RemoveMember::mutable_roleids() {
  // @@protoc_insertion_point(field_mutable_list:client.ModuleTeam_Ntf_RemoveMember.roleIds)
  return _internal_mutable_roleids();
}

// -------------------------------------------------------------------

// ModuleTeam_Ntf_UpdateMember

// uint64 roleId = 1;
inline void ModuleTeam_Ntf_UpdateMember::clear_roleid() {
  roleid_ = uint64_t{0u};
}
inline uint64_t ModuleTeam_Ntf_UpdateMember::_internal_roleid() const {
  return roleid_;
}
inline uint64_t ModuleTeam_Ntf_UpdateMember::roleid() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Ntf_UpdateMember.roleId)
  return _internal_roleid();
}
inline void ModuleTeam_Ntf_UpdateMember::_internal_set_roleid(uint64_t value) {
  
  roleid_ = value;
}
inline void ModuleTeam_Ntf_UpdateMember::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Ntf_UpdateMember.roleId)
}

// .common.TeamMemberFieldList fieldList = 2;
inline bool ModuleTeam_Ntf_UpdateMember::_internal_has_fieldlist() const {
  return this != internal_default_instance() && fieldlist_ != nullptr;
}
inline bool ModuleTeam_Ntf_UpdateMember::has_fieldlist() const {
  return _internal_has_fieldlist();
}
inline const ::common::TeamMemberFieldList& ModuleTeam_Ntf_UpdateMember::_internal_fieldlist() const {
  const ::common::TeamMemberFieldList* p = fieldlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::TeamMemberFieldList&>(
      ::common::_TeamMemberFieldList_default_instance_);
}
inline const ::common::TeamMemberFieldList& ModuleTeam_Ntf_UpdateMember::fieldlist() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Ntf_UpdateMember.fieldList)
  return _internal_fieldlist();
}
inline void ModuleTeam_Ntf_UpdateMember::unsafe_arena_set_allocated_fieldlist(
    ::common::TeamMemberFieldList* fieldlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fieldlist_);
  }
  fieldlist_ = fieldlist;
  if (fieldlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client.ModuleTeam_Ntf_UpdateMember.fieldList)
}
inline ::common::TeamMemberFieldList* ModuleTeam_Ntf_UpdateMember::release_fieldlist() {
  
  ::common::TeamMemberFieldList* temp = fieldlist_;
  fieldlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::TeamMemberFieldList* ModuleTeam_Ntf_UpdateMember::unsafe_arena_release_fieldlist() {
  // @@protoc_insertion_point(field_release:client.ModuleTeam_Ntf_UpdateMember.fieldList)
  
  ::common::TeamMemberFieldList* temp = fieldlist_;
  fieldlist_ = nullptr;
  return temp;
}
inline ::common::TeamMemberFieldList* ModuleTeam_Ntf_UpdateMember::_internal_mutable_fieldlist() {
  
  if (fieldlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::TeamMemberFieldList>(GetArenaForAllocation());
    fieldlist_ = p;
  }
  return fieldlist_;
}
inline ::common::TeamMemberFieldList* ModuleTeam_Ntf_UpdateMember::mutable_fieldlist() {
  ::common::TeamMemberFieldList* _msg = _internal_mutable_fieldlist();
  // @@protoc_insertion_point(field_mutable:client.ModuleTeam_Ntf_UpdateMember.fieldList)
  return _msg;
}
inline void ModuleTeam_Ntf_UpdateMember::set_allocated_fieldlist(::common::TeamMemberFieldList* fieldlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fieldlist_);
  }
  if (fieldlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fieldlist));
    if (message_arena != submessage_arena) {
      fieldlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fieldlist, submessage_arena);
    }
    
  } else {
    
  }
  fieldlist_ = fieldlist;
  // @@protoc_insertion_point(field_set_allocated:client.ModuleTeam_Ntf_UpdateMember.fieldList)
}

// -------------------------------------------------------------------

// ModuleTeam_Req_LeaderFireMember

// uint64 roleId = 1;
inline void ModuleTeam_Req_LeaderFireMember::clear_roleid() {
  roleid_ = uint64_t{0u};
}
inline uint64_t ModuleTeam_Req_LeaderFireMember::_internal_roleid() const {
  return roleid_;
}
inline uint64_t ModuleTeam_Req_LeaderFireMember::roleid() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Req_LeaderFireMember.roleId)
  return _internal_roleid();
}
inline void ModuleTeam_Req_LeaderFireMember::_internal_set_roleid(uint64_t value) {
  
  roleid_ = value;
}
inline void ModuleTeam_Req_LeaderFireMember::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Req_LeaderFireMember.roleId)
}

// -------------------------------------------------------------------

// ModuleTeam_Req_LeaderChangeTarget

// uint32 targetId = 1;
inline void ModuleTeam_Req_LeaderChangeTarget::clear_targetid() {
  targetid_ = 0u;
}
inline uint32_t ModuleTeam_Req_LeaderChangeTarget::_internal_targetid() const {
  return targetid_;
}
inline uint32_t ModuleTeam_Req_LeaderChangeTarget::targetid() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Req_LeaderChangeTarget.targetId)
  return _internal_targetid();
}
inline void ModuleTeam_Req_LeaderChangeTarget::_internal_set_targetid(uint32_t value) {
  
  targetid_ = value;
}
inline void ModuleTeam_Req_LeaderChangeTarget::set_targetid(uint32_t value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Req_LeaderChangeTarget.targetId)
}

// uint32 minLevel = 2;
inline void ModuleTeam_Req_LeaderChangeTarget::clear_minlevel() {
  minlevel_ = 0u;
}
inline uint32_t ModuleTeam_Req_LeaderChangeTarget::_internal_minlevel() const {
  return minlevel_;
}
inline uint32_t ModuleTeam_Req_LeaderChangeTarget::minlevel() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Req_LeaderChangeTarget.minLevel)
  return _internal_minlevel();
}
inline void ModuleTeam_Req_LeaderChangeTarget::_internal_set_minlevel(uint32_t value) {
  
  minlevel_ = value;
}
inline void ModuleTeam_Req_LeaderChangeTarget::set_minlevel(uint32_t value) {
  _internal_set_minlevel(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Req_LeaderChangeTarget.minLevel)
}

// uint32 maxLevel = 3;
inline void ModuleTeam_Req_LeaderChangeTarget::clear_maxlevel() {
  maxlevel_ = 0u;
}
inline uint32_t ModuleTeam_Req_LeaderChangeTarget::_internal_maxlevel() const {
  return maxlevel_;
}
inline uint32_t ModuleTeam_Req_LeaderChangeTarget::maxlevel() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Req_LeaderChangeTarget.maxLevel)
  return _internal_maxlevel();
}
inline void ModuleTeam_Req_LeaderChangeTarget::_internal_set_maxlevel(uint32_t value) {
  
  maxlevel_ = value;
}
inline void ModuleTeam_Req_LeaderChangeTarget::set_maxlevel(uint32_t value) {
  _internal_set_maxlevel(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Req_LeaderChangeTarget.maxLevel)
}

// -------------------------------------------------------------------

// ModuleTeam_Req_LeaderCancelMatch

// -------------------------------------------------------------------

// ModuleTeam_Req_LeaderTogetherMember

// uint64 roleId = 1;
inline void ModuleTeam_Req_LeaderTogetherMember::clear_roleid() {
  roleid_ = uint64_t{0u};
}
inline uint64_t ModuleTeam_Req_LeaderTogetherMember::_internal_roleid() const {
  return roleid_;
}
inline uint64_t ModuleTeam_Req_LeaderTogetherMember::roleid() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Req_LeaderTogetherMember.roleId)
  return _internal_roleid();
}
inline void ModuleTeam_Req_LeaderTogetherMember::_internal_set_roleid(uint64_t value) {
  
  roleid_ = value;
}
inline void ModuleTeam_Req_LeaderTogetherMember::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Req_LeaderTogetherMember.roleId)
}

// -------------------------------------------------------------------

// ModuleTeam_Req_LeaderAppoint

// uint64 roleId = 1;
inline void ModuleTeam_Req_LeaderAppoint::clear_roleid() {
  roleid_ = uint64_t{0u};
}
inline uint64_t ModuleTeam_Req_LeaderAppoint::_internal_roleid() const {
  return roleid_;
}
inline uint64_t ModuleTeam_Req_LeaderAppoint::roleid() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Req_LeaderAppoint.roleId)
  return _internal_roleid();
}
inline void ModuleTeam_Req_LeaderAppoint::_internal_set_roleid(uint64_t value) {
  
  roleid_ = value;
}
inline void ModuleTeam_Req_LeaderAppoint::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Req_LeaderAppoint.roleId)
}

// -------------------------------------------------------------------

// ModuleTeam_Req_LeaderRefuseAllApply

// -------------------------------------------------------------------

// ModuleTeam_Req_LeaderAgreeAllApply

// -------------------------------------------------------------------

// ModuleTeam_Req_LeaderRefuseApply

// uint64 roleId = 1;
inline void ModuleTeam_Req_LeaderRefuseApply::clear_roleid() {
  roleid_ = uint64_t{0u};
}
inline uint64_t ModuleTeam_Req_LeaderRefuseApply::_internal_roleid() const {
  return roleid_;
}
inline uint64_t ModuleTeam_Req_LeaderRefuseApply::roleid() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Req_LeaderRefuseApply.roleId)
  return _internal_roleid();
}
inline void ModuleTeam_Req_LeaderRefuseApply::_internal_set_roleid(uint64_t value) {
  
  roleid_ = value;
}
inline void ModuleTeam_Req_LeaderRefuseApply::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Req_LeaderRefuseApply.roleId)
}

// uint32 zoneIdF = 2;
inline void ModuleTeam_Req_LeaderRefuseApply::clear_zoneidf() {
  zoneidf_ = 0u;
}
inline uint32_t ModuleTeam_Req_LeaderRefuseApply::_internal_zoneidf() const {
  return zoneidf_;
}
inline uint32_t ModuleTeam_Req_LeaderRefuseApply::zoneidf() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Req_LeaderRefuseApply.zoneIdF)
  return _internal_zoneidf();
}
inline void ModuleTeam_Req_LeaderRefuseApply::_internal_set_zoneidf(uint32_t value) {
  
  zoneidf_ = value;
}
inline void ModuleTeam_Req_LeaderRefuseApply::set_zoneidf(uint32_t value) {
  _internal_set_zoneidf(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Req_LeaderRefuseApply.zoneIdF)
}

// -------------------------------------------------------------------

// ModuleTeam_Req_LeaderAgreeApply

// uint64 roleId = 1;
inline void ModuleTeam_Req_LeaderAgreeApply::clear_roleid() {
  roleid_ = uint64_t{0u};
}
inline uint64_t ModuleTeam_Req_LeaderAgreeApply::_internal_roleid() const {
  return roleid_;
}
inline uint64_t ModuleTeam_Req_LeaderAgreeApply::roleid() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Req_LeaderAgreeApply.roleId)
  return _internal_roleid();
}
inline void ModuleTeam_Req_LeaderAgreeApply::_internal_set_roleid(uint64_t value) {
  
  roleid_ = value;
}
inline void ModuleTeam_Req_LeaderAgreeApply::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Req_LeaderAgreeApply.roleId)
}

// uint32 zoneIdF = 2;
inline void ModuleTeam_Req_LeaderAgreeApply::clear_zoneidf() {
  zoneidf_ = 0u;
}
inline uint32_t ModuleTeam_Req_LeaderAgreeApply::_internal_zoneidf() const {
  return zoneidf_;
}
inline uint32_t ModuleTeam_Req_LeaderAgreeApply::zoneidf() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Req_LeaderAgreeApply.zoneIdF)
  return _internal_zoneidf();
}
inline void ModuleTeam_Req_LeaderAgreeApply::_internal_set_zoneidf(uint32_t value) {
  
  zoneidf_ = value;
}
inline void ModuleTeam_Req_LeaderAgreeApply::set_zoneidf(uint32_t value) {
  _internal_set_zoneidf(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Req_LeaderAgreeApply.zoneIdF)
}

// -------------------------------------------------------------------

// ModuleTeam_Ntf_LeaderAddApply

// .common.TeamApplyList applyList = 1;
inline bool ModuleTeam_Ntf_LeaderAddApply::_internal_has_applylist() const {
  return this != internal_default_instance() && applylist_ != nullptr;
}
inline bool ModuleTeam_Ntf_LeaderAddApply::has_applylist() const {
  return _internal_has_applylist();
}
inline const ::common::TeamApplyList& ModuleTeam_Ntf_LeaderAddApply::_internal_applylist() const {
  const ::common::TeamApplyList* p = applylist_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::TeamApplyList&>(
      ::common::_TeamApplyList_default_instance_);
}
inline const ::common::TeamApplyList& ModuleTeam_Ntf_LeaderAddApply::applylist() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Ntf_LeaderAddApply.applyList)
  return _internal_applylist();
}
inline void ModuleTeam_Ntf_LeaderAddApply::unsafe_arena_set_allocated_applylist(
    ::common::TeamApplyList* applylist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applylist_);
  }
  applylist_ = applylist;
  if (applylist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client.ModuleTeam_Ntf_LeaderAddApply.applyList)
}
inline ::common::TeamApplyList* ModuleTeam_Ntf_LeaderAddApply::release_applylist() {
  
  ::common::TeamApplyList* temp = applylist_;
  applylist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::TeamApplyList* ModuleTeam_Ntf_LeaderAddApply::unsafe_arena_release_applylist() {
  // @@protoc_insertion_point(field_release:client.ModuleTeam_Ntf_LeaderAddApply.applyList)
  
  ::common::TeamApplyList* temp = applylist_;
  applylist_ = nullptr;
  return temp;
}
inline ::common::TeamApplyList* ModuleTeam_Ntf_LeaderAddApply::_internal_mutable_applylist() {
  
  if (applylist_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::TeamApplyList>(GetArenaForAllocation());
    applylist_ = p;
  }
  return applylist_;
}
inline ::common::TeamApplyList* ModuleTeam_Ntf_LeaderAddApply::mutable_applylist() {
  ::common::TeamApplyList* _msg = _internal_mutable_applylist();
  // @@protoc_insertion_point(field_mutable:client.ModuleTeam_Ntf_LeaderAddApply.applyList)
  return _msg;
}
inline void ModuleTeam_Ntf_LeaderAddApply::set_allocated_applylist(::common::TeamApplyList* applylist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(applylist_);
  }
  if (applylist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applylist));
    if (message_arena != submessage_arena) {
      applylist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applylist, submessage_arena);
    }
    
  } else {
    
  }
  applylist_ = applylist;
  // @@protoc_insertion_point(field_set_allocated:client.ModuleTeam_Ntf_LeaderAddApply.applyList)
}

// -------------------------------------------------------------------

// ModuleTeam_Ntf_LeaderRemoveApply

// repeated uint64 roleIds = 1;
inline int ModuleTeam_Ntf_LeaderRemoveApply::_internal_roleids_size() const {
  return roleids_.size();
}
inline int ModuleTeam_Ntf_LeaderRemoveApply::roleids_size() const {
  return _internal_roleids_size();
}
inline void ModuleTeam_Ntf_LeaderRemoveApply::clear_roleids() {
  roleids_.Clear();
}
inline uint64_t ModuleTeam_Ntf_LeaderRemoveApply::_internal_roleids(int index) const {
  return roleids_.Get(index);
}
inline uint64_t ModuleTeam_Ntf_LeaderRemoveApply::roleids(int index) const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Ntf_LeaderRemoveApply.roleIds)
  return _internal_roleids(index);
}
inline void ModuleTeam_Ntf_LeaderRemoveApply::set_roleids(int index, uint64_t value) {
  roleids_.Set(index, value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Ntf_LeaderRemoveApply.roleIds)
}
inline void ModuleTeam_Ntf_LeaderRemoveApply::_internal_add_roleids(uint64_t value) {
  roleids_.Add(value);
}
inline void ModuleTeam_Ntf_LeaderRemoveApply::add_roleids(uint64_t value) {
  _internal_add_roleids(value);
  // @@protoc_insertion_point(field_add:client.ModuleTeam_Ntf_LeaderRemoveApply.roleIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ModuleTeam_Ntf_LeaderRemoveApply::_internal_roleids() const {
  return roleids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ModuleTeam_Ntf_LeaderRemoveApply::roleids() const {
  // @@protoc_insertion_point(field_list:client.ModuleTeam_Ntf_LeaderRemoveApply.roleIds)
  return _internal_roleids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ModuleTeam_Ntf_LeaderRemoveApply::_internal_mutable_roleids() {
  return &roleids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ModuleTeam_Ntf_LeaderRemoveApply::mutable_roleids() {
  // @@protoc_insertion_point(field_mutable_list:client.ModuleTeam_Ntf_LeaderRemoveApply.roleIds)
  return _internal_mutable_roleids();
}

// -------------------------------------------------------------------

// ModuleTeam_Ntf_LeaderUpdateApply

// .common.TeamApplyList applyList = 1;
inline bool ModuleTeam_Ntf_LeaderUpdateApply::_internal_has_applylist() const {
  return this != internal_default_instance() && applylist_ != nullptr;
}
inline bool ModuleTeam_Ntf_LeaderUpdateApply::has_applylist() const {
  return _internal_has_applylist();
}
inline const ::common::TeamApplyList& ModuleTeam_Ntf_LeaderUpdateApply::_internal_applylist() const {
  const ::common::TeamApplyList* p = applylist_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::TeamApplyList&>(
      ::common::_TeamApplyList_default_instance_);
}
inline const ::common::TeamApplyList& ModuleTeam_Ntf_LeaderUpdateApply::applylist() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Ntf_LeaderUpdateApply.applyList)
  return _internal_applylist();
}
inline void ModuleTeam_Ntf_LeaderUpdateApply::unsafe_arena_set_allocated_applylist(
    ::common::TeamApplyList* applylist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applylist_);
  }
  applylist_ = applylist;
  if (applylist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client.ModuleTeam_Ntf_LeaderUpdateApply.applyList)
}
inline ::common::TeamApplyList* ModuleTeam_Ntf_LeaderUpdateApply::release_applylist() {
  
  ::common::TeamApplyList* temp = applylist_;
  applylist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::TeamApplyList* ModuleTeam_Ntf_LeaderUpdateApply::unsafe_arena_release_applylist() {
  // @@protoc_insertion_point(field_release:client.ModuleTeam_Ntf_LeaderUpdateApply.applyList)
  
  ::common::TeamApplyList* temp = applylist_;
  applylist_ = nullptr;
  return temp;
}
inline ::common::TeamApplyList* ModuleTeam_Ntf_LeaderUpdateApply::_internal_mutable_applylist() {
  
  if (applylist_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::TeamApplyList>(GetArenaForAllocation());
    applylist_ = p;
  }
  return applylist_;
}
inline ::common::TeamApplyList* ModuleTeam_Ntf_LeaderUpdateApply::mutable_applylist() {
  ::common::TeamApplyList* _msg = _internal_mutable_applylist();
  // @@protoc_insertion_point(field_mutable:client.ModuleTeam_Ntf_LeaderUpdateApply.applyList)
  return _msg;
}
inline void ModuleTeam_Ntf_LeaderUpdateApply::set_allocated_applylist(::common::TeamApplyList* applylist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(applylist_);
  }
  if (applylist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applylist));
    if (message_arena != submessage_arena) {
      applylist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applylist, submessage_arena);
    }
    
  } else {
    
  }
  applylist_ = applylist;
  // @@protoc_insertion_point(field_set_allocated:client.ModuleTeam_Ntf_LeaderUpdateApply.applyList)
}

// -------------------------------------------------------------------

// ModuleTeam_Req_InviteFriend

// uint64 roleId = 1;
inline void ModuleTeam_Req_InviteFriend::clear_roleid() {
  roleid_ = uint64_t{0u};
}
inline uint64_t ModuleTeam_Req_InviteFriend::_internal_roleid() const {
  return roleid_;
}
inline uint64_t ModuleTeam_Req_InviteFriend::roleid() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Req_InviteFriend.roleId)
  return _internal_roleid();
}
inline void ModuleTeam_Req_InviteFriend::_internal_set_roleid(uint64_t value) {
  
  roleid_ = value;
}
inline void ModuleTeam_Req_InviteFriend::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Req_InviteFriend.roleId)
}

// -------------------------------------------------------------------

// ModuleTeam_Req_InviteFamily

// uint64 roleId = 1;
inline void ModuleTeam_Req_InviteFamily::clear_roleid() {
  roleid_ = uint64_t{0u};
}
inline uint64_t ModuleTeam_Req_InviteFamily::_internal_roleid() const {
  return roleid_;
}
inline uint64_t ModuleTeam_Req_InviteFamily::roleid() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Req_InviteFamily.roleId)
  return _internal_roleid();
}
inline void ModuleTeam_Req_InviteFamily::_internal_set_roleid(uint64_t value) {
  
  roleid_ = value;
}
inline void ModuleTeam_Req_InviteFamily::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Req_InviteFamily.roleId)
}

// -------------------------------------------------------------------

// ModuleTeam_Req_InvitePlayer

// uint64 roleId = 1;
inline void ModuleTeam_Req_InvitePlayer::clear_roleid() {
  roleid_ = uint64_t{0u};
}
inline uint64_t ModuleTeam_Req_InvitePlayer::_internal_roleid() const {
  return roleid_;
}
inline uint64_t ModuleTeam_Req_InvitePlayer::roleid() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Req_InvitePlayer.roleId)
  return _internal_roleid();
}
inline void ModuleTeam_Req_InvitePlayer::_internal_set_roleid(uint64_t value) {
  
  roleid_ = value;
}
inline void ModuleTeam_Req_InvitePlayer::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Req_InvitePlayer.roleId)
}

// uint32 zoneIdF = 2;
inline void ModuleTeam_Req_InvitePlayer::clear_zoneidf() {
  zoneidf_ = 0u;
}
inline uint32_t ModuleTeam_Req_InvitePlayer::_internal_zoneidf() const {
  return zoneidf_;
}
inline uint32_t ModuleTeam_Req_InvitePlayer::zoneidf() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Req_InvitePlayer.zoneIdF)
  return _internal_zoneidf();
}
inline void ModuleTeam_Req_InvitePlayer::_internal_set_zoneidf(uint32_t value) {
  
  zoneidf_ = value;
}
inline void ModuleTeam_Req_InvitePlayer::set_zoneidf(uint32_t value) {
  _internal_set_zoneidf(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Req_InvitePlayer.zoneIdF)
}

// -------------------------------------------------------------------

// ModuleTeam_Ntf_AddInvited

// .common.TeamInvited invited = 1;
inline bool ModuleTeam_Ntf_AddInvited::_internal_has_invited() const {
  return this != internal_default_instance() && invited_ != nullptr;
}
inline bool ModuleTeam_Ntf_AddInvited::has_invited() const {
  return _internal_has_invited();
}
inline const ::common::TeamInvited& ModuleTeam_Ntf_AddInvited::_internal_invited() const {
  const ::common::TeamInvited* p = invited_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::TeamInvited&>(
      ::common::_TeamInvited_default_instance_);
}
inline const ::common::TeamInvited& ModuleTeam_Ntf_AddInvited::invited() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Ntf_AddInvited.invited)
  return _internal_invited();
}
inline void ModuleTeam_Ntf_AddInvited::unsafe_arena_set_allocated_invited(
    ::common::TeamInvited* invited) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invited_);
  }
  invited_ = invited;
  if (invited) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client.ModuleTeam_Ntf_AddInvited.invited)
}
inline ::common::TeamInvited* ModuleTeam_Ntf_AddInvited::release_invited() {
  
  ::common::TeamInvited* temp = invited_;
  invited_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::TeamInvited* ModuleTeam_Ntf_AddInvited::unsafe_arena_release_invited() {
  // @@protoc_insertion_point(field_release:client.ModuleTeam_Ntf_AddInvited.invited)
  
  ::common::TeamInvited* temp = invited_;
  invited_ = nullptr;
  return temp;
}
inline ::common::TeamInvited* ModuleTeam_Ntf_AddInvited::_internal_mutable_invited() {
  
  if (invited_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::TeamInvited>(GetArenaForAllocation());
    invited_ = p;
  }
  return invited_;
}
inline ::common::TeamInvited* ModuleTeam_Ntf_AddInvited::mutable_invited() {
  ::common::TeamInvited* _msg = _internal_mutable_invited();
  // @@protoc_insertion_point(field_mutable:client.ModuleTeam_Ntf_AddInvited.invited)
  return _msg;
}
inline void ModuleTeam_Ntf_AddInvited::set_allocated_invited(::common::TeamInvited* invited) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(invited_);
  }
  if (invited) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invited));
    if (message_arena != submessage_arena) {
      invited = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invited, submessage_arena);
    }
    
  } else {
    
  }
  invited_ = invited;
  // @@protoc_insertion_point(field_set_allocated:client.ModuleTeam_Ntf_AddInvited.invited)
}

// -------------------------------------------------------------------

// ModuleTeam_Req_AgreeInvited

// uint64 teamId = 1;
inline void ModuleTeam_Req_AgreeInvited::clear_teamid() {
  teamid_ = uint64_t{0u};
}
inline uint64_t ModuleTeam_Req_AgreeInvited::_internal_teamid() const {
  return teamid_;
}
inline uint64_t ModuleTeam_Req_AgreeInvited::teamid() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Req_AgreeInvited.teamId)
  return _internal_teamid();
}
inline void ModuleTeam_Req_AgreeInvited::_internal_set_teamid(uint64_t value) {
  
  teamid_ = value;
}
inline void ModuleTeam_Req_AgreeInvited::set_teamid(uint64_t value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Req_AgreeInvited.teamId)
}

// uint64 leaderSceneId = 2;
inline void ModuleTeam_Req_AgreeInvited::clear_leadersceneid() {
  leadersceneid_ = uint64_t{0u};
}
inline uint64_t ModuleTeam_Req_AgreeInvited::_internal_leadersceneid() const {
  return leadersceneid_;
}
inline uint64_t ModuleTeam_Req_AgreeInvited::leadersceneid() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Req_AgreeInvited.leaderSceneId)
  return _internal_leadersceneid();
}
inline void ModuleTeam_Req_AgreeInvited::_internal_set_leadersceneid(uint64_t value) {
  
  leadersceneid_ = value;
}
inline void ModuleTeam_Req_AgreeInvited::set_leadersceneid(uint64_t value) {
  _internal_set_leadersceneid(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Req_AgreeInvited.leaderSceneId)
}

// -------------------------------------------------------------------

// ModuleTeam_Req_RefuseInvited

// uint64 teamId = 1;
inline void ModuleTeam_Req_RefuseInvited::clear_teamid() {
  teamid_ = uint64_t{0u};
}
inline uint64_t ModuleTeam_Req_RefuseInvited::_internal_teamid() const {
  return teamid_;
}
inline uint64_t ModuleTeam_Req_RefuseInvited::teamid() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Req_RefuseInvited.teamId)
  return _internal_teamid();
}
inline void ModuleTeam_Req_RefuseInvited::_internal_set_teamid(uint64_t value) {
  
  teamid_ = value;
}
inline void ModuleTeam_Req_RefuseInvited::set_teamid(uint64_t value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Req_RefuseInvited.teamId)
}

// -------------------------------------------------------------------

// ModuleTeam_Req_LeaveTeam

// -------------------------------------------------------------------

// ModuleTeam_Ntf_LeaveTeam

// uint32 type = 1;
inline void ModuleTeam_Ntf_LeaveTeam::clear_type() {
  type_ = 0u;
}
inline uint32_t ModuleTeam_Ntf_LeaveTeam::_internal_type() const {
  return type_;
}
inline uint32_t ModuleTeam_Ntf_LeaveTeam::type() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Ntf_LeaveTeam.type)
  return _internal_type();
}
inline void ModuleTeam_Ntf_LeaveTeam::_internal_set_type(uint32_t value) {
  
  type_ = value;
}
inline void ModuleTeam_Ntf_LeaveTeam::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Ntf_LeaveTeam.type)
}

// -------------------------------------------------------------------

// ModuleTeam_Req_ApplyTeam

// uint64 teamId = 1;
inline void ModuleTeam_Req_ApplyTeam::clear_teamid() {
  teamid_ = uint64_t{0u};
}
inline uint64_t ModuleTeam_Req_ApplyTeam::_internal_teamid() const {
  return teamid_;
}
inline uint64_t ModuleTeam_Req_ApplyTeam::teamid() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Req_ApplyTeam.teamId)
  return _internal_teamid();
}
inline void ModuleTeam_Req_ApplyTeam::_internal_set_teamid(uint64_t value) {
  
  teamid_ = value;
}
inline void ModuleTeam_Req_ApplyTeam::set_teamid(uint64_t value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Req_ApplyTeam.teamId)
}

// uint64 leaderSceneId = 2;
inline void ModuleTeam_Req_ApplyTeam::clear_leadersceneid() {
  leadersceneid_ = uint64_t{0u};
}
inline uint64_t ModuleTeam_Req_ApplyTeam::_internal_leadersceneid() const {
  return leadersceneid_;
}
inline uint64_t ModuleTeam_Req_ApplyTeam::leadersceneid() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Req_ApplyTeam.leaderSceneId)
  return _internal_leadersceneid();
}
inline void ModuleTeam_Req_ApplyTeam::_internal_set_leadersceneid(uint64_t value) {
  
  leadersceneid_ = value;
}
inline void ModuleTeam_Req_ApplyTeam::set_leadersceneid(uint64_t value) {
  _internal_set_leadersceneid(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Req_ApplyTeam.leaderSceneId)
}

// -------------------------------------------------------------------

// ModuleTeam_Req_FollowLeader

// -------------------------------------------------------------------

// ModuleTeam_Req_CancelFollow

// -------------------------------------------------------------------

// ModuleTeam_Req_AreeTogether

// uint64 teamId = 1;
inline void ModuleTeam_Req_AreeTogether::clear_teamid() {
  teamid_ = uint64_t{0u};
}
inline uint64_t ModuleTeam_Req_AreeTogether::_internal_teamid() const {
  return teamid_;
}
inline uint64_t ModuleTeam_Req_AreeTogether::teamid() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Req_AreeTogether.teamId)
  return _internal_teamid();
}
inline void ModuleTeam_Req_AreeTogether::_internal_set_teamid(uint64_t value) {
  
  teamid_ = value;
}
inline void ModuleTeam_Req_AreeTogether::set_teamid(uint64_t value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Req_AreeTogether.teamId)
}

// -------------------------------------------------------------------

// ModuleTeam_Req_RefuseTogether

// -------------------------------------------------------------------

// ModuleTeam_Req_ReplaceLeader

// uint64 roleId = 1;
inline void ModuleTeam_Req_ReplaceLeader::clear_roleid() {
  roleid_ = uint64_t{0u};
}
inline uint64_t ModuleTeam_Req_ReplaceLeader::_internal_roleid() const {
  return roleid_;
}
inline uint64_t ModuleTeam_Req_ReplaceLeader::roleid() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Req_ReplaceLeader.roleId)
  return _internal_roleid();
}
inline void ModuleTeam_Req_ReplaceLeader::_internal_set_roleid(uint64_t value) {
  
  roleid_ = value;
}
inline void ModuleTeam_Req_ReplaceLeader::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Req_ReplaceLeader.roleId)
}

// -------------------------------------------------------------------

// ModuleTeam_Req_PersonChangeTarget

// uint32 targerId = 1;
inline void ModuleTeam_Req_PersonChangeTarget::clear_targerid() {
  targerid_ = 0u;
}
inline uint32_t ModuleTeam_Req_PersonChangeTarget::_internal_targerid() const {
  return targerid_;
}
inline uint32_t ModuleTeam_Req_PersonChangeTarget::targerid() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Req_PersonChangeTarget.targerId)
  return _internal_targerid();
}
inline void ModuleTeam_Req_PersonChangeTarget::_internal_set_targerid(uint32_t value) {
  
  targerid_ = value;
}
inline void ModuleTeam_Req_PersonChangeTarget::set_targerid(uint32_t value) {
  _internal_set_targerid(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Req_PersonChangeTarget.targerId)
}

// -------------------------------------------------------------------

// ModuleTeam_Req_PersonCancelMatch

// -------------------------------------------------------------------

// ModuleTeam_Ntf_LeaderTogetherMember

// -------------------------------------------------------------------

// ModuleTeam_Ntf_LeaderEmptyApply

// -------------------------------------------------------------------

// ModuleTeam_Ntf_TeamRecruitInfo

// .common.RecruitTeam recruit = 1;
inline bool ModuleTeam_Ntf_TeamRecruitInfo::_internal_has_recruit() const {
  return this != internal_default_instance() && recruit_ != nullptr;
}
inline bool ModuleTeam_Ntf_TeamRecruitInfo::has_recruit() const {
  return _internal_has_recruit();
}
inline const ::common::RecruitTeam& ModuleTeam_Ntf_TeamRecruitInfo::_internal_recruit() const {
  const ::common::RecruitTeam* p = recruit_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RecruitTeam&>(
      ::common::_RecruitTeam_default_instance_);
}
inline const ::common::RecruitTeam& ModuleTeam_Ntf_TeamRecruitInfo::recruit() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Ntf_TeamRecruitInfo.recruit)
  return _internal_recruit();
}
inline void ModuleTeam_Ntf_TeamRecruitInfo::unsafe_arena_set_allocated_recruit(
    ::common::RecruitTeam* recruit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recruit_);
  }
  recruit_ = recruit;
  if (recruit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client.ModuleTeam_Ntf_TeamRecruitInfo.recruit)
}
inline ::common::RecruitTeam* ModuleTeam_Ntf_TeamRecruitInfo::release_recruit() {
  
  ::common::RecruitTeam* temp = recruit_;
  recruit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RecruitTeam* ModuleTeam_Ntf_TeamRecruitInfo::unsafe_arena_release_recruit() {
  // @@protoc_insertion_point(field_release:client.ModuleTeam_Ntf_TeamRecruitInfo.recruit)
  
  ::common::RecruitTeam* temp = recruit_;
  recruit_ = nullptr;
  return temp;
}
inline ::common::RecruitTeam* ModuleTeam_Ntf_TeamRecruitInfo::_internal_mutable_recruit() {
  
  if (recruit_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RecruitTeam>(GetArenaForAllocation());
    recruit_ = p;
  }
  return recruit_;
}
inline ::common::RecruitTeam* ModuleTeam_Ntf_TeamRecruitInfo::mutable_recruit() {
  ::common::RecruitTeam* _msg = _internal_mutable_recruit();
  // @@protoc_insertion_point(field_mutable:client.ModuleTeam_Ntf_TeamRecruitInfo.recruit)
  return _msg;
}
inline void ModuleTeam_Ntf_TeamRecruitInfo::set_allocated_recruit(::common::RecruitTeam* recruit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(recruit_);
  }
  if (recruit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recruit));
    if (message_arena != submessage_arena) {
      recruit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recruit, submessage_arena);
    }
    
  } else {
    
  }
  recruit_ = recruit;
  // @@protoc_insertion_point(field_set_allocated:client.ModuleTeam_Ntf_TeamRecruitInfo.recruit)
}

// -------------------------------------------------------------------

// ModuleTeam_Req_LeaderStartMatch

// bytes text = 1;
inline void ModuleTeam_Req_LeaderStartMatch::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& ModuleTeam_Req_LeaderStartMatch::text() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Req_LeaderStartMatch.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModuleTeam_Req_LeaderStartMatch::set_text(ArgT0&& arg0, ArgT... args) {
 
 text_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Req_LeaderStartMatch.text)
}
inline std::string* ModuleTeam_Req_LeaderStartMatch::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:client.ModuleTeam_Req_LeaderStartMatch.text)
  return _s;
}
inline const std::string& ModuleTeam_Req_LeaderStartMatch::_internal_text() const {
  return text_.Get();
}
inline void ModuleTeam_Req_LeaderStartMatch::_internal_set_text(const std::string& value) {
  
  text_.Set(value, GetArenaForAllocation());
}
inline std::string* ModuleTeam_Req_LeaderStartMatch::_internal_mutable_text() {
  
  return text_.Mutable(GetArenaForAllocation());
}
inline std::string* ModuleTeam_Req_LeaderStartMatch::release_text() {
  // @@protoc_insertion_point(field_release:client.ModuleTeam_Req_LeaderStartMatch.text)
  return text_.Release();
}
inline void ModuleTeam_Req_LeaderStartMatch::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault()) {
    text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:client.ModuleTeam_Req_LeaderStartMatch.text)
}

// -------------------------------------------------------------------

// ModuleTeam_Ntf_VoteBegin

// .common.TeamVoteBaseData base = 1;
inline bool ModuleTeam_Ntf_VoteBegin::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool ModuleTeam_Ntf_VoteBegin::has_base() const {
  return _internal_has_base();
}
inline const ::common::TeamVoteBaseData& ModuleTeam_Ntf_VoteBegin::_internal_base() const {
  const ::common::TeamVoteBaseData* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::TeamVoteBaseData&>(
      ::common::_TeamVoteBaseData_default_instance_);
}
inline const ::common::TeamVoteBaseData& ModuleTeam_Ntf_VoteBegin::base() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Ntf_VoteBegin.base)
  return _internal_base();
}
inline void ModuleTeam_Ntf_VoteBegin::unsafe_arena_set_allocated_base(
    ::common::TeamVoteBaseData* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client.ModuleTeam_Ntf_VoteBegin.base)
}
inline ::common::TeamVoteBaseData* ModuleTeam_Ntf_VoteBegin::release_base() {
  
  ::common::TeamVoteBaseData* temp = base_;
  base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::TeamVoteBaseData* ModuleTeam_Ntf_VoteBegin::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:client.ModuleTeam_Ntf_VoteBegin.base)
  
  ::common::TeamVoteBaseData* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::common::TeamVoteBaseData* ModuleTeam_Ntf_VoteBegin::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::TeamVoteBaseData>(GetArenaForAllocation());
    base_ = p;
  }
  return base_;
}
inline ::common::TeamVoteBaseData* ModuleTeam_Ntf_VoteBegin::mutable_base() {
  ::common::TeamVoteBaseData* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:client.ModuleTeam_Ntf_VoteBegin.base)
  return _msg;
}
inline void ModuleTeam_Ntf_VoteBegin::set_allocated_base(::common::TeamVoteBaseData* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:client.ModuleTeam_Ntf_VoteBegin.base)
}

// .common.RoleVoteStateList rolelist = 2;
inline bool ModuleTeam_Ntf_VoteBegin::_internal_has_rolelist() const {
  return this != internal_default_instance() && rolelist_ != nullptr;
}
inline bool ModuleTeam_Ntf_VoteBegin::has_rolelist() const {
  return _internal_has_rolelist();
}
inline const ::common::RoleVoteStateList& ModuleTeam_Ntf_VoteBegin::_internal_rolelist() const {
  const ::common::RoleVoteStateList* p = rolelist_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleVoteStateList&>(
      ::common::_RoleVoteStateList_default_instance_);
}
inline const ::common::RoleVoteStateList& ModuleTeam_Ntf_VoteBegin::rolelist() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Ntf_VoteBegin.rolelist)
  return _internal_rolelist();
}
inline void ModuleTeam_Ntf_VoteBegin::unsafe_arena_set_allocated_rolelist(
    ::common::RoleVoteStateList* rolelist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rolelist_);
  }
  rolelist_ = rolelist;
  if (rolelist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client.ModuleTeam_Ntf_VoteBegin.rolelist)
}
inline ::common::RoleVoteStateList* ModuleTeam_Ntf_VoteBegin::release_rolelist() {
  
  ::common::RoleVoteStateList* temp = rolelist_;
  rolelist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleVoteStateList* ModuleTeam_Ntf_VoteBegin::unsafe_arena_release_rolelist() {
  // @@protoc_insertion_point(field_release:client.ModuleTeam_Ntf_VoteBegin.rolelist)
  
  ::common::RoleVoteStateList* temp = rolelist_;
  rolelist_ = nullptr;
  return temp;
}
inline ::common::RoleVoteStateList* ModuleTeam_Ntf_VoteBegin::_internal_mutable_rolelist() {
  
  if (rolelist_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleVoteStateList>(GetArenaForAllocation());
    rolelist_ = p;
  }
  return rolelist_;
}
inline ::common::RoleVoteStateList* ModuleTeam_Ntf_VoteBegin::mutable_rolelist() {
  ::common::RoleVoteStateList* _msg = _internal_mutable_rolelist();
  // @@protoc_insertion_point(field_mutable:client.ModuleTeam_Ntf_VoteBegin.rolelist)
  return _msg;
}
inline void ModuleTeam_Ntf_VoteBegin::set_allocated_rolelist(::common::RoleVoteStateList* rolelist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rolelist_);
  }
  if (rolelist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rolelist));
    if (message_arena != submessage_arena) {
      rolelist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rolelist, submessage_arena);
    }
    
  } else {
    
  }
  rolelist_ = rolelist;
  // @@protoc_insertion_point(field_set_allocated:client.ModuleTeam_Ntf_VoteBegin.rolelist)
}

// -------------------------------------------------------------------

// ModuleTeam_Req_Vote

// bool agree = 1;
inline void ModuleTeam_Req_Vote::clear_agree() {
  agree_ = false;
}
inline bool ModuleTeam_Req_Vote::_internal_agree() const {
  return agree_;
}
inline bool ModuleTeam_Req_Vote::agree() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Req_Vote.agree)
  return _internal_agree();
}
inline void ModuleTeam_Req_Vote::_internal_set_agree(bool value) {
  
  agree_ = value;
}
inline void ModuleTeam_Req_Vote::set_agree(bool value) {
  _internal_set_agree(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Req_Vote.agree)
}

// -------------------------------------------------------------------

// ModuleTeam_Ntf_VoteUpdate

// .common.RoleVoteState role = 1;
inline bool ModuleTeam_Ntf_VoteUpdate::_internal_has_role() const {
  return this != internal_default_instance() && role_ != nullptr;
}
inline bool ModuleTeam_Ntf_VoteUpdate::has_role() const {
  return _internal_has_role();
}
inline const ::common::RoleVoteState& ModuleTeam_Ntf_VoteUpdate::_internal_role() const {
  const ::common::RoleVoteState* p = role_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleVoteState&>(
      ::common::_RoleVoteState_default_instance_);
}
inline const ::common::RoleVoteState& ModuleTeam_Ntf_VoteUpdate::role() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Ntf_VoteUpdate.role)
  return _internal_role();
}
inline void ModuleTeam_Ntf_VoteUpdate::unsafe_arena_set_allocated_role(
    ::common::RoleVoteState* role) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_);
  }
  role_ = role;
  if (role) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client.ModuleTeam_Ntf_VoteUpdate.role)
}
inline ::common::RoleVoteState* ModuleTeam_Ntf_VoteUpdate::release_role() {
  
  ::common::RoleVoteState* temp = role_;
  role_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleVoteState* ModuleTeam_Ntf_VoteUpdate::unsafe_arena_release_role() {
  // @@protoc_insertion_point(field_release:client.ModuleTeam_Ntf_VoteUpdate.role)
  
  ::common::RoleVoteState* temp = role_;
  role_ = nullptr;
  return temp;
}
inline ::common::RoleVoteState* ModuleTeam_Ntf_VoteUpdate::_internal_mutable_role() {
  
  if (role_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleVoteState>(GetArenaForAllocation());
    role_ = p;
  }
  return role_;
}
inline ::common::RoleVoteState* ModuleTeam_Ntf_VoteUpdate::mutable_role() {
  ::common::RoleVoteState* _msg = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:client.ModuleTeam_Ntf_VoteUpdate.role)
  return _msg;
}
inline void ModuleTeam_Ntf_VoteUpdate::set_allocated_role(::common::RoleVoteState* role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_);
  }
  if (role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role));
    if (message_arena != submessage_arena) {
      role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    
  } else {
    
  }
  role_ = role;
  // @@protoc_insertion_point(field_set_allocated:client.ModuleTeam_Ntf_VoteUpdate.role)
}

// -------------------------------------------------------------------

// ModuleTeam_Ntf_VoteEnd

// bool pass = 1;
inline void ModuleTeam_Ntf_VoteEnd::clear_pass() {
  pass_ = false;
}
inline bool ModuleTeam_Ntf_VoteEnd::_internal_pass() const {
  return pass_;
}
inline bool ModuleTeam_Ntf_VoteEnd::pass() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Ntf_VoteEnd.pass)
  return _internal_pass();
}
inline void ModuleTeam_Ntf_VoteEnd::_internal_set_pass(bool value) {
  
  pass_ = value;
}
inline void ModuleTeam_Ntf_VoteEnd::set_pass(bool value) {
  _internal_set_pass(value);
  // @@protoc_insertion_point(field_set:client.ModuleTeam_Ntf_VoteEnd.pass)
}

// -------------------------------------------------------------------

// ModuleTeam_Ntf_MountTeam

// .common.ModuleTeam team = 1;
inline bool ModuleTeam_Ntf_MountTeam::_internal_has_team() const {
  return this != internal_default_instance() && team_ != nullptr;
}
inline bool ModuleTeam_Ntf_MountTeam::has_team() const {
  return _internal_has_team();
}
inline const ::common::ModuleTeam& ModuleTeam_Ntf_MountTeam::_internal_team() const {
  const ::common::ModuleTeam* p = team_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ModuleTeam&>(
      ::common::_ModuleTeam_default_instance_);
}
inline const ::common::ModuleTeam& ModuleTeam_Ntf_MountTeam::team() const {
  // @@protoc_insertion_point(field_get:client.ModuleTeam_Ntf_MountTeam.team)
  return _internal_team();
}
inline void ModuleTeam_Ntf_MountTeam::unsafe_arena_set_allocated_team(
    ::common::ModuleTeam* team) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(team_);
  }
  team_ = team;
  if (team) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client.ModuleTeam_Ntf_MountTeam.team)
}
inline ::common::ModuleTeam* ModuleTeam_Ntf_MountTeam::release_team() {
  
  ::common::ModuleTeam* temp = team_;
  team_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ModuleTeam* ModuleTeam_Ntf_MountTeam::unsafe_arena_release_team() {
  // @@protoc_insertion_point(field_release:client.ModuleTeam_Ntf_MountTeam.team)
  
  ::common::ModuleTeam* temp = team_;
  team_ = nullptr;
  return temp;
}
inline ::common::ModuleTeam* ModuleTeam_Ntf_MountTeam::_internal_mutable_team() {
  
  if (team_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ModuleTeam>(GetArenaForAllocation());
    team_ = p;
  }
  return team_;
}
inline ::common::ModuleTeam* ModuleTeam_Ntf_MountTeam::mutable_team() {
  ::common::ModuleTeam* _msg = _internal_mutable_team();
  // @@protoc_insertion_point(field_mutable:client.ModuleTeam_Ntf_MountTeam.team)
  return _msg;
}
inline void ModuleTeam_Ntf_MountTeam::set_allocated_team(::common::ModuleTeam* team) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(team_);
  }
  if (team) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(team));
    if (message_arena != submessage_arena) {
      team = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, team, submessage_arena);
    }
    
  } else {
    
  }
  team_ = team;
  // @@protoc_insertion_point(field_set_allocated:client.ModuleTeam_Ntf_MountTeam.team)
}

// -------------------------------------------------------------------

// ModuleTeam_Req_FollowJumpMap

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::client::enModuleTeam> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::enModuleTeam>() {
  return ::client::enModuleTeam_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_team_2eproto
