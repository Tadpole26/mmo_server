// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: recordfriend.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_recordfriend_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_recordfriend_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_recordfriend_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_recordfriend_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_recordfriend_2eproto;
namespace record {
class RecordAllSendTimes;
struct RecordAllSendTimesDefaultTypeInternal;
extern RecordAllSendTimesDefaultTypeInternal _RecordAllSendTimes_default_instance_;
class RecordBlockList;
struct RecordBlockListDefaultTypeInternal;
extern RecordBlockListDefaultTypeInternal _RecordBlockList_default_instance_;
class RecordFriendData;
struct RecordFriendDataDefaultTypeInternal;
extern RecordFriendDataDefaultTypeInternal _RecordFriendData_default_instance_;
class RecordFriendList;
struct RecordFriendListDefaultTypeInternal;
extern RecordFriendListDefaultTypeInternal _RecordFriendList_default_instance_;
class RecordFriendRelation;
struct RecordFriendRelationDefaultTypeInternal;
extern RecordFriendRelationDefaultTypeInternal _RecordFriendRelation_default_instance_;
class RecordFriendSvrBrief;
struct RecordFriendSvrBriefDefaultTypeInternal;
extern RecordFriendSvrBriefDefaultTypeInternal _RecordFriendSvrBrief_default_instance_;
class RecordFriendSvrBrief_MapVersionsEntry_DoNotUse;
struct RecordFriendSvrBrief_MapVersionsEntry_DoNotUseDefaultTypeInternal;
extern RecordFriendSvrBrief_MapVersionsEntry_DoNotUseDefaultTypeInternal _RecordFriendSvrBrief_MapVersionsEntry_DoNotUse_default_instance_;
class RecordModuleFriend;
struct RecordModuleFriendDefaultTypeInternal;
extern RecordModuleFriendDefaultTypeInternal _RecordModuleFriend_default_instance_;
class RecordOneSendTimes;
struct RecordOneSendTimesDefaultTypeInternal;
extern RecordOneSendTimesDefaultTypeInternal _RecordOneSendTimes_default_instance_;
class RecordRecommendFilter;
struct RecordRecommendFilterDefaultTypeInternal;
extern RecordRecommendFilterDefaultTypeInternal _RecordRecommendFilter_default_instance_;
class RecordRecommendLabel;
struct RecordRecommendLabelDefaultTypeInternal;
extern RecordRecommendLabelDefaultTypeInternal _RecordRecommendLabel_default_instance_;
class RecordRelationList;
struct RecordRelationListDefaultTypeInternal;
extern RecordRelationListDefaultTypeInternal _RecordRelationList_default_instance_;
class RecordRequestList;
struct RecordRequestListDefaultTypeInternal;
extern RecordRequestListDefaultTypeInternal _RecordRequestList_default_instance_;
class RecordSendGift;
struct RecordSendGiftDefaultTypeInternal;
extern RecordSendGiftDefaultTypeInternal _RecordSendGift_default_instance_;
class RecordSendGiftTimes;
struct RecordSendGiftTimesDefaultTypeInternal;
extern RecordSendGiftTimesDefaultTypeInternal _RecordSendGiftTimes_default_instance_;
class RecordSendGiftVersion;
struct RecordSendGiftVersionDefaultTypeInternal;
extern RecordSendGiftVersionDefaultTypeInternal _RecordSendGiftVersion_default_instance_;
class RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse;
struct RecordSendGiftVersion_MapSendGiftsEntry_DoNotUseDefaultTypeInternal;
extern RecordSendGiftVersion_MapSendGiftsEntry_DoNotUseDefaultTypeInternal _RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse_default_instance_;
}  // namespace record
PROTOBUF_NAMESPACE_OPEN
template<> ::record::RecordAllSendTimes* Arena::CreateMaybeMessage<::record::RecordAllSendTimes>(Arena*);
template<> ::record::RecordBlockList* Arena::CreateMaybeMessage<::record::RecordBlockList>(Arena*);
template<> ::record::RecordFriendData* Arena::CreateMaybeMessage<::record::RecordFriendData>(Arena*);
template<> ::record::RecordFriendList* Arena::CreateMaybeMessage<::record::RecordFriendList>(Arena*);
template<> ::record::RecordFriendRelation* Arena::CreateMaybeMessage<::record::RecordFriendRelation>(Arena*);
template<> ::record::RecordFriendSvrBrief* Arena::CreateMaybeMessage<::record::RecordFriendSvrBrief>(Arena*);
template<> ::record::RecordFriendSvrBrief_MapVersionsEntry_DoNotUse* Arena::CreateMaybeMessage<::record::RecordFriendSvrBrief_MapVersionsEntry_DoNotUse>(Arena*);
template<> ::record::RecordModuleFriend* Arena::CreateMaybeMessage<::record::RecordModuleFriend>(Arena*);
template<> ::record::RecordOneSendTimes* Arena::CreateMaybeMessage<::record::RecordOneSendTimes>(Arena*);
template<> ::record::RecordRecommendFilter* Arena::CreateMaybeMessage<::record::RecordRecommendFilter>(Arena*);
template<> ::record::RecordRecommendLabel* Arena::CreateMaybeMessage<::record::RecordRecommendLabel>(Arena*);
template<> ::record::RecordRelationList* Arena::CreateMaybeMessage<::record::RecordRelationList>(Arena*);
template<> ::record::RecordRequestList* Arena::CreateMaybeMessage<::record::RecordRequestList>(Arena*);
template<> ::record::RecordSendGift* Arena::CreateMaybeMessage<::record::RecordSendGift>(Arena*);
template<> ::record::RecordSendGiftTimes* Arena::CreateMaybeMessage<::record::RecordSendGiftTimes>(Arena*);
template<> ::record::RecordSendGiftVersion* Arena::CreateMaybeMessage<::record::RecordSendGiftVersion>(Arena*);
template<> ::record::RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse* Arena::CreateMaybeMessage<::record::RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace record {

// ===================================================================

class RecordModuleFriend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:record.RecordModuleFriend) */ {
 public:
  inline RecordModuleFriend() : RecordModuleFriend(nullptr) {}
  ~RecordModuleFriend() override;
  explicit PROTOBUF_CONSTEXPR RecordModuleFriend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordModuleFriend(const RecordModuleFriend& from);
  RecordModuleFriend(RecordModuleFriend&& from) noexcept
    : RecordModuleFriend() {
    *this = ::std::move(from);
  }

  inline RecordModuleFriend& operator=(const RecordModuleFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordModuleFriend& operator=(RecordModuleFriend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordModuleFriend& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordModuleFriend* internal_default_instance() {
    return reinterpret_cast<const RecordModuleFriend*>(
               &_RecordModuleFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RecordModuleFriend& a, RecordModuleFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordModuleFriend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordModuleFriend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordModuleFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordModuleFriend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordModuleFriend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordModuleFriend& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordModuleFriend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "record.RecordModuleFriend";
  }
  protected:
  explicit RecordModuleFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOSendGiftFieldNumber = 3,
    kLlRecvGiftUidFieldNumber = 1,
    kLlExpiredGiftUidFieldNumber = 2,
  };
  // .record.RecordSendGiftVersion oSendGift = 3;
  bool has_osendgift() const;
  private:
  bool _internal_has_osendgift() const;
  public:
  void clear_osendgift();
  const ::record::RecordSendGiftVersion& osendgift() const;
  PROTOBUF_NODISCARD ::record::RecordSendGiftVersion* release_osendgift();
  ::record::RecordSendGiftVersion* mutable_osendgift();
  void set_allocated_osendgift(::record::RecordSendGiftVersion* osendgift);
  private:
  const ::record::RecordSendGiftVersion& _internal_osendgift() const;
  ::record::RecordSendGiftVersion* _internal_mutable_osendgift();
  public:
  void unsafe_arena_set_allocated_osendgift(
      ::record::RecordSendGiftVersion* osendgift);
  ::record::RecordSendGiftVersion* unsafe_arena_release_osendgift();

  // uint64 llRecvGiftUid = 1;
  void clear_llrecvgiftuid();
  uint64_t llrecvgiftuid() const;
  void set_llrecvgiftuid(uint64_t value);
  private:
  uint64_t _internal_llrecvgiftuid() const;
  void _internal_set_llrecvgiftuid(uint64_t value);
  public:

  // uint64 llExpiredGiftUid = 2;
  void clear_llexpiredgiftuid();
  uint64_t llexpiredgiftuid() const;
  void set_llexpiredgiftuid(uint64_t value);
  private:
  uint64_t _internal_llexpiredgiftuid() const;
  void _internal_set_llexpiredgiftuid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:record.RecordModuleFriend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::record::RecordSendGiftVersion* osendgift_;
  uint64_t llrecvgiftuid_;
  uint64_t llexpiredgiftuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_recordfriend_2eproto;
};
// -------------------------------------------------------------------

class RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse, 
    uint32_t, ::record::RecordSendGift,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse, 
    uint32_t, ::record::RecordSendGift,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse& other);
  static const RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse*>(&_RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_recordfriend_2eproto;
};

// -------------------------------------------------------------------

class RecordSendGiftVersion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:record.RecordSendGiftVersion) */ {
 public:
  inline RecordSendGiftVersion() : RecordSendGiftVersion(nullptr) {}
  ~RecordSendGiftVersion() override;
  explicit PROTOBUF_CONSTEXPR RecordSendGiftVersion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordSendGiftVersion(const RecordSendGiftVersion& from);
  RecordSendGiftVersion(RecordSendGiftVersion&& from) noexcept
    : RecordSendGiftVersion() {
    *this = ::std::move(from);
  }

  inline RecordSendGiftVersion& operator=(const RecordSendGiftVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordSendGiftVersion& operator=(RecordSendGiftVersion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordSendGiftVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordSendGiftVersion* internal_default_instance() {
    return reinterpret_cast<const RecordSendGiftVersion*>(
               &_RecordSendGiftVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RecordSendGiftVersion& a, RecordSendGiftVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordSendGiftVersion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordSendGiftVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordSendGiftVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordSendGiftVersion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordSendGiftVersion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordSendGiftVersion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordSendGiftVersion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "record.RecordSendGiftVersion";
  }
  protected:
  explicit RecordSendGiftVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMapSendGiftsFieldNumber = 2,
    kUiVersionIdFieldNumber = 1,
  };
  // map<uint32, .record.RecordSendGift> mapSendGifts = 2;
  int mapsendgifts_size() const;
  private:
  int _internal_mapsendgifts_size() const;
  public:
  void clear_mapsendgifts();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::record::RecordSendGift >&
      _internal_mapsendgifts() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::record::RecordSendGift >*
      _internal_mutable_mapsendgifts();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::record::RecordSendGift >&
      mapsendgifts() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::record::RecordSendGift >*
      mutable_mapsendgifts();

  // uint32 uiVersionId = 1;
  void clear_uiversionid();
  uint32_t uiversionid() const;
  void set_uiversionid(uint32_t value);
  private:
  uint32_t _internal_uiversionid() const;
  void _internal_set_uiversionid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:record.RecordSendGiftVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RecordSendGiftVersion_MapSendGiftsEntry_DoNotUse,
      uint32_t, ::record::RecordSendGift,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> mapsendgifts_;
  uint32_t uiversionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_recordfriend_2eproto;
};
// -------------------------------------------------------------------

class RecordSendGift final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:record.RecordSendGift) */ {
 public:
  inline RecordSendGift() : RecordSendGift(nullptr) {}
  ~RecordSendGift() override;
  explicit PROTOBUF_CONSTEXPR RecordSendGift(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordSendGift(const RecordSendGift& from);
  RecordSendGift(RecordSendGift&& from) noexcept
    : RecordSendGift() {
    *this = ::std::move(from);
  }

  inline RecordSendGift& operator=(const RecordSendGift& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordSendGift& operator=(RecordSendGift&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordSendGift& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordSendGift* internal_default_instance() {
    return reinterpret_cast<const RecordSendGift*>(
               &_RecordSendGift_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RecordSendGift& a, RecordSendGift& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordSendGift* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordSendGift* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordSendGift* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordSendGift>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordSendGift& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordSendGift& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordSendGift* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "record.RecordSendGift";
  }
  protected:
  explicit RecordSendGift(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlRecverFieldNumber = 1,
    kLlItemCountFieldNumber = 3,
    kUiItemIdFieldNumber = 2,
    kBBindFieldNumber = 4,
  };
  // uint64 llRecver = 1;
  void clear_llrecver();
  uint64_t llrecver() const;
  void set_llrecver(uint64_t value);
  private:
  uint64_t _internal_llrecver() const;
  void _internal_set_llrecver(uint64_t value);
  public:

  // uint64 llItemCount = 3;
  void clear_llitemcount();
  uint64_t llitemcount() const;
  void set_llitemcount(uint64_t value);
  private:
  uint64_t _internal_llitemcount() const;
  void _internal_set_llitemcount(uint64_t value);
  public:

  // uint32 uiItemId = 2;
  void clear_uiitemid();
  uint32_t uiitemid() const;
  void set_uiitemid(uint32_t value);
  private:
  uint32_t _internal_uiitemid() const;
  void _internal_set_uiitemid(uint32_t value);
  public:

  // bool bBind = 4;
  void clear_bbind();
  bool bbind() const;
  void set_bbind(bool value);
  private:
  bool _internal_bbind() const;
  void _internal_set_bbind(bool value);
  public:

  // @@protoc_insertion_point(class_scope:record.RecordSendGift)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t llrecver_;
  uint64_t llitemcount_;
  uint32_t uiitemid_;
  bool bbind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_recordfriend_2eproto;
};
// -------------------------------------------------------------------

class RecordFriendData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:record.RecordFriendData) */ {
 public:
  inline RecordFriendData() : RecordFriendData(nullptr) {}
  ~RecordFriendData() override;
  explicit PROTOBUF_CONSTEXPR RecordFriendData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordFriendData(const RecordFriendData& from);
  RecordFriendData(RecordFriendData&& from) noexcept
    : RecordFriendData() {
    *this = ::std::move(from);
  }

  inline RecordFriendData& operator=(const RecordFriendData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordFriendData& operator=(RecordFriendData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordFriendData& default_instance() {
    return *internal_default_instance();
  }
  enum ODataCase {
    kOBrief = 1,
    kOFriends = 2,
    kORequest = 3,
    kOBlock = 4,
    kOFilter = 5,
    kOLabel = 6,
    kOGiftTimes = 7,
    ODATA_NOT_SET = 0,
  };

  static inline const RecordFriendData* internal_default_instance() {
    return reinterpret_cast<const RecordFriendData*>(
               &_RecordFriendData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RecordFriendData& a, RecordFriendData& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordFriendData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordFriendData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordFriendData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordFriendData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordFriendData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordFriendData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordFriendData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "record.RecordFriendData";
  }
  protected:
  explicit RecordFriendData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOBriefFieldNumber = 1,
    kOFriendsFieldNumber = 2,
    kORequestFieldNumber = 3,
    kOBlockFieldNumber = 4,
    kOFilterFieldNumber = 5,
    kOLabelFieldNumber = 6,
    kOGiftTimesFieldNumber = 7,
  };
  // .record.RecordFriendSvrBrief oBrief = 1;
  bool has_obrief() const;
  private:
  bool _internal_has_obrief() const;
  public:
  void clear_obrief();
  const ::record::RecordFriendSvrBrief& obrief() const;
  PROTOBUF_NODISCARD ::record::RecordFriendSvrBrief* release_obrief();
  ::record::RecordFriendSvrBrief* mutable_obrief();
  void set_allocated_obrief(::record::RecordFriendSvrBrief* obrief);
  private:
  const ::record::RecordFriendSvrBrief& _internal_obrief() const;
  ::record::RecordFriendSvrBrief* _internal_mutable_obrief();
  public:
  void unsafe_arena_set_allocated_obrief(
      ::record::RecordFriendSvrBrief* obrief);
  ::record::RecordFriendSvrBrief* unsafe_arena_release_obrief();

  // .record.RecordFriendList oFriends = 2;
  bool has_ofriends() const;
  private:
  bool _internal_has_ofriends() const;
  public:
  void clear_ofriends();
  const ::record::RecordFriendList& ofriends() const;
  PROTOBUF_NODISCARD ::record::RecordFriendList* release_ofriends();
  ::record::RecordFriendList* mutable_ofriends();
  void set_allocated_ofriends(::record::RecordFriendList* ofriends);
  private:
  const ::record::RecordFriendList& _internal_ofriends() const;
  ::record::RecordFriendList* _internal_mutable_ofriends();
  public:
  void unsafe_arena_set_allocated_ofriends(
      ::record::RecordFriendList* ofriends);
  ::record::RecordFriendList* unsafe_arena_release_ofriends();

  // .record.RecordRequestList oRequest = 3;
  bool has_orequest() const;
  private:
  bool _internal_has_orequest() const;
  public:
  void clear_orequest();
  const ::record::RecordRequestList& orequest() const;
  PROTOBUF_NODISCARD ::record::RecordRequestList* release_orequest();
  ::record::RecordRequestList* mutable_orequest();
  void set_allocated_orequest(::record::RecordRequestList* orequest);
  private:
  const ::record::RecordRequestList& _internal_orequest() const;
  ::record::RecordRequestList* _internal_mutable_orequest();
  public:
  void unsafe_arena_set_allocated_orequest(
      ::record::RecordRequestList* orequest);
  ::record::RecordRequestList* unsafe_arena_release_orequest();

  // .record.RecordBlockList oBlock = 4;
  bool has_oblock() const;
  private:
  bool _internal_has_oblock() const;
  public:
  void clear_oblock();
  const ::record::RecordBlockList& oblock() const;
  PROTOBUF_NODISCARD ::record::RecordBlockList* release_oblock();
  ::record::RecordBlockList* mutable_oblock();
  void set_allocated_oblock(::record::RecordBlockList* oblock);
  private:
  const ::record::RecordBlockList& _internal_oblock() const;
  ::record::RecordBlockList* _internal_mutable_oblock();
  public:
  void unsafe_arena_set_allocated_oblock(
      ::record::RecordBlockList* oblock);
  ::record::RecordBlockList* unsafe_arena_release_oblock();

  // .record.RecordRecommendFilter oFilter = 5;
  bool has_ofilter() const;
  private:
  bool _internal_has_ofilter() const;
  public:
  void clear_ofilter();
  const ::record::RecordRecommendFilter& ofilter() const;
  PROTOBUF_NODISCARD ::record::RecordRecommendFilter* release_ofilter();
  ::record::RecordRecommendFilter* mutable_ofilter();
  void set_allocated_ofilter(::record::RecordRecommendFilter* ofilter);
  private:
  const ::record::RecordRecommendFilter& _internal_ofilter() const;
  ::record::RecordRecommendFilter* _internal_mutable_ofilter();
  public:
  void unsafe_arena_set_allocated_ofilter(
      ::record::RecordRecommendFilter* ofilter);
  ::record::RecordRecommendFilter* unsafe_arena_release_ofilter();

  // .record.RecordRecommendLabel oLabel = 6;
  bool has_olabel() const;
  private:
  bool _internal_has_olabel() const;
  public:
  void clear_olabel();
  const ::record::RecordRecommendLabel& olabel() const;
  PROTOBUF_NODISCARD ::record::RecordRecommendLabel* release_olabel();
  ::record::RecordRecommendLabel* mutable_olabel();
  void set_allocated_olabel(::record::RecordRecommendLabel* olabel);
  private:
  const ::record::RecordRecommendLabel& _internal_olabel() const;
  ::record::RecordRecommendLabel* _internal_mutable_olabel();
  public:
  void unsafe_arena_set_allocated_olabel(
      ::record::RecordRecommendLabel* olabel);
  ::record::RecordRecommendLabel* unsafe_arena_release_olabel();

  // .record.RecordSendGiftTimes oGiftTimes = 7;
  bool has_ogifttimes() const;
  private:
  bool _internal_has_ogifttimes() const;
  public:
  void clear_ogifttimes();
  const ::record::RecordSendGiftTimes& ogifttimes() const;
  PROTOBUF_NODISCARD ::record::RecordSendGiftTimes* release_ogifttimes();
  ::record::RecordSendGiftTimes* mutable_ogifttimes();
  void set_allocated_ogifttimes(::record::RecordSendGiftTimes* ogifttimes);
  private:
  const ::record::RecordSendGiftTimes& _internal_ogifttimes() const;
  ::record::RecordSendGiftTimes* _internal_mutable_ogifttimes();
  public:
  void unsafe_arena_set_allocated_ogifttimes(
      ::record::RecordSendGiftTimes* ogifttimes);
  ::record::RecordSendGiftTimes* unsafe_arena_release_ogifttimes();

  void clear_oData();
  ODataCase oData_case() const;
  // @@protoc_insertion_point(class_scope:record.RecordFriendData)
 private:
  class _Internal;
  void set_has_obrief();
  void set_has_ofriends();
  void set_has_orequest();
  void set_has_oblock();
  void set_has_ofilter();
  void set_has_olabel();
  void set_has_ogifttimes();

  inline bool has_oData() const;
  inline void clear_has_oData();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ODataUnion {
    constexpr ODataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::record::RecordFriendSvrBrief* obrief_;
    ::record::RecordFriendList* ofriends_;
    ::record::RecordRequestList* orequest_;
    ::record::RecordBlockList* oblock_;
    ::record::RecordRecommendFilter* ofilter_;
    ::record::RecordRecommendLabel* olabel_;
    ::record::RecordSendGiftTimes* ogifttimes_;
  } oData_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_recordfriend_2eproto;
};
// -------------------------------------------------------------------

class RecordFriendSvrBrief_MapVersionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RecordFriendSvrBrief_MapVersionsEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RecordFriendSvrBrief_MapVersionsEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  RecordFriendSvrBrief_MapVersionsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR RecordFriendSvrBrief_MapVersionsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit RecordFriendSvrBrief_MapVersionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RecordFriendSvrBrief_MapVersionsEntry_DoNotUse& other);
  static const RecordFriendSvrBrief_MapVersionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RecordFriendSvrBrief_MapVersionsEntry_DoNotUse*>(&_RecordFriendSvrBrief_MapVersionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_recordfriend_2eproto;
};

// -------------------------------------------------------------------

class RecordFriendSvrBrief final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:record.RecordFriendSvrBrief) */ {
 public:
  inline RecordFriendSvrBrief() : RecordFriendSvrBrief(nullptr) {}
  ~RecordFriendSvrBrief() override;
  explicit PROTOBUF_CONSTEXPR RecordFriendSvrBrief(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordFriendSvrBrief(const RecordFriendSvrBrief& from);
  RecordFriendSvrBrief(RecordFriendSvrBrief&& from) noexcept
    : RecordFriendSvrBrief() {
    *this = ::std::move(from);
  }

  inline RecordFriendSvrBrief& operator=(const RecordFriendSvrBrief& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordFriendSvrBrief& operator=(RecordFriendSvrBrief&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordFriendSvrBrief& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordFriendSvrBrief* internal_default_instance() {
    return reinterpret_cast<const RecordFriendSvrBrief*>(
               &_RecordFriendSvrBrief_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RecordFriendSvrBrief& a, RecordFriendSvrBrief& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordFriendSvrBrief* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordFriendSvrBrief* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordFriendSvrBrief* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordFriendSvrBrief>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordFriendSvrBrief& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordFriendSvrBrief& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordFriendSvrBrief* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "record.RecordFriendSvrBrief";
  }
  protected:
  explicit RecordFriendSvrBrief(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMapVersionsFieldNumber = 5,
    kStrRoleNameFieldNumber = 3,
    kUiSexFieldNumber = 1,
    kUiLevelFieldNumber = 2,
    kUiOfflineTimeFieldNumber = 4,
    kUiSendGiftVersionIdFieldNumber = 6,
    kBFuncOpenFieldNumber = 7,
    kUiOnlineTimeFieldNumber = 8,
  };
  // map<uint32, uint32> mapVersions = 5;
  int mapversions_size() const;
  private:
  int _internal_mapversions_size() const;
  public:
  void clear_mapversions();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_mapversions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_mapversions();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      mapversions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_mapversions();

  // bytes strRoleName = 3;
  void clear_strrolename();
  const std::string& strrolename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strrolename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strrolename();
  PROTOBUF_NODISCARD std::string* release_strrolename();
  void set_allocated_strrolename(std::string* strrolename);
  private:
  const std::string& _internal_strrolename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strrolename(const std::string& value);
  std::string* _internal_mutable_strrolename();
  public:

  // uint32 uiSex = 1;
  void clear_uisex();
  uint32_t uisex() const;
  void set_uisex(uint32_t value);
  private:
  uint32_t _internal_uisex() const;
  void _internal_set_uisex(uint32_t value);
  public:

  // uint32 uiLevel = 2;
  void clear_uilevel();
  uint32_t uilevel() const;
  void set_uilevel(uint32_t value);
  private:
  uint32_t _internal_uilevel() const;
  void _internal_set_uilevel(uint32_t value);
  public:

  // uint32 uiOfflineTime = 4;
  void clear_uiofflinetime();
  uint32_t uiofflinetime() const;
  void set_uiofflinetime(uint32_t value);
  private:
  uint32_t _internal_uiofflinetime() const;
  void _internal_set_uiofflinetime(uint32_t value);
  public:

  // uint32 uiSendGiftVersionId = 6;
  void clear_uisendgiftversionid();
  uint32_t uisendgiftversionid() const;
  void set_uisendgiftversionid(uint32_t value);
  private:
  uint32_t _internal_uisendgiftversionid() const;
  void _internal_set_uisendgiftversionid(uint32_t value);
  public:

  // bool bFuncOpen = 7;
  void clear_bfuncopen();
  bool bfuncopen() const;
  void set_bfuncopen(bool value);
  private:
  bool _internal_bfuncopen() const;
  void _internal_set_bfuncopen(bool value);
  public:

  // uint32 uiOnlineTime = 8;
  void clear_uionlinetime();
  uint32_t uionlinetime() const;
  void set_uionlinetime(uint32_t value);
  private:
  uint32_t _internal_uionlinetime() const;
  void _internal_set_uionlinetime(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:record.RecordFriendSvrBrief)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RecordFriendSvrBrief_MapVersionsEntry_DoNotUse,
      uint32_t, uint32_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> mapversions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strrolename_;
  uint32_t uisex_;
  uint32_t uilevel_;
  uint32_t uiofflinetime_;
  uint32_t uisendgiftversionid_;
  bool bfuncopen_;
  uint32_t uionlinetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_recordfriend_2eproto;
};
// -------------------------------------------------------------------

class RecordFriendList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:record.RecordFriendList) */ {
 public:
  inline RecordFriendList() : RecordFriendList(nullptr) {}
  ~RecordFriendList() override;
  explicit PROTOBUF_CONSTEXPR RecordFriendList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordFriendList(const RecordFriendList& from);
  RecordFriendList(RecordFriendList&& from) noexcept
    : RecordFriendList() {
    *this = ::std::move(from);
  }

  inline RecordFriendList& operator=(const RecordFriendList& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordFriendList& operator=(RecordFriendList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordFriendList& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordFriendList* internal_default_instance() {
    return reinterpret_cast<const RecordFriendList*>(
               &_RecordFriendList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RecordFriendList& a, RecordFriendList& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordFriendList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordFriendList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordFriendList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordFriendList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordFriendList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordFriendList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordFriendList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "record.RecordFriendList";
  }
  protected:
  explicit RecordFriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOFriendsFieldNumber = 2,
    kUiFriendListMaxFieldNumber = 1,
  };
  // .record.RecordRelationList oFriends = 2;
  bool has_ofriends() const;
  private:
  bool _internal_has_ofriends() const;
  public:
  void clear_ofriends();
  const ::record::RecordRelationList& ofriends() const;
  PROTOBUF_NODISCARD ::record::RecordRelationList* release_ofriends();
  ::record::RecordRelationList* mutable_ofriends();
  void set_allocated_ofriends(::record::RecordRelationList* ofriends);
  private:
  const ::record::RecordRelationList& _internal_ofriends() const;
  ::record::RecordRelationList* _internal_mutable_ofriends();
  public:
  void unsafe_arena_set_allocated_ofriends(
      ::record::RecordRelationList* ofriends);
  ::record::RecordRelationList* unsafe_arena_release_ofriends();

  // uint32 uiFriendListMax = 1;
  void clear_uifriendlistmax();
  uint32_t uifriendlistmax() const;
  void set_uifriendlistmax(uint32_t value);
  private:
  uint32_t _internal_uifriendlistmax() const;
  void _internal_set_uifriendlistmax(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:record.RecordFriendList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::record::RecordRelationList* ofriends_;
  uint32_t uifriendlistmax_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_recordfriend_2eproto;
};
// -------------------------------------------------------------------

class RecordRelationList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:record.RecordRelationList) */ {
 public:
  inline RecordRelationList() : RecordRelationList(nullptr) {}
  ~RecordRelationList() override;
  explicit PROTOBUF_CONSTEXPR RecordRelationList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordRelationList(const RecordRelationList& from);
  RecordRelationList(RecordRelationList&& from) noexcept
    : RecordRelationList() {
    *this = ::std::move(from);
  }

  inline RecordRelationList& operator=(const RecordRelationList& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordRelationList& operator=(RecordRelationList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordRelationList& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordRelationList* internal_default_instance() {
    return reinterpret_cast<const RecordRelationList*>(
               &_RecordRelationList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RecordRelationList& a, RecordRelationList& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordRelationList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordRelationList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordRelationList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordRelationList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordRelationList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordRelationList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordRelationList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "record.RecordRelationList";
  }
  protected:
  explicit RecordRelationList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecRelationsFieldNumber = 1,
  };
  // repeated .record.RecordFriendRelation vecRelations = 1;
  int vecrelations_size() const;
  private:
  int _internal_vecrelations_size() const;
  public:
  void clear_vecrelations();
  ::record::RecordFriendRelation* mutable_vecrelations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::record::RecordFriendRelation >*
      mutable_vecrelations();
  private:
  const ::record::RecordFriendRelation& _internal_vecrelations(int index) const;
  ::record::RecordFriendRelation* _internal_add_vecrelations();
  public:
  const ::record::RecordFriendRelation& vecrelations(int index) const;
  ::record::RecordFriendRelation* add_vecrelations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::record::RecordFriendRelation >&
      vecrelations() const;

  // @@protoc_insertion_point(class_scope:record.RecordRelationList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::record::RecordFriendRelation > vecrelations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_recordfriend_2eproto;
};
// -------------------------------------------------------------------

class RecordFriendRelation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:record.RecordFriendRelation) */ {
 public:
  inline RecordFriendRelation() : RecordFriendRelation(nullptr) {}
  ~RecordFriendRelation() override;
  explicit PROTOBUF_CONSTEXPR RecordFriendRelation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordFriendRelation(const RecordFriendRelation& from);
  RecordFriendRelation(RecordFriendRelation&& from) noexcept
    : RecordFriendRelation() {
    *this = ::std::move(from);
  }

  inline RecordFriendRelation& operator=(const RecordFriendRelation& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordFriendRelation& operator=(RecordFriendRelation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordFriendRelation& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordFriendRelation* internal_default_instance() {
    return reinterpret_cast<const RecordFriendRelation*>(
               &_RecordFriendRelation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RecordFriendRelation& a, RecordFriendRelation& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordFriendRelation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordFriendRelation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordFriendRelation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordFriendRelation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordFriendRelation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordFriendRelation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordFriendRelation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "record.RecordFriendRelation";
  }
  protected:
  explicit RecordFriendRelation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlRoleIdFieldNumber = 1,
    kUiFriendShipFieldNumber = 2,
    kUiDailyChatFieldNumber = 3,
  };
  // uint64 llRoleId = 1;
  void clear_llroleid();
  uint64_t llroleid() const;
  void set_llroleid(uint64_t value);
  private:
  uint64_t _internal_llroleid() const;
  void _internal_set_llroleid(uint64_t value);
  public:

  // uint32 uiFriendShip = 2;
  void clear_uifriendship();
  uint32_t uifriendship() const;
  void set_uifriendship(uint32_t value);
  private:
  uint32_t _internal_uifriendship() const;
  void _internal_set_uifriendship(uint32_t value);
  public:

  // uint32 uiDailyChat = 3;
  void clear_uidailychat();
  uint32_t uidailychat() const;
  void set_uidailychat(uint32_t value);
  private:
  uint32_t _internal_uidailychat() const;
  void _internal_set_uidailychat(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:record.RecordFriendRelation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t llroleid_;
  uint32_t uifriendship_;
  uint32_t uidailychat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_recordfriend_2eproto;
};
// -------------------------------------------------------------------

class RecordRequestList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:record.RecordRequestList) */ {
 public:
  inline RecordRequestList() : RecordRequestList(nullptr) {}
  ~RecordRequestList() override;
  explicit PROTOBUF_CONSTEXPR RecordRequestList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordRequestList(const RecordRequestList& from);
  RecordRequestList(RecordRequestList&& from) noexcept
    : RecordRequestList() {
    *this = ::std::move(from);
  }

  inline RecordRequestList& operator=(const RecordRequestList& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordRequestList& operator=(RecordRequestList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordRequestList& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordRequestList* internal_default_instance() {
    return reinterpret_cast<const RecordRequestList*>(
               &_RecordRequestList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RecordRequestList& a, RecordRequestList& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordRequestList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordRequestList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordRequestList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordRequestList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordRequestList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordRequestList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordRequestList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "record.RecordRequestList";
  }
  protected:
  explicit RecordRequestList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecRequestListFieldNumber = 1,
  };
  // repeated uint64 vecRequestList = 1;
  int vecrequestlist_size() const;
  private:
  int _internal_vecrequestlist_size() const;
  public:
  void clear_vecrequestlist();
  private:
  uint64_t _internal_vecrequestlist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_vecrequestlist() const;
  void _internal_add_vecrequestlist(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_vecrequestlist();
  public:
  uint64_t vecrequestlist(int index) const;
  void set_vecrequestlist(int index, uint64_t value);
  void add_vecrequestlist(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      vecrequestlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_vecrequestlist();

  // @@protoc_insertion_point(class_scope:record.RecordRequestList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > vecrequestlist_;
  mutable std::atomic<int> _vecrequestlist_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_recordfriend_2eproto;
};
// -------------------------------------------------------------------

class RecordBlockList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:record.RecordBlockList) */ {
 public:
  inline RecordBlockList() : RecordBlockList(nullptr) {}
  ~RecordBlockList() override;
  explicit PROTOBUF_CONSTEXPR RecordBlockList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordBlockList(const RecordBlockList& from);
  RecordBlockList(RecordBlockList&& from) noexcept
    : RecordBlockList() {
    *this = ::std::move(from);
  }

  inline RecordBlockList& operator=(const RecordBlockList& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordBlockList& operator=(RecordBlockList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordBlockList& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordBlockList* internal_default_instance() {
    return reinterpret_cast<const RecordBlockList*>(
               &_RecordBlockList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RecordBlockList& a, RecordBlockList& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordBlockList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordBlockList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordBlockList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordBlockList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordBlockList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordBlockList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordBlockList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "record.RecordBlockList";
  }
  protected:
  explicit RecordBlockList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecBlockListFieldNumber = 1,
  };
  // repeated uint64 vecBlockList = 1;
  int vecblocklist_size() const;
  private:
  int _internal_vecblocklist_size() const;
  public:
  void clear_vecblocklist();
  private:
  uint64_t _internal_vecblocklist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_vecblocklist() const;
  void _internal_add_vecblocklist(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_vecblocklist();
  public:
  uint64_t vecblocklist(int index) const;
  void set_vecblocklist(int index, uint64_t value);
  void add_vecblocklist(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      vecblocklist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_vecblocklist();

  // @@protoc_insertion_point(class_scope:record.RecordBlockList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > vecblocklist_;
  mutable std::atomic<int> _vecblocklist_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_recordfriend_2eproto;
};
// -------------------------------------------------------------------

class RecordRecommendFilter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:record.RecordRecommendFilter) */ {
 public:
  inline RecordRecommendFilter() : RecordRecommendFilter(nullptr) {}
  ~RecordRecommendFilter() override;
  explicit PROTOBUF_CONSTEXPR RecordRecommendFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordRecommendFilter(const RecordRecommendFilter& from);
  RecordRecommendFilter(RecordRecommendFilter&& from) noexcept
    : RecordRecommendFilter() {
    *this = ::std::move(from);
  }

  inline RecordRecommendFilter& operator=(const RecordRecommendFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordRecommendFilter& operator=(RecordRecommendFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordRecommendFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordRecommendFilter* internal_default_instance() {
    return reinterpret_cast<const RecordRecommendFilter*>(
               &_RecordRecommendFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RecordRecommendFilter& a, RecordRecommendFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordRecommendFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordRecommendFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordRecommendFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordRecommendFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordRecommendFilter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordRecommendFilter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordRecommendFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "record.RecordRecommendFilter";
  }
  protected:
  explicit RecordRecommendFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBOnlyCityFieldNumber = 1,
    kUiSexFieldNumber = 2,
    kUiBitLabelFieldNumber = 3,
  };
  // bool bOnlyCity = 1;
  void clear_bonlycity();
  bool bonlycity() const;
  void set_bonlycity(bool value);
  private:
  bool _internal_bonlycity() const;
  void _internal_set_bonlycity(bool value);
  public:

  // uint32 uiSex = 2;
  void clear_uisex();
  uint32_t uisex() const;
  void set_uisex(uint32_t value);
  private:
  uint32_t _internal_uisex() const;
  void _internal_set_uisex(uint32_t value);
  public:

  // uint32 uiBitLabel = 3;
  void clear_uibitlabel();
  uint32_t uibitlabel() const;
  void set_uibitlabel(uint32_t value);
  private:
  uint32_t _internal_uibitlabel() const;
  void _internal_set_uibitlabel(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:record.RecordRecommendFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool bonlycity_;
  uint32_t uisex_;
  uint32_t uibitlabel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_recordfriend_2eproto;
};
// -------------------------------------------------------------------

class RecordRecommendLabel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:record.RecordRecommendLabel) */ {
 public:
  inline RecordRecommendLabel() : RecordRecommendLabel(nullptr) {}
  ~RecordRecommendLabel() override;
  explicit PROTOBUF_CONSTEXPR RecordRecommendLabel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordRecommendLabel(const RecordRecommendLabel& from);
  RecordRecommendLabel(RecordRecommendLabel&& from) noexcept
    : RecordRecommendLabel() {
    *this = ::std::move(from);
  }

  inline RecordRecommendLabel& operator=(const RecordRecommendLabel& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordRecommendLabel& operator=(RecordRecommendLabel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordRecommendLabel& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordRecommendLabel* internal_default_instance() {
    return reinterpret_cast<const RecordRecommendLabel*>(
               &_RecordRecommendLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RecordRecommendLabel& a, RecordRecommendLabel& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordRecommendLabel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordRecommendLabel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordRecommendLabel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordRecommendLabel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordRecommendLabel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordRecommendLabel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordRecommendLabel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "record.RecordRecommendLabel";
  }
  protected:
  explicit RecordRecommendLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUiCityFieldNumber = 1,
    kUiBitLabelFieldNumber = 2,
    kBAvailableFieldNumber = 3,
  };
  // uint32 uiCity = 1;
  void clear_uicity();
  uint32_t uicity() const;
  void set_uicity(uint32_t value);
  private:
  uint32_t _internal_uicity() const;
  void _internal_set_uicity(uint32_t value);
  public:

  // uint32 uiBitLabel = 2;
  void clear_uibitlabel();
  uint32_t uibitlabel() const;
  void set_uibitlabel(uint32_t value);
  private:
  uint32_t _internal_uibitlabel() const;
  void _internal_set_uibitlabel(uint32_t value);
  public:

  // bool bAvailable = 3;
  void clear_bavailable();
  bool bavailable() const;
  void set_bavailable(bool value);
  private:
  bool _internal_bavailable() const;
  void _internal_set_bavailable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:record.RecordRecommendLabel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t uicity_;
  uint32_t uibitlabel_;
  bool bavailable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_recordfriend_2eproto;
};
// -------------------------------------------------------------------

class RecordSendGiftTimes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:record.RecordSendGiftTimes) */ {
 public:
  inline RecordSendGiftTimes() : RecordSendGiftTimes(nullptr) {}
  ~RecordSendGiftTimes() override;
  explicit PROTOBUF_CONSTEXPR RecordSendGiftTimes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordSendGiftTimes(const RecordSendGiftTimes& from);
  RecordSendGiftTimes(RecordSendGiftTimes&& from) noexcept
    : RecordSendGiftTimes() {
    *this = ::std::move(from);
  }

  inline RecordSendGiftTimes& operator=(const RecordSendGiftTimes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordSendGiftTimes& operator=(RecordSendGiftTimes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordSendGiftTimes& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordSendGiftTimes* internal_default_instance() {
    return reinterpret_cast<const RecordSendGiftTimes*>(
               &_RecordSendGiftTimes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RecordSendGiftTimes& a, RecordSendGiftTimes& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordSendGiftTimes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordSendGiftTimes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordSendGiftTimes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordSendGiftTimes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordSendGiftTimes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordSendGiftTimes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordSendGiftTimes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "record.RecordSendGiftTimes";
  }
  protected:
  explicit RecordSendGiftTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOAllSendTimesFieldNumber = 2,
    kUiDailyCountFieldNumber = 1,
  };
  // .record.RecordAllSendTimes oAllSendTimes = 2;
  bool has_oallsendtimes() const;
  private:
  bool _internal_has_oallsendtimes() const;
  public:
  void clear_oallsendtimes();
  const ::record::RecordAllSendTimes& oallsendtimes() const;
  PROTOBUF_NODISCARD ::record::RecordAllSendTimes* release_oallsendtimes();
  ::record::RecordAllSendTimes* mutable_oallsendtimes();
  void set_allocated_oallsendtimes(::record::RecordAllSendTimes* oallsendtimes);
  private:
  const ::record::RecordAllSendTimes& _internal_oallsendtimes() const;
  ::record::RecordAllSendTimes* _internal_mutable_oallsendtimes();
  public:
  void unsafe_arena_set_allocated_oallsendtimes(
      ::record::RecordAllSendTimes* oallsendtimes);
  ::record::RecordAllSendTimes* unsafe_arena_release_oallsendtimes();

  // uint32 uiDailyCount = 1;
  void clear_uidailycount();
  uint32_t uidailycount() const;
  void set_uidailycount(uint32_t value);
  private:
  uint32_t _internal_uidailycount() const;
  void _internal_set_uidailycount(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:record.RecordSendGiftTimes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::record::RecordAllSendTimes* oallsendtimes_;
  uint32_t uidailycount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_recordfriend_2eproto;
};
// -------------------------------------------------------------------

class RecordAllSendTimes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:record.RecordAllSendTimes) */ {
 public:
  inline RecordAllSendTimes() : RecordAllSendTimes(nullptr) {}
  ~RecordAllSendTimes() override;
  explicit PROTOBUF_CONSTEXPR RecordAllSendTimes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordAllSendTimes(const RecordAllSendTimes& from);
  RecordAllSendTimes(RecordAllSendTimes&& from) noexcept
    : RecordAllSendTimes() {
    *this = ::std::move(from);
  }

  inline RecordAllSendTimes& operator=(const RecordAllSendTimes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordAllSendTimes& operator=(RecordAllSendTimes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordAllSendTimes& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordAllSendTimes* internal_default_instance() {
    return reinterpret_cast<const RecordAllSendTimes*>(
               &_RecordAllSendTimes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RecordAllSendTimes& a, RecordAllSendTimes& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordAllSendTimes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordAllSendTimes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordAllSendTimes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordAllSendTimes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordAllSendTimes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordAllSendTimes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordAllSendTimes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "record.RecordAllSendTimes";
  }
  protected:
  explicit RecordAllSendTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecSendTimesFieldNumber = 1,
  };
  // repeated .record.RecordOneSendTimes vecSendTimes = 1;
  int vecsendtimes_size() const;
  private:
  int _internal_vecsendtimes_size() const;
  public:
  void clear_vecsendtimes();
  ::record::RecordOneSendTimes* mutable_vecsendtimes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::record::RecordOneSendTimes >*
      mutable_vecsendtimes();
  private:
  const ::record::RecordOneSendTimes& _internal_vecsendtimes(int index) const;
  ::record::RecordOneSendTimes* _internal_add_vecsendtimes();
  public:
  const ::record::RecordOneSendTimes& vecsendtimes(int index) const;
  ::record::RecordOneSendTimes* add_vecsendtimes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::record::RecordOneSendTimes >&
      vecsendtimes() const;

  // @@protoc_insertion_point(class_scope:record.RecordAllSendTimes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::record::RecordOneSendTimes > vecsendtimes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_recordfriend_2eproto;
};
// -------------------------------------------------------------------

class RecordOneSendTimes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:record.RecordOneSendTimes) */ {
 public:
  inline RecordOneSendTimes() : RecordOneSendTimes(nullptr) {}
  ~RecordOneSendTimes() override;
  explicit PROTOBUF_CONSTEXPR RecordOneSendTimes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordOneSendTimes(const RecordOneSendTimes& from);
  RecordOneSendTimes(RecordOneSendTimes&& from) noexcept
    : RecordOneSendTimes() {
    *this = ::std::move(from);
  }

  inline RecordOneSendTimes& operator=(const RecordOneSendTimes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordOneSendTimes& operator=(RecordOneSendTimes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordOneSendTimes& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordOneSendTimes* internal_default_instance() {
    return reinterpret_cast<const RecordOneSendTimes*>(
               &_RecordOneSendTimes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RecordOneSendTimes& a, RecordOneSendTimes& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordOneSendTimes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordOneSendTimes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordOneSendTimes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordOneSendTimes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordOneSendTimes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordOneSendTimes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordOneSendTimes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "record.RecordOneSendTimes";
  }
  protected:
  explicit RecordOneSendTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlRoleIdFieldNumber = 1,
    kUiTimesFieldNumber = 2,
  };
  // uint64 llRoleId = 1;
  void clear_llroleid();
  uint64_t llroleid() const;
  void set_llroleid(uint64_t value);
  private:
  uint64_t _internal_llroleid() const;
  void _internal_set_llroleid(uint64_t value);
  public:

  // uint32 uiTimes = 2;
  void clear_uitimes();
  uint32_t uitimes() const;
  void set_uitimes(uint32_t value);
  private:
  uint32_t _internal_uitimes() const;
  void _internal_set_uitimes(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:record.RecordOneSendTimes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t llroleid_;
  uint32_t uitimes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_recordfriend_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RecordModuleFriend

// uint64 llRecvGiftUid = 1;
inline void RecordModuleFriend::clear_llrecvgiftuid() {
  llrecvgiftuid_ = uint64_t{0u};
}
inline uint64_t RecordModuleFriend::_internal_llrecvgiftuid() const {
  return llrecvgiftuid_;
}
inline uint64_t RecordModuleFriend::llrecvgiftuid() const {
  // @@protoc_insertion_point(field_get:record.RecordModuleFriend.llRecvGiftUid)
  return _internal_llrecvgiftuid();
}
inline void RecordModuleFriend::_internal_set_llrecvgiftuid(uint64_t value) {
  
  llrecvgiftuid_ = value;
}
inline void RecordModuleFriend::set_llrecvgiftuid(uint64_t value) {
  _internal_set_llrecvgiftuid(value);
  // @@protoc_insertion_point(field_set:record.RecordModuleFriend.llRecvGiftUid)
}

// uint64 llExpiredGiftUid = 2;
inline void RecordModuleFriend::clear_llexpiredgiftuid() {
  llexpiredgiftuid_ = uint64_t{0u};
}
inline uint64_t RecordModuleFriend::_internal_llexpiredgiftuid() const {
  return llexpiredgiftuid_;
}
inline uint64_t RecordModuleFriend::llexpiredgiftuid() const {
  // @@protoc_insertion_point(field_get:record.RecordModuleFriend.llExpiredGiftUid)
  return _internal_llexpiredgiftuid();
}
inline void RecordModuleFriend::_internal_set_llexpiredgiftuid(uint64_t value) {
  
  llexpiredgiftuid_ = value;
}
inline void RecordModuleFriend::set_llexpiredgiftuid(uint64_t value) {
  _internal_set_llexpiredgiftuid(value);
  // @@protoc_insertion_point(field_set:record.RecordModuleFriend.llExpiredGiftUid)
}

// .record.RecordSendGiftVersion oSendGift = 3;
inline bool RecordModuleFriend::_internal_has_osendgift() const {
  return this != internal_default_instance() && osendgift_ != nullptr;
}
inline bool RecordModuleFriend::has_osendgift() const {
  return _internal_has_osendgift();
}
inline void RecordModuleFriend::clear_osendgift() {
  if (GetArenaForAllocation() == nullptr && osendgift_ != nullptr) {
    delete osendgift_;
  }
  osendgift_ = nullptr;
}
inline const ::record::RecordSendGiftVersion& RecordModuleFriend::_internal_osendgift() const {
  const ::record::RecordSendGiftVersion* p = osendgift_;
  return p != nullptr ? *p : reinterpret_cast<const ::record::RecordSendGiftVersion&>(
      ::record::_RecordSendGiftVersion_default_instance_);
}
inline const ::record::RecordSendGiftVersion& RecordModuleFriend::osendgift() const {
  // @@protoc_insertion_point(field_get:record.RecordModuleFriend.oSendGift)
  return _internal_osendgift();
}
inline void RecordModuleFriend::unsafe_arena_set_allocated_osendgift(
    ::record::RecordSendGiftVersion* osendgift) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(osendgift_);
  }
  osendgift_ = osendgift;
  if (osendgift) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:record.RecordModuleFriend.oSendGift)
}
inline ::record::RecordSendGiftVersion* RecordModuleFriend::release_osendgift() {
  
  ::record::RecordSendGiftVersion* temp = osendgift_;
  osendgift_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::record::RecordSendGiftVersion* RecordModuleFriend::unsafe_arena_release_osendgift() {
  // @@protoc_insertion_point(field_release:record.RecordModuleFriend.oSendGift)
  
  ::record::RecordSendGiftVersion* temp = osendgift_;
  osendgift_ = nullptr;
  return temp;
}
inline ::record::RecordSendGiftVersion* RecordModuleFriend::_internal_mutable_osendgift() {
  
  if (osendgift_ == nullptr) {
    auto* p = CreateMaybeMessage<::record::RecordSendGiftVersion>(GetArenaForAllocation());
    osendgift_ = p;
  }
  return osendgift_;
}
inline ::record::RecordSendGiftVersion* RecordModuleFriend::mutable_osendgift() {
  ::record::RecordSendGiftVersion* _msg = _internal_mutable_osendgift();
  // @@protoc_insertion_point(field_mutable:record.RecordModuleFriend.oSendGift)
  return _msg;
}
inline void RecordModuleFriend::set_allocated_osendgift(::record::RecordSendGiftVersion* osendgift) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete osendgift_;
  }
  if (osendgift) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(osendgift);
    if (message_arena != submessage_arena) {
      osendgift = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, osendgift, submessage_arena);
    }
    
  } else {
    
  }
  osendgift_ = osendgift;
  // @@protoc_insertion_point(field_set_allocated:record.RecordModuleFriend.oSendGift)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RecordSendGiftVersion

// uint32 uiVersionId = 1;
inline void RecordSendGiftVersion::clear_uiversionid() {
  uiversionid_ = 0u;
}
inline uint32_t RecordSendGiftVersion::_internal_uiversionid() const {
  return uiversionid_;
}
inline uint32_t RecordSendGiftVersion::uiversionid() const {
  // @@protoc_insertion_point(field_get:record.RecordSendGiftVersion.uiVersionId)
  return _internal_uiversionid();
}
inline void RecordSendGiftVersion::_internal_set_uiversionid(uint32_t value) {
  
  uiversionid_ = value;
}
inline void RecordSendGiftVersion::set_uiversionid(uint32_t value) {
  _internal_set_uiversionid(value);
  // @@protoc_insertion_point(field_set:record.RecordSendGiftVersion.uiVersionId)
}

// map<uint32, .record.RecordSendGift> mapSendGifts = 2;
inline int RecordSendGiftVersion::_internal_mapsendgifts_size() const {
  return mapsendgifts_.size();
}
inline int RecordSendGiftVersion::mapsendgifts_size() const {
  return _internal_mapsendgifts_size();
}
inline void RecordSendGiftVersion::clear_mapsendgifts() {
  mapsendgifts_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::record::RecordSendGift >&
RecordSendGiftVersion::_internal_mapsendgifts() const {
  return mapsendgifts_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::record::RecordSendGift >&
RecordSendGiftVersion::mapsendgifts() const {
  // @@protoc_insertion_point(field_map:record.RecordSendGiftVersion.mapSendGifts)
  return _internal_mapsendgifts();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::record::RecordSendGift >*
RecordSendGiftVersion::_internal_mutable_mapsendgifts() {
  return mapsendgifts_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::record::RecordSendGift >*
RecordSendGiftVersion::mutable_mapsendgifts() {
  // @@protoc_insertion_point(field_mutable_map:record.RecordSendGiftVersion.mapSendGifts)
  return _internal_mutable_mapsendgifts();
}

// -------------------------------------------------------------------

// RecordSendGift

// uint64 llRecver = 1;
inline void RecordSendGift::clear_llrecver() {
  llrecver_ = uint64_t{0u};
}
inline uint64_t RecordSendGift::_internal_llrecver() const {
  return llrecver_;
}
inline uint64_t RecordSendGift::llrecver() const {
  // @@protoc_insertion_point(field_get:record.RecordSendGift.llRecver)
  return _internal_llrecver();
}
inline void RecordSendGift::_internal_set_llrecver(uint64_t value) {
  
  llrecver_ = value;
}
inline void RecordSendGift::set_llrecver(uint64_t value) {
  _internal_set_llrecver(value);
  // @@protoc_insertion_point(field_set:record.RecordSendGift.llRecver)
}

// uint32 uiItemId = 2;
inline void RecordSendGift::clear_uiitemid() {
  uiitemid_ = 0u;
}
inline uint32_t RecordSendGift::_internal_uiitemid() const {
  return uiitemid_;
}
inline uint32_t RecordSendGift::uiitemid() const {
  // @@protoc_insertion_point(field_get:record.RecordSendGift.uiItemId)
  return _internal_uiitemid();
}
inline void RecordSendGift::_internal_set_uiitemid(uint32_t value) {
  
  uiitemid_ = value;
}
inline void RecordSendGift::set_uiitemid(uint32_t value) {
  _internal_set_uiitemid(value);
  // @@protoc_insertion_point(field_set:record.RecordSendGift.uiItemId)
}

// uint64 llItemCount = 3;
inline void RecordSendGift::clear_llitemcount() {
  llitemcount_ = uint64_t{0u};
}
inline uint64_t RecordSendGift::_internal_llitemcount() const {
  return llitemcount_;
}
inline uint64_t RecordSendGift::llitemcount() const {
  // @@protoc_insertion_point(field_get:record.RecordSendGift.llItemCount)
  return _internal_llitemcount();
}
inline void RecordSendGift::_internal_set_llitemcount(uint64_t value) {
  
  llitemcount_ = value;
}
inline void RecordSendGift::set_llitemcount(uint64_t value) {
  _internal_set_llitemcount(value);
  // @@protoc_insertion_point(field_set:record.RecordSendGift.llItemCount)
}

// bool bBind = 4;
inline void RecordSendGift::clear_bbind() {
  bbind_ = false;
}
inline bool RecordSendGift::_internal_bbind() const {
  return bbind_;
}
inline bool RecordSendGift::bbind() const {
  // @@protoc_insertion_point(field_get:record.RecordSendGift.bBind)
  return _internal_bbind();
}
inline void RecordSendGift::_internal_set_bbind(bool value) {
  
  bbind_ = value;
}
inline void RecordSendGift::set_bbind(bool value) {
  _internal_set_bbind(value);
  // @@protoc_insertion_point(field_set:record.RecordSendGift.bBind)
}

// -------------------------------------------------------------------

// RecordFriendData

// .record.RecordFriendSvrBrief oBrief = 1;
inline bool RecordFriendData::_internal_has_obrief() const {
  return oData_case() == kOBrief;
}
inline bool RecordFriendData::has_obrief() const {
  return _internal_has_obrief();
}
inline void RecordFriendData::set_has_obrief() {
  _oneof_case_[0] = kOBrief;
}
inline void RecordFriendData::clear_obrief() {
  if (_internal_has_obrief()) {
    if (GetArenaForAllocation() == nullptr) {
      delete oData_.obrief_;
    }
    clear_has_oData();
  }
}
inline ::record::RecordFriendSvrBrief* RecordFriendData::release_obrief() {
  // @@protoc_insertion_point(field_release:record.RecordFriendData.oBrief)
  if (_internal_has_obrief()) {
    clear_has_oData();
    ::record::RecordFriendSvrBrief* temp = oData_.obrief_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    oData_.obrief_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::record::RecordFriendSvrBrief& RecordFriendData::_internal_obrief() const {
  return _internal_has_obrief()
      ? *oData_.obrief_
      : reinterpret_cast< ::record::RecordFriendSvrBrief&>(::record::_RecordFriendSvrBrief_default_instance_);
}
inline const ::record::RecordFriendSvrBrief& RecordFriendData::obrief() const {
  // @@protoc_insertion_point(field_get:record.RecordFriendData.oBrief)
  return _internal_obrief();
}
inline ::record::RecordFriendSvrBrief* RecordFriendData::unsafe_arena_release_obrief() {
  // @@protoc_insertion_point(field_unsafe_arena_release:record.RecordFriendData.oBrief)
  if (_internal_has_obrief()) {
    clear_has_oData();
    ::record::RecordFriendSvrBrief* temp = oData_.obrief_;
    oData_.obrief_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RecordFriendData::unsafe_arena_set_allocated_obrief(::record::RecordFriendSvrBrief* obrief) {
  clear_oData();
  if (obrief) {
    set_has_obrief();
    oData_.obrief_ = obrief;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:record.RecordFriendData.oBrief)
}
inline ::record::RecordFriendSvrBrief* RecordFriendData::_internal_mutable_obrief() {
  if (!_internal_has_obrief()) {
    clear_oData();
    set_has_obrief();
    oData_.obrief_ = CreateMaybeMessage< ::record::RecordFriendSvrBrief >(GetArenaForAllocation());
  }
  return oData_.obrief_;
}
inline ::record::RecordFriendSvrBrief* RecordFriendData::mutable_obrief() {
  ::record::RecordFriendSvrBrief* _msg = _internal_mutable_obrief();
  // @@protoc_insertion_point(field_mutable:record.RecordFriendData.oBrief)
  return _msg;
}

// .record.RecordFriendList oFriends = 2;
inline bool RecordFriendData::_internal_has_ofriends() const {
  return oData_case() == kOFriends;
}
inline bool RecordFriendData::has_ofriends() const {
  return _internal_has_ofriends();
}
inline void RecordFriendData::set_has_ofriends() {
  _oneof_case_[0] = kOFriends;
}
inline void RecordFriendData::clear_ofriends() {
  if (_internal_has_ofriends()) {
    if (GetArenaForAllocation() == nullptr) {
      delete oData_.ofriends_;
    }
    clear_has_oData();
  }
}
inline ::record::RecordFriendList* RecordFriendData::release_ofriends() {
  // @@protoc_insertion_point(field_release:record.RecordFriendData.oFriends)
  if (_internal_has_ofriends()) {
    clear_has_oData();
    ::record::RecordFriendList* temp = oData_.ofriends_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    oData_.ofriends_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::record::RecordFriendList& RecordFriendData::_internal_ofriends() const {
  return _internal_has_ofriends()
      ? *oData_.ofriends_
      : reinterpret_cast< ::record::RecordFriendList&>(::record::_RecordFriendList_default_instance_);
}
inline const ::record::RecordFriendList& RecordFriendData::ofriends() const {
  // @@protoc_insertion_point(field_get:record.RecordFriendData.oFriends)
  return _internal_ofriends();
}
inline ::record::RecordFriendList* RecordFriendData::unsafe_arena_release_ofriends() {
  // @@protoc_insertion_point(field_unsafe_arena_release:record.RecordFriendData.oFriends)
  if (_internal_has_ofriends()) {
    clear_has_oData();
    ::record::RecordFriendList* temp = oData_.ofriends_;
    oData_.ofriends_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RecordFriendData::unsafe_arena_set_allocated_ofriends(::record::RecordFriendList* ofriends) {
  clear_oData();
  if (ofriends) {
    set_has_ofriends();
    oData_.ofriends_ = ofriends;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:record.RecordFriendData.oFriends)
}
inline ::record::RecordFriendList* RecordFriendData::_internal_mutable_ofriends() {
  if (!_internal_has_ofriends()) {
    clear_oData();
    set_has_ofriends();
    oData_.ofriends_ = CreateMaybeMessage< ::record::RecordFriendList >(GetArenaForAllocation());
  }
  return oData_.ofriends_;
}
inline ::record::RecordFriendList* RecordFriendData::mutable_ofriends() {
  ::record::RecordFriendList* _msg = _internal_mutable_ofriends();
  // @@protoc_insertion_point(field_mutable:record.RecordFriendData.oFriends)
  return _msg;
}

// .record.RecordRequestList oRequest = 3;
inline bool RecordFriendData::_internal_has_orequest() const {
  return oData_case() == kORequest;
}
inline bool RecordFriendData::has_orequest() const {
  return _internal_has_orequest();
}
inline void RecordFriendData::set_has_orequest() {
  _oneof_case_[0] = kORequest;
}
inline void RecordFriendData::clear_orequest() {
  if (_internal_has_orequest()) {
    if (GetArenaForAllocation() == nullptr) {
      delete oData_.orequest_;
    }
    clear_has_oData();
  }
}
inline ::record::RecordRequestList* RecordFriendData::release_orequest() {
  // @@protoc_insertion_point(field_release:record.RecordFriendData.oRequest)
  if (_internal_has_orequest()) {
    clear_has_oData();
    ::record::RecordRequestList* temp = oData_.orequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    oData_.orequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::record::RecordRequestList& RecordFriendData::_internal_orequest() const {
  return _internal_has_orequest()
      ? *oData_.orequest_
      : reinterpret_cast< ::record::RecordRequestList&>(::record::_RecordRequestList_default_instance_);
}
inline const ::record::RecordRequestList& RecordFriendData::orequest() const {
  // @@protoc_insertion_point(field_get:record.RecordFriendData.oRequest)
  return _internal_orequest();
}
inline ::record::RecordRequestList* RecordFriendData::unsafe_arena_release_orequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:record.RecordFriendData.oRequest)
  if (_internal_has_orequest()) {
    clear_has_oData();
    ::record::RecordRequestList* temp = oData_.orequest_;
    oData_.orequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RecordFriendData::unsafe_arena_set_allocated_orequest(::record::RecordRequestList* orequest) {
  clear_oData();
  if (orequest) {
    set_has_orequest();
    oData_.orequest_ = orequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:record.RecordFriendData.oRequest)
}
inline ::record::RecordRequestList* RecordFriendData::_internal_mutable_orequest() {
  if (!_internal_has_orequest()) {
    clear_oData();
    set_has_orequest();
    oData_.orequest_ = CreateMaybeMessage< ::record::RecordRequestList >(GetArenaForAllocation());
  }
  return oData_.orequest_;
}
inline ::record::RecordRequestList* RecordFriendData::mutable_orequest() {
  ::record::RecordRequestList* _msg = _internal_mutable_orequest();
  // @@protoc_insertion_point(field_mutable:record.RecordFriendData.oRequest)
  return _msg;
}

// .record.RecordBlockList oBlock = 4;
inline bool RecordFriendData::_internal_has_oblock() const {
  return oData_case() == kOBlock;
}
inline bool RecordFriendData::has_oblock() const {
  return _internal_has_oblock();
}
inline void RecordFriendData::set_has_oblock() {
  _oneof_case_[0] = kOBlock;
}
inline void RecordFriendData::clear_oblock() {
  if (_internal_has_oblock()) {
    if (GetArenaForAllocation() == nullptr) {
      delete oData_.oblock_;
    }
    clear_has_oData();
  }
}
inline ::record::RecordBlockList* RecordFriendData::release_oblock() {
  // @@protoc_insertion_point(field_release:record.RecordFriendData.oBlock)
  if (_internal_has_oblock()) {
    clear_has_oData();
    ::record::RecordBlockList* temp = oData_.oblock_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    oData_.oblock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::record::RecordBlockList& RecordFriendData::_internal_oblock() const {
  return _internal_has_oblock()
      ? *oData_.oblock_
      : reinterpret_cast< ::record::RecordBlockList&>(::record::_RecordBlockList_default_instance_);
}
inline const ::record::RecordBlockList& RecordFriendData::oblock() const {
  // @@protoc_insertion_point(field_get:record.RecordFriendData.oBlock)
  return _internal_oblock();
}
inline ::record::RecordBlockList* RecordFriendData::unsafe_arena_release_oblock() {
  // @@protoc_insertion_point(field_unsafe_arena_release:record.RecordFriendData.oBlock)
  if (_internal_has_oblock()) {
    clear_has_oData();
    ::record::RecordBlockList* temp = oData_.oblock_;
    oData_.oblock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RecordFriendData::unsafe_arena_set_allocated_oblock(::record::RecordBlockList* oblock) {
  clear_oData();
  if (oblock) {
    set_has_oblock();
    oData_.oblock_ = oblock;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:record.RecordFriendData.oBlock)
}
inline ::record::RecordBlockList* RecordFriendData::_internal_mutable_oblock() {
  if (!_internal_has_oblock()) {
    clear_oData();
    set_has_oblock();
    oData_.oblock_ = CreateMaybeMessage< ::record::RecordBlockList >(GetArenaForAllocation());
  }
  return oData_.oblock_;
}
inline ::record::RecordBlockList* RecordFriendData::mutable_oblock() {
  ::record::RecordBlockList* _msg = _internal_mutable_oblock();
  // @@protoc_insertion_point(field_mutable:record.RecordFriendData.oBlock)
  return _msg;
}

// .record.RecordRecommendFilter oFilter = 5;
inline bool RecordFriendData::_internal_has_ofilter() const {
  return oData_case() == kOFilter;
}
inline bool RecordFriendData::has_ofilter() const {
  return _internal_has_ofilter();
}
inline void RecordFriendData::set_has_ofilter() {
  _oneof_case_[0] = kOFilter;
}
inline void RecordFriendData::clear_ofilter() {
  if (_internal_has_ofilter()) {
    if (GetArenaForAllocation() == nullptr) {
      delete oData_.ofilter_;
    }
    clear_has_oData();
  }
}
inline ::record::RecordRecommendFilter* RecordFriendData::release_ofilter() {
  // @@protoc_insertion_point(field_release:record.RecordFriendData.oFilter)
  if (_internal_has_ofilter()) {
    clear_has_oData();
    ::record::RecordRecommendFilter* temp = oData_.ofilter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    oData_.ofilter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::record::RecordRecommendFilter& RecordFriendData::_internal_ofilter() const {
  return _internal_has_ofilter()
      ? *oData_.ofilter_
      : reinterpret_cast< ::record::RecordRecommendFilter&>(::record::_RecordRecommendFilter_default_instance_);
}
inline const ::record::RecordRecommendFilter& RecordFriendData::ofilter() const {
  // @@protoc_insertion_point(field_get:record.RecordFriendData.oFilter)
  return _internal_ofilter();
}
inline ::record::RecordRecommendFilter* RecordFriendData::unsafe_arena_release_ofilter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:record.RecordFriendData.oFilter)
  if (_internal_has_ofilter()) {
    clear_has_oData();
    ::record::RecordRecommendFilter* temp = oData_.ofilter_;
    oData_.ofilter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RecordFriendData::unsafe_arena_set_allocated_ofilter(::record::RecordRecommendFilter* ofilter) {
  clear_oData();
  if (ofilter) {
    set_has_ofilter();
    oData_.ofilter_ = ofilter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:record.RecordFriendData.oFilter)
}
inline ::record::RecordRecommendFilter* RecordFriendData::_internal_mutable_ofilter() {
  if (!_internal_has_ofilter()) {
    clear_oData();
    set_has_ofilter();
    oData_.ofilter_ = CreateMaybeMessage< ::record::RecordRecommendFilter >(GetArenaForAllocation());
  }
  return oData_.ofilter_;
}
inline ::record::RecordRecommendFilter* RecordFriendData::mutable_ofilter() {
  ::record::RecordRecommendFilter* _msg = _internal_mutable_ofilter();
  // @@protoc_insertion_point(field_mutable:record.RecordFriendData.oFilter)
  return _msg;
}

// .record.RecordRecommendLabel oLabel = 6;
inline bool RecordFriendData::_internal_has_olabel() const {
  return oData_case() == kOLabel;
}
inline bool RecordFriendData::has_olabel() const {
  return _internal_has_olabel();
}
inline void RecordFriendData::set_has_olabel() {
  _oneof_case_[0] = kOLabel;
}
inline void RecordFriendData::clear_olabel() {
  if (_internal_has_olabel()) {
    if (GetArenaForAllocation() == nullptr) {
      delete oData_.olabel_;
    }
    clear_has_oData();
  }
}
inline ::record::RecordRecommendLabel* RecordFriendData::release_olabel() {
  // @@protoc_insertion_point(field_release:record.RecordFriendData.oLabel)
  if (_internal_has_olabel()) {
    clear_has_oData();
    ::record::RecordRecommendLabel* temp = oData_.olabel_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    oData_.olabel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::record::RecordRecommendLabel& RecordFriendData::_internal_olabel() const {
  return _internal_has_olabel()
      ? *oData_.olabel_
      : reinterpret_cast< ::record::RecordRecommendLabel&>(::record::_RecordRecommendLabel_default_instance_);
}
inline const ::record::RecordRecommendLabel& RecordFriendData::olabel() const {
  // @@protoc_insertion_point(field_get:record.RecordFriendData.oLabel)
  return _internal_olabel();
}
inline ::record::RecordRecommendLabel* RecordFriendData::unsafe_arena_release_olabel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:record.RecordFriendData.oLabel)
  if (_internal_has_olabel()) {
    clear_has_oData();
    ::record::RecordRecommendLabel* temp = oData_.olabel_;
    oData_.olabel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RecordFriendData::unsafe_arena_set_allocated_olabel(::record::RecordRecommendLabel* olabel) {
  clear_oData();
  if (olabel) {
    set_has_olabel();
    oData_.olabel_ = olabel;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:record.RecordFriendData.oLabel)
}
inline ::record::RecordRecommendLabel* RecordFriendData::_internal_mutable_olabel() {
  if (!_internal_has_olabel()) {
    clear_oData();
    set_has_olabel();
    oData_.olabel_ = CreateMaybeMessage< ::record::RecordRecommendLabel >(GetArenaForAllocation());
  }
  return oData_.olabel_;
}
inline ::record::RecordRecommendLabel* RecordFriendData::mutable_olabel() {
  ::record::RecordRecommendLabel* _msg = _internal_mutable_olabel();
  // @@protoc_insertion_point(field_mutable:record.RecordFriendData.oLabel)
  return _msg;
}

// .record.RecordSendGiftTimes oGiftTimes = 7;
inline bool RecordFriendData::_internal_has_ogifttimes() const {
  return oData_case() == kOGiftTimes;
}
inline bool RecordFriendData::has_ogifttimes() const {
  return _internal_has_ogifttimes();
}
inline void RecordFriendData::set_has_ogifttimes() {
  _oneof_case_[0] = kOGiftTimes;
}
inline void RecordFriendData::clear_ogifttimes() {
  if (_internal_has_ogifttimes()) {
    if (GetArenaForAllocation() == nullptr) {
      delete oData_.ogifttimes_;
    }
    clear_has_oData();
  }
}
inline ::record::RecordSendGiftTimes* RecordFriendData::release_ogifttimes() {
  // @@protoc_insertion_point(field_release:record.RecordFriendData.oGiftTimes)
  if (_internal_has_ogifttimes()) {
    clear_has_oData();
    ::record::RecordSendGiftTimes* temp = oData_.ogifttimes_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    oData_.ogifttimes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::record::RecordSendGiftTimes& RecordFriendData::_internal_ogifttimes() const {
  return _internal_has_ogifttimes()
      ? *oData_.ogifttimes_
      : reinterpret_cast< ::record::RecordSendGiftTimes&>(::record::_RecordSendGiftTimes_default_instance_);
}
inline const ::record::RecordSendGiftTimes& RecordFriendData::ogifttimes() const {
  // @@protoc_insertion_point(field_get:record.RecordFriendData.oGiftTimes)
  return _internal_ogifttimes();
}
inline ::record::RecordSendGiftTimes* RecordFriendData::unsafe_arena_release_ogifttimes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:record.RecordFriendData.oGiftTimes)
  if (_internal_has_ogifttimes()) {
    clear_has_oData();
    ::record::RecordSendGiftTimes* temp = oData_.ogifttimes_;
    oData_.ogifttimes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RecordFriendData::unsafe_arena_set_allocated_ogifttimes(::record::RecordSendGiftTimes* ogifttimes) {
  clear_oData();
  if (ogifttimes) {
    set_has_ogifttimes();
    oData_.ogifttimes_ = ogifttimes;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:record.RecordFriendData.oGiftTimes)
}
inline ::record::RecordSendGiftTimes* RecordFriendData::_internal_mutable_ogifttimes() {
  if (!_internal_has_ogifttimes()) {
    clear_oData();
    set_has_ogifttimes();
    oData_.ogifttimes_ = CreateMaybeMessage< ::record::RecordSendGiftTimes >(GetArenaForAllocation());
  }
  return oData_.ogifttimes_;
}
inline ::record::RecordSendGiftTimes* RecordFriendData::mutable_ogifttimes() {
  ::record::RecordSendGiftTimes* _msg = _internal_mutable_ogifttimes();
  // @@protoc_insertion_point(field_mutable:record.RecordFriendData.oGiftTimes)
  return _msg;
}

inline bool RecordFriendData::has_oData() const {
  return oData_case() != ODATA_NOT_SET;
}
inline void RecordFriendData::clear_has_oData() {
  _oneof_case_[0] = ODATA_NOT_SET;
}
inline RecordFriendData::ODataCase RecordFriendData::oData_case() const {
  return RecordFriendData::ODataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RecordFriendSvrBrief

// uint32 uiSex = 1;
inline void RecordFriendSvrBrief::clear_uisex() {
  uisex_ = 0u;
}
inline uint32_t RecordFriendSvrBrief::_internal_uisex() const {
  return uisex_;
}
inline uint32_t RecordFriendSvrBrief::uisex() const {
  // @@protoc_insertion_point(field_get:record.RecordFriendSvrBrief.uiSex)
  return _internal_uisex();
}
inline void RecordFriendSvrBrief::_internal_set_uisex(uint32_t value) {
  
  uisex_ = value;
}
inline void RecordFriendSvrBrief::set_uisex(uint32_t value) {
  _internal_set_uisex(value);
  // @@protoc_insertion_point(field_set:record.RecordFriendSvrBrief.uiSex)
}

// uint32 uiLevel = 2;
inline void RecordFriendSvrBrief::clear_uilevel() {
  uilevel_ = 0u;
}
inline uint32_t RecordFriendSvrBrief::_internal_uilevel() const {
  return uilevel_;
}
inline uint32_t RecordFriendSvrBrief::uilevel() const {
  // @@protoc_insertion_point(field_get:record.RecordFriendSvrBrief.uiLevel)
  return _internal_uilevel();
}
inline void RecordFriendSvrBrief::_internal_set_uilevel(uint32_t value) {
  
  uilevel_ = value;
}
inline void RecordFriendSvrBrief::set_uilevel(uint32_t value) {
  _internal_set_uilevel(value);
  // @@protoc_insertion_point(field_set:record.RecordFriendSvrBrief.uiLevel)
}

// bytes strRoleName = 3;
inline void RecordFriendSvrBrief::clear_strrolename() {
  strrolename_.ClearToEmpty();
}
inline const std::string& RecordFriendSvrBrief::strrolename() const {
  // @@protoc_insertion_point(field_get:record.RecordFriendSvrBrief.strRoleName)
  return _internal_strrolename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecordFriendSvrBrief::set_strrolename(ArgT0&& arg0, ArgT... args) {
 
 strrolename_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:record.RecordFriendSvrBrief.strRoleName)
}
inline std::string* RecordFriendSvrBrief::mutable_strrolename() {
  std::string* _s = _internal_mutable_strrolename();
  // @@protoc_insertion_point(field_mutable:record.RecordFriendSvrBrief.strRoleName)
  return _s;
}
inline const std::string& RecordFriendSvrBrief::_internal_strrolename() const {
  return strrolename_.Get();
}
inline void RecordFriendSvrBrief::_internal_set_strrolename(const std::string& value) {
  
  strrolename_.Set(value, GetArenaForAllocation());
}
inline std::string* RecordFriendSvrBrief::_internal_mutable_strrolename() {
  
  return strrolename_.Mutable(GetArenaForAllocation());
}
inline std::string* RecordFriendSvrBrief::release_strrolename() {
  // @@protoc_insertion_point(field_release:record.RecordFriendSvrBrief.strRoleName)
  return strrolename_.Release();
}
inline void RecordFriendSvrBrief::set_allocated_strrolename(std::string* strrolename) {
  if (strrolename != nullptr) {
    
  } else {
    
  }
  strrolename_.SetAllocated(strrolename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strrolename_.IsDefault()) {
    strrolename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:record.RecordFriendSvrBrief.strRoleName)
}

// uint32 uiOfflineTime = 4;
inline void RecordFriendSvrBrief::clear_uiofflinetime() {
  uiofflinetime_ = 0u;
}
inline uint32_t RecordFriendSvrBrief::_internal_uiofflinetime() const {
  return uiofflinetime_;
}
inline uint32_t RecordFriendSvrBrief::uiofflinetime() const {
  // @@protoc_insertion_point(field_get:record.RecordFriendSvrBrief.uiOfflineTime)
  return _internal_uiofflinetime();
}
inline void RecordFriendSvrBrief::_internal_set_uiofflinetime(uint32_t value) {
  
  uiofflinetime_ = value;
}
inline void RecordFriendSvrBrief::set_uiofflinetime(uint32_t value) {
  _internal_set_uiofflinetime(value);
  // @@protoc_insertion_point(field_set:record.RecordFriendSvrBrief.uiOfflineTime)
}

// map<uint32, uint32> mapVersions = 5;
inline int RecordFriendSvrBrief::_internal_mapversions_size() const {
  return mapversions_.size();
}
inline int RecordFriendSvrBrief::mapversions_size() const {
  return _internal_mapversions_size();
}
inline void RecordFriendSvrBrief::clear_mapversions() {
  mapversions_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
RecordFriendSvrBrief::_internal_mapversions() const {
  return mapversions_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
RecordFriendSvrBrief::mapversions() const {
  // @@protoc_insertion_point(field_map:record.RecordFriendSvrBrief.mapVersions)
  return _internal_mapversions();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
RecordFriendSvrBrief::_internal_mutable_mapversions() {
  return mapversions_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
RecordFriendSvrBrief::mutable_mapversions() {
  // @@protoc_insertion_point(field_mutable_map:record.RecordFriendSvrBrief.mapVersions)
  return _internal_mutable_mapversions();
}

// uint32 uiSendGiftVersionId = 6;
inline void RecordFriendSvrBrief::clear_uisendgiftversionid() {
  uisendgiftversionid_ = 0u;
}
inline uint32_t RecordFriendSvrBrief::_internal_uisendgiftversionid() const {
  return uisendgiftversionid_;
}
inline uint32_t RecordFriendSvrBrief::uisendgiftversionid() const {
  // @@protoc_insertion_point(field_get:record.RecordFriendSvrBrief.uiSendGiftVersionId)
  return _internal_uisendgiftversionid();
}
inline void RecordFriendSvrBrief::_internal_set_uisendgiftversionid(uint32_t value) {
  
  uisendgiftversionid_ = value;
}
inline void RecordFriendSvrBrief::set_uisendgiftversionid(uint32_t value) {
  _internal_set_uisendgiftversionid(value);
  // @@protoc_insertion_point(field_set:record.RecordFriendSvrBrief.uiSendGiftVersionId)
}

// bool bFuncOpen = 7;
inline void RecordFriendSvrBrief::clear_bfuncopen() {
  bfuncopen_ = false;
}
inline bool RecordFriendSvrBrief::_internal_bfuncopen() const {
  return bfuncopen_;
}
inline bool RecordFriendSvrBrief::bfuncopen() const {
  // @@protoc_insertion_point(field_get:record.RecordFriendSvrBrief.bFuncOpen)
  return _internal_bfuncopen();
}
inline void RecordFriendSvrBrief::_internal_set_bfuncopen(bool value) {
  
  bfuncopen_ = value;
}
inline void RecordFriendSvrBrief::set_bfuncopen(bool value) {
  _internal_set_bfuncopen(value);
  // @@protoc_insertion_point(field_set:record.RecordFriendSvrBrief.bFuncOpen)
}

// uint32 uiOnlineTime = 8;
inline void RecordFriendSvrBrief::clear_uionlinetime() {
  uionlinetime_ = 0u;
}
inline uint32_t RecordFriendSvrBrief::_internal_uionlinetime() const {
  return uionlinetime_;
}
inline uint32_t RecordFriendSvrBrief::uionlinetime() const {
  // @@protoc_insertion_point(field_get:record.RecordFriendSvrBrief.uiOnlineTime)
  return _internal_uionlinetime();
}
inline void RecordFriendSvrBrief::_internal_set_uionlinetime(uint32_t value) {
  
  uionlinetime_ = value;
}
inline void RecordFriendSvrBrief::set_uionlinetime(uint32_t value) {
  _internal_set_uionlinetime(value);
  // @@protoc_insertion_point(field_set:record.RecordFriendSvrBrief.uiOnlineTime)
}

// -------------------------------------------------------------------

// RecordFriendList

// uint32 uiFriendListMax = 1;
inline void RecordFriendList::clear_uifriendlistmax() {
  uifriendlistmax_ = 0u;
}
inline uint32_t RecordFriendList::_internal_uifriendlistmax() const {
  return uifriendlistmax_;
}
inline uint32_t RecordFriendList::uifriendlistmax() const {
  // @@protoc_insertion_point(field_get:record.RecordFriendList.uiFriendListMax)
  return _internal_uifriendlistmax();
}
inline void RecordFriendList::_internal_set_uifriendlistmax(uint32_t value) {
  
  uifriendlistmax_ = value;
}
inline void RecordFriendList::set_uifriendlistmax(uint32_t value) {
  _internal_set_uifriendlistmax(value);
  // @@protoc_insertion_point(field_set:record.RecordFriendList.uiFriendListMax)
}

// .record.RecordRelationList oFriends = 2;
inline bool RecordFriendList::_internal_has_ofriends() const {
  return this != internal_default_instance() && ofriends_ != nullptr;
}
inline bool RecordFriendList::has_ofriends() const {
  return _internal_has_ofriends();
}
inline void RecordFriendList::clear_ofriends() {
  if (GetArenaForAllocation() == nullptr && ofriends_ != nullptr) {
    delete ofriends_;
  }
  ofriends_ = nullptr;
}
inline const ::record::RecordRelationList& RecordFriendList::_internal_ofriends() const {
  const ::record::RecordRelationList* p = ofriends_;
  return p != nullptr ? *p : reinterpret_cast<const ::record::RecordRelationList&>(
      ::record::_RecordRelationList_default_instance_);
}
inline const ::record::RecordRelationList& RecordFriendList::ofriends() const {
  // @@protoc_insertion_point(field_get:record.RecordFriendList.oFriends)
  return _internal_ofriends();
}
inline void RecordFriendList::unsafe_arena_set_allocated_ofriends(
    ::record::RecordRelationList* ofriends) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ofriends_);
  }
  ofriends_ = ofriends;
  if (ofriends) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:record.RecordFriendList.oFriends)
}
inline ::record::RecordRelationList* RecordFriendList::release_ofriends() {
  
  ::record::RecordRelationList* temp = ofriends_;
  ofriends_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::record::RecordRelationList* RecordFriendList::unsafe_arena_release_ofriends() {
  // @@protoc_insertion_point(field_release:record.RecordFriendList.oFriends)
  
  ::record::RecordRelationList* temp = ofriends_;
  ofriends_ = nullptr;
  return temp;
}
inline ::record::RecordRelationList* RecordFriendList::_internal_mutable_ofriends() {
  
  if (ofriends_ == nullptr) {
    auto* p = CreateMaybeMessage<::record::RecordRelationList>(GetArenaForAllocation());
    ofriends_ = p;
  }
  return ofriends_;
}
inline ::record::RecordRelationList* RecordFriendList::mutable_ofriends() {
  ::record::RecordRelationList* _msg = _internal_mutable_ofriends();
  // @@protoc_insertion_point(field_mutable:record.RecordFriendList.oFriends)
  return _msg;
}
inline void RecordFriendList::set_allocated_ofriends(::record::RecordRelationList* ofriends) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ofriends_;
  }
  if (ofriends) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ofriends);
    if (message_arena != submessage_arena) {
      ofriends = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ofriends, submessage_arena);
    }
    
  } else {
    
  }
  ofriends_ = ofriends;
  // @@protoc_insertion_point(field_set_allocated:record.RecordFriendList.oFriends)
}

// -------------------------------------------------------------------

// RecordRelationList

// repeated .record.RecordFriendRelation vecRelations = 1;
inline int RecordRelationList::_internal_vecrelations_size() const {
  return vecrelations_.size();
}
inline int RecordRelationList::vecrelations_size() const {
  return _internal_vecrelations_size();
}
inline void RecordRelationList::clear_vecrelations() {
  vecrelations_.Clear();
}
inline ::record::RecordFriendRelation* RecordRelationList::mutable_vecrelations(int index) {
  // @@protoc_insertion_point(field_mutable:record.RecordRelationList.vecRelations)
  return vecrelations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::record::RecordFriendRelation >*
RecordRelationList::mutable_vecrelations() {
  // @@protoc_insertion_point(field_mutable_list:record.RecordRelationList.vecRelations)
  return &vecrelations_;
}
inline const ::record::RecordFriendRelation& RecordRelationList::_internal_vecrelations(int index) const {
  return vecrelations_.Get(index);
}
inline const ::record::RecordFriendRelation& RecordRelationList::vecrelations(int index) const {
  // @@protoc_insertion_point(field_get:record.RecordRelationList.vecRelations)
  return _internal_vecrelations(index);
}
inline ::record::RecordFriendRelation* RecordRelationList::_internal_add_vecrelations() {
  return vecrelations_.Add();
}
inline ::record::RecordFriendRelation* RecordRelationList::add_vecrelations() {
  ::record::RecordFriendRelation* _add = _internal_add_vecrelations();
  // @@protoc_insertion_point(field_add:record.RecordRelationList.vecRelations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::record::RecordFriendRelation >&
RecordRelationList::vecrelations() const {
  // @@protoc_insertion_point(field_list:record.RecordRelationList.vecRelations)
  return vecrelations_;
}

// -------------------------------------------------------------------

// RecordFriendRelation

// uint64 llRoleId = 1;
inline void RecordFriendRelation::clear_llroleid() {
  llroleid_ = uint64_t{0u};
}
inline uint64_t RecordFriendRelation::_internal_llroleid() const {
  return llroleid_;
}
inline uint64_t RecordFriendRelation::llroleid() const {
  // @@protoc_insertion_point(field_get:record.RecordFriendRelation.llRoleId)
  return _internal_llroleid();
}
inline void RecordFriendRelation::_internal_set_llroleid(uint64_t value) {
  
  llroleid_ = value;
}
inline void RecordFriendRelation::set_llroleid(uint64_t value) {
  _internal_set_llroleid(value);
  // @@protoc_insertion_point(field_set:record.RecordFriendRelation.llRoleId)
}

// uint32 uiFriendShip = 2;
inline void RecordFriendRelation::clear_uifriendship() {
  uifriendship_ = 0u;
}
inline uint32_t RecordFriendRelation::_internal_uifriendship() const {
  return uifriendship_;
}
inline uint32_t RecordFriendRelation::uifriendship() const {
  // @@protoc_insertion_point(field_get:record.RecordFriendRelation.uiFriendShip)
  return _internal_uifriendship();
}
inline void RecordFriendRelation::_internal_set_uifriendship(uint32_t value) {
  
  uifriendship_ = value;
}
inline void RecordFriendRelation::set_uifriendship(uint32_t value) {
  _internal_set_uifriendship(value);
  // @@protoc_insertion_point(field_set:record.RecordFriendRelation.uiFriendShip)
}

// uint32 uiDailyChat = 3;
inline void RecordFriendRelation::clear_uidailychat() {
  uidailychat_ = 0u;
}
inline uint32_t RecordFriendRelation::_internal_uidailychat() const {
  return uidailychat_;
}
inline uint32_t RecordFriendRelation::uidailychat() const {
  // @@protoc_insertion_point(field_get:record.RecordFriendRelation.uiDailyChat)
  return _internal_uidailychat();
}
inline void RecordFriendRelation::_internal_set_uidailychat(uint32_t value) {
  
  uidailychat_ = value;
}
inline void RecordFriendRelation::set_uidailychat(uint32_t value) {
  _internal_set_uidailychat(value);
  // @@protoc_insertion_point(field_set:record.RecordFriendRelation.uiDailyChat)
}

// -------------------------------------------------------------------

// RecordRequestList

// repeated uint64 vecRequestList = 1;
inline int RecordRequestList::_internal_vecrequestlist_size() const {
  return vecrequestlist_.size();
}
inline int RecordRequestList::vecrequestlist_size() const {
  return _internal_vecrequestlist_size();
}
inline void RecordRequestList::clear_vecrequestlist() {
  vecrequestlist_.Clear();
}
inline uint64_t RecordRequestList::_internal_vecrequestlist(int index) const {
  return vecrequestlist_.Get(index);
}
inline uint64_t RecordRequestList::vecrequestlist(int index) const {
  // @@protoc_insertion_point(field_get:record.RecordRequestList.vecRequestList)
  return _internal_vecrequestlist(index);
}
inline void RecordRequestList::set_vecrequestlist(int index, uint64_t value) {
  vecrequestlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:record.RecordRequestList.vecRequestList)
}
inline void RecordRequestList::_internal_add_vecrequestlist(uint64_t value) {
  vecrequestlist_.Add(value);
}
inline void RecordRequestList::add_vecrequestlist(uint64_t value) {
  _internal_add_vecrequestlist(value);
  // @@protoc_insertion_point(field_add:record.RecordRequestList.vecRequestList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
RecordRequestList::_internal_vecrequestlist() const {
  return vecrequestlist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
RecordRequestList::vecrequestlist() const {
  // @@protoc_insertion_point(field_list:record.RecordRequestList.vecRequestList)
  return _internal_vecrequestlist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
RecordRequestList::_internal_mutable_vecrequestlist() {
  return &vecrequestlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
RecordRequestList::mutable_vecrequestlist() {
  // @@protoc_insertion_point(field_mutable_list:record.RecordRequestList.vecRequestList)
  return _internal_mutable_vecrequestlist();
}

// -------------------------------------------------------------------

// RecordBlockList

// repeated uint64 vecBlockList = 1;
inline int RecordBlockList::_internal_vecblocklist_size() const {
  return vecblocklist_.size();
}
inline int RecordBlockList::vecblocklist_size() const {
  return _internal_vecblocklist_size();
}
inline void RecordBlockList::clear_vecblocklist() {
  vecblocklist_.Clear();
}
inline uint64_t RecordBlockList::_internal_vecblocklist(int index) const {
  return vecblocklist_.Get(index);
}
inline uint64_t RecordBlockList::vecblocklist(int index) const {
  // @@protoc_insertion_point(field_get:record.RecordBlockList.vecBlockList)
  return _internal_vecblocklist(index);
}
inline void RecordBlockList::set_vecblocklist(int index, uint64_t value) {
  vecblocklist_.Set(index, value);
  // @@protoc_insertion_point(field_set:record.RecordBlockList.vecBlockList)
}
inline void RecordBlockList::_internal_add_vecblocklist(uint64_t value) {
  vecblocklist_.Add(value);
}
inline void RecordBlockList::add_vecblocklist(uint64_t value) {
  _internal_add_vecblocklist(value);
  // @@protoc_insertion_point(field_add:record.RecordBlockList.vecBlockList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
RecordBlockList::_internal_vecblocklist() const {
  return vecblocklist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
RecordBlockList::vecblocklist() const {
  // @@protoc_insertion_point(field_list:record.RecordBlockList.vecBlockList)
  return _internal_vecblocklist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
RecordBlockList::_internal_mutable_vecblocklist() {
  return &vecblocklist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
RecordBlockList::mutable_vecblocklist() {
  // @@protoc_insertion_point(field_mutable_list:record.RecordBlockList.vecBlockList)
  return _internal_mutable_vecblocklist();
}

// -------------------------------------------------------------------

// RecordRecommendFilter

// bool bOnlyCity = 1;
inline void RecordRecommendFilter::clear_bonlycity() {
  bonlycity_ = false;
}
inline bool RecordRecommendFilter::_internal_bonlycity() const {
  return bonlycity_;
}
inline bool RecordRecommendFilter::bonlycity() const {
  // @@protoc_insertion_point(field_get:record.RecordRecommendFilter.bOnlyCity)
  return _internal_bonlycity();
}
inline void RecordRecommendFilter::_internal_set_bonlycity(bool value) {
  
  bonlycity_ = value;
}
inline void RecordRecommendFilter::set_bonlycity(bool value) {
  _internal_set_bonlycity(value);
  // @@protoc_insertion_point(field_set:record.RecordRecommendFilter.bOnlyCity)
}

// uint32 uiSex = 2;
inline void RecordRecommendFilter::clear_uisex() {
  uisex_ = 0u;
}
inline uint32_t RecordRecommendFilter::_internal_uisex() const {
  return uisex_;
}
inline uint32_t RecordRecommendFilter::uisex() const {
  // @@protoc_insertion_point(field_get:record.RecordRecommendFilter.uiSex)
  return _internal_uisex();
}
inline void RecordRecommendFilter::_internal_set_uisex(uint32_t value) {
  
  uisex_ = value;
}
inline void RecordRecommendFilter::set_uisex(uint32_t value) {
  _internal_set_uisex(value);
  // @@protoc_insertion_point(field_set:record.RecordRecommendFilter.uiSex)
}

// uint32 uiBitLabel = 3;
inline void RecordRecommendFilter::clear_uibitlabel() {
  uibitlabel_ = 0u;
}
inline uint32_t RecordRecommendFilter::_internal_uibitlabel() const {
  return uibitlabel_;
}
inline uint32_t RecordRecommendFilter::uibitlabel() const {
  // @@protoc_insertion_point(field_get:record.RecordRecommendFilter.uiBitLabel)
  return _internal_uibitlabel();
}
inline void RecordRecommendFilter::_internal_set_uibitlabel(uint32_t value) {
  
  uibitlabel_ = value;
}
inline void RecordRecommendFilter::set_uibitlabel(uint32_t value) {
  _internal_set_uibitlabel(value);
  // @@protoc_insertion_point(field_set:record.RecordRecommendFilter.uiBitLabel)
}

// -------------------------------------------------------------------

// RecordRecommendLabel

// uint32 uiCity = 1;
inline void RecordRecommendLabel::clear_uicity() {
  uicity_ = 0u;
}
inline uint32_t RecordRecommendLabel::_internal_uicity() const {
  return uicity_;
}
inline uint32_t RecordRecommendLabel::uicity() const {
  // @@protoc_insertion_point(field_get:record.RecordRecommendLabel.uiCity)
  return _internal_uicity();
}
inline void RecordRecommendLabel::_internal_set_uicity(uint32_t value) {
  
  uicity_ = value;
}
inline void RecordRecommendLabel::set_uicity(uint32_t value) {
  _internal_set_uicity(value);
  // @@protoc_insertion_point(field_set:record.RecordRecommendLabel.uiCity)
}

// uint32 uiBitLabel = 2;
inline void RecordRecommendLabel::clear_uibitlabel() {
  uibitlabel_ = 0u;
}
inline uint32_t RecordRecommendLabel::_internal_uibitlabel() const {
  return uibitlabel_;
}
inline uint32_t RecordRecommendLabel::uibitlabel() const {
  // @@protoc_insertion_point(field_get:record.RecordRecommendLabel.uiBitLabel)
  return _internal_uibitlabel();
}
inline void RecordRecommendLabel::_internal_set_uibitlabel(uint32_t value) {
  
  uibitlabel_ = value;
}
inline void RecordRecommendLabel::set_uibitlabel(uint32_t value) {
  _internal_set_uibitlabel(value);
  // @@protoc_insertion_point(field_set:record.RecordRecommendLabel.uiBitLabel)
}

// bool bAvailable = 3;
inline void RecordRecommendLabel::clear_bavailable() {
  bavailable_ = false;
}
inline bool RecordRecommendLabel::_internal_bavailable() const {
  return bavailable_;
}
inline bool RecordRecommendLabel::bavailable() const {
  // @@protoc_insertion_point(field_get:record.RecordRecommendLabel.bAvailable)
  return _internal_bavailable();
}
inline void RecordRecommendLabel::_internal_set_bavailable(bool value) {
  
  bavailable_ = value;
}
inline void RecordRecommendLabel::set_bavailable(bool value) {
  _internal_set_bavailable(value);
  // @@protoc_insertion_point(field_set:record.RecordRecommendLabel.bAvailable)
}

// -------------------------------------------------------------------

// RecordSendGiftTimes

// uint32 uiDailyCount = 1;
inline void RecordSendGiftTimes::clear_uidailycount() {
  uidailycount_ = 0u;
}
inline uint32_t RecordSendGiftTimes::_internal_uidailycount() const {
  return uidailycount_;
}
inline uint32_t RecordSendGiftTimes::uidailycount() const {
  // @@protoc_insertion_point(field_get:record.RecordSendGiftTimes.uiDailyCount)
  return _internal_uidailycount();
}
inline void RecordSendGiftTimes::_internal_set_uidailycount(uint32_t value) {
  
  uidailycount_ = value;
}
inline void RecordSendGiftTimes::set_uidailycount(uint32_t value) {
  _internal_set_uidailycount(value);
  // @@protoc_insertion_point(field_set:record.RecordSendGiftTimes.uiDailyCount)
}

// .record.RecordAllSendTimes oAllSendTimes = 2;
inline bool RecordSendGiftTimes::_internal_has_oallsendtimes() const {
  return this != internal_default_instance() && oallsendtimes_ != nullptr;
}
inline bool RecordSendGiftTimes::has_oallsendtimes() const {
  return _internal_has_oallsendtimes();
}
inline void RecordSendGiftTimes::clear_oallsendtimes() {
  if (GetArenaForAllocation() == nullptr && oallsendtimes_ != nullptr) {
    delete oallsendtimes_;
  }
  oallsendtimes_ = nullptr;
}
inline const ::record::RecordAllSendTimes& RecordSendGiftTimes::_internal_oallsendtimes() const {
  const ::record::RecordAllSendTimes* p = oallsendtimes_;
  return p != nullptr ? *p : reinterpret_cast<const ::record::RecordAllSendTimes&>(
      ::record::_RecordAllSendTimes_default_instance_);
}
inline const ::record::RecordAllSendTimes& RecordSendGiftTimes::oallsendtimes() const {
  // @@protoc_insertion_point(field_get:record.RecordSendGiftTimes.oAllSendTimes)
  return _internal_oallsendtimes();
}
inline void RecordSendGiftTimes::unsafe_arena_set_allocated_oallsendtimes(
    ::record::RecordAllSendTimes* oallsendtimes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oallsendtimes_);
  }
  oallsendtimes_ = oallsendtimes;
  if (oallsendtimes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:record.RecordSendGiftTimes.oAllSendTimes)
}
inline ::record::RecordAllSendTimes* RecordSendGiftTimes::release_oallsendtimes() {
  
  ::record::RecordAllSendTimes* temp = oallsendtimes_;
  oallsendtimes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::record::RecordAllSendTimes* RecordSendGiftTimes::unsafe_arena_release_oallsendtimes() {
  // @@protoc_insertion_point(field_release:record.RecordSendGiftTimes.oAllSendTimes)
  
  ::record::RecordAllSendTimes* temp = oallsendtimes_;
  oallsendtimes_ = nullptr;
  return temp;
}
inline ::record::RecordAllSendTimes* RecordSendGiftTimes::_internal_mutable_oallsendtimes() {
  
  if (oallsendtimes_ == nullptr) {
    auto* p = CreateMaybeMessage<::record::RecordAllSendTimes>(GetArenaForAllocation());
    oallsendtimes_ = p;
  }
  return oallsendtimes_;
}
inline ::record::RecordAllSendTimes* RecordSendGiftTimes::mutable_oallsendtimes() {
  ::record::RecordAllSendTimes* _msg = _internal_mutable_oallsendtimes();
  // @@protoc_insertion_point(field_mutable:record.RecordSendGiftTimes.oAllSendTimes)
  return _msg;
}
inline void RecordSendGiftTimes::set_allocated_oallsendtimes(::record::RecordAllSendTimes* oallsendtimes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete oallsendtimes_;
  }
  if (oallsendtimes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(oallsendtimes);
    if (message_arena != submessage_arena) {
      oallsendtimes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oallsendtimes, submessage_arena);
    }
    
  } else {
    
  }
  oallsendtimes_ = oallsendtimes;
  // @@protoc_insertion_point(field_set_allocated:record.RecordSendGiftTimes.oAllSendTimes)
}

// -------------------------------------------------------------------

// RecordAllSendTimes

// repeated .record.RecordOneSendTimes vecSendTimes = 1;
inline int RecordAllSendTimes::_internal_vecsendtimes_size() const {
  return vecsendtimes_.size();
}
inline int RecordAllSendTimes::vecsendtimes_size() const {
  return _internal_vecsendtimes_size();
}
inline void RecordAllSendTimes::clear_vecsendtimes() {
  vecsendtimes_.Clear();
}
inline ::record::RecordOneSendTimes* RecordAllSendTimes::mutable_vecsendtimes(int index) {
  // @@protoc_insertion_point(field_mutable:record.RecordAllSendTimes.vecSendTimes)
  return vecsendtimes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::record::RecordOneSendTimes >*
RecordAllSendTimes::mutable_vecsendtimes() {
  // @@protoc_insertion_point(field_mutable_list:record.RecordAllSendTimes.vecSendTimes)
  return &vecsendtimes_;
}
inline const ::record::RecordOneSendTimes& RecordAllSendTimes::_internal_vecsendtimes(int index) const {
  return vecsendtimes_.Get(index);
}
inline const ::record::RecordOneSendTimes& RecordAllSendTimes::vecsendtimes(int index) const {
  // @@protoc_insertion_point(field_get:record.RecordAllSendTimes.vecSendTimes)
  return _internal_vecsendtimes(index);
}
inline ::record::RecordOneSendTimes* RecordAllSendTimes::_internal_add_vecsendtimes() {
  return vecsendtimes_.Add();
}
inline ::record::RecordOneSendTimes* RecordAllSendTimes::add_vecsendtimes() {
  ::record::RecordOneSendTimes* _add = _internal_add_vecsendtimes();
  // @@protoc_insertion_point(field_add:record.RecordAllSendTimes.vecSendTimes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::record::RecordOneSendTimes >&
RecordAllSendTimes::vecsendtimes() const {
  // @@protoc_insertion_point(field_list:record.RecordAllSendTimes.vecSendTimes)
  return vecsendtimes_;
}

// -------------------------------------------------------------------

// RecordOneSendTimes

// uint64 llRoleId = 1;
inline void RecordOneSendTimes::clear_llroleid() {
  llroleid_ = uint64_t{0u};
}
inline uint64_t RecordOneSendTimes::_internal_llroleid() const {
  return llroleid_;
}
inline uint64_t RecordOneSendTimes::llroleid() const {
  // @@protoc_insertion_point(field_get:record.RecordOneSendTimes.llRoleId)
  return _internal_llroleid();
}
inline void RecordOneSendTimes::_internal_set_llroleid(uint64_t value) {
  
  llroleid_ = value;
}
inline void RecordOneSendTimes::set_llroleid(uint64_t value) {
  _internal_set_llroleid(value);
  // @@protoc_insertion_point(field_set:record.RecordOneSendTimes.llRoleId)
}

// uint32 uiTimes = 2;
inline void RecordOneSendTimes::clear_uitimes() {
  uitimes_ = 0u;
}
inline uint32_t RecordOneSendTimes::_internal_uitimes() const {
  return uitimes_;
}
inline uint32_t RecordOneSendTimes::uitimes() const {
  // @@protoc_insertion_point(field_get:record.RecordOneSendTimes.uiTimes)
  return _internal_uitimes();
}
inline void RecordOneSendTimes::_internal_set_uitimes(uint32_t value) {
  
  uitimes_ = value;
}
inline void RecordOneSendTimes::set_uitimes(uint32_t value) {
  _internal_set_uitimes(value);
  // @@protoc_insertion_point(field_set:record.RecordOneSendTimes.uiTimes)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace record

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_recordfriend_2eproto
