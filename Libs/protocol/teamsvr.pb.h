// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: teamsvr.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_teamsvr_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_teamsvr_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "innercommon.pb.h"
#include "fight3v3common.pb.h"
#include "fight5v5common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_teamsvr_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_teamsvr_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_teamsvr_2eproto;
namespace inner {
class InnerTeamsvr;
struct InnerTeamsvrDefaultTypeInternal;
extern InnerTeamsvrDefaultTypeInternal _InnerTeamsvr_default_instance_;
class InnerTeamsvr_Fromscene_GameEvent;
struct InnerTeamsvr_Fromscene_GameEventDefaultTypeInternal;
extern InnerTeamsvr_Fromscene_GameEventDefaultTypeInternal _InnerTeamsvr_Fromscene_GameEvent_default_instance_;
class InnerTeamsvr_Fromscene_Test;
struct InnerTeamsvr_Fromscene_TestDefaultTypeInternal;
extern InnerTeamsvr_Fromscene_TestDefaultTypeInternal _InnerTeamsvr_Fromscene_Test_default_instance_;
class InnerTeamsvr_Fromscene_UpdateUserInfo;
struct InnerTeamsvr_Fromscene_UpdateUserInfoDefaultTypeInternal;
extern InnerTeamsvr_Fromscene_UpdateUserInfoDefaultTypeInternal _InnerTeamsvr_Fromscene_UpdateUserInfo_default_instance_;
}  // namespace inner
PROTOBUF_NAMESPACE_OPEN
template<> ::inner::InnerTeamsvr* Arena::CreateMaybeMessage<::inner::InnerTeamsvr>(Arena*);
template<> ::inner::InnerTeamsvr_Fromscene_GameEvent* Arena::CreateMaybeMessage<::inner::InnerTeamsvr_Fromscene_GameEvent>(Arena*);
template<> ::inner::InnerTeamsvr_Fromscene_Test* Arena::CreateMaybeMessage<::inner::InnerTeamsvr_Fromscene_Test>(Arena*);
template<> ::inner::InnerTeamsvr_Fromscene_UpdateUserInfo* Arena::CreateMaybeMessage<::inner::InnerTeamsvr_Fromscene_UpdateUserInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inner {

// ===================================================================

class InnerTeamsvr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerTeamsvr) */ {
 public:
  inline InnerTeamsvr() : InnerTeamsvr(nullptr) {}
  ~InnerTeamsvr() override;
  explicit PROTOBUF_CONSTEXPR InnerTeamsvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerTeamsvr(const InnerTeamsvr& from);
  InnerTeamsvr(InnerTeamsvr&& from) noexcept
    : InnerTeamsvr() {
    *this = ::std::move(from);
  }

  inline InnerTeamsvr& operator=(const InnerTeamsvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerTeamsvr& operator=(InnerTeamsvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerTeamsvr& default_instance() {
    return *internal_default_instance();
  }
  enum FromsceneCase {
    kFromsceneTest = 1401,
    kFromsceneGameevent = 1402,
    kFromsceneUpdateuserinfo = 1403,
    FROMSCENE_NOT_SET = 0,
  };

  static inline const InnerTeamsvr* internal_default_instance() {
    return reinterpret_cast<const InnerTeamsvr*>(
               &_InnerTeamsvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InnerTeamsvr& a, InnerTeamsvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerTeamsvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerTeamsvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerTeamsvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerTeamsvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerTeamsvr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerTeamsvr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerTeamsvr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerTeamsvr";
  }
  protected:
  explicit InnerTeamsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromuserFieldNumber = 1,
    kFromzoneFieldNumber = 2,
    kFromsceneTestFieldNumber = 1401,
    kFromsceneGameeventFieldNumber = 1402,
    kFromsceneUpdateuserinfoFieldNumber = 1403,
  };
  // uint64 fromuser = 1;
  void clear_fromuser();
  uint64_t fromuser() const;
  void set_fromuser(uint64_t value);
  private:
  uint64_t _internal_fromuser() const;
  void _internal_set_fromuser(uint64_t value);
  public:

  // uint32 fromzone = 2;
  void clear_fromzone();
  uint32_t fromzone() const;
  void set_fromzone(uint32_t value);
  private:
  uint32_t _internal_fromzone() const;
  void _internal_set_fromzone(uint32_t value);
  public:

  // .inner.InnerTeamsvr_Fromscene_Test fromscene_test = 1401;
  bool has_fromscene_test() const;
  private:
  bool _internal_has_fromscene_test() const;
  public:
  void clear_fromscene_test();
  const ::inner::InnerTeamsvr_Fromscene_Test& fromscene_test() const;
  PROTOBUF_NODISCARD ::inner::InnerTeamsvr_Fromscene_Test* release_fromscene_test();
  ::inner::InnerTeamsvr_Fromscene_Test* mutable_fromscene_test();
  void set_allocated_fromscene_test(::inner::InnerTeamsvr_Fromscene_Test* fromscene_test);
  private:
  const ::inner::InnerTeamsvr_Fromscene_Test& _internal_fromscene_test() const;
  ::inner::InnerTeamsvr_Fromscene_Test* _internal_mutable_fromscene_test();
  public:
  void unsafe_arena_set_allocated_fromscene_test(
      ::inner::InnerTeamsvr_Fromscene_Test* fromscene_test);
  ::inner::InnerTeamsvr_Fromscene_Test* unsafe_arena_release_fromscene_test();

  // .inner.InnerTeamsvr_Fromscene_GameEvent fromscene_gameevent = 1402;
  bool has_fromscene_gameevent() const;
  private:
  bool _internal_has_fromscene_gameevent() const;
  public:
  void clear_fromscene_gameevent();
  const ::inner::InnerTeamsvr_Fromscene_GameEvent& fromscene_gameevent() const;
  PROTOBUF_NODISCARD ::inner::InnerTeamsvr_Fromscene_GameEvent* release_fromscene_gameevent();
  ::inner::InnerTeamsvr_Fromscene_GameEvent* mutable_fromscene_gameevent();
  void set_allocated_fromscene_gameevent(::inner::InnerTeamsvr_Fromscene_GameEvent* fromscene_gameevent);
  private:
  const ::inner::InnerTeamsvr_Fromscene_GameEvent& _internal_fromscene_gameevent() const;
  ::inner::InnerTeamsvr_Fromscene_GameEvent* _internal_mutable_fromscene_gameevent();
  public:
  void unsafe_arena_set_allocated_fromscene_gameevent(
      ::inner::InnerTeamsvr_Fromscene_GameEvent* fromscene_gameevent);
  ::inner::InnerTeamsvr_Fromscene_GameEvent* unsafe_arena_release_fromscene_gameevent();

  // .inner.InnerTeamsvr_Fromscene_UpdateUserInfo fromscene_updateuserinfo = 1403;
  bool has_fromscene_updateuserinfo() const;
  private:
  bool _internal_has_fromscene_updateuserinfo() const;
  public:
  void clear_fromscene_updateuserinfo();
  const ::inner::InnerTeamsvr_Fromscene_UpdateUserInfo& fromscene_updateuserinfo() const;
  PROTOBUF_NODISCARD ::inner::InnerTeamsvr_Fromscene_UpdateUserInfo* release_fromscene_updateuserinfo();
  ::inner::InnerTeamsvr_Fromscene_UpdateUserInfo* mutable_fromscene_updateuserinfo();
  void set_allocated_fromscene_updateuserinfo(::inner::InnerTeamsvr_Fromscene_UpdateUserInfo* fromscene_updateuserinfo);
  private:
  const ::inner::InnerTeamsvr_Fromscene_UpdateUserInfo& _internal_fromscene_updateuserinfo() const;
  ::inner::InnerTeamsvr_Fromscene_UpdateUserInfo* _internal_mutable_fromscene_updateuserinfo();
  public:
  void unsafe_arena_set_allocated_fromscene_updateuserinfo(
      ::inner::InnerTeamsvr_Fromscene_UpdateUserInfo* fromscene_updateuserinfo);
  ::inner::InnerTeamsvr_Fromscene_UpdateUserInfo* unsafe_arena_release_fromscene_updateuserinfo();

  void clear_Fromscene();
  FromsceneCase Fromscene_case() const;
  // @@protoc_insertion_point(class_scope:inner.InnerTeamsvr)
 private:
  class _Internal;
  void set_has_fromscene_test();
  void set_has_fromscene_gameevent();
  void set_has_fromscene_updateuserinfo();

  inline bool has_Fromscene() const;
  inline void clear_has_Fromscene();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t fromuser_;
  uint32_t fromzone_;
  union FromsceneUnion {
    constexpr FromsceneUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::inner::InnerTeamsvr_Fromscene_Test* fromscene_test_;
    ::inner::InnerTeamsvr_Fromscene_GameEvent* fromscene_gameevent_;
    ::inner::InnerTeamsvr_Fromscene_UpdateUserInfo* fromscene_updateuserinfo_;
  } Fromscene_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_teamsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerTeamsvr_Fromscene_Test final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerTeamsvr_Fromscene_Test) */ {
 public:
  inline InnerTeamsvr_Fromscene_Test() : InnerTeamsvr_Fromscene_Test(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerTeamsvr_Fromscene_Test(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerTeamsvr_Fromscene_Test(const InnerTeamsvr_Fromscene_Test& from);
  InnerTeamsvr_Fromscene_Test(InnerTeamsvr_Fromscene_Test&& from) noexcept
    : InnerTeamsvr_Fromscene_Test() {
    *this = ::std::move(from);
  }

  inline InnerTeamsvr_Fromscene_Test& operator=(const InnerTeamsvr_Fromscene_Test& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerTeamsvr_Fromscene_Test& operator=(InnerTeamsvr_Fromscene_Test&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerTeamsvr_Fromscene_Test& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerTeamsvr_Fromscene_Test* internal_default_instance() {
    return reinterpret_cast<const InnerTeamsvr_Fromscene_Test*>(
               &_InnerTeamsvr_Fromscene_Test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InnerTeamsvr_Fromscene_Test& a, InnerTeamsvr_Fromscene_Test& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerTeamsvr_Fromscene_Test* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerTeamsvr_Fromscene_Test* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerTeamsvr_Fromscene_Test* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerTeamsvr_Fromscene_Test>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerTeamsvr_Fromscene_Test& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerTeamsvr_Fromscene_Test& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerTeamsvr_Fromscene_Test";
  }
  protected:
  explicit InnerTeamsvr_Fromscene_Test(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerTeamsvr_Fromscene_Test)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_teamsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerTeamsvr_Fromscene_GameEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerTeamsvr_Fromscene_GameEvent) */ {
 public:
  inline InnerTeamsvr_Fromscene_GameEvent() : InnerTeamsvr_Fromscene_GameEvent(nullptr) {}
  ~InnerTeamsvr_Fromscene_GameEvent() override;
  explicit PROTOBUF_CONSTEXPR InnerTeamsvr_Fromscene_GameEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerTeamsvr_Fromscene_GameEvent(const InnerTeamsvr_Fromscene_GameEvent& from);
  InnerTeamsvr_Fromscene_GameEvent(InnerTeamsvr_Fromscene_GameEvent&& from) noexcept
    : InnerTeamsvr_Fromscene_GameEvent() {
    *this = ::std::move(from);
  }

  inline InnerTeamsvr_Fromscene_GameEvent& operator=(const InnerTeamsvr_Fromscene_GameEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerTeamsvr_Fromscene_GameEvent& operator=(InnerTeamsvr_Fromscene_GameEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerTeamsvr_Fromscene_GameEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerTeamsvr_Fromscene_GameEvent* internal_default_instance() {
    return reinterpret_cast<const InnerTeamsvr_Fromscene_GameEvent*>(
               &_InnerTeamsvr_Fromscene_GameEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InnerTeamsvr_Fromscene_GameEvent& a, InnerTeamsvr_Fromscene_GameEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerTeamsvr_Fromscene_GameEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerTeamsvr_Fromscene_GameEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerTeamsvr_Fromscene_GameEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerTeamsvr_Fromscene_GameEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerTeamsvr_Fromscene_GameEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerTeamsvr_Fromscene_GameEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerTeamsvr_Fromscene_GameEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerTeamsvr_Fromscene_GameEvent";
  }
  protected:
  explicit InnerTeamsvr_Fromscene_GameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameEventFieldNumber = 1,
  };
  // .inner.InnerGameEvent gameEvent = 1;
  bool has_gameevent() const;
  private:
  bool _internal_has_gameevent() const;
  public:
  void clear_gameevent();
  const ::inner::InnerGameEvent& gameevent() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEvent* release_gameevent();
  ::inner::InnerGameEvent* mutable_gameevent();
  void set_allocated_gameevent(::inner::InnerGameEvent* gameevent);
  private:
  const ::inner::InnerGameEvent& _internal_gameevent() const;
  ::inner::InnerGameEvent* _internal_mutable_gameevent();
  public:
  void unsafe_arena_set_allocated_gameevent(
      ::inner::InnerGameEvent* gameevent);
  ::inner::InnerGameEvent* unsafe_arena_release_gameevent();

  // @@protoc_insertion_point(class_scope:inner.InnerTeamsvr_Fromscene_GameEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::inner::InnerGameEvent* gameevent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teamsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerTeamsvr_Fromscene_UpdateUserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerTeamsvr_Fromscene_UpdateUserInfo) */ {
 public:
  inline InnerTeamsvr_Fromscene_UpdateUserInfo() : InnerTeamsvr_Fromscene_UpdateUserInfo(nullptr) {}
  ~InnerTeamsvr_Fromscene_UpdateUserInfo() override;
  explicit PROTOBUF_CONSTEXPR InnerTeamsvr_Fromscene_UpdateUserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerTeamsvr_Fromscene_UpdateUserInfo(const InnerTeamsvr_Fromscene_UpdateUserInfo& from);
  InnerTeamsvr_Fromscene_UpdateUserInfo(InnerTeamsvr_Fromscene_UpdateUserInfo&& from) noexcept
    : InnerTeamsvr_Fromscene_UpdateUserInfo() {
    *this = ::std::move(from);
  }

  inline InnerTeamsvr_Fromscene_UpdateUserInfo& operator=(const InnerTeamsvr_Fromscene_UpdateUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerTeamsvr_Fromscene_UpdateUserInfo& operator=(InnerTeamsvr_Fromscene_UpdateUserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerTeamsvr_Fromscene_UpdateUserInfo& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kExtd2 = 1,
    kExtd3 = 2,
    kNickName = 3,
    kHeadIcon = 4,
    kHeadFrame = 5,
    kCareerId = 6,
    kLevel = 7,
    kSex = 8,
    kCareeLevel = 9,
    kF33 = 10,
    kF55 = 11,
    TYPE_NOT_SET = 0,
  };

  static inline const InnerTeamsvr_Fromscene_UpdateUserInfo* internal_default_instance() {
    return reinterpret_cast<const InnerTeamsvr_Fromscene_UpdateUserInfo*>(
               &_InnerTeamsvr_Fromscene_UpdateUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InnerTeamsvr_Fromscene_UpdateUserInfo& a, InnerTeamsvr_Fromscene_UpdateUserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerTeamsvr_Fromscene_UpdateUserInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerTeamsvr_Fromscene_UpdateUserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerTeamsvr_Fromscene_UpdateUserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerTeamsvr_Fromscene_UpdateUserInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerTeamsvr_Fromscene_UpdateUserInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerTeamsvr_Fromscene_UpdateUserInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerTeamsvr_Fromscene_UpdateUserInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerTeamsvr_Fromscene_UpdateUserInfo";
  }
  protected:
  explicit InnerTeamsvr_Fromscene_UpdateUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtd2FieldNumber = 1,
    kExtd3FieldNumber = 2,
    kNickNameFieldNumber = 3,
    kHeadIconFieldNumber = 4,
    kHeadFrameFieldNumber = 5,
    kCareerIdFieldNumber = 6,
    kLevelFieldNumber = 7,
    kSexFieldNumber = 8,
    kCareeLevelFieldNumber = 9,
    kF33FieldNumber = 10,
    kF55FieldNumber = 11,
  };
  // .common.RoleExtend2 extd2 = 1;
  bool has_extd2() const;
  private:
  bool _internal_has_extd2() const;
  public:
  void clear_extd2();
  const ::common::RoleExtend2& extd2() const;
  PROTOBUF_NODISCARD ::common::RoleExtend2* release_extd2();
  ::common::RoleExtend2* mutable_extd2();
  void set_allocated_extd2(::common::RoleExtend2* extd2);
  private:
  const ::common::RoleExtend2& _internal_extd2() const;
  ::common::RoleExtend2* _internal_mutable_extd2();
  public:
  void unsafe_arena_set_allocated_extd2(
      ::common::RoleExtend2* extd2);
  ::common::RoleExtend2* unsafe_arena_release_extd2();

  // .common.RoleExtend3 extd3 = 2;
  bool has_extd3() const;
  private:
  bool _internal_has_extd3() const;
  public:
  void clear_extd3();
  const ::common::RoleExtend3& extd3() const;
  PROTOBUF_NODISCARD ::common::RoleExtend3* release_extd3();
  ::common::RoleExtend3* mutable_extd3();
  void set_allocated_extd3(::common::RoleExtend3* extd3);
  private:
  const ::common::RoleExtend3& _internal_extd3() const;
  ::common::RoleExtend3* _internal_mutable_extd3();
  public:
  void unsafe_arena_set_allocated_extd3(
      ::common::RoleExtend3* extd3);
  ::common::RoleExtend3* unsafe_arena_release_extd3();

  // string nickName = 3;
  bool has_nickname() const;
  private:
  bool _internal_has_nickname() const;
  public:
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // uint32 headIcon = 4;
  bool has_headicon() const;
  private:
  bool _internal_has_headicon() const;
  public:
  void clear_headicon();
  uint32_t headicon() const;
  void set_headicon(uint32_t value);
  private:
  uint32_t _internal_headicon() const;
  void _internal_set_headicon(uint32_t value);
  public:

  // uint32 headFrame = 5;
  bool has_headframe() const;
  private:
  bool _internal_has_headframe() const;
  public:
  void clear_headframe();
  uint32_t headframe() const;
  void set_headframe(uint32_t value);
  private:
  uint32_t _internal_headframe() const;
  void _internal_set_headframe(uint32_t value);
  public:

  // uint32 careerId = 6;
  bool has_careerid() const;
  private:
  bool _internal_has_careerid() const;
  public:
  void clear_careerid();
  uint32_t careerid() const;
  void set_careerid(uint32_t value);
  private:
  uint32_t _internal_careerid() const;
  void _internal_set_careerid(uint32_t value);
  public:

  // uint32 level = 7;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 sex = 8;
  bool has_sex() const;
  private:
  bool _internal_has_sex() const;
  public:
  void clear_sex();
  uint32_t sex() const;
  void set_sex(uint32_t value);
  private:
  uint32_t _internal_sex() const;
  void _internal_set_sex(uint32_t value);
  public:

  // uint32 careeLevel = 9;
  bool has_careelevel() const;
  private:
  bool _internal_has_careelevel() const;
  public:
  void clear_careelevel();
  uint32_t careelevel() const;
  void set_careelevel(uint32_t value);
  private:
  uint32_t _internal_careelevel() const;
  void _internal_set_careelevel(uint32_t value);
  public:

  // .common.ExtendFight3v3 f33 = 10;
  bool has_f33() const;
  private:
  bool _internal_has_f33() const;
  public:
  void clear_f33();
  const ::common::ExtendFight3v3& f33() const;
  PROTOBUF_NODISCARD ::common::ExtendFight3v3* release_f33();
  ::common::ExtendFight3v3* mutable_f33();
  void set_allocated_f33(::common::ExtendFight3v3* f33);
  private:
  const ::common::ExtendFight3v3& _internal_f33() const;
  ::common::ExtendFight3v3* _internal_mutable_f33();
  public:
  void unsafe_arena_set_allocated_f33(
      ::common::ExtendFight3v3* f33);
  ::common::ExtendFight3v3* unsafe_arena_release_f33();

  // .common.ExtendFight5v5 f55 = 11;
  bool has_f55() const;
  private:
  bool _internal_has_f55() const;
  public:
  void clear_f55();
  const ::common::ExtendFight5v5& f55() const;
  PROTOBUF_NODISCARD ::common::ExtendFight5v5* release_f55();
  ::common::ExtendFight5v5* mutable_f55();
  void set_allocated_f55(::common::ExtendFight5v5* f55);
  private:
  const ::common::ExtendFight5v5& _internal_f55() const;
  ::common::ExtendFight5v5* _internal_mutable_f55();
  public:
  void unsafe_arena_set_allocated_f55(
      ::common::ExtendFight5v5* f55);
  ::common::ExtendFight5v5* unsafe_arena_release_f55();

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:inner.InnerTeamsvr_Fromscene_UpdateUserInfo)
 private:
  class _Internal;
  void set_has_extd2();
  void set_has_extd3();
  void set_has_nickname();
  void set_has_headicon();
  void set_has_headframe();
  void set_has_careerid();
  void set_has_level();
  void set_has_sex();
  void set_has_careelevel();
  void set_has_f33();
  void set_has_f55();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TypeUnion {
    constexpr TypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::common::RoleExtend2* extd2_;
    ::common::RoleExtend3* extd3_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    uint32_t headicon_;
    uint32_t headframe_;
    uint32_t careerid_;
    uint32_t level_;
    uint32_t sex_;
    uint32_t careelevel_;
    ::common::ExtendFight3v3* f33_;
    ::common::ExtendFight5v5* f55_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_teamsvr_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InnerTeamsvr

// uint64 fromuser = 1;
inline void InnerTeamsvr::clear_fromuser() {
  fromuser_ = uint64_t{0u};
}
inline uint64_t InnerTeamsvr::_internal_fromuser() const {
  return fromuser_;
}
inline uint64_t InnerTeamsvr::fromuser() const {
  // @@protoc_insertion_point(field_get:inner.InnerTeamsvr.fromuser)
  return _internal_fromuser();
}
inline void InnerTeamsvr::_internal_set_fromuser(uint64_t value) {
  
  fromuser_ = value;
}
inline void InnerTeamsvr::set_fromuser(uint64_t value) {
  _internal_set_fromuser(value);
  // @@protoc_insertion_point(field_set:inner.InnerTeamsvr.fromuser)
}

// uint32 fromzone = 2;
inline void InnerTeamsvr::clear_fromzone() {
  fromzone_ = 0u;
}
inline uint32_t InnerTeamsvr::_internal_fromzone() const {
  return fromzone_;
}
inline uint32_t InnerTeamsvr::fromzone() const {
  // @@protoc_insertion_point(field_get:inner.InnerTeamsvr.fromzone)
  return _internal_fromzone();
}
inline void InnerTeamsvr::_internal_set_fromzone(uint32_t value) {
  
  fromzone_ = value;
}
inline void InnerTeamsvr::set_fromzone(uint32_t value) {
  _internal_set_fromzone(value);
  // @@protoc_insertion_point(field_set:inner.InnerTeamsvr.fromzone)
}

// .inner.InnerTeamsvr_Fromscene_Test fromscene_test = 1401;
inline bool InnerTeamsvr::_internal_has_fromscene_test() const {
  return Fromscene_case() == kFromsceneTest;
}
inline bool InnerTeamsvr::has_fromscene_test() const {
  return _internal_has_fromscene_test();
}
inline void InnerTeamsvr::set_has_fromscene_test() {
  _oneof_case_[0] = kFromsceneTest;
}
inline void InnerTeamsvr::clear_fromscene_test() {
  if (_internal_has_fromscene_test()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_test_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerTeamsvr_Fromscene_Test* InnerTeamsvr::release_fromscene_test() {
  // @@protoc_insertion_point(field_release:inner.InnerTeamsvr.fromscene_test)
  if (_internal_has_fromscene_test()) {
    clear_has_Fromscene();
    ::inner::InnerTeamsvr_Fromscene_Test* temp = Fromscene_.fromscene_test_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_test_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerTeamsvr_Fromscene_Test& InnerTeamsvr::_internal_fromscene_test() const {
  return _internal_has_fromscene_test()
      ? *Fromscene_.fromscene_test_
      : reinterpret_cast< ::inner::InnerTeamsvr_Fromscene_Test&>(::inner::_InnerTeamsvr_Fromscene_Test_default_instance_);
}
inline const ::inner::InnerTeamsvr_Fromscene_Test& InnerTeamsvr::fromscene_test() const {
  // @@protoc_insertion_point(field_get:inner.InnerTeamsvr.fromscene_test)
  return _internal_fromscene_test();
}
inline ::inner::InnerTeamsvr_Fromscene_Test* InnerTeamsvr::unsafe_arena_release_fromscene_test() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerTeamsvr.fromscene_test)
  if (_internal_has_fromscene_test()) {
    clear_has_Fromscene();
    ::inner::InnerTeamsvr_Fromscene_Test* temp = Fromscene_.fromscene_test_;
    Fromscene_.fromscene_test_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerTeamsvr::unsafe_arena_set_allocated_fromscene_test(::inner::InnerTeamsvr_Fromscene_Test* fromscene_test) {
  clear_Fromscene();
  if (fromscene_test) {
    set_has_fromscene_test();
    Fromscene_.fromscene_test_ = fromscene_test;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerTeamsvr.fromscene_test)
}
inline ::inner::InnerTeamsvr_Fromscene_Test* InnerTeamsvr::_internal_mutable_fromscene_test() {
  if (!_internal_has_fromscene_test()) {
    clear_Fromscene();
    set_has_fromscene_test();
    Fromscene_.fromscene_test_ = CreateMaybeMessage< ::inner::InnerTeamsvr_Fromscene_Test >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_test_;
}
inline ::inner::InnerTeamsvr_Fromscene_Test* InnerTeamsvr::mutable_fromscene_test() {
  ::inner::InnerTeamsvr_Fromscene_Test* _msg = _internal_mutable_fromscene_test();
  // @@protoc_insertion_point(field_mutable:inner.InnerTeamsvr.fromscene_test)
  return _msg;
}

// .inner.InnerTeamsvr_Fromscene_GameEvent fromscene_gameevent = 1402;
inline bool InnerTeamsvr::_internal_has_fromscene_gameevent() const {
  return Fromscene_case() == kFromsceneGameevent;
}
inline bool InnerTeamsvr::has_fromscene_gameevent() const {
  return _internal_has_fromscene_gameevent();
}
inline void InnerTeamsvr::set_has_fromscene_gameevent() {
  _oneof_case_[0] = kFromsceneGameevent;
}
inline void InnerTeamsvr::clear_fromscene_gameevent() {
  if (_internal_has_fromscene_gameevent()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_gameevent_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerTeamsvr_Fromscene_GameEvent* InnerTeamsvr::release_fromscene_gameevent() {
  // @@protoc_insertion_point(field_release:inner.InnerTeamsvr.fromscene_gameevent)
  if (_internal_has_fromscene_gameevent()) {
    clear_has_Fromscene();
    ::inner::InnerTeamsvr_Fromscene_GameEvent* temp = Fromscene_.fromscene_gameevent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_gameevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerTeamsvr_Fromscene_GameEvent& InnerTeamsvr::_internal_fromscene_gameevent() const {
  return _internal_has_fromscene_gameevent()
      ? *Fromscene_.fromscene_gameevent_
      : reinterpret_cast< ::inner::InnerTeamsvr_Fromscene_GameEvent&>(::inner::_InnerTeamsvr_Fromscene_GameEvent_default_instance_);
}
inline const ::inner::InnerTeamsvr_Fromscene_GameEvent& InnerTeamsvr::fromscene_gameevent() const {
  // @@protoc_insertion_point(field_get:inner.InnerTeamsvr.fromscene_gameevent)
  return _internal_fromscene_gameevent();
}
inline ::inner::InnerTeamsvr_Fromscene_GameEvent* InnerTeamsvr::unsafe_arena_release_fromscene_gameevent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerTeamsvr.fromscene_gameevent)
  if (_internal_has_fromscene_gameevent()) {
    clear_has_Fromscene();
    ::inner::InnerTeamsvr_Fromscene_GameEvent* temp = Fromscene_.fromscene_gameevent_;
    Fromscene_.fromscene_gameevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerTeamsvr::unsafe_arena_set_allocated_fromscene_gameevent(::inner::InnerTeamsvr_Fromscene_GameEvent* fromscene_gameevent) {
  clear_Fromscene();
  if (fromscene_gameevent) {
    set_has_fromscene_gameevent();
    Fromscene_.fromscene_gameevent_ = fromscene_gameevent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerTeamsvr.fromscene_gameevent)
}
inline ::inner::InnerTeamsvr_Fromscene_GameEvent* InnerTeamsvr::_internal_mutable_fromscene_gameevent() {
  if (!_internal_has_fromscene_gameevent()) {
    clear_Fromscene();
    set_has_fromscene_gameevent();
    Fromscene_.fromscene_gameevent_ = CreateMaybeMessage< ::inner::InnerTeamsvr_Fromscene_GameEvent >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_gameevent_;
}
inline ::inner::InnerTeamsvr_Fromscene_GameEvent* InnerTeamsvr::mutable_fromscene_gameevent() {
  ::inner::InnerTeamsvr_Fromscene_GameEvent* _msg = _internal_mutable_fromscene_gameevent();
  // @@protoc_insertion_point(field_mutable:inner.InnerTeamsvr.fromscene_gameevent)
  return _msg;
}

// .inner.InnerTeamsvr_Fromscene_UpdateUserInfo fromscene_updateuserinfo = 1403;
inline bool InnerTeamsvr::_internal_has_fromscene_updateuserinfo() const {
  return Fromscene_case() == kFromsceneUpdateuserinfo;
}
inline bool InnerTeamsvr::has_fromscene_updateuserinfo() const {
  return _internal_has_fromscene_updateuserinfo();
}
inline void InnerTeamsvr::set_has_fromscene_updateuserinfo() {
  _oneof_case_[0] = kFromsceneUpdateuserinfo;
}
inline void InnerTeamsvr::clear_fromscene_updateuserinfo() {
  if (_internal_has_fromscene_updateuserinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_updateuserinfo_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerTeamsvr_Fromscene_UpdateUserInfo* InnerTeamsvr::release_fromscene_updateuserinfo() {
  // @@protoc_insertion_point(field_release:inner.InnerTeamsvr.fromscene_updateuserinfo)
  if (_internal_has_fromscene_updateuserinfo()) {
    clear_has_Fromscene();
    ::inner::InnerTeamsvr_Fromscene_UpdateUserInfo* temp = Fromscene_.fromscene_updateuserinfo_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_updateuserinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerTeamsvr_Fromscene_UpdateUserInfo& InnerTeamsvr::_internal_fromscene_updateuserinfo() const {
  return _internal_has_fromscene_updateuserinfo()
      ? *Fromscene_.fromscene_updateuserinfo_
      : reinterpret_cast< ::inner::InnerTeamsvr_Fromscene_UpdateUserInfo&>(::inner::_InnerTeamsvr_Fromscene_UpdateUserInfo_default_instance_);
}
inline const ::inner::InnerTeamsvr_Fromscene_UpdateUserInfo& InnerTeamsvr::fromscene_updateuserinfo() const {
  // @@protoc_insertion_point(field_get:inner.InnerTeamsvr.fromscene_updateuserinfo)
  return _internal_fromscene_updateuserinfo();
}
inline ::inner::InnerTeamsvr_Fromscene_UpdateUserInfo* InnerTeamsvr::unsafe_arena_release_fromscene_updateuserinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerTeamsvr.fromscene_updateuserinfo)
  if (_internal_has_fromscene_updateuserinfo()) {
    clear_has_Fromscene();
    ::inner::InnerTeamsvr_Fromscene_UpdateUserInfo* temp = Fromscene_.fromscene_updateuserinfo_;
    Fromscene_.fromscene_updateuserinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerTeamsvr::unsafe_arena_set_allocated_fromscene_updateuserinfo(::inner::InnerTeamsvr_Fromscene_UpdateUserInfo* fromscene_updateuserinfo) {
  clear_Fromscene();
  if (fromscene_updateuserinfo) {
    set_has_fromscene_updateuserinfo();
    Fromscene_.fromscene_updateuserinfo_ = fromscene_updateuserinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerTeamsvr.fromscene_updateuserinfo)
}
inline ::inner::InnerTeamsvr_Fromscene_UpdateUserInfo* InnerTeamsvr::_internal_mutable_fromscene_updateuserinfo() {
  if (!_internal_has_fromscene_updateuserinfo()) {
    clear_Fromscene();
    set_has_fromscene_updateuserinfo();
    Fromscene_.fromscene_updateuserinfo_ = CreateMaybeMessage< ::inner::InnerTeamsvr_Fromscene_UpdateUserInfo >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_updateuserinfo_;
}
inline ::inner::InnerTeamsvr_Fromscene_UpdateUserInfo* InnerTeamsvr::mutable_fromscene_updateuserinfo() {
  ::inner::InnerTeamsvr_Fromscene_UpdateUserInfo* _msg = _internal_mutable_fromscene_updateuserinfo();
  // @@protoc_insertion_point(field_mutable:inner.InnerTeamsvr.fromscene_updateuserinfo)
  return _msg;
}

inline bool InnerTeamsvr::has_Fromscene() const {
  return Fromscene_case() != FROMSCENE_NOT_SET;
}
inline void InnerTeamsvr::clear_has_Fromscene() {
  _oneof_case_[0] = FROMSCENE_NOT_SET;
}
inline InnerTeamsvr::FromsceneCase InnerTeamsvr::Fromscene_case() const {
  return InnerTeamsvr::FromsceneCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InnerTeamsvr_Fromscene_Test

// -------------------------------------------------------------------

// InnerTeamsvr_Fromscene_GameEvent

// .inner.InnerGameEvent gameEvent = 1;
inline bool InnerTeamsvr_Fromscene_GameEvent::_internal_has_gameevent() const {
  return this != internal_default_instance() && gameevent_ != nullptr;
}
inline bool InnerTeamsvr_Fromscene_GameEvent::has_gameevent() const {
  return _internal_has_gameevent();
}
inline const ::inner::InnerGameEvent& InnerTeamsvr_Fromscene_GameEvent::_internal_gameevent() const {
  const ::inner::InnerGameEvent* p = gameevent_;
  return p != nullptr ? *p : reinterpret_cast<const ::inner::InnerGameEvent&>(
      ::inner::_InnerGameEvent_default_instance_);
}
inline const ::inner::InnerGameEvent& InnerTeamsvr_Fromscene_GameEvent::gameevent() const {
  // @@protoc_insertion_point(field_get:inner.InnerTeamsvr_Fromscene_GameEvent.gameEvent)
  return _internal_gameevent();
}
inline void InnerTeamsvr_Fromscene_GameEvent::unsafe_arena_set_allocated_gameevent(
    ::inner::InnerGameEvent* gameevent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gameevent_);
  }
  gameevent_ = gameevent;
  if (gameevent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerTeamsvr_Fromscene_GameEvent.gameEvent)
}
inline ::inner::InnerGameEvent* InnerTeamsvr_Fromscene_GameEvent::release_gameevent() {
  
  ::inner::InnerGameEvent* temp = gameevent_;
  gameevent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::inner::InnerGameEvent* InnerTeamsvr_Fromscene_GameEvent::unsafe_arena_release_gameevent() {
  // @@protoc_insertion_point(field_release:inner.InnerTeamsvr_Fromscene_GameEvent.gameEvent)
  
  ::inner::InnerGameEvent* temp = gameevent_;
  gameevent_ = nullptr;
  return temp;
}
inline ::inner::InnerGameEvent* InnerTeamsvr_Fromscene_GameEvent::_internal_mutable_gameevent() {
  
  if (gameevent_ == nullptr) {
    auto* p = CreateMaybeMessage<::inner::InnerGameEvent>(GetArenaForAllocation());
    gameevent_ = p;
  }
  return gameevent_;
}
inline ::inner::InnerGameEvent* InnerTeamsvr_Fromscene_GameEvent::mutable_gameevent() {
  ::inner::InnerGameEvent* _msg = _internal_mutable_gameevent();
  // @@protoc_insertion_point(field_mutable:inner.InnerTeamsvr_Fromscene_GameEvent.gameEvent)
  return _msg;
}
inline void InnerTeamsvr_Fromscene_GameEvent::set_allocated_gameevent(::inner::InnerGameEvent* gameevent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gameevent_);
  }
  if (gameevent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gameevent));
    if (message_arena != submessage_arena) {
      gameevent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gameevent, submessage_arena);
    }
    
  } else {
    
  }
  gameevent_ = gameevent;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerTeamsvr_Fromscene_GameEvent.gameEvent)
}

// -------------------------------------------------------------------

// InnerTeamsvr_Fromscene_UpdateUserInfo

// .common.RoleExtend2 extd2 = 1;
inline bool InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_has_extd2() const {
  return type_case() == kExtd2;
}
inline bool InnerTeamsvr_Fromscene_UpdateUserInfo::has_extd2() const {
  return _internal_has_extd2();
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::set_has_extd2() {
  _oneof_case_[0] = kExtd2;
}
inline ::common::RoleExtend2* InnerTeamsvr_Fromscene_UpdateUserInfo::release_extd2() {
  // @@protoc_insertion_point(field_release:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.extd2)
  if (_internal_has_extd2()) {
    clear_has_type();
    ::common::RoleExtend2* temp = type_.extd2_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.extd2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::RoleExtend2& InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_extd2() const {
  return _internal_has_extd2()
      ? *type_.extd2_
      : reinterpret_cast< ::common::RoleExtend2&>(::common::_RoleExtend2_default_instance_);
}
inline const ::common::RoleExtend2& InnerTeamsvr_Fromscene_UpdateUserInfo::extd2() const {
  // @@protoc_insertion_point(field_get:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.extd2)
  return _internal_extd2();
}
inline ::common::RoleExtend2* InnerTeamsvr_Fromscene_UpdateUserInfo::unsafe_arena_release_extd2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.extd2)
  if (_internal_has_extd2()) {
    clear_has_type();
    ::common::RoleExtend2* temp = type_.extd2_;
    type_.extd2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::unsafe_arena_set_allocated_extd2(::common::RoleExtend2* extd2) {
  clear_type();
  if (extd2) {
    set_has_extd2();
    type_.extd2_ = extd2;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.extd2)
}
inline ::common::RoleExtend2* InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_mutable_extd2() {
  if (!_internal_has_extd2()) {
    clear_type();
    set_has_extd2();
    type_.extd2_ = CreateMaybeMessage< ::common::RoleExtend2 >(GetArenaForAllocation());
  }
  return type_.extd2_;
}
inline ::common::RoleExtend2* InnerTeamsvr_Fromscene_UpdateUserInfo::mutable_extd2() {
  ::common::RoleExtend2* _msg = _internal_mutable_extd2();
  // @@protoc_insertion_point(field_mutable:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.extd2)
  return _msg;
}

// .common.RoleExtend3 extd3 = 2;
inline bool InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_has_extd3() const {
  return type_case() == kExtd3;
}
inline bool InnerTeamsvr_Fromscene_UpdateUserInfo::has_extd3() const {
  return _internal_has_extd3();
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::set_has_extd3() {
  _oneof_case_[0] = kExtd3;
}
inline ::common::RoleExtend3* InnerTeamsvr_Fromscene_UpdateUserInfo::release_extd3() {
  // @@protoc_insertion_point(field_release:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.extd3)
  if (_internal_has_extd3()) {
    clear_has_type();
    ::common::RoleExtend3* temp = type_.extd3_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.extd3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::RoleExtend3& InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_extd3() const {
  return _internal_has_extd3()
      ? *type_.extd3_
      : reinterpret_cast< ::common::RoleExtend3&>(::common::_RoleExtend3_default_instance_);
}
inline const ::common::RoleExtend3& InnerTeamsvr_Fromscene_UpdateUserInfo::extd3() const {
  // @@protoc_insertion_point(field_get:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.extd3)
  return _internal_extd3();
}
inline ::common::RoleExtend3* InnerTeamsvr_Fromscene_UpdateUserInfo::unsafe_arena_release_extd3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.extd3)
  if (_internal_has_extd3()) {
    clear_has_type();
    ::common::RoleExtend3* temp = type_.extd3_;
    type_.extd3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::unsafe_arena_set_allocated_extd3(::common::RoleExtend3* extd3) {
  clear_type();
  if (extd3) {
    set_has_extd3();
    type_.extd3_ = extd3;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.extd3)
}
inline ::common::RoleExtend3* InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_mutable_extd3() {
  if (!_internal_has_extd3()) {
    clear_type();
    set_has_extd3();
    type_.extd3_ = CreateMaybeMessage< ::common::RoleExtend3 >(GetArenaForAllocation());
  }
  return type_.extd3_;
}
inline ::common::RoleExtend3* InnerTeamsvr_Fromscene_UpdateUserInfo::mutable_extd3() {
  ::common::RoleExtend3* _msg = _internal_mutable_extd3();
  // @@protoc_insertion_point(field_mutable:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.extd3)
  return _msg;
}

// string nickName = 3;
inline bool InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_has_nickname() const {
  return type_case() == kNickName;
}
inline bool InnerTeamsvr_Fromscene_UpdateUserInfo::has_nickname() const {
  return _internal_has_nickname();
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::set_has_nickname() {
  _oneof_case_[0] = kNickName;
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::clear_nickname() {
  if (_internal_has_nickname()) {
    type_.nickname_.Destroy();
    clear_has_type();
  }
}
inline const std::string& InnerTeamsvr_Fromscene_UpdateUserInfo::nickname() const {
  // @@protoc_insertion_point(field_get:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.nickName)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::set_nickname(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_nickname()) {
    clear_type();
    set_has_nickname();
    type_.nickname_.InitDefault();
  }
  type_.nickname_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.nickName)
}
inline std::string* InnerTeamsvr_Fromscene_UpdateUserInfo::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.nickName)
  return _s;
}
inline const std::string& InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_nickname() const {
  if (_internal_has_nickname()) {
    return type_.nickname_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_set_nickname(const std::string& value) {
  if (!_internal_has_nickname()) {
    clear_type();
    set_has_nickname();
    type_.nickname_.InitDefault();
  }
  type_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_mutable_nickname() {
  if (!_internal_has_nickname()) {
    clear_type();
    set_has_nickname();
    type_.nickname_.InitDefault();
  }
  return type_.nickname_.Mutable(      GetArenaForAllocation());
}
inline std::string* InnerTeamsvr_Fromscene_UpdateUserInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.nickName)
  if (_internal_has_nickname()) {
    clear_has_type();
    return type_.nickname_.Release();
  } else {
    return nullptr;
  }
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::set_allocated_nickname(std::string* nickname) {
  if (has_type()) {
    clear_type();
  }
  if (nickname != nullptr) {
    set_has_nickname();
    type_.nickname_.InitAllocated(nickname, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.nickName)
}

// uint32 headIcon = 4;
inline bool InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_has_headicon() const {
  return type_case() == kHeadIcon;
}
inline bool InnerTeamsvr_Fromscene_UpdateUserInfo::has_headicon() const {
  return _internal_has_headicon();
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::set_has_headicon() {
  _oneof_case_[0] = kHeadIcon;
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::clear_headicon() {
  if (_internal_has_headicon()) {
    type_.headicon_ = 0u;
    clear_has_type();
  }
}
inline uint32_t InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_headicon() const {
  if (_internal_has_headicon()) {
    return type_.headicon_;
  }
  return 0u;
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_set_headicon(uint32_t value) {
  if (!_internal_has_headicon()) {
    clear_type();
    set_has_headicon();
  }
  type_.headicon_ = value;
}
inline uint32_t InnerTeamsvr_Fromscene_UpdateUserInfo::headicon() const {
  // @@protoc_insertion_point(field_get:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.headIcon)
  return _internal_headicon();
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::set_headicon(uint32_t value) {
  _internal_set_headicon(value);
  // @@protoc_insertion_point(field_set:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.headIcon)
}

// uint32 headFrame = 5;
inline bool InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_has_headframe() const {
  return type_case() == kHeadFrame;
}
inline bool InnerTeamsvr_Fromscene_UpdateUserInfo::has_headframe() const {
  return _internal_has_headframe();
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::set_has_headframe() {
  _oneof_case_[0] = kHeadFrame;
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::clear_headframe() {
  if (_internal_has_headframe()) {
    type_.headframe_ = 0u;
    clear_has_type();
  }
}
inline uint32_t InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_headframe() const {
  if (_internal_has_headframe()) {
    return type_.headframe_;
  }
  return 0u;
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_set_headframe(uint32_t value) {
  if (!_internal_has_headframe()) {
    clear_type();
    set_has_headframe();
  }
  type_.headframe_ = value;
}
inline uint32_t InnerTeamsvr_Fromscene_UpdateUserInfo::headframe() const {
  // @@protoc_insertion_point(field_get:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.headFrame)
  return _internal_headframe();
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::set_headframe(uint32_t value) {
  _internal_set_headframe(value);
  // @@protoc_insertion_point(field_set:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.headFrame)
}

// uint32 careerId = 6;
inline bool InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_has_careerid() const {
  return type_case() == kCareerId;
}
inline bool InnerTeamsvr_Fromscene_UpdateUserInfo::has_careerid() const {
  return _internal_has_careerid();
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::set_has_careerid() {
  _oneof_case_[0] = kCareerId;
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::clear_careerid() {
  if (_internal_has_careerid()) {
    type_.careerid_ = 0u;
    clear_has_type();
  }
}
inline uint32_t InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_careerid() const {
  if (_internal_has_careerid()) {
    return type_.careerid_;
  }
  return 0u;
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_set_careerid(uint32_t value) {
  if (!_internal_has_careerid()) {
    clear_type();
    set_has_careerid();
  }
  type_.careerid_ = value;
}
inline uint32_t InnerTeamsvr_Fromscene_UpdateUserInfo::careerid() const {
  // @@protoc_insertion_point(field_get:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.careerId)
  return _internal_careerid();
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::set_careerid(uint32_t value) {
  _internal_set_careerid(value);
  // @@protoc_insertion_point(field_set:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.careerId)
}

// uint32 level = 7;
inline bool InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_has_level() const {
  return type_case() == kLevel;
}
inline bool InnerTeamsvr_Fromscene_UpdateUserInfo::has_level() const {
  return _internal_has_level();
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::set_has_level() {
  _oneof_case_[0] = kLevel;
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::clear_level() {
  if (_internal_has_level()) {
    type_.level_ = 0u;
    clear_has_type();
  }
}
inline uint32_t InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_level() const {
  if (_internal_has_level()) {
    return type_.level_;
  }
  return 0u;
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_set_level(uint32_t value) {
  if (!_internal_has_level()) {
    clear_type();
    set_has_level();
  }
  type_.level_ = value;
}
inline uint32_t InnerTeamsvr_Fromscene_UpdateUserInfo::level() const {
  // @@protoc_insertion_point(field_get:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.level)
  return _internal_level();
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.level)
}

// uint32 sex = 8;
inline bool InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_has_sex() const {
  return type_case() == kSex;
}
inline bool InnerTeamsvr_Fromscene_UpdateUserInfo::has_sex() const {
  return _internal_has_sex();
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::set_has_sex() {
  _oneof_case_[0] = kSex;
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::clear_sex() {
  if (_internal_has_sex()) {
    type_.sex_ = 0u;
    clear_has_type();
  }
}
inline uint32_t InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_sex() const {
  if (_internal_has_sex()) {
    return type_.sex_;
  }
  return 0u;
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_set_sex(uint32_t value) {
  if (!_internal_has_sex()) {
    clear_type();
    set_has_sex();
  }
  type_.sex_ = value;
}
inline uint32_t InnerTeamsvr_Fromscene_UpdateUserInfo::sex() const {
  // @@protoc_insertion_point(field_get:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.sex)
  return _internal_sex();
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::set_sex(uint32_t value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.sex)
}

// uint32 careeLevel = 9;
inline bool InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_has_careelevel() const {
  return type_case() == kCareeLevel;
}
inline bool InnerTeamsvr_Fromscene_UpdateUserInfo::has_careelevel() const {
  return _internal_has_careelevel();
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::set_has_careelevel() {
  _oneof_case_[0] = kCareeLevel;
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::clear_careelevel() {
  if (_internal_has_careelevel()) {
    type_.careelevel_ = 0u;
    clear_has_type();
  }
}
inline uint32_t InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_careelevel() const {
  if (_internal_has_careelevel()) {
    return type_.careelevel_;
  }
  return 0u;
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_set_careelevel(uint32_t value) {
  if (!_internal_has_careelevel()) {
    clear_type();
    set_has_careelevel();
  }
  type_.careelevel_ = value;
}
inline uint32_t InnerTeamsvr_Fromscene_UpdateUserInfo::careelevel() const {
  // @@protoc_insertion_point(field_get:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.careeLevel)
  return _internal_careelevel();
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::set_careelevel(uint32_t value) {
  _internal_set_careelevel(value);
  // @@protoc_insertion_point(field_set:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.careeLevel)
}

// .common.ExtendFight3v3 f33 = 10;
inline bool InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_has_f33() const {
  return type_case() == kF33;
}
inline bool InnerTeamsvr_Fromscene_UpdateUserInfo::has_f33() const {
  return _internal_has_f33();
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::set_has_f33() {
  _oneof_case_[0] = kF33;
}
inline ::common::ExtendFight3v3* InnerTeamsvr_Fromscene_UpdateUserInfo::release_f33() {
  // @@protoc_insertion_point(field_release:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.f33)
  if (_internal_has_f33()) {
    clear_has_type();
    ::common::ExtendFight3v3* temp = type_.f33_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.f33_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::ExtendFight3v3& InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_f33() const {
  return _internal_has_f33()
      ? *type_.f33_
      : reinterpret_cast< ::common::ExtendFight3v3&>(::common::_ExtendFight3v3_default_instance_);
}
inline const ::common::ExtendFight3v3& InnerTeamsvr_Fromscene_UpdateUserInfo::f33() const {
  // @@protoc_insertion_point(field_get:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.f33)
  return _internal_f33();
}
inline ::common::ExtendFight3v3* InnerTeamsvr_Fromscene_UpdateUserInfo::unsafe_arena_release_f33() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.f33)
  if (_internal_has_f33()) {
    clear_has_type();
    ::common::ExtendFight3v3* temp = type_.f33_;
    type_.f33_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::unsafe_arena_set_allocated_f33(::common::ExtendFight3v3* f33) {
  clear_type();
  if (f33) {
    set_has_f33();
    type_.f33_ = f33;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.f33)
}
inline ::common::ExtendFight3v3* InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_mutable_f33() {
  if (!_internal_has_f33()) {
    clear_type();
    set_has_f33();
    type_.f33_ = CreateMaybeMessage< ::common::ExtendFight3v3 >(GetArenaForAllocation());
  }
  return type_.f33_;
}
inline ::common::ExtendFight3v3* InnerTeamsvr_Fromscene_UpdateUserInfo::mutable_f33() {
  ::common::ExtendFight3v3* _msg = _internal_mutable_f33();
  // @@protoc_insertion_point(field_mutable:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.f33)
  return _msg;
}

// .common.ExtendFight5v5 f55 = 11;
inline bool InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_has_f55() const {
  return type_case() == kF55;
}
inline bool InnerTeamsvr_Fromscene_UpdateUserInfo::has_f55() const {
  return _internal_has_f55();
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::set_has_f55() {
  _oneof_case_[0] = kF55;
}
inline ::common::ExtendFight5v5* InnerTeamsvr_Fromscene_UpdateUserInfo::release_f55() {
  // @@protoc_insertion_point(field_release:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.f55)
  if (_internal_has_f55()) {
    clear_has_type();
    ::common::ExtendFight5v5* temp = type_.f55_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.f55_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::ExtendFight5v5& InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_f55() const {
  return _internal_has_f55()
      ? *type_.f55_
      : reinterpret_cast< ::common::ExtendFight5v5&>(::common::_ExtendFight5v5_default_instance_);
}
inline const ::common::ExtendFight5v5& InnerTeamsvr_Fromscene_UpdateUserInfo::f55() const {
  // @@protoc_insertion_point(field_get:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.f55)
  return _internal_f55();
}
inline ::common::ExtendFight5v5* InnerTeamsvr_Fromscene_UpdateUserInfo::unsafe_arena_release_f55() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.f55)
  if (_internal_has_f55()) {
    clear_has_type();
    ::common::ExtendFight5v5* temp = type_.f55_;
    type_.f55_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::unsafe_arena_set_allocated_f55(::common::ExtendFight5v5* f55) {
  clear_type();
  if (f55) {
    set_has_f55();
    type_.f55_ = f55;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.f55)
}
inline ::common::ExtendFight5v5* InnerTeamsvr_Fromscene_UpdateUserInfo::_internal_mutable_f55() {
  if (!_internal_has_f55()) {
    clear_type();
    set_has_f55();
    type_.f55_ = CreateMaybeMessage< ::common::ExtendFight5v5 >(GetArenaForAllocation());
  }
  return type_.f55_;
}
inline ::common::ExtendFight5v5* InnerTeamsvr_Fromscene_UpdateUserInfo::mutable_f55() {
  ::common::ExtendFight5v5* _msg = _internal_mutable_f55();
  // @@protoc_insertion_point(field_mutable:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.f55)
  return _msg;
}

inline bool InnerTeamsvr_Fromscene_UpdateUserInfo::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void InnerTeamsvr_Fromscene_UpdateUserInfo::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline InnerTeamsvr_Fromscene_UpdateUserInfo::TypeCase InnerTeamsvr_Fromscene_UpdateUserInfo::type_case() const {
  return InnerTeamsvr_Fromscene_UpdateUserInfo::TypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace inner

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_teamsvr_2eproto
