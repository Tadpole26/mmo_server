// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenecommon.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scenecommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scenecommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scenecommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scenecommon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenecommon_2eproto;
namespace common {
class MapMark;
struct MapMarkDefaultTypeInternal;
extern MapMarkDefaultTypeInternal _MapMark_default_instance_;
class ModuleDataByte;
struct ModuleDataByteDefaultTypeInternal;
extern ModuleDataByteDefaultTypeInternal _ModuleDataByte_default_instance_;
class ModuleScene;
struct ModuleSceneDefaultTypeInternal;
extern ModuleSceneDefaultTypeInternal _ModuleScene_default_instance_;
class ModuleSceneView;
struct ModuleSceneViewDefaultTypeInternal;
extern ModuleSceneViewDefaultTypeInternal _ModuleSceneView_default_instance_;
class OccupyViewData;
struct OccupyViewDataDefaultTypeInternal;
extern OccupyViewDataDefaultTypeInternal _OccupyViewData_default_instance_;
class OccupyViewData_OccupyProgress;
struct OccupyViewData_OccupyProgressDefaultTypeInternal;
extern OccupyViewData_OccupyProgressDefaultTypeInternal _OccupyViewData_OccupyProgress_default_instance_;
class RebirthInfo;
struct RebirthInfoDefaultTypeInternal;
extern RebirthInfoDefaultTypeInternal _RebirthInfo_default_instance_;
class StaticViewList;
struct StaticViewListDefaultTypeInternal;
extern StaticViewListDefaultTypeInternal _StaticViewList_default_instance_;
class ViewEffect;
struct ViewEffectDefaultTypeInternal;
extern ViewEffectDefaultTypeInternal _ViewEffect_default_instance_;
class ViewEffectList;
struct ViewEffectListDefaultTypeInternal;
extern ViewEffectListDefaultTypeInternal _ViewEffectList_default_instance_;
class ViewHitProgress;
struct ViewHitProgressDefaultTypeInternal;
extern ViewHitProgressDefaultTypeInternal _ViewHitProgress_default_instance_;
class ViewObject;
struct ViewObjectDefaultTypeInternal;
extern ViewObjectDefaultTypeInternal _ViewObject_default_instance_;
class ViewObjectIdList;
struct ViewObjectIdListDefaultTypeInternal;
extern ViewObjectIdListDefaultTypeInternal _ViewObjectIdList_default_instance_;
class ViewObjectList;
struct ViewObjectListDefaultTypeInternal;
extern ViewObjectListDefaultTypeInternal _ViewObjectList_default_instance_;
class ViewObjectNpc;
struct ViewObjectNpcDefaultTypeInternal;
extern ViewObjectNpcDefaultTypeInternal _ViewObjectNpc_default_instance_;
class ViewObjectNpcBlock;
struct ViewObjectNpcBlockDefaultTypeInternal;
extern ViewObjectNpcBlockDefaultTypeInternal _ViewObjectNpcBlock_default_instance_;
class ViewObjectNpcCollection;
struct ViewObjectNpcCollectionDefaultTypeInternal;
extern ViewObjectNpcCollectionDefaultTypeInternal _ViewObjectNpcCollection_default_instance_;
class ViewObjectNpcFunc;
struct ViewObjectNpcFuncDefaultTypeInternal;
extern ViewObjectNpcFuncDefaultTypeInternal _ViewObjectNpcFunc_default_instance_;
class ViewObjectNpcMonster;
struct ViewObjectNpcMonsterDefaultTypeInternal;
extern ViewObjectNpcMonsterDefaultTypeInternal _ViewObjectNpcMonster_default_instance_;
class ViewObjectNpcRegional;
struct ViewObjectNpcRegionalDefaultTypeInternal;
extern ViewObjectNpcRegionalDefaultTypeInternal _ViewObjectNpcRegional_default_instance_;
class ViewObjectNpcSkill;
struct ViewObjectNpcSkillDefaultTypeInternal;
extern ViewObjectNpcSkillDefaultTypeInternal _ViewObjectNpcSkill_default_instance_;
class ViewObjectNpcTrigger;
struct ViewObjectNpcTriggerDefaultTypeInternal;
extern ViewObjectNpcTriggerDefaultTypeInternal _ViewObjectNpcTrigger_default_instance_;
class ViewObjectRole;
struct ViewObjectRoleDefaultTypeInternal;
extern ViewObjectRoleDefaultTypeInternal _ViewObjectRole_default_instance_;
class ViewObjectState;
struct ViewObjectStateDefaultTypeInternal;
extern ViewObjectStateDefaultTypeInternal _ViewObjectState_default_instance_;
class ViewSpeed;
struct ViewSpeedDefaultTypeInternal;
extern ViewSpeedDefaultTypeInternal _ViewSpeed_default_instance_;
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> ::common::MapMark* Arena::CreateMaybeMessage<::common::MapMark>(Arena*);
template<> ::common::ModuleDataByte* Arena::CreateMaybeMessage<::common::ModuleDataByte>(Arena*);
template<> ::common::ModuleScene* Arena::CreateMaybeMessage<::common::ModuleScene>(Arena*);
template<> ::common::ModuleSceneView* Arena::CreateMaybeMessage<::common::ModuleSceneView>(Arena*);
template<> ::common::OccupyViewData* Arena::CreateMaybeMessage<::common::OccupyViewData>(Arena*);
template<> ::common::OccupyViewData_OccupyProgress* Arena::CreateMaybeMessage<::common::OccupyViewData_OccupyProgress>(Arena*);
template<> ::common::RebirthInfo* Arena::CreateMaybeMessage<::common::RebirthInfo>(Arena*);
template<> ::common::StaticViewList* Arena::CreateMaybeMessage<::common::StaticViewList>(Arena*);
template<> ::common::ViewEffect* Arena::CreateMaybeMessage<::common::ViewEffect>(Arena*);
template<> ::common::ViewEffectList* Arena::CreateMaybeMessage<::common::ViewEffectList>(Arena*);
template<> ::common::ViewHitProgress* Arena::CreateMaybeMessage<::common::ViewHitProgress>(Arena*);
template<> ::common::ViewObject* Arena::CreateMaybeMessage<::common::ViewObject>(Arena*);
template<> ::common::ViewObjectIdList* Arena::CreateMaybeMessage<::common::ViewObjectIdList>(Arena*);
template<> ::common::ViewObjectList* Arena::CreateMaybeMessage<::common::ViewObjectList>(Arena*);
template<> ::common::ViewObjectNpc* Arena::CreateMaybeMessage<::common::ViewObjectNpc>(Arena*);
template<> ::common::ViewObjectNpcBlock* Arena::CreateMaybeMessage<::common::ViewObjectNpcBlock>(Arena*);
template<> ::common::ViewObjectNpcCollection* Arena::CreateMaybeMessage<::common::ViewObjectNpcCollection>(Arena*);
template<> ::common::ViewObjectNpcFunc* Arena::CreateMaybeMessage<::common::ViewObjectNpcFunc>(Arena*);
template<> ::common::ViewObjectNpcMonster* Arena::CreateMaybeMessage<::common::ViewObjectNpcMonster>(Arena*);
template<> ::common::ViewObjectNpcRegional* Arena::CreateMaybeMessage<::common::ViewObjectNpcRegional>(Arena*);
template<> ::common::ViewObjectNpcSkill* Arena::CreateMaybeMessage<::common::ViewObjectNpcSkill>(Arena*);
template<> ::common::ViewObjectNpcTrigger* Arena::CreateMaybeMessage<::common::ViewObjectNpcTrigger>(Arena*);
template<> ::common::ViewObjectRole* Arena::CreateMaybeMessage<::common::ViewObjectRole>(Arena*);
template<> ::common::ViewObjectState* Arena::CreateMaybeMessage<::common::ViewObjectState>(Arena*);
template<> ::common::ViewSpeed* Arena::CreateMaybeMessage<::common::ViewSpeed>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace common {

enum enViewType : int {
  enViewType_Role = 0,
  enViewType_Npc = 1,
  enViewType_Max = 2,
  enViewType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  enViewType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool enViewType_IsValid(int value);
constexpr enViewType enViewType_MIN = enViewType_Role;
constexpr enViewType enViewType_MAX = enViewType_Max;
constexpr int enViewType_ARRAYSIZE = enViewType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enViewType_descriptor();
template<typename T>
inline const std::string& enViewType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, enViewType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function enViewType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    enViewType_descriptor(), enum_t_value);
}
inline bool enViewType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, enViewType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<enViewType>(
    enViewType_descriptor(), name, value);
}
enum enNpcViewType : int {
  enNpcViewType_None = 0,
  enNpcViewType_Func = 1,
  enNpcViewType_Monster = 2,
  enNpcViewType_Collection = 3,
  enNpcViewType_Skill = 4,
  enNpcViewType_Pet = 5,
  enNpcViewType_Trigger = 6,
  enNpcViewType_Block = 7,
  enNpcViewType_Regional = 8,
  enNpcViewType_Max = 9,
  enNpcViewType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  enNpcViewType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool enNpcViewType_IsValid(int value);
constexpr enNpcViewType enNpcViewType_MIN = enNpcViewType_None;
constexpr enNpcViewType enNpcViewType_MAX = enNpcViewType_Max;
constexpr int enNpcViewType_ARRAYSIZE = enNpcViewType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enNpcViewType_descriptor();
template<typename T>
inline const std::string& enNpcViewType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, enNpcViewType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function enNpcViewType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    enNpcViewType_descriptor(), enum_t_value);
}
inline bool enNpcViewType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, enNpcViewType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<enNpcViewType>(
    enNpcViewType_descriptor(), name, value);
}
enum enViewObjectState : int {
  enViewObjectState_None = 0,
  enViewObjectState_Born = 1,
  enViewObjectState_Normal = 2,
  enViewObjectState_Death_Leave = 3,
  enViewObjectState_Death_Fall = 4,
  enViewObjectState_Death_Normal = 5,
  enViewObjectState_Hidden = 6,
  enViewObjectState_Max = 7,
  enViewObjectState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  enViewObjectState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool enViewObjectState_IsValid(int value);
constexpr enViewObjectState enViewObjectState_MIN = enViewObjectState_None;
constexpr enViewObjectState enViewObjectState_MAX = enViewObjectState_Max;
constexpr int enViewObjectState_ARRAYSIZE = enViewObjectState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enViewObjectState_descriptor();
template<typename T>
inline const std::string& enViewObjectState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, enViewObjectState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function enViewObjectState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    enViewObjectState_descriptor(), enum_t_value);
}
inline bool enViewObjectState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, enViewObjectState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<enViewObjectState>(
    enViewObjectState_descriptor(), name, value);
}
enum enViewFieldType : int {
  ViewFieldType_None = 0,
  enViewFieldType_NickName = 1,
  enViewFieldType_Level = 2,
  enViewFieldType_CareerId = 3,
  enViewFieldType_TeamId = 4,
  enViewFieldType_FamilyId = 5,
  enViewFieldType_FamilyName = 6,
  enViewFieldType_LeaderSceneId = 7,
  enViewFieldType_Hp = 8,
  enViewFieldType_MaxHp = 9,
  enViewFieldType_SelectId = 10,
  enViewFieldType_RoleFunc = 11,
  enViewFieldType_State = 12,
  enViewFieldType_Speed = 13,
  enViewFieldType_MPartList = 14,
  enViewFieldType_Mp = 15,
  enViewFieldType_MaxMp = 16,
  enViewFieldType_Shield = 17,
  enViewFieldType_NpcSpeak = 18,
  enViewFieldType_ProgressBar = 19,
  enViewFieldType_FightStatus = 20,
  enViewFieldType_CountDown = 21,
  enViewFieldType_HeadIcon = 22,
  enViewFieldType_HeadFrame = 23,
  enViewFieldType_ViewObject = 24,
  enViewFieldType_CollectStatus = 25,
  enViewFieldType_Max = 26,
  enViewFieldType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  enViewFieldType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool enViewFieldType_IsValid(int value);
constexpr enViewFieldType enViewFieldType_MIN = ViewFieldType_None;
constexpr enViewFieldType enViewFieldType_MAX = enViewFieldType_Max;
constexpr int enViewFieldType_ARRAYSIZE = enViewFieldType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enViewFieldType_descriptor();
template<typename T>
inline const std::string& enViewFieldType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, enViewFieldType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function enViewFieldType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    enViewFieldType_descriptor(), enum_t_value);
}
inline bool enViewFieldType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, enViewFieldType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<enViewFieldType>(
    enViewFieldType_descriptor(), name, value);
}
enum enPerformanceType : int {
  enPerformanceType_None = 0,
  enPerformanceType_Chat = 1,
  enPerformanceType_CutScene = 2,
  enPerformanceType_Chapter = 3,
  enPerformanceType_Caption = 4,
  enPerformanceType_Dialog = 5,
  enPerformanceType_Warning = 6,
  enPerformanceType_Max = 7,
  enPerformanceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  enPerformanceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool enPerformanceType_IsValid(int value);
constexpr enPerformanceType enPerformanceType_MIN = enPerformanceType_None;
constexpr enPerformanceType enPerformanceType_MAX = enPerformanceType_Max;
constexpr int enPerformanceType_ARRAYSIZE = enPerformanceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enPerformanceType_descriptor();
template<typename T>
inline const std::string& enPerformanceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, enPerformanceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function enPerformanceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    enPerformanceType_descriptor(), enum_t_value);
}
inline bool enPerformanceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, enPerformanceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<enPerformanceType>(
    enPerformanceType_descriptor(), name, value);
}
// ===================================================================

class ModuleDataByte final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ModuleDataByte) */ {
 public:
  inline ModuleDataByte() : ModuleDataByte(nullptr) {}
  ~ModuleDataByte() override;
  explicit PROTOBUF_CONSTEXPR ModuleDataByte(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleDataByte(const ModuleDataByte& from);
  ModuleDataByte(ModuleDataByte&& from) noexcept
    : ModuleDataByte() {
    *this = ::std::move(from);
  }

  inline ModuleDataByte& operator=(const ModuleDataByte& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleDataByte& operator=(ModuleDataByte&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleDataByte& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleDataByte* internal_default_instance() {
    return reinterpret_cast<const ModuleDataByte*>(
               &_ModuleDataByte_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ModuleDataByte& a, ModuleDataByte& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleDataByte* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleDataByte* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleDataByte* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleDataByte>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleDataByte& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleDataByte& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleDataByte* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ModuleDataByte";
  }
  protected:
  explicit ModuleDataByte(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kTypeFieldNumber = 1,
    kTotalFieldNumber = 2,
  };
  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 total = 2;
  void clear_total();
  uint32_t total() const;
  void set_total(uint32_t value);
  private:
  uint32_t _internal_total() const;
  void _internal_set_total(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ModuleDataByte)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  uint32_t type_;
  uint32_t total_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenecommon_2eproto;
};
// -------------------------------------------------------------------

class ModuleScene final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ModuleScene) */ {
 public:
  inline ModuleScene() : ModuleScene(nullptr) {}
  ~ModuleScene() override;
  explicit PROTOBUF_CONSTEXPR ModuleScene(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleScene(const ModuleScene& from);
  ModuleScene(ModuleScene&& from) noexcept
    : ModuleScene() {
    *this = ::std::move(from);
  }

  inline ModuleScene& operator=(const ModuleScene& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleScene& operator=(ModuleScene&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleScene& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleScene* internal_default_instance() {
    return reinterpret_cast<const ModuleScene*>(
               &_ModuleScene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ModuleScene& a, ModuleScene& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleScene* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleScene* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleScene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleScene>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleScene& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleScene& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleScene* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ModuleScene";
  }
  protected:
  explicit ModuleScene(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRebirthFieldNumber = 1,
  };
  // .common.RebirthInfo rebirth = 1;
  bool has_rebirth() const;
  private:
  bool _internal_has_rebirth() const;
  public:
  void clear_rebirth();
  const ::common::RebirthInfo& rebirth() const;
  PROTOBUF_NODISCARD ::common::RebirthInfo* release_rebirth();
  ::common::RebirthInfo* mutable_rebirth();
  void set_allocated_rebirth(::common::RebirthInfo* rebirth);
  private:
  const ::common::RebirthInfo& _internal_rebirth() const;
  ::common::RebirthInfo* _internal_mutable_rebirth();
  public:
  void unsafe_arena_set_allocated_rebirth(
      ::common::RebirthInfo* rebirth);
  ::common::RebirthInfo* unsafe_arena_release_rebirth();

  // @@protoc_insertion_point(class_scope:common.ModuleScene)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::RebirthInfo* rebirth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenecommon_2eproto;
};
// -------------------------------------------------------------------

class ModuleSceneView final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ModuleSceneView) */ {
 public:
  inline ModuleSceneView() : ModuleSceneView(nullptr) {}
  ~ModuleSceneView() override;
  explicit PROTOBUF_CONSTEXPR ModuleSceneView(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleSceneView(const ModuleSceneView& from);
  ModuleSceneView(ModuleSceneView&& from) noexcept
    : ModuleSceneView() {
    *this = ::std::move(from);
  }

  inline ModuleSceneView& operator=(const ModuleSceneView& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleSceneView& operator=(ModuleSceneView&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleSceneView& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleSceneView* internal_default_instance() {
    return reinterpret_cast<const ModuleSceneView*>(
               &_ModuleSceneView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ModuleSceneView& a, ModuleSceneView& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleSceneView* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleSceneView* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleSceneView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleSceneView>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleSceneView& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleSceneView& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleSceneView* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ModuleSceneView";
  }
  protected:
  explicit ModuleSceneView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kPosttoFieldNumber = 3,
    kBarFieldNumber = 5,
    kEffectListFieldNumber = 6,
    kSelectIdFieldNumber = 4,
    kSpeedFieldNumber = 2,
  };
  // .common.ViewObjectState state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::common::ViewObjectState& state() const;
  PROTOBUF_NODISCARD ::common::ViewObjectState* release_state();
  ::common::ViewObjectState* mutable_state();
  void set_allocated_state(::common::ViewObjectState* state);
  private:
  const ::common::ViewObjectState& _internal_state() const;
  ::common::ViewObjectState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::common::ViewObjectState* state);
  ::common::ViewObjectState* unsafe_arena_release_state();

  // .common.ClientPosTogether postto = 3;
  bool has_postto() const;
  private:
  bool _internal_has_postto() const;
  public:
  void clear_postto();
  const ::common::ClientPosTogether& postto() const;
  PROTOBUF_NODISCARD ::common::ClientPosTogether* release_postto();
  ::common::ClientPosTogether* mutable_postto();
  void set_allocated_postto(::common::ClientPosTogether* postto);
  private:
  const ::common::ClientPosTogether& _internal_postto() const;
  ::common::ClientPosTogether* _internal_mutable_postto();
  public:
  void unsafe_arena_set_allocated_postto(
      ::common::ClientPosTogether* postto);
  ::common::ClientPosTogether* unsafe_arena_release_postto();

  // .common.ProgressBar bar = 5;
  bool has_bar() const;
  private:
  bool _internal_has_bar() const;
  public:
  void clear_bar();
  const ::common::ProgressBar& bar() const;
  PROTOBUF_NODISCARD ::common::ProgressBar* release_bar();
  ::common::ProgressBar* mutable_bar();
  void set_allocated_bar(::common::ProgressBar* bar);
  private:
  const ::common::ProgressBar& _internal_bar() const;
  ::common::ProgressBar* _internal_mutable_bar();
  public:
  void unsafe_arena_set_allocated_bar(
      ::common::ProgressBar* bar);
  ::common::ProgressBar* unsafe_arena_release_bar();

  // .common.ViewEffectList effectList = 6;
  bool has_effectlist() const;
  private:
  bool _internal_has_effectlist() const;
  public:
  void clear_effectlist();
  const ::common::ViewEffectList& effectlist() const;
  PROTOBUF_NODISCARD ::common::ViewEffectList* release_effectlist();
  ::common::ViewEffectList* mutable_effectlist();
  void set_allocated_effectlist(::common::ViewEffectList* effectlist);
  private:
  const ::common::ViewEffectList& _internal_effectlist() const;
  ::common::ViewEffectList* _internal_mutable_effectlist();
  public:
  void unsafe_arena_set_allocated_effectlist(
      ::common::ViewEffectList* effectlist);
  ::common::ViewEffectList* unsafe_arena_release_effectlist();

  // uint64 selectId = 4;
  void clear_selectid();
  uint64_t selectid() const;
  void set_selectid(uint64_t value);
  private:
  uint64_t _internal_selectid() const;
  void _internal_set_selectid(uint64_t value);
  public:

  // uint32 speed = 2;
  void clear_speed();
  uint32_t speed() const;
  void set_speed(uint32_t value);
  private:
  uint32_t _internal_speed() const;
  void _internal_set_speed(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ModuleSceneView)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::ViewObjectState* state_;
  ::common::ClientPosTogether* postto_;
  ::common::ProgressBar* bar_;
  ::common::ViewEffectList* effectlist_;
  uint64_t selectid_;
  uint32_t speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenecommon_2eproto;
};
// -------------------------------------------------------------------

class ViewObjectState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ViewObjectState) */ {
 public:
  inline ViewObjectState() : ViewObjectState(nullptr) {}
  ~ViewObjectState() override;
  explicit PROTOBUF_CONSTEXPR ViewObjectState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewObjectState(const ViewObjectState& from);
  ViewObjectState(ViewObjectState&& from) noexcept
    : ViewObjectState() {
    *this = ::std::move(from);
  }

  inline ViewObjectState& operator=(const ViewObjectState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewObjectState& operator=(ViewObjectState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewObjectState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewObjectState* internal_default_instance() {
    return reinterpret_cast<const ViewObjectState*>(
               &_ViewObjectState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ViewObjectState& a, ViewObjectState& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewObjectState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewObjectState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewObjectState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewObjectState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewObjectState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ViewObjectState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewObjectState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ViewObjectState";
  }
  protected:
  explicit ViewObjectState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateTimeBeginFieldNumber = 2,
    kStateFieldNumber = 1,
  };
  // uint64 stateTimeBegin = 2;
  void clear_statetimebegin();
  uint64_t statetimebegin() const;
  void set_statetimebegin(uint64_t value);
  private:
  uint64_t _internal_statetimebegin() const;
  void _internal_set_statetimebegin(uint64_t value);
  public:

  // uint32 state = 1;
  void clear_state();
  uint32_t state() const;
  void set_state(uint32_t value);
  private:
  uint32_t _internal_state() const;
  void _internal_set_state(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ViewObjectState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t statetimebegin_;
  uint32_t state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenecommon_2eproto;
};
// -------------------------------------------------------------------

class StaticViewList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.StaticViewList) */ {
 public:
  inline StaticViewList() : StaticViewList(nullptr) {}
  ~StaticViewList() override;
  explicit PROTOBUF_CONSTEXPR StaticViewList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StaticViewList(const StaticViewList& from);
  StaticViewList(StaticViewList&& from) noexcept
    : StaticViewList() {
    *this = ::std::move(from);
  }

  inline StaticViewList& operator=(const StaticViewList& from) {
    CopyFrom(from);
    return *this;
  }
  inline StaticViewList& operator=(StaticViewList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StaticViewList& default_instance() {
    return *internal_default_instance();
  }
  static inline const StaticViewList* internal_default_instance() {
    return reinterpret_cast<const StaticViewList*>(
               &_StaticViewList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StaticViewList& a, StaticViewList& b) {
    a.Swap(&b);
  }
  inline void Swap(StaticViewList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StaticViewList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StaticViewList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StaticViewList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StaticViewList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StaticViewList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StaticViewList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.StaticViewList";
  }
  protected:
  explicit StaticViewList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 1,
  };
  // repeated .common.ViewObject objects = 1;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::common::ViewObject* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ViewObject >*
      mutable_objects();
  private:
  const ::common::ViewObject& _internal_objects(int index) const;
  ::common::ViewObject* _internal_add_objects();
  public:
  const ::common::ViewObject& objects(int index) const;
  ::common::ViewObject* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ViewObject >&
      objects() const;

  // @@protoc_insertion_point(class_scope:common.StaticViewList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ViewObject > objects_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenecommon_2eproto;
};
// -------------------------------------------------------------------

class ViewObjectRole final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ViewObjectRole) */ {
 public:
  inline ViewObjectRole() : ViewObjectRole(nullptr) {}
  ~ViewObjectRole() override;
  explicit PROTOBUF_CONSTEXPR ViewObjectRole(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewObjectRole(const ViewObjectRole& from);
  ViewObjectRole(ViewObjectRole&& from) noexcept
    : ViewObjectRole() {
    *this = ::std::move(from);
  }

  inline ViewObjectRole& operator=(const ViewObjectRole& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewObjectRole& operator=(ViewObjectRole&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewObjectRole& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewObjectRole* internal_default_instance() {
    return reinterpret_cast<const ViewObjectRole*>(
               &_ViewObjectRole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ViewObjectRole& a, ViewObjectRole& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewObjectRole* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewObjectRole* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewObjectRole* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewObjectRole>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewObjectRole& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ViewObjectRole& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewObjectRole* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ViewObjectRole";
  }
  protected:
  explicit ViewObjectRole(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
    kZoneIdFFieldNumber = 2,
  };
  // uint64 roleId = 1;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // uint32 zoneIdF = 2;
  void clear_zoneidf();
  uint32_t zoneidf() const;
  void set_zoneidf(uint32_t value);
  private:
  uint32_t _internal_zoneidf() const;
  void _internal_set_zoneidf(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ViewObjectRole)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t roleid_;
  uint32_t zoneidf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenecommon_2eproto;
};
// -------------------------------------------------------------------

class ViewObjectNpc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ViewObjectNpc) */ {
 public:
  inline ViewObjectNpc() : ViewObjectNpc(nullptr) {}
  ~ViewObjectNpc() override;
  explicit PROTOBUF_CONSTEXPR ViewObjectNpc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewObjectNpc(const ViewObjectNpc& from);
  ViewObjectNpc(ViewObjectNpc&& from) noexcept
    : ViewObjectNpc() {
    *this = ::std::move(from);
  }

  inline ViewObjectNpc& operator=(const ViewObjectNpc& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewObjectNpc& operator=(ViewObjectNpc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewObjectNpc& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewObjectNpc* internal_default_instance() {
    return reinterpret_cast<const ViewObjectNpc*>(
               &_ViewObjectNpc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ViewObjectNpc& a, ViewObjectNpc& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewObjectNpc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewObjectNpc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewObjectNpc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewObjectNpc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewObjectNpc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ViewObjectNpc& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewObjectNpc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ViewObjectNpc";
  }
  protected:
  explicit ViewObjectNpc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 4,
    kPostoFieldNumber = 5,
    kNpcfFieldNumber = 100,
    kNpcmFieldNumber = 101,
    kNpccFieldNumber = 102,
    kNpcsFieldNumber = 103,
    kNpctFieldNumber = 104,
    kNpcbFieldNumber = 105,
    kNpcrFieldNumber = 106,
    kUidFieldNumber = 1,
    kTypeFieldNumber = 2,
    kTidFieldNumber = 3,
  };
  // .common.ViewObjectState state = 4;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::common::ViewObjectState& state() const;
  PROTOBUF_NODISCARD ::common::ViewObjectState* release_state();
  ::common::ViewObjectState* mutable_state();
  void set_allocated_state(::common::ViewObjectState* state);
  private:
  const ::common::ViewObjectState& _internal_state() const;
  ::common::ViewObjectState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::common::ViewObjectState* state);
  ::common::ViewObjectState* unsafe_arena_release_state();

  // .common.ClientPosTogether posto = 5;
  bool has_posto() const;
  private:
  bool _internal_has_posto() const;
  public:
  void clear_posto();
  const ::common::ClientPosTogether& posto() const;
  PROTOBUF_NODISCARD ::common::ClientPosTogether* release_posto();
  ::common::ClientPosTogether* mutable_posto();
  void set_allocated_posto(::common::ClientPosTogether* posto);
  private:
  const ::common::ClientPosTogether& _internal_posto() const;
  ::common::ClientPosTogether* _internal_mutable_posto();
  public:
  void unsafe_arena_set_allocated_posto(
      ::common::ClientPosTogether* posto);
  ::common::ClientPosTogether* unsafe_arena_release_posto();

  // .common.ViewObjectNpcFunc npcf = 100;
  bool has_npcf() const;
  private:
  bool _internal_has_npcf() const;
  public:
  void clear_npcf();
  const ::common::ViewObjectNpcFunc& npcf() const;
  PROTOBUF_NODISCARD ::common::ViewObjectNpcFunc* release_npcf();
  ::common::ViewObjectNpcFunc* mutable_npcf();
  void set_allocated_npcf(::common::ViewObjectNpcFunc* npcf);
  private:
  const ::common::ViewObjectNpcFunc& _internal_npcf() const;
  ::common::ViewObjectNpcFunc* _internal_mutable_npcf();
  public:
  void unsafe_arena_set_allocated_npcf(
      ::common::ViewObjectNpcFunc* npcf);
  ::common::ViewObjectNpcFunc* unsafe_arena_release_npcf();

  // .common.ViewObjectNpcMonster npcm = 101;
  bool has_npcm() const;
  private:
  bool _internal_has_npcm() const;
  public:
  void clear_npcm();
  const ::common::ViewObjectNpcMonster& npcm() const;
  PROTOBUF_NODISCARD ::common::ViewObjectNpcMonster* release_npcm();
  ::common::ViewObjectNpcMonster* mutable_npcm();
  void set_allocated_npcm(::common::ViewObjectNpcMonster* npcm);
  private:
  const ::common::ViewObjectNpcMonster& _internal_npcm() const;
  ::common::ViewObjectNpcMonster* _internal_mutable_npcm();
  public:
  void unsafe_arena_set_allocated_npcm(
      ::common::ViewObjectNpcMonster* npcm);
  ::common::ViewObjectNpcMonster* unsafe_arena_release_npcm();

  // .common.ViewObjectNpcCollection npcc = 102;
  bool has_npcc() const;
  private:
  bool _internal_has_npcc() const;
  public:
  void clear_npcc();
  const ::common::ViewObjectNpcCollection& npcc() const;
  PROTOBUF_NODISCARD ::common::ViewObjectNpcCollection* release_npcc();
  ::common::ViewObjectNpcCollection* mutable_npcc();
  void set_allocated_npcc(::common::ViewObjectNpcCollection* npcc);
  private:
  const ::common::ViewObjectNpcCollection& _internal_npcc() const;
  ::common::ViewObjectNpcCollection* _internal_mutable_npcc();
  public:
  void unsafe_arena_set_allocated_npcc(
      ::common::ViewObjectNpcCollection* npcc);
  ::common::ViewObjectNpcCollection* unsafe_arena_release_npcc();

  // .common.ViewObjectNpcSkill npcs = 103;
  bool has_npcs() const;
  private:
  bool _internal_has_npcs() const;
  public:
  void clear_npcs();
  const ::common::ViewObjectNpcSkill& npcs() const;
  PROTOBUF_NODISCARD ::common::ViewObjectNpcSkill* release_npcs();
  ::common::ViewObjectNpcSkill* mutable_npcs();
  void set_allocated_npcs(::common::ViewObjectNpcSkill* npcs);
  private:
  const ::common::ViewObjectNpcSkill& _internal_npcs() const;
  ::common::ViewObjectNpcSkill* _internal_mutable_npcs();
  public:
  void unsafe_arena_set_allocated_npcs(
      ::common::ViewObjectNpcSkill* npcs);
  ::common::ViewObjectNpcSkill* unsafe_arena_release_npcs();

  // .common.ViewObjectNpcTrigger npct = 104;
  bool has_npct() const;
  private:
  bool _internal_has_npct() const;
  public:
  void clear_npct();
  const ::common::ViewObjectNpcTrigger& npct() const;
  PROTOBUF_NODISCARD ::common::ViewObjectNpcTrigger* release_npct();
  ::common::ViewObjectNpcTrigger* mutable_npct();
  void set_allocated_npct(::common::ViewObjectNpcTrigger* npct);
  private:
  const ::common::ViewObjectNpcTrigger& _internal_npct() const;
  ::common::ViewObjectNpcTrigger* _internal_mutable_npct();
  public:
  void unsafe_arena_set_allocated_npct(
      ::common::ViewObjectNpcTrigger* npct);
  ::common::ViewObjectNpcTrigger* unsafe_arena_release_npct();

  // .common.ViewObjectNpcBlock npcb = 105;
  bool has_npcb() const;
  private:
  bool _internal_has_npcb() const;
  public:
  void clear_npcb();
  const ::common::ViewObjectNpcBlock& npcb() const;
  PROTOBUF_NODISCARD ::common::ViewObjectNpcBlock* release_npcb();
  ::common::ViewObjectNpcBlock* mutable_npcb();
  void set_allocated_npcb(::common::ViewObjectNpcBlock* npcb);
  private:
  const ::common::ViewObjectNpcBlock& _internal_npcb() const;
  ::common::ViewObjectNpcBlock* _internal_mutable_npcb();
  public:
  void unsafe_arena_set_allocated_npcb(
      ::common::ViewObjectNpcBlock* npcb);
  ::common::ViewObjectNpcBlock* unsafe_arena_release_npcb();

  // .common.ViewObjectNpcRegional npcr = 106;
  bool has_npcr() const;
  private:
  bool _internal_has_npcr() const;
  public:
  void clear_npcr();
  const ::common::ViewObjectNpcRegional& npcr() const;
  PROTOBUF_NODISCARD ::common::ViewObjectNpcRegional* release_npcr();
  ::common::ViewObjectNpcRegional* mutable_npcr();
  void set_allocated_npcr(::common::ViewObjectNpcRegional* npcr);
  private:
  const ::common::ViewObjectNpcRegional& _internal_npcr() const;
  ::common::ViewObjectNpcRegional* _internal_mutable_npcr();
  public:
  void unsafe_arena_set_allocated_npcr(
      ::common::ViewObjectNpcRegional* npcr);
  ::common::ViewObjectNpcRegional* unsafe_arena_release_npcr();

  // uint32 uid = 1;
  void clear_uid();
  uint32_t uid() const;
  void set_uid(uint32_t value);
  private:
  uint32_t _internal_uid() const;
  void _internal_set_uid(uint32_t value);
  public:

  // uint32 type = 2;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 tid = 3;
  void clear_tid();
  uint32_t tid() const;
  void set_tid(uint32_t value);
  private:
  uint32_t _internal_tid() const;
  void _internal_set_tid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ViewObjectNpc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::ViewObjectState* state_;
  ::common::ClientPosTogether* posto_;
  ::common::ViewObjectNpcFunc* npcf_;
  ::common::ViewObjectNpcMonster* npcm_;
  ::common::ViewObjectNpcCollection* npcc_;
  ::common::ViewObjectNpcSkill* npcs_;
  ::common::ViewObjectNpcTrigger* npct_;
  ::common::ViewObjectNpcBlock* npcb_;
  ::common::ViewObjectNpcRegional* npcr_;
  uint32_t uid_;
  uint32_t type_;
  uint32_t tid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenecommon_2eproto;
};
// -------------------------------------------------------------------

class ViewObjectNpcFunc final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:common.ViewObjectNpcFunc) */ {
 public:
  inline ViewObjectNpcFunc() : ViewObjectNpcFunc(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ViewObjectNpcFunc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewObjectNpcFunc(const ViewObjectNpcFunc& from);
  ViewObjectNpcFunc(ViewObjectNpcFunc&& from) noexcept
    : ViewObjectNpcFunc() {
    *this = ::std::move(from);
  }

  inline ViewObjectNpcFunc& operator=(const ViewObjectNpcFunc& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewObjectNpcFunc& operator=(ViewObjectNpcFunc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewObjectNpcFunc& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewObjectNpcFunc* internal_default_instance() {
    return reinterpret_cast<const ViewObjectNpcFunc*>(
               &_ViewObjectNpcFunc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ViewObjectNpcFunc& a, ViewObjectNpcFunc& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewObjectNpcFunc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewObjectNpcFunc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewObjectNpcFunc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewObjectNpcFunc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ViewObjectNpcFunc& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ViewObjectNpcFunc& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ViewObjectNpcFunc";
  }
  protected:
  explicit ViewObjectNpcFunc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:common.ViewObjectNpcFunc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_scenecommon_2eproto;
};
// -------------------------------------------------------------------

class ViewObjectNpcMonster final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ViewObjectNpcMonster) */ {
 public:
  inline ViewObjectNpcMonster() : ViewObjectNpcMonster(nullptr) {}
  ~ViewObjectNpcMonster() override;
  explicit PROTOBUF_CONSTEXPR ViewObjectNpcMonster(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewObjectNpcMonster(const ViewObjectNpcMonster& from);
  ViewObjectNpcMonster(ViewObjectNpcMonster&& from) noexcept
    : ViewObjectNpcMonster() {
    *this = ::std::move(from);
  }

  inline ViewObjectNpcMonster& operator=(const ViewObjectNpcMonster& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewObjectNpcMonster& operator=(ViewObjectNpcMonster&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewObjectNpcMonster& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewObjectNpcMonster* internal_default_instance() {
    return reinterpret_cast<const ViewObjectNpcMonster*>(
               &_ViewObjectNpcMonster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ViewObjectNpcMonster& a, ViewObjectNpcMonster& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewObjectNpcMonster* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewObjectNpcMonster* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewObjectNpcMonster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewObjectNpcMonster>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewObjectNpcMonster& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ViewObjectNpcMonster& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewObjectNpcMonster* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ViewObjectNpcMonster";
  }
  protected:
  explicit ViewObjectNpcMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeakFieldNumber = 11,
    kBarFieldNumber = 12,
    kCountdownFieldNumber = 13,
    kHatredlistFieldNumber = 14,
    kHpFieldNumber = 1,
    kHpmaxFieldNumber = 2,
    kSelectIdFieldNumber = 4,
    kLevelFieldNumber = 3,
    kSpeedFieldNumber = 5,
    kMpFieldNumber = 6,
    kMpmaxFieldNumber = 7,
    kPackIdFieldNumber = 9,
    kShieldFieldNumber = 8,
    kErosionFieldNumber = 10,
  };
  // .common.NpcSpeak speak = 11;
  bool has_speak() const;
  private:
  bool _internal_has_speak() const;
  public:
  void clear_speak();
  const ::common::NpcSpeak& speak() const;
  PROTOBUF_NODISCARD ::common::NpcSpeak* release_speak();
  ::common::NpcSpeak* mutable_speak();
  void set_allocated_speak(::common::NpcSpeak* speak);
  private:
  const ::common::NpcSpeak& _internal_speak() const;
  ::common::NpcSpeak* _internal_mutable_speak();
  public:
  void unsafe_arena_set_allocated_speak(
      ::common::NpcSpeak* speak);
  ::common::NpcSpeak* unsafe_arena_release_speak();

  // .common.ProgressBar bar = 12;
  bool has_bar() const;
  private:
  bool _internal_has_bar() const;
  public:
  void clear_bar();
  const ::common::ProgressBar& bar() const;
  PROTOBUF_NODISCARD ::common::ProgressBar* release_bar();
  ::common::ProgressBar* mutable_bar();
  void set_allocated_bar(::common::ProgressBar* bar);
  private:
  const ::common::ProgressBar& _internal_bar() const;
  ::common::ProgressBar* _internal_mutable_bar();
  public:
  void unsafe_arena_set_allocated_bar(
      ::common::ProgressBar* bar);
  ::common::ProgressBar* unsafe_arena_release_bar();

  // .common.NpcCountDownList countdown = 13;
  bool has_countdown() const;
  private:
  bool _internal_has_countdown() const;
  public:
  void clear_countdown();
  const ::common::NpcCountDownList& countdown() const;
  PROTOBUF_NODISCARD ::common::NpcCountDownList* release_countdown();
  ::common::NpcCountDownList* mutable_countdown();
  void set_allocated_countdown(::common::NpcCountDownList* countdown);
  private:
  const ::common::NpcCountDownList& _internal_countdown() const;
  ::common::NpcCountDownList* _internal_mutable_countdown();
  public:
  void unsafe_arena_set_allocated_countdown(
      ::common::NpcCountDownList* countdown);
  ::common::NpcCountDownList* unsafe_arena_release_countdown();

  // .common.NpcHatredList hatredlist = 14;
  bool has_hatredlist() const;
  private:
  bool _internal_has_hatredlist() const;
  public:
  void clear_hatredlist();
  const ::common::NpcHatredList& hatredlist() const;
  PROTOBUF_NODISCARD ::common::NpcHatredList* release_hatredlist();
  ::common::NpcHatredList* mutable_hatredlist();
  void set_allocated_hatredlist(::common::NpcHatredList* hatredlist);
  private:
  const ::common::NpcHatredList& _internal_hatredlist() const;
  ::common::NpcHatredList* _internal_mutable_hatredlist();
  public:
  void unsafe_arena_set_allocated_hatredlist(
      ::common::NpcHatredList* hatredlist);
  ::common::NpcHatredList* unsafe_arena_release_hatredlist();

  // uint32 hp = 1;
  void clear_hp();
  uint32_t hp() const;
  void set_hp(uint32_t value);
  private:
  uint32_t _internal_hp() const;
  void _internal_set_hp(uint32_t value);
  public:

  // uint32 hpmax = 2;
  void clear_hpmax();
  uint32_t hpmax() const;
  void set_hpmax(uint32_t value);
  private:
  uint32_t _internal_hpmax() const;
  void _internal_set_hpmax(uint32_t value);
  public:

  // uint64 selectId = 4;
  void clear_selectid();
  uint64_t selectid() const;
  void set_selectid(uint64_t value);
  private:
  uint64_t _internal_selectid() const;
  void _internal_set_selectid(uint64_t value);
  public:

  // uint32 level = 3;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 speed = 5;
  void clear_speed();
  uint32_t speed() const;
  void set_speed(uint32_t value);
  private:
  uint32_t _internal_speed() const;
  void _internal_set_speed(uint32_t value);
  public:

  // uint32 mp = 6;
  void clear_mp();
  uint32_t mp() const;
  void set_mp(uint32_t value);
  private:
  uint32_t _internal_mp() const;
  void _internal_set_mp(uint32_t value);
  public:

  // uint32 mpmax = 7;
  void clear_mpmax();
  uint32_t mpmax() const;
  void set_mpmax(uint32_t value);
  private:
  uint32_t _internal_mpmax() const;
  void _internal_set_mpmax(uint32_t value);
  public:

  // uint64 packId = 9;
  void clear_packid();
  uint64_t packid() const;
  void set_packid(uint64_t value);
  private:
  uint64_t _internal_packid() const;
  void _internal_set_packid(uint64_t value);
  public:

  // uint32 shield = 8;
  void clear_shield();
  uint32_t shield() const;
  void set_shield(uint32_t value);
  private:
  uint32_t _internal_shield() const;
  void _internal_set_shield(uint32_t value);
  public:

  // uint32 erosion = 10;
  void clear_erosion();
  uint32_t erosion() const;
  void set_erosion(uint32_t value);
  private:
  uint32_t _internal_erosion() const;
  void _internal_set_erosion(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ViewObjectNpcMonster)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::NpcSpeak* speak_;
  ::common::ProgressBar* bar_;
  ::common::NpcCountDownList* countdown_;
  ::common::NpcHatredList* hatredlist_;
  uint32_t hp_;
  uint32_t hpmax_;
  uint64_t selectid_;
  uint32_t level_;
  uint32_t speed_;
  uint32_t mp_;
  uint32_t mpmax_;
  uint64_t packid_;
  uint32_t shield_;
  uint32_t erosion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenecommon_2eproto;
};
// -------------------------------------------------------------------

class ViewObjectNpcCollection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ViewObjectNpcCollection) */ {
 public:
  inline ViewObjectNpcCollection() : ViewObjectNpcCollection(nullptr) {}
  ~ViewObjectNpcCollection() override;
  explicit PROTOBUF_CONSTEXPR ViewObjectNpcCollection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewObjectNpcCollection(const ViewObjectNpcCollection& from);
  ViewObjectNpcCollection(ViewObjectNpcCollection&& from) noexcept
    : ViewObjectNpcCollection() {
    *this = ::std::move(from);
  }

  inline ViewObjectNpcCollection& operator=(const ViewObjectNpcCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewObjectNpcCollection& operator=(ViewObjectNpcCollection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewObjectNpcCollection& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewObjectNpcCollection* internal_default_instance() {
    return reinterpret_cast<const ViewObjectNpcCollection*>(
               &_ViewObjectNpcCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ViewObjectNpcCollection& a, ViewObjectNpcCollection& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewObjectNpcCollection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewObjectNpcCollection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewObjectNpcCollection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewObjectNpcCollection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewObjectNpcCollection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ViewObjectNpcCollection& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewObjectNpcCollection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ViewObjectNpcCollection";
  }
  protected:
  explicit ViewObjectNpcCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectstatusFieldNumber = 1,
  };
  // uint32 collectstatus = 1;
  void clear_collectstatus();
  uint32_t collectstatus() const;
  void set_collectstatus(uint32_t value);
  private:
  uint32_t _internal_collectstatus() const;
  void _internal_set_collectstatus(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ViewObjectNpcCollection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t collectstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenecommon_2eproto;
};
// -------------------------------------------------------------------

class ViewObjectNpcSkill final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ViewObjectNpcSkill) */ {
 public:
  inline ViewObjectNpcSkill() : ViewObjectNpcSkill(nullptr) {}
  ~ViewObjectNpcSkill() override;
  explicit PROTOBUF_CONSTEXPR ViewObjectNpcSkill(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewObjectNpcSkill(const ViewObjectNpcSkill& from);
  ViewObjectNpcSkill(ViewObjectNpcSkill&& from) noexcept
    : ViewObjectNpcSkill() {
    *this = ::std::move(from);
  }

  inline ViewObjectNpcSkill& operator=(const ViewObjectNpcSkill& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewObjectNpcSkill& operator=(ViewObjectNpcSkill&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewObjectNpcSkill& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewObjectNpcSkill* internal_default_instance() {
    return reinterpret_cast<const ViewObjectNpcSkill*>(
               &_ViewObjectNpcSkill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ViewObjectNpcSkill& a, ViewObjectNpcSkill& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewObjectNpcSkill* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewObjectNpcSkill* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewObjectNpcSkill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewObjectNpcSkill>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewObjectNpcSkill& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ViewObjectNpcSkill& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewObjectNpcSkill* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ViewObjectNpcSkill";
  }
  protected:
  explicit ViewObjectNpcSkill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLasttimeFieldNumber = 1,
    kExpreFieldNumber = 2,
    kSpeedFieldNumber = 3,
  };
  // uint64 lasttime = 1;
  void clear_lasttime();
  uint64_t lasttime() const;
  void set_lasttime(uint64_t value);
  private:
  uint64_t _internal_lasttime() const;
  void _internal_set_lasttime(uint64_t value);
  public:

  // uint64 expre = 2;
  void clear_expre();
  uint64_t expre() const;
  void set_expre(uint64_t value);
  private:
  uint64_t _internal_expre() const;
  void _internal_set_expre(uint64_t value);
  public:

  // uint32 speed = 3;
  void clear_speed();
  uint32_t speed() const;
  void set_speed(uint32_t value);
  private:
  uint32_t _internal_speed() const;
  void _internal_set_speed(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ViewObjectNpcSkill)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t lasttime_;
  uint64_t expre_;
  uint32_t speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenecommon_2eproto;
};
// -------------------------------------------------------------------

class ViewObjectNpcTrigger final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ViewObjectNpcTrigger) */ {
 public:
  inline ViewObjectNpcTrigger() : ViewObjectNpcTrigger(nullptr) {}
  ~ViewObjectNpcTrigger() override;
  explicit PROTOBUF_CONSTEXPR ViewObjectNpcTrigger(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewObjectNpcTrigger(const ViewObjectNpcTrigger& from);
  ViewObjectNpcTrigger(ViewObjectNpcTrigger&& from) noexcept
    : ViewObjectNpcTrigger() {
    *this = ::std::move(from);
  }

  inline ViewObjectNpcTrigger& operator=(const ViewObjectNpcTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewObjectNpcTrigger& operator=(ViewObjectNpcTrigger&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewObjectNpcTrigger& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewObjectNpcTrigger* internal_default_instance() {
    return reinterpret_cast<const ViewObjectNpcTrigger*>(
               &_ViewObjectNpcTrigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ViewObjectNpcTrigger& a, ViewObjectNpcTrigger& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewObjectNpcTrigger* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewObjectNpcTrigger* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewObjectNpcTrigger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewObjectNpcTrigger>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewObjectNpcTrigger& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ViewObjectNpcTrigger& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewObjectNpcTrigger* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ViewObjectNpcTrigger";
  }
  protected:
  explicit ViewObjectNpcTrigger(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceidFieldNumber = 1,
  };
  // uint64 instanceid = 1;
  void clear_instanceid();
  uint64_t instanceid() const;
  void set_instanceid(uint64_t value);
  private:
  uint64_t _internal_instanceid() const;
  void _internal_set_instanceid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ViewObjectNpcTrigger)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t instanceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenecommon_2eproto;
};
// -------------------------------------------------------------------

class ViewObjectNpcBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ViewObjectNpcBlock) */ {
 public:
  inline ViewObjectNpcBlock() : ViewObjectNpcBlock(nullptr) {}
  ~ViewObjectNpcBlock() override;
  explicit PROTOBUF_CONSTEXPR ViewObjectNpcBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewObjectNpcBlock(const ViewObjectNpcBlock& from);
  ViewObjectNpcBlock(ViewObjectNpcBlock&& from) noexcept
    : ViewObjectNpcBlock() {
    *this = ::std::move(from);
  }

  inline ViewObjectNpcBlock& operator=(const ViewObjectNpcBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewObjectNpcBlock& operator=(ViewObjectNpcBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewObjectNpcBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewObjectNpcBlock* internal_default_instance() {
    return reinterpret_cast<const ViewObjectNpcBlock*>(
               &_ViewObjectNpcBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ViewObjectNpcBlock& a, ViewObjectNpcBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewObjectNpcBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewObjectNpcBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewObjectNpcBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewObjectNpcBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewObjectNpcBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ViewObjectNpcBlock& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewObjectNpcBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ViewObjectNpcBlock";
  }
  protected:
  explicit ViewObjectNpcBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceidFieldNumber = 1,
  };
  // uint64 instanceid = 1;
  void clear_instanceid();
  uint64_t instanceid() const;
  void set_instanceid(uint64_t value);
  private:
  uint64_t _internal_instanceid() const;
  void _internal_set_instanceid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ViewObjectNpcBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t instanceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenecommon_2eproto;
};
// -------------------------------------------------------------------

class ViewObjectNpcRegional final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ViewObjectNpcRegional) */ {
 public:
  inline ViewObjectNpcRegional() : ViewObjectNpcRegional(nullptr) {}
  ~ViewObjectNpcRegional() override;
  explicit PROTOBUF_CONSTEXPR ViewObjectNpcRegional(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewObjectNpcRegional(const ViewObjectNpcRegional& from);
  ViewObjectNpcRegional(ViewObjectNpcRegional&& from) noexcept
    : ViewObjectNpcRegional() {
    *this = ::std::move(from);
  }

  inline ViewObjectNpcRegional& operator=(const ViewObjectNpcRegional& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewObjectNpcRegional& operator=(ViewObjectNpcRegional&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewObjectNpcRegional& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewObjectNpcRegional* internal_default_instance() {
    return reinterpret_cast<const ViewObjectNpcRegional*>(
               &_ViewObjectNpcRegional_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ViewObjectNpcRegional& a, ViewObjectNpcRegional& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewObjectNpcRegional* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewObjectNpcRegional* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewObjectNpcRegional* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewObjectNpcRegional>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewObjectNpcRegional& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ViewObjectNpcRegional& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewObjectNpcRegional* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ViewObjectNpcRegional";
  }
  protected:
  explicit ViewObjectNpcRegional(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kInstanceidFieldNumber = 1,
  };
  // .common.OccupyViewData data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::common::OccupyViewData& data() const;
  PROTOBUF_NODISCARD ::common::OccupyViewData* release_data();
  ::common::OccupyViewData* mutable_data();
  void set_allocated_data(::common::OccupyViewData* data);
  private:
  const ::common::OccupyViewData& _internal_data() const;
  ::common::OccupyViewData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::common::OccupyViewData* data);
  ::common::OccupyViewData* unsafe_arena_release_data();

  // uint64 instanceid = 1;
  void clear_instanceid();
  uint64_t instanceid() const;
  void set_instanceid(uint64_t value);
  private:
  uint64_t _internal_instanceid() const;
  void _internal_set_instanceid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ViewObjectNpcRegional)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::OccupyViewData* data_;
  uint64_t instanceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenecommon_2eproto;
};
// -------------------------------------------------------------------

class ViewObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ViewObject) */ {
 public:
  inline ViewObject() : ViewObject(nullptr) {}
  ~ViewObject() override;
  explicit PROTOBUF_CONSTEXPR ViewObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewObject(const ViewObject& from);
  ViewObject(ViewObject&& from) noexcept
    : ViewObject() {
    *this = ::std::move(from);
  }

  inline ViewObject& operator=(const ViewObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewObject& operator=(ViewObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewObject* internal_default_instance() {
    return reinterpret_cast<const ViewObject*>(
               &_ViewObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ViewObject& a, ViewObject& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ViewObject& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ViewObject";
  }
  protected:
  explicit ViewObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 1,
    kNpcFieldNumber = 2,
  };
  // .common.ViewObjectRole role = 1;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  const ::common::ViewObjectRole& role() const;
  PROTOBUF_NODISCARD ::common::ViewObjectRole* release_role();
  ::common::ViewObjectRole* mutable_role();
  void set_allocated_role(::common::ViewObjectRole* role);
  private:
  const ::common::ViewObjectRole& _internal_role() const;
  ::common::ViewObjectRole* _internal_mutable_role();
  public:
  void unsafe_arena_set_allocated_role(
      ::common::ViewObjectRole* role);
  ::common::ViewObjectRole* unsafe_arena_release_role();

  // .common.ViewObjectNpc npc = 2;
  bool has_npc() const;
  private:
  bool _internal_has_npc() const;
  public:
  void clear_npc();
  const ::common::ViewObjectNpc& npc() const;
  PROTOBUF_NODISCARD ::common::ViewObjectNpc* release_npc();
  ::common::ViewObjectNpc* mutable_npc();
  void set_allocated_npc(::common::ViewObjectNpc* npc);
  private:
  const ::common::ViewObjectNpc& _internal_npc() const;
  ::common::ViewObjectNpc* _internal_mutable_npc();
  public:
  void unsafe_arena_set_allocated_npc(
      ::common::ViewObjectNpc* npc);
  ::common::ViewObjectNpc* unsafe_arena_release_npc();

  // @@protoc_insertion_point(class_scope:common.ViewObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::ViewObjectRole* role_;
  ::common::ViewObjectNpc* npc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenecommon_2eproto;
};
// -------------------------------------------------------------------

class ViewObjectList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ViewObjectList) */ {
 public:
  inline ViewObjectList() : ViewObjectList(nullptr) {}
  ~ViewObjectList() override;
  explicit PROTOBUF_CONSTEXPR ViewObjectList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewObjectList(const ViewObjectList& from);
  ViewObjectList(ViewObjectList&& from) noexcept
    : ViewObjectList() {
    *this = ::std::move(from);
  }

  inline ViewObjectList& operator=(const ViewObjectList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewObjectList& operator=(ViewObjectList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewObjectList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewObjectList* internal_default_instance() {
    return reinterpret_cast<const ViewObjectList*>(
               &_ViewObjectList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ViewObjectList& a, ViewObjectList& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewObjectList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewObjectList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewObjectList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewObjectList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewObjectList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ViewObjectList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewObjectList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ViewObjectList";
  }
  protected:
  explicit ViewObjectList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 1,
  };
  // repeated .common.ViewObject objects = 1;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::common::ViewObject* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ViewObject >*
      mutable_objects();
  private:
  const ::common::ViewObject& _internal_objects(int index) const;
  ::common::ViewObject* _internal_add_objects();
  public:
  const ::common::ViewObject& objects(int index) const;
  ::common::ViewObject* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ViewObject >&
      objects() const;

  // @@protoc_insertion_point(class_scope:common.ViewObjectList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ViewObject > objects_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenecommon_2eproto;
};
// -------------------------------------------------------------------

class ViewObjectIdList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ViewObjectIdList) */ {
 public:
  inline ViewObjectIdList() : ViewObjectIdList(nullptr) {}
  ~ViewObjectIdList() override;
  explicit PROTOBUF_CONSTEXPR ViewObjectIdList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewObjectIdList(const ViewObjectIdList& from);
  ViewObjectIdList(ViewObjectIdList&& from) noexcept
    : ViewObjectIdList() {
    *this = ::std::move(from);
  }

  inline ViewObjectIdList& operator=(const ViewObjectIdList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewObjectIdList& operator=(ViewObjectIdList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewObjectIdList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewObjectIdList* internal_default_instance() {
    return reinterpret_cast<const ViewObjectIdList*>(
               &_ViewObjectIdList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ViewObjectIdList& a, ViewObjectIdList& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewObjectIdList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewObjectIdList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewObjectIdList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewObjectIdList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewObjectIdList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ViewObjectIdList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewObjectIdList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ViewObjectIdList";
  }
  protected:
  explicit ViewObjectIdList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidsFieldNumber = 1,
  };
  // repeated uint64 uids = 1;
  int uids_size() const;
  private:
  int _internal_uids_size() const;
  public:
  void clear_uids();
  private:
  uint64_t _internal_uids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_uids() const;
  void _internal_add_uids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_uids();
  public:
  uint64_t uids(int index) const;
  void set_uids(int index, uint64_t value);
  void add_uids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      uids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_uids();

  // @@protoc_insertion_point(class_scope:common.ViewObjectIdList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > uids_;
  mutable std::atomic<int> _uids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenecommon_2eproto;
};
// -------------------------------------------------------------------

class RebirthInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.RebirthInfo) */ {
 public:
  inline RebirthInfo() : RebirthInfo(nullptr) {}
  ~RebirthInfo() override;
  explicit PROTOBUF_CONSTEXPR RebirthInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RebirthInfo(const RebirthInfo& from);
  RebirthInfo(RebirthInfo&& from) noexcept
    : RebirthInfo() {
    *this = ::std::move(from);
  }

  inline RebirthInfo& operator=(const RebirthInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RebirthInfo& operator=(RebirthInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RebirthInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RebirthInfo* internal_default_instance() {
    return reinterpret_cast<const RebirthInfo*>(
               &_RebirthInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(RebirthInfo& a, RebirthInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RebirthInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RebirthInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RebirthInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RebirthInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RebirthInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RebirthInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RebirthInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.RebirthInfo";
  }
  protected:
  explicit RebirthInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanRebirthFieldNumber = 1,
    kRebornParamFieldNumber = 2,
    kDeathTimesFieldNumber = 3,
    kUseRebirthCntFieldNumber = 4,
  };
  // uint32 canRebirth = 1;
  void clear_canrebirth();
  uint32_t canrebirth() const;
  void set_canrebirth(uint32_t value);
  private:
  uint32_t _internal_canrebirth() const;
  void _internal_set_canrebirth(uint32_t value);
  public:

  // uint32 rebornParam = 2;
  void clear_rebornparam();
  uint32_t rebornparam() const;
  void set_rebornparam(uint32_t value);
  private:
  uint32_t _internal_rebornparam() const;
  void _internal_set_rebornparam(uint32_t value);
  public:

  // uint32 deathTimes = 3;
  void clear_deathtimes();
  uint32_t deathtimes() const;
  void set_deathtimes(uint32_t value);
  private:
  uint32_t _internal_deathtimes() const;
  void _internal_set_deathtimes(uint32_t value);
  public:

  // uint32 useRebirthCnt = 4;
  void clear_userebirthcnt();
  uint32_t userebirthcnt() const;
  void set_userebirthcnt(uint32_t value);
  private:
  uint32_t _internal_userebirthcnt() const;
  void _internal_set_userebirthcnt(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.RebirthInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t canrebirth_;
  uint32_t rebornparam_;
  uint32_t deathtimes_;
  uint32_t userebirthcnt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenecommon_2eproto;
};
// -------------------------------------------------------------------

class MapMark final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.MapMark) */ {
 public:
  inline MapMark() : MapMark(nullptr) {}
  ~MapMark() override;
  explicit PROTOBUF_CONSTEXPR MapMark(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapMark(const MapMark& from);
  MapMark(MapMark&& from) noexcept
    : MapMark() {
    *this = ::std::move(from);
  }

  inline MapMark& operator=(const MapMark& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapMark& operator=(MapMark&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapMark& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapMark* internal_default_instance() {
    return reinterpret_cast<const MapMark*>(
               &_MapMark_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MapMark& a, MapMark& b) {
    a.Swap(&b);
  }
  inline void Swap(MapMark* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapMark* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapMark* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapMark>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapMark& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MapMark& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapMark* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.MapMark";
  }
  protected:
  explicit MapMark(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPostoFieldNumber = 5,
    kUidFieldNumber = 1,
    kTypeFieldNumber = 2,
    kTidFieldNumber = 3,
    kStateFieldNumber = 4,
  };
  // .common.ClientPosTogether posto = 5;
  bool has_posto() const;
  private:
  bool _internal_has_posto() const;
  public:
  void clear_posto();
  const ::common::ClientPosTogether& posto() const;
  PROTOBUF_NODISCARD ::common::ClientPosTogether* release_posto();
  ::common::ClientPosTogether* mutable_posto();
  void set_allocated_posto(::common::ClientPosTogether* posto);
  private:
  const ::common::ClientPosTogether& _internal_posto() const;
  ::common::ClientPosTogether* _internal_mutable_posto();
  public:
  void unsafe_arena_set_allocated_posto(
      ::common::ClientPosTogether* posto);
  ::common::ClientPosTogether* unsafe_arena_release_posto();

  // uint32 uid = 1;
  void clear_uid();
  uint32_t uid() const;
  void set_uid(uint32_t value);
  private:
  uint32_t _internal_uid() const;
  void _internal_set_uid(uint32_t value);
  public:

  // uint32 type = 2;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 tid = 3;
  void clear_tid();
  uint32_t tid() const;
  void set_tid(uint32_t value);
  private:
  uint32_t _internal_tid() const;
  void _internal_set_tid(uint32_t value);
  public:

  // uint32 state = 4;
  void clear_state();
  uint32_t state() const;
  void set_state(uint32_t value);
  private:
  uint32_t _internal_state() const;
  void _internal_set_state(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.MapMark)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::ClientPosTogether* posto_;
  uint32_t uid_;
  uint32_t type_;
  uint32_t tid_;
  uint32_t state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenecommon_2eproto;
};
// -------------------------------------------------------------------

class OccupyViewData_OccupyProgress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.OccupyViewData.OccupyProgress) */ {
 public:
  inline OccupyViewData_OccupyProgress() : OccupyViewData_OccupyProgress(nullptr) {}
  ~OccupyViewData_OccupyProgress() override;
  explicit PROTOBUF_CONSTEXPR OccupyViewData_OccupyProgress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OccupyViewData_OccupyProgress(const OccupyViewData_OccupyProgress& from);
  OccupyViewData_OccupyProgress(OccupyViewData_OccupyProgress&& from) noexcept
    : OccupyViewData_OccupyProgress() {
    *this = ::std::move(from);
  }

  inline OccupyViewData_OccupyProgress& operator=(const OccupyViewData_OccupyProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline OccupyViewData_OccupyProgress& operator=(OccupyViewData_OccupyProgress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OccupyViewData_OccupyProgress& default_instance() {
    return *internal_default_instance();
  }
  static inline const OccupyViewData_OccupyProgress* internal_default_instance() {
    return reinterpret_cast<const OccupyViewData_OccupyProgress*>(
               &_OccupyViewData_OccupyProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(OccupyViewData_OccupyProgress& a, OccupyViewData_OccupyProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(OccupyViewData_OccupyProgress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OccupyViewData_OccupyProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OccupyViewData_OccupyProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OccupyViewData_OccupyProgress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OccupyViewData_OccupyProgress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OccupyViewData_OccupyProgress& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OccupyViewData_OccupyProgress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.OccupyViewData.OccupyProgress";
  }
  protected:
  explicit OccupyViewData_OccupyProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCampIdFieldNumber = 1,
    kProgressFieldNumber = 2,
  };
  // uint32 campId = 1;
  void clear_campid();
  uint32_t campid() const;
  void set_campid(uint32_t value);
  private:
  uint32_t _internal_campid() const;
  void _internal_set_campid(uint32_t value);
  public:

  // uint32 progress = 2;
  void clear_progress();
  uint32_t progress() const;
  void set_progress(uint32_t value);
  private:
  uint32_t _internal_progress() const;
  void _internal_set_progress(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.OccupyViewData.OccupyProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t campid_;
  uint32_t progress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenecommon_2eproto;
};
// -------------------------------------------------------------------

class OccupyViewData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.OccupyViewData) */ {
 public:
  inline OccupyViewData() : OccupyViewData(nullptr) {}
  ~OccupyViewData() override;
  explicit PROTOBUF_CONSTEXPR OccupyViewData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OccupyViewData(const OccupyViewData& from);
  OccupyViewData(OccupyViewData&& from) noexcept
    : OccupyViewData() {
    *this = ::std::move(from);
  }

  inline OccupyViewData& operator=(const OccupyViewData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OccupyViewData& operator=(OccupyViewData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OccupyViewData& default_instance() {
    return *internal_default_instance();
  }
  static inline const OccupyViewData* internal_default_instance() {
    return reinterpret_cast<const OccupyViewData*>(
               &_OccupyViewData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(OccupyViewData& a, OccupyViewData& b) {
    a.Swap(&b);
  }
  inline void Swap(OccupyViewData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OccupyViewData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OccupyViewData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OccupyViewData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OccupyViewData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OccupyViewData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OccupyViewData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.OccupyViewData";
  }
  protected:
  explicit OccupyViewData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OccupyViewData_OccupyProgress OccupyProgress;

  // accessors -------------------------------------------------------

  enum : int {
    kProgressFieldNumber = 2,
    kOccupyCampIdFieldNumber = 1,
  };
  // .common.OccupyViewData.OccupyProgress progress = 2;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  const ::common::OccupyViewData_OccupyProgress& progress() const;
  PROTOBUF_NODISCARD ::common::OccupyViewData_OccupyProgress* release_progress();
  ::common::OccupyViewData_OccupyProgress* mutable_progress();
  void set_allocated_progress(::common::OccupyViewData_OccupyProgress* progress);
  private:
  const ::common::OccupyViewData_OccupyProgress& _internal_progress() const;
  ::common::OccupyViewData_OccupyProgress* _internal_mutable_progress();
  public:
  void unsafe_arena_set_allocated_progress(
      ::common::OccupyViewData_OccupyProgress* progress);
  ::common::OccupyViewData_OccupyProgress* unsafe_arena_release_progress();

  // uint32 occupyCampId = 1;
  void clear_occupycampid();
  uint32_t occupycampid() const;
  void set_occupycampid(uint32_t value);
  private:
  uint32_t _internal_occupycampid() const;
  void _internal_set_occupycampid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.OccupyViewData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::OccupyViewData_OccupyProgress* progress_;
  uint32_t occupycampid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenecommon_2eproto;
};
// -------------------------------------------------------------------

class ViewEffect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ViewEffect) */ {
 public:
  inline ViewEffect() : ViewEffect(nullptr) {}
  ~ViewEffect() override;
  explicit PROTOBUF_CONSTEXPR ViewEffect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewEffect(const ViewEffect& from);
  ViewEffect(ViewEffect&& from) noexcept
    : ViewEffect() {
    *this = ::std::move(from);
  }

  inline ViewEffect& operator=(const ViewEffect& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewEffect& operator=(ViewEffect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewEffect& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewEffect* internal_default_instance() {
    return reinterpret_cast<const ViewEffect*>(
               &_ViewEffect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ViewEffect& a, ViewEffect& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewEffect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewEffect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewEffect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewEffect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewEffect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ViewEffect& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewEffect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ViewEffect";
  }
  protected:
  explicit ViewEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectIdFieldNumber = 1,
    kBeginTimeFieldNumber = 2,
  };
  // uint32 effectId = 1;
  void clear_effectid();
  uint32_t effectid() const;
  void set_effectid(uint32_t value);
  private:
  uint32_t _internal_effectid() const;
  void _internal_set_effectid(uint32_t value);
  public:

  // uint32 beginTime = 2;
  void clear_begintime();
  uint32_t begintime() const;
  void set_begintime(uint32_t value);
  private:
  uint32_t _internal_begintime() const;
  void _internal_set_begintime(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ViewEffect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t effectid_;
  uint32_t begintime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenecommon_2eproto;
};
// -------------------------------------------------------------------

class ViewEffectList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ViewEffectList) */ {
 public:
  inline ViewEffectList() : ViewEffectList(nullptr) {}
  ~ViewEffectList() override;
  explicit PROTOBUF_CONSTEXPR ViewEffectList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewEffectList(const ViewEffectList& from);
  ViewEffectList(ViewEffectList&& from) noexcept
    : ViewEffectList() {
    *this = ::std::move(from);
  }

  inline ViewEffectList& operator=(const ViewEffectList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewEffectList& operator=(ViewEffectList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewEffectList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewEffectList* internal_default_instance() {
    return reinterpret_cast<const ViewEffectList*>(
               &_ViewEffectList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ViewEffectList& a, ViewEffectList& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewEffectList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewEffectList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewEffectList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewEffectList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewEffectList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ViewEffectList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewEffectList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ViewEffectList";
  }
  protected:
  explicit ViewEffectList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectsFieldNumber = 1,
  };
  // repeated .common.ViewEffect effects = 1;
  int effects_size() const;
  private:
  int _internal_effects_size() const;
  public:
  void clear_effects();
  ::common::ViewEffect* mutable_effects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ViewEffect >*
      mutable_effects();
  private:
  const ::common::ViewEffect& _internal_effects(int index) const;
  ::common::ViewEffect* _internal_add_effects();
  public:
  const ::common::ViewEffect& effects(int index) const;
  ::common::ViewEffect* add_effects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ViewEffect >&
      effects() const;

  // @@protoc_insertion_point(class_scope:common.ViewEffectList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ViewEffect > effects_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenecommon_2eproto;
};
// -------------------------------------------------------------------

class ViewSpeed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ViewSpeed) */ {
 public:
  inline ViewSpeed() : ViewSpeed(nullptr) {}
  ~ViewSpeed() override;
  explicit PROTOBUF_CONSTEXPR ViewSpeed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewSpeed(const ViewSpeed& from);
  ViewSpeed(ViewSpeed&& from) noexcept
    : ViewSpeed() {
    *this = ::std::move(from);
  }

  inline ViewSpeed& operator=(const ViewSpeed& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewSpeed& operator=(ViewSpeed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewSpeed& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewSpeed* internal_default_instance() {
    return reinterpret_cast<const ViewSpeed*>(
               &_ViewSpeed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ViewSpeed& a, ViewSpeed& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewSpeed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewSpeed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewSpeed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewSpeed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewSpeed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ViewSpeed& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewSpeed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ViewSpeed";
  }
  protected:
  explicit ViewSpeed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurSpeedFieldNumber = 1,
    kReadySpeedFieldNumber = 2,
  };
  // uint32 curSpeed = 1;
  void clear_curspeed();
  uint32_t curspeed() const;
  void set_curspeed(uint32_t value);
  private:
  uint32_t _internal_curspeed() const;
  void _internal_set_curspeed(uint32_t value);
  public:

  // uint32 readySpeed = 2;
  void clear_readyspeed();
  uint32_t readyspeed() const;
  void set_readyspeed(uint32_t value);
  private:
  uint32_t _internal_readyspeed() const;
  void _internal_set_readyspeed(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ViewSpeed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t curspeed_;
  uint32_t readyspeed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenecommon_2eproto;
};
// -------------------------------------------------------------------

class ViewHitProgress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ViewHitProgress) */ {
 public:
  inline ViewHitProgress() : ViewHitProgress(nullptr) {}
  ~ViewHitProgress() override;
  explicit PROTOBUF_CONSTEXPR ViewHitProgress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewHitProgress(const ViewHitProgress& from);
  ViewHitProgress(ViewHitProgress&& from) noexcept
    : ViewHitProgress() {
    *this = ::std::move(from);
  }

  inline ViewHitProgress& operator=(const ViewHitProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewHitProgress& operator=(ViewHitProgress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewHitProgress& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewHitProgress* internal_default_instance() {
    return reinterpret_cast<const ViewHitProgress*>(
               &_ViewHitProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ViewHitProgress& a, ViewHitProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewHitProgress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewHitProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewHitProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewHitProgress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewHitProgress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ViewHitProgress& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewHitProgress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ViewHitProgress";
  }
  protected:
  explicit ViewHitProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformIdFieldNumber = 1,
    kProgressFieldNumber = 2,
  };
  // uint32 transformId = 1;
  void clear_transformid();
  uint32_t transformid() const;
  void set_transformid(uint32_t value);
  private:
  uint32_t _internal_transformid() const;
  void _internal_set_transformid(uint32_t value);
  public:

  // uint32 progress = 2;
  void clear_progress();
  uint32_t progress() const;
  void set_progress(uint32_t value);
  private:
  uint32_t _internal_progress() const;
  void _internal_set_progress(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ViewHitProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t transformid_;
  uint32_t progress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenecommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ModuleDataByte

// uint32 type = 1;
inline void ModuleDataByte::clear_type() {
  type_ = 0u;
}
inline uint32_t ModuleDataByte::_internal_type() const {
  return type_;
}
inline uint32_t ModuleDataByte::type() const {
  // @@protoc_insertion_point(field_get:common.ModuleDataByte.type)
  return _internal_type();
}
inline void ModuleDataByte::_internal_set_type(uint32_t value) {
  
  type_ = value;
}
inline void ModuleDataByte::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:common.ModuleDataByte.type)
}

// uint32 total = 2;
inline void ModuleDataByte::clear_total() {
  total_ = 0u;
}
inline uint32_t ModuleDataByte::_internal_total() const {
  return total_;
}
inline uint32_t ModuleDataByte::total() const {
  // @@protoc_insertion_point(field_get:common.ModuleDataByte.total)
  return _internal_total();
}
inline void ModuleDataByte::_internal_set_total(uint32_t value) {
  
  total_ = value;
}
inline void ModuleDataByte::set_total(uint32_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:common.ModuleDataByte.total)
}

// bytes data = 3;
inline void ModuleDataByte::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ModuleDataByte::data() const {
  // @@protoc_insertion_point(field_get:common.ModuleDataByte.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModuleDataByte::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.ModuleDataByte.data)
}
inline std::string* ModuleDataByte::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:common.ModuleDataByte.data)
  return _s;
}
inline const std::string& ModuleDataByte::_internal_data() const {
  return data_.Get();
}
inline void ModuleDataByte::_internal_set_data(const std::string& value) {
  
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* ModuleDataByte::_internal_mutable_data() {
  
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* ModuleDataByte::release_data() {
  // @@protoc_insertion_point(field_release:common.ModuleDataByte.data)
  return data_.Release();
}
inline void ModuleDataByte::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.ModuleDataByte.data)
}

// -------------------------------------------------------------------

// ModuleScene

// .common.RebirthInfo rebirth = 1;
inline bool ModuleScene::_internal_has_rebirth() const {
  return this != internal_default_instance() && rebirth_ != nullptr;
}
inline bool ModuleScene::has_rebirth() const {
  return _internal_has_rebirth();
}
inline void ModuleScene::clear_rebirth() {
  if (GetArenaForAllocation() == nullptr && rebirth_ != nullptr) {
    delete rebirth_;
  }
  rebirth_ = nullptr;
}
inline const ::common::RebirthInfo& ModuleScene::_internal_rebirth() const {
  const ::common::RebirthInfo* p = rebirth_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RebirthInfo&>(
      ::common::_RebirthInfo_default_instance_);
}
inline const ::common::RebirthInfo& ModuleScene::rebirth() const {
  // @@protoc_insertion_point(field_get:common.ModuleScene.rebirth)
  return _internal_rebirth();
}
inline void ModuleScene::unsafe_arena_set_allocated_rebirth(
    ::common::RebirthInfo* rebirth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rebirth_);
  }
  rebirth_ = rebirth;
  if (rebirth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ModuleScene.rebirth)
}
inline ::common::RebirthInfo* ModuleScene::release_rebirth() {
  
  ::common::RebirthInfo* temp = rebirth_;
  rebirth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RebirthInfo* ModuleScene::unsafe_arena_release_rebirth() {
  // @@protoc_insertion_point(field_release:common.ModuleScene.rebirth)
  
  ::common::RebirthInfo* temp = rebirth_;
  rebirth_ = nullptr;
  return temp;
}
inline ::common::RebirthInfo* ModuleScene::_internal_mutable_rebirth() {
  
  if (rebirth_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RebirthInfo>(GetArenaForAllocation());
    rebirth_ = p;
  }
  return rebirth_;
}
inline ::common::RebirthInfo* ModuleScene::mutable_rebirth() {
  ::common::RebirthInfo* _msg = _internal_mutable_rebirth();
  // @@protoc_insertion_point(field_mutable:common.ModuleScene.rebirth)
  return _msg;
}
inline void ModuleScene::set_allocated_rebirth(::common::RebirthInfo* rebirth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rebirth_;
  }
  if (rebirth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rebirth);
    if (message_arena != submessage_arena) {
      rebirth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rebirth, submessage_arena);
    }
    
  } else {
    
  }
  rebirth_ = rebirth;
  // @@protoc_insertion_point(field_set_allocated:common.ModuleScene.rebirth)
}

// -------------------------------------------------------------------

// ModuleSceneView

// .common.ViewObjectState state = 1;
inline bool ModuleSceneView::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool ModuleSceneView::has_state() const {
  return _internal_has_state();
}
inline void ModuleSceneView::clear_state() {
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::common::ViewObjectState& ModuleSceneView::_internal_state() const {
  const ::common::ViewObjectState* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ViewObjectState&>(
      ::common::_ViewObjectState_default_instance_);
}
inline const ::common::ViewObjectState& ModuleSceneView::state() const {
  // @@protoc_insertion_point(field_get:common.ModuleSceneView.state)
  return _internal_state();
}
inline void ModuleSceneView::unsafe_arena_set_allocated_state(
    ::common::ViewObjectState* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ModuleSceneView.state)
}
inline ::common::ViewObjectState* ModuleSceneView::release_state() {
  
  ::common::ViewObjectState* temp = state_;
  state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ViewObjectState* ModuleSceneView::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:common.ModuleSceneView.state)
  
  ::common::ViewObjectState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::common::ViewObjectState* ModuleSceneView::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ViewObjectState>(GetArenaForAllocation());
    state_ = p;
  }
  return state_;
}
inline ::common::ViewObjectState* ModuleSceneView::mutable_state() {
  ::common::ViewObjectState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:common.ModuleSceneView.state)
  return _msg;
}
inline void ModuleSceneView::set_allocated_state(::common::ViewObjectState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:common.ModuleSceneView.state)
}

// uint32 speed = 2;
inline void ModuleSceneView::clear_speed() {
  speed_ = 0u;
}
inline uint32_t ModuleSceneView::_internal_speed() const {
  return speed_;
}
inline uint32_t ModuleSceneView::speed() const {
  // @@protoc_insertion_point(field_get:common.ModuleSceneView.speed)
  return _internal_speed();
}
inline void ModuleSceneView::_internal_set_speed(uint32_t value) {
  
  speed_ = value;
}
inline void ModuleSceneView::set_speed(uint32_t value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:common.ModuleSceneView.speed)
}

// .common.ClientPosTogether postto = 3;
inline bool ModuleSceneView::_internal_has_postto() const {
  return this != internal_default_instance() && postto_ != nullptr;
}
inline bool ModuleSceneView::has_postto() const {
  return _internal_has_postto();
}
inline const ::common::ClientPosTogether& ModuleSceneView::_internal_postto() const {
  const ::common::ClientPosTogether* p = postto_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ClientPosTogether&>(
      ::common::_ClientPosTogether_default_instance_);
}
inline const ::common::ClientPosTogether& ModuleSceneView::postto() const {
  // @@protoc_insertion_point(field_get:common.ModuleSceneView.postto)
  return _internal_postto();
}
inline void ModuleSceneView::unsafe_arena_set_allocated_postto(
    ::common::ClientPosTogether* postto) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(postto_);
  }
  postto_ = postto;
  if (postto) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ModuleSceneView.postto)
}
inline ::common::ClientPosTogether* ModuleSceneView::release_postto() {
  
  ::common::ClientPosTogether* temp = postto_;
  postto_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ClientPosTogether* ModuleSceneView::unsafe_arena_release_postto() {
  // @@protoc_insertion_point(field_release:common.ModuleSceneView.postto)
  
  ::common::ClientPosTogether* temp = postto_;
  postto_ = nullptr;
  return temp;
}
inline ::common::ClientPosTogether* ModuleSceneView::_internal_mutable_postto() {
  
  if (postto_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ClientPosTogether>(GetArenaForAllocation());
    postto_ = p;
  }
  return postto_;
}
inline ::common::ClientPosTogether* ModuleSceneView::mutable_postto() {
  ::common::ClientPosTogether* _msg = _internal_mutable_postto();
  // @@protoc_insertion_point(field_mutable:common.ModuleSceneView.postto)
  return _msg;
}
inline void ModuleSceneView::set_allocated_postto(::common::ClientPosTogether* postto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(postto_);
  }
  if (postto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(postto));
    if (message_arena != submessage_arena) {
      postto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, postto, submessage_arena);
    }
    
  } else {
    
  }
  postto_ = postto;
  // @@protoc_insertion_point(field_set_allocated:common.ModuleSceneView.postto)
}

// uint64 selectId = 4;
inline void ModuleSceneView::clear_selectid() {
  selectid_ = uint64_t{0u};
}
inline uint64_t ModuleSceneView::_internal_selectid() const {
  return selectid_;
}
inline uint64_t ModuleSceneView::selectid() const {
  // @@protoc_insertion_point(field_get:common.ModuleSceneView.selectId)
  return _internal_selectid();
}
inline void ModuleSceneView::_internal_set_selectid(uint64_t value) {
  
  selectid_ = value;
}
inline void ModuleSceneView::set_selectid(uint64_t value) {
  _internal_set_selectid(value);
  // @@protoc_insertion_point(field_set:common.ModuleSceneView.selectId)
}

// .common.ProgressBar bar = 5;
inline bool ModuleSceneView::_internal_has_bar() const {
  return this != internal_default_instance() && bar_ != nullptr;
}
inline bool ModuleSceneView::has_bar() const {
  return _internal_has_bar();
}
inline const ::common::ProgressBar& ModuleSceneView::_internal_bar() const {
  const ::common::ProgressBar* p = bar_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ProgressBar&>(
      ::common::_ProgressBar_default_instance_);
}
inline const ::common::ProgressBar& ModuleSceneView::bar() const {
  // @@protoc_insertion_point(field_get:common.ModuleSceneView.bar)
  return _internal_bar();
}
inline void ModuleSceneView::unsafe_arena_set_allocated_bar(
    ::common::ProgressBar* bar) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bar_);
  }
  bar_ = bar;
  if (bar) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ModuleSceneView.bar)
}
inline ::common::ProgressBar* ModuleSceneView::release_bar() {
  
  ::common::ProgressBar* temp = bar_;
  bar_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ProgressBar* ModuleSceneView::unsafe_arena_release_bar() {
  // @@protoc_insertion_point(field_release:common.ModuleSceneView.bar)
  
  ::common::ProgressBar* temp = bar_;
  bar_ = nullptr;
  return temp;
}
inline ::common::ProgressBar* ModuleSceneView::_internal_mutable_bar() {
  
  if (bar_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ProgressBar>(GetArenaForAllocation());
    bar_ = p;
  }
  return bar_;
}
inline ::common::ProgressBar* ModuleSceneView::mutable_bar() {
  ::common::ProgressBar* _msg = _internal_mutable_bar();
  // @@protoc_insertion_point(field_mutable:common.ModuleSceneView.bar)
  return _msg;
}
inline void ModuleSceneView::set_allocated_bar(::common::ProgressBar* bar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bar_);
  }
  if (bar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bar));
    if (message_arena != submessage_arena) {
      bar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bar, submessage_arena);
    }
    
  } else {
    
  }
  bar_ = bar;
  // @@protoc_insertion_point(field_set_allocated:common.ModuleSceneView.bar)
}

// .common.ViewEffectList effectList = 6;
inline bool ModuleSceneView::_internal_has_effectlist() const {
  return this != internal_default_instance() && effectlist_ != nullptr;
}
inline bool ModuleSceneView::has_effectlist() const {
  return _internal_has_effectlist();
}
inline void ModuleSceneView::clear_effectlist() {
  if (GetArenaForAllocation() == nullptr && effectlist_ != nullptr) {
    delete effectlist_;
  }
  effectlist_ = nullptr;
}
inline const ::common::ViewEffectList& ModuleSceneView::_internal_effectlist() const {
  const ::common::ViewEffectList* p = effectlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ViewEffectList&>(
      ::common::_ViewEffectList_default_instance_);
}
inline const ::common::ViewEffectList& ModuleSceneView::effectlist() const {
  // @@protoc_insertion_point(field_get:common.ModuleSceneView.effectList)
  return _internal_effectlist();
}
inline void ModuleSceneView::unsafe_arena_set_allocated_effectlist(
    ::common::ViewEffectList* effectlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(effectlist_);
  }
  effectlist_ = effectlist;
  if (effectlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ModuleSceneView.effectList)
}
inline ::common::ViewEffectList* ModuleSceneView::release_effectlist() {
  
  ::common::ViewEffectList* temp = effectlist_;
  effectlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ViewEffectList* ModuleSceneView::unsafe_arena_release_effectlist() {
  // @@protoc_insertion_point(field_release:common.ModuleSceneView.effectList)
  
  ::common::ViewEffectList* temp = effectlist_;
  effectlist_ = nullptr;
  return temp;
}
inline ::common::ViewEffectList* ModuleSceneView::_internal_mutable_effectlist() {
  
  if (effectlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ViewEffectList>(GetArenaForAllocation());
    effectlist_ = p;
  }
  return effectlist_;
}
inline ::common::ViewEffectList* ModuleSceneView::mutable_effectlist() {
  ::common::ViewEffectList* _msg = _internal_mutable_effectlist();
  // @@protoc_insertion_point(field_mutable:common.ModuleSceneView.effectList)
  return _msg;
}
inline void ModuleSceneView::set_allocated_effectlist(::common::ViewEffectList* effectlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete effectlist_;
  }
  if (effectlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(effectlist);
    if (message_arena != submessage_arena) {
      effectlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, effectlist, submessage_arena);
    }
    
  } else {
    
  }
  effectlist_ = effectlist;
  // @@protoc_insertion_point(field_set_allocated:common.ModuleSceneView.effectList)
}

// -------------------------------------------------------------------

// ViewObjectState

// uint32 state = 1;
inline void ViewObjectState::clear_state() {
  state_ = 0u;
}
inline uint32_t ViewObjectState::_internal_state() const {
  return state_;
}
inline uint32_t ViewObjectState::state() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectState.state)
  return _internal_state();
}
inline void ViewObjectState::_internal_set_state(uint32_t value) {
  
  state_ = value;
}
inline void ViewObjectState::set_state(uint32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:common.ViewObjectState.state)
}

// uint64 stateTimeBegin = 2;
inline void ViewObjectState::clear_statetimebegin() {
  statetimebegin_ = uint64_t{0u};
}
inline uint64_t ViewObjectState::_internal_statetimebegin() const {
  return statetimebegin_;
}
inline uint64_t ViewObjectState::statetimebegin() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectState.stateTimeBegin)
  return _internal_statetimebegin();
}
inline void ViewObjectState::_internal_set_statetimebegin(uint64_t value) {
  
  statetimebegin_ = value;
}
inline void ViewObjectState::set_statetimebegin(uint64_t value) {
  _internal_set_statetimebegin(value);
  // @@protoc_insertion_point(field_set:common.ViewObjectState.stateTimeBegin)
}

// -------------------------------------------------------------------

// StaticViewList

// repeated .common.ViewObject objects = 1;
inline int StaticViewList::_internal_objects_size() const {
  return objects_.size();
}
inline int StaticViewList::objects_size() const {
  return _internal_objects_size();
}
inline void StaticViewList::clear_objects() {
  objects_.Clear();
}
inline ::common::ViewObject* StaticViewList::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:common.StaticViewList.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ViewObject >*
StaticViewList::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:common.StaticViewList.objects)
  return &objects_;
}
inline const ::common::ViewObject& StaticViewList::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::common::ViewObject& StaticViewList::objects(int index) const {
  // @@protoc_insertion_point(field_get:common.StaticViewList.objects)
  return _internal_objects(index);
}
inline ::common::ViewObject* StaticViewList::_internal_add_objects() {
  return objects_.Add();
}
inline ::common::ViewObject* StaticViewList::add_objects() {
  ::common::ViewObject* _add = _internal_add_objects();
  // @@protoc_insertion_point(field_add:common.StaticViewList.objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ViewObject >&
StaticViewList::objects() const {
  // @@protoc_insertion_point(field_list:common.StaticViewList.objects)
  return objects_;
}

// -------------------------------------------------------------------

// ViewObjectRole

// uint64 roleId = 1;
inline void ViewObjectRole::clear_roleid() {
  roleid_ = uint64_t{0u};
}
inline uint64_t ViewObjectRole::_internal_roleid() const {
  return roleid_;
}
inline uint64_t ViewObjectRole::roleid() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectRole.roleId)
  return _internal_roleid();
}
inline void ViewObjectRole::_internal_set_roleid(uint64_t value) {
  
  roleid_ = value;
}
inline void ViewObjectRole::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:common.ViewObjectRole.roleId)
}

// uint32 zoneIdF = 2;
inline void ViewObjectRole::clear_zoneidf() {
  zoneidf_ = 0u;
}
inline uint32_t ViewObjectRole::_internal_zoneidf() const {
  return zoneidf_;
}
inline uint32_t ViewObjectRole::zoneidf() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectRole.zoneIdF)
  return _internal_zoneidf();
}
inline void ViewObjectRole::_internal_set_zoneidf(uint32_t value) {
  
  zoneidf_ = value;
}
inline void ViewObjectRole::set_zoneidf(uint32_t value) {
  _internal_set_zoneidf(value);
  // @@protoc_insertion_point(field_set:common.ViewObjectRole.zoneIdF)
}

// -------------------------------------------------------------------

// ViewObjectNpc

// uint32 uid = 1;
inline void ViewObjectNpc::clear_uid() {
  uid_ = 0u;
}
inline uint32_t ViewObjectNpc::_internal_uid() const {
  return uid_;
}
inline uint32_t ViewObjectNpc::uid() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpc.uid)
  return _internal_uid();
}
inline void ViewObjectNpc::_internal_set_uid(uint32_t value) {
  
  uid_ = value;
}
inline void ViewObjectNpc::set_uid(uint32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:common.ViewObjectNpc.uid)
}

// uint32 type = 2;
inline void ViewObjectNpc::clear_type() {
  type_ = 0u;
}
inline uint32_t ViewObjectNpc::_internal_type() const {
  return type_;
}
inline uint32_t ViewObjectNpc::type() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpc.type)
  return _internal_type();
}
inline void ViewObjectNpc::_internal_set_type(uint32_t value) {
  
  type_ = value;
}
inline void ViewObjectNpc::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:common.ViewObjectNpc.type)
}

// uint32 tid = 3;
inline void ViewObjectNpc::clear_tid() {
  tid_ = 0u;
}
inline uint32_t ViewObjectNpc::_internal_tid() const {
  return tid_;
}
inline uint32_t ViewObjectNpc::tid() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpc.tid)
  return _internal_tid();
}
inline void ViewObjectNpc::_internal_set_tid(uint32_t value) {
  
  tid_ = value;
}
inline void ViewObjectNpc::set_tid(uint32_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:common.ViewObjectNpc.tid)
}

// .common.ViewObjectState state = 4;
inline bool ViewObjectNpc::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool ViewObjectNpc::has_state() const {
  return _internal_has_state();
}
inline void ViewObjectNpc::clear_state() {
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::common::ViewObjectState& ViewObjectNpc::_internal_state() const {
  const ::common::ViewObjectState* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ViewObjectState&>(
      ::common::_ViewObjectState_default_instance_);
}
inline const ::common::ViewObjectState& ViewObjectNpc::state() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpc.state)
  return _internal_state();
}
inline void ViewObjectNpc::unsafe_arena_set_allocated_state(
    ::common::ViewObjectState* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ViewObjectNpc.state)
}
inline ::common::ViewObjectState* ViewObjectNpc::release_state() {
  
  ::common::ViewObjectState* temp = state_;
  state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ViewObjectState* ViewObjectNpc::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:common.ViewObjectNpc.state)
  
  ::common::ViewObjectState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::common::ViewObjectState* ViewObjectNpc::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ViewObjectState>(GetArenaForAllocation());
    state_ = p;
  }
  return state_;
}
inline ::common::ViewObjectState* ViewObjectNpc::mutable_state() {
  ::common::ViewObjectState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:common.ViewObjectNpc.state)
  return _msg;
}
inline void ViewObjectNpc::set_allocated_state(::common::ViewObjectState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:common.ViewObjectNpc.state)
}

// .common.ClientPosTogether posto = 5;
inline bool ViewObjectNpc::_internal_has_posto() const {
  return this != internal_default_instance() && posto_ != nullptr;
}
inline bool ViewObjectNpc::has_posto() const {
  return _internal_has_posto();
}
inline const ::common::ClientPosTogether& ViewObjectNpc::_internal_posto() const {
  const ::common::ClientPosTogether* p = posto_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ClientPosTogether&>(
      ::common::_ClientPosTogether_default_instance_);
}
inline const ::common::ClientPosTogether& ViewObjectNpc::posto() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpc.posto)
  return _internal_posto();
}
inline void ViewObjectNpc::unsafe_arena_set_allocated_posto(
    ::common::ClientPosTogether* posto) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(posto_);
  }
  posto_ = posto;
  if (posto) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ViewObjectNpc.posto)
}
inline ::common::ClientPosTogether* ViewObjectNpc::release_posto() {
  
  ::common::ClientPosTogether* temp = posto_;
  posto_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ClientPosTogether* ViewObjectNpc::unsafe_arena_release_posto() {
  // @@protoc_insertion_point(field_release:common.ViewObjectNpc.posto)
  
  ::common::ClientPosTogether* temp = posto_;
  posto_ = nullptr;
  return temp;
}
inline ::common::ClientPosTogether* ViewObjectNpc::_internal_mutable_posto() {
  
  if (posto_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ClientPosTogether>(GetArenaForAllocation());
    posto_ = p;
  }
  return posto_;
}
inline ::common::ClientPosTogether* ViewObjectNpc::mutable_posto() {
  ::common::ClientPosTogether* _msg = _internal_mutable_posto();
  // @@protoc_insertion_point(field_mutable:common.ViewObjectNpc.posto)
  return _msg;
}
inline void ViewObjectNpc::set_allocated_posto(::common::ClientPosTogether* posto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(posto_);
  }
  if (posto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(posto));
    if (message_arena != submessage_arena) {
      posto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, posto, submessage_arena);
    }
    
  } else {
    
  }
  posto_ = posto;
  // @@protoc_insertion_point(field_set_allocated:common.ViewObjectNpc.posto)
}

// .common.ViewObjectNpcFunc npcf = 100;
inline bool ViewObjectNpc::_internal_has_npcf() const {
  return this != internal_default_instance() && npcf_ != nullptr;
}
inline bool ViewObjectNpc::has_npcf() const {
  return _internal_has_npcf();
}
inline void ViewObjectNpc::clear_npcf() {
  if (GetArenaForAllocation() == nullptr && npcf_ != nullptr) {
    delete npcf_;
  }
  npcf_ = nullptr;
}
inline const ::common::ViewObjectNpcFunc& ViewObjectNpc::_internal_npcf() const {
  const ::common::ViewObjectNpcFunc* p = npcf_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ViewObjectNpcFunc&>(
      ::common::_ViewObjectNpcFunc_default_instance_);
}
inline const ::common::ViewObjectNpcFunc& ViewObjectNpc::npcf() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpc.npcf)
  return _internal_npcf();
}
inline void ViewObjectNpc::unsafe_arena_set_allocated_npcf(
    ::common::ViewObjectNpcFunc* npcf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(npcf_);
  }
  npcf_ = npcf;
  if (npcf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ViewObjectNpc.npcf)
}
inline ::common::ViewObjectNpcFunc* ViewObjectNpc::release_npcf() {
  
  ::common::ViewObjectNpcFunc* temp = npcf_;
  npcf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ViewObjectNpcFunc* ViewObjectNpc::unsafe_arena_release_npcf() {
  // @@protoc_insertion_point(field_release:common.ViewObjectNpc.npcf)
  
  ::common::ViewObjectNpcFunc* temp = npcf_;
  npcf_ = nullptr;
  return temp;
}
inline ::common::ViewObjectNpcFunc* ViewObjectNpc::_internal_mutable_npcf() {
  
  if (npcf_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ViewObjectNpcFunc>(GetArenaForAllocation());
    npcf_ = p;
  }
  return npcf_;
}
inline ::common::ViewObjectNpcFunc* ViewObjectNpc::mutable_npcf() {
  ::common::ViewObjectNpcFunc* _msg = _internal_mutable_npcf();
  // @@protoc_insertion_point(field_mutable:common.ViewObjectNpc.npcf)
  return _msg;
}
inline void ViewObjectNpc::set_allocated_npcf(::common::ViewObjectNpcFunc* npcf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete npcf_;
  }
  if (npcf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(npcf);
    if (message_arena != submessage_arena) {
      npcf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, npcf, submessage_arena);
    }
    
  } else {
    
  }
  npcf_ = npcf;
  // @@protoc_insertion_point(field_set_allocated:common.ViewObjectNpc.npcf)
}

// .common.ViewObjectNpcMonster npcm = 101;
inline bool ViewObjectNpc::_internal_has_npcm() const {
  return this != internal_default_instance() && npcm_ != nullptr;
}
inline bool ViewObjectNpc::has_npcm() const {
  return _internal_has_npcm();
}
inline void ViewObjectNpc::clear_npcm() {
  if (GetArenaForAllocation() == nullptr && npcm_ != nullptr) {
    delete npcm_;
  }
  npcm_ = nullptr;
}
inline const ::common::ViewObjectNpcMonster& ViewObjectNpc::_internal_npcm() const {
  const ::common::ViewObjectNpcMonster* p = npcm_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ViewObjectNpcMonster&>(
      ::common::_ViewObjectNpcMonster_default_instance_);
}
inline const ::common::ViewObjectNpcMonster& ViewObjectNpc::npcm() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpc.npcm)
  return _internal_npcm();
}
inline void ViewObjectNpc::unsafe_arena_set_allocated_npcm(
    ::common::ViewObjectNpcMonster* npcm) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(npcm_);
  }
  npcm_ = npcm;
  if (npcm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ViewObjectNpc.npcm)
}
inline ::common::ViewObjectNpcMonster* ViewObjectNpc::release_npcm() {
  
  ::common::ViewObjectNpcMonster* temp = npcm_;
  npcm_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ViewObjectNpcMonster* ViewObjectNpc::unsafe_arena_release_npcm() {
  // @@protoc_insertion_point(field_release:common.ViewObjectNpc.npcm)
  
  ::common::ViewObjectNpcMonster* temp = npcm_;
  npcm_ = nullptr;
  return temp;
}
inline ::common::ViewObjectNpcMonster* ViewObjectNpc::_internal_mutable_npcm() {
  
  if (npcm_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ViewObjectNpcMonster>(GetArenaForAllocation());
    npcm_ = p;
  }
  return npcm_;
}
inline ::common::ViewObjectNpcMonster* ViewObjectNpc::mutable_npcm() {
  ::common::ViewObjectNpcMonster* _msg = _internal_mutable_npcm();
  // @@protoc_insertion_point(field_mutable:common.ViewObjectNpc.npcm)
  return _msg;
}
inline void ViewObjectNpc::set_allocated_npcm(::common::ViewObjectNpcMonster* npcm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete npcm_;
  }
  if (npcm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(npcm);
    if (message_arena != submessage_arena) {
      npcm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, npcm, submessage_arena);
    }
    
  } else {
    
  }
  npcm_ = npcm;
  // @@protoc_insertion_point(field_set_allocated:common.ViewObjectNpc.npcm)
}

// .common.ViewObjectNpcCollection npcc = 102;
inline bool ViewObjectNpc::_internal_has_npcc() const {
  return this != internal_default_instance() && npcc_ != nullptr;
}
inline bool ViewObjectNpc::has_npcc() const {
  return _internal_has_npcc();
}
inline void ViewObjectNpc::clear_npcc() {
  if (GetArenaForAllocation() == nullptr && npcc_ != nullptr) {
    delete npcc_;
  }
  npcc_ = nullptr;
}
inline const ::common::ViewObjectNpcCollection& ViewObjectNpc::_internal_npcc() const {
  const ::common::ViewObjectNpcCollection* p = npcc_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ViewObjectNpcCollection&>(
      ::common::_ViewObjectNpcCollection_default_instance_);
}
inline const ::common::ViewObjectNpcCollection& ViewObjectNpc::npcc() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpc.npcc)
  return _internal_npcc();
}
inline void ViewObjectNpc::unsafe_arena_set_allocated_npcc(
    ::common::ViewObjectNpcCollection* npcc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(npcc_);
  }
  npcc_ = npcc;
  if (npcc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ViewObjectNpc.npcc)
}
inline ::common::ViewObjectNpcCollection* ViewObjectNpc::release_npcc() {
  
  ::common::ViewObjectNpcCollection* temp = npcc_;
  npcc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ViewObjectNpcCollection* ViewObjectNpc::unsafe_arena_release_npcc() {
  // @@protoc_insertion_point(field_release:common.ViewObjectNpc.npcc)
  
  ::common::ViewObjectNpcCollection* temp = npcc_;
  npcc_ = nullptr;
  return temp;
}
inline ::common::ViewObjectNpcCollection* ViewObjectNpc::_internal_mutable_npcc() {
  
  if (npcc_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ViewObjectNpcCollection>(GetArenaForAllocation());
    npcc_ = p;
  }
  return npcc_;
}
inline ::common::ViewObjectNpcCollection* ViewObjectNpc::mutable_npcc() {
  ::common::ViewObjectNpcCollection* _msg = _internal_mutable_npcc();
  // @@protoc_insertion_point(field_mutable:common.ViewObjectNpc.npcc)
  return _msg;
}
inline void ViewObjectNpc::set_allocated_npcc(::common::ViewObjectNpcCollection* npcc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete npcc_;
  }
  if (npcc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(npcc);
    if (message_arena != submessage_arena) {
      npcc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, npcc, submessage_arena);
    }
    
  } else {
    
  }
  npcc_ = npcc;
  // @@protoc_insertion_point(field_set_allocated:common.ViewObjectNpc.npcc)
}

// .common.ViewObjectNpcSkill npcs = 103;
inline bool ViewObjectNpc::_internal_has_npcs() const {
  return this != internal_default_instance() && npcs_ != nullptr;
}
inline bool ViewObjectNpc::has_npcs() const {
  return _internal_has_npcs();
}
inline void ViewObjectNpc::clear_npcs() {
  if (GetArenaForAllocation() == nullptr && npcs_ != nullptr) {
    delete npcs_;
  }
  npcs_ = nullptr;
}
inline const ::common::ViewObjectNpcSkill& ViewObjectNpc::_internal_npcs() const {
  const ::common::ViewObjectNpcSkill* p = npcs_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ViewObjectNpcSkill&>(
      ::common::_ViewObjectNpcSkill_default_instance_);
}
inline const ::common::ViewObjectNpcSkill& ViewObjectNpc::npcs() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpc.npcs)
  return _internal_npcs();
}
inline void ViewObjectNpc::unsafe_arena_set_allocated_npcs(
    ::common::ViewObjectNpcSkill* npcs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(npcs_);
  }
  npcs_ = npcs;
  if (npcs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ViewObjectNpc.npcs)
}
inline ::common::ViewObjectNpcSkill* ViewObjectNpc::release_npcs() {
  
  ::common::ViewObjectNpcSkill* temp = npcs_;
  npcs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ViewObjectNpcSkill* ViewObjectNpc::unsafe_arena_release_npcs() {
  // @@protoc_insertion_point(field_release:common.ViewObjectNpc.npcs)
  
  ::common::ViewObjectNpcSkill* temp = npcs_;
  npcs_ = nullptr;
  return temp;
}
inline ::common::ViewObjectNpcSkill* ViewObjectNpc::_internal_mutable_npcs() {
  
  if (npcs_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ViewObjectNpcSkill>(GetArenaForAllocation());
    npcs_ = p;
  }
  return npcs_;
}
inline ::common::ViewObjectNpcSkill* ViewObjectNpc::mutable_npcs() {
  ::common::ViewObjectNpcSkill* _msg = _internal_mutable_npcs();
  // @@protoc_insertion_point(field_mutable:common.ViewObjectNpc.npcs)
  return _msg;
}
inline void ViewObjectNpc::set_allocated_npcs(::common::ViewObjectNpcSkill* npcs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete npcs_;
  }
  if (npcs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(npcs);
    if (message_arena != submessage_arena) {
      npcs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, npcs, submessage_arena);
    }
    
  } else {
    
  }
  npcs_ = npcs;
  // @@protoc_insertion_point(field_set_allocated:common.ViewObjectNpc.npcs)
}

// .common.ViewObjectNpcTrigger npct = 104;
inline bool ViewObjectNpc::_internal_has_npct() const {
  return this != internal_default_instance() && npct_ != nullptr;
}
inline bool ViewObjectNpc::has_npct() const {
  return _internal_has_npct();
}
inline void ViewObjectNpc::clear_npct() {
  if (GetArenaForAllocation() == nullptr && npct_ != nullptr) {
    delete npct_;
  }
  npct_ = nullptr;
}
inline const ::common::ViewObjectNpcTrigger& ViewObjectNpc::_internal_npct() const {
  const ::common::ViewObjectNpcTrigger* p = npct_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ViewObjectNpcTrigger&>(
      ::common::_ViewObjectNpcTrigger_default_instance_);
}
inline const ::common::ViewObjectNpcTrigger& ViewObjectNpc::npct() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpc.npct)
  return _internal_npct();
}
inline void ViewObjectNpc::unsafe_arena_set_allocated_npct(
    ::common::ViewObjectNpcTrigger* npct) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(npct_);
  }
  npct_ = npct;
  if (npct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ViewObjectNpc.npct)
}
inline ::common::ViewObjectNpcTrigger* ViewObjectNpc::release_npct() {
  
  ::common::ViewObjectNpcTrigger* temp = npct_;
  npct_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ViewObjectNpcTrigger* ViewObjectNpc::unsafe_arena_release_npct() {
  // @@protoc_insertion_point(field_release:common.ViewObjectNpc.npct)
  
  ::common::ViewObjectNpcTrigger* temp = npct_;
  npct_ = nullptr;
  return temp;
}
inline ::common::ViewObjectNpcTrigger* ViewObjectNpc::_internal_mutable_npct() {
  
  if (npct_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ViewObjectNpcTrigger>(GetArenaForAllocation());
    npct_ = p;
  }
  return npct_;
}
inline ::common::ViewObjectNpcTrigger* ViewObjectNpc::mutable_npct() {
  ::common::ViewObjectNpcTrigger* _msg = _internal_mutable_npct();
  // @@protoc_insertion_point(field_mutable:common.ViewObjectNpc.npct)
  return _msg;
}
inline void ViewObjectNpc::set_allocated_npct(::common::ViewObjectNpcTrigger* npct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete npct_;
  }
  if (npct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(npct);
    if (message_arena != submessage_arena) {
      npct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, npct, submessage_arena);
    }
    
  } else {
    
  }
  npct_ = npct;
  // @@protoc_insertion_point(field_set_allocated:common.ViewObjectNpc.npct)
}

// .common.ViewObjectNpcBlock npcb = 105;
inline bool ViewObjectNpc::_internal_has_npcb() const {
  return this != internal_default_instance() && npcb_ != nullptr;
}
inline bool ViewObjectNpc::has_npcb() const {
  return _internal_has_npcb();
}
inline void ViewObjectNpc::clear_npcb() {
  if (GetArenaForAllocation() == nullptr && npcb_ != nullptr) {
    delete npcb_;
  }
  npcb_ = nullptr;
}
inline const ::common::ViewObjectNpcBlock& ViewObjectNpc::_internal_npcb() const {
  const ::common::ViewObjectNpcBlock* p = npcb_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ViewObjectNpcBlock&>(
      ::common::_ViewObjectNpcBlock_default_instance_);
}
inline const ::common::ViewObjectNpcBlock& ViewObjectNpc::npcb() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpc.npcb)
  return _internal_npcb();
}
inline void ViewObjectNpc::unsafe_arena_set_allocated_npcb(
    ::common::ViewObjectNpcBlock* npcb) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(npcb_);
  }
  npcb_ = npcb;
  if (npcb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ViewObjectNpc.npcb)
}
inline ::common::ViewObjectNpcBlock* ViewObjectNpc::release_npcb() {
  
  ::common::ViewObjectNpcBlock* temp = npcb_;
  npcb_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ViewObjectNpcBlock* ViewObjectNpc::unsafe_arena_release_npcb() {
  // @@protoc_insertion_point(field_release:common.ViewObjectNpc.npcb)
  
  ::common::ViewObjectNpcBlock* temp = npcb_;
  npcb_ = nullptr;
  return temp;
}
inline ::common::ViewObjectNpcBlock* ViewObjectNpc::_internal_mutable_npcb() {
  
  if (npcb_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ViewObjectNpcBlock>(GetArenaForAllocation());
    npcb_ = p;
  }
  return npcb_;
}
inline ::common::ViewObjectNpcBlock* ViewObjectNpc::mutable_npcb() {
  ::common::ViewObjectNpcBlock* _msg = _internal_mutable_npcb();
  // @@protoc_insertion_point(field_mutable:common.ViewObjectNpc.npcb)
  return _msg;
}
inline void ViewObjectNpc::set_allocated_npcb(::common::ViewObjectNpcBlock* npcb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete npcb_;
  }
  if (npcb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(npcb);
    if (message_arena != submessage_arena) {
      npcb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, npcb, submessage_arena);
    }
    
  } else {
    
  }
  npcb_ = npcb;
  // @@protoc_insertion_point(field_set_allocated:common.ViewObjectNpc.npcb)
}

// .common.ViewObjectNpcRegional npcr = 106;
inline bool ViewObjectNpc::_internal_has_npcr() const {
  return this != internal_default_instance() && npcr_ != nullptr;
}
inline bool ViewObjectNpc::has_npcr() const {
  return _internal_has_npcr();
}
inline void ViewObjectNpc::clear_npcr() {
  if (GetArenaForAllocation() == nullptr && npcr_ != nullptr) {
    delete npcr_;
  }
  npcr_ = nullptr;
}
inline const ::common::ViewObjectNpcRegional& ViewObjectNpc::_internal_npcr() const {
  const ::common::ViewObjectNpcRegional* p = npcr_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ViewObjectNpcRegional&>(
      ::common::_ViewObjectNpcRegional_default_instance_);
}
inline const ::common::ViewObjectNpcRegional& ViewObjectNpc::npcr() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpc.npcr)
  return _internal_npcr();
}
inline void ViewObjectNpc::unsafe_arena_set_allocated_npcr(
    ::common::ViewObjectNpcRegional* npcr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(npcr_);
  }
  npcr_ = npcr;
  if (npcr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ViewObjectNpc.npcr)
}
inline ::common::ViewObjectNpcRegional* ViewObjectNpc::release_npcr() {
  
  ::common::ViewObjectNpcRegional* temp = npcr_;
  npcr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ViewObjectNpcRegional* ViewObjectNpc::unsafe_arena_release_npcr() {
  // @@protoc_insertion_point(field_release:common.ViewObjectNpc.npcr)
  
  ::common::ViewObjectNpcRegional* temp = npcr_;
  npcr_ = nullptr;
  return temp;
}
inline ::common::ViewObjectNpcRegional* ViewObjectNpc::_internal_mutable_npcr() {
  
  if (npcr_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ViewObjectNpcRegional>(GetArenaForAllocation());
    npcr_ = p;
  }
  return npcr_;
}
inline ::common::ViewObjectNpcRegional* ViewObjectNpc::mutable_npcr() {
  ::common::ViewObjectNpcRegional* _msg = _internal_mutable_npcr();
  // @@protoc_insertion_point(field_mutable:common.ViewObjectNpc.npcr)
  return _msg;
}
inline void ViewObjectNpc::set_allocated_npcr(::common::ViewObjectNpcRegional* npcr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete npcr_;
  }
  if (npcr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(npcr);
    if (message_arena != submessage_arena) {
      npcr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, npcr, submessage_arena);
    }
    
  } else {
    
  }
  npcr_ = npcr;
  // @@protoc_insertion_point(field_set_allocated:common.ViewObjectNpc.npcr)
}

// -------------------------------------------------------------------

// ViewObjectNpcFunc

// -------------------------------------------------------------------

// ViewObjectNpcMonster

// uint32 hp = 1;
inline void ViewObjectNpcMonster::clear_hp() {
  hp_ = 0u;
}
inline uint32_t ViewObjectNpcMonster::_internal_hp() const {
  return hp_;
}
inline uint32_t ViewObjectNpcMonster::hp() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpcMonster.hp)
  return _internal_hp();
}
inline void ViewObjectNpcMonster::_internal_set_hp(uint32_t value) {
  
  hp_ = value;
}
inline void ViewObjectNpcMonster::set_hp(uint32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:common.ViewObjectNpcMonster.hp)
}

// uint32 hpmax = 2;
inline void ViewObjectNpcMonster::clear_hpmax() {
  hpmax_ = 0u;
}
inline uint32_t ViewObjectNpcMonster::_internal_hpmax() const {
  return hpmax_;
}
inline uint32_t ViewObjectNpcMonster::hpmax() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpcMonster.hpmax)
  return _internal_hpmax();
}
inline void ViewObjectNpcMonster::_internal_set_hpmax(uint32_t value) {
  
  hpmax_ = value;
}
inline void ViewObjectNpcMonster::set_hpmax(uint32_t value) {
  _internal_set_hpmax(value);
  // @@protoc_insertion_point(field_set:common.ViewObjectNpcMonster.hpmax)
}

// uint32 level = 3;
inline void ViewObjectNpcMonster::clear_level() {
  level_ = 0u;
}
inline uint32_t ViewObjectNpcMonster::_internal_level() const {
  return level_;
}
inline uint32_t ViewObjectNpcMonster::level() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpcMonster.level)
  return _internal_level();
}
inline void ViewObjectNpcMonster::_internal_set_level(uint32_t value) {
  
  level_ = value;
}
inline void ViewObjectNpcMonster::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:common.ViewObjectNpcMonster.level)
}

// uint64 selectId = 4;
inline void ViewObjectNpcMonster::clear_selectid() {
  selectid_ = uint64_t{0u};
}
inline uint64_t ViewObjectNpcMonster::_internal_selectid() const {
  return selectid_;
}
inline uint64_t ViewObjectNpcMonster::selectid() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpcMonster.selectId)
  return _internal_selectid();
}
inline void ViewObjectNpcMonster::_internal_set_selectid(uint64_t value) {
  
  selectid_ = value;
}
inline void ViewObjectNpcMonster::set_selectid(uint64_t value) {
  _internal_set_selectid(value);
  // @@protoc_insertion_point(field_set:common.ViewObjectNpcMonster.selectId)
}

// uint32 speed = 5;
inline void ViewObjectNpcMonster::clear_speed() {
  speed_ = 0u;
}
inline uint32_t ViewObjectNpcMonster::_internal_speed() const {
  return speed_;
}
inline uint32_t ViewObjectNpcMonster::speed() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpcMonster.speed)
  return _internal_speed();
}
inline void ViewObjectNpcMonster::_internal_set_speed(uint32_t value) {
  
  speed_ = value;
}
inline void ViewObjectNpcMonster::set_speed(uint32_t value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:common.ViewObjectNpcMonster.speed)
}

// uint32 mp = 6;
inline void ViewObjectNpcMonster::clear_mp() {
  mp_ = 0u;
}
inline uint32_t ViewObjectNpcMonster::_internal_mp() const {
  return mp_;
}
inline uint32_t ViewObjectNpcMonster::mp() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpcMonster.mp)
  return _internal_mp();
}
inline void ViewObjectNpcMonster::_internal_set_mp(uint32_t value) {
  
  mp_ = value;
}
inline void ViewObjectNpcMonster::set_mp(uint32_t value) {
  _internal_set_mp(value);
  // @@protoc_insertion_point(field_set:common.ViewObjectNpcMonster.mp)
}

// uint32 mpmax = 7;
inline void ViewObjectNpcMonster::clear_mpmax() {
  mpmax_ = 0u;
}
inline uint32_t ViewObjectNpcMonster::_internal_mpmax() const {
  return mpmax_;
}
inline uint32_t ViewObjectNpcMonster::mpmax() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpcMonster.mpmax)
  return _internal_mpmax();
}
inline void ViewObjectNpcMonster::_internal_set_mpmax(uint32_t value) {
  
  mpmax_ = value;
}
inline void ViewObjectNpcMonster::set_mpmax(uint32_t value) {
  _internal_set_mpmax(value);
  // @@protoc_insertion_point(field_set:common.ViewObjectNpcMonster.mpmax)
}

// uint32 shield = 8;
inline void ViewObjectNpcMonster::clear_shield() {
  shield_ = 0u;
}
inline uint32_t ViewObjectNpcMonster::_internal_shield() const {
  return shield_;
}
inline uint32_t ViewObjectNpcMonster::shield() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpcMonster.shield)
  return _internal_shield();
}
inline void ViewObjectNpcMonster::_internal_set_shield(uint32_t value) {
  
  shield_ = value;
}
inline void ViewObjectNpcMonster::set_shield(uint32_t value) {
  _internal_set_shield(value);
  // @@protoc_insertion_point(field_set:common.ViewObjectNpcMonster.shield)
}

// uint64 packId = 9;
inline void ViewObjectNpcMonster::clear_packid() {
  packid_ = uint64_t{0u};
}
inline uint64_t ViewObjectNpcMonster::_internal_packid() const {
  return packid_;
}
inline uint64_t ViewObjectNpcMonster::packid() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpcMonster.packId)
  return _internal_packid();
}
inline void ViewObjectNpcMonster::_internal_set_packid(uint64_t value) {
  
  packid_ = value;
}
inline void ViewObjectNpcMonster::set_packid(uint64_t value) {
  _internal_set_packid(value);
  // @@protoc_insertion_point(field_set:common.ViewObjectNpcMonster.packId)
}

// uint32 erosion = 10;
inline void ViewObjectNpcMonster::clear_erosion() {
  erosion_ = 0u;
}
inline uint32_t ViewObjectNpcMonster::_internal_erosion() const {
  return erosion_;
}
inline uint32_t ViewObjectNpcMonster::erosion() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpcMonster.erosion)
  return _internal_erosion();
}
inline void ViewObjectNpcMonster::_internal_set_erosion(uint32_t value) {
  
  erosion_ = value;
}
inline void ViewObjectNpcMonster::set_erosion(uint32_t value) {
  _internal_set_erosion(value);
  // @@protoc_insertion_point(field_set:common.ViewObjectNpcMonster.erosion)
}

// .common.NpcSpeak speak = 11;
inline bool ViewObjectNpcMonster::_internal_has_speak() const {
  return this != internal_default_instance() && speak_ != nullptr;
}
inline bool ViewObjectNpcMonster::has_speak() const {
  return _internal_has_speak();
}
inline const ::common::NpcSpeak& ViewObjectNpcMonster::_internal_speak() const {
  const ::common::NpcSpeak* p = speak_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::NpcSpeak&>(
      ::common::_NpcSpeak_default_instance_);
}
inline const ::common::NpcSpeak& ViewObjectNpcMonster::speak() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpcMonster.speak)
  return _internal_speak();
}
inline void ViewObjectNpcMonster::unsafe_arena_set_allocated_speak(
    ::common::NpcSpeak* speak) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speak_);
  }
  speak_ = speak;
  if (speak) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ViewObjectNpcMonster.speak)
}
inline ::common::NpcSpeak* ViewObjectNpcMonster::release_speak() {
  
  ::common::NpcSpeak* temp = speak_;
  speak_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::NpcSpeak* ViewObjectNpcMonster::unsafe_arena_release_speak() {
  // @@protoc_insertion_point(field_release:common.ViewObjectNpcMonster.speak)
  
  ::common::NpcSpeak* temp = speak_;
  speak_ = nullptr;
  return temp;
}
inline ::common::NpcSpeak* ViewObjectNpcMonster::_internal_mutable_speak() {
  
  if (speak_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::NpcSpeak>(GetArenaForAllocation());
    speak_ = p;
  }
  return speak_;
}
inline ::common::NpcSpeak* ViewObjectNpcMonster::mutable_speak() {
  ::common::NpcSpeak* _msg = _internal_mutable_speak();
  // @@protoc_insertion_point(field_mutable:common.ViewObjectNpcMonster.speak)
  return _msg;
}
inline void ViewObjectNpcMonster::set_allocated_speak(::common::NpcSpeak* speak) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(speak_);
  }
  if (speak) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speak));
    if (message_arena != submessage_arena) {
      speak = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speak, submessage_arena);
    }
    
  } else {
    
  }
  speak_ = speak;
  // @@protoc_insertion_point(field_set_allocated:common.ViewObjectNpcMonster.speak)
}

// .common.ProgressBar bar = 12;
inline bool ViewObjectNpcMonster::_internal_has_bar() const {
  return this != internal_default_instance() && bar_ != nullptr;
}
inline bool ViewObjectNpcMonster::has_bar() const {
  return _internal_has_bar();
}
inline const ::common::ProgressBar& ViewObjectNpcMonster::_internal_bar() const {
  const ::common::ProgressBar* p = bar_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ProgressBar&>(
      ::common::_ProgressBar_default_instance_);
}
inline const ::common::ProgressBar& ViewObjectNpcMonster::bar() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpcMonster.bar)
  return _internal_bar();
}
inline void ViewObjectNpcMonster::unsafe_arena_set_allocated_bar(
    ::common::ProgressBar* bar) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bar_);
  }
  bar_ = bar;
  if (bar) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ViewObjectNpcMonster.bar)
}
inline ::common::ProgressBar* ViewObjectNpcMonster::release_bar() {
  
  ::common::ProgressBar* temp = bar_;
  bar_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ProgressBar* ViewObjectNpcMonster::unsafe_arena_release_bar() {
  // @@protoc_insertion_point(field_release:common.ViewObjectNpcMonster.bar)
  
  ::common::ProgressBar* temp = bar_;
  bar_ = nullptr;
  return temp;
}
inline ::common::ProgressBar* ViewObjectNpcMonster::_internal_mutable_bar() {
  
  if (bar_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ProgressBar>(GetArenaForAllocation());
    bar_ = p;
  }
  return bar_;
}
inline ::common::ProgressBar* ViewObjectNpcMonster::mutable_bar() {
  ::common::ProgressBar* _msg = _internal_mutable_bar();
  // @@protoc_insertion_point(field_mutable:common.ViewObjectNpcMonster.bar)
  return _msg;
}
inline void ViewObjectNpcMonster::set_allocated_bar(::common::ProgressBar* bar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bar_);
  }
  if (bar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bar));
    if (message_arena != submessage_arena) {
      bar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bar, submessage_arena);
    }
    
  } else {
    
  }
  bar_ = bar;
  // @@protoc_insertion_point(field_set_allocated:common.ViewObjectNpcMonster.bar)
}

// .common.NpcCountDownList countdown = 13;
inline bool ViewObjectNpcMonster::_internal_has_countdown() const {
  return this != internal_default_instance() && countdown_ != nullptr;
}
inline bool ViewObjectNpcMonster::has_countdown() const {
  return _internal_has_countdown();
}
inline const ::common::NpcCountDownList& ViewObjectNpcMonster::_internal_countdown() const {
  const ::common::NpcCountDownList* p = countdown_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::NpcCountDownList&>(
      ::common::_NpcCountDownList_default_instance_);
}
inline const ::common::NpcCountDownList& ViewObjectNpcMonster::countdown() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpcMonster.countdown)
  return _internal_countdown();
}
inline void ViewObjectNpcMonster::unsafe_arena_set_allocated_countdown(
    ::common::NpcCountDownList* countdown) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(countdown_);
  }
  countdown_ = countdown;
  if (countdown) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ViewObjectNpcMonster.countdown)
}
inline ::common::NpcCountDownList* ViewObjectNpcMonster::release_countdown() {
  
  ::common::NpcCountDownList* temp = countdown_;
  countdown_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::NpcCountDownList* ViewObjectNpcMonster::unsafe_arena_release_countdown() {
  // @@protoc_insertion_point(field_release:common.ViewObjectNpcMonster.countdown)
  
  ::common::NpcCountDownList* temp = countdown_;
  countdown_ = nullptr;
  return temp;
}
inline ::common::NpcCountDownList* ViewObjectNpcMonster::_internal_mutable_countdown() {
  
  if (countdown_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::NpcCountDownList>(GetArenaForAllocation());
    countdown_ = p;
  }
  return countdown_;
}
inline ::common::NpcCountDownList* ViewObjectNpcMonster::mutable_countdown() {
  ::common::NpcCountDownList* _msg = _internal_mutable_countdown();
  // @@protoc_insertion_point(field_mutable:common.ViewObjectNpcMonster.countdown)
  return _msg;
}
inline void ViewObjectNpcMonster::set_allocated_countdown(::common::NpcCountDownList* countdown) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(countdown_);
  }
  if (countdown) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(countdown));
    if (message_arena != submessage_arena) {
      countdown = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, countdown, submessage_arena);
    }
    
  } else {
    
  }
  countdown_ = countdown;
  // @@protoc_insertion_point(field_set_allocated:common.ViewObjectNpcMonster.countdown)
}

// .common.NpcHatredList hatredlist = 14;
inline bool ViewObjectNpcMonster::_internal_has_hatredlist() const {
  return this != internal_default_instance() && hatredlist_ != nullptr;
}
inline bool ViewObjectNpcMonster::has_hatredlist() const {
  return _internal_has_hatredlist();
}
inline const ::common::NpcHatredList& ViewObjectNpcMonster::_internal_hatredlist() const {
  const ::common::NpcHatredList* p = hatredlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::NpcHatredList&>(
      ::common::_NpcHatredList_default_instance_);
}
inline const ::common::NpcHatredList& ViewObjectNpcMonster::hatredlist() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpcMonster.hatredlist)
  return _internal_hatredlist();
}
inline void ViewObjectNpcMonster::unsafe_arena_set_allocated_hatredlist(
    ::common::NpcHatredList* hatredlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hatredlist_);
  }
  hatredlist_ = hatredlist;
  if (hatredlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ViewObjectNpcMonster.hatredlist)
}
inline ::common::NpcHatredList* ViewObjectNpcMonster::release_hatredlist() {
  
  ::common::NpcHatredList* temp = hatredlist_;
  hatredlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::NpcHatredList* ViewObjectNpcMonster::unsafe_arena_release_hatredlist() {
  // @@protoc_insertion_point(field_release:common.ViewObjectNpcMonster.hatredlist)
  
  ::common::NpcHatredList* temp = hatredlist_;
  hatredlist_ = nullptr;
  return temp;
}
inline ::common::NpcHatredList* ViewObjectNpcMonster::_internal_mutable_hatredlist() {
  
  if (hatredlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::NpcHatredList>(GetArenaForAllocation());
    hatredlist_ = p;
  }
  return hatredlist_;
}
inline ::common::NpcHatredList* ViewObjectNpcMonster::mutable_hatredlist() {
  ::common::NpcHatredList* _msg = _internal_mutable_hatredlist();
  // @@protoc_insertion_point(field_mutable:common.ViewObjectNpcMonster.hatredlist)
  return _msg;
}
inline void ViewObjectNpcMonster::set_allocated_hatredlist(::common::NpcHatredList* hatredlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hatredlist_);
  }
  if (hatredlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hatredlist));
    if (message_arena != submessage_arena) {
      hatredlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hatredlist, submessage_arena);
    }
    
  } else {
    
  }
  hatredlist_ = hatredlist;
  // @@protoc_insertion_point(field_set_allocated:common.ViewObjectNpcMonster.hatredlist)
}

// -------------------------------------------------------------------

// ViewObjectNpcCollection

// uint32 collectstatus = 1;
inline void ViewObjectNpcCollection::clear_collectstatus() {
  collectstatus_ = 0u;
}
inline uint32_t ViewObjectNpcCollection::_internal_collectstatus() const {
  return collectstatus_;
}
inline uint32_t ViewObjectNpcCollection::collectstatus() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpcCollection.collectstatus)
  return _internal_collectstatus();
}
inline void ViewObjectNpcCollection::_internal_set_collectstatus(uint32_t value) {
  
  collectstatus_ = value;
}
inline void ViewObjectNpcCollection::set_collectstatus(uint32_t value) {
  _internal_set_collectstatus(value);
  // @@protoc_insertion_point(field_set:common.ViewObjectNpcCollection.collectstatus)
}

// -------------------------------------------------------------------

// ViewObjectNpcSkill

// uint64 lasttime = 1;
inline void ViewObjectNpcSkill::clear_lasttime() {
  lasttime_ = uint64_t{0u};
}
inline uint64_t ViewObjectNpcSkill::_internal_lasttime() const {
  return lasttime_;
}
inline uint64_t ViewObjectNpcSkill::lasttime() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpcSkill.lasttime)
  return _internal_lasttime();
}
inline void ViewObjectNpcSkill::_internal_set_lasttime(uint64_t value) {
  
  lasttime_ = value;
}
inline void ViewObjectNpcSkill::set_lasttime(uint64_t value) {
  _internal_set_lasttime(value);
  // @@protoc_insertion_point(field_set:common.ViewObjectNpcSkill.lasttime)
}

// uint64 expre = 2;
inline void ViewObjectNpcSkill::clear_expre() {
  expre_ = uint64_t{0u};
}
inline uint64_t ViewObjectNpcSkill::_internal_expre() const {
  return expre_;
}
inline uint64_t ViewObjectNpcSkill::expre() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpcSkill.expre)
  return _internal_expre();
}
inline void ViewObjectNpcSkill::_internal_set_expre(uint64_t value) {
  
  expre_ = value;
}
inline void ViewObjectNpcSkill::set_expre(uint64_t value) {
  _internal_set_expre(value);
  // @@protoc_insertion_point(field_set:common.ViewObjectNpcSkill.expre)
}

// uint32 speed = 3;
inline void ViewObjectNpcSkill::clear_speed() {
  speed_ = 0u;
}
inline uint32_t ViewObjectNpcSkill::_internal_speed() const {
  return speed_;
}
inline uint32_t ViewObjectNpcSkill::speed() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpcSkill.speed)
  return _internal_speed();
}
inline void ViewObjectNpcSkill::_internal_set_speed(uint32_t value) {
  
  speed_ = value;
}
inline void ViewObjectNpcSkill::set_speed(uint32_t value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:common.ViewObjectNpcSkill.speed)
}

// -------------------------------------------------------------------

// ViewObjectNpcTrigger

// uint64 instanceid = 1;
inline void ViewObjectNpcTrigger::clear_instanceid() {
  instanceid_ = uint64_t{0u};
}
inline uint64_t ViewObjectNpcTrigger::_internal_instanceid() const {
  return instanceid_;
}
inline uint64_t ViewObjectNpcTrigger::instanceid() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpcTrigger.instanceid)
  return _internal_instanceid();
}
inline void ViewObjectNpcTrigger::_internal_set_instanceid(uint64_t value) {
  
  instanceid_ = value;
}
inline void ViewObjectNpcTrigger::set_instanceid(uint64_t value) {
  _internal_set_instanceid(value);
  // @@protoc_insertion_point(field_set:common.ViewObjectNpcTrigger.instanceid)
}

// -------------------------------------------------------------------

// ViewObjectNpcBlock

// uint64 instanceid = 1;
inline void ViewObjectNpcBlock::clear_instanceid() {
  instanceid_ = uint64_t{0u};
}
inline uint64_t ViewObjectNpcBlock::_internal_instanceid() const {
  return instanceid_;
}
inline uint64_t ViewObjectNpcBlock::instanceid() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpcBlock.instanceid)
  return _internal_instanceid();
}
inline void ViewObjectNpcBlock::_internal_set_instanceid(uint64_t value) {
  
  instanceid_ = value;
}
inline void ViewObjectNpcBlock::set_instanceid(uint64_t value) {
  _internal_set_instanceid(value);
  // @@protoc_insertion_point(field_set:common.ViewObjectNpcBlock.instanceid)
}

// -------------------------------------------------------------------

// ViewObjectNpcRegional

// uint64 instanceid = 1;
inline void ViewObjectNpcRegional::clear_instanceid() {
  instanceid_ = uint64_t{0u};
}
inline uint64_t ViewObjectNpcRegional::_internal_instanceid() const {
  return instanceid_;
}
inline uint64_t ViewObjectNpcRegional::instanceid() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpcRegional.instanceid)
  return _internal_instanceid();
}
inline void ViewObjectNpcRegional::_internal_set_instanceid(uint64_t value) {
  
  instanceid_ = value;
}
inline void ViewObjectNpcRegional::set_instanceid(uint64_t value) {
  _internal_set_instanceid(value);
  // @@protoc_insertion_point(field_set:common.ViewObjectNpcRegional.instanceid)
}

// .common.OccupyViewData data = 2;
inline bool ViewObjectNpcRegional::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ViewObjectNpcRegional::has_data() const {
  return _internal_has_data();
}
inline void ViewObjectNpcRegional::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::common::OccupyViewData& ViewObjectNpcRegional::_internal_data() const {
  const ::common::OccupyViewData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::OccupyViewData&>(
      ::common::_OccupyViewData_default_instance_);
}
inline const ::common::OccupyViewData& ViewObjectNpcRegional::data() const {
  // @@protoc_insertion_point(field_get:common.ViewObjectNpcRegional.data)
  return _internal_data();
}
inline void ViewObjectNpcRegional::unsafe_arena_set_allocated_data(
    ::common::OccupyViewData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ViewObjectNpcRegional.data)
}
inline ::common::OccupyViewData* ViewObjectNpcRegional::release_data() {
  
  ::common::OccupyViewData* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::OccupyViewData* ViewObjectNpcRegional::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:common.ViewObjectNpcRegional.data)
  
  ::common::OccupyViewData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::common::OccupyViewData* ViewObjectNpcRegional::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::OccupyViewData>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::common::OccupyViewData* ViewObjectNpcRegional::mutable_data() {
  ::common::OccupyViewData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:common.ViewObjectNpcRegional.data)
  return _msg;
}
inline void ViewObjectNpcRegional::set_allocated_data(::common::OccupyViewData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:common.ViewObjectNpcRegional.data)
}

// -------------------------------------------------------------------

// ViewObject

// .common.ViewObjectRole role = 1;
inline bool ViewObject::_internal_has_role() const {
  return this != internal_default_instance() && role_ != nullptr;
}
inline bool ViewObject::has_role() const {
  return _internal_has_role();
}
inline void ViewObject::clear_role() {
  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
}
inline const ::common::ViewObjectRole& ViewObject::_internal_role() const {
  const ::common::ViewObjectRole* p = role_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ViewObjectRole&>(
      ::common::_ViewObjectRole_default_instance_);
}
inline const ::common::ViewObjectRole& ViewObject::role() const {
  // @@protoc_insertion_point(field_get:common.ViewObject.role)
  return _internal_role();
}
inline void ViewObject::unsafe_arena_set_allocated_role(
    ::common::ViewObjectRole* role) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_);
  }
  role_ = role;
  if (role) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ViewObject.role)
}
inline ::common::ViewObjectRole* ViewObject::release_role() {
  
  ::common::ViewObjectRole* temp = role_;
  role_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ViewObjectRole* ViewObject::unsafe_arena_release_role() {
  // @@protoc_insertion_point(field_release:common.ViewObject.role)
  
  ::common::ViewObjectRole* temp = role_;
  role_ = nullptr;
  return temp;
}
inline ::common::ViewObjectRole* ViewObject::_internal_mutable_role() {
  
  if (role_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ViewObjectRole>(GetArenaForAllocation());
    role_ = p;
  }
  return role_;
}
inline ::common::ViewObjectRole* ViewObject::mutable_role() {
  ::common::ViewObjectRole* _msg = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:common.ViewObject.role)
  return _msg;
}
inline void ViewObject::set_allocated_role(::common::ViewObjectRole* role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete role_;
  }
  if (role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(role);
    if (message_arena != submessage_arena) {
      role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    
  } else {
    
  }
  role_ = role;
  // @@protoc_insertion_point(field_set_allocated:common.ViewObject.role)
}

// .common.ViewObjectNpc npc = 2;
inline bool ViewObject::_internal_has_npc() const {
  return this != internal_default_instance() && npc_ != nullptr;
}
inline bool ViewObject::has_npc() const {
  return _internal_has_npc();
}
inline void ViewObject::clear_npc() {
  if (GetArenaForAllocation() == nullptr && npc_ != nullptr) {
    delete npc_;
  }
  npc_ = nullptr;
}
inline const ::common::ViewObjectNpc& ViewObject::_internal_npc() const {
  const ::common::ViewObjectNpc* p = npc_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ViewObjectNpc&>(
      ::common::_ViewObjectNpc_default_instance_);
}
inline const ::common::ViewObjectNpc& ViewObject::npc() const {
  // @@protoc_insertion_point(field_get:common.ViewObject.npc)
  return _internal_npc();
}
inline void ViewObject::unsafe_arena_set_allocated_npc(
    ::common::ViewObjectNpc* npc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(npc_);
  }
  npc_ = npc;
  if (npc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ViewObject.npc)
}
inline ::common::ViewObjectNpc* ViewObject::release_npc() {
  
  ::common::ViewObjectNpc* temp = npc_;
  npc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ViewObjectNpc* ViewObject::unsafe_arena_release_npc() {
  // @@protoc_insertion_point(field_release:common.ViewObject.npc)
  
  ::common::ViewObjectNpc* temp = npc_;
  npc_ = nullptr;
  return temp;
}
inline ::common::ViewObjectNpc* ViewObject::_internal_mutable_npc() {
  
  if (npc_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ViewObjectNpc>(GetArenaForAllocation());
    npc_ = p;
  }
  return npc_;
}
inline ::common::ViewObjectNpc* ViewObject::mutable_npc() {
  ::common::ViewObjectNpc* _msg = _internal_mutable_npc();
  // @@protoc_insertion_point(field_mutable:common.ViewObject.npc)
  return _msg;
}
inline void ViewObject::set_allocated_npc(::common::ViewObjectNpc* npc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete npc_;
  }
  if (npc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(npc);
    if (message_arena != submessage_arena) {
      npc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, npc, submessage_arena);
    }
    
  } else {
    
  }
  npc_ = npc;
  // @@protoc_insertion_point(field_set_allocated:common.ViewObject.npc)
}

// -------------------------------------------------------------------

// ViewObjectList

// repeated .common.ViewObject objects = 1;
inline int ViewObjectList::_internal_objects_size() const {
  return objects_.size();
}
inline int ViewObjectList::objects_size() const {
  return _internal_objects_size();
}
inline void ViewObjectList::clear_objects() {
  objects_.Clear();
}
inline ::common::ViewObject* ViewObjectList::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:common.ViewObjectList.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ViewObject >*
ViewObjectList::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:common.ViewObjectList.objects)
  return &objects_;
}
inline const ::common::ViewObject& ViewObjectList::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::common::ViewObject& ViewObjectList::objects(int index) const {
  // @@protoc_insertion_point(field_get:common.ViewObjectList.objects)
  return _internal_objects(index);
}
inline ::common::ViewObject* ViewObjectList::_internal_add_objects() {
  return objects_.Add();
}
inline ::common::ViewObject* ViewObjectList::add_objects() {
  ::common::ViewObject* _add = _internal_add_objects();
  // @@protoc_insertion_point(field_add:common.ViewObjectList.objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ViewObject >&
ViewObjectList::objects() const {
  // @@protoc_insertion_point(field_list:common.ViewObjectList.objects)
  return objects_;
}

// -------------------------------------------------------------------

// ViewObjectIdList

// repeated uint64 uids = 1;
inline int ViewObjectIdList::_internal_uids_size() const {
  return uids_.size();
}
inline int ViewObjectIdList::uids_size() const {
  return _internal_uids_size();
}
inline void ViewObjectIdList::clear_uids() {
  uids_.Clear();
}
inline uint64_t ViewObjectIdList::_internal_uids(int index) const {
  return uids_.Get(index);
}
inline uint64_t ViewObjectIdList::uids(int index) const {
  // @@protoc_insertion_point(field_get:common.ViewObjectIdList.uids)
  return _internal_uids(index);
}
inline void ViewObjectIdList::set_uids(int index, uint64_t value) {
  uids_.Set(index, value);
  // @@protoc_insertion_point(field_set:common.ViewObjectIdList.uids)
}
inline void ViewObjectIdList::_internal_add_uids(uint64_t value) {
  uids_.Add(value);
}
inline void ViewObjectIdList::add_uids(uint64_t value) {
  _internal_add_uids(value);
  // @@protoc_insertion_point(field_add:common.ViewObjectIdList.uids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ViewObjectIdList::_internal_uids() const {
  return uids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ViewObjectIdList::uids() const {
  // @@protoc_insertion_point(field_list:common.ViewObjectIdList.uids)
  return _internal_uids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ViewObjectIdList::_internal_mutable_uids() {
  return &uids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ViewObjectIdList::mutable_uids() {
  // @@protoc_insertion_point(field_mutable_list:common.ViewObjectIdList.uids)
  return _internal_mutable_uids();
}

// -------------------------------------------------------------------

// RebirthInfo

// uint32 canRebirth = 1;
inline void RebirthInfo::clear_canrebirth() {
  canrebirth_ = 0u;
}
inline uint32_t RebirthInfo::_internal_canrebirth() const {
  return canrebirth_;
}
inline uint32_t RebirthInfo::canrebirth() const {
  // @@protoc_insertion_point(field_get:common.RebirthInfo.canRebirth)
  return _internal_canrebirth();
}
inline void RebirthInfo::_internal_set_canrebirth(uint32_t value) {
  
  canrebirth_ = value;
}
inline void RebirthInfo::set_canrebirth(uint32_t value) {
  _internal_set_canrebirth(value);
  // @@protoc_insertion_point(field_set:common.RebirthInfo.canRebirth)
}

// uint32 rebornParam = 2;
inline void RebirthInfo::clear_rebornparam() {
  rebornparam_ = 0u;
}
inline uint32_t RebirthInfo::_internal_rebornparam() const {
  return rebornparam_;
}
inline uint32_t RebirthInfo::rebornparam() const {
  // @@protoc_insertion_point(field_get:common.RebirthInfo.rebornParam)
  return _internal_rebornparam();
}
inline void RebirthInfo::_internal_set_rebornparam(uint32_t value) {
  
  rebornparam_ = value;
}
inline void RebirthInfo::set_rebornparam(uint32_t value) {
  _internal_set_rebornparam(value);
  // @@protoc_insertion_point(field_set:common.RebirthInfo.rebornParam)
}

// uint32 deathTimes = 3;
inline void RebirthInfo::clear_deathtimes() {
  deathtimes_ = 0u;
}
inline uint32_t RebirthInfo::_internal_deathtimes() const {
  return deathtimes_;
}
inline uint32_t RebirthInfo::deathtimes() const {
  // @@protoc_insertion_point(field_get:common.RebirthInfo.deathTimes)
  return _internal_deathtimes();
}
inline void RebirthInfo::_internal_set_deathtimes(uint32_t value) {
  
  deathtimes_ = value;
}
inline void RebirthInfo::set_deathtimes(uint32_t value) {
  _internal_set_deathtimes(value);
  // @@protoc_insertion_point(field_set:common.RebirthInfo.deathTimes)
}

// uint32 useRebirthCnt = 4;
inline void RebirthInfo::clear_userebirthcnt() {
  userebirthcnt_ = 0u;
}
inline uint32_t RebirthInfo::_internal_userebirthcnt() const {
  return userebirthcnt_;
}
inline uint32_t RebirthInfo::userebirthcnt() const {
  // @@protoc_insertion_point(field_get:common.RebirthInfo.useRebirthCnt)
  return _internal_userebirthcnt();
}
inline void RebirthInfo::_internal_set_userebirthcnt(uint32_t value) {
  
  userebirthcnt_ = value;
}
inline void RebirthInfo::set_userebirthcnt(uint32_t value) {
  _internal_set_userebirthcnt(value);
  // @@protoc_insertion_point(field_set:common.RebirthInfo.useRebirthCnt)
}

// -------------------------------------------------------------------

// MapMark

// uint32 uid = 1;
inline void MapMark::clear_uid() {
  uid_ = 0u;
}
inline uint32_t MapMark::_internal_uid() const {
  return uid_;
}
inline uint32_t MapMark::uid() const {
  // @@protoc_insertion_point(field_get:common.MapMark.uid)
  return _internal_uid();
}
inline void MapMark::_internal_set_uid(uint32_t value) {
  
  uid_ = value;
}
inline void MapMark::set_uid(uint32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:common.MapMark.uid)
}

// uint32 type = 2;
inline void MapMark::clear_type() {
  type_ = 0u;
}
inline uint32_t MapMark::_internal_type() const {
  return type_;
}
inline uint32_t MapMark::type() const {
  // @@protoc_insertion_point(field_get:common.MapMark.type)
  return _internal_type();
}
inline void MapMark::_internal_set_type(uint32_t value) {
  
  type_ = value;
}
inline void MapMark::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:common.MapMark.type)
}

// uint32 tid = 3;
inline void MapMark::clear_tid() {
  tid_ = 0u;
}
inline uint32_t MapMark::_internal_tid() const {
  return tid_;
}
inline uint32_t MapMark::tid() const {
  // @@protoc_insertion_point(field_get:common.MapMark.tid)
  return _internal_tid();
}
inline void MapMark::_internal_set_tid(uint32_t value) {
  
  tid_ = value;
}
inline void MapMark::set_tid(uint32_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:common.MapMark.tid)
}

// uint32 state = 4;
inline void MapMark::clear_state() {
  state_ = 0u;
}
inline uint32_t MapMark::_internal_state() const {
  return state_;
}
inline uint32_t MapMark::state() const {
  // @@protoc_insertion_point(field_get:common.MapMark.state)
  return _internal_state();
}
inline void MapMark::_internal_set_state(uint32_t value) {
  
  state_ = value;
}
inline void MapMark::set_state(uint32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:common.MapMark.state)
}

// .common.ClientPosTogether posto = 5;
inline bool MapMark::_internal_has_posto() const {
  return this != internal_default_instance() && posto_ != nullptr;
}
inline bool MapMark::has_posto() const {
  return _internal_has_posto();
}
inline const ::common::ClientPosTogether& MapMark::_internal_posto() const {
  const ::common::ClientPosTogether* p = posto_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ClientPosTogether&>(
      ::common::_ClientPosTogether_default_instance_);
}
inline const ::common::ClientPosTogether& MapMark::posto() const {
  // @@protoc_insertion_point(field_get:common.MapMark.posto)
  return _internal_posto();
}
inline void MapMark::unsafe_arena_set_allocated_posto(
    ::common::ClientPosTogether* posto) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(posto_);
  }
  posto_ = posto;
  if (posto) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.MapMark.posto)
}
inline ::common::ClientPosTogether* MapMark::release_posto() {
  
  ::common::ClientPosTogether* temp = posto_;
  posto_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ClientPosTogether* MapMark::unsafe_arena_release_posto() {
  // @@protoc_insertion_point(field_release:common.MapMark.posto)
  
  ::common::ClientPosTogether* temp = posto_;
  posto_ = nullptr;
  return temp;
}
inline ::common::ClientPosTogether* MapMark::_internal_mutable_posto() {
  
  if (posto_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ClientPosTogether>(GetArenaForAllocation());
    posto_ = p;
  }
  return posto_;
}
inline ::common::ClientPosTogether* MapMark::mutable_posto() {
  ::common::ClientPosTogether* _msg = _internal_mutable_posto();
  // @@protoc_insertion_point(field_mutable:common.MapMark.posto)
  return _msg;
}
inline void MapMark::set_allocated_posto(::common::ClientPosTogether* posto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(posto_);
  }
  if (posto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(posto));
    if (message_arena != submessage_arena) {
      posto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, posto, submessage_arena);
    }
    
  } else {
    
  }
  posto_ = posto;
  // @@protoc_insertion_point(field_set_allocated:common.MapMark.posto)
}

// -------------------------------------------------------------------

// OccupyViewData_OccupyProgress

// uint32 campId = 1;
inline void OccupyViewData_OccupyProgress::clear_campid() {
  campid_ = 0u;
}
inline uint32_t OccupyViewData_OccupyProgress::_internal_campid() const {
  return campid_;
}
inline uint32_t OccupyViewData_OccupyProgress::campid() const {
  // @@protoc_insertion_point(field_get:common.OccupyViewData.OccupyProgress.campId)
  return _internal_campid();
}
inline void OccupyViewData_OccupyProgress::_internal_set_campid(uint32_t value) {
  
  campid_ = value;
}
inline void OccupyViewData_OccupyProgress::set_campid(uint32_t value) {
  _internal_set_campid(value);
  // @@protoc_insertion_point(field_set:common.OccupyViewData.OccupyProgress.campId)
}

// uint32 progress = 2;
inline void OccupyViewData_OccupyProgress::clear_progress() {
  progress_ = 0u;
}
inline uint32_t OccupyViewData_OccupyProgress::_internal_progress() const {
  return progress_;
}
inline uint32_t OccupyViewData_OccupyProgress::progress() const {
  // @@protoc_insertion_point(field_get:common.OccupyViewData.OccupyProgress.progress)
  return _internal_progress();
}
inline void OccupyViewData_OccupyProgress::_internal_set_progress(uint32_t value) {
  
  progress_ = value;
}
inline void OccupyViewData_OccupyProgress::set_progress(uint32_t value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:common.OccupyViewData.OccupyProgress.progress)
}

// -------------------------------------------------------------------

// OccupyViewData

// uint32 occupyCampId = 1;
inline void OccupyViewData::clear_occupycampid() {
  occupycampid_ = 0u;
}
inline uint32_t OccupyViewData::_internal_occupycampid() const {
  return occupycampid_;
}
inline uint32_t OccupyViewData::occupycampid() const {
  // @@protoc_insertion_point(field_get:common.OccupyViewData.occupyCampId)
  return _internal_occupycampid();
}
inline void OccupyViewData::_internal_set_occupycampid(uint32_t value) {
  
  occupycampid_ = value;
}
inline void OccupyViewData::set_occupycampid(uint32_t value) {
  _internal_set_occupycampid(value);
  // @@protoc_insertion_point(field_set:common.OccupyViewData.occupyCampId)
}

// .common.OccupyViewData.OccupyProgress progress = 2;
inline bool OccupyViewData::_internal_has_progress() const {
  return this != internal_default_instance() && progress_ != nullptr;
}
inline bool OccupyViewData::has_progress() const {
  return _internal_has_progress();
}
inline void OccupyViewData::clear_progress() {
  if (GetArenaForAllocation() == nullptr && progress_ != nullptr) {
    delete progress_;
  }
  progress_ = nullptr;
}
inline const ::common::OccupyViewData_OccupyProgress& OccupyViewData::_internal_progress() const {
  const ::common::OccupyViewData_OccupyProgress* p = progress_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::OccupyViewData_OccupyProgress&>(
      ::common::_OccupyViewData_OccupyProgress_default_instance_);
}
inline const ::common::OccupyViewData_OccupyProgress& OccupyViewData::progress() const {
  // @@protoc_insertion_point(field_get:common.OccupyViewData.progress)
  return _internal_progress();
}
inline void OccupyViewData::unsafe_arena_set_allocated_progress(
    ::common::OccupyViewData_OccupyProgress* progress) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress_);
  }
  progress_ = progress;
  if (progress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.OccupyViewData.progress)
}
inline ::common::OccupyViewData_OccupyProgress* OccupyViewData::release_progress() {
  
  ::common::OccupyViewData_OccupyProgress* temp = progress_;
  progress_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::OccupyViewData_OccupyProgress* OccupyViewData::unsafe_arena_release_progress() {
  // @@protoc_insertion_point(field_release:common.OccupyViewData.progress)
  
  ::common::OccupyViewData_OccupyProgress* temp = progress_;
  progress_ = nullptr;
  return temp;
}
inline ::common::OccupyViewData_OccupyProgress* OccupyViewData::_internal_mutable_progress() {
  
  if (progress_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::OccupyViewData_OccupyProgress>(GetArenaForAllocation());
    progress_ = p;
  }
  return progress_;
}
inline ::common::OccupyViewData_OccupyProgress* OccupyViewData::mutable_progress() {
  ::common::OccupyViewData_OccupyProgress* _msg = _internal_mutable_progress();
  // @@protoc_insertion_point(field_mutable:common.OccupyViewData.progress)
  return _msg;
}
inline void OccupyViewData::set_allocated_progress(::common::OccupyViewData_OccupyProgress* progress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete progress_;
  }
  if (progress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(progress);
    if (message_arena != submessage_arena) {
      progress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, progress, submessage_arena);
    }
    
  } else {
    
  }
  progress_ = progress;
  // @@protoc_insertion_point(field_set_allocated:common.OccupyViewData.progress)
}

// -------------------------------------------------------------------

// ViewEffect

// uint32 effectId = 1;
inline void ViewEffect::clear_effectid() {
  effectid_ = 0u;
}
inline uint32_t ViewEffect::_internal_effectid() const {
  return effectid_;
}
inline uint32_t ViewEffect::effectid() const {
  // @@protoc_insertion_point(field_get:common.ViewEffect.effectId)
  return _internal_effectid();
}
inline void ViewEffect::_internal_set_effectid(uint32_t value) {
  
  effectid_ = value;
}
inline void ViewEffect::set_effectid(uint32_t value) {
  _internal_set_effectid(value);
  // @@protoc_insertion_point(field_set:common.ViewEffect.effectId)
}

// uint32 beginTime = 2;
inline void ViewEffect::clear_begintime() {
  begintime_ = 0u;
}
inline uint32_t ViewEffect::_internal_begintime() const {
  return begintime_;
}
inline uint32_t ViewEffect::begintime() const {
  // @@protoc_insertion_point(field_get:common.ViewEffect.beginTime)
  return _internal_begintime();
}
inline void ViewEffect::_internal_set_begintime(uint32_t value) {
  
  begintime_ = value;
}
inline void ViewEffect::set_begintime(uint32_t value) {
  _internal_set_begintime(value);
  // @@protoc_insertion_point(field_set:common.ViewEffect.beginTime)
}

// -------------------------------------------------------------------

// ViewEffectList

// repeated .common.ViewEffect effects = 1;
inline int ViewEffectList::_internal_effects_size() const {
  return effects_.size();
}
inline int ViewEffectList::effects_size() const {
  return _internal_effects_size();
}
inline void ViewEffectList::clear_effects() {
  effects_.Clear();
}
inline ::common::ViewEffect* ViewEffectList::mutable_effects(int index) {
  // @@protoc_insertion_point(field_mutable:common.ViewEffectList.effects)
  return effects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ViewEffect >*
ViewEffectList::mutable_effects() {
  // @@protoc_insertion_point(field_mutable_list:common.ViewEffectList.effects)
  return &effects_;
}
inline const ::common::ViewEffect& ViewEffectList::_internal_effects(int index) const {
  return effects_.Get(index);
}
inline const ::common::ViewEffect& ViewEffectList::effects(int index) const {
  // @@protoc_insertion_point(field_get:common.ViewEffectList.effects)
  return _internal_effects(index);
}
inline ::common::ViewEffect* ViewEffectList::_internal_add_effects() {
  return effects_.Add();
}
inline ::common::ViewEffect* ViewEffectList::add_effects() {
  ::common::ViewEffect* _add = _internal_add_effects();
  // @@protoc_insertion_point(field_add:common.ViewEffectList.effects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ViewEffect >&
ViewEffectList::effects() const {
  // @@protoc_insertion_point(field_list:common.ViewEffectList.effects)
  return effects_;
}

// -------------------------------------------------------------------

// ViewSpeed

// uint32 curSpeed = 1;
inline void ViewSpeed::clear_curspeed() {
  curspeed_ = 0u;
}
inline uint32_t ViewSpeed::_internal_curspeed() const {
  return curspeed_;
}
inline uint32_t ViewSpeed::curspeed() const {
  // @@protoc_insertion_point(field_get:common.ViewSpeed.curSpeed)
  return _internal_curspeed();
}
inline void ViewSpeed::_internal_set_curspeed(uint32_t value) {
  
  curspeed_ = value;
}
inline void ViewSpeed::set_curspeed(uint32_t value) {
  _internal_set_curspeed(value);
  // @@protoc_insertion_point(field_set:common.ViewSpeed.curSpeed)
}

// uint32 readySpeed = 2;
inline void ViewSpeed::clear_readyspeed() {
  readyspeed_ = 0u;
}
inline uint32_t ViewSpeed::_internal_readyspeed() const {
  return readyspeed_;
}
inline uint32_t ViewSpeed::readyspeed() const {
  // @@protoc_insertion_point(field_get:common.ViewSpeed.readySpeed)
  return _internal_readyspeed();
}
inline void ViewSpeed::_internal_set_readyspeed(uint32_t value) {
  
  readyspeed_ = value;
}
inline void ViewSpeed::set_readyspeed(uint32_t value) {
  _internal_set_readyspeed(value);
  // @@protoc_insertion_point(field_set:common.ViewSpeed.readySpeed)
}

// -------------------------------------------------------------------

// ViewHitProgress

// uint32 transformId = 1;
inline void ViewHitProgress::clear_transformid() {
  transformid_ = 0u;
}
inline uint32_t ViewHitProgress::_internal_transformid() const {
  return transformid_;
}
inline uint32_t ViewHitProgress::transformid() const {
  // @@protoc_insertion_point(field_get:common.ViewHitProgress.transformId)
  return _internal_transformid();
}
inline void ViewHitProgress::_internal_set_transformid(uint32_t value) {
  
  transformid_ = value;
}
inline void ViewHitProgress::set_transformid(uint32_t value) {
  _internal_set_transformid(value);
  // @@protoc_insertion_point(field_set:common.ViewHitProgress.transformId)
}

// uint32 progress = 2;
inline void ViewHitProgress::clear_progress() {
  progress_ = 0u;
}
inline uint32_t ViewHitProgress::_internal_progress() const {
  return progress_;
}
inline uint32_t ViewHitProgress::progress() const {
  // @@protoc_insertion_point(field_get:common.ViewHitProgress.progress)
  return _internal_progress();
}
inline void ViewHitProgress::_internal_set_progress(uint32_t value) {
  
  progress_ = value;
}
inline void ViewHitProgress::set_progress(uint32_t value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:common.ViewHitProgress.progress)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::common::enViewType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::enViewType>() {
  return ::common::enViewType_descriptor();
}
template <> struct is_proto_enum< ::common::enNpcViewType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::enNpcViewType>() {
  return ::common::enNpcViewType_descriptor();
}
template <> struct is_proto_enum< ::common::enViewObjectState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::enViewObjectState>() {
  return ::common::enViewObjectState_descriptor();
}
template <> struct is_proto_enum< ::common::enViewFieldType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::enViewFieldType>() {
  return ::common::enViewFieldType_descriptor();
}
template <> struct is_proto_enum< ::common::enPerformanceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::enPerformanceType>() {
  return ::common::enPerformanceType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scenecommon_2eproto
