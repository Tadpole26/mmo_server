// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friendcommon.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_friendcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_friendcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_friendcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_friendcommon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_friendcommon_2eproto;
namespace common {
class BlockList;
struct BlockListDefaultTypeInternal;
extern BlockListDefaultTypeInternal _BlockList_default_instance_;
class FriendFieldId;
struct FriendFieldIdDefaultTypeInternal;
extern FriendFieldIdDefaultTypeInternal _FriendFieldId_default_instance_;
class FriendFieldList;
struct FriendFieldListDefaultTypeInternal;
extern FriendFieldListDefaultTypeInternal _FriendFieldList_default_instance_;
class FriendFieldStr;
struct FriendFieldStrDefaultTypeInternal;
extern FriendFieldStrDefaultTypeInternal _FriendFieldStr_default_instance_;
class FriendInfo;
struct FriendInfoDefaultTypeInternal;
extern FriendInfoDefaultTypeInternal _FriendInfo_default_instance_;
class FriendList;
struct FriendListDefaultTypeInternal;
extern FriendListDefaultTypeInternal _FriendList_default_instance_;
class FriendRelation;
struct FriendRelationDefaultTypeInternal;
extern FriendRelationDefaultTypeInternal _FriendRelation_default_instance_;
class Recommend;
struct RecommendDefaultTypeInternal;
extern RecommendDefaultTypeInternal _Recommend_default_instance_;
class RecommendFilter;
struct RecommendFilterDefaultTypeInternal;
extern RecommendFilterDefaultTypeInternal _RecommendFilter_default_instance_;
class RecommendLabel;
struct RecommendLabelDefaultTypeInternal;
extern RecommendLabelDefaultTypeInternal _RecommendLabel_default_instance_;
class RecommendList;
struct RecommendListDefaultTypeInternal;
extern RecommendListDefaultTypeInternal _RecommendList_default_instance_;
class RecvGift;
struct RecvGiftDefaultTypeInternal;
extern RecvGiftDefaultTypeInternal _RecvGift_default_instance_;
class RequestList;
struct RequestListDefaultTypeInternal;
extern RequestListDefaultTypeInternal _RequestList_default_instance_;
class SendGift;
struct SendGiftDefaultTypeInternal;
extern SendGiftDefaultTypeInternal _SendGift_default_instance_;
class SendGiftHistory;
struct SendGiftHistoryDefaultTypeInternal;
extern SendGiftHistoryDefaultTypeInternal _SendGiftHistory_default_instance_;
class SendGiftTimes;
struct SendGiftTimesDefaultTypeInternal;
extern SendGiftTimesDefaultTypeInternal _SendGiftTimes_default_instance_;
class SingleSendTimes;
struct SingleSendTimesDefaultTypeInternal;
extern SingleSendTimesDefaultTypeInternal _SingleSendTimes_default_instance_;
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> ::common::BlockList* Arena::CreateMaybeMessage<::common::BlockList>(Arena*);
template<> ::common::FriendFieldId* Arena::CreateMaybeMessage<::common::FriendFieldId>(Arena*);
template<> ::common::FriendFieldList* Arena::CreateMaybeMessage<::common::FriendFieldList>(Arena*);
template<> ::common::FriendFieldStr* Arena::CreateMaybeMessage<::common::FriendFieldStr>(Arena*);
template<> ::common::FriendInfo* Arena::CreateMaybeMessage<::common::FriendInfo>(Arena*);
template<> ::common::FriendList* Arena::CreateMaybeMessage<::common::FriendList>(Arena*);
template<> ::common::FriendRelation* Arena::CreateMaybeMessage<::common::FriendRelation>(Arena*);
template<> ::common::Recommend* Arena::CreateMaybeMessage<::common::Recommend>(Arena*);
template<> ::common::RecommendFilter* Arena::CreateMaybeMessage<::common::RecommendFilter>(Arena*);
template<> ::common::RecommendLabel* Arena::CreateMaybeMessage<::common::RecommendLabel>(Arena*);
template<> ::common::RecommendList* Arena::CreateMaybeMessage<::common::RecommendList>(Arena*);
template<> ::common::RecvGift* Arena::CreateMaybeMessage<::common::RecvGift>(Arena*);
template<> ::common::RequestList* Arena::CreateMaybeMessage<::common::RequestList>(Arena*);
template<> ::common::SendGift* Arena::CreateMaybeMessage<::common::SendGift>(Arena*);
template<> ::common::SendGiftHistory* Arena::CreateMaybeMessage<::common::SendGiftHistory>(Arena*);
template<> ::common::SendGiftTimes* Arena::CreateMaybeMessage<::common::SendGiftTimes>(Arena*);
template<> ::common::SingleSendTimes* Arena::CreateMaybeMessage<::common::SingleSendTimes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace common {

enum enFriendLabelType : int {
  FLType_None = 0,
  FLType_Max = 31,
  enFriendLabelType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  enFriendLabelType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool enFriendLabelType_IsValid(int value);
constexpr enFriendLabelType enFriendLabelType_MIN = FLType_None;
constexpr enFriendLabelType enFriendLabelType_MAX = FLType_Max;
constexpr int enFriendLabelType_ARRAYSIZE = enFriendLabelType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enFriendLabelType_descriptor();
template<typename T>
inline const std::string& enFriendLabelType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, enFriendLabelType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function enFriendLabelType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    enFriendLabelType_descriptor(), enum_t_value);
}
inline bool enFriendLabelType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, enFriendLabelType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<enFriendLabelType>(
    enFriendLabelType_descriptor(), name, value);
}
enum enFriendFieldType : int {
  FFType_None = 0,
  FFType_FriendListMax = 1,
  FFType_Relation = 2,
  FFType_RequestList = 3,
  FFType_BlockList = 4,
  FFType_Filter = 5,
  FFType_Label = 6,
  FFType_SendTimes = 7,
  FFType_Max = 8,
  enFriendFieldType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  enFriendFieldType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool enFriendFieldType_IsValid(int value);
constexpr enFriendFieldType enFriendFieldType_MIN = FFType_None;
constexpr enFriendFieldType enFriendFieldType_MAX = FFType_Max;
constexpr int enFriendFieldType_ARRAYSIZE = enFriendFieldType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enFriendFieldType_descriptor();
template<typename T>
inline const std::string& enFriendFieldType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, enFriendFieldType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function enFriendFieldType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    enFriendFieldType_descriptor(), enum_t_value);
}
inline bool enFriendFieldType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, enFriendFieldType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<enFriendFieldType>(
    enFriendFieldType_descriptor(), name, value);
}
// ===================================================================

class FriendInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.FriendInfo) */ {
 public:
  inline FriendInfo() : FriendInfo(nullptr) {}
  ~FriendInfo() override;
  explicit PROTOBUF_CONSTEXPR FriendInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendInfo(const FriendInfo& from);
  FriendInfo(FriendInfo&& from) noexcept
    : FriendInfo() {
    *this = ::std::move(from);
  }

  inline FriendInfo& operator=(const FriendInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendInfo& operator=(FriendInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendInfo* internal_default_instance() {
    return reinterpret_cast<const FriendInfo*>(
               &_FriendInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FriendInfo& a, FriendInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FriendInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.FriendInfo";
  }
  protected:
  explicit FriendInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOFriendFieldNumber = 1,
    kORequestFieldNumber = 2,
    kOBlockFieldNumber = 3,
    kOFilterFieldNumber = 5,
    kOLabelFieldNumber = 6,
    kOSendTimesFieldNumber = 7,
    kOHistoryFieldNumber = 8,
    kOMsgListFieldNumber = 4,
  };
  // .common.FriendList oFriend = 1;
  bool has_ofriend() const;
  private:
  bool _internal_has_ofriend() const;
  public:
  void clear_ofriend();
  const ::common::FriendList& ofriend() const;
  PROTOBUF_NODISCARD ::common::FriendList* release_ofriend();
  ::common::FriendList* mutable_ofriend();
  void set_allocated_ofriend(::common::FriendList* ofriend);
  private:
  const ::common::FriendList& _internal_ofriend() const;
  ::common::FriendList* _internal_mutable_ofriend();
  public:
  void unsafe_arena_set_allocated_ofriend(
      ::common::FriendList* ofriend);
  ::common::FriendList* unsafe_arena_release_ofriend();

  // .common.RequestList oRequest = 2;
  bool has_orequest() const;
  private:
  bool _internal_has_orequest() const;
  public:
  void clear_orequest();
  const ::common::RequestList& orequest() const;
  PROTOBUF_NODISCARD ::common::RequestList* release_orequest();
  ::common::RequestList* mutable_orequest();
  void set_allocated_orequest(::common::RequestList* orequest);
  private:
  const ::common::RequestList& _internal_orequest() const;
  ::common::RequestList* _internal_mutable_orequest();
  public:
  void unsafe_arena_set_allocated_orequest(
      ::common::RequestList* orequest);
  ::common::RequestList* unsafe_arena_release_orequest();

  // .common.BlockList oBlock = 3;
  bool has_oblock() const;
  private:
  bool _internal_has_oblock() const;
  public:
  void clear_oblock();
  const ::common::BlockList& oblock() const;
  PROTOBUF_NODISCARD ::common::BlockList* release_oblock();
  ::common::BlockList* mutable_oblock();
  void set_allocated_oblock(::common::BlockList* oblock);
  private:
  const ::common::BlockList& _internal_oblock() const;
  ::common::BlockList* _internal_mutable_oblock();
  public:
  void unsafe_arena_set_allocated_oblock(
      ::common::BlockList* oblock);
  ::common::BlockList* unsafe_arena_release_oblock();

  // .common.RecommendFilter oFilter = 5;
  bool has_ofilter() const;
  private:
  bool _internal_has_ofilter() const;
  public:
  void clear_ofilter();
  const ::common::RecommendFilter& ofilter() const;
  PROTOBUF_NODISCARD ::common::RecommendFilter* release_ofilter();
  ::common::RecommendFilter* mutable_ofilter();
  void set_allocated_ofilter(::common::RecommendFilter* ofilter);
  private:
  const ::common::RecommendFilter& _internal_ofilter() const;
  ::common::RecommendFilter* _internal_mutable_ofilter();
  public:
  void unsafe_arena_set_allocated_ofilter(
      ::common::RecommendFilter* ofilter);
  ::common::RecommendFilter* unsafe_arena_release_ofilter();

  // .common.RecommendLabel oLabel = 6;
  bool has_olabel() const;
  private:
  bool _internal_has_olabel() const;
  public:
  void clear_olabel();
  const ::common::RecommendLabel& olabel() const;
  PROTOBUF_NODISCARD ::common::RecommendLabel* release_olabel();
  ::common::RecommendLabel* mutable_olabel();
  void set_allocated_olabel(::common::RecommendLabel* olabel);
  private:
  const ::common::RecommendLabel& _internal_olabel() const;
  ::common::RecommendLabel* _internal_mutable_olabel();
  public:
  void unsafe_arena_set_allocated_olabel(
      ::common::RecommendLabel* olabel);
  ::common::RecommendLabel* unsafe_arena_release_olabel();

  // .common.SendGiftTimes oSendTimes = 7;
  bool has_osendtimes() const;
  private:
  bool _internal_has_osendtimes() const;
  public:
  void clear_osendtimes();
  const ::common::SendGiftTimes& osendtimes() const;
  PROTOBUF_NODISCARD ::common::SendGiftTimes* release_osendtimes();
  ::common::SendGiftTimes* mutable_osendtimes();
  void set_allocated_osendtimes(::common::SendGiftTimes* osendtimes);
  private:
  const ::common::SendGiftTimes& _internal_osendtimes() const;
  ::common::SendGiftTimes* _internal_mutable_osendtimes();
  public:
  void unsafe_arena_set_allocated_osendtimes(
      ::common::SendGiftTimes* osendtimes);
  ::common::SendGiftTimes* unsafe_arena_release_osendtimes();

  // .common.SendGiftHistory oHistory = 8;
  bool has_ohistory() const;
  private:
  bool _internal_has_ohistory() const;
  public:
  void clear_ohistory();
  const ::common::SendGiftHistory& ohistory() const;
  PROTOBUF_NODISCARD ::common::SendGiftHistory* release_ohistory();
  ::common::SendGiftHistory* mutable_ohistory();
  void set_allocated_ohistory(::common::SendGiftHistory* ohistory);
  private:
  const ::common::SendGiftHistory& _internal_ohistory() const;
  ::common::SendGiftHistory* _internal_mutable_ohistory();
  public:
  void unsafe_arena_set_allocated_ohistory(
      ::common::SendGiftHistory* ohistory);
  ::common::SendGiftHistory* unsafe_arena_release_ohistory();

  // .common.enFriendFieldType oMsgList = 4;
  void clear_omsglist();
  ::common::enFriendFieldType omsglist() const;
  void set_omsglist(::common::enFriendFieldType value);
  private:
  ::common::enFriendFieldType _internal_omsglist() const;
  void _internal_set_omsglist(::common::enFriendFieldType value);
  public:

  // @@protoc_insertion_point(class_scope:common.FriendInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::FriendList* ofriend_;
  ::common::RequestList* orequest_;
  ::common::BlockList* oblock_;
  ::common::RecommendFilter* ofilter_;
  ::common::RecommendLabel* olabel_;
  ::common::SendGiftTimes* osendtimes_;
  ::common::SendGiftHistory* ohistory_;
  int omsglist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendcommon_2eproto;
};
// -------------------------------------------------------------------

class FriendList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.FriendList) */ {
 public:
  inline FriendList() : FriendList(nullptr) {}
  ~FriendList() override;
  explicit PROTOBUF_CONSTEXPR FriendList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendList(const FriendList& from);
  FriendList(FriendList&& from) noexcept
    : FriendList() {
    *this = ::std::move(from);
  }

  inline FriendList& operator=(const FriendList& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendList& operator=(FriendList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendList& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendList* internal_default_instance() {
    return reinterpret_cast<const FriendList*>(
               &_FriendList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FriendList& a, FriendList& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FriendList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.FriendList";
  }
  protected:
  explicit FriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecFriendsFieldNumber = 2,
    kUiFriendListMaxFieldNumber = 1,
  };
  // repeated .common.FriendRelation vecFriends = 2;
  int vecfriends_size() const;
  private:
  int _internal_vecfriends_size() const;
  public:
  void clear_vecfriends();
  ::common::FriendRelation* mutable_vecfriends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::FriendRelation >*
      mutable_vecfriends();
  private:
  const ::common::FriendRelation& _internal_vecfriends(int index) const;
  ::common::FriendRelation* _internal_add_vecfriends();
  public:
  const ::common::FriendRelation& vecfriends(int index) const;
  ::common::FriendRelation* add_vecfriends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::FriendRelation >&
      vecfriends() const;

  // uint32 uiFriendListMax = 1;
  void clear_uifriendlistmax();
  uint32_t uifriendlistmax() const;
  void set_uifriendlistmax(uint32_t value);
  private:
  uint32_t _internal_uifriendlistmax() const;
  void _internal_set_uifriendlistmax(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.FriendList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::FriendRelation > vecfriends_;
  uint32_t uifriendlistmax_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendcommon_2eproto;
};
// -------------------------------------------------------------------

class FriendRelation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.FriendRelation) */ {
 public:
  inline FriendRelation() : FriendRelation(nullptr) {}
  ~FriendRelation() override;
  explicit PROTOBUF_CONSTEXPR FriendRelation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendRelation(const FriendRelation& from);
  FriendRelation(FriendRelation&& from) noexcept
    : FriendRelation() {
    *this = ::std::move(from);
  }

  inline FriendRelation& operator=(const FriendRelation& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendRelation& operator=(FriendRelation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendRelation& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendRelation* internal_default_instance() {
    return reinterpret_cast<const FriendRelation*>(
               &_FriendRelation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FriendRelation& a, FriendRelation& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendRelation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendRelation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendRelation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendRelation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendRelation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FriendRelation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendRelation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.FriendRelation";
  }
  protected:
  explicit FriendRelation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlRoleIdFieldNumber = 1,
    kUiFriendshipFieldNumber = 2,
    kUiDailyChatFieldNumber = 3,
    kLlTeamIdFieldNumber = 4,
    kBOnlineFieldNumber = 5,
  };
  // uint64 llRoleId = 1;
  void clear_llroleid();
  uint64_t llroleid() const;
  void set_llroleid(uint64_t value);
  private:
  uint64_t _internal_llroleid() const;
  void _internal_set_llroleid(uint64_t value);
  public:

  // uint32 uiFriendship = 2;
  void clear_uifriendship();
  uint32_t uifriendship() const;
  void set_uifriendship(uint32_t value);
  private:
  uint32_t _internal_uifriendship() const;
  void _internal_set_uifriendship(uint32_t value);
  public:

  // uint32 uiDailyChat = 3;
  void clear_uidailychat();
  uint32_t uidailychat() const;
  void set_uidailychat(uint32_t value);
  private:
  uint32_t _internal_uidailychat() const;
  void _internal_set_uidailychat(uint32_t value);
  public:

  // uint64 llTeamId = 4;
  void clear_llteamid();
  uint64_t llteamid() const;
  void set_llteamid(uint64_t value);
  private:
  uint64_t _internal_llteamid() const;
  void _internal_set_llteamid(uint64_t value);
  public:

  // bool bOnline = 5;
  void clear_bonline();
  bool bonline() const;
  void set_bonline(bool value);
  private:
  bool _internal_bonline() const;
  void _internal_set_bonline(bool value);
  public:

  // @@protoc_insertion_point(class_scope:common.FriendRelation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t llroleid_;
  uint32_t uifriendship_;
  uint32_t uidailychat_;
  uint64_t llteamid_;
  bool bonline_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendcommon_2eproto;
};
// -------------------------------------------------------------------

class RequestList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.RequestList) */ {
 public:
  inline RequestList() : RequestList(nullptr) {}
  ~RequestList() override;
  explicit PROTOBUF_CONSTEXPR RequestList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestList(const RequestList& from);
  RequestList(RequestList&& from) noexcept
    : RequestList() {
    *this = ::std::move(from);
  }

  inline RequestList& operator=(const RequestList& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestList& operator=(RequestList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestList& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestList* internal_default_instance() {
    return reinterpret_cast<const RequestList*>(
               &_RequestList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RequestList& a, RequestList& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.RequestList";
  }
  protected:
  explicit RequestList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecRequestFieldNumber = 1,
  };
  // repeated uint64 vecRequest = 1;
  int vecrequest_size() const;
  private:
  int _internal_vecrequest_size() const;
  public:
  void clear_vecrequest();
  private:
  uint64_t _internal_vecrequest(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_vecrequest() const;
  void _internal_add_vecrequest(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_vecrequest();
  public:
  uint64_t vecrequest(int index) const;
  void set_vecrequest(int index, uint64_t value);
  void add_vecrequest(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      vecrequest() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_vecrequest();

  // @@protoc_insertion_point(class_scope:common.RequestList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > vecrequest_;
  mutable std::atomic<int> _vecrequest_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendcommon_2eproto;
};
// -------------------------------------------------------------------

class BlockList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.BlockList) */ {
 public:
  inline BlockList() : BlockList(nullptr) {}
  ~BlockList() override;
  explicit PROTOBUF_CONSTEXPR BlockList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockList(const BlockList& from);
  BlockList(BlockList&& from) noexcept
    : BlockList() {
    *this = ::std::move(from);
  }

  inline BlockList& operator=(const BlockList& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockList& operator=(BlockList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockList& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockList* internal_default_instance() {
    return reinterpret_cast<const BlockList*>(
               &_BlockList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BlockList& a, BlockList& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlockList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.BlockList";
  }
  protected:
  explicit BlockList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecBlockFieldNumber = 1,
  };
  // repeated uint64 vecBlock = 1;
  int vecblock_size() const;
  private:
  int _internal_vecblock_size() const;
  public:
  void clear_vecblock();
  private:
  uint64_t _internal_vecblock(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_vecblock() const;
  void _internal_add_vecblock(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_vecblock();
  public:
  uint64_t vecblock(int index) const;
  void set_vecblock(int index, uint64_t value);
  void add_vecblock(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      vecblock() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_vecblock();

  // @@protoc_insertion_point(class_scope:common.BlockList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > vecblock_;
  mutable std::atomic<int> _vecblock_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendcommon_2eproto;
};
// -------------------------------------------------------------------

class RecommendFilter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.RecommendFilter) */ {
 public:
  inline RecommendFilter() : RecommendFilter(nullptr) {}
  ~RecommendFilter() override;
  explicit PROTOBUF_CONSTEXPR RecommendFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecommendFilter(const RecommendFilter& from);
  RecommendFilter(RecommendFilter&& from) noexcept
    : RecommendFilter() {
    *this = ::std::move(from);
  }

  inline RecommendFilter& operator=(const RecommendFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecommendFilter& operator=(RecommendFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecommendFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecommendFilter* internal_default_instance() {
    return reinterpret_cast<const RecommendFilter*>(
               &_RecommendFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RecommendFilter& a, RecommendFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(RecommendFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecommendFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecommendFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecommendFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecommendFilter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecommendFilter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecommendFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.RecommendFilter";
  }
  protected:
  explicit RecommendFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBOnlyCityFieldNumber = 1,
    kUiSexFieldNumber = 2,
    kUiBitLabelFieldNumber = 3,
  };
  // bool bOnlyCity = 1;
  void clear_bonlycity();
  bool bonlycity() const;
  void set_bonlycity(bool value);
  private:
  bool _internal_bonlycity() const;
  void _internal_set_bonlycity(bool value);
  public:

  // uint32 uiSex = 2;
  void clear_uisex();
  uint32_t uisex() const;
  void set_uisex(uint32_t value);
  private:
  uint32_t _internal_uisex() const;
  void _internal_set_uisex(uint32_t value);
  public:

  // uint32 uiBitLabel = 3;
  void clear_uibitlabel();
  uint32_t uibitlabel() const;
  void set_uibitlabel(uint32_t value);
  private:
  uint32_t _internal_uibitlabel() const;
  void _internal_set_uibitlabel(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.RecommendFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool bonlycity_;
  uint32_t uisex_;
  uint32_t uibitlabel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendcommon_2eproto;
};
// -------------------------------------------------------------------

class RecommendLabel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.RecommendLabel) */ {
 public:
  inline RecommendLabel() : RecommendLabel(nullptr) {}
  ~RecommendLabel() override;
  explicit PROTOBUF_CONSTEXPR RecommendLabel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecommendLabel(const RecommendLabel& from);
  RecommendLabel(RecommendLabel&& from) noexcept
    : RecommendLabel() {
    *this = ::std::move(from);
  }

  inline RecommendLabel& operator=(const RecommendLabel& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecommendLabel& operator=(RecommendLabel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecommendLabel& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecommendLabel* internal_default_instance() {
    return reinterpret_cast<const RecommendLabel*>(
               &_RecommendLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RecommendLabel& a, RecommendLabel& b) {
    a.Swap(&b);
  }
  inline void Swap(RecommendLabel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecommendLabel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecommendLabel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecommendLabel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecommendLabel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecommendLabel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecommendLabel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.RecommendLabel";
  }
  protected:
  explicit RecommendLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUiCityFieldNumber = 1,
    kUiBitLabelFieldNumber = 2,
    kBAvailableFieldNumber = 3,
  };
  // uint32 uiCity = 1;
  void clear_uicity();
  uint32_t uicity() const;
  void set_uicity(uint32_t value);
  private:
  uint32_t _internal_uicity() const;
  void _internal_set_uicity(uint32_t value);
  public:

  // uint32 uiBitLabel = 2;
  void clear_uibitlabel();
  uint32_t uibitlabel() const;
  void set_uibitlabel(uint32_t value);
  private:
  uint32_t _internal_uibitlabel() const;
  void _internal_set_uibitlabel(uint32_t value);
  public:

  // bool bAvailable = 3;
  void clear_bavailable();
  bool bavailable() const;
  void set_bavailable(bool value);
  private:
  bool _internal_bavailable() const;
  void _internal_set_bavailable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:common.RecommendLabel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t uicity_;
  uint32_t uibitlabel_;
  bool bavailable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendcommon_2eproto;
};
// -------------------------------------------------------------------

class SendGiftTimes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.SendGiftTimes) */ {
 public:
  inline SendGiftTimes() : SendGiftTimes(nullptr) {}
  ~SendGiftTimes() override;
  explicit PROTOBUF_CONSTEXPR SendGiftTimes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendGiftTimes(const SendGiftTimes& from);
  SendGiftTimes(SendGiftTimes&& from) noexcept
    : SendGiftTimes() {
    *this = ::std::move(from);
  }

  inline SendGiftTimes& operator=(const SendGiftTimes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendGiftTimes& operator=(SendGiftTimes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendGiftTimes& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendGiftTimes* internal_default_instance() {
    return reinterpret_cast<const SendGiftTimes*>(
               &_SendGiftTimes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SendGiftTimes& a, SendGiftTimes& b) {
    a.Swap(&b);
  }
  inline void Swap(SendGiftTimes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendGiftTimes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendGiftTimes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendGiftTimes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendGiftTimes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendGiftTimes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendGiftTimes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.SendGiftTimes";
  }
  protected:
  explicit SendGiftTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecSendTimesFieldNumber = 2,
    kUiDailySendCountFieldNumber = 1,
  };
  // repeated .common.SingleSendTimes vecSendTimes = 2;
  int vecsendtimes_size() const;
  private:
  int _internal_vecsendtimes_size() const;
  public:
  void clear_vecsendtimes();
  ::common::SingleSendTimes* mutable_vecsendtimes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::SingleSendTimes >*
      mutable_vecsendtimes();
  private:
  const ::common::SingleSendTimes& _internal_vecsendtimes(int index) const;
  ::common::SingleSendTimes* _internal_add_vecsendtimes();
  public:
  const ::common::SingleSendTimes& vecsendtimes(int index) const;
  ::common::SingleSendTimes* add_vecsendtimes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::SingleSendTimes >&
      vecsendtimes() const;

  // uint32 uiDailySendCount = 1;
  void clear_uidailysendcount();
  uint32_t uidailysendcount() const;
  void set_uidailysendcount(uint32_t value);
  private:
  uint32_t _internal_uidailysendcount() const;
  void _internal_set_uidailysendcount(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.SendGiftTimes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::SingleSendTimes > vecsendtimes_;
  uint32_t uidailysendcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendcommon_2eproto;
};
// -------------------------------------------------------------------

class SendGiftHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.SendGiftHistory) */ {
 public:
  inline SendGiftHistory() : SendGiftHistory(nullptr) {}
  ~SendGiftHistory() override;
  explicit PROTOBUF_CONSTEXPR SendGiftHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendGiftHistory(const SendGiftHistory& from);
  SendGiftHistory(SendGiftHistory&& from) noexcept
    : SendGiftHistory() {
    *this = ::std::move(from);
  }

  inline SendGiftHistory& operator=(const SendGiftHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendGiftHistory& operator=(SendGiftHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendGiftHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendGiftHistory* internal_default_instance() {
    return reinterpret_cast<const SendGiftHistory*>(
               &_SendGiftHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SendGiftHistory& a, SendGiftHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(SendGiftHistory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendGiftHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendGiftHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendGiftHistory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendGiftHistory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendGiftHistory& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendGiftHistory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.SendGiftHistory";
  }
  protected:
  explicit SendGiftHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecSendFieldNumber = 1,
    kVecRecvFieldNumber = 2,
  };
  // repeated .common.SendGift vecSend = 1;
  int vecsend_size() const;
  private:
  int _internal_vecsend_size() const;
  public:
  void clear_vecsend();
  ::common::SendGift* mutable_vecsend(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::SendGift >*
      mutable_vecsend();
  private:
  const ::common::SendGift& _internal_vecsend(int index) const;
  ::common::SendGift* _internal_add_vecsend();
  public:
  const ::common::SendGift& vecsend(int index) const;
  ::common::SendGift* add_vecsend();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::SendGift >&
      vecsend() const;

  // repeated .common.RecvGift vecRecv = 2;
  int vecrecv_size() const;
  private:
  int _internal_vecrecv_size() const;
  public:
  void clear_vecrecv();
  ::common::RecvGift* mutable_vecrecv(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::RecvGift >*
      mutable_vecrecv();
  private:
  const ::common::RecvGift& _internal_vecrecv(int index) const;
  ::common::RecvGift* _internal_add_vecrecv();
  public:
  const ::common::RecvGift& vecrecv(int index) const;
  ::common::RecvGift* add_vecrecv();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::RecvGift >&
      vecrecv() const;

  // @@protoc_insertion_point(class_scope:common.SendGiftHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::SendGift > vecsend_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::RecvGift > vecrecv_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendcommon_2eproto;
};
// -------------------------------------------------------------------

class SingleSendTimes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.SingleSendTimes) */ {
 public:
  inline SingleSendTimes() : SingleSendTimes(nullptr) {}
  ~SingleSendTimes() override;
  explicit PROTOBUF_CONSTEXPR SingleSendTimes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleSendTimes(const SingleSendTimes& from);
  SingleSendTimes(SingleSendTimes&& from) noexcept
    : SingleSendTimes() {
    *this = ::std::move(from);
  }

  inline SingleSendTimes& operator=(const SingleSendTimes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleSendTimes& operator=(SingleSendTimes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingleSendTimes& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleSendTimes* internal_default_instance() {
    return reinterpret_cast<const SingleSendTimes*>(
               &_SingleSendTimes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SingleSendTimes& a, SingleSendTimes& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleSendTimes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleSendTimes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingleSendTimes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SingleSendTimes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SingleSendTimes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SingleSendTimes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleSendTimes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.SingleSendTimes";
  }
  protected:
  explicit SingleSendTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlRoleIdFieldNumber = 1,
    kUiTimesFieldNumber = 2,
  };
  // uint64 llRoleId = 1;
  void clear_llroleid();
  uint64_t llroleid() const;
  void set_llroleid(uint64_t value);
  private:
  uint64_t _internal_llroleid() const;
  void _internal_set_llroleid(uint64_t value);
  public:

  // uint32 uiTimes = 2;
  void clear_uitimes();
  uint32_t uitimes() const;
  void set_uitimes(uint32_t value);
  private:
  uint32_t _internal_uitimes() const;
  void _internal_set_uitimes(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.SingleSendTimes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t llroleid_;
  uint32_t uitimes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendcommon_2eproto;
};
// -------------------------------------------------------------------

class SendGift final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.SendGift) */ {
 public:
  inline SendGift() : SendGift(nullptr) {}
  ~SendGift() override;
  explicit PROTOBUF_CONSTEXPR SendGift(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendGift(const SendGift& from);
  SendGift(SendGift&& from) noexcept
    : SendGift() {
    *this = ::std::move(from);
  }

  inline SendGift& operator=(const SendGift& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendGift& operator=(SendGift&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendGift& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendGift* internal_default_instance() {
    return reinterpret_cast<const SendGift*>(
               &_SendGift_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SendGift& a, SendGift& b) {
    a.Swap(&b);
  }
  inline void Swap(SendGift* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendGift* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendGift* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendGift>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendGift& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendGift& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendGift* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.SendGift";
  }
  protected:
  explicit SendGift(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlUidFieldNumber = 1,
    kLlRecverFieldNumber = 2,
    kUiItemTidFieldNumber = 3,
    kUiCountFieldNumber = 4,
    kLlTimestampFieldNumber = 5,
    kBReceivedFieldNumber = 6,
  };
  // uint64 llUid = 1;
  void clear_lluid();
  uint64_t lluid() const;
  void set_lluid(uint64_t value);
  private:
  uint64_t _internal_lluid() const;
  void _internal_set_lluid(uint64_t value);
  public:

  // uint64 llRecver = 2;
  void clear_llrecver();
  uint64_t llrecver() const;
  void set_llrecver(uint64_t value);
  private:
  uint64_t _internal_llrecver() const;
  void _internal_set_llrecver(uint64_t value);
  public:

  // uint32 uiItemTid = 3;
  void clear_uiitemtid();
  uint32_t uiitemtid() const;
  void set_uiitemtid(uint32_t value);
  private:
  uint32_t _internal_uiitemtid() const;
  void _internal_set_uiitemtid(uint32_t value);
  public:

  // uint32 uiCount = 4;
  void clear_uicount();
  uint32_t uicount() const;
  void set_uicount(uint32_t value);
  private:
  uint32_t _internal_uicount() const;
  void _internal_set_uicount(uint32_t value);
  public:

  // uint64 llTimestamp = 5;
  void clear_lltimestamp();
  uint64_t lltimestamp() const;
  void set_lltimestamp(uint64_t value);
  private:
  uint64_t _internal_lltimestamp() const;
  void _internal_set_lltimestamp(uint64_t value);
  public:

  // bool bReceived = 6;
  void clear_breceived();
  bool breceived() const;
  void set_breceived(bool value);
  private:
  bool _internal_breceived() const;
  void _internal_set_breceived(bool value);
  public:

  // @@protoc_insertion_point(class_scope:common.SendGift)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t lluid_;
  uint64_t llrecver_;
  uint32_t uiitemtid_;
  uint32_t uicount_;
  uint64_t lltimestamp_;
  bool breceived_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendcommon_2eproto;
};
// -------------------------------------------------------------------

class RecvGift final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.RecvGift) */ {
 public:
  inline RecvGift() : RecvGift(nullptr) {}
  ~RecvGift() override;
  explicit PROTOBUF_CONSTEXPR RecvGift(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecvGift(const RecvGift& from);
  RecvGift(RecvGift&& from) noexcept
    : RecvGift() {
    *this = ::std::move(from);
  }

  inline RecvGift& operator=(const RecvGift& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecvGift& operator=(RecvGift&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecvGift& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecvGift* internal_default_instance() {
    return reinterpret_cast<const RecvGift*>(
               &_RecvGift_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RecvGift& a, RecvGift& b) {
    a.Swap(&b);
  }
  inline void Swap(RecvGift* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecvGift* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecvGift* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecvGift>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecvGift& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecvGift& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecvGift* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.RecvGift";
  }
  protected:
  explicit RecvGift(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlUidFieldNumber = 1,
    kLlSenderFieldNumber = 2,
    kUiItemTidFieldNumber = 3,
    kUiCountFieldNumber = 4,
    kLlTimeStampFieldNumber = 5,
  };
  // uint64 llUid = 1;
  void clear_lluid();
  uint64_t lluid() const;
  void set_lluid(uint64_t value);
  private:
  uint64_t _internal_lluid() const;
  void _internal_set_lluid(uint64_t value);
  public:

  // uint64 llSender = 2;
  void clear_llsender();
  uint64_t llsender() const;
  void set_llsender(uint64_t value);
  private:
  uint64_t _internal_llsender() const;
  void _internal_set_llsender(uint64_t value);
  public:

  // uint32 uiItemTid = 3;
  void clear_uiitemtid();
  uint32_t uiitemtid() const;
  void set_uiitemtid(uint32_t value);
  private:
  uint32_t _internal_uiitemtid() const;
  void _internal_set_uiitemtid(uint32_t value);
  public:

  // uint32 uiCount = 4;
  void clear_uicount();
  uint32_t uicount() const;
  void set_uicount(uint32_t value);
  private:
  uint32_t _internal_uicount() const;
  void _internal_set_uicount(uint32_t value);
  public:

  // uint64 llTimeStamp = 5;
  void clear_lltimestamp();
  uint64_t lltimestamp() const;
  void set_lltimestamp(uint64_t value);
  private:
  uint64_t _internal_lltimestamp() const;
  void _internal_set_lltimestamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.RecvGift)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t lluid_;
  uint64_t llsender_;
  uint32_t uiitemtid_;
  uint32_t uicount_;
  uint64_t lltimestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendcommon_2eproto;
};
// -------------------------------------------------------------------

class FriendFieldList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.FriendFieldList) */ {
 public:
  inline FriendFieldList() : FriendFieldList(nullptr) {}
  ~FriendFieldList() override;
  explicit PROTOBUF_CONSTEXPR FriendFieldList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendFieldList(const FriendFieldList& from);
  FriendFieldList(FriendFieldList&& from) noexcept
    : FriendFieldList() {
    *this = ::std::move(from);
  }

  inline FriendFieldList& operator=(const FriendFieldList& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendFieldList& operator=(FriendFieldList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendFieldList& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendFieldList* internal_default_instance() {
    return reinterpret_cast<const FriendFieldList*>(
               &_FriendFieldList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FriendFieldList& a, FriendFieldList& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendFieldList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendFieldList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendFieldList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendFieldList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendFieldList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FriendFieldList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendFieldList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.FriendFieldList";
  }
  protected:
  explicit FriendFieldList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecIdsFieldNumber = 1,
    kVecStrFieldNumber = 2,
  };
  // repeated .common.FriendFieldId vecIds = 1;
  int vecids_size() const;
  private:
  int _internal_vecids_size() const;
  public:
  void clear_vecids();
  ::common::FriendFieldId* mutable_vecids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::FriendFieldId >*
      mutable_vecids();
  private:
  const ::common::FriendFieldId& _internal_vecids(int index) const;
  ::common::FriendFieldId* _internal_add_vecids();
  public:
  const ::common::FriendFieldId& vecids(int index) const;
  ::common::FriendFieldId* add_vecids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::FriendFieldId >&
      vecids() const;

  // repeated .common.FriendFieldStr vecStr = 2;
  int vecstr_size() const;
  private:
  int _internal_vecstr_size() const;
  public:
  void clear_vecstr();
  ::common::FriendFieldStr* mutable_vecstr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::FriendFieldStr >*
      mutable_vecstr();
  private:
  const ::common::FriendFieldStr& _internal_vecstr(int index) const;
  ::common::FriendFieldStr* _internal_add_vecstr();
  public:
  const ::common::FriendFieldStr& vecstr(int index) const;
  ::common::FriendFieldStr* add_vecstr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::FriendFieldStr >&
      vecstr() const;

  // @@protoc_insertion_point(class_scope:common.FriendFieldList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::FriendFieldId > vecids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::FriendFieldStr > vecstr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendcommon_2eproto;
};
// -------------------------------------------------------------------

class FriendFieldId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.FriendFieldId) */ {
 public:
  inline FriendFieldId() : FriendFieldId(nullptr) {}
  ~FriendFieldId() override;
  explicit PROTOBUF_CONSTEXPR FriendFieldId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendFieldId(const FriendFieldId& from);
  FriendFieldId(FriendFieldId&& from) noexcept
    : FriendFieldId() {
    *this = ::std::move(from);
  }

  inline FriendFieldId& operator=(const FriendFieldId& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendFieldId& operator=(FriendFieldId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendFieldId& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendFieldId* internal_default_instance() {
    return reinterpret_cast<const FriendFieldId*>(
               &_FriendFieldId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(FriendFieldId& a, FriendFieldId& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendFieldId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendFieldId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendFieldId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendFieldId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendFieldId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FriendFieldId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendFieldId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.FriendFieldId";
  }
  protected:
  explicit FriendFieldId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlValFieldNumber = 2,
    kUiTypeFieldNumber = 1,
  };
  // uint64 llVal = 2;
  void clear_llval();
  uint64_t llval() const;
  void set_llval(uint64_t value);
  private:
  uint64_t _internal_llval() const;
  void _internal_set_llval(uint64_t value);
  public:

  // uint32 uiType = 1;
  void clear_uitype();
  uint32_t uitype() const;
  void set_uitype(uint32_t value);
  private:
  uint32_t _internal_uitype() const;
  void _internal_set_uitype(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.FriendFieldId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t llval_;
  uint32_t uitype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendcommon_2eproto;
};
// -------------------------------------------------------------------

class FriendFieldStr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.FriendFieldStr) */ {
 public:
  inline FriendFieldStr() : FriendFieldStr(nullptr) {}
  ~FriendFieldStr() override;
  explicit PROTOBUF_CONSTEXPR FriendFieldStr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendFieldStr(const FriendFieldStr& from);
  FriendFieldStr(FriendFieldStr&& from) noexcept
    : FriendFieldStr() {
    *this = ::std::move(from);
  }

  inline FriendFieldStr& operator=(const FriendFieldStr& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendFieldStr& operator=(FriendFieldStr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendFieldStr& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendFieldStr* internal_default_instance() {
    return reinterpret_cast<const FriendFieldStr*>(
               &_FriendFieldStr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(FriendFieldStr& a, FriendFieldStr& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendFieldStr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendFieldStr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendFieldStr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendFieldStr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendFieldStr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FriendFieldStr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendFieldStr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.FriendFieldStr";
  }
  protected:
  explicit FriendFieldStr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrDataFieldNumber = 2,
    kUiTypeFieldNumber = 1,
  };
  // bytes strData = 2;
  void clear_strdata();
  const std::string& strdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strdata();
  PROTOBUF_NODISCARD std::string* release_strdata();
  void set_allocated_strdata(std::string* strdata);
  private:
  const std::string& _internal_strdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strdata(const std::string& value);
  std::string* _internal_mutable_strdata();
  public:

  // uint32 uiType = 1;
  void clear_uitype();
  uint32_t uitype() const;
  void set_uitype(uint32_t value);
  private:
  uint32_t _internal_uitype() const;
  void _internal_set_uitype(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.FriendFieldStr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strdata_;
  uint32_t uitype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendcommon_2eproto;
};
// -------------------------------------------------------------------

class RecommendList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.RecommendList) */ {
 public:
  inline RecommendList() : RecommendList(nullptr) {}
  ~RecommendList() override;
  explicit PROTOBUF_CONSTEXPR RecommendList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecommendList(const RecommendList& from);
  RecommendList(RecommendList&& from) noexcept
    : RecommendList() {
    *this = ::std::move(from);
  }

  inline RecommendList& operator=(const RecommendList& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecommendList& operator=(RecommendList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecommendList& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecommendList* internal_default_instance() {
    return reinterpret_cast<const RecommendList*>(
               &_RecommendList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RecommendList& a, RecommendList& b) {
    a.Swap(&b);
  }
  inline void Swap(RecommendList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecommendList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecommendList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecommendList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecommendList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecommendList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecommendList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.RecommendList";
  }
  protected:
  explicit RecommendList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecRoleListFieldNumber = 1,
  };
  // repeated .common.Recommend vecRoleList = 1;
  int vecrolelist_size() const;
  private:
  int _internal_vecrolelist_size() const;
  public:
  void clear_vecrolelist();
  ::common::Recommend* mutable_vecrolelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::Recommend >*
      mutable_vecrolelist();
  private:
  const ::common::Recommend& _internal_vecrolelist(int index) const;
  ::common::Recommend* _internal_add_vecrolelist();
  public:
  const ::common::Recommend& vecrolelist(int index) const;
  ::common::Recommend* add_vecrolelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::Recommend >&
      vecrolelist() const;

  // @@protoc_insertion_point(class_scope:common.RecommendList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::Recommend > vecrolelist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendcommon_2eproto;
};
// -------------------------------------------------------------------

class Recommend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.Recommend) */ {
 public:
  inline Recommend() : Recommend(nullptr) {}
  ~Recommend() override;
  explicit PROTOBUF_CONSTEXPR Recommend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Recommend(const Recommend& from);
  Recommend(Recommend&& from) noexcept
    : Recommend() {
    *this = ::std::move(from);
  }

  inline Recommend& operator=(const Recommend& from) {
    CopyFrom(from);
    return *this;
  }
  inline Recommend& operator=(Recommend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Recommend& default_instance() {
    return *internal_default_instance();
  }
  static inline const Recommend* internal_default_instance() {
    return reinterpret_cast<const Recommend*>(
               &_Recommend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Recommend& a, Recommend& b) {
    a.Swap(&b);
  }
  inline void Swap(Recommend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Recommend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Recommend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Recommend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Recommend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Recommend& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Recommend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.Recommend";
  }
  protected:
  explicit Recommend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlRoleIdFieldNumber = 1,
    kUiCityFieldNumber = 2,
    kUiLabelFieldNumber = 3,
  };
  // uint64 llRoleId = 1;
  void clear_llroleid();
  uint64_t llroleid() const;
  void set_llroleid(uint64_t value);
  private:
  uint64_t _internal_llroleid() const;
  void _internal_set_llroleid(uint64_t value);
  public:

  // uint32 uiCity = 2;
  void clear_uicity();
  uint32_t uicity() const;
  void set_uicity(uint32_t value);
  private:
  uint32_t _internal_uicity() const;
  void _internal_set_uicity(uint32_t value);
  public:

  // uint32 uiLabel = 3;
  void clear_uilabel();
  uint32_t uilabel() const;
  void set_uilabel(uint32_t value);
  private:
  uint32_t _internal_uilabel() const;
  void _internal_set_uilabel(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.Recommend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t llroleid_;
  uint32_t uicity_;
  uint32_t uilabel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FriendInfo

// .common.FriendList oFriend = 1;
inline bool FriendInfo::_internal_has_ofriend() const {
  return this != internal_default_instance() && ofriend_ != nullptr;
}
inline bool FriendInfo::has_ofriend() const {
  return _internal_has_ofriend();
}
inline void FriendInfo::clear_ofriend() {
  if (GetArenaForAllocation() == nullptr && ofriend_ != nullptr) {
    delete ofriend_;
  }
  ofriend_ = nullptr;
}
inline const ::common::FriendList& FriendInfo::_internal_ofriend() const {
  const ::common::FriendList* p = ofriend_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::FriendList&>(
      ::common::_FriendList_default_instance_);
}
inline const ::common::FriendList& FriendInfo::ofriend() const {
  // @@protoc_insertion_point(field_get:common.FriendInfo.oFriend)
  return _internal_ofriend();
}
inline void FriendInfo::unsafe_arena_set_allocated_ofriend(
    ::common::FriendList* ofriend) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ofriend_);
  }
  ofriend_ = ofriend;
  if (ofriend) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.FriendInfo.oFriend)
}
inline ::common::FriendList* FriendInfo::release_ofriend() {
  
  ::common::FriendList* temp = ofriend_;
  ofriend_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::FriendList* FriendInfo::unsafe_arena_release_ofriend() {
  // @@protoc_insertion_point(field_release:common.FriendInfo.oFriend)
  
  ::common::FriendList* temp = ofriend_;
  ofriend_ = nullptr;
  return temp;
}
inline ::common::FriendList* FriendInfo::_internal_mutable_ofriend() {
  
  if (ofriend_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::FriendList>(GetArenaForAllocation());
    ofriend_ = p;
  }
  return ofriend_;
}
inline ::common::FriendList* FriendInfo::mutable_ofriend() {
  ::common::FriendList* _msg = _internal_mutable_ofriend();
  // @@protoc_insertion_point(field_mutable:common.FriendInfo.oFriend)
  return _msg;
}
inline void FriendInfo::set_allocated_ofriend(::common::FriendList* ofriend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ofriend_;
  }
  if (ofriend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ofriend);
    if (message_arena != submessage_arena) {
      ofriend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ofriend, submessage_arena);
    }
    
  } else {
    
  }
  ofriend_ = ofriend;
  // @@protoc_insertion_point(field_set_allocated:common.FriendInfo.oFriend)
}

// .common.RequestList oRequest = 2;
inline bool FriendInfo::_internal_has_orequest() const {
  return this != internal_default_instance() && orequest_ != nullptr;
}
inline bool FriendInfo::has_orequest() const {
  return _internal_has_orequest();
}
inline void FriendInfo::clear_orequest() {
  if (GetArenaForAllocation() == nullptr && orequest_ != nullptr) {
    delete orequest_;
  }
  orequest_ = nullptr;
}
inline const ::common::RequestList& FriendInfo::_internal_orequest() const {
  const ::common::RequestList* p = orequest_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RequestList&>(
      ::common::_RequestList_default_instance_);
}
inline const ::common::RequestList& FriendInfo::orequest() const {
  // @@protoc_insertion_point(field_get:common.FriendInfo.oRequest)
  return _internal_orequest();
}
inline void FriendInfo::unsafe_arena_set_allocated_orequest(
    ::common::RequestList* orequest) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orequest_);
  }
  orequest_ = orequest;
  if (orequest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.FriendInfo.oRequest)
}
inline ::common::RequestList* FriendInfo::release_orequest() {
  
  ::common::RequestList* temp = orequest_;
  orequest_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RequestList* FriendInfo::unsafe_arena_release_orequest() {
  // @@protoc_insertion_point(field_release:common.FriendInfo.oRequest)
  
  ::common::RequestList* temp = orequest_;
  orequest_ = nullptr;
  return temp;
}
inline ::common::RequestList* FriendInfo::_internal_mutable_orequest() {
  
  if (orequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RequestList>(GetArenaForAllocation());
    orequest_ = p;
  }
  return orequest_;
}
inline ::common::RequestList* FriendInfo::mutable_orequest() {
  ::common::RequestList* _msg = _internal_mutable_orequest();
  // @@protoc_insertion_point(field_mutable:common.FriendInfo.oRequest)
  return _msg;
}
inline void FriendInfo::set_allocated_orequest(::common::RequestList* orequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete orequest_;
  }
  if (orequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(orequest);
    if (message_arena != submessage_arena) {
      orequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orequest, submessage_arena);
    }
    
  } else {
    
  }
  orequest_ = orequest;
  // @@protoc_insertion_point(field_set_allocated:common.FriendInfo.oRequest)
}

// .common.BlockList oBlock = 3;
inline bool FriendInfo::_internal_has_oblock() const {
  return this != internal_default_instance() && oblock_ != nullptr;
}
inline bool FriendInfo::has_oblock() const {
  return _internal_has_oblock();
}
inline void FriendInfo::clear_oblock() {
  if (GetArenaForAllocation() == nullptr && oblock_ != nullptr) {
    delete oblock_;
  }
  oblock_ = nullptr;
}
inline const ::common::BlockList& FriendInfo::_internal_oblock() const {
  const ::common::BlockList* p = oblock_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::BlockList&>(
      ::common::_BlockList_default_instance_);
}
inline const ::common::BlockList& FriendInfo::oblock() const {
  // @@protoc_insertion_point(field_get:common.FriendInfo.oBlock)
  return _internal_oblock();
}
inline void FriendInfo::unsafe_arena_set_allocated_oblock(
    ::common::BlockList* oblock) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oblock_);
  }
  oblock_ = oblock;
  if (oblock) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.FriendInfo.oBlock)
}
inline ::common::BlockList* FriendInfo::release_oblock() {
  
  ::common::BlockList* temp = oblock_;
  oblock_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::BlockList* FriendInfo::unsafe_arena_release_oblock() {
  // @@protoc_insertion_point(field_release:common.FriendInfo.oBlock)
  
  ::common::BlockList* temp = oblock_;
  oblock_ = nullptr;
  return temp;
}
inline ::common::BlockList* FriendInfo::_internal_mutable_oblock() {
  
  if (oblock_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::BlockList>(GetArenaForAllocation());
    oblock_ = p;
  }
  return oblock_;
}
inline ::common::BlockList* FriendInfo::mutable_oblock() {
  ::common::BlockList* _msg = _internal_mutable_oblock();
  // @@protoc_insertion_point(field_mutable:common.FriendInfo.oBlock)
  return _msg;
}
inline void FriendInfo::set_allocated_oblock(::common::BlockList* oblock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete oblock_;
  }
  if (oblock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(oblock);
    if (message_arena != submessage_arena) {
      oblock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oblock, submessage_arena);
    }
    
  } else {
    
  }
  oblock_ = oblock;
  // @@protoc_insertion_point(field_set_allocated:common.FriendInfo.oBlock)
}

// .common.enFriendFieldType oMsgList = 4;
inline void FriendInfo::clear_omsglist() {
  omsglist_ = 0;
}
inline ::common::enFriendFieldType FriendInfo::_internal_omsglist() const {
  return static_cast< ::common::enFriendFieldType >(omsglist_);
}
inline ::common::enFriendFieldType FriendInfo::omsglist() const {
  // @@protoc_insertion_point(field_get:common.FriendInfo.oMsgList)
  return _internal_omsglist();
}
inline void FriendInfo::_internal_set_omsglist(::common::enFriendFieldType value) {
  
  omsglist_ = value;
}
inline void FriendInfo::set_omsglist(::common::enFriendFieldType value) {
  _internal_set_omsglist(value);
  // @@protoc_insertion_point(field_set:common.FriendInfo.oMsgList)
}

// .common.RecommendFilter oFilter = 5;
inline bool FriendInfo::_internal_has_ofilter() const {
  return this != internal_default_instance() && ofilter_ != nullptr;
}
inline bool FriendInfo::has_ofilter() const {
  return _internal_has_ofilter();
}
inline void FriendInfo::clear_ofilter() {
  if (GetArenaForAllocation() == nullptr && ofilter_ != nullptr) {
    delete ofilter_;
  }
  ofilter_ = nullptr;
}
inline const ::common::RecommendFilter& FriendInfo::_internal_ofilter() const {
  const ::common::RecommendFilter* p = ofilter_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RecommendFilter&>(
      ::common::_RecommendFilter_default_instance_);
}
inline const ::common::RecommendFilter& FriendInfo::ofilter() const {
  // @@protoc_insertion_point(field_get:common.FriendInfo.oFilter)
  return _internal_ofilter();
}
inline void FriendInfo::unsafe_arena_set_allocated_ofilter(
    ::common::RecommendFilter* ofilter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ofilter_);
  }
  ofilter_ = ofilter;
  if (ofilter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.FriendInfo.oFilter)
}
inline ::common::RecommendFilter* FriendInfo::release_ofilter() {
  
  ::common::RecommendFilter* temp = ofilter_;
  ofilter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RecommendFilter* FriendInfo::unsafe_arena_release_ofilter() {
  // @@protoc_insertion_point(field_release:common.FriendInfo.oFilter)
  
  ::common::RecommendFilter* temp = ofilter_;
  ofilter_ = nullptr;
  return temp;
}
inline ::common::RecommendFilter* FriendInfo::_internal_mutable_ofilter() {
  
  if (ofilter_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RecommendFilter>(GetArenaForAllocation());
    ofilter_ = p;
  }
  return ofilter_;
}
inline ::common::RecommendFilter* FriendInfo::mutable_ofilter() {
  ::common::RecommendFilter* _msg = _internal_mutable_ofilter();
  // @@protoc_insertion_point(field_mutable:common.FriendInfo.oFilter)
  return _msg;
}
inline void FriendInfo::set_allocated_ofilter(::common::RecommendFilter* ofilter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ofilter_;
  }
  if (ofilter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ofilter);
    if (message_arena != submessage_arena) {
      ofilter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ofilter, submessage_arena);
    }
    
  } else {
    
  }
  ofilter_ = ofilter;
  // @@protoc_insertion_point(field_set_allocated:common.FriendInfo.oFilter)
}

// .common.RecommendLabel oLabel = 6;
inline bool FriendInfo::_internal_has_olabel() const {
  return this != internal_default_instance() && olabel_ != nullptr;
}
inline bool FriendInfo::has_olabel() const {
  return _internal_has_olabel();
}
inline void FriendInfo::clear_olabel() {
  if (GetArenaForAllocation() == nullptr && olabel_ != nullptr) {
    delete olabel_;
  }
  olabel_ = nullptr;
}
inline const ::common::RecommendLabel& FriendInfo::_internal_olabel() const {
  const ::common::RecommendLabel* p = olabel_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RecommendLabel&>(
      ::common::_RecommendLabel_default_instance_);
}
inline const ::common::RecommendLabel& FriendInfo::olabel() const {
  // @@protoc_insertion_point(field_get:common.FriendInfo.oLabel)
  return _internal_olabel();
}
inline void FriendInfo::unsafe_arena_set_allocated_olabel(
    ::common::RecommendLabel* olabel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(olabel_);
  }
  olabel_ = olabel;
  if (olabel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.FriendInfo.oLabel)
}
inline ::common::RecommendLabel* FriendInfo::release_olabel() {
  
  ::common::RecommendLabel* temp = olabel_;
  olabel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RecommendLabel* FriendInfo::unsafe_arena_release_olabel() {
  // @@protoc_insertion_point(field_release:common.FriendInfo.oLabel)
  
  ::common::RecommendLabel* temp = olabel_;
  olabel_ = nullptr;
  return temp;
}
inline ::common::RecommendLabel* FriendInfo::_internal_mutable_olabel() {
  
  if (olabel_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RecommendLabel>(GetArenaForAllocation());
    olabel_ = p;
  }
  return olabel_;
}
inline ::common::RecommendLabel* FriendInfo::mutable_olabel() {
  ::common::RecommendLabel* _msg = _internal_mutable_olabel();
  // @@protoc_insertion_point(field_mutable:common.FriendInfo.oLabel)
  return _msg;
}
inline void FriendInfo::set_allocated_olabel(::common::RecommendLabel* olabel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete olabel_;
  }
  if (olabel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(olabel);
    if (message_arena != submessage_arena) {
      olabel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, olabel, submessage_arena);
    }
    
  } else {
    
  }
  olabel_ = olabel;
  // @@protoc_insertion_point(field_set_allocated:common.FriendInfo.oLabel)
}

// .common.SendGiftTimes oSendTimes = 7;
inline bool FriendInfo::_internal_has_osendtimes() const {
  return this != internal_default_instance() && osendtimes_ != nullptr;
}
inline bool FriendInfo::has_osendtimes() const {
  return _internal_has_osendtimes();
}
inline void FriendInfo::clear_osendtimes() {
  if (GetArenaForAllocation() == nullptr && osendtimes_ != nullptr) {
    delete osendtimes_;
  }
  osendtimes_ = nullptr;
}
inline const ::common::SendGiftTimes& FriendInfo::_internal_osendtimes() const {
  const ::common::SendGiftTimes* p = osendtimes_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::SendGiftTimes&>(
      ::common::_SendGiftTimes_default_instance_);
}
inline const ::common::SendGiftTimes& FriendInfo::osendtimes() const {
  // @@protoc_insertion_point(field_get:common.FriendInfo.oSendTimes)
  return _internal_osendtimes();
}
inline void FriendInfo::unsafe_arena_set_allocated_osendtimes(
    ::common::SendGiftTimes* osendtimes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(osendtimes_);
  }
  osendtimes_ = osendtimes;
  if (osendtimes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.FriendInfo.oSendTimes)
}
inline ::common::SendGiftTimes* FriendInfo::release_osendtimes() {
  
  ::common::SendGiftTimes* temp = osendtimes_;
  osendtimes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::SendGiftTimes* FriendInfo::unsafe_arena_release_osendtimes() {
  // @@protoc_insertion_point(field_release:common.FriendInfo.oSendTimes)
  
  ::common::SendGiftTimes* temp = osendtimes_;
  osendtimes_ = nullptr;
  return temp;
}
inline ::common::SendGiftTimes* FriendInfo::_internal_mutable_osendtimes() {
  
  if (osendtimes_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::SendGiftTimes>(GetArenaForAllocation());
    osendtimes_ = p;
  }
  return osendtimes_;
}
inline ::common::SendGiftTimes* FriendInfo::mutable_osendtimes() {
  ::common::SendGiftTimes* _msg = _internal_mutable_osendtimes();
  // @@protoc_insertion_point(field_mutable:common.FriendInfo.oSendTimes)
  return _msg;
}
inline void FriendInfo::set_allocated_osendtimes(::common::SendGiftTimes* osendtimes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete osendtimes_;
  }
  if (osendtimes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(osendtimes);
    if (message_arena != submessage_arena) {
      osendtimes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, osendtimes, submessage_arena);
    }
    
  } else {
    
  }
  osendtimes_ = osendtimes;
  // @@protoc_insertion_point(field_set_allocated:common.FriendInfo.oSendTimes)
}

// .common.SendGiftHistory oHistory = 8;
inline bool FriendInfo::_internal_has_ohistory() const {
  return this != internal_default_instance() && ohistory_ != nullptr;
}
inline bool FriendInfo::has_ohistory() const {
  return _internal_has_ohistory();
}
inline void FriendInfo::clear_ohistory() {
  if (GetArenaForAllocation() == nullptr && ohistory_ != nullptr) {
    delete ohistory_;
  }
  ohistory_ = nullptr;
}
inline const ::common::SendGiftHistory& FriendInfo::_internal_ohistory() const {
  const ::common::SendGiftHistory* p = ohistory_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::SendGiftHistory&>(
      ::common::_SendGiftHistory_default_instance_);
}
inline const ::common::SendGiftHistory& FriendInfo::ohistory() const {
  // @@protoc_insertion_point(field_get:common.FriendInfo.oHistory)
  return _internal_ohistory();
}
inline void FriendInfo::unsafe_arena_set_allocated_ohistory(
    ::common::SendGiftHistory* ohistory) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ohistory_);
  }
  ohistory_ = ohistory;
  if (ohistory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.FriendInfo.oHistory)
}
inline ::common::SendGiftHistory* FriendInfo::release_ohistory() {
  
  ::common::SendGiftHistory* temp = ohistory_;
  ohistory_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::SendGiftHistory* FriendInfo::unsafe_arena_release_ohistory() {
  // @@protoc_insertion_point(field_release:common.FriendInfo.oHistory)
  
  ::common::SendGiftHistory* temp = ohistory_;
  ohistory_ = nullptr;
  return temp;
}
inline ::common::SendGiftHistory* FriendInfo::_internal_mutable_ohistory() {
  
  if (ohistory_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::SendGiftHistory>(GetArenaForAllocation());
    ohistory_ = p;
  }
  return ohistory_;
}
inline ::common::SendGiftHistory* FriendInfo::mutable_ohistory() {
  ::common::SendGiftHistory* _msg = _internal_mutable_ohistory();
  // @@protoc_insertion_point(field_mutable:common.FriendInfo.oHistory)
  return _msg;
}
inline void FriendInfo::set_allocated_ohistory(::common::SendGiftHistory* ohistory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ohistory_;
  }
  if (ohistory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ohistory);
    if (message_arena != submessage_arena) {
      ohistory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ohistory, submessage_arena);
    }
    
  } else {
    
  }
  ohistory_ = ohistory;
  // @@protoc_insertion_point(field_set_allocated:common.FriendInfo.oHistory)
}

// -------------------------------------------------------------------

// FriendList

// uint32 uiFriendListMax = 1;
inline void FriendList::clear_uifriendlistmax() {
  uifriendlistmax_ = 0u;
}
inline uint32_t FriendList::_internal_uifriendlistmax() const {
  return uifriendlistmax_;
}
inline uint32_t FriendList::uifriendlistmax() const {
  // @@protoc_insertion_point(field_get:common.FriendList.uiFriendListMax)
  return _internal_uifriendlistmax();
}
inline void FriendList::_internal_set_uifriendlistmax(uint32_t value) {
  
  uifriendlistmax_ = value;
}
inline void FriendList::set_uifriendlistmax(uint32_t value) {
  _internal_set_uifriendlistmax(value);
  // @@protoc_insertion_point(field_set:common.FriendList.uiFriendListMax)
}

// repeated .common.FriendRelation vecFriends = 2;
inline int FriendList::_internal_vecfriends_size() const {
  return vecfriends_.size();
}
inline int FriendList::vecfriends_size() const {
  return _internal_vecfriends_size();
}
inline void FriendList::clear_vecfriends() {
  vecfriends_.Clear();
}
inline ::common::FriendRelation* FriendList::mutable_vecfriends(int index) {
  // @@protoc_insertion_point(field_mutable:common.FriendList.vecFriends)
  return vecfriends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::FriendRelation >*
FriendList::mutable_vecfriends() {
  // @@protoc_insertion_point(field_mutable_list:common.FriendList.vecFriends)
  return &vecfriends_;
}
inline const ::common::FriendRelation& FriendList::_internal_vecfriends(int index) const {
  return vecfriends_.Get(index);
}
inline const ::common::FriendRelation& FriendList::vecfriends(int index) const {
  // @@protoc_insertion_point(field_get:common.FriendList.vecFriends)
  return _internal_vecfriends(index);
}
inline ::common::FriendRelation* FriendList::_internal_add_vecfriends() {
  return vecfriends_.Add();
}
inline ::common::FriendRelation* FriendList::add_vecfriends() {
  ::common::FriendRelation* _add = _internal_add_vecfriends();
  // @@protoc_insertion_point(field_add:common.FriendList.vecFriends)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::FriendRelation >&
FriendList::vecfriends() const {
  // @@protoc_insertion_point(field_list:common.FriendList.vecFriends)
  return vecfriends_;
}

// -------------------------------------------------------------------

// FriendRelation

// uint64 llRoleId = 1;
inline void FriendRelation::clear_llroleid() {
  llroleid_ = uint64_t{0u};
}
inline uint64_t FriendRelation::_internal_llroleid() const {
  return llroleid_;
}
inline uint64_t FriendRelation::llroleid() const {
  // @@protoc_insertion_point(field_get:common.FriendRelation.llRoleId)
  return _internal_llroleid();
}
inline void FriendRelation::_internal_set_llroleid(uint64_t value) {
  
  llroleid_ = value;
}
inline void FriendRelation::set_llroleid(uint64_t value) {
  _internal_set_llroleid(value);
  // @@protoc_insertion_point(field_set:common.FriendRelation.llRoleId)
}

// uint32 uiFriendship = 2;
inline void FriendRelation::clear_uifriendship() {
  uifriendship_ = 0u;
}
inline uint32_t FriendRelation::_internal_uifriendship() const {
  return uifriendship_;
}
inline uint32_t FriendRelation::uifriendship() const {
  // @@protoc_insertion_point(field_get:common.FriendRelation.uiFriendship)
  return _internal_uifriendship();
}
inline void FriendRelation::_internal_set_uifriendship(uint32_t value) {
  
  uifriendship_ = value;
}
inline void FriendRelation::set_uifriendship(uint32_t value) {
  _internal_set_uifriendship(value);
  // @@protoc_insertion_point(field_set:common.FriendRelation.uiFriendship)
}

// uint32 uiDailyChat = 3;
inline void FriendRelation::clear_uidailychat() {
  uidailychat_ = 0u;
}
inline uint32_t FriendRelation::_internal_uidailychat() const {
  return uidailychat_;
}
inline uint32_t FriendRelation::uidailychat() const {
  // @@protoc_insertion_point(field_get:common.FriendRelation.uiDailyChat)
  return _internal_uidailychat();
}
inline void FriendRelation::_internal_set_uidailychat(uint32_t value) {
  
  uidailychat_ = value;
}
inline void FriendRelation::set_uidailychat(uint32_t value) {
  _internal_set_uidailychat(value);
  // @@protoc_insertion_point(field_set:common.FriendRelation.uiDailyChat)
}

// uint64 llTeamId = 4;
inline void FriendRelation::clear_llteamid() {
  llteamid_ = uint64_t{0u};
}
inline uint64_t FriendRelation::_internal_llteamid() const {
  return llteamid_;
}
inline uint64_t FriendRelation::llteamid() const {
  // @@protoc_insertion_point(field_get:common.FriendRelation.llTeamId)
  return _internal_llteamid();
}
inline void FriendRelation::_internal_set_llteamid(uint64_t value) {
  
  llteamid_ = value;
}
inline void FriendRelation::set_llteamid(uint64_t value) {
  _internal_set_llteamid(value);
  // @@protoc_insertion_point(field_set:common.FriendRelation.llTeamId)
}

// bool bOnline = 5;
inline void FriendRelation::clear_bonline() {
  bonline_ = false;
}
inline bool FriendRelation::_internal_bonline() const {
  return bonline_;
}
inline bool FriendRelation::bonline() const {
  // @@protoc_insertion_point(field_get:common.FriendRelation.bOnline)
  return _internal_bonline();
}
inline void FriendRelation::_internal_set_bonline(bool value) {
  
  bonline_ = value;
}
inline void FriendRelation::set_bonline(bool value) {
  _internal_set_bonline(value);
  // @@protoc_insertion_point(field_set:common.FriendRelation.bOnline)
}

// -------------------------------------------------------------------

// RequestList

// repeated uint64 vecRequest = 1;
inline int RequestList::_internal_vecrequest_size() const {
  return vecrequest_.size();
}
inline int RequestList::vecrequest_size() const {
  return _internal_vecrequest_size();
}
inline void RequestList::clear_vecrequest() {
  vecrequest_.Clear();
}
inline uint64_t RequestList::_internal_vecrequest(int index) const {
  return vecrequest_.Get(index);
}
inline uint64_t RequestList::vecrequest(int index) const {
  // @@protoc_insertion_point(field_get:common.RequestList.vecRequest)
  return _internal_vecrequest(index);
}
inline void RequestList::set_vecrequest(int index, uint64_t value) {
  vecrequest_.Set(index, value);
  // @@protoc_insertion_point(field_set:common.RequestList.vecRequest)
}
inline void RequestList::_internal_add_vecrequest(uint64_t value) {
  vecrequest_.Add(value);
}
inline void RequestList::add_vecrequest(uint64_t value) {
  _internal_add_vecrequest(value);
  // @@protoc_insertion_point(field_add:common.RequestList.vecRequest)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
RequestList::_internal_vecrequest() const {
  return vecrequest_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
RequestList::vecrequest() const {
  // @@protoc_insertion_point(field_list:common.RequestList.vecRequest)
  return _internal_vecrequest();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
RequestList::_internal_mutable_vecrequest() {
  return &vecrequest_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
RequestList::mutable_vecrequest() {
  // @@protoc_insertion_point(field_mutable_list:common.RequestList.vecRequest)
  return _internal_mutable_vecrequest();
}

// -------------------------------------------------------------------

// BlockList

// repeated uint64 vecBlock = 1;
inline int BlockList::_internal_vecblock_size() const {
  return vecblock_.size();
}
inline int BlockList::vecblock_size() const {
  return _internal_vecblock_size();
}
inline void BlockList::clear_vecblock() {
  vecblock_.Clear();
}
inline uint64_t BlockList::_internal_vecblock(int index) const {
  return vecblock_.Get(index);
}
inline uint64_t BlockList::vecblock(int index) const {
  // @@protoc_insertion_point(field_get:common.BlockList.vecBlock)
  return _internal_vecblock(index);
}
inline void BlockList::set_vecblock(int index, uint64_t value) {
  vecblock_.Set(index, value);
  // @@protoc_insertion_point(field_set:common.BlockList.vecBlock)
}
inline void BlockList::_internal_add_vecblock(uint64_t value) {
  vecblock_.Add(value);
}
inline void BlockList::add_vecblock(uint64_t value) {
  _internal_add_vecblock(value);
  // @@protoc_insertion_point(field_add:common.BlockList.vecBlock)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
BlockList::_internal_vecblock() const {
  return vecblock_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
BlockList::vecblock() const {
  // @@protoc_insertion_point(field_list:common.BlockList.vecBlock)
  return _internal_vecblock();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
BlockList::_internal_mutable_vecblock() {
  return &vecblock_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
BlockList::mutable_vecblock() {
  // @@protoc_insertion_point(field_mutable_list:common.BlockList.vecBlock)
  return _internal_mutable_vecblock();
}

// -------------------------------------------------------------------

// RecommendFilter

// bool bOnlyCity = 1;
inline void RecommendFilter::clear_bonlycity() {
  bonlycity_ = false;
}
inline bool RecommendFilter::_internal_bonlycity() const {
  return bonlycity_;
}
inline bool RecommendFilter::bonlycity() const {
  // @@protoc_insertion_point(field_get:common.RecommendFilter.bOnlyCity)
  return _internal_bonlycity();
}
inline void RecommendFilter::_internal_set_bonlycity(bool value) {
  
  bonlycity_ = value;
}
inline void RecommendFilter::set_bonlycity(bool value) {
  _internal_set_bonlycity(value);
  // @@protoc_insertion_point(field_set:common.RecommendFilter.bOnlyCity)
}

// uint32 uiSex = 2;
inline void RecommendFilter::clear_uisex() {
  uisex_ = 0u;
}
inline uint32_t RecommendFilter::_internal_uisex() const {
  return uisex_;
}
inline uint32_t RecommendFilter::uisex() const {
  // @@protoc_insertion_point(field_get:common.RecommendFilter.uiSex)
  return _internal_uisex();
}
inline void RecommendFilter::_internal_set_uisex(uint32_t value) {
  
  uisex_ = value;
}
inline void RecommendFilter::set_uisex(uint32_t value) {
  _internal_set_uisex(value);
  // @@protoc_insertion_point(field_set:common.RecommendFilter.uiSex)
}

// uint32 uiBitLabel = 3;
inline void RecommendFilter::clear_uibitlabel() {
  uibitlabel_ = 0u;
}
inline uint32_t RecommendFilter::_internal_uibitlabel() const {
  return uibitlabel_;
}
inline uint32_t RecommendFilter::uibitlabel() const {
  // @@protoc_insertion_point(field_get:common.RecommendFilter.uiBitLabel)
  return _internal_uibitlabel();
}
inline void RecommendFilter::_internal_set_uibitlabel(uint32_t value) {
  
  uibitlabel_ = value;
}
inline void RecommendFilter::set_uibitlabel(uint32_t value) {
  _internal_set_uibitlabel(value);
  // @@protoc_insertion_point(field_set:common.RecommendFilter.uiBitLabel)
}

// -------------------------------------------------------------------

// RecommendLabel

// uint32 uiCity = 1;
inline void RecommendLabel::clear_uicity() {
  uicity_ = 0u;
}
inline uint32_t RecommendLabel::_internal_uicity() const {
  return uicity_;
}
inline uint32_t RecommendLabel::uicity() const {
  // @@protoc_insertion_point(field_get:common.RecommendLabel.uiCity)
  return _internal_uicity();
}
inline void RecommendLabel::_internal_set_uicity(uint32_t value) {
  
  uicity_ = value;
}
inline void RecommendLabel::set_uicity(uint32_t value) {
  _internal_set_uicity(value);
  // @@protoc_insertion_point(field_set:common.RecommendLabel.uiCity)
}

// uint32 uiBitLabel = 2;
inline void RecommendLabel::clear_uibitlabel() {
  uibitlabel_ = 0u;
}
inline uint32_t RecommendLabel::_internal_uibitlabel() const {
  return uibitlabel_;
}
inline uint32_t RecommendLabel::uibitlabel() const {
  // @@protoc_insertion_point(field_get:common.RecommendLabel.uiBitLabel)
  return _internal_uibitlabel();
}
inline void RecommendLabel::_internal_set_uibitlabel(uint32_t value) {
  
  uibitlabel_ = value;
}
inline void RecommendLabel::set_uibitlabel(uint32_t value) {
  _internal_set_uibitlabel(value);
  // @@protoc_insertion_point(field_set:common.RecommendLabel.uiBitLabel)
}

// bool bAvailable = 3;
inline void RecommendLabel::clear_bavailable() {
  bavailable_ = false;
}
inline bool RecommendLabel::_internal_bavailable() const {
  return bavailable_;
}
inline bool RecommendLabel::bavailable() const {
  // @@protoc_insertion_point(field_get:common.RecommendLabel.bAvailable)
  return _internal_bavailable();
}
inline void RecommendLabel::_internal_set_bavailable(bool value) {
  
  bavailable_ = value;
}
inline void RecommendLabel::set_bavailable(bool value) {
  _internal_set_bavailable(value);
  // @@protoc_insertion_point(field_set:common.RecommendLabel.bAvailable)
}

// -------------------------------------------------------------------

// SendGiftTimes

// uint32 uiDailySendCount = 1;
inline void SendGiftTimes::clear_uidailysendcount() {
  uidailysendcount_ = 0u;
}
inline uint32_t SendGiftTimes::_internal_uidailysendcount() const {
  return uidailysendcount_;
}
inline uint32_t SendGiftTimes::uidailysendcount() const {
  // @@protoc_insertion_point(field_get:common.SendGiftTimes.uiDailySendCount)
  return _internal_uidailysendcount();
}
inline void SendGiftTimes::_internal_set_uidailysendcount(uint32_t value) {
  
  uidailysendcount_ = value;
}
inline void SendGiftTimes::set_uidailysendcount(uint32_t value) {
  _internal_set_uidailysendcount(value);
  // @@protoc_insertion_point(field_set:common.SendGiftTimes.uiDailySendCount)
}

// repeated .common.SingleSendTimes vecSendTimes = 2;
inline int SendGiftTimes::_internal_vecsendtimes_size() const {
  return vecsendtimes_.size();
}
inline int SendGiftTimes::vecsendtimes_size() const {
  return _internal_vecsendtimes_size();
}
inline void SendGiftTimes::clear_vecsendtimes() {
  vecsendtimes_.Clear();
}
inline ::common::SingleSendTimes* SendGiftTimes::mutable_vecsendtimes(int index) {
  // @@protoc_insertion_point(field_mutable:common.SendGiftTimes.vecSendTimes)
  return vecsendtimes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::SingleSendTimes >*
SendGiftTimes::mutable_vecsendtimes() {
  // @@protoc_insertion_point(field_mutable_list:common.SendGiftTimes.vecSendTimes)
  return &vecsendtimes_;
}
inline const ::common::SingleSendTimes& SendGiftTimes::_internal_vecsendtimes(int index) const {
  return vecsendtimes_.Get(index);
}
inline const ::common::SingleSendTimes& SendGiftTimes::vecsendtimes(int index) const {
  // @@protoc_insertion_point(field_get:common.SendGiftTimes.vecSendTimes)
  return _internal_vecsendtimes(index);
}
inline ::common::SingleSendTimes* SendGiftTimes::_internal_add_vecsendtimes() {
  return vecsendtimes_.Add();
}
inline ::common::SingleSendTimes* SendGiftTimes::add_vecsendtimes() {
  ::common::SingleSendTimes* _add = _internal_add_vecsendtimes();
  // @@protoc_insertion_point(field_add:common.SendGiftTimes.vecSendTimes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::SingleSendTimes >&
SendGiftTimes::vecsendtimes() const {
  // @@protoc_insertion_point(field_list:common.SendGiftTimes.vecSendTimes)
  return vecsendtimes_;
}

// -------------------------------------------------------------------

// SendGiftHistory

// repeated .common.SendGift vecSend = 1;
inline int SendGiftHistory::_internal_vecsend_size() const {
  return vecsend_.size();
}
inline int SendGiftHistory::vecsend_size() const {
  return _internal_vecsend_size();
}
inline void SendGiftHistory::clear_vecsend() {
  vecsend_.Clear();
}
inline ::common::SendGift* SendGiftHistory::mutable_vecsend(int index) {
  // @@protoc_insertion_point(field_mutable:common.SendGiftHistory.vecSend)
  return vecsend_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::SendGift >*
SendGiftHistory::mutable_vecsend() {
  // @@protoc_insertion_point(field_mutable_list:common.SendGiftHistory.vecSend)
  return &vecsend_;
}
inline const ::common::SendGift& SendGiftHistory::_internal_vecsend(int index) const {
  return vecsend_.Get(index);
}
inline const ::common::SendGift& SendGiftHistory::vecsend(int index) const {
  // @@protoc_insertion_point(field_get:common.SendGiftHistory.vecSend)
  return _internal_vecsend(index);
}
inline ::common::SendGift* SendGiftHistory::_internal_add_vecsend() {
  return vecsend_.Add();
}
inline ::common::SendGift* SendGiftHistory::add_vecsend() {
  ::common::SendGift* _add = _internal_add_vecsend();
  // @@protoc_insertion_point(field_add:common.SendGiftHistory.vecSend)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::SendGift >&
SendGiftHistory::vecsend() const {
  // @@protoc_insertion_point(field_list:common.SendGiftHistory.vecSend)
  return vecsend_;
}

// repeated .common.RecvGift vecRecv = 2;
inline int SendGiftHistory::_internal_vecrecv_size() const {
  return vecrecv_.size();
}
inline int SendGiftHistory::vecrecv_size() const {
  return _internal_vecrecv_size();
}
inline void SendGiftHistory::clear_vecrecv() {
  vecrecv_.Clear();
}
inline ::common::RecvGift* SendGiftHistory::mutable_vecrecv(int index) {
  // @@protoc_insertion_point(field_mutable:common.SendGiftHistory.vecRecv)
  return vecrecv_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::RecvGift >*
SendGiftHistory::mutable_vecrecv() {
  // @@protoc_insertion_point(field_mutable_list:common.SendGiftHistory.vecRecv)
  return &vecrecv_;
}
inline const ::common::RecvGift& SendGiftHistory::_internal_vecrecv(int index) const {
  return vecrecv_.Get(index);
}
inline const ::common::RecvGift& SendGiftHistory::vecrecv(int index) const {
  // @@protoc_insertion_point(field_get:common.SendGiftHistory.vecRecv)
  return _internal_vecrecv(index);
}
inline ::common::RecvGift* SendGiftHistory::_internal_add_vecrecv() {
  return vecrecv_.Add();
}
inline ::common::RecvGift* SendGiftHistory::add_vecrecv() {
  ::common::RecvGift* _add = _internal_add_vecrecv();
  // @@protoc_insertion_point(field_add:common.SendGiftHistory.vecRecv)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::RecvGift >&
SendGiftHistory::vecrecv() const {
  // @@protoc_insertion_point(field_list:common.SendGiftHistory.vecRecv)
  return vecrecv_;
}

// -------------------------------------------------------------------

// SingleSendTimes

// uint64 llRoleId = 1;
inline void SingleSendTimes::clear_llroleid() {
  llroleid_ = uint64_t{0u};
}
inline uint64_t SingleSendTimes::_internal_llroleid() const {
  return llroleid_;
}
inline uint64_t SingleSendTimes::llroleid() const {
  // @@protoc_insertion_point(field_get:common.SingleSendTimes.llRoleId)
  return _internal_llroleid();
}
inline void SingleSendTimes::_internal_set_llroleid(uint64_t value) {
  
  llroleid_ = value;
}
inline void SingleSendTimes::set_llroleid(uint64_t value) {
  _internal_set_llroleid(value);
  // @@protoc_insertion_point(field_set:common.SingleSendTimes.llRoleId)
}

// uint32 uiTimes = 2;
inline void SingleSendTimes::clear_uitimes() {
  uitimes_ = 0u;
}
inline uint32_t SingleSendTimes::_internal_uitimes() const {
  return uitimes_;
}
inline uint32_t SingleSendTimes::uitimes() const {
  // @@protoc_insertion_point(field_get:common.SingleSendTimes.uiTimes)
  return _internal_uitimes();
}
inline void SingleSendTimes::_internal_set_uitimes(uint32_t value) {
  
  uitimes_ = value;
}
inline void SingleSendTimes::set_uitimes(uint32_t value) {
  _internal_set_uitimes(value);
  // @@protoc_insertion_point(field_set:common.SingleSendTimes.uiTimes)
}

// -------------------------------------------------------------------

// SendGift

// uint64 llUid = 1;
inline void SendGift::clear_lluid() {
  lluid_ = uint64_t{0u};
}
inline uint64_t SendGift::_internal_lluid() const {
  return lluid_;
}
inline uint64_t SendGift::lluid() const {
  // @@protoc_insertion_point(field_get:common.SendGift.llUid)
  return _internal_lluid();
}
inline void SendGift::_internal_set_lluid(uint64_t value) {
  
  lluid_ = value;
}
inline void SendGift::set_lluid(uint64_t value) {
  _internal_set_lluid(value);
  // @@protoc_insertion_point(field_set:common.SendGift.llUid)
}

// uint64 llRecver = 2;
inline void SendGift::clear_llrecver() {
  llrecver_ = uint64_t{0u};
}
inline uint64_t SendGift::_internal_llrecver() const {
  return llrecver_;
}
inline uint64_t SendGift::llrecver() const {
  // @@protoc_insertion_point(field_get:common.SendGift.llRecver)
  return _internal_llrecver();
}
inline void SendGift::_internal_set_llrecver(uint64_t value) {
  
  llrecver_ = value;
}
inline void SendGift::set_llrecver(uint64_t value) {
  _internal_set_llrecver(value);
  // @@protoc_insertion_point(field_set:common.SendGift.llRecver)
}

// uint32 uiItemTid = 3;
inline void SendGift::clear_uiitemtid() {
  uiitemtid_ = 0u;
}
inline uint32_t SendGift::_internal_uiitemtid() const {
  return uiitemtid_;
}
inline uint32_t SendGift::uiitemtid() const {
  // @@protoc_insertion_point(field_get:common.SendGift.uiItemTid)
  return _internal_uiitemtid();
}
inline void SendGift::_internal_set_uiitemtid(uint32_t value) {
  
  uiitemtid_ = value;
}
inline void SendGift::set_uiitemtid(uint32_t value) {
  _internal_set_uiitemtid(value);
  // @@protoc_insertion_point(field_set:common.SendGift.uiItemTid)
}

// uint32 uiCount = 4;
inline void SendGift::clear_uicount() {
  uicount_ = 0u;
}
inline uint32_t SendGift::_internal_uicount() const {
  return uicount_;
}
inline uint32_t SendGift::uicount() const {
  // @@protoc_insertion_point(field_get:common.SendGift.uiCount)
  return _internal_uicount();
}
inline void SendGift::_internal_set_uicount(uint32_t value) {
  
  uicount_ = value;
}
inline void SendGift::set_uicount(uint32_t value) {
  _internal_set_uicount(value);
  // @@protoc_insertion_point(field_set:common.SendGift.uiCount)
}

// uint64 llTimestamp = 5;
inline void SendGift::clear_lltimestamp() {
  lltimestamp_ = uint64_t{0u};
}
inline uint64_t SendGift::_internal_lltimestamp() const {
  return lltimestamp_;
}
inline uint64_t SendGift::lltimestamp() const {
  // @@protoc_insertion_point(field_get:common.SendGift.llTimestamp)
  return _internal_lltimestamp();
}
inline void SendGift::_internal_set_lltimestamp(uint64_t value) {
  
  lltimestamp_ = value;
}
inline void SendGift::set_lltimestamp(uint64_t value) {
  _internal_set_lltimestamp(value);
  // @@protoc_insertion_point(field_set:common.SendGift.llTimestamp)
}

// bool bReceived = 6;
inline void SendGift::clear_breceived() {
  breceived_ = false;
}
inline bool SendGift::_internal_breceived() const {
  return breceived_;
}
inline bool SendGift::breceived() const {
  // @@protoc_insertion_point(field_get:common.SendGift.bReceived)
  return _internal_breceived();
}
inline void SendGift::_internal_set_breceived(bool value) {
  
  breceived_ = value;
}
inline void SendGift::set_breceived(bool value) {
  _internal_set_breceived(value);
  // @@protoc_insertion_point(field_set:common.SendGift.bReceived)
}

// -------------------------------------------------------------------

// RecvGift

// uint64 llUid = 1;
inline void RecvGift::clear_lluid() {
  lluid_ = uint64_t{0u};
}
inline uint64_t RecvGift::_internal_lluid() const {
  return lluid_;
}
inline uint64_t RecvGift::lluid() const {
  // @@protoc_insertion_point(field_get:common.RecvGift.llUid)
  return _internal_lluid();
}
inline void RecvGift::_internal_set_lluid(uint64_t value) {
  
  lluid_ = value;
}
inline void RecvGift::set_lluid(uint64_t value) {
  _internal_set_lluid(value);
  // @@protoc_insertion_point(field_set:common.RecvGift.llUid)
}

// uint64 llSender = 2;
inline void RecvGift::clear_llsender() {
  llsender_ = uint64_t{0u};
}
inline uint64_t RecvGift::_internal_llsender() const {
  return llsender_;
}
inline uint64_t RecvGift::llsender() const {
  // @@protoc_insertion_point(field_get:common.RecvGift.llSender)
  return _internal_llsender();
}
inline void RecvGift::_internal_set_llsender(uint64_t value) {
  
  llsender_ = value;
}
inline void RecvGift::set_llsender(uint64_t value) {
  _internal_set_llsender(value);
  // @@protoc_insertion_point(field_set:common.RecvGift.llSender)
}

// uint32 uiItemTid = 3;
inline void RecvGift::clear_uiitemtid() {
  uiitemtid_ = 0u;
}
inline uint32_t RecvGift::_internal_uiitemtid() const {
  return uiitemtid_;
}
inline uint32_t RecvGift::uiitemtid() const {
  // @@protoc_insertion_point(field_get:common.RecvGift.uiItemTid)
  return _internal_uiitemtid();
}
inline void RecvGift::_internal_set_uiitemtid(uint32_t value) {
  
  uiitemtid_ = value;
}
inline void RecvGift::set_uiitemtid(uint32_t value) {
  _internal_set_uiitemtid(value);
  // @@protoc_insertion_point(field_set:common.RecvGift.uiItemTid)
}

// uint32 uiCount = 4;
inline void RecvGift::clear_uicount() {
  uicount_ = 0u;
}
inline uint32_t RecvGift::_internal_uicount() const {
  return uicount_;
}
inline uint32_t RecvGift::uicount() const {
  // @@protoc_insertion_point(field_get:common.RecvGift.uiCount)
  return _internal_uicount();
}
inline void RecvGift::_internal_set_uicount(uint32_t value) {
  
  uicount_ = value;
}
inline void RecvGift::set_uicount(uint32_t value) {
  _internal_set_uicount(value);
  // @@protoc_insertion_point(field_set:common.RecvGift.uiCount)
}

// uint64 llTimeStamp = 5;
inline void RecvGift::clear_lltimestamp() {
  lltimestamp_ = uint64_t{0u};
}
inline uint64_t RecvGift::_internal_lltimestamp() const {
  return lltimestamp_;
}
inline uint64_t RecvGift::lltimestamp() const {
  // @@protoc_insertion_point(field_get:common.RecvGift.llTimeStamp)
  return _internal_lltimestamp();
}
inline void RecvGift::_internal_set_lltimestamp(uint64_t value) {
  
  lltimestamp_ = value;
}
inline void RecvGift::set_lltimestamp(uint64_t value) {
  _internal_set_lltimestamp(value);
  // @@protoc_insertion_point(field_set:common.RecvGift.llTimeStamp)
}

// -------------------------------------------------------------------

// FriendFieldList

// repeated .common.FriendFieldId vecIds = 1;
inline int FriendFieldList::_internal_vecids_size() const {
  return vecids_.size();
}
inline int FriendFieldList::vecids_size() const {
  return _internal_vecids_size();
}
inline void FriendFieldList::clear_vecids() {
  vecids_.Clear();
}
inline ::common::FriendFieldId* FriendFieldList::mutable_vecids(int index) {
  // @@protoc_insertion_point(field_mutable:common.FriendFieldList.vecIds)
  return vecids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::FriendFieldId >*
FriendFieldList::mutable_vecids() {
  // @@protoc_insertion_point(field_mutable_list:common.FriendFieldList.vecIds)
  return &vecids_;
}
inline const ::common::FriendFieldId& FriendFieldList::_internal_vecids(int index) const {
  return vecids_.Get(index);
}
inline const ::common::FriendFieldId& FriendFieldList::vecids(int index) const {
  // @@protoc_insertion_point(field_get:common.FriendFieldList.vecIds)
  return _internal_vecids(index);
}
inline ::common::FriendFieldId* FriendFieldList::_internal_add_vecids() {
  return vecids_.Add();
}
inline ::common::FriendFieldId* FriendFieldList::add_vecids() {
  ::common::FriendFieldId* _add = _internal_add_vecids();
  // @@protoc_insertion_point(field_add:common.FriendFieldList.vecIds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::FriendFieldId >&
FriendFieldList::vecids() const {
  // @@protoc_insertion_point(field_list:common.FriendFieldList.vecIds)
  return vecids_;
}

// repeated .common.FriendFieldStr vecStr = 2;
inline int FriendFieldList::_internal_vecstr_size() const {
  return vecstr_.size();
}
inline int FriendFieldList::vecstr_size() const {
  return _internal_vecstr_size();
}
inline void FriendFieldList::clear_vecstr() {
  vecstr_.Clear();
}
inline ::common::FriendFieldStr* FriendFieldList::mutable_vecstr(int index) {
  // @@protoc_insertion_point(field_mutable:common.FriendFieldList.vecStr)
  return vecstr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::FriendFieldStr >*
FriendFieldList::mutable_vecstr() {
  // @@protoc_insertion_point(field_mutable_list:common.FriendFieldList.vecStr)
  return &vecstr_;
}
inline const ::common::FriendFieldStr& FriendFieldList::_internal_vecstr(int index) const {
  return vecstr_.Get(index);
}
inline const ::common::FriendFieldStr& FriendFieldList::vecstr(int index) const {
  // @@protoc_insertion_point(field_get:common.FriendFieldList.vecStr)
  return _internal_vecstr(index);
}
inline ::common::FriendFieldStr* FriendFieldList::_internal_add_vecstr() {
  return vecstr_.Add();
}
inline ::common::FriendFieldStr* FriendFieldList::add_vecstr() {
  ::common::FriendFieldStr* _add = _internal_add_vecstr();
  // @@protoc_insertion_point(field_add:common.FriendFieldList.vecStr)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::FriendFieldStr >&
FriendFieldList::vecstr() const {
  // @@protoc_insertion_point(field_list:common.FriendFieldList.vecStr)
  return vecstr_;
}

// -------------------------------------------------------------------

// FriendFieldId

// uint32 uiType = 1;
inline void FriendFieldId::clear_uitype() {
  uitype_ = 0u;
}
inline uint32_t FriendFieldId::_internal_uitype() const {
  return uitype_;
}
inline uint32_t FriendFieldId::uitype() const {
  // @@protoc_insertion_point(field_get:common.FriendFieldId.uiType)
  return _internal_uitype();
}
inline void FriendFieldId::_internal_set_uitype(uint32_t value) {
  
  uitype_ = value;
}
inline void FriendFieldId::set_uitype(uint32_t value) {
  _internal_set_uitype(value);
  // @@protoc_insertion_point(field_set:common.FriendFieldId.uiType)
}

// uint64 llVal = 2;
inline void FriendFieldId::clear_llval() {
  llval_ = uint64_t{0u};
}
inline uint64_t FriendFieldId::_internal_llval() const {
  return llval_;
}
inline uint64_t FriendFieldId::llval() const {
  // @@protoc_insertion_point(field_get:common.FriendFieldId.llVal)
  return _internal_llval();
}
inline void FriendFieldId::_internal_set_llval(uint64_t value) {
  
  llval_ = value;
}
inline void FriendFieldId::set_llval(uint64_t value) {
  _internal_set_llval(value);
  // @@protoc_insertion_point(field_set:common.FriendFieldId.llVal)
}

// -------------------------------------------------------------------

// FriendFieldStr

// uint32 uiType = 1;
inline void FriendFieldStr::clear_uitype() {
  uitype_ = 0u;
}
inline uint32_t FriendFieldStr::_internal_uitype() const {
  return uitype_;
}
inline uint32_t FriendFieldStr::uitype() const {
  // @@protoc_insertion_point(field_get:common.FriendFieldStr.uiType)
  return _internal_uitype();
}
inline void FriendFieldStr::_internal_set_uitype(uint32_t value) {
  
  uitype_ = value;
}
inline void FriendFieldStr::set_uitype(uint32_t value) {
  _internal_set_uitype(value);
  // @@protoc_insertion_point(field_set:common.FriendFieldStr.uiType)
}

// bytes strData = 2;
inline void FriendFieldStr::clear_strdata() {
  strdata_.ClearToEmpty();
}
inline const std::string& FriendFieldStr::strdata() const {
  // @@protoc_insertion_point(field_get:common.FriendFieldStr.strData)
  return _internal_strdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendFieldStr::set_strdata(ArgT0&& arg0, ArgT... args) {
 
 strdata_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.FriendFieldStr.strData)
}
inline std::string* FriendFieldStr::mutable_strdata() {
  std::string* _s = _internal_mutable_strdata();
  // @@protoc_insertion_point(field_mutable:common.FriendFieldStr.strData)
  return _s;
}
inline const std::string& FriendFieldStr::_internal_strdata() const {
  return strdata_.Get();
}
inline void FriendFieldStr::_internal_set_strdata(const std::string& value) {
  
  strdata_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendFieldStr::_internal_mutable_strdata() {
  
  return strdata_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendFieldStr::release_strdata() {
  // @@protoc_insertion_point(field_release:common.FriendFieldStr.strData)
  return strdata_.Release();
}
inline void FriendFieldStr::set_allocated_strdata(std::string* strdata) {
  if (strdata != nullptr) {
    
  } else {
    
  }
  strdata_.SetAllocated(strdata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strdata_.IsDefault()) {
    strdata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.FriendFieldStr.strData)
}

// -------------------------------------------------------------------

// RecommendList

// repeated .common.Recommend vecRoleList = 1;
inline int RecommendList::_internal_vecrolelist_size() const {
  return vecrolelist_.size();
}
inline int RecommendList::vecrolelist_size() const {
  return _internal_vecrolelist_size();
}
inline void RecommendList::clear_vecrolelist() {
  vecrolelist_.Clear();
}
inline ::common::Recommend* RecommendList::mutable_vecrolelist(int index) {
  // @@protoc_insertion_point(field_mutable:common.RecommendList.vecRoleList)
  return vecrolelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::Recommend >*
RecommendList::mutable_vecrolelist() {
  // @@protoc_insertion_point(field_mutable_list:common.RecommendList.vecRoleList)
  return &vecrolelist_;
}
inline const ::common::Recommend& RecommendList::_internal_vecrolelist(int index) const {
  return vecrolelist_.Get(index);
}
inline const ::common::Recommend& RecommendList::vecrolelist(int index) const {
  // @@protoc_insertion_point(field_get:common.RecommendList.vecRoleList)
  return _internal_vecrolelist(index);
}
inline ::common::Recommend* RecommendList::_internal_add_vecrolelist() {
  return vecrolelist_.Add();
}
inline ::common::Recommend* RecommendList::add_vecrolelist() {
  ::common::Recommend* _add = _internal_add_vecrolelist();
  // @@protoc_insertion_point(field_add:common.RecommendList.vecRoleList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::Recommend >&
RecommendList::vecrolelist() const {
  // @@protoc_insertion_point(field_list:common.RecommendList.vecRoleList)
  return vecrolelist_;
}

// -------------------------------------------------------------------

// Recommend

// uint64 llRoleId = 1;
inline void Recommend::clear_llroleid() {
  llroleid_ = uint64_t{0u};
}
inline uint64_t Recommend::_internal_llroleid() const {
  return llroleid_;
}
inline uint64_t Recommend::llroleid() const {
  // @@protoc_insertion_point(field_get:common.Recommend.llRoleId)
  return _internal_llroleid();
}
inline void Recommend::_internal_set_llroleid(uint64_t value) {
  
  llroleid_ = value;
}
inline void Recommend::set_llroleid(uint64_t value) {
  _internal_set_llroleid(value);
  // @@protoc_insertion_point(field_set:common.Recommend.llRoleId)
}

// uint32 uiCity = 2;
inline void Recommend::clear_uicity() {
  uicity_ = 0u;
}
inline uint32_t Recommend::_internal_uicity() const {
  return uicity_;
}
inline uint32_t Recommend::uicity() const {
  // @@protoc_insertion_point(field_get:common.Recommend.uiCity)
  return _internal_uicity();
}
inline void Recommend::_internal_set_uicity(uint32_t value) {
  
  uicity_ = value;
}
inline void Recommend::set_uicity(uint32_t value) {
  _internal_set_uicity(value);
  // @@protoc_insertion_point(field_set:common.Recommend.uiCity)
}

// uint32 uiLabel = 3;
inline void Recommend::clear_uilabel() {
  uilabel_ = 0u;
}
inline uint32_t Recommend::_internal_uilabel() const {
  return uilabel_;
}
inline uint32_t Recommend::uilabel() const {
  // @@protoc_insertion_point(field_get:common.Recommend.uiLabel)
  return _internal_uilabel();
}
inline void Recommend::_internal_set_uilabel(uint32_t value) {
  
  uilabel_ = value;
}
inline void Recommend::set_uilabel(uint32_t value) {
  _internal_set_uilabel(value);
  // @@protoc_insertion_point(field_set:common.Recommend.uiLabel)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::common::enFriendLabelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::enFriendLabelType>() {
  return ::common::enFriendLabelType_descriptor();
}
template <> struct is_proto_enum< ::common::enFriendFieldType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::enFriendFieldType>() {
  return ::common::enFriendFieldType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_friendcommon_2eproto
