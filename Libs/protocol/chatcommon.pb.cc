// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatcommon.proto

#include "chatcommon.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace common {
PROTOBUF_CONSTEXPR ChatTypeContextUp::ChatTypeContextUp(
    ::_pbi::ConstantInitialized)
  : veccontexts_()
  , llrecverid_(uint64_t{0u}){}
struct ChatTypeContextUpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatTypeContextUpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatTypeContextUpDefaultTypeInternal() {}
  union {
    ChatTypeContextUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatTypeContextUpDefaultTypeInternal _ChatTypeContextUp_default_instance_;
PROTOBUF_CONSTEXPR ChatTypeContextDown::ChatTypeContextDown(
    ::_pbi::ConstantInitialized)
  : veccontexts_()
  , osender_(nullptr)
  , lltimestamp_(uint64_t{0u}){}
struct ChatTypeContextDownDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatTypeContextDownDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatTypeContextDownDefaultTypeInternal() {}
  union {
    ChatTypeContextDown _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatTypeContextDownDefaultTypeInternal _ChatTypeContextDown_default_instance_;
PROTOBUF_CONSTEXPR ChatRole::ChatRole(
    ::_pbi::ConstantInitialized)
  : obrief_(nullptr)
  , uiofficial_(0u)
  , uichatframe_(0u)
  , uichatfont_(0u)
  , uichatbgd_(0u){}
struct ChatRoleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatRoleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatRoleDefaultTypeInternal() {}
  union {
    ChatRole _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatRoleDefaultTypeInternal _ChatRole_default_instance_;
PROTOBUF_CONSTEXPR ChatParamUp::ChatParamUp(
    ::_pbi::ConstantInitialized)
  : ochat_(nullptr)
  , ovoice_(nullptr)
  , osmile_(nullptr)
  , oitem_(nullptr)
  , otid_(nullptr){}
struct ChatParamUpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatParamUpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatParamUpDefaultTypeInternal() {}
  union {
    ChatParamUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatParamUpDefaultTypeInternal _ChatParamUp_default_instance_;
PROTOBUF_CONSTEXPR ChatParamDown::ChatParamDown(
    ::_pbi::ConstantInitialized)
  : ochat_(nullptr)
  , ovoice_(nullptr)
  , osmile_(nullptr)
  , oitem_(nullptr)
  , oatname_(nullptr){}
struct ChatParamDownDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatParamDownDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatParamDownDefaultTypeInternal() {}
  union {
    ChatParamDown _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatParamDownDefaultTypeInternal _ChatParamDown_default_instance_;
PROTOBUF_CONSTEXPR ChatString::ChatString(
    ::_pbi::ConstantInitialized)
  : strchars_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ChatStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatStringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatStringDefaultTypeInternal() {}
  union {
    ChatString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatStringDefaultTypeInternal _ChatString_default_instance_;
PROTOBUF_CONSTEXPR ChatVoice::ChatVoice(
    ::_pbi::ConstantInitialized)
  : strvoices_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ChatVoiceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatVoiceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatVoiceDefaultTypeInternal() {}
  union {
    ChatVoice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatVoiceDefaultTypeInternal _ChatVoice_default_instance_;
PROTOBUF_CONSTEXPR ChatItem::ChatItem(
    ::_pbi::ConstantInitialized)
  : oitem_(nullptr){}
struct ChatItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatItemDefaultTypeInternal() {}
  union {
    ChatItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatItemDefaultTypeInternal _ChatItem_default_instance_;
PROTOBUF_CONSTEXPR ChatSmile::ChatSmile(
    ::_pbi::ConstantInitialized)
  : uiid_(0u){}
struct ChatSmileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatSmileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatSmileDefaultTypeInternal() {}
  union {
    ChatSmile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatSmileDefaultTypeInternal _ChatSmile_default_instance_;
PROTOBUF_CONSTEXPR ChatAtId::ChatAtId(
    ::_pbi::ConstantInitialized)
  : llroleid_(uint64_t{0u}){}
struct ChatAtIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatAtIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatAtIdDefaultTypeInternal() {}
  union {
    ChatAtId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatAtIdDefaultTypeInternal _ChatAtId_default_instance_;
PROTOBUF_CONSTEXPR ChatAtName::ChatAtName(
    ::_pbi::ConstantInitialized)
  : strnick_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , llroleid_(uint64_t{0u}){}
struct ChatAtNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatAtNameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatAtNameDefaultTypeInternal() {}
  union {
    ChatAtName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatAtNameDefaultTypeInternal _ChatAtName_default_instance_;
}  // namespace common
static ::_pb::Metadata file_level_metadata_chatcommon_2eproto[11];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_chatcommon_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_chatcommon_2eproto = nullptr;

const uint32_t TableStruct_chatcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ChatTypeContextUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ChatTypeContextUp, llrecverid_),
  PROTOBUF_FIELD_OFFSET(::common::ChatTypeContextUp, veccontexts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ChatTypeContextDown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ChatTypeContextDown, lltimestamp_),
  PROTOBUF_FIELD_OFFSET(::common::ChatTypeContextDown, osender_),
  PROTOBUF_FIELD_OFFSET(::common::ChatTypeContextDown, veccontexts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ChatRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ChatRole, obrief_),
  PROTOBUF_FIELD_OFFSET(::common::ChatRole, uiofficial_),
  PROTOBUF_FIELD_OFFSET(::common::ChatRole, uichatframe_),
  PROTOBUF_FIELD_OFFSET(::common::ChatRole, uichatfont_),
  PROTOBUF_FIELD_OFFSET(::common::ChatRole, uichatbgd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ChatParamUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ChatParamUp, ochat_),
  PROTOBUF_FIELD_OFFSET(::common::ChatParamUp, ovoice_),
  PROTOBUF_FIELD_OFFSET(::common::ChatParamUp, osmile_),
  PROTOBUF_FIELD_OFFSET(::common::ChatParamUp, oitem_),
  PROTOBUF_FIELD_OFFSET(::common::ChatParamUp, otid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ChatParamDown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ChatParamDown, ochat_),
  PROTOBUF_FIELD_OFFSET(::common::ChatParamDown, ovoice_),
  PROTOBUF_FIELD_OFFSET(::common::ChatParamDown, osmile_),
  PROTOBUF_FIELD_OFFSET(::common::ChatParamDown, oitem_),
  PROTOBUF_FIELD_OFFSET(::common::ChatParamDown, oatname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ChatString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ChatString, strchars_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ChatVoice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ChatVoice, strvoices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ChatItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ChatItem, oitem_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ChatSmile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ChatSmile, uiid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ChatAtId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ChatAtId, llroleid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ChatAtName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ChatAtName, llroleid_),
  PROTOBUF_FIELD_OFFSET(::common::ChatAtName, strnick_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::common::ChatTypeContextUp)},
  { 8, -1, -1, sizeof(::common::ChatTypeContextDown)},
  { 17, -1, -1, sizeof(::common::ChatRole)},
  { 28, -1, -1, sizeof(::common::ChatParamUp)},
  { 39, -1, -1, sizeof(::common::ChatParamDown)},
  { 50, -1, -1, sizeof(::common::ChatString)},
  { 57, -1, -1, sizeof(::common::ChatVoice)},
  { 64, -1, -1, sizeof(::common::ChatItem)},
  { 71, -1, -1, sizeof(::common::ChatSmile)},
  { 78, -1, -1, sizeof(::common::ChatAtId)},
  { 85, -1, -1, sizeof(::common::ChatAtName)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::common::_ChatTypeContextUp_default_instance_._instance,
  &::common::_ChatTypeContextDown_default_instance_._instance,
  &::common::_ChatRole_default_instance_._instance,
  &::common::_ChatParamUp_default_instance_._instance,
  &::common::_ChatParamDown_default_instance_._instance,
  &::common::_ChatString_default_instance_._instance,
  &::common::_ChatVoice_default_instance_._instance,
  &::common::_ChatItem_default_instance_._instance,
  &::common::_ChatSmile_default_instance_._instance,
  &::common::_ChatAtId_default_instance_._instance,
  &::common::_ChatAtName_default_instance_._instance,
};

const char descriptor_table_protodef_chatcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020chatcommon.proto\022\006common\032\014common.proto"
  "\032\020itemcommon.proto\"Q\n\021ChatTypeContextUp\022"
  "\022\n\nllRecverId\030\001 \001(\004\022(\n\013vecContexts\030\002 \003(\013"
  "2\023.common.ChatParamUp\"y\n\023ChatTypeContext"
  "Down\022\023\n\013llTimestamp\030\001 \001(\004\022!\n\007oSender\030\002 \001"
  "(\0132\020.common.ChatRole\022*\n\013vecContexts\030\003 \003("
  "\0132\025.common.ChatParamDown\"}\n\010ChatRole\022!\n\006"
  "oBrief\030\001 \001(\0132\021.common.RoleBrief\022\022\n\nuiOff"
  "icial\030\002 \001(\r\022\023\n\013uiChatFrame\030\003 \001(\r\022\022\n\nuiCh"
  "atFont\030\004 \001(\r\022\021\n\tuiChatBgd\030\005 \001(\r\"\267\001\n\013Chat"
  "ParamUp\022!\n\005oChat\030\001 \001(\0132\022.common.ChatStri"
  "ng\022!\n\006oVoice\030\002 \001(\0132\021.common.ChatVoice\022!\n"
  "\006oSmile\030\003 \001(\0132\021.common.ChatSmile\022\037\n\005oIte"
  "m\030\004 \001(\0132\020.common.ChatItem\022\036\n\004oTid\030\005 \001(\0132"
  "\020.common.ChatAtId\"\276\001\n\rChatParamDown\022!\n\005o"
  "Chat\030\001 \001(\0132\022.common.ChatString\022!\n\006oVoice"
  "\030\002 \001(\0132\021.common.ChatVoice\022!\n\006oSmile\030\003 \001("
  "\0132\021.common.ChatSmile\022\037\n\005oItem\030\004 \001(\0132\020.co"
  "mmon.ChatItem\022#\n\007oAtName\030\005 \001(\0132\022.common."
  "ChatAtName\"\036\n\nChatString\022\020\n\010strChars\030\001 \001"
  "(\014\"\036\n\tChatVoice\022\021\n\tstrVoices\030\001 \001(\014\"\'\n\010Ch"
  "atItem\022\033\n\005oItem\030\001 \001(\0132\014.common.Item\"\031\n\tC"
  "hatSmile\022\014\n\004uiId\030\001 \001(\r\"\034\n\010ChatAtId\022\020\n\010ll"
  "RoleId\030\001 \001(\004\"/\n\nChatAtName\022\020\n\010llRoleId\030\001"
  " \001(\004\022\017\n\007strNick\030\002 \001(\tb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_chatcommon_2eproto_deps[2] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_itemcommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_chatcommon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_chatcommon_2eproto = {
    false, false, 989, descriptor_table_protodef_chatcommon_2eproto,
    "chatcommon.proto",
    &descriptor_table_chatcommon_2eproto_once, descriptor_table_chatcommon_2eproto_deps, 2, 11,
    schemas, file_default_instances, TableStruct_chatcommon_2eproto::offsets,
    file_level_metadata_chatcommon_2eproto, file_level_enum_descriptors_chatcommon_2eproto,
    file_level_service_descriptors_chatcommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_chatcommon_2eproto_getter() {
  return &descriptor_table_chatcommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_chatcommon_2eproto(&descriptor_table_chatcommon_2eproto);
namespace common {

// ===================================================================

class ChatTypeContextUp::_Internal {
 public:
};

ChatTypeContextUp::ChatTypeContextUp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  veccontexts_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ChatTypeContextUp)
}
ChatTypeContextUp::ChatTypeContextUp(const ChatTypeContextUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      veccontexts_(from.veccontexts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  llrecverid_ = from.llrecverid_;
  // @@protoc_insertion_point(copy_constructor:common.ChatTypeContextUp)
}

inline void ChatTypeContextUp::SharedCtor() {
llrecverid_ = uint64_t{0u};
}

ChatTypeContextUp::~ChatTypeContextUp() {
  // @@protoc_insertion_point(destructor:common.ChatTypeContextUp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatTypeContextUp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChatTypeContextUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatTypeContextUp::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ChatTypeContextUp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  veccontexts_.Clear();
  llrecverid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatTypeContextUp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 llRecverId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          llrecverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .common.ChatParamUp vecContexts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_veccontexts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatTypeContextUp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ChatTypeContextUp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 llRecverId = 1;
  if (this->_internal_llrecverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_llrecverid(), target);
  }

  // repeated .common.ChatParamUp vecContexts = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_veccontexts_size()); i < n; i++) {
    const auto& repfield = this->_internal_veccontexts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ChatTypeContextUp)
  return target;
}

size_t ChatTypeContextUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ChatTypeContextUp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.ChatParamUp vecContexts = 2;
  total_size += 1UL * this->_internal_veccontexts_size();
  for (const auto& msg : this->veccontexts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 llRecverId = 1;
  if (this->_internal_llrecverid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_llrecverid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatTypeContextUp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatTypeContextUp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatTypeContextUp::GetClassData() const { return &_class_data_; }

void ChatTypeContextUp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatTypeContextUp *>(to)->MergeFrom(
      static_cast<const ChatTypeContextUp &>(from));
}


void ChatTypeContextUp::MergeFrom(const ChatTypeContextUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ChatTypeContextUp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  veccontexts_.MergeFrom(from.veccontexts_);
  if (from._internal_llrecverid() != 0) {
    _internal_set_llrecverid(from._internal_llrecverid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatTypeContextUp::CopyFrom(const ChatTypeContextUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ChatTypeContextUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatTypeContextUp::IsInitialized() const {
  return true;
}

void ChatTypeContextUp::InternalSwap(ChatTypeContextUp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  veccontexts_.InternalSwap(&other->veccontexts_);
  swap(llrecverid_, other->llrecverid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatTypeContextUp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatcommon_2eproto_getter, &descriptor_table_chatcommon_2eproto_once,
      file_level_metadata_chatcommon_2eproto[0]);
}

// ===================================================================

class ChatTypeContextDown::_Internal {
 public:
  static const ::common::ChatRole& osender(const ChatTypeContextDown* msg);
};

const ::common::ChatRole&
ChatTypeContextDown::_Internal::osender(const ChatTypeContextDown* msg) {
  return *msg->osender_;
}
ChatTypeContextDown::ChatTypeContextDown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  veccontexts_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ChatTypeContextDown)
}
ChatTypeContextDown::ChatTypeContextDown(const ChatTypeContextDown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      veccontexts_(from.veccontexts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_osender()) {
    osender_ = new ::common::ChatRole(*from.osender_);
  } else {
    osender_ = nullptr;
  }
  lltimestamp_ = from.lltimestamp_;
  // @@protoc_insertion_point(copy_constructor:common.ChatTypeContextDown)
}

inline void ChatTypeContextDown::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&osender_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lltimestamp_) -
    reinterpret_cast<char*>(&osender_)) + sizeof(lltimestamp_));
}

ChatTypeContextDown::~ChatTypeContextDown() {
  // @@protoc_insertion_point(destructor:common.ChatTypeContextDown)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatTypeContextDown::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete osender_;
}

void ChatTypeContextDown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatTypeContextDown::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ChatTypeContextDown)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  veccontexts_.Clear();
  if (GetArenaForAllocation() == nullptr && osender_ != nullptr) {
    delete osender_;
  }
  osender_ = nullptr;
  lltimestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatTypeContextDown::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 llTimestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          lltimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.ChatRole oSender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_osender(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .common.ChatParamDown vecContexts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_veccontexts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatTypeContextDown::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ChatTypeContextDown)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 llTimestamp = 1;
  if (this->_internal_lltimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_lltimestamp(), target);
  }

  // .common.ChatRole oSender = 2;
  if (this->_internal_has_osender()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::osender(this),
        _Internal::osender(this).GetCachedSize(), target, stream);
  }

  // repeated .common.ChatParamDown vecContexts = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_veccontexts_size()); i < n; i++) {
    const auto& repfield = this->_internal_veccontexts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ChatTypeContextDown)
  return target;
}

size_t ChatTypeContextDown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ChatTypeContextDown)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.ChatParamDown vecContexts = 3;
  total_size += 1UL * this->_internal_veccontexts_size();
  for (const auto& msg : this->veccontexts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .common.ChatRole oSender = 2;
  if (this->_internal_has_osender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *osender_);
  }

  // uint64 llTimestamp = 1;
  if (this->_internal_lltimestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lltimestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatTypeContextDown::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatTypeContextDown::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatTypeContextDown::GetClassData() const { return &_class_data_; }

void ChatTypeContextDown::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatTypeContextDown *>(to)->MergeFrom(
      static_cast<const ChatTypeContextDown &>(from));
}


void ChatTypeContextDown::MergeFrom(const ChatTypeContextDown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ChatTypeContextDown)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  veccontexts_.MergeFrom(from.veccontexts_);
  if (from._internal_has_osender()) {
    _internal_mutable_osender()->::common::ChatRole::MergeFrom(from._internal_osender());
  }
  if (from._internal_lltimestamp() != 0) {
    _internal_set_lltimestamp(from._internal_lltimestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatTypeContextDown::CopyFrom(const ChatTypeContextDown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ChatTypeContextDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatTypeContextDown::IsInitialized() const {
  return true;
}

void ChatTypeContextDown::InternalSwap(ChatTypeContextDown* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  veccontexts_.InternalSwap(&other->veccontexts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatTypeContextDown, lltimestamp_)
      + sizeof(ChatTypeContextDown::lltimestamp_)
      - PROTOBUF_FIELD_OFFSET(ChatTypeContextDown, osender_)>(
          reinterpret_cast<char*>(&osender_),
          reinterpret_cast<char*>(&other->osender_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatTypeContextDown::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatcommon_2eproto_getter, &descriptor_table_chatcommon_2eproto_once,
      file_level_metadata_chatcommon_2eproto[1]);
}

// ===================================================================

class ChatRole::_Internal {
 public:
  static const ::common::RoleBrief& obrief(const ChatRole* msg);
};

const ::common::RoleBrief&
ChatRole::_Internal::obrief(const ChatRole* msg) {
  return *msg->obrief_;
}
void ChatRole::clear_obrief() {
  if (GetArenaForAllocation() == nullptr && obrief_ != nullptr) {
    delete obrief_;
  }
  obrief_ = nullptr;
}
ChatRole::ChatRole(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ChatRole)
}
ChatRole::ChatRole(const ChatRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_obrief()) {
    obrief_ = new ::common::RoleBrief(*from.obrief_);
  } else {
    obrief_ = nullptr;
  }
  ::memcpy(&uiofficial_, &from.uiofficial_,
    static_cast<size_t>(reinterpret_cast<char*>(&uichatbgd_) -
    reinterpret_cast<char*>(&uiofficial_)) + sizeof(uichatbgd_));
  // @@protoc_insertion_point(copy_constructor:common.ChatRole)
}

inline void ChatRole::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&obrief_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uichatbgd_) -
    reinterpret_cast<char*>(&obrief_)) + sizeof(uichatbgd_));
}

ChatRole::~ChatRole() {
  // @@protoc_insertion_point(destructor:common.ChatRole)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatRole::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete obrief_;
}

void ChatRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatRole::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ChatRole)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && obrief_ != nullptr) {
    delete obrief_;
  }
  obrief_ = nullptr;
  ::memset(&uiofficial_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uichatbgd_) -
      reinterpret_cast<char*>(&uiofficial_)) + sizeof(uichatbgd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatRole::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.RoleBrief oBrief = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_obrief(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiOfficial = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uiofficial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiChatFrame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uichatframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiChatFont = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uichatfont_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiChatBgd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uichatbgd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatRole::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ChatRole)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.RoleBrief oBrief = 1;
  if (this->_internal_has_obrief()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::obrief(this),
        _Internal::obrief(this).GetCachedSize(), target, stream);
  }

  // uint32 uiOfficial = 2;
  if (this->_internal_uiofficial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uiofficial(), target);
  }

  // uint32 uiChatFrame = 3;
  if (this->_internal_uichatframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uichatframe(), target);
  }

  // uint32 uiChatFont = 4;
  if (this->_internal_uichatfont() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uichatfont(), target);
  }

  // uint32 uiChatBgd = 5;
  if (this->_internal_uichatbgd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uichatbgd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ChatRole)
  return target;
}

size_t ChatRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ChatRole)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.RoleBrief oBrief = 1;
  if (this->_internal_has_obrief()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obrief_);
  }

  // uint32 uiOfficial = 2;
  if (this->_internal_uiofficial() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uiofficial());
  }

  // uint32 uiChatFrame = 3;
  if (this->_internal_uichatframe() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uichatframe());
  }

  // uint32 uiChatFont = 4;
  if (this->_internal_uichatfont() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uichatfont());
  }

  // uint32 uiChatBgd = 5;
  if (this->_internal_uichatbgd() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uichatbgd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatRole::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatRole::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatRole::GetClassData() const { return &_class_data_; }

void ChatRole::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatRole *>(to)->MergeFrom(
      static_cast<const ChatRole &>(from));
}


void ChatRole::MergeFrom(const ChatRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ChatRole)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_obrief()) {
    _internal_mutable_obrief()->::common::RoleBrief::MergeFrom(from._internal_obrief());
  }
  if (from._internal_uiofficial() != 0) {
    _internal_set_uiofficial(from._internal_uiofficial());
  }
  if (from._internal_uichatframe() != 0) {
    _internal_set_uichatframe(from._internal_uichatframe());
  }
  if (from._internal_uichatfont() != 0) {
    _internal_set_uichatfont(from._internal_uichatfont());
  }
  if (from._internal_uichatbgd() != 0) {
    _internal_set_uichatbgd(from._internal_uichatbgd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatRole::CopyFrom(const ChatRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ChatRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRole::IsInitialized() const {
  return true;
}

void ChatRole::InternalSwap(ChatRole* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatRole, uichatbgd_)
      + sizeof(ChatRole::uichatbgd_)
      - PROTOBUF_FIELD_OFFSET(ChatRole, obrief_)>(
          reinterpret_cast<char*>(&obrief_),
          reinterpret_cast<char*>(&other->obrief_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatRole::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatcommon_2eproto_getter, &descriptor_table_chatcommon_2eproto_once,
      file_level_metadata_chatcommon_2eproto[2]);
}

// ===================================================================

class ChatParamUp::_Internal {
 public:
  static const ::common::ChatString& ochat(const ChatParamUp* msg);
  static const ::common::ChatVoice& ovoice(const ChatParamUp* msg);
  static const ::common::ChatSmile& osmile(const ChatParamUp* msg);
  static const ::common::ChatItem& oitem(const ChatParamUp* msg);
  static const ::common::ChatAtId& otid(const ChatParamUp* msg);
};

const ::common::ChatString&
ChatParamUp::_Internal::ochat(const ChatParamUp* msg) {
  return *msg->ochat_;
}
const ::common::ChatVoice&
ChatParamUp::_Internal::ovoice(const ChatParamUp* msg) {
  return *msg->ovoice_;
}
const ::common::ChatSmile&
ChatParamUp::_Internal::osmile(const ChatParamUp* msg) {
  return *msg->osmile_;
}
const ::common::ChatItem&
ChatParamUp::_Internal::oitem(const ChatParamUp* msg) {
  return *msg->oitem_;
}
const ::common::ChatAtId&
ChatParamUp::_Internal::otid(const ChatParamUp* msg) {
  return *msg->otid_;
}
ChatParamUp::ChatParamUp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ChatParamUp)
}
ChatParamUp::ChatParamUp(const ChatParamUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ochat()) {
    ochat_ = new ::common::ChatString(*from.ochat_);
  } else {
    ochat_ = nullptr;
  }
  if (from._internal_has_ovoice()) {
    ovoice_ = new ::common::ChatVoice(*from.ovoice_);
  } else {
    ovoice_ = nullptr;
  }
  if (from._internal_has_osmile()) {
    osmile_ = new ::common::ChatSmile(*from.osmile_);
  } else {
    osmile_ = nullptr;
  }
  if (from._internal_has_oitem()) {
    oitem_ = new ::common::ChatItem(*from.oitem_);
  } else {
    oitem_ = nullptr;
  }
  if (from._internal_has_otid()) {
    otid_ = new ::common::ChatAtId(*from.otid_);
  } else {
    otid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:common.ChatParamUp)
}

inline void ChatParamUp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ochat_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&otid_) -
    reinterpret_cast<char*>(&ochat_)) + sizeof(otid_));
}

ChatParamUp::~ChatParamUp() {
  // @@protoc_insertion_point(destructor:common.ChatParamUp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatParamUp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ochat_;
  if (this != internal_default_instance()) delete ovoice_;
  if (this != internal_default_instance()) delete osmile_;
  if (this != internal_default_instance()) delete oitem_;
  if (this != internal_default_instance()) delete otid_;
}

void ChatParamUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatParamUp::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ChatParamUp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && ochat_ != nullptr) {
    delete ochat_;
  }
  ochat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ovoice_ != nullptr) {
    delete ovoice_;
  }
  ovoice_ = nullptr;
  if (GetArenaForAllocation() == nullptr && osmile_ != nullptr) {
    delete osmile_;
  }
  osmile_ = nullptr;
  if (GetArenaForAllocation() == nullptr && oitem_ != nullptr) {
    delete oitem_;
  }
  oitem_ = nullptr;
  if (GetArenaForAllocation() == nullptr && otid_ != nullptr) {
    delete otid_;
  }
  otid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatParamUp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.ChatString oChat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ochat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.ChatVoice oVoice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ovoice(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.ChatSmile oSmile = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_osmile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.ChatItem oItem = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_oitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.ChatAtId oTid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_otid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatParamUp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ChatParamUp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.ChatString oChat = 1;
  if (this->_internal_has_ochat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ochat(this),
        _Internal::ochat(this).GetCachedSize(), target, stream);
  }

  // .common.ChatVoice oVoice = 2;
  if (this->_internal_has_ovoice()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ovoice(this),
        _Internal::ovoice(this).GetCachedSize(), target, stream);
  }

  // .common.ChatSmile oSmile = 3;
  if (this->_internal_has_osmile()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::osmile(this),
        _Internal::osmile(this).GetCachedSize(), target, stream);
  }

  // .common.ChatItem oItem = 4;
  if (this->_internal_has_oitem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::oitem(this),
        _Internal::oitem(this).GetCachedSize(), target, stream);
  }

  // .common.ChatAtId oTid = 5;
  if (this->_internal_has_otid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::otid(this),
        _Internal::otid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ChatParamUp)
  return target;
}

size_t ChatParamUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ChatParamUp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.ChatString oChat = 1;
  if (this->_internal_has_ochat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ochat_);
  }

  // .common.ChatVoice oVoice = 2;
  if (this->_internal_has_ovoice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ovoice_);
  }

  // .common.ChatSmile oSmile = 3;
  if (this->_internal_has_osmile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *osmile_);
  }

  // .common.ChatItem oItem = 4;
  if (this->_internal_has_oitem()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oitem_);
  }

  // .common.ChatAtId oTid = 5;
  if (this->_internal_has_otid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *otid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatParamUp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatParamUp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatParamUp::GetClassData() const { return &_class_data_; }

void ChatParamUp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatParamUp *>(to)->MergeFrom(
      static_cast<const ChatParamUp &>(from));
}


void ChatParamUp::MergeFrom(const ChatParamUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ChatParamUp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ochat()) {
    _internal_mutable_ochat()->::common::ChatString::MergeFrom(from._internal_ochat());
  }
  if (from._internal_has_ovoice()) {
    _internal_mutable_ovoice()->::common::ChatVoice::MergeFrom(from._internal_ovoice());
  }
  if (from._internal_has_osmile()) {
    _internal_mutable_osmile()->::common::ChatSmile::MergeFrom(from._internal_osmile());
  }
  if (from._internal_has_oitem()) {
    _internal_mutable_oitem()->::common::ChatItem::MergeFrom(from._internal_oitem());
  }
  if (from._internal_has_otid()) {
    _internal_mutable_otid()->::common::ChatAtId::MergeFrom(from._internal_otid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatParamUp::CopyFrom(const ChatParamUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ChatParamUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatParamUp::IsInitialized() const {
  return true;
}

void ChatParamUp::InternalSwap(ChatParamUp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatParamUp, otid_)
      + sizeof(ChatParamUp::otid_)
      - PROTOBUF_FIELD_OFFSET(ChatParamUp, ochat_)>(
          reinterpret_cast<char*>(&ochat_),
          reinterpret_cast<char*>(&other->ochat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatParamUp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatcommon_2eproto_getter, &descriptor_table_chatcommon_2eproto_once,
      file_level_metadata_chatcommon_2eproto[3]);
}

// ===================================================================

class ChatParamDown::_Internal {
 public:
  static const ::common::ChatString& ochat(const ChatParamDown* msg);
  static const ::common::ChatVoice& ovoice(const ChatParamDown* msg);
  static const ::common::ChatSmile& osmile(const ChatParamDown* msg);
  static const ::common::ChatItem& oitem(const ChatParamDown* msg);
  static const ::common::ChatAtName& oatname(const ChatParamDown* msg);
};

const ::common::ChatString&
ChatParamDown::_Internal::ochat(const ChatParamDown* msg) {
  return *msg->ochat_;
}
const ::common::ChatVoice&
ChatParamDown::_Internal::ovoice(const ChatParamDown* msg) {
  return *msg->ovoice_;
}
const ::common::ChatSmile&
ChatParamDown::_Internal::osmile(const ChatParamDown* msg) {
  return *msg->osmile_;
}
const ::common::ChatItem&
ChatParamDown::_Internal::oitem(const ChatParamDown* msg) {
  return *msg->oitem_;
}
const ::common::ChatAtName&
ChatParamDown::_Internal::oatname(const ChatParamDown* msg) {
  return *msg->oatname_;
}
ChatParamDown::ChatParamDown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ChatParamDown)
}
ChatParamDown::ChatParamDown(const ChatParamDown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ochat()) {
    ochat_ = new ::common::ChatString(*from.ochat_);
  } else {
    ochat_ = nullptr;
  }
  if (from._internal_has_ovoice()) {
    ovoice_ = new ::common::ChatVoice(*from.ovoice_);
  } else {
    ovoice_ = nullptr;
  }
  if (from._internal_has_osmile()) {
    osmile_ = new ::common::ChatSmile(*from.osmile_);
  } else {
    osmile_ = nullptr;
  }
  if (from._internal_has_oitem()) {
    oitem_ = new ::common::ChatItem(*from.oitem_);
  } else {
    oitem_ = nullptr;
  }
  if (from._internal_has_oatname()) {
    oatname_ = new ::common::ChatAtName(*from.oatname_);
  } else {
    oatname_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:common.ChatParamDown)
}

inline void ChatParamDown::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ochat_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&oatname_) -
    reinterpret_cast<char*>(&ochat_)) + sizeof(oatname_));
}

ChatParamDown::~ChatParamDown() {
  // @@protoc_insertion_point(destructor:common.ChatParamDown)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatParamDown::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ochat_;
  if (this != internal_default_instance()) delete ovoice_;
  if (this != internal_default_instance()) delete osmile_;
  if (this != internal_default_instance()) delete oitem_;
  if (this != internal_default_instance()) delete oatname_;
}

void ChatParamDown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatParamDown::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ChatParamDown)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && ochat_ != nullptr) {
    delete ochat_;
  }
  ochat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ovoice_ != nullptr) {
    delete ovoice_;
  }
  ovoice_ = nullptr;
  if (GetArenaForAllocation() == nullptr && osmile_ != nullptr) {
    delete osmile_;
  }
  osmile_ = nullptr;
  if (GetArenaForAllocation() == nullptr && oitem_ != nullptr) {
    delete oitem_;
  }
  oitem_ = nullptr;
  if (GetArenaForAllocation() == nullptr && oatname_ != nullptr) {
    delete oatname_;
  }
  oatname_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatParamDown::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.ChatString oChat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ochat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.ChatVoice oVoice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ovoice(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.ChatSmile oSmile = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_osmile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.ChatItem oItem = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_oitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.ChatAtName oAtName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_oatname(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatParamDown::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ChatParamDown)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.ChatString oChat = 1;
  if (this->_internal_has_ochat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ochat(this),
        _Internal::ochat(this).GetCachedSize(), target, stream);
  }

  // .common.ChatVoice oVoice = 2;
  if (this->_internal_has_ovoice()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ovoice(this),
        _Internal::ovoice(this).GetCachedSize(), target, stream);
  }

  // .common.ChatSmile oSmile = 3;
  if (this->_internal_has_osmile()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::osmile(this),
        _Internal::osmile(this).GetCachedSize(), target, stream);
  }

  // .common.ChatItem oItem = 4;
  if (this->_internal_has_oitem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::oitem(this),
        _Internal::oitem(this).GetCachedSize(), target, stream);
  }

  // .common.ChatAtName oAtName = 5;
  if (this->_internal_has_oatname()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::oatname(this),
        _Internal::oatname(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ChatParamDown)
  return target;
}

size_t ChatParamDown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ChatParamDown)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.ChatString oChat = 1;
  if (this->_internal_has_ochat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ochat_);
  }

  // .common.ChatVoice oVoice = 2;
  if (this->_internal_has_ovoice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ovoice_);
  }

  // .common.ChatSmile oSmile = 3;
  if (this->_internal_has_osmile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *osmile_);
  }

  // .common.ChatItem oItem = 4;
  if (this->_internal_has_oitem()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oitem_);
  }

  // .common.ChatAtName oAtName = 5;
  if (this->_internal_has_oatname()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oatname_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatParamDown::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatParamDown::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatParamDown::GetClassData() const { return &_class_data_; }

void ChatParamDown::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatParamDown *>(to)->MergeFrom(
      static_cast<const ChatParamDown &>(from));
}


void ChatParamDown::MergeFrom(const ChatParamDown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ChatParamDown)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ochat()) {
    _internal_mutable_ochat()->::common::ChatString::MergeFrom(from._internal_ochat());
  }
  if (from._internal_has_ovoice()) {
    _internal_mutable_ovoice()->::common::ChatVoice::MergeFrom(from._internal_ovoice());
  }
  if (from._internal_has_osmile()) {
    _internal_mutable_osmile()->::common::ChatSmile::MergeFrom(from._internal_osmile());
  }
  if (from._internal_has_oitem()) {
    _internal_mutable_oitem()->::common::ChatItem::MergeFrom(from._internal_oitem());
  }
  if (from._internal_has_oatname()) {
    _internal_mutable_oatname()->::common::ChatAtName::MergeFrom(from._internal_oatname());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatParamDown::CopyFrom(const ChatParamDown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ChatParamDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatParamDown::IsInitialized() const {
  return true;
}

void ChatParamDown::InternalSwap(ChatParamDown* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatParamDown, oatname_)
      + sizeof(ChatParamDown::oatname_)
      - PROTOBUF_FIELD_OFFSET(ChatParamDown, ochat_)>(
          reinterpret_cast<char*>(&ochat_),
          reinterpret_cast<char*>(&other->ochat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatParamDown::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatcommon_2eproto_getter, &descriptor_table_chatcommon_2eproto_once,
      file_level_metadata_chatcommon_2eproto[4]);
}

// ===================================================================

class ChatString::_Internal {
 public:
};

ChatString::ChatString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ChatString)
}
ChatString::ChatString(const ChatString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strchars_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    strchars_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_strchars().empty()) {
    strchars_.Set(from._internal_strchars(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:common.ChatString)
}

inline void ChatString::SharedCtor() {
strchars_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  strchars_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatString::~ChatString() {
  // @@protoc_insertion_point(destructor:common.ChatString)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  strchars_.Destroy();
}

void ChatString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatString::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ChatString)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strchars_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatString::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes strChars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_strchars();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatString::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ChatString)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes strChars = 1;
  if (!this->_internal_strchars().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_strchars(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ChatString)
  return target;
}

size_t ChatString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ChatString)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes strChars = 1;
  if (!this->_internal_strchars().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_strchars());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatString::GetClassData() const { return &_class_data_; }

void ChatString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatString *>(to)->MergeFrom(
      static_cast<const ChatString &>(from));
}


void ChatString::MergeFrom(const ChatString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ChatString)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_strchars().empty()) {
    _internal_set_strchars(from._internal_strchars());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatString::CopyFrom(const ChatString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ChatString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatString::IsInitialized() const {
  return true;
}

void ChatString::InternalSwap(ChatString* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &strchars_, lhs_arena,
      &other->strchars_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatString::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatcommon_2eproto_getter, &descriptor_table_chatcommon_2eproto_once,
      file_level_metadata_chatcommon_2eproto[5]);
}

// ===================================================================

class ChatVoice::_Internal {
 public:
};

ChatVoice::ChatVoice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ChatVoice)
}
ChatVoice::ChatVoice(const ChatVoice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strvoices_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    strvoices_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_strvoices().empty()) {
    strvoices_.Set(from._internal_strvoices(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:common.ChatVoice)
}

inline void ChatVoice::SharedCtor() {
strvoices_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  strvoices_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatVoice::~ChatVoice() {
  // @@protoc_insertion_point(destructor:common.ChatVoice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatVoice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  strvoices_.Destroy();
}

void ChatVoice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatVoice::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ChatVoice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strvoices_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatVoice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes strVoices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_strvoices();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatVoice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ChatVoice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes strVoices = 1;
  if (!this->_internal_strvoices().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_strvoices(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ChatVoice)
  return target;
}

size_t ChatVoice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ChatVoice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes strVoices = 1;
  if (!this->_internal_strvoices().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_strvoices());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatVoice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatVoice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatVoice::GetClassData() const { return &_class_data_; }

void ChatVoice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatVoice *>(to)->MergeFrom(
      static_cast<const ChatVoice &>(from));
}


void ChatVoice::MergeFrom(const ChatVoice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ChatVoice)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_strvoices().empty()) {
    _internal_set_strvoices(from._internal_strvoices());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatVoice::CopyFrom(const ChatVoice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ChatVoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatVoice::IsInitialized() const {
  return true;
}

void ChatVoice::InternalSwap(ChatVoice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &strvoices_, lhs_arena,
      &other->strvoices_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatVoice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatcommon_2eproto_getter, &descriptor_table_chatcommon_2eproto_once,
      file_level_metadata_chatcommon_2eproto[6]);
}

// ===================================================================

class ChatItem::_Internal {
 public:
  static const ::common::Item& oitem(const ChatItem* msg);
};

const ::common::Item&
ChatItem::_Internal::oitem(const ChatItem* msg) {
  return *msg->oitem_;
}
void ChatItem::clear_oitem() {
  if (GetArenaForAllocation() == nullptr && oitem_ != nullptr) {
    delete oitem_;
  }
  oitem_ = nullptr;
}
ChatItem::ChatItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ChatItem)
}
ChatItem::ChatItem(const ChatItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_oitem()) {
    oitem_ = new ::common::Item(*from.oitem_);
  } else {
    oitem_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:common.ChatItem)
}

inline void ChatItem::SharedCtor() {
oitem_ = nullptr;
}

ChatItem::~ChatItem() {
  // @@protoc_insertion_point(destructor:common.ChatItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete oitem_;
}

void ChatItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatItem::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ChatItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && oitem_ != nullptr) {
    delete oitem_;
  }
  oitem_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.Item oItem = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_oitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ChatItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Item oItem = 1;
  if (this->_internal_has_oitem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::oitem(this),
        _Internal::oitem(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ChatItem)
  return target;
}

size_t ChatItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ChatItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.Item oItem = 1;
  if (this->_internal_has_oitem()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oitem_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatItem::GetClassData() const { return &_class_data_; }

void ChatItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatItem *>(to)->MergeFrom(
      static_cast<const ChatItem &>(from));
}


void ChatItem::MergeFrom(const ChatItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ChatItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_oitem()) {
    _internal_mutable_oitem()->::common::Item::MergeFrom(from._internal_oitem());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatItem::CopyFrom(const ChatItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ChatItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatItem::IsInitialized() const {
  return true;
}

void ChatItem::InternalSwap(ChatItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(oitem_, other->oitem_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatcommon_2eproto_getter, &descriptor_table_chatcommon_2eproto_once,
      file_level_metadata_chatcommon_2eproto[7]);
}

// ===================================================================

class ChatSmile::_Internal {
 public:
};

ChatSmile::ChatSmile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ChatSmile)
}
ChatSmile::ChatSmile(const ChatSmile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uiid_ = from.uiid_;
  // @@protoc_insertion_point(copy_constructor:common.ChatSmile)
}

inline void ChatSmile::SharedCtor() {
uiid_ = 0u;
}

ChatSmile::~ChatSmile() {
  // @@protoc_insertion_point(destructor:common.ChatSmile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatSmile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChatSmile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatSmile::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ChatSmile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uiid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatSmile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 uiId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatSmile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ChatSmile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiId = 1;
  if (this->_internal_uiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uiid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ChatSmile)
  return target;
}

size_t ChatSmile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ChatSmile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 uiId = 1;
  if (this->_internal_uiid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uiid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatSmile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatSmile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatSmile::GetClassData() const { return &_class_data_; }

void ChatSmile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatSmile *>(to)->MergeFrom(
      static_cast<const ChatSmile &>(from));
}


void ChatSmile::MergeFrom(const ChatSmile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ChatSmile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uiid() != 0) {
    _internal_set_uiid(from._internal_uiid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatSmile::CopyFrom(const ChatSmile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ChatSmile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatSmile::IsInitialized() const {
  return true;
}

void ChatSmile::InternalSwap(ChatSmile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(uiid_, other->uiid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatSmile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatcommon_2eproto_getter, &descriptor_table_chatcommon_2eproto_once,
      file_level_metadata_chatcommon_2eproto[8]);
}

// ===================================================================

class ChatAtId::_Internal {
 public:
};

ChatAtId::ChatAtId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ChatAtId)
}
ChatAtId::ChatAtId(const ChatAtId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  llroleid_ = from.llroleid_;
  // @@protoc_insertion_point(copy_constructor:common.ChatAtId)
}

inline void ChatAtId::SharedCtor() {
llroleid_ = uint64_t{0u};
}

ChatAtId::~ChatAtId() {
  // @@protoc_insertion_point(destructor:common.ChatAtId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatAtId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChatAtId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatAtId::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ChatAtId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  llroleid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatAtId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 llRoleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          llroleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatAtId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ChatAtId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 llRoleId = 1;
  if (this->_internal_llroleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_llroleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ChatAtId)
  return target;
}

size_t ChatAtId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ChatAtId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 llRoleId = 1;
  if (this->_internal_llroleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_llroleid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatAtId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatAtId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatAtId::GetClassData() const { return &_class_data_; }

void ChatAtId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatAtId *>(to)->MergeFrom(
      static_cast<const ChatAtId &>(from));
}


void ChatAtId::MergeFrom(const ChatAtId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ChatAtId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_llroleid() != 0) {
    _internal_set_llroleid(from._internal_llroleid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatAtId::CopyFrom(const ChatAtId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ChatAtId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatAtId::IsInitialized() const {
  return true;
}

void ChatAtId::InternalSwap(ChatAtId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(llroleid_, other->llroleid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatAtId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatcommon_2eproto_getter, &descriptor_table_chatcommon_2eproto_once,
      file_level_metadata_chatcommon_2eproto[9]);
}

// ===================================================================

class ChatAtName::_Internal {
 public:
};

ChatAtName::ChatAtName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ChatAtName)
}
ChatAtName::ChatAtName(const ChatAtName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strnick_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    strnick_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_strnick().empty()) {
    strnick_.Set(from._internal_strnick(), 
      GetArenaForAllocation());
  }
  llroleid_ = from.llroleid_;
  // @@protoc_insertion_point(copy_constructor:common.ChatAtName)
}

inline void ChatAtName::SharedCtor() {
strnick_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  strnick_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
llroleid_ = uint64_t{0u};
}

ChatAtName::~ChatAtName() {
  // @@protoc_insertion_point(destructor:common.ChatAtName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatAtName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  strnick_.Destroy();
}

void ChatAtName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatAtName::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ChatAtName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strnick_.ClearToEmpty();
  llroleid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatAtName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 llRoleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          llroleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string strNick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_strnick();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "common.ChatAtName.strNick"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatAtName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ChatAtName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 llRoleId = 1;
  if (this->_internal_llroleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_llroleid(), target);
  }

  // string strNick = 2;
  if (!this->_internal_strnick().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strnick().data(), static_cast<int>(this->_internal_strnick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ChatAtName.strNick");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strnick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ChatAtName)
  return target;
}

size_t ChatAtName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ChatAtName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string strNick = 2;
  if (!this->_internal_strnick().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strnick());
  }

  // uint64 llRoleId = 1;
  if (this->_internal_llroleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_llroleid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatAtName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatAtName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatAtName::GetClassData() const { return &_class_data_; }

void ChatAtName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatAtName *>(to)->MergeFrom(
      static_cast<const ChatAtName &>(from));
}


void ChatAtName::MergeFrom(const ChatAtName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ChatAtName)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_strnick().empty()) {
    _internal_set_strnick(from._internal_strnick());
  }
  if (from._internal_llroleid() != 0) {
    _internal_set_llroleid(from._internal_llroleid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatAtName::CopyFrom(const ChatAtName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ChatAtName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatAtName::IsInitialized() const {
  return true;
}

void ChatAtName::InternalSwap(ChatAtName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &strnick_, lhs_arena,
      &other->strnick_, rhs_arena
  );
  swap(llroleid_, other->llroleid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatAtName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatcommon_2eproto_getter, &descriptor_table_chatcommon_2eproto_once,
      file_level_metadata_chatcommon_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::common::ChatTypeContextUp*
Arena::CreateMaybeMessage< ::common::ChatTypeContextUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ChatTypeContextUp >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ChatTypeContextDown*
Arena::CreateMaybeMessage< ::common::ChatTypeContextDown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ChatTypeContextDown >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ChatRole*
Arena::CreateMaybeMessage< ::common::ChatRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ChatRole >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ChatParamUp*
Arena::CreateMaybeMessage< ::common::ChatParamUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ChatParamUp >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ChatParamDown*
Arena::CreateMaybeMessage< ::common::ChatParamDown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ChatParamDown >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ChatString*
Arena::CreateMaybeMessage< ::common::ChatString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ChatString >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ChatVoice*
Arena::CreateMaybeMessage< ::common::ChatVoice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ChatVoice >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ChatItem*
Arena::CreateMaybeMessage< ::common::ChatItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ChatItem >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ChatSmile*
Arena::CreateMaybeMessage< ::common::ChatSmile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ChatSmile >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ChatAtId*
Arena::CreateMaybeMessage< ::common::ChatAtId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ChatAtId >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ChatAtName*
Arena::CreateMaybeMessage< ::common::ChatAtName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ChatAtName >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
