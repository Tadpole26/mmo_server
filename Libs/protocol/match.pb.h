// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: match.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_match_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_match_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "matchcommon.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_match_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_match_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_match_2eproto;
namespace client {
class ModuleMatch_Ntf_CloseConfirmPanel;
struct ModuleMatch_Ntf_CloseConfirmPanelDefaultTypeInternal;
extern ModuleMatch_Ntf_CloseConfirmPanelDefaultTypeInternal _ModuleMatch_Ntf_CloseConfirmPanel_default_instance_;
class ModuleMatch_Ntf_CloseMatchPanel;
struct ModuleMatch_Ntf_CloseMatchPanelDefaultTypeInternal;
extern ModuleMatch_Ntf_CloseMatchPanelDefaultTypeInternal _ModuleMatch_Ntf_CloseMatchPanel_default_instance_;
class ModuleMatch_Ntf_ConfirmOk;
struct ModuleMatch_Ntf_ConfirmOkDefaultTypeInternal;
extern ModuleMatch_Ntf_ConfirmOkDefaultTypeInternal _ModuleMatch_Ntf_ConfirmOk_default_instance_;
class ModuleMatch_Ntf_CopyMatchOpCancel;
struct ModuleMatch_Ntf_CopyMatchOpCancelDefaultTypeInternal;
extern ModuleMatch_Ntf_CopyMatchOpCancelDefaultTypeInternal _ModuleMatch_Ntf_CopyMatchOpCancel_default_instance_;
class ModuleMatch_Ntf_MatchResult;
struct ModuleMatch_Ntf_MatchResultDefaultTypeInternal;
extern ModuleMatch_Ntf_MatchResultDefaultTypeInternal _ModuleMatch_Ntf_MatchResult_default_instance_;
class ModuleMatch_Ntf_MountMatch;
struct ModuleMatch_Ntf_MountMatchDefaultTypeInternal;
extern ModuleMatch_Ntf_MountMatchDefaultTypeInternal _ModuleMatch_Ntf_MountMatch_default_instance_;
class ModuleMatch_Ntf_OpenMatchPanel;
struct ModuleMatch_Ntf_OpenMatchPanelDefaultTypeInternal;
extern ModuleMatch_Ntf_OpenMatchPanelDefaultTypeInternal _ModuleMatch_Ntf_OpenMatchPanel_default_instance_;
class ModuleMatch_Ntf_RefuseOk;
struct ModuleMatch_Ntf_RefuseOkDefaultTypeInternal;
extern ModuleMatch_Ntf_RefuseOkDefaultTypeInternal _ModuleMatch_Ntf_RefuseOk_default_instance_;
class ModuleMatch_Req_CancelMatch;
struct ModuleMatch_Req_CancelMatchDefaultTypeInternal;
extern ModuleMatch_Req_CancelMatchDefaultTypeInternal _ModuleMatch_Req_CancelMatch_default_instance_;
class ModuleMatch_Req_ConfirmOk;
struct ModuleMatch_Req_ConfirmOkDefaultTypeInternal;
extern ModuleMatch_Req_ConfirmOkDefaultTypeInternal _ModuleMatch_Req_ConfirmOk_default_instance_;
class ModuleMatch_Req_CopyMatchOpCancel;
struct ModuleMatch_Req_CopyMatchOpCancelDefaultTypeInternal;
extern ModuleMatch_Req_CopyMatchOpCancelDefaultTypeInternal _ModuleMatch_Req_CopyMatchOpCancel_default_instance_;
class ModuleMatch_Req_RefuseOk;
struct ModuleMatch_Req_RefuseOkDefaultTypeInternal;
extern ModuleMatch_Req_RefuseOkDefaultTypeInternal _ModuleMatch_Req_RefuseOk_default_instance_;
class ModuleMatch_Req_StartMacth;
struct ModuleMatch_Req_StartMacthDefaultTypeInternal;
extern ModuleMatch_Req_StartMacthDefaultTypeInternal _ModuleMatch_Req_StartMacth_default_instance_;
}  // namespace client
PROTOBUF_NAMESPACE_OPEN
template<> ::client::ModuleMatch_Ntf_CloseConfirmPanel* Arena::CreateMaybeMessage<::client::ModuleMatch_Ntf_CloseConfirmPanel>(Arena*);
template<> ::client::ModuleMatch_Ntf_CloseMatchPanel* Arena::CreateMaybeMessage<::client::ModuleMatch_Ntf_CloseMatchPanel>(Arena*);
template<> ::client::ModuleMatch_Ntf_ConfirmOk* Arena::CreateMaybeMessage<::client::ModuleMatch_Ntf_ConfirmOk>(Arena*);
template<> ::client::ModuleMatch_Ntf_CopyMatchOpCancel* Arena::CreateMaybeMessage<::client::ModuleMatch_Ntf_CopyMatchOpCancel>(Arena*);
template<> ::client::ModuleMatch_Ntf_MatchResult* Arena::CreateMaybeMessage<::client::ModuleMatch_Ntf_MatchResult>(Arena*);
template<> ::client::ModuleMatch_Ntf_MountMatch* Arena::CreateMaybeMessage<::client::ModuleMatch_Ntf_MountMatch>(Arena*);
template<> ::client::ModuleMatch_Ntf_OpenMatchPanel* Arena::CreateMaybeMessage<::client::ModuleMatch_Ntf_OpenMatchPanel>(Arena*);
template<> ::client::ModuleMatch_Ntf_RefuseOk* Arena::CreateMaybeMessage<::client::ModuleMatch_Ntf_RefuseOk>(Arena*);
template<> ::client::ModuleMatch_Req_CancelMatch* Arena::CreateMaybeMessage<::client::ModuleMatch_Req_CancelMatch>(Arena*);
template<> ::client::ModuleMatch_Req_ConfirmOk* Arena::CreateMaybeMessage<::client::ModuleMatch_Req_ConfirmOk>(Arena*);
template<> ::client::ModuleMatch_Req_CopyMatchOpCancel* Arena::CreateMaybeMessage<::client::ModuleMatch_Req_CopyMatchOpCancel>(Arena*);
template<> ::client::ModuleMatch_Req_RefuseOk* Arena::CreateMaybeMessage<::client::ModuleMatch_Req_RefuseOk>(Arena*);
template<> ::client::ModuleMatch_Req_StartMacth* Arena::CreateMaybeMessage<::client::ModuleMatch_Req_StartMacth>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace client {

enum enModuleMatch : int {
  enModuleMatch_None = 0,
  enModuleMatch_Req_StartMacth = 1,
  enModuleMatch_Req_CancelMatch = 2,
  enModuleMatch_Ntf_OpenMatchPanel = 3,
  enModuleMatch_Ntf_CloseMatchPanel = 4,
  enModuleMatch_Ntf_MatchResult = 5,
  enModuleMatch_Req_ConfirmOk = 6,
  enModuleMatch_Ntf_ConfirmOk = 7,
  enModuleMatch_Req_RefuseOk = 8,
  enModuleMatch_Ntf_RefuseOk = 9,
  enModuleMatch_Ntf_CloseConfirmPanel = 10,
  enModuleMatch_Ntf_MountMatch = 11,
  enModuleMatch_Req_CopyMatchOpCancel = 12,
  enModuleMatch_Ntf_CopyMatchOpCancel = 13,
  enModuleMatch_RealMax = 14,
  enModuleMatch_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  enModuleMatch_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool enModuleMatch_IsValid(int value);
constexpr enModuleMatch enModuleMatch_MIN = enModuleMatch_None;
constexpr enModuleMatch enModuleMatch_MAX = enModuleMatch_RealMax;
constexpr int enModuleMatch_ARRAYSIZE = enModuleMatch_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enModuleMatch_descriptor();
template<typename T>
inline const std::string& enModuleMatch_Name(T enum_t_value) {
  static_assert(::std::is_same<T, enModuleMatch>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function enModuleMatch_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    enModuleMatch_descriptor(), enum_t_value);
}
inline bool enModuleMatch_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, enModuleMatch* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<enModuleMatch>(
    enModuleMatch_descriptor(), name, value);
}
// ===================================================================

class ModuleMatch_Req_StartMacth final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleMatch_Req_StartMacth) */ {
 public:
  inline ModuleMatch_Req_StartMacth() : ModuleMatch_Req_StartMacth(nullptr) {}
  ~ModuleMatch_Req_StartMacth() override;
  explicit PROTOBUF_CONSTEXPR ModuleMatch_Req_StartMacth(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleMatch_Req_StartMacth(const ModuleMatch_Req_StartMacth& from);
  ModuleMatch_Req_StartMacth(ModuleMatch_Req_StartMacth&& from) noexcept
    : ModuleMatch_Req_StartMacth() {
    *this = ::std::move(from);
  }

  inline ModuleMatch_Req_StartMacth& operator=(const ModuleMatch_Req_StartMacth& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleMatch_Req_StartMacth& operator=(ModuleMatch_Req_StartMacth&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleMatch_Req_StartMacth& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleMatch_Req_StartMacth* internal_default_instance() {
    return reinterpret_cast<const ModuleMatch_Req_StartMacth*>(
               &_ModuleMatch_Req_StartMacth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ModuleMatch_Req_StartMacth& a, ModuleMatch_Req_StartMacth& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleMatch_Req_StartMacth* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleMatch_Req_StartMacth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleMatch_Req_StartMacth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleMatch_Req_StartMacth>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleMatch_Req_StartMacth& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleMatch_Req_StartMacth& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleMatch_Req_StartMacth* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleMatch_Req_StartMacth";
  }
  protected:
  explicit ModuleMatch_Req_StartMacth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:client.ModuleMatch_Req_StartMacth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class ModuleMatch_Req_CancelMatch final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:client.ModuleMatch_Req_CancelMatch) */ {
 public:
  inline ModuleMatch_Req_CancelMatch() : ModuleMatch_Req_CancelMatch(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ModuleMatch_Req_CancelMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleMatch_Req_CancelMatch(const ModuleMatch_Req_CancelMatch& from);
  ModuleMatch_Req_CancelMatch(ModuleMatch_Req_CancelMatch&& from) noexcept
    : ModuleMatch_Req_CancelMatch() {
    *this = ::std::move(from);
  }

  inline ModuleMatch_Req_CancelMatch& operator=(const ModuleMatch_Req_CancelMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleMatch_Req_CancelMatch& operator=(ModuleMatch_Req_CancelMatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleMatch_Req_CancelMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleMatch_Req_CancelMatch* internal_default_instance() {
    return reinterpret_cast<const ModuleMatch_Req_CancelMatch*>(
               &_ModuleMatch_Req_CancelMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ModuleMatch_Req_CancelMatch& a, ModuleMatch_Req_CancelMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleMatch_Req_CancelMatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleMatch_Req_CancelMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleMatch_Req_CancelMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleMatch_Req_CancelMatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ModuleMatch_Req_CancelMatch& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ModuleMatch_Req_CancelMatch& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleMatch_Req_CancelMatch";
  }
  protected:
  explicit ModuleMatch_Req_CancelMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:client.ModuleMatch_Req_CancelMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class ModuleMatch_Ntf_OpenMatchPanel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleMatch_Ntf_OpenMatchPanel) */ {
 public:
  inline ModuleMatch_Ntf_OpenMatchPanel() : ModuleMatch_Ntf_OpenMatchPanel(nullptr) {}
  ~ModuleMatch_Ntf_OpenMatchPanel() override;
  explicit PROTOBUF_CONSTEXPR ModuleMatch_Ntf_OpenMatchPanel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleMatch_Ntf_OpenMatchPanel(const ModuleMatch_Ntf_OpenMatchPanel& from);
  ModuleMatch_Ntf_OpenMatchPanel(ModuleMatch_Ntf_OpenMatchPanel&& from) noexcept
    : ModuleMatch_Ntf_OpenMatchPanel() {
    *this = ::std::move(from);
  }

  inline ModuleMatch_Ntf_OpenMatchPanel& operator=(const ModuleMatch_Ntf_OpenMatchPanel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleMatch_Ntf_OpenMatchPanel& operator=(ModuleMatch_Ntf_OpenMatchPanel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleMatch_Ntf_OpenMatchPanel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleMatch_Ntf_OpenMatchPanel* internal_default_instance() {
    return reinterpret_cast<const ModuleMatch_Ntf_OpenMatchPanel*>(
               &_ModuleMatch_Ntf_OpenMatchPanel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ModuleMatch_Ntf_OpenMatchPanel& a, ModuleMatch_Ntf_OpenMatchPanel& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleMatch_Ntf_OpenMatchPanel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleMatch_Ntf_OpenMatchPanel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleMatch_Ntf_OpenMatchPanel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleMatch_Ntf_OpenMatchPanel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleMatch_Ntf_OpenMatchPanel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleMatch_Ntf_OpenMatchPanel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleMatch_Ntf_OpenMatchPanel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleMatch_Ntf_OpenMatchPanel";
  }
  protected:
  explicit ModuleMatch_Ntf_OpenMatchPanel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kMatchtimeFieldNumber = 2,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 matchtime = 2;
  void clear_matchtime();
  uint32_t matchtime() const;
  void set_matchtime(uint32_t value);
  private:
  uint32_t _internal_matchtime() const;
  void _internal_set_matchtime(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:client.ModuleMatch_Ntf_OpenMatchPanel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t type_;
  uint32_t matchtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class ModuleMatch_Ntf_CloseMatchPanel final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:client.ModuleMatch_Ntf_CloseMatchPanel) */ {
 public:
  inline ModuleMatch_Ntf_CloseMatchPanel() : ModuleMatch_Ntf_CloseMatchPanel(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ModuleMatch_Ntf_CloseMatchPanel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleMatch_Ntf_CloseMatchPanel(const ModuleMatch_Ntf_CloseMatchPanel& from);
  ModuleMatch_Ntf_CloseMatchPanel(ModuleMatch_Ntf_CloseMatchPanel&& from) noexcept
    : ModuleMatch_Ntf_CloseMatchPanel() {
    *this = ::std::move(from);
  }

  inline ModuleMatch_Ntf_CloseMatchPanel& operator=(const ModuleMatch_Ntf_CloseMatchPanel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleMatch_Ntf_CloseMatchPanel& operator=(ModuleMatch_Ntf_CloseMatchPanel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleMatch_Ntf_CloseMatchPanel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleMatch_Ntf_CloseMatchPanel* internal_default_instance() {
    return reinterpret_cast<const ModuleMatch_Ntf_CloseMatchPanel*>(
               &_ModuleMatch_Ntf_CloseMatchPanel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ModuleMatch_Ntf_CloseMatchPanel& a, ModuleMatch_Ntf_CloseMatchPanel& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleMatch_Ntf_CloseMatchPanel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleMatch_Ntf_CloseMatchPanel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleMatch_Ntf_CloseMatchPanel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleMatch_Ntf_CloseMatchPanel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ModuleMatch_Ntf_CloseMatchPanel& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ModuleMatch_Ntf_CloseMatchPanel& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleMatch_Ntf_CloseMatchPanel";
  }
  protected:
  explicit ModuleMatch_Ntf_CloseMatchPanel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:client.ModuleMatch_Ntf_CloseMatchPanel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class ModuleMatch_Ntf_MatchResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleMatch_Ntf_MatchResult) */ {
 public:
  inline ModuleMatch_Ntf_MatchResult() : ModuleMatch_Ntf_MatchResult(nullptr) {}
  ~ModuleMatch_Ntf_MatchResult() override;
  explicit PROTOBUF_CONSTEXPR ModuleMatch_Ntf_MatchResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleMatch_Ntf_MatchResult(const ModuleMatch_Ntf_MatchResult& from);
  ModuleMatch_Ntf_MatchResult(ModuleMatch_Ntf_MatchResult&& from) noexcept
    : ModuleMatch_Ntf_MatchResult() {
    *this = ::std::move(from);
  }

  inline ModuleMatch_Ntf_MatchResult& operator=(const ModuleMatch_Ntf_MatchResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleMatch_Ntf_MatchResult& operator=(ModuleMatch_Ntf_MatchResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleMatch_Ntf_MatchResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleMatch_Ntf_MatchResult* internal_default_instance() {
    return reinterpret_cast<const ModuleMatch_Ntf_MatchResult*>(
               &_ModuleMatch_Ntf_MatchResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ModuleMatch_Ntf_MatchResult& a, ModuleMatch_Ntf_MatchResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleMatch_Ntf_MatchResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleMatch_Ntf_MatchResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleMatch_Ntf_MatchResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleMatch_Ntf_MatchResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleMatch_Ntf_MatchResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleMatch_Ntf_MatchResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleMatch_Ntf_MatchResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleMatch_Ntf_MatchResult";
  }
  protected:
  explicit ModuleMatch_Ntf_MatchResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .common.MatchGroupList groups = 2;
  bool has_groups() const;
  private:
  bool _internal_has_groups() const;
  public:
  void clear_groups();
  const ::common::MatchGroupList& groups() const;
  PROTOBUF_NODISCARD ::common::MatchGroupList* release_groups();
  ::common::MatchGroupList* mutable_groups();
  void set_allocated_groups(::common::MatchGroupList* groups);
  private:
  const ::common::MatchGroupList& _internal_groups() const;
  ::common::MatchGroupList* _internal_mutable_groups();
  public:
  void unsafe_arena_set_allocated_groups(
      ::common::MatchGroupList* groups);
  ::common::MatchGroupList* unsafe_arena_release_groups();

  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:client.ModuleMatch_Ntf_MatchResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::MatchGroupList* groups_;
  uint32_t type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class ModuleMatch_Req_ConfirmOk final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:client.ModuleMatch_Req_ConfirmOk) */ {
 public:
  inline ModuleMatch_Req_ConfirmOk() : ModuleMatch_Req_ConfirmOk(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ModuleMatch_Req_ConfirmOk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleMatch_Req_ConfirmOk(const ModuleMatch_Req_ConfirmOk& from);
  ModuleMatch_Req_ConfirmOk(ModuleMatch_Req_ConfirmOk&& from) noexcept
    : ModuleMatch_Req_ConfirmOk() {
    *this = ::std::move(from);
  }

  inline ModuleMatch_Req_ConfirmOk& operator=(const ModuleMatch_Req_ConfirmOk& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleMatch_Req_ConfirmOk& operator=(ModuleMatch_Req_ConfirmOk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleMatch_Req_ConfirmOk& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleMatch_Req_ConfirmOk* internal_default_instance() {
    return reinterpret_cast<const ModuleMatch_Req_ConfirmOk*>(
               &_ModuleMatch_Req_ConfirmOk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ModuleMatch_Req_ConfirmOk& a, ModuleMatch_Req_ConfirmOk& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleMatch_Req_ConfirmOk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleMatch_Req_ConfirmOk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleMatch_Req_ConfirmOk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleMatch_Req_ConfirmOk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ModuleMatch_Req_ConfirmOk& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ModuleMatch_Req_ConfirmOk& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleMatch_Req_ConfirmOk";
  }
  protected:
  explicit ModuleMatch_Req_ConfirmOk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:client.ModuleMatch_Req_ConfirmOk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class ModuleMatch_Ntf_ConfirmOk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleMatch_Ntf_ConfirmOk) */ {
 public:
  inline ModuleMatch_Ntf_ConfirmOk() : ModuleMatch_Ntf_ConfirmOk(nullptr) {}
  ~ModuleMatch_Ntf_ConfirmOk() override;
  explicit PROTOBUF_CONSTEXPR ModuleMatch_Ntf_ConfirmOk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleMatch_Ntf_ConfirmOk(const ModuleMatch_Ntf_ConfirmOk& from);
  ModuleMatch_Ntf_ConfirmOk(ModuleMatch_Ntf_ConfirmOk&& from) noexcept
    : ModuleMatch_Ntf_ConfirmOk() {
    *this = ::std::move(from);
  }

  inline ModuleMatch_Ntf_ConfirmOk& operator=(const ModuleMatch_Ntf_ConfirmOk& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleMatch_Ntf_ConfirmOk& operator=(ModuleMatch_Ntf_ConfirmOk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleMatch_Ntf_ConfirmOk& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleMatch_Ntf_ConfirmOk* internal_default_instance() {
    return reinterpret_cast<const ModuleMatch_Ntf_ConfirmOk*>(
               &_ModuleMatch_Ntf_ConfirmOk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ModuleMatch_Ntf_ConfirmOk& a, ModuleMatch_Ntf_ConfirmOk& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleMatch_Ntf_ConfirmOk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleMatch_Ntf_ConfirmOk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleMatch_Ntf_ConfirmOk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleMatch_Ntf_ConfirmOk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleMatch_Ntf_ConfirmOk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleMatch_Ntf_ConfirmOk& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleMatch_Ntf_ConfirmOk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleMatch_Ntf_ConfirmOk";
  }
  protected:
  explicit ModuleMatch_Ntf_ConfirmOk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
  };
  // uint64 roleId = 1;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:client.ModuleMatch_Ntf_ConfirmOk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class ModuleMatch_Req_RefuseOk final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:client.ModuleMatch_Req_RefuseOk) */ {
 public:
  inline ModuleMatch_Req_RefuseOk() : ModuleMatch_Req_RefuseOk(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ModuleMatch_Req_RefuseOk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleMatch_Req_RefuseOk(const ModuleMatch_Req_RefuseOk& from);
  ModuleMatch_Req_RefuseOk(ModuleMatch_Req_RefuseOk&& from) noexcept
    : ModuleMatch_Req_RefuseOk() {
    *this = ::std::move(from);
  }

  inline ModuleMatch_Req_RefuseOk& operator=(const ModuleMatch_Req_RefuseOk& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleMatch_Req_RefuseOk& operator=(ModuleMatch_Req_RefuseOk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleMatch_Req_RefuseOk& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleMatch_Req_RefuseOk* internal_default_instance() {
    return reinterpret_cast<const ModuleMatch_Req_RefuseOk*>(
               &_ModuleMatch_Req_RefuseOk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ModuleMatch_Req_RefuseOk& a, ModuleMatch_Req_RefuseOk& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleMatch_Req_RefuseOk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleMatch_Req_RefuseOk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleMatch_Req_RefuseOk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleMatch_Req_RefuseOk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ModuleMatch_Req_RefuseOk& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ModuleMatch_Req_RefuseOk& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleMatch_Req_RefuseOk";
  }
  protected:
  explicit ModuleMatch_Req_RefuseOk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:client.ModuleMatch_Req_RefuseOk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class ModuleMatch_Ntf_RefuseOk final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:client.ModuleMatch_Ntf_RefuseOk) */ {
 public:
  inline ModuleMatch_Ntf_RefuseOk() : ModuleMatch_Ntf_RefuseOk(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ModuleMatch_Ntf_RefuseOk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleMatch_Ntf_RefuseOk(const ModuleMatch_Ntf_RefuseOk& from);
  ModuleMatch_Ntf_RefuseOk(ModuleMatch_Ntf_RefuseOk&& from) noexcept
    : ModuleMatch_Ntf_RefuseOk() {
    *this = ::std::move(from);
  }

  inline ModuleMatch_Ntf_RefuseOk& operator=(const ModuleMatch_Ntf_RefuseOk& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleMatch_Ntf_RefuseOk& operator=(ModuleMatch_Ntf_RefuseOk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleMatch_Ntf_RefuseOk& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleMatch_Ntf_RefuseOk* internal_default_instance() {
    return reinterpret_cast<const ModuleMatch_Ntf_RefuseOk*>(
               &_ModuleMatch_Ntf_RefuseOk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ModuleMatch_Ntf_RefuseOk& a, ModuleMatch_Ntf_RefuseOk& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleMatch_Ntf_RefuseOk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleMatch_Ntf_RefuseOk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleMatch_Ntf_RefuseOk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleMatch_Ntf_RefuseOk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ModuleMatch_Ntf_RefuseOk& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ModuleMatch_Ntf_RefuseOk& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleMatch_Ntf_RefuseOk";
  }
  protected:
  explicit ModuleMatch_Ntf_RefuseOk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:client.ModuleMatch_Ntf_RefuseOk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class ModuleMatch_Ntf_CloseConfirmPanel final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:client.ModuleMatch_Ntf_CloseConfirmPanel) */ {
 public:
  inline ModuleMatch_Ntf_CloseConfirmPanel() : ModuleMatch_Ntf_CloseConfirmPanel(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ModuleMatch_Ntf_CloseConfirmPanel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleMatch_Ntf_CloseConfirmPanel(const ModuleMatch_Ntf_CloseConfirmPanel& from);
  ModuleMatch_Ntf_CloseConfirmPanel(ModuleMatch_Ntf_CloseConfirmPanel&& from) noexcept
    : ModuleMatch_Ntf_CloseConfirmPanel() {
    *this = ::std::move(from);
  }

  inline ModuleMatch_Ntf_CloseConfirmPanel& operator=(const ModuleMatch_Ntf_CloseConfirmPanel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleMatch_Ntf_CloseConfirmPanel& operator=(ModuleMatch_Ntf_CloseConfirmPanel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleMatch_Ntf_CloseConfirmPanel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleMatch_Ntf_CloseConfirmPanel* internal_default_instance() {
    return reinterpret_cast<const ModuleMatch_Ntf_CloseConfirmPanel*>(
               &_ModuleMatch_Ntf_CloseConfirmPanel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ModuleMatch_Ntf_CloseConfirmPanel& a, ModuleMatch_Ntf_CloseConfirmPanel& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleMatch_Ntf_CloseConfirmPanel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleMatch_Ntf_CloseConfirmPanel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleMatch_Ntf_CloseConfirmPanel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleMatch_Ntf_CloseConfirmPanel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ModuleMatch_Ntf_CloseConfirmPanel& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ModuleMatch_Ntf_CloseConfirmPanel& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleMatch_Ntf_CloseConfirmPanel";
  }
  protected:
  explicit ModuleMatch_Ntf_CloseConfirmPanel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:client.ModuleMatch_Ntf_CloseConfirmPanel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class ModuleMatch_Ntf_MountMatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client.ModuleMatch_Ntf_MountMatch) */ {
 public:
  inline ModuleMatch_Ntf_MountMatch() : ModuleMatch_Ntf_MountMatch(nullptr) {}
  ~ModuleMatch_Ntf_MountMatch() override;
  explicit PROTOBUF_CONSTEXPR ModuleMatch_Ntf_MountMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleMatch_Ntf_MountMatch(const ModuleMatch_Ntf_MountMatch& from);
  ModuleMatch_Ntf_MountMatch(ModuleMatch_Ntf_MountMatch&& from) noexcept
    : ModuleMatch_Ntf_MountMatch() {
    *this = ::std::move(from);
  }

  inline ModuleMatch_Ntf_MountMatch& operator=(const ModuleMatch_Ntf_MountMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleMatch_Ntf_MountMatch& operator=(ModuleMatch_Ntf_MountMatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleMatch_Ntf_MountMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleMatch_Ntf_MountMatch* internal_default_instance() {
    return reinterpret_cast<const ModuleMatch_Ntf_MountMatch*>(
               &_ModuleMatch_Ntf_MountMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ModuleMatch_Ntf_MountMatch& a, ModuleMatch_Ntf_MountMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleMatch_Ntf_MountMatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleMatch_Ntf_MountMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleMatch_Ntf_MountMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleMatch_Ntf_MountMatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleMatch_Ntf_MountMatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleMatch_Ntf_MountMatch& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleMatch_Ntf_MountMatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleMatch_Ntf_MountMatch";
  }
  protected:
  explicit ModuleMatch_Ntf_MountMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMstatusFieldNumber = 1,
    kGroupListFieldNumber = 2,
  };
  // .common.MatchStatus mstatus = 1;
  bool has_mstatus() const;
  private:
  bool _internal_has_mstatus() const;
  public:
  void clear_mstatus();
  const ::common::MatchStatus& mstatus() const;
  PROTOBUF_NODISCARD ::common::MatchStatus* release_mstatus();
  ::common::MatchStatus* mutable_mstatus();
  void set_allocated_mstatus(::common::MatchStatus* mstatus);
  private:
  const ::common::MatchStatus& _internal_mstatus() const;
  ::common::MatchStatus* _internal_mutable_mstatus();
  public:
  void unsafe_arena_set_allocated_mstatus(
      ::common::MatchStatus* mstatus);
  ::common::MatchStatus* unsafe_arena_release_mstatus();

  // .common.MatchGroupList groupList = 2;
  bool has_grouplist() const;
  private:
  bool _internal_has_grouplist() const;
  public:
  void clear_grouplist();
  const ::common::MatchGroupList& grouplist() const;
  PROTOBUF_NODISCARD ::common::MatchGroupList* release_grouplist();
  ::common::MatchGroupList* mutable_grouplist();
  void set_allocated_grouplist(::common::MatchGroupList* grouplist);
  private:
  const ::common::MatchGroupList& _internal_grouplist() const;
  ::common::MatchGroupList* _internal_mutable_grouplist();
  public:
  void unsafe_arena_set_allocated_grouplist(
      ::common::MatchGroupList* grouplist);
  ::common::MatchGroupList* unsafe_arena_release_grouplist();

  // @@protoc_insertion_point(class_scope:client.ModuleMatch_Ntf_MountMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::MatchStatus* mstatus_;
  ::common::MatchGroupList* grouplist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class ModuleMatch_Req_CopyMatchOpCancel final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:client.ModuleMatch_Req_CopyMatchOpCancel) */ {
 public:
  inline ModuleMatch_Req_CopyMatchOpCancel() : ModuleMatch_Req_CopyMatchOpCancel(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ModuleMatch_Req_CopyMatchOpCancel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleMatch_Req_CopyMatchOpCancel(const ModuleMatch_Req_CopyMatchOpCancel& from);
  ModuleMatch_Req_CopyMatchOpCancel(ModuleMatch_Req_CopyMatchOpCancel&& from) noexcept
    : ModuleMatch_Req_CopyMatchOpCancel() {
    *this = ::std::move(from);
  }

  inline ModuleMatch_Req_CopyMatchOpCancel& operator=(const ModuleMatch_Req_CopyMatchOpCancel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleMatch_Req_CopyMatchOpCancel& operator=(ModuleMatch_Req_CopyMatchOpCancel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleMatch_Req_CopyMatchOpCancel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleMatch_Req_CopyMatchOpCancel* internal_default_instance() {
    return reinterpret_cast<const ModuleMatch_Req_CopyMatchOpCancel*>(
               &_ModuleMatch_Req_CopyMatchOpCancel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ModuleMatch_Req_CopyMatchOpCancel& a, ModuleMatch_Req_CopyMatchOpCancel& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleMatch_Req_CopyMatchOpCancel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleMatch_Req_CopyMatchOpCancel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleMatch_Req_CopyMatchOpCancel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleMatch_Req_CopyMatchOpCancel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ModuleMatch_Req_CopyMatchOpCancel& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ModuleMatch_Req_CopyMatchOpCancel& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleMatch_Req_CopyMatchOpCancel";
  }
  protected:
  explicit ModuleMatch_Req_CopyMatchOpCancel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:client.ModuleMatch_Req_CopyMatchOpCancel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class ModuleMatch_Ntf_CopyMatchOpCancel final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:client.ModuleMatch_Ntf_CopyMatchOpCancel) */ {
 public:
  inline ModuleMatch_Ntf_CopyMatchOpCancel() : ModuleMatch_Ntf_CopyMatchOpCancel(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ModuleMatch_Ntf_CopyMatchOpCancel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleMatch_Ntf_CopyMatchOpCancel(const ModuleMatch_Ntf_CopyMatchOpCancel& from);
  ModuleMatch_Ntf_CopyMatchOpCancel(ModuleMatch_Ntf_CopyMatchOpCancel&& from) noexcept
    : ModuleMatch_Ntf_CopyMatchOpCancel() {
    *this = ::std::move(from);
  }

  inline ModuleMatch_Ntf_CopyMatchOpCancel& operator=(const ModuleMatch_Ntf_CopyMatchOpCancel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleMatch_Ntf_CopyMatchOpCancel& operator=(ModuleMatch_Ntf_CopyMatchOpCancel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleMatch_Ntf_CopyMatchOpCancel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleMatch_Ntf_CopyMatchOpCancel* internal_default_instance() {
    return reinterpret_cast<const ModuleMatch_Ntf_CopyMatchOpCancel*>(
               &_ModuleMatch_Ntf_CopyMatchOpCancel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ModuleMatch_Ntf_CopyMatchOpCancel& a, ModuleMatch_Ntf_CopyMatchOpCancel& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleMatch_Ntf_CopyMatchOpCancel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleMatch_Ntf_CopyMatchOpCancel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleMatch_Ntf_CopyMatchOpCancel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleMatch_Ntf_CopyMatchOpCancel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ModuleMatch_Ntf_CopyMatchOpCancel& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ModuleMatch_Ntf_CopyMatchOpCancel& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client.ModuleMatch_Ntf_CopyMatchOpCancel";
  }
  protected:
  explicit ModuleMatch_Ntf_CopyMatchOpCancel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:client.ModuleMatch_Ntf_CopyMatchOpCancel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_match_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ModuleMatch_Req_StartMacth

// uint32 type = 1;
inline void ModuleMatch_Req_StartMacth::clear_type() {
  type_ = 0u;
}
inline uint32_t ModuleMatch_Req_StartMacth::_internal_type() const {
  return type_;
}
inline uint32_t ModuleMatch_Req_StartMacth::type() const {
  // @@protoc_insertion_point(field_get:client.ModuleMatch_Req_StartMacth.type)
  return _internal_type();
}
inline void ModuleMatch_Req_StartMacth::_internal_set_type(uint32_t value) {
  
  type_ = value;
}
inline void ModuleMatch_Req_StartMacth::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:client.ModuleMatch_Req_StartMacth.type)
}

// -------------------------------------------------------------------

// ModuleMatch_Req_CancelMatch

// -------------------------------------------------------------------

// ModuleMatch_Ntf_OpenMatchPanel

// uint32 type = 1;
inline void ModuleMatch_Ntf_OpenMatchPanel::clear_type() {
  type_ = 0u;
}
inline uint32_t ModuleMatch_Ntf_OpenMatchPanel::_internal_type() const {
  return type_;
}
inline uint32_t ModuleMatch_Ntf_OpenMatchPanel::type() const {
  // @@protoc_insertion_point(field_get:client.ModuleMatch_Ntf_OpenMatchPanel.type)
  return _internal_type();
}
inline void ModuleMatch_Ntf_OpenMatchPanel::_internal_set_type(uint32_t value) {
  
  type_ = value;
}
inline void ModuleMatch_Ntf_OpenMatchPanel::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:client.ModuleMatch_Ntf_OpenMatchPanel.type)
}

// uint32 matchtime = 2;
inline void ModuleMatch_Ntf_OpenMatchPanel::clear_matchtime() {
  matchtime_ = 0u;
}
inline uint32_t ModuleMatch_Ntf_OpenMatchPanel::_internal_matchtime() const {
  return matchtime_;
}
inline uint32_t ModuleMatch_Ntf_OpenMatchPanel::matchtime() const {
  // @@protoc_insertion_point(field_get:client.ModuleMatch_Ntf_OpenMatchPanel.matchtime)
  return _internal_matchtime();
}
inline void ModuleMatch_Ntf_OpenMatchPanel::_internal_set_matchtime(uint32_t value) {
  
  matchtime_ = value;
}
inline void ModuleMatch_Ntf_OpenMatchPanel::set_matchtime(uint32_t value) {
  _internal_set_matchtime(value);
  // @@protoc_insertion_point(field_set:client.ModuleMatch_Ntf_OpenMatchPanel.matchtime)
}

// -------------------------------------------------------------------

// ModuleMatch_Ntf_CloseMatchPanel

// -------------------------------------------------------------------

// ModuleMatch_Ntf_MatchResult

// uint32 type = 1;
inline void ModuleMatch_Ntf_MatchResult::clear_type() {
  type_ = 0u;
}
inline uint32_t ModuleMatch_Ntf_MatchResult::_internal_type() const {
  return type_;
}
inline uint32_t ModuleMatch_Ntf_MatchResult::type() const {
  // @@protoc_insertion_point(field_get:client.ModuleMatch_Ntf_MatchResult.type)
  return _internal_type();
}
inline void ModuleMatch_Ntf_MatchResult::_internal_set_type(uint32_t value) {
  
  type_ = value;
}
inline void ModuleMatch_Ntf_MatchResult::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:client.ModuleMatch_Ntf_MatchResult.type)
}

// .common.MatchGroupList groups = 2;
inline bool ModuleMatch_Ntf_MatchResult::_internal_has_groups() const {
  return this != internal_default_instance() && groups_ != nullptr;
}
inline bool ModuleMatch_Ntf_MatchResult::has_groups() const {
  return _internal_has_groups();
}
inline const ::common::MatchGroupList& ModuleMatch_Ntf_MatchResult::_internal_groups() const {
  const ::common::MatchGroupList* p = groups_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::MatchGroupList&>(
      ::common::_MatchGroupList_default_instance_);
}
inline const ::common::MatchGroupList& ModuleMatch_Ntf_MatchResult::groups() const {
  // @@protoc_insertion_point(field_get:client.ModuleMatch_Ntf_MatchResult.groups)
  return _internal_groups();
}
inline void ModuleMatch_Ntf_MatchResult::unsafe_arena_set_allocated_groups(
    ::common::MatchGroupList* groups) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(groups_);
  }
  groups_ = groups;
  if (groups) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client.ModuleMatch_Ntf_MatchResult.groups)
}
inline ::common::MatchGroupList* ModuleMatch_Ntf_MatchResult::release_groups() {
  
  ::common::MatchGroupList* temp = groups_;
  groups_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::MatchGroupList* ModuleMatch_Ntf_MatchResult::unsafe_arena_release_groups() {
  // @@protoc_insertion_point(field_release:client.ModuleMatch_Ntf_MatchResult.groups)
  
  ::common::MatchGroupList* temp = groups_;
  groups_ = nullptr;
  return temp;
}
inline ::common::MatchGroupList* ModuleMatch_Ntf_MatchResult::_internal_mutable_groups() {
  
  if (groups_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::MatchGroupList>(GetArenaForAllocation());
    groups_ = p;
  }
  return groups_;
}
inline ::common::MatchGroupList* ModuleMatch_Ntf_MatchResult::mutable_groups() {
  ::common::MatchGroupList* _msg = _internal_mutable_groups();
  // @@protoc_insertion_point(field_mutable:client.ModuleMatch_Ntf_MatchResult.groups)
  return _msg;
}
inline void ModuleMatch_Ntf_MatchResult::set_allocated_groups(::common::MatchGroupList* groups) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(groups_);
  }
  if (groups) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(groups));
    if (message_arena != submessage_arena) {
      groups = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, groups, submessage_arena);
    }
    
  } else {
    
  }
  groups_ = groups;
  // @@protoc_insertion_point(field_set_allocated:client.ModuleMatch_Ntf_MatchResult.groups)
}

// -------------------------------------------------------------------

// ModuleMatch_Req_ConfirmOk

// -------------------------------------------------------------------

// ModuleMatch_Ntf_ConfirmOk

// uint64 roleId = 1;
inline void ModuleMatch_Ntf_ConfirmOk::clear_roleid() {
  roleid_ = uint64_t{0u};
}
inline uint64_t ModuleMatch_Ntf_ConfirmOk::_internal_roleid() const {
  return roleid_;
}
inline uint64_t ModuleMatch_Ntf_ConfirmOk::roleid() const {
  // @@protoc_insertion_point(field_get:client.ModuleMatch_Ntf_ConfirmOk.roleId)
  return _internal_roleid();
}
inline void ModuleMatch_Ntf_ConfirmOk::_internal_set_roleid(uint64_t value) {
  
  roleid_ = value;
}
inline void ModuleMatch_Ntf_ConfirmOk::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:client.ModuleMatch_Ntf_ConfirmOk.roleId)
}

// -------------------------------------------------------------------

// ModuleMatch_Req_RefuseOk

// -------------------------------------------------------------------

// ModuleMatch_Ntf_RefuseOk

// -------------------------------------------------------------------

// ModuleMatch_Ntf_CloseConfirmPanel

// -------------------------------------------------------------------

// ModuleMatch_Ntf_MountMatch

// .common.MatchStatus mstatus = 1;
inline bool ModuleMatch_Ntf_MountMatch::_internal_has_mstatus() const {
  return this != internal_default_instance() && mstatus_ != nullptr;
}
inline bool ModuleMatch_Ntf_MountMatch::has_mstatus() const {
  return _internal_has_mstatus();
}
inline const ::common::MatchStatus& ModuleMatch_Ntf_MountMatch::_internal_mstatus() const {
  const ::common::MatchStatus* p = mstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::MatchStatus&>(
      ::common::_MatchStatus_default_instance_);
}
inline const ::common::MatchStatus& ModuleMatch_Ntf_MountMatch::mstatus() const {
  // @@protoc_insertion_point(field_get:client.ModuleMatch_Ntf_MountMatch.mstatus)
  return _internal_mstatus();
}
inline void ModuleMatch_Ntf_MountMatch::unsafe_arena_set_allocated_mstatus(
    ::common::MatchStatus* mstatus) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mstatus_);
  }
  mstatus_ = mstatus;
  if (mstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client.ModuleMatch_Ntf_MountMatch.mstatus)
}
inline ::common::MatchStatus* ModuleMatch_Ntf_MountMatch::release_mstatus() {
  
  ::common::MatchStatus* temp = mstatus_;
  mstatus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::MatchStatus* ModuleMatch_Ntf_MountMatch::unsafe_arena_release_mstatus() {
  // @@protoc_insertion_point(field_release:client.ModuleMatch_Ntf_MountMatch.mstatus)
  
  ::common::MatchStatus* temp = mstatus_;
  mstatus_ = nullptr;
  return temp;
}
inline ::common::MatchStatus* ModuleMatch_Ntf_MountMatch::_internal_mutable_mstatus() {
  
  if (mstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::MatchStatus>(GetArenaForAllocation());
    mstatus_ = p;
  }
  return mstatus_;
}
inline ::common::MatchStatus* ModuleMatch_Ntf_MountMatch::mutable_mstatus() {
  ::common::MatchStatus* _msg = _internal_mutable_mstatus();
  // @@protoc_insertion_point(field_mutable:client.ModuleMatch_Ntf_MountMatch.mstatus)
  return _msg;
}
inline void ModuleMatch_Ntf_MountMatch::set_allocated_mstatus(::common::MatchStatus* mstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mstatus_);
  }
  if (mstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mstatus));
    if (message_arena != submessage_arena) {
      mstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mstatus, submessage_arena);
    }
    
  } else {
    
  }
  mstatus_ = mstatus;
  // @@protoc_insertion_point(field_set_allocated:client.ModuleMatch_Ntf_MountMatch.mstatus)
}

// .common.MatchGroupList groupList = 2;
inline bool ModuleMatch_Ntf_MountMatch::_internal_has_grouplist() const {
  return this != internal_default_instance() && grouplist_ != nullptr;
}
inline bool ModuleMatch_Ntf_MountMatch::has_grouplist() const {
  return _internal_has_grouplist();
}
inline const ::common::MatchGroupList& ModuleMatch_Ntf_MountMatch::_internal_grouplist() const {
  const ::common::MatchGroupList* p = grouplist_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::MatchGroupList&>(
      ::common::_MatchGroupList_default_instance_);
}
inline const ::common::MatchGroupList& ModuleMatch_Ntf_MountMatch::grouplist() const {
  // @@protoc_insertion_point(field_get:client.ModuleMatch_Ntf_MountMatch.groupList)
  return _internal_grouplist();
}
inline void ModuleMatch_Ntf_MountMatch::unsafe_arena_set_allocated_grouplist(
    ::common::MatchGroupList* grouplist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grouplist_);
  }
  grouplist_ = grouplist;
  if (grouplist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client.ModuleMatch_Ntf_MountMatch.groupList)
}
inline ::common::MatchGroupList* ModuleMatch_Ntf_MountMatch::release_grouplist() {
  
  ::common::MatchGroupList* temp = grouplist_;
  grouplist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::MatchGroupList* ModuleMatch_Ntf_MountMatch::unsafe_arena_release_grouplist() {
  // @@protoc_insertion_point(field_release:client.ModuleMatch_Ntf_MountMatch.groupList)
  
  ::common::MatchGroupList* temp = grouplist_;
  grouplist_ = nullptr;
  return temp;
}
inline ::common::MatchGroupList* ModuleMatch_Ntf_MountMatch::_internal_mutable_grouplist() {
  
  if (grouplist_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::MatchGroupList>(GetArenaForAllocation());
    grouplist_ = p;
  }
  return grouplist_;
}
inline ::common::MatchGroupList* ModuleMatch_Ntf_MountMatch::mutable_grouplist() {
  ::common::MatchGroupList* _msg = _internal_mutable_grouplist();
  // @@protoc_insertion_point(field_mutable:client.ModuleMatch_Ntf_MountMatch.groupList)
  return _msg;
}
inline void ModuleMatch_Ntf_MountMatch::set_allocated_grouplist(::common::MatchGroupList* grouplist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(grouplist_);
  }
  if (grouplist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grouplist));
    if (message_arena != submessage_arena) {
      grouplist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grouplist, submessage_arena);
    }
    
  } else {
    
  }
  grouplist_ = grouplist;
  // @@protoc_insertion_point(field_set_allocated:client.ModuleMatch_Ntf_MountMatch.groupList)
}

// -------------------------------------------------------------------

// ModuleMatch_Req_CopyMatchOpCancel

// -------------------------------------------------------------------

// ModuleMatch_Ntf_CopyMatchOpCancel

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::client::enModuleMatch> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::enModuleMatch>() {
  return ::client::enModuleMatch_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_match_2eproto
