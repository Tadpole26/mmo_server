// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: innermatch.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_innermatch_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_innermatch_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "matchcommon.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_innermatch_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_innermatch_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_innermatch_2eproto;
namespace inner {
class InnerMatchFighter;
struct InnerMatchFighterDefaultTypeInternal;
extern InnerMatchFighterDefaultTypeInternal _InnerMatchFighter_default_instance_;
class InnerMatchGroup;
struct InnerMatchGroupDefaultTypeInternal;
extern InnerMatchGroupDefaultTypeInternal _InnerMatchGroup_default_instance_;
class InnerMatchGroup_UnitsEntry_DoNotUse;
struct InnerMatchGroup_UnitsEntry_DoNotUseDefaultTypeInternal;
extern InnerMatchGroup_UnitsEntry_DoNotUseDefaultTypeInternal _InnerMatchGroup_UnitsEntry_DoNotUse_default_instance_;
class InnerMatchMatchList;
struct InnerMatchMatchListDefaultTypeInternal;
extern InnerMatchMatchListDefaultTypeInternal _InnerMatchMatchList_default_instance_;
class InnerMatchMatcher;
struct InnerMatchMatcherDefaultTypeInternal;
extern InnerMatchMatcherDefaultTypeInternal _InnerMatchMatcher_default_instance_;
class InnerMatchPunishList;
struct InnerMatchPunishListDefaultTypeInternal;
extern InnerMatchPunishListDefaultTypeInternal _InnerMatchPunishList_default_instance_;
class InnerMatchRoom;
struct InnerMatchRoomDefaultTypeInternal;
extern InnerMatchRoomDefaultTypeInternal _InnerMatchRoom_default_instance_;
class InnerMatchRoomCopyScene;
struct InnerMatchRoomCopySceneDefaultTypeInternal;
extern InnerMatchRoomCopySceneDefaultTypeInternal _InnerMatchRoomCopyScene_default_instance_;
class InnerMatchRoom_GroupsEntry_DoNotUse;
struct InnerMatchRoom_GroupsEntry_DoNotUseDefaultTypeInternal;
extern InnerMatchRoom_GroupsEntry_DoNotUseDefaultTypeInternal _InnerMatchRoom_GroupsEntry_DoNotUse_default_instance_;
class InnerMatchUnit;
struct InnerMatchUnitDefaultTypeInternal;
extern InnerMatchUnitDefaultTypeInternal _InnerMatchUnit_default_instance_;
class InnerMatchUnit_RobotsEntry_DoNotUse;
struct InnerMatchUnit_RobotsEntry_DoNotUseDefaultTypeInternal;
extern InnerMatchUnit_RobotsEntry_DoNotUseDefaultTypeInternal _InnerMatchUnit_RobotsEntry_DoNotUse_default_instance_;
class InnerMatchUnit_RolesEntry_DoNotUse;
struct InnerMatchUnit_RolesEntry_DoNotUseDefaultTypeInternal;
extern InnerMatchUnit_RolesEntry_DoNotUseDefaultTypeInternal _InnerMatchUnit_RolesEntry_DoNotUse_default_instance_;
}  // namespace inner
PROTOBUF_NAMESPACE_OPEN
template<> ::inner::InnerMatchFighter* Arena::CreateMaybeMessage<::inner::InnerMatchFighter>(Arena*);
template<> ::inner::InnerMatchGroup* Arena::CreateMaybeMessage<::inner::InnerMatchGroup>(Arena*);
template<> ::inner::InnerMatchGroup_UnitsEntry_DoNotUse* Arena::CreateMaybeMessage<::inner::InnerMatchGroup_UnitsEntry_DoNotUse>(Arena*);
template<> ::inner::InnerMatchMatchList* Arena::CreateMaybeMessage<::inner::InnerMatchMatchList>(Arena*);
template<> ::inner::InnerMatchMatcher* Arena::CreateMaybeMessage<::inner::InnerMatchMatcher>(Arena*);
template<> ::inner::InnerMatchPunishList* Arena::CreateMaybeMessage<::inner::InnerMatchPunishList>(Arena*);
template<> ::inner::InnerMatchRoom* Arena::CreateMaybeMessage<::inner::InnerMatchRoom>(Arena*);
template<> ::inner::InnerMatchRoomCopyScene* Arena::CreateMaybeMessage<::inner::InnerMatchRoomCopyScene>(Arena*);
template<> ::inner::InnerMatchRoom_GroupsEntry_DoNotUse* Arena::CreateMaybeMessage<::inner::InnerMatchRoom_GroupsEntry_DoNotUse>(Arena*);
template<> ::inner::InnerMatchUnit* Arena::CreateMaybeMessage<::inner::InnerMatchUnit>(Arena*);
template<> ::inner::InnerMatchUnit_RobotsEntry_DoNotUse* Arena::CreateMaybeMessage<::inner::InnerMatchUnit_RobotsEntry_DoNotUse>(Arena*);
template<> ::inner::InnerMatchUnit_RolesEntry_DoNotUse* Arena::CreateMaybeMessage<::inner::InnerMatchUnit_RolesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inner {

// ===================================================================

class InnerMatchMatcher final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerMatchMatcher) */ {
 public:
  inline InnerMatchMatcher() : InnerMatchMatcher(nullptr) {}
  ~InnerMatchMatcher() override;
  explicit PROTOBUF_CONSTEXPR InnerMatchMatcher(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerMatchMatcher(const InnerMatchMatcher& from);
  InnerMatchMatcher(InnerMatchMatcher&& from) noexcept
    : InnerMatchMatcher() {
    *this = ::std::move(from);
  }

  inline InnerMatchMatcher& operator=(const InnerMatchMatcher& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerMatchMatcher& operator=(InnerMatchMatcher&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerMatchMatcher& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerMatchMatcher* internal_default_instance() {
    return reinterpret_cast<const InnerMatchMatcher*>(
               &_InnerMatchMatcher_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InnerMatchMatcher& a, InnerMatchMatcher& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerMatchMatcher* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerMatchMatcher* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerMatchMatcher* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerMatchMatcher>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerMatchMatcher& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerMatchMatcher& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerMatchMatcher* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerMatchMatcher";
  }
  protected:
  explicit InnerMatchMatcher(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBriefFieldNumber = 1,
    kExtdFieldNumber = 2,
    kLocalLeaderIdFieldNumber = 3,
  };
  // .common.RoleBrief brief = 1;
  bool has_brief() const;
  private:
  bool _internal_has_brief() const;
  public:
  void clear_brief();
  const ::common::RoleBrief& brief() const;
  PROTOBUF_NODISCARD ::common::RoleBrief* release_brief();
  ::common::RoleBrief* mutable_brief();
  void set_allocated_brief(::common::RoleBrief* brief);
  private:
  const ::common::RoleBrief& _internal_brief() const;
  ::common::RoleBrief* _internal_mutable_brief();
  public:
  void unsafe_arena_set_allocated_brief(
      ::common::RoleBrief* brief);
  ::common::RoleBrief* unsafe_arena_release_brief();

  // .common.MatchFighterExtend extd = 2;
  bool has_extd() const;
  private:
  bool _internal_has_extd() const;
  public:
  void clear_extd();
  const ::common::MatchFighterExtend& extd() const;
  PROTOBUF_NODISCARD ::common::MatchFighterExtend* release_extd();
  ::common::MatchFighterExtend* mutable_extd();
  void set_allocated_extd(::common::MatchFighterExtend* extd);
  private:
  const ::common::MatchFighterExtend& _internal_extd() const;
  ::common::MatchFighterExtend* _internal_mutable_extd();
  public:
  void unsafe_arena_set_allocated_extd(
      ::common::MatchFighterExtend* extd);
  ::common::MatchFighterExtend* unsafe_arena_release_extd();

  // uint64 localLeaderId = 3;
  void clear_localleaderid();
  uint64_t localleaderid() const;
  void set_localleaderid(uint64_t value);
  private:
  uint64_t _internal_localleaderid() const;
  void _internal_set_localleaderid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerMatchMatcher)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::RoleBrief* brief_;
  ::common::MatchFighterExtend* extd_;
  uint64_t localleaderid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innermatch_2eproto;
};
// -------------------------------------------------------------------

class InnerMatchMatchList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerMatchMatchList) */ {
 public:
  inline InnerMatchMatchList() : InnerMatchMatchList(nullptr) {}
  ~InnerMatchMatchList() override;
  explicit PROTOBUF_CONSTEXPR InnerMatchMatchList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerMatchMatchList(const InnerMatchMatchList& from);
  InnerMatchMatchList(InnerMatchMatchList&& from) noexcept
    : InnerMatchMatchList() {
    *this = ::std::move(from);
  }

  inline InnerMatchMatchList& operator=(const InnerMatchMatchList& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerMatchMatchList& operator=(InnerMatchMatchList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerMatchMatchList& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerMatchMatchList* internal_default_instance() {
    return reinterpret_cast<const InnerMatchMatchList*>(
               &_InnerMatchMatchList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InnerMatchMatchList& a, InnerMatchMatchList& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerMatchMatchList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerMatchMatchList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerMatchMatchList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerMatchMatchList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerMatchMatchList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerMatchMatchList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerMatchMatchList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerMatchMatchList";
  }
  protected:
  explicit InnerMatchMatchList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdsFieldNumber = 1,
  };
  // repeated uint64 roleIds = 1;
  int roleids_size() const;
  private:
  int _internal_roleids_size() const;
  public:
  void clear_roleids();
  private:
  uint64_t _internal_roleids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_roleids() const;
  void _internal_add_roleids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_roleids();
  public:
  uint64_t roleids(int index) const;
  void set_roleids(int index, uint64_t value);
  void add_roleids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      roleids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_roleids();

  // @@protoc_insertion_point(class_scope:inner.InnerMatchMatchList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > roleids_;
  mutable std::atomic<int> _roleids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innermatch_2eproto;
};
// -------------------------------------------------------------------

class InnerMatchPunishList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerMatchPunishList) */ {
 public:
  inline InnerMatchPunishList() : InnerMatchPunishList(nullptr) {}
  ~InnerMatchPunishList() override;
  explicit PROTOBUF_CONSTEXPR InnerMatchPunishList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerMatchPunishList(const InnerMatchPunishList& from);
  InnerMatchPunishList(InnerMatchPunishList&& from) noexcept
    : InnerMatchPunishList() {
    *this = ::std::move(from);
  }

  inline InnerMatchPunishList& operator=(const InnerMatchPunishList& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerMatchPunishList& operator=(InnerMatchPunishList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerMatchPunishList& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerMatchPunishList* internal_default_instance() {
    return reinterpret_cast<const InnerMatchPunishList*>(
               &_InnerMatchPunishList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InnerMatchPunishList& a, InnerMatchPunishList& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerMatchPunishList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerMatchPunishList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerMatchPunishList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerMatchPunishList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerMatchPunishList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerMatchPunishList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerMatchPunishList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerMatchPunishList";
  }
  protected:
  explicit InnerMatchPunishList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdsFieldNumber = 1,
  };
  // repeated uint64 roleIds = 1;
  int roleids_size() const;
  private:
  int _internal_roleids_size() const;
  public:
  void clear_roleids();
  private:
  uint64_t _internal_roleids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_roleids() const;
  void _internal_add_roleids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_roleids();
  public:
  uint64_t roleids(int index) const;
  void set_roleids(int index, uint64_t value);
  void add_roleids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      roleids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_roleids();

  // @@protoc_insertion_point(class_scope:inner.InnerMatchPunishList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > roleids_;
  mutable std::atomic<int> _roleids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innermatch_2eproto;
};
// -------------------------------------------------------------------

class InnerMatchFighter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerMatchFighter) */ {
 public:
  inline InnerMatchFighter() : InnerMatchFighter(nullptr) {}
  ~InnerMatchFighter() override;
  explicit PROTOBUF_CONSTEXPR InnerMatchFighter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerMatchFighter(const InnerMatchFighter& from);
  InnerMatchFighter(InnerMatchFighter&& from) noexcept
    : InnerMatchFighter() {
    *this = ::std::move(from);
  }

  inline InnerMatchFighter& operator=(const InnerMatchFighter& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerMatchFighter& operator=(InnerMatchFighter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerMatchFighter& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerMatchFighter* internal_default_instance() {
    return reinterpret_cast<const InnerMatchFighter*>(
               &_InnerMatchFighter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InnerMatchFighter& a, InnerMatchFighter& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerMatchFighter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerMatchFighter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerMatchFighter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerMatchFighter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerMatchFighter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerMatchFighter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerMatchFighter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerMatchFighter";
  }
  protected:
  explicit InnerMatchFighter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBriefFieldNumber = 1,
    kExtdFieldNumber = 2,
    kLocalLeaderIdFieldNumber = 4,
  };
  // .common.RoleBrief brief = 1;
  bool has_brief() const;
  private:
  bool _internal_has_brief() const;
  public:
  void clear_brief();
  const ::common::RoleBrief& brief() const;
  PROTOBUF_NODISCARD ::common::RoleBrief* release_brief();
  ::common::RoleBrief* mutable_brief();
  void set_allocated_brief(::common::RoleBrief* brief);
  private:
  const ::common::RoleBrief& _internal_brief() const;
  ::common::RoleBrief* _internal_mutable_brief();
  public:
  void unsafe_arena_set_allocated_brief(
      ::common::RoleBrief* brief);
  ::common::RoleBrief* unsafe_arena_release_brief();

  // .common.MatchFighterExtend extd = 2;
  bool has_extd() const;
  private:
  bool _internal_has_extd() const;
  public:
  void clear_extd();
  const ::common::MatchFighterExtend& extd() const;
  PROTOBUF_NODISCARD ::common::MatchFighterExtend* release_extd();
  ::common::MatchFighterExtend* mutable_extd();
  void set_allocated_extd(::common::MatchFighterExtend* extd);
  private:
  const ::common::MatchFighterExtend& _internal_extd() const;
  ::common::MatchFighterExtend* _internal_mutable_extd();
  public:
  void unsafe_arena_set_allocated_extd(
      ::common::MatchFighterExtend* extd);
  ::common::MatchFighterExtend* unsafe_arena_release_extd();

  // uint64 localLeaderId = 4;
  void clear_localleaderid();
  uint64_t localleaderid() const;
  void set_localleaderid(uint64_t value);
  private:
  uint64_t _internal_localleaderid() const;
  void _internal_set_localleaderid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerMatchFighter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::RoleBrief* brief_;
  ::common::MatchFighterExtend* extd_;
  uint64_t localleaderid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innermatch_2eproto;
};
// -------------------------------------------------------------------

class InnerMatchUnit_RolesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InnerMatchUnit_RolesEntry_DoNotUse, 
    uint64_t, ::inner::InnerMatchFighter,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InnerMatchUnit_RolesEntry_DoNotUse, 
    uint64_t, ::inner::InnerMatchFighter,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  InnerMatchUnit_RolesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR InnerMatchUnit_RolesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit InnerMatchUnit_RolesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InnerMatchUnit_RolesEntry_DoNotUse& other);
  static const InnerMatchUnit_RolesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InnerMatchUnit_RolesEntry_DoNotUse*>(&_InnerMatchUnit_RolesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_innermatch_2eproto;
};

// -------------------------------------------------------------------

class InnerMatchUnit_RobotsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InnerMatchUnit_RobotsEntry_DoNotUse, 
    uint64_t, ::inner::InnerMatchFighter,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InnerMatchUnit_RobotsEntry_DoNotUse, 
    uint64_t, ::inner::InnerMatchFighter,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  InnerMatchUnit_RobotsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR InnerMatchUnit_RobotsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit InnerMatchUnit_RobotsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InnerMatchUnit_RobotsEntry_DoNotUse& other);
  static const InnerMatchUnit_RobotsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InnerMatchUnit_RobotsEntry_DoNotUse*>(&_InnerMatchUnit_RobotsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_innermatch_2eproto;
};

// -------------------------------------------------------------------

class InnerMatchUnit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerMatchUnit) */ {
 public:
  inline InnerMatchUnit() : InnerMatchUnit(nullptr) {}
  ~InnerMatchUnit() override;
  explicit PROTOBUF_CONSTEXPR InnerMatchUnit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerMatchUnit(const InnerMatchUnit& from);
  InnerMatchUnit(InnerMatchUnit&& from) noexcept
    : InnerMatchUnit() {
    *this = ::std::move(from);
  }

  inline InnerMatchUnit& operator=(const InnerMatchUnit& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerMatchUnit& operator=(InnerMatchUnit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerMatchUnit& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerMatchUnit* internal_default_instance() {
    return reinterpret_cast<const InnerMatchUnit*>(
               &_InnerMatchUnit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(InnerMatchUnit& a, InnerMatchUnit& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerMatchUnit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerMatchUnit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerMatchUnit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerMatchUnit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerMatchUnit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerMatchUnit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerMatchUnit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerMatchUnit";
  }
  protected:
  explicit InnerMatchUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 1,
    kRobotsFieldNumber = 2,
  };
  // map<uint64, .inner.InnerMatchFighter> roles = 1;
  int roles_size() const;
  private:
  int _internal_roles_size() const;
  public:
  void clear_roles();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchFighter >&
      _internal_roles() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchFighter >*
      _internal_mutable_roles();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchFighter >&
      roles() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchFighter >*
      mutable_roles();

  // map<uint64, .inner.InnerMatchFighter> robots = 2;
  int robots_size() const;
  private:
  int _internal_robots_size() const;
  public:
  void clear_robots();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchFighter >&
      _internal_robots() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchFighter >*
      _internal_mutable_robots();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchFighter >&
      robots() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchFighter >*
      mutable_robots();

  // @@protoc_insertion_point(class_scope:inner.InnerMatchUnit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      InnerMatchUnit_RolesEntry_DoNotUse,
      uint64_t, ::inner::InnerMatchFighter,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> roles_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      InnerMatchUnit_RobotsEntry_DoNotUse,
      uint64_t, ::inner::InnerMatchFighter,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> robots_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innermatch_2eproto;
};
// -------------------------------------------------------------------

class InnerMatchGroup_UnitsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InnerMatchGroup_UnitsEntry_DoNotUse, 
    uint64_t, ::inner::InnerMatchUnit,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InnerMatchGroup_UnitsEntry_DoNotUse, 
    uint64_t, ::inner::InnerMatchUnit,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  InnerMatchGroup_UnitsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR InnerMatchGroup_UnitsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit InnerMatchGroup_UnitsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InnerMatchGroup_UnitsEntry_DoNotUse& other);
  static const InnerMatchGroup_UnitsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InnerMatchGroup_UnitsEntry_DoNotUse*>(&_InnerMatchGroup_UnitsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_innermatch_2eproto;
};

// -------------------------------------------------------------------

class InnerMatchGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerMatchGroup) */ {
 public:
  inline InnerMatchGroup() : InnerMatchGroup(nullptr) {}
  ~InnerMatchGroup() override;
  explicit PROTOBUF_CONSTEXPR InnerMatchGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerMatchGroup(const InnerMatchGroup& from);
  InnerMatchGroup(InnerMatchGroup&& from) noexcept
    : InnerMatchGroup() {
    *this = ::std::move(from);
  }

  inline InnerMatchGroup& operator=(const InnerMatchGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerMatchGroup& operator=(InnerMatchGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerMatchGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerMatchGroup* internal_default_instance() {
    return reinterpret_cast<const InnerMatchGroup*>(
               &_InnerMatchGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(InnerMatchGroup& a, InnerMatchGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerMatchGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerMatchGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerMatchGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerMatchGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerMatchGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerMatchGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerMatchGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerMatchGroup";
  }
  protected:
  explicit InnerMatchGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kUnitsFieldNumber = 1,
  };
  // map<uint64, .inner.InnerMatchUnit> units = 1;
  int units_size() const;
  private:
  int _internal_units_size() const;
  public:
  void clear_units();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchUnit >&
      _internal_units() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchUnit >*
      _internal_mutable_units();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchUnit >&
      units() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchUnit >*
      mutable_units();

  // @@protoc_insertion_point(class_scope:inner.InnerMatchGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      InnerMatchGroup_UnitsEntry_DoNotUse,
      uint64_t, ::inner::InnerMatchUnit,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> units_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innermatch_2eproto;
};
// -------------------------------------------------------------------

class InnerMatchRoom_GroupsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InnerMatchRoom_GroupsEntry_DoNotUse, 
    uint32_t, ::inner::InnerMatchGroup,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InnerMatchRoom_GroupsEntry_DoNotUse, 
    uint32_t, ::inner::InnerMatchGroup,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  InnerMatchRoom_GroupsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR InnerMatchRoom_GroupsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit InnerMatchRoom_GroupsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InnerMatchRoom_GroupsEntry_DoNotUse& other);
  static const InnerMatchRoom_GroupsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InnerMatchRoom_GroupsEntry_DoNotUse*>(&_InnerMatchRoom_GroupsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_innermatch_2eproto;
};

// -------------------------------------------------------------------

class InnerMatchRoom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerMatchRoom) */ {
 public:
  inline InnerMatchRoom() : InnerMatchRoom(nullptr) {}
  ~InnerMatchRoom() override;
  explicit PROTOBUF_CONSTEXPR InnerMatchRoom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerMatchRoom(const InnerMatchRoom& from);
  InnerMatchRoom(InnerMatchRoom&& from) noexcept
    : InnerMatchRoom() {
    *this = ::std::move(from);
  }

  inline InnerMatchRoom& operator=(const InnerMatchRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerMatchRoom& operator=(InnerMatchRoom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerMatchRoom& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerMatchRoom* internal_default_instance() {
    return reinterpret_cast<const InnerMatchRoom*>(
               &_InnerMatchRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(InnerMatchRoom& a, InnerMatchRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerMatchRoom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerMatchRoom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerMatchRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerMatchRoom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerMatchRoom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerMatchRoom& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerMatchRoom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerMatchRoom";
  }
  protected:
  explicit InnerMatchRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 5,
    kRoomIdFieldNumber = 1,
    kMTypeFieldNumber = 2,
  };
  // map<uint32, .inner.InnerMatchGroup> groups = 5;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::inner::InnerMatchGroup >&
      _internal_groups() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::inner::InnerMatchGroup >*
      _internal_mutable_groups();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::inner::InnerMatchGroup >&
      groups() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::inner::InnerMatchGroup >*
      mutable_groups();

  // uint64 roomId = 1;
  void clear_roomid();
  uint64_t roomid() const;
  void set_roomid(uint64_t value);
  private:
  uint64_t _internal_roomid() const;
  void _internal_set_roomid(uint64_t value);
  public:

  // uint32 mType = 2;
  void clear_mtype();
  uint32_t mtype() const;
  void set_mtype(uint32_t value);
  private:
  uint32_t _internal_mtype() const;
  void _internal_set_mtype(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerMatchRoom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      InnerMatchRoom_GroupsEntry_DoNotUse,
      uint32_t, ::inner::InnerMatchGroup,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> groups_;
  uint64_t roomid_;
  uint32_t mtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innermatch_2eproto;
};
// -------------------------------------------------------------------

class InnerMatchRoomCopyScene final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerMatchRoomCopyScene) */ {
 public:
  inline InnerMatchRoomCopyScene() : InnerMatchRoomCopyScene(nullptr) {}
  ~InnerMatchRoomCopyScene() override;
  explicit PROTOBUF_CONSTEXPR InnerMatchRoomCopyScene(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerMatchRoomCopyScene(const InnerMatchRoomCopyScene& from);
  InnerMatchRoomCopyScene(InnerMatchRoomCopyScene&& from) noexcept
    : InnerMatchRoomCopyScene() {
    *this = ::std::move(from);
  }

  inline InnerMatchRoomCopyScene& operator=(const InnerMatchRoomCopyScene& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerMatchRoomCopyScene& operator=(InnerMatchRoomCopyScene&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerMatchRoomCopyScene& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerMatchRoomCopyScene* internal_default_instance() {
    return reinterpret_cast<const InnerMatchRoomCopyScene*>(
               &_InnerMatchRoomCopyScene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(InnerMatchRoomCopyScene& a, InnerMatchRoomCopyScene& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerMatchRoomCopyScene* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerMatchRoomCopyScene* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerMatchRoomCopyScene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerMatchRoomCopyScene>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerMatchRoomCopyScene& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerMatchRoomCopyScene& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerMatchRoomCopyScene* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerMatchRoomCopyScene";
  }
  protected:
  explicit InnerMatchRoomCopyScene(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneIdFieldNumber = 2,
    kExpireFieldNumber = 1,
    kHashIdFieldNumber = 3,
  };
  // uint64 sceneId = 2;
  void clear_sceneid();
  uint64_t sceneid() const;
  void set_sceneid(uint64_t value);
  private:
  uint64_t _internal_sceneid() const;
  void _internal_set_sceneid(uint64_t value);
  public:

  // uint32 expire = 1;
  void clear_expire();
  uint32_t expire() const;
  void set_expire(uint32_t value);
  private:
  uint32_t _internal_expire() const;
  void _internal_set_expire(uint32_t value);
  public:

  // uint32 hashId = 3;
  void clear_hashid();
  uint32_t hashid() const;
  void set_hashid(uint32_t value);
  private:
  uint32_t _internal_hashid() const;
  void _internal_set_hashid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerMatchRoomCopyScene)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t sceneid_;
  uint32_t expire_;
  uint32_t hashid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innermatch_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InnerMatchMatcher

// .common.RoleBrief brief = 1;
inline bool InnerMatchMatcher::_internal_has_brief() const {
  return this != internal_default_instance() && brief_ != nullptr;
}
inline bool InnerMatchMatcher::has_brief() const {
  return _internal_has_brief();
}
inline const ::common::RoleBrief& InnerMatchMatcher::_internal_brief() const {
  const ::common::RoleBrief* p = brief_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleBrief&>(
      ::common::_RoleBrief_default_instance_);
}
inline const ::common::RoleBrief& InnerMatchMatcher::brief() const {
  // @@protoc_insertion_point(field_get:inner.InnerMatchMatcher.brief)
  return _internal_brief();
}
inline void InnerMatchMatcher::unsafe_arena_set_allocated_brief(
    ::common::RoleBrief* brief) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brief_);
  }
  brief_ = brief;
  if (brief) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerMatchMatcher.brief)
}
inline ::common::RoleBrief* InnerMatchMatcher::release_brief() {
  
  ::common::RoleBrief* temp = brief_;
  brief_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleBrief* InnerMatchMatcher::unsafe_arena_release_brief() {
  // @@protoc_insertion_point(field_release:inner.InnerMatchMatcher.brief)
  
  ::common::RoleBrief* temp = brief_;
  brief_ = nullptr;
  return temp;
}
inline ::common::RoleBrief* InnerMatchMatcher::_internal_mutable_brief() {
  
  if (brief_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleBrief>(GetArenaForAllocation());
    brief_ = p;
  }
  return brief_;
}
inline ::common::RoleBrief* InnerMatchMatcher::mutable_brief() {
  ::common::RoleBrief* _msg = _internal_mutable_brief();
  // @@protoc_insertion_point(field_mutable:inner.InnerMatchMatcher.brief)
  return _msg;
}
inline void InnerMatchMatcher::set_allocated_brief(::common::RoleBrief* brief) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(brief_);
  }
  if (brief) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brief));
    if (message_arena != submessage_arena) {
      brief = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brief, submessage_arena);
    }
    
  } else {
    
  }
  brief_ = brief;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerMatchMatcher.brief)
}

// .common.MatchFighterExtend extd = 2;
inline bool InnerMatchMatcher::_internal_has_extd() const {
  return this != internal_default_instance() && extd_ != nullptr;
}
inline bool InnerMatchMatcher::has_extd() const {
  return _internal_has_extd();
}
inline const ::common::MatchFighterExtend& InnerMatchMatcher::_internal_extd() const {
  const ::common::MatchFighterExtend* p = extd_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::MatchFighterExtend&>(
      ::common::_MatchFighterExtend_default_instance_);
}
inline const ::common::MatchFighterExtend& InnerMatchMatcher::extd() const {
  // @@protoc_insertion_point(field_get:inner.InnerMatchMatcher.extd)
  return _internal_extd();
}
inline void InnerMatchMatcher::unsafe_arena_set_allocated_extd(
    ::common::MatchFighterExtend* extd) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd_);
  }
  extd_ = extd;
  if (extd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerMatchMatcher.extd)
}
inline ::common::MatchFighterExtend* InnerMatchMatcher::release_extd() {
  
  ::common::MatchFighterExtend* temp = extd_;
  extd_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::MatchFighterExtend* InnerMatchMatcher::unsafe_arena_release_extd() {
  // @@protoc_insertion_point(field_release:inner.InnerMatchMatcher.extd)
  
  ::common::MatchFighterExtend* temp = extd_;
  extd_ = nullptr;
  return temp;
}
inline ::common::MatchFighterExtend* InnerMatchMatcher::_internal_mutable_extd() {
  
  if (extd_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::MatchFighterExtend>(GetArenaForAllocation());
    extd_ = p;
  }
  return extd_;
}
inline ::common::MatchFighterExtend* InnerMatchMatcher::mutable_extd() {
  ::common::MatchFighterExtend* _msg = _internal_mutable_extd();
  // @@protoc_insertion_point(field_mutable:inner.InnerMatchMatcher.extd)
  return _msg;
}
inline void InnerMatchMatcher::set_allocated_extd(::common::MatchFighterExtend* extd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd_);
  }
  if (extd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd));
    if (message_arena != submessage_arena) {
      extd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extd, submessage_arena);
    }
    
  } else {
    
  }
  extd_ = extd;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerMatchMatcher.extd)
}

// uint64 localLeaderId = 3;
inline void InnerMatchMatcher::clear_localleaderid() {
  localleaderid_ = uint64_t{0u};
}
inline uint64_t InnerMatchMatcher::_internal_localleaderid() const {
  return localleaderid_;
}
inline uint64_t InnerMatchMatcher::localleaderid() const {
  // @@protoc_insertion_point(field_get:inner.InnerMatchMatcher.localLeaderId)
  return _internal_localleaderid();
}
inline void InnerMatchMatcher::_internal_set_localleaderid(uint64_t value) {
  
  localleaderid_ = value;
}
inline void InnerMatchMatcher::set_localleaderid(uint64_t value) {
  _internal_set_localleaderid(value);
  // @@protoc_insertion_point(field_set:inner.InnerMatchMatcher.localLeaderId)
}

// -------------------------------------------------------------------

// InnerMatchMatchList

// repeated uint64 roleIds = 1;
inline int InnerMatchMatchList::_internal_roleids_size() const {
  return roleids_.size();
}
inline int InnerMatchMatchList::roleids_size() const {
  return _internal_roleids_size();
}
inline void InnerMatchMatchList::clear_roleids() {
  roleids_.Clear();
}
inline uint64_t InnerMatchMatchList::_internal_roleids(int index) const {
  return roleids_.Get(index);
}
inline uint64_t InnerMatchMatchList::roleids(int index) const {
  // @@protoc_insertion_point(field_get:inner.InnerMatchMatchList.roleIds)
  return _internal_roleids(index);
}
inline void InnerMatchMatchList::set_roleids(int index, uint64_t value) {
  roleids_.Set(index, value);
  // @@protoc_insertion_point(field_set:inner.InnerMatchMatchList.roleIds)
}
inline void InnerMatchMatchList::_internal_add_roleids(uint64_t value) {
  roleids_.Add(value);
}
inline void InnerMatchMatchList::add_roleids(uint64_t value) {
  _internal_add_roleids(value);
  // @@protoc_insertion_point(field_add:inner.InnerMatchMatchList.roleIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
InnerMatchMatchList::_internal_roleids() const {
  return roleids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
InnerMatchMatchList::roleids() const {
  // @@protoc_insertion_point(field_list:inner.InnerMatchMatchList.roleIds)
  return _internal_roleids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
InnerMatchMatchList::_internal_mutable_roleids() {
  return &roleids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
InnerMatchMatchList::mutable_roleids() {
  // @@protoc_insertion_point(field_mutable_list:inner.InnerMatchMatchList.roleIds)
  return _internal_mutable_roleids();
}

// -------------------------------------------------------------------

// InnerMatchPunishList

// repeated uint64 roleIds = 1;
inline int InnerMatchPunishList::_internal_roleids_size() const {
  return roleids_.size();
}
inline int InnerMatchPunishList::roleids_size() const {
  return _internal_roleids_size();
}
inline void InnerMatchPunishList::clear_roleids() {
  roleids_.Clear();
}
inline uint64_t InnerMatchPunishList::_internal_roleids(int index) const {
  return roleids_.Get(index);
}
inline uint64_t InnerMatchPunishList::roleids(int index) const {
  // @@protoc_insertion_point(field_get:inner.InnerMatchPunishList.roleIds)
  return _internal_roleids(index);
}
inline void InnerMatchPunishList::set_roleids(int index, uint64_t value) {
  roleids_.Set(index, value);
  // @@protoc_insertion_point(field_set:inner.InnerMatchPunishList.roleIds)
}
inline void InnerMatchPunishList::_internal_add_roleids(uint64_t value) {
  roleids_.Add(value);
}
inline void InnerMatchPunishList::add_roleids(uint64_t value) {
  _internal_add_roleids(value);
  // @@protoc_insertion_point(field_add:inner.InnerMatchPunishList.roleIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
InnerMatchPunishList::_internal_roleids() const {
  return roleids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
InnerMatchPunishList::roleids() const {
  // @@protoc_insertion_point(field_list:inner.InnerMatchPunishList.roleIds)
  return _internal_roleids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
InnerMatchPunishList::_internal_mutable_roleids() {
  return &roleids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
InnerMatchPunishList::mutable_roleids() {
  // @@protoc_insertion_point(field_mutable_list:inner.InnerMatchPunishList.roleIds)
  return _internal_mutable_roleids();
}

// -------------------------------------------------------------------

// InnerMatchFighter

// .common.RoleBrief brief = 1;
inline bool InnerMatchFighter::_internal_has_brief() const {
  return this != internal_default_instance() && brief_ != nullptr;
}
inline bool InnerMatchFighter::has_brief() const {
  return _internal_has_brief();
}
inline const ::common::RoleBrief& InnerMatchFighter::_internal_brief() const {
  const ::common::RoleBrief* p = brief_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleBrief&>(
      ::common::_RoleBrief_default_instance_);
}
inline const ::common::RoleBrief& InnerMatchFighter::brief() const {
  // @@protoc_insertion_point(field_get:inner.InnerMatchFighter.brief)
  return _internal_brief();
}
inline void InnerMatchFighter::unsafe_arena_set_allocated_brief(
    ::common::RoleBrief* brief) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brief_);
  }
  brief_ = brief;
  if (brief) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerMatchFighter.brief)
}
inline ::common::RoleBrief* InnerMatchFighter::release_brief() {
  
  ::common::RoleBrief* temp = brief_;
  brief_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleBrief* InnerMatchFighter::unsafe_arena_release_brief() {
  // @@protoc_insertion_point(field_release:inner.InnerMatchFighter.brief)
  
  ::common::RoleBrief* temp = brief_;
  brief_ = nullptr;
  return temp;
}
inline ::common::RoleBrief* InnerMatchFighter::_internal_mutable_brief() {
  
  if (brief_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleBrief>(GetArenaForAllocation());
    brief_ = p;
  }
  return brief_;
}
inline ::common::RoleBrief* InnerMatchFighter::mutable_brief() {
  ::common::RoleBrief* _msg = _internal_mutable_brief();
  // @@protoc_insertion_point(field_mutable:inner.InnerMatchFighter.brief)
  return _msg;
}
inline void InnerMatchFighter::set_allocated_brief(::common::RoleBrief* brief) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(brief_);
  }
  if (brief) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brief));
    if (message_arena != submessage_arena) {
      brief = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brief, submessage_arena);
    }
    
  } else {
    
  }
  brief_ = brief;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerMatchFighter.brief)
}

// .common.MatchFighterExtend extd = 2;
inline bool InnerMatchFighter::_internal_has_extd() const {
  return this != internal_default_instance() && extd_ != nullptr;
}
inline bool InnerMatchFighter::has_extd() const {
  return _internal_has_extd();
}
inline const ::common::MatchFighterExtend& InnerMatchFighter::_internal_extd() const {
  const ::common::MatchFighterExtend* p = extd_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::MatchFighterExtend&>(
      ::common::_MatchFighterExtend_default_instance_);
}
inline const ::common::MatchFighterExtend& InnerMatchFighter::extd() const {
  // @@protoc_insertion_point(field_get:inner.InnerMatchFighter.extd)
  return _internal_extd();
}
inline void InnerMatchFighter::unsafe_arena_set_allocated_extd(
    ::common::MatchFighterExtend* extd) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd_);
  }
  extd_ = extd;
  if (extd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerMatchFighter.extd)
}
inline ::common::MatchFighterExtend* InnerMatchFighter::release_extd() {
  
  ::common::MatchFighterExtend* temp = extd_;
  extd_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::MatchFighterExtend* InnerMatchFighter::unsafe_arena_release_extd() {
  // @@protoc_insertion_point(field_release:inner.InnerMatchFighter.extd)
  
  ::common::MatchFighterExtend* temp = extd_;
  extd_ = nullptr;
  return temp;
}
inline ::common::MatchFighterExtend* InnerMatchFighter::_internal_mutable_extd() {
  
  if (extd_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::MatchFighterExtend>(GetArenaForAllocation());
    extd_ = p;
  }
  return extd_;
}
inline ::common::MatchFighterExtend* InnerMatchFighter::mutable_extd() {
  ::common::MatchFighterExtend* _msg = _internal_mutable_extd();
  // @@protoc_insertion_point(field_mutable:inner.InnerMatchFighter.extd)
  return _msg;
}
inline void InnerMatchFighter::set_allocated_extd(::common::MatchFighterExtend* extd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd_);
  }
  if (extd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd));
    if (message_arena != submessage_arena) {
      extd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extd, submessage_arena);
    }
    
  } else {
    
  }
  extd_ = extd;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerMatchFighter.extd)
}

// uint64 localLeaderId = 4;
inline void InnerMatchFighter::clear_localleaderid() {
  localleaderid_ = uint64_t{0u};
}
inline uint64_t InnerMatchFighter::_internal_localleaderid() const {
  return localleaderid_;
}
inline uint64_t InnerMatchFighter::localleaderid() const {
  // @@protoc_insertion_point(field_get:inner.InnerMatchFighter.localLeaderId)
  return _internal_localleaderid();
}
inline void InnerMatchFighter::_internal_set_localleaderid(uint64_t value) {
  
  localleaderid_ = value;
}
inline void InnerMatchFighter::set_localleaderid(uint64_t value) {
  _internal_set_localleaderid(value);
  // @@protoc_insertion_point(field_set:inner.InnerMatchFighter.localLeaderId)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InnerMatchUnit

// map<uint64, .inner.InnerMatchFighter> roles = 1;
inline int InnerMatchUnit::_internal_roles_size() const {
  return roles_.size();
}
inline int InnerMatchUnit::roles_size() const {
  return _internal_roles_size();
}
inline void InnerMatchUnit::clear_roles() {
  roles_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchFighter >&
InnerMatchUnit::_internal_roles() const {
  return roles_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchFighter >&
InnerMatchUnit::roles() const {
  // @@protoc_insertion_point(field_map:inner.InnerMatchUnit.roles)
  return _internal_roles();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchFighter >*
InnerMatchUnit::_internal_mutable_roles() {
  return roles_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchFighter >*
InnerMatchUnit::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_map:inner.InnerMatchUnit.roles)
  return _internal_mutable_roles();
}

// map<uint64, .inner.InnerMatchFighter> robots = 2;
inline int InnerMatchUnit::_internal_robots_size() const {
  return robots_.size();
}
inline int InnerMatchUnit::robots_size() const {
  return _internal_robots_size();
}
inline void InnerMatchUnit::clear_robots() {
  robots_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchFighter >&
InnerMatchUnit::_internal_robots() const {
  return robots_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchFighter >&
InnerMatchUnit::robots() const {
  // @@protoc_insertion_point(field_map:inner.InnerMatchUnit.robots)
  return _internal_robots();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchFighter >*
InnerMatchUnit::_internal_mutable_robots() {
  return robots_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchFighter >*
InnerMatchUnit::mutable_robots() {
  // @@protoc_insertion_point(field_mutable_map:inner.InnerMatchUnit.robots)
  return _internal_mutable_robots();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InnerMatchGroup

// map<uint64, .inner.InnerMatchUnit> units = 1;
inline int InnerMatchGroup::_internal_units_size() const {
  return units_.size();
}
inline int InnerMatchGroup::units_size() const {
  return _internal_units_size();
}
inline void InnerMatchGroup::clear_units() {
  units_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchUnit >&
InnerMatchGroup::_internal_units() const {
  return units_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchUnit >&
InnerMatchGroup::units() const {
  // @@protoc_insertion_point(field_map:inner.InnerMatchGroup.units)
  return _internal_units();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchUnit >*
InnerMatchGroup::_internal_mutable_units() {
  return units_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::inner::InnerMatchUnit >*
InnerMatchGroup::mutable_units() {
  // @@protoc_insertion_point(field_mutable_map:inner.InnerMatchGroup.units)
  return _internal_mutable_units();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InnerMatchRoom

// uint64 roomId = 1;
inline void InnerMatchRoom::clear_roomid() {
  roomid_ = uint64_t{0u};
}
inline uint64_t InnerMatchRoom::_internal_roomid() const {
  return roomid_;
}
inline uint64_t InnerMatchRoom::roomid() const {
  // @@protoc_insertion_point(field_get:inner.InnerMatchRoom.roomId)
  return _internal_roomid();
}
inline void InnerMatchRoom::_internal_set_roomid(uint64_t value) {
  
  roomid_ = value;
}
inline void InnerMatchRoom::set_roomid(uint64_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:inner.InnerMatchRoom.roomId)
}

// uint32 mType = 2;
inline void InnerMatchRoom::clear_mtype() {
  mtype_ = 0u;
}
inline uint32_t InnerMatchRoom::_internal_mtype() const {
  return mtype_;
}
inline uint32_t InnerMatchRoom::mtype() const {
  // @@protoc_insertion_point(field_get:inner.InnerMatchRoom.mType)
  return _internal_mtype();
}
inline void InnerMatchRoom::_internal_set_mtype(uint32_t value) {
  
  mtype_ = value;
}
inline void InnerMatchRoom::set_mtype(uint32_t value) {
  _internal_set_mtype(value);
  // @@protoc_insertion_point(field_set:inner.InnerMatchRoom.mType)
}

// map<uint32, .inner.InnerMatchGroup> groups = 5;
inline int InnerMatchRoom::_internal_groups_size() const {
  return groups_.size();
}
inline int InnerMatchRoom::groups_size() const {
  return _internal_groups_size();
}
inline void InnerMatchRoom::clear_groups() {
  groups_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::inner::InnerMatchGroup >&
InnerMatchRoom::_internal_groups() const {
  return groups_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::inner::InnerMatchGroup >&
InnerMatchRoom::groups() const {
  // @@protoc_insertion_point(field_map:inner.InnerMatchRoom.groups)
  return _internal_groups();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::inner::InnerMatchGroup >*
InnerMatchRoom::_internal_mutable_groups() {
  return groups_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::inner::InnerMatchGroup >*
InnerMatchRoom::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_map:inner.InnerMatchRoom.groups)
  return _internal_mutable_groups();
}

// -------------------------------------------------------------------

// InnerMatchRoomCopyScene

// uint32 expire = 1;
inline void InnerMatchRoomCopyScene::clear_expire() {
  expire_ = 0u;
}
inline uint32_t InnerMatchRoomCopyScene::_internal_expire() const {
  return expire_;
}
inline uint32_t InnerMatchRoomCopyScene::expire() const {
  // @@protoc_insertion_point(field_get:inner.InnerMatchRoomCopyScene.expire)
  return _internal_expire();
}
inline void InnerMatchRoomCopyScene::_internal_set_expire(uint32_t value) {
  
  expire_ = value;
}
inline void InnerMatchRoomCopyScene::set_expire(uint32_t value) {
  _internal_set_expire(value);
  // @@protoc_insertion_point(field_set:inner.InnerMatchRoomCopyScene.expire)
}

// uint64 sceneId = 2;
inline void InnerMatchRoomCopyScene::clear_sceneid() {
  sceneid_ = uint64_t{0u};
}
inline uint64_t InnerMatchRoomCopyScene::_internal_sceneid() const {
  return sceneid_;
}
inline uint64_t InnerMatchRoomCopyScene::sceneid() const {
  // @@protoc_insertion_point(field_get:inner.InnerMatchRoomCopyScene.sceneId)
  return _internal_sceneid();
}
inline void InnerMatchRoomCopyScene::_internal_set_sceneid(uint64_t value) {
  
  sceneid_ = value;
}
inline void InnerMatchRoomCopyScene::set_sceneid(uint64_t value) {
  _internal_set_sceneid(value);
  // @@protoc_insertion_point(field_set:inner.InnerMatchRoomCopyScene.sceneId)
}

// uint32 hashId = 3;
inline void InnerMatchRoomCopyScene::clear_hashid() {
  hashid_ = 0u;
}
inline uint32_t InnerMatchRoomCopyScene::_internal_hashid() const {
  return hashid_;
}
inline uint32_t InnerMatchRoomCopyScene::hashid() const {
  // @@protoc_insertion_point(field_get:inner.InnerMatchRoomCopyScene.hashId)
  return _internal_hashid();
}
inline void InnerMatchRoomCopyScene::_internal_set_hashid(uint32_t value) {
  
  hashid_ = value;
}
inline void InnerMatchRoomCopyScene::set_hashid(uint32_t value) {
  _internal_set_hashid(value);
  // @@protoc_insertion_point(field_set:inner.InnerMatchRoomCopyScene.hashId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace inner

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_innermatch_2eproto
