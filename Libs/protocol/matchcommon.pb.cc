// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: matchcommon.proto

#include "matchcommon.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace common {
PROTOBUF_CONSTEXPR ModuleMatch::ModuleMatch(
    ::_pbi::ConstantInitialized)
  : mdata_(nullptr)
  , mstatus_(nullptr)
  , grouplist_(nullptr){}
struct ModuleMatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModuleMatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModuleMatchDefaultTypeInternal() {}
  union {
    ModuleMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModuleMatchDefaultTypeInternal _ModuleMatch_default_instance_;
PROTOBUF_CONSTEXPR MatchTypeData::MatchTypeData(
    ::_pbi::ConstantInitialized)
  : fight3v3_(nullptr)
  , fight5v5_(nullptr){}
struct MatchTypeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchTypeDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchTypeDataDefaultTypeInternal() {}
  union {
    MatchTypeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchTypeDataDefaultTypeInternal _MatchTypeData_default_instance_;
PROTOBUF_CONSTEXPR MatchStatus::MatchStatus(
    ::_pbi::ConstantInitialized)
  : mtype_(0u)
  , mtime_(0u){}
struct MatchStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchStatusDefaultTypeInternal() {}
  union {
    MatchStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchStatusDefaultTypeInternal _MatchStatus_default_instance_;
PROTOBUF_CONSTEXPR MatchGroupList::MatchGroupList(
    ::_pbi::ConstantInitialized)
  : red_(nullptr)
  , blue_(nullptr)
  , expire_(0u)
  , stageid_(0u){}
struct MatchGroupListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchGroupListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchGroupListDefaultTypeInternal() {}
  union {
    MatchGroupList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchGroupListDefaultTypeInternal _MatchGroupList_default_instance_;
PROTOBUF_CONSTEXPR MatchGroup::MatchGroup(
    ::_pbi::ConstantInitialized)
  : fighters_(){}
struct MatchGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchGroupDefaultTypeInternal() {}
  union {
    MatchGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchGroupDefaultTypeInternal _MatchGroup_default_instance_;
PROTOBUF_CONSTEXPR MatchFighter::MatchFighter(
    ::_pbi::ConstantInitialized)
  : brief_(nullptr)
  , extd_(nullptr)
  , isok_(false){}
struct MatchFighterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchFighterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchFighterDefaultTypeInternal() {}
  union {
    MatchFighter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchFighterDefaultTypeInternal _MatchFighter_default_instance_;
PROTOBUF_CONSTEXPR MatchFighterExtend::MatchFighterExtend(
    ::_pbi::ConstantInitialized)
  : fight3v3_(nullptr)
  , fight5v5_(nullptr){}
struct MatchFighterExtendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchFighterExtendDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchFighterExtendDefaultTypeInternal() {}
  union {
    MatchFighterExtend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchFighterExtendDefaultTypeInternal _MatchFighterExtend_default_instance_;
}  // namespace common
static ::_pb::Metadata file_level_metadata_matchcommon_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_matchcommon_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_matchcommon_2eproto = nullptr;

const uint32_t TableStruct_matchcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ModuleMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ModuleMatch, mdata_),
  PROTOBUF_FIELD_OFFSET(::common::ModuleMatch, mstatus_),
  PROTOBUF_FIELD_OFFSET(::common::ModuleMatch, grouplist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::MatchTypeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::MatchTypeData, fight3v3_),
  PROTOBUF_FIELD_OFFSET(::common::MatchTypeData, fight5v5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::MatchStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::MatchStatus, mtype_),
  PROTOBUF_FIELD_OFFSET(::common::MatchStatus, mtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::MatchGroupList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::MatchGroupList, red_),
  PROTOBUF_FIELD_OFFSET(::common::MatchGroupList, blue_),
  PROTOBUF_FIELD_OFFSET(::common::MatchGroupList, expire_),
  PROTOBUF_FIELD_OFFSET(::common::MatchGroupList, stageid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::MatchGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::MatchGroup, fighters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::MatchFighter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::MatchFighter, brief_),
  PROTOBUF_FIELD_OFFSET(::common::MatchFighter, extd_),
  PROTOBUF_FIELD_OFFSET(::common::MatchFighter, isok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::MatchFighterExtend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::MatchFighterExtend, fight3v3_),
  PROTOBUF_FIELD_OFFSET(::common::MatchFighterExtend, fight5v5_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::common::ModuleMatch)},
  { 9, -1, -1, sizeof(::common::MatchTypeData)},
  { 17, -1, -1, sizeof(::common::MatchStatus)},
  { 25, -1, -1, sizeof(::common::MatchGroupList)},
  { 35, -1, -1, sizeof(::common::MatchGroup)},
  { 42, -1, -1, sizeof(::common::MatchFighter)},
  { 51, -1, -1, sizeof(::common::MatchFighterExtend)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::common::_ModuleMatch_default_instance_._instance,
  &::common::_MatchTypeData_default_instance_._instance,
  &::common::_MatchStatus_default_instance_._instance,
  &::common::_MatchGroupList_default_instance_._instance,
  &::common::_MatchGroup_default_instance_._instance,
  &::common::_MatchFighter_default_instance_._instance,
  &::common::_MatchFighterExtend_default_instance_._instance,
};

const char descriptor_table_protodef_matchcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021matchcommon.proto\022\006common\032\014common.prot"
  "o\032\024fight3v3common.proto\032\024fight5v5common."
  "proto\"\204\001\n\013ModuleMatch\022$\n\005mdata\030\001 \001(\0132\025.c"
  "ommon.MatchTypeData\022$\n\007mstatus\030\002 \001(\0132\023.c"
  "ommon.MatchStatus\022)\n\tgroupList\030\003 \001(\0132\026.c"
  "ommon.MatchGroupList\"a\n\rMatchTypeData\022\'\n"
  "\010fight3v3\030\001 \001(\0132\025.common.MatchFight3v3\022\'"
  "\n\010fight5v5\030\002 \001(\0132\025.common.MatchFight5v5\""
  "+\n\013MatchStatus\022\r\n\005mtype\030\001 \001(\r\022\r\n\005mtime\030\002"
  " \001(\r\"t\n\016MatchGroupList\022\037\n\003red\030\001 \001(\0132\022.co"
  "mmon.MatchGroup\022 \n\004blue\030\002 \001(\0132\022.common.M"
  "atchGroup\022\016\n\006expire\030\003 \001(\r\022\017\n\007stageId\030\004 \001"
  "(\r\"4\n\nMatchGroup\022&\n\010fighters\030\001 \003(\0132\024.com"
  "mon.MatchFighter\"h\n\014MatchFighter\022 \n\005brie"
  "f\030\001 \001(\0132\021.common.RoleBrief\022(\n\004extd\030\002 \001(\013"
  "2\032.common.MatchFighterExtend\022\014\n\004isok\030\003 \001"
  "(\010\"h\n\022MatchFighterExtend\022(\n\010fight3v3\030\001 \001"
  "(\0132\026.common.ExtendFight3v3\022(\n\010fight5v5\030\002"
  " \001(\0132\026.common.ExtendFight5v5*`\n\tenStageI"
  "d\022\022\n\016enStateId_None\020\000\022\025\n\021enStageId_Confi"
  "rm\020\001\022\025\n\021enStageId_Loading\020\002\022\021\n\renStageId"
  "_Max\020\003b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_matchcommon_2eproto_deps[3] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_fight3v3common_2eproto,
  &::descriptor_table_fight5v5common_2eproto,
};
static ::_pbi::once_flag descriptor_table_matchcommon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_matchcommon_2eproto = {
    false, false, 854, descriptor_table_protodef_matchcommon_2eproto,
    "matchcommon.proto",
    &descriptor_table_matchcommon_2eproto_once, descriptor_table_matchcommon_2eproto_deps, 3, 7,
    schemas, file_default_instances, TableStruct_matchcommon_2eproto::offsets,
    file_level_metadata_matchcommon_2eproto, file_level_enum_descriptors_matchcommon_2eproto,
    file_level_service_descriptors_matchcommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_matchcommon_2eproto_getter() {
  return &descriptor_table_matchcommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_matchcommon_2eproto(&descriptor_table_matchcommon_2eproto);
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enStageId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_matchcommon_2eproto);
  return file_level_enum_descriptors_matchcommon_2eproto[0];
}
bool enStageId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ModuleMatch::_Internal {
 public:
  static const ::common::MatchTypeData& mdata(const ModuleMatch* msg);
  static const ::common::MatchStatus& mstatus(const ModuleMatch* msg);
  static const ::common::MatchGroupList& grouplist(const ModuleMatch* msg);
};

const ::common::MatchTypeData&
ModuleMatch::_Internal::mdata(const ModuleMatch* msg) {
  return *msg->mdata_;
}
const ::common::MatchStatus&
ModuleMatch::_Internal::mstatus(const ModuleMatch* msg) {
  return *msg->mstatus_;
}
const ::common::MatchGroupList&
ModuleMatch::_Internal::grouplist(const ModuleMatch* msg) {
  return *msg->grouplist_;
}
ModuleMatch::ModuleMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ModuleMatch)
}
ModuleMatch::ModuleMatch(const ModuleMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mdata()) {
    mdata_ = new ::common::MatchTypeData(*from.mdata_);
  } else {
    mdata_ = nullptr;
  }
  if (from._internal_has_mstatus()) {
    mstatus_ = new ::common::MatchStatus(*from.mstatus_);
  } else {
    mstatus_ = nullptr;
  }
  if (from._internal_has_grouplist()) {
    grouplist_ = new ::common::MatchGroupList(*from.grouplist_);
  } else {
    grouplist_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:common.ModuleMatch)
}

inline void ModuleMatch::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mdata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&grouplist_) -
    reinterpret_cast<char*>(&mdata_)) + sizeof(grouplist_));
}

ModuleMatch::~ModuleMatch() {
  // @@protoc_insertion_point(destructor:common.ModuleMatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModuleMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mdata_;
  if (this != internal_default_instance()) delete mstatus_;
  if (this != internal_default_instance()) delete grouplist_;
}

void ModuleMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModuleMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ModuleMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && mdata_ != nullptr) {
    delete mdata_;
  }
  mdata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mstatus_ != nullptr) {
    delete mstatus_;
  }
  mstatus_ = nullptr;
  if (GetArenaForAllocation() == nullptr && grouplist_ != nullptr) {
    delete grouplist_;
  }
  grouplist_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModuleMatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.MatchTypeData mdata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.MatchStatus mstatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.MatchGroupList groupList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_grouplist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModuleMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ModuleMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.MatchTypeData mdata = 1;
  if (this->_internal_has_mdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mdata(this),
        _Internal::mdata(this).GetCachedSize(), target, stream);
  }

  // .common.MatchStatus mstatus = 2;
  if (this->_internal_has_mstatus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::mstatus(this),
        _Internal::mstatus(this).GetCachedSize(), target, stream);
  }

  // .common.MatchGroupList groupList = 3;
  if (this->_internal_has_grouplist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::grouplist(this),
        _Internal::grouplist(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ModuleMatch)
  return target;
}

size_t ModuleMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ModuleMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.MatchTypeData mdata = 1;
  if (this->_internal_has_mdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mdata_);
  }

  // .common.MatchStatus mstatus = 2;
  if (this->_internal_has_mstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mstatus_);
  }

  // .common.MatchGroupList groupList = 3;
  if (this->_internal_has_grouplist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *grouplist_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModuleMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModuleMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModuleMatch::GetClassData() const { return &_class_data_; }

void ModuleMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModuleMatch *>(to)->MergeFrom(
      static_cast<const ModuleMatch &>(from));
}


void ModuleMatch::MergeFrom(const ModuleMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ModuleMatch)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mdata()) {
    _internal_mutable_mdata()->::common::MatchTypeData::MergeFrom(from._internal_mdata());
  }
  if (from._internal_has_mstatus()) {
    _internal_mutable_mstatus()->::common::MatchStatus::MergeFrom(from._internal_mstatus());
  }
  if (from._internal_has_grouplist()) {
    _internal_mutable_grouplist()->::common::MatchGroupList::MergeFrom(from._internal_grouplist());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModuleMatch::CopyFrom(const ModuleMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ModuleMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleMatch::IsInitialized() const {
  return true;
}

void ModuleMatch::InternalSwap(ModuleMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModuleMatch, grouplist_)
      + sizeof(ModuleMatch::grouplist_)
      - PROTOBUF_FIELD_OFFSET(ModuleMatch, mdata_)>(
          reinterpret_cast<char*>(&mdata_),
          reinterpret_cast<char*>(&other->mdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModuleMatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_matchcommon_2eproto_getter, &descriptor_table_matchcommon_2eproto_once,
      file_level_metadata_matchcommon_2eproto[0]);
}

// ===================================================================

class MatchTypeData::_Internal {
 public:
  static const ::common::MatchFight3v3& fight3v3(const MatchTypeData* msg);
  static const ::common::MatchFight5v5& fight5v5(const MatchTypeData* msg);
};

const ::common::MatchFight3v3&
MatchTypeData::_Internal::fight3v3(const MatchTypeData* msg) {
  return *msg->fight3v3_;
}
const ::common::MatchFight5v5&
MatchTypeData::_Internal::fight5v5(const MatchTypeData* msg) {
  return *msg->fight5v5_;
}
void MatchTypeData::clear_fight3v3() {
  if (GetArenaForAllocation() == nullptr && fight3v3_ != nullptr) {
    delete fight3v3_;
  }
  fight3v3_ = nullptr;
}
void MatchTypeData::clear_fight5v5() {
  if (GetArenaForAllocation() == nullptr && fight5v5_ != nullptr) {
    delete fight5v5_;
  }
  fight5v5_ = nullptr;
}
MatchTypeData::MatchTypeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.MatchTypeData)
}
MatchTypeData::MatchTypeData(const MatchTypeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fight3v3()) {
    fight3v3_ = new ::common::MatchFight3v3(*from.fight3v3_);
  } else {
    fight3v3_ = nullptr;
  }
  if (from._internal_has_fight5v5()) {
    fight5v5_ = new ::common::MatchFight5v5(*from.fight5v5_);
  } else {
    fight5v5_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:common.MatchTypeData)
}

inline void MatchTypeData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fight3v3_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fight5v5_) -
    reinterpret_cast<char*>(&fight3v3_)) + sizeof(fight5v5_));
}

MatchTypeData::~MatchTypeData() {
  // @@protoc_insertion_point(destructor:common.MatchTypeData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatchTypeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete fight3v3_;
  if (this != internal_default_instance()) delete fight5v5_;
}

void MatchTypeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MatchTypeData::Clear() {
// @@protoc_insertion_point(message_clear_start:common.MatchTypeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && fight3v3_ != nullptr) {
    delete fight3v3_;
  }
  fight3v3_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fight5v5_ != nullptr) {
    delete fight5v5_;
  }
  fight5v5_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchTypeData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.MatchFight3v3 fight3v3 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fight3v3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.MatchFight5v5 fight5v5 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fight5v5(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchTypeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.MatchTypeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.MatchFight3v3 fight3v3 = 1;
  if (this->_internal_has_fight3v3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::fight3v3(this),
        _Internal::fight3v3(this).GetCachedSize(), target, stream);
  }

  // .common.MatchFight5v5 fight5v5 = 2;
  if (this->_internal_has_fight5v5()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fight5v5(this),
        _Internal::fight5v5(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.MatchTypeData)
  return target;
}

size_t MatchTypeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.MatchTypeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.MatchFight3v3 fight3v3 = 1;
  if (this->_internal_has_fight3v3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fight3v3_);
  }

  // .common.MatchFight5v5 fight5v5 = 2;
  if (this->_internal_has_fight5v5()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fight5v5_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchTypeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MatchTypeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchTypeData::GetClassData() const { return &_class_data_; }

void MatchTypeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MatchTypeData *>(to)->MergeFrom(
      static_cast<const MatchTypeData &>(from));
}


void MatchTypeData::MergeFrom(const MatchTypeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.MatchTypeData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fight3v3()) {
    _internal_mutable_fight3v3()->::common::MatchFight3v3::MergeFrom(from._internal_fight3v3());
  }
  if (from._internal_has_fight5v5()) {
    _internal_mutable_fight5v5()->::common::MatchFight5v5::MergeFrom(from._internal_fight5v5());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchTypeData::CopyFrom(const MatchTypeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.MatchTypeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchTypeData::IsInitialized() const {
  return true;
}

void MatchTypeData::InternalSwap(MatchTypeData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchTypeData, fight5v5_)
      + sizeof(MatchTypeData::fight5v5_)
      - PROTOBUF_FIELD_OFFSET(MatchTypeData, fight3v3_)>(
          reinterpret_cast<char*>(&fight3v3_),
          reinterpret_cast<char*>(&other->fight3v3_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchTypeData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_matchcommon_2eproto_getter, &descriptor_table_matchcommon_2eproto_once,
      file_level_metadata_matchcommon_2eproto[1]);
}

// ===================================================================

class MatchStatus::_Internal {
 public:
};

MatchStatus::MatchStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.MatchStatus)
}
MatchStatus::MatchStatus(const MatchStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mtype_, &from.mtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&mtime_) -
    reinterpret_cast<char*>(&mtype_)) + sizeof(mtime_));
  // @@protoc_insertion_point(copy_constructor:common.MatchStatus)
}

inline void MatchStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mtype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mtime_) -
    reinterpret_cast<char*>(&mtype_)) + sizeof(mtime_));
}

MatchStatus::~MatchStatus() {
  // @@protoc_insertion_point(destructor:common.MatchStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatchStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MatchStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MatchStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:common.MatchStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mtime_) -
      reinterpret_cast<char*>(&mtype_)) + sizeof(mtime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 mtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          mtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mtime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          mtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.MatchStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mtype = 1;
  if (this->_internal_mtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mtype(), target);
  }

  // uint32 mtime = 2;
  if (this->_internal_mtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.MatchStatus)
  return target;
}

size_t MatchStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.MatchStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 mtype = 1;
  if (this->_internal_mtype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mtype());
  }

  // uint32 mtime = 2;
  if (this->_internal_mtime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mtime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MatchStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchStatus::GetClassData() const { return &_class_data_; }

void MatchStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MatchStatus *>(to)->MergeFrom(
      static_cast<const MatchStatus &>(from));
}


void MatchStatus::MergeFrom(const MatchStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.MatchStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mtype() != 0) {
    _internal_set_mtype(from._internal_mtype());
  }
  if (from._internal_mtime() != 0) {
    _internal_set_mtime(from._internal_mtime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchStatus::CopyFrom(const MatchStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.MatchStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchStatus::IsInitialized() const {
  return true;
}

void MatchStatus::InternalSwap(MatchStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchStatus, mtime_)
      + sizeof(MatchStatus::mtime_)
      - PROTOBUF_FIELD_OFFSET(MatchStatus, mtype_)>(
          reinterpret_cast<char*>(&mtype_),
          reinterpret_cast<char*>(&other->mtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_matchcommon_2eproto_getter, &descriptor_table_matchcommon_2eproto_once,
      file_level_metadata_matchcommon_2eproto[2]);
}

// ===================================================================

class MatchGroupList::_Internal {
 public:
  static const ::common::MatchGroup& red(const MatchGroupList* msg);
  static const ::common::MatchGroup& blue(const MatchGroupList* msg);
};

const ::common::MatchGroup&
MatchGroupList::_Internal::red(const MatchGroupList* msg) {
  return *msg->red_;
}
const ::common::MatchGroup&
MatchGroupList::_Internal::blue(const MatchGroupList* msg) {
  return *msg->blue_;
}
MatchGroupList::MatchGroupList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.MatchGroupList)
}
MatchGroupList::MatchGroupList(const MatchGroupList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_red()) {
    red_ = new ::common::MatchGroup(*from.red_);
  } else {
    red_ = nullptr;
  }
  if (from._internal_has_blue()) {
    blue_ = new ::common::MatchGroup(*from.blue_);
  } else {
    blue_ = nullptr;
  }
  ::memcpy(&expire_, &from.expire_,
    static_cast<size_t>(reinterpret_cast<char*>(&stageid_) -
    reinterpret_cast<char*>(&expire_)) + sizeof(stageid_));
  // @@protoc_insertion_point(copy_constructor:common.MatchGroupList)
}

inline void MatchGroupList::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&red_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stageid_) -
    reinterpret_cast<char*>(&red_)) + sizeof(stageid_));
}

MatchGroupList::~MatchGroupList() {
  // @@protoc_insertion_point(destructor:common.MatchGroupList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatchGroupList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete red_;
  if (this != internal_default_instance()) delete blue_;
}

void MatchGroupList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MatchGroupList::Clear() {
// @@protoc_insertion_point(message_clear_start:common.MatchGroupList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && red_ != nullptr) {
    delete red_;
  }
  red_ = nullptr;
  if (GetArenaForAllocation() == nullptr && blue_ != nullptr) {
    delete blue_;
  }
  blue_ = nullptr;
  ::memset(&expire_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stageid_) -
      reinterpret_cast<char*>(&expire_)) + sizeof(stageid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchGroupList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.MatchGroup red = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_red(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.MatchGroup blue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_blue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 expire = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          expire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 stageId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          stageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchGroupList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.MatchGroupList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.MatchGroup red = 1;
  if (this->_internal_has_red()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::red(this),
        _Internal::red(this).GetCachedSize(), target, stream);
  }

  // .common.MatchGroup blue = 2;
  if (this->_internal_has_blue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::blue(this),
        _Internal::blue(this).GetCachedSize(), target, stream);
  }

  // uint32 expire = 3;
  if (this->_internal_expire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_expire(), target);
  }

  // uint32 stageId = 4;
  if (this->_internal_stageid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_stageid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.MatchGroupList)
  return target;
}

size_t MatchGroupList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.MatchGroupList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.MatchGroup red = 1;
  if (this->_internal_has_red()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *red_);
  }

  // .common.MatchGroup blue = 2;
  if (this->_internal_has_blue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blue_);
  }

  // uint32 expire = 3;
  if (this->_internal_expire() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_expire());
  }

  // uint32 stageId = 4;
  if (this->_internal_stageid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stageid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchGroupList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MatchGroupList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchGroupList::GetClassData() const { return &_class_data_; }

void MatchGroupList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MatchGroupList *>(to)->MergeFrom(
      static_cast<const MatchGroupList &>(from));
}


void MatchGroupList::MergeFrom(const MatchGroupList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.MatchGroupList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_red()) {
    _internal_mutable_red()->::common::MatchGroup::MergeFrom(from._internal_red());
  }
  if (from._internal_has_blue()) {
    _internal_mutable_blue()->::common::MatchGroup::MergeFrom(from._internal_blue());
  }
  if (from._internal_expire() != 0) {
    _internal_set_expire(from._internal_expire());
  }
  if (from._internal_stageid() != 0) {
    _internal_set_stageid(from._internal_stageid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchGroupList::CopyFrom(const MatchGroupList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.MatchGroupList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchGroupList::IsInitialized() const {
  return true;
}

void MatchGroupList::InternalSwap(MatchGroupList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchGroupList, stageid_)
      + sizeof(MatchGroupList::stageid_)
      - PROTOBUF_FIELD_OFFSET(MatchGroupList, red_)>(
          reinterpret_cast<char*>(&red_),
          reinterpret_cast<char*>(&other->red_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchGroupList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_matchcommon_2eproto_getter, &descriptor_table_matchcommon_2eproto_once,
      file_level_metadata_matchcommon_2eproto[3]);
}

// ===================================================================

class MatchGroup::_Internal {
 public:
};

MatchGroup::MatchGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  fighters_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.MatchGroup)
}
MatchGroup::MatchGroup(const MatchGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fighters_(from.fighters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:common.MatchGroup)
}

inline void MatchGroup::SharedCtor() {
}

MatchGroup::~MatchGroup() {
  // @@protoc_insertion_point(destructor:common.MatchGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatchGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MatchGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MatchGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:common.MatchGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fighters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .common.MatchFighter fighters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fighters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.MatchGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.MatchFighter fighters = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fighters_size()); i < n; i++) {
    const auto& repfield = this->_internal_fighters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.MatchGroup)
  return target;
}

size_t MatchGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.MatchGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.MatchFighter fighters = 1;
  total_size += 1UL * this->_internal_fighters_size();
  for (const auto& msg : this->fighters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MatchGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchGroup::GetClassData() const { return &_class_data_; }

void MatchGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MatchGroup *>(to)->MergeFrom(
      static_cast<const MatchGroup &>(from));
}


void MatchGroup::MergeFrom(const MatchGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.MatchGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  fighters_.MergeFrom(from.fighters_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchGroup::CopyFrom(const MatchGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.MatchGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchGroup::IsInitialized() const {
  return true;
}

void MatchGroup::InternalSwap(MatchGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  fighters_.InternalSwap(&other->fighters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_matchcommon_2eproto_getter, &descriptor_table_matchcommon_2eproto_once,
      file_level_metadata_matchcommon_2eproto[4]);
}

// ===================================================================

class MatchFighter::_Internal {
 public:
  static const ::common::RoleBrief& brief(const MatchFighter* msg);
  static const ::common::MatchFighterExtend& extd(const MatchFighter* msg);
};

const ::common::RoleBrief&
MatchFighter::_Internal::brief(const MatchFighter* msg) {
  return *msg->brief_;
}
const ::common::MatchFighterExtend&
MatchFighter::_Internal::extd(const MatchFighter* msg) {
  return *msg->extd_;
}
void MatchFighter::clear_brief() {
  if (GetArenaForAllocation() == nullptr && brief_ != nullptr) {
    delete brief_;
  }
  brief_ = nullptr;
}
MatchFighter::MatchFighter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.MatchFighter)
}
MatchFighter::MatchFighter(const MatchFighter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_brief()) {
    brief_ = new ::common::RoleBrief(*from.brief_);
  } else {
    brief_ = nullptr;
  }
  if (from._internal_has_extd()) {
    extd_ = new ::common::MatchFighterExtend(*from.extd_);
  } else {
    extd_ = nullptr;
  }
  isok_ = from.isok_;
  // @@protoc_insertion_point(copy_constructor:common.MatchFighter)
}

inline void MatchFighter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&brief_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&isok_) -
    reinterpret_cast<char*>(&brief_)) + sizeof(isok_));
}

MatchFighter::~MatchFighter() {
  // @@protoc_insertion_point(destructor:common.MatchFighter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatchFighter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete brief_;
  if (this != internal_default_instance()) delete extd_;
}

void MatchFighter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MatchFighter::Clear() {
// @@protoc_insertion_point(message_clear_start:common.MatchFighter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && brief_ != nullptr) {
    delete brief_;
  }
  brief_ = nullptr;
  if (GetArenaForAllocation() == nullptr && extd_ != nullptr) {
    delete extd_;
  }
  extd_ = nullptr;
  isok_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchFighter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.RoleBrief brief = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_brief(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.MatchFighterExtend extd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_extd(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isok = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          isok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchFighter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.MatchFighter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.RoleBrief brief = 1;
  if (this->_internal_has_brief()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::brief(this),
        _Internal::brief(this).GetCachedSize(), target, stream);
  }

  // .common.MatchFighterExtend extd = 2;
  if (this->_internal_has_extd()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::extd(this),
        _Internal::extd(this).GetCachedSize(), target, stream);
  }

  // bool isok = 3;
  if (this->_internal_isok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_isok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.MatchFighter)
  return target;
}

size_t MatchFighter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.MatchFighter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.RoleBrief brief = 1;
  if (this->_internal_has_brief()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *brief_);
  }

  // .common.MatchFighterExtend extd = 2;
  if (this->_internal_has_extd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extd_);
  }

  // bool isok = 3;
  if (this->_internal_isok() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchFighter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MatchFighter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchFighter::GetClassData() const { return &_class_data_; }

void MatchFighter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MatchFighter *>(to)->MergeFrom(
      static_cast<const MatchFighter &>(from));
}


void MatchFighter::MergeFrom(const MatchFighter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.MatchFighter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_brief()) {
    _internal_mutable_brief()->::common::RoleBrief::MergeFrom(from._internal_brief());
  }
  if (from._internal_has_extd()) {
    _internal_mutable_extd()->::common::MatchFighterExtend::MergeFrom(from._internal_extd());
  }
  if (from._internal_isok() != 0) {
    _internal_set_isok(from._internal_isok());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchFighter::CopyFrom(const MatchFighter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.MatchFighter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchFighter::IsInitialized() const {
  return true;
}

void MatchFighter::InternalSwap(MatchFighter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchFighter, isok_)
      + sizeof(MatchFighter::isok_)
      - PROTOBUF_FIELD_OFFSET(MatchFighter, brief_)>(
          reinterpret_cast<char*>(&brief_),
          reinterpret_cast<char*>(&other->brief_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchFighter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_matchcommon_2eproto_getter, &descriptor_table_matchcommon_2eproto_once,
      file_level_metadata_matchcommon_2eproto[5]);
}

// ===================================================================

class MatchFighterExtend::_Internal {
 public:
  static const ::common::ExtendFight3v3& fight3v3(const MatchFighterExtend* msg);
  static const ::common::ExtendFight5v5& fight5v5(const MatchFighterExtend* msg);
};

const ::common::ExtendFight3v3&
MatchFighterExtend::_Internal::fight3v3(const MatchFighterExtend* msg) {
  return *msg->fight3v3_;
}
const ::common::ExtendFight5v5&
MatchFighterExtend::_Internal::fight5v5(const MatchFighterExtend* msg) {
  return *msg->fight5v5_;
}
void MatchFighterExtend::clear_fight3v3() {
  if (GetArenaForAllocation() == nullptr && fight3v3_ != nullptr) {
    delete fight3v3_;
  }
  fight3v3_ = nullptr;
}
void MatchFighterExtend::clear_fight5v5() {
  if (GetArenaForAllocation() == nullptr && fight5v5_ != nullptr) {
    delete fight5v5_;
  }
  fight5v5_ = nullptr;
}
MatchFighterExtend::MatchFighterExtend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.MatchFighterExtend)
}
MatchFighterExtend::MatchFighterExtend(const MatchFighterExtend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fight3v3()) {
    fight3v3_ = new ::common::ExtendFight3v3(*from.fight3v3_);
  } else {
    fight3v3_ = nullptr;
  }
  if (from._internal_has_fight5v5()) {
    fight5v5_ = new ::common::ExtendFight5v5(*from.fight5v5_);
  } else {
    fight5v5_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:common.MatchFighterExtend)
}

inline void MatchFighterExtend::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fight3v3_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fight5v5_) -
    reinterpret_cast<char*>(&fight3v3_)) + sizeof(fight5v5_));
}

MatchFighterExtend::~MatchFighterExtend() {
  // @@protoc_insertion_point(destructor:common.MatchFighterExtend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatchFighterExtend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete fight3v3_;
  if (this != internal_default_instance()) delete fight5v5_;
}

void MatchFighterExtend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MatchFighterExtend::Clear() {
// @@protoc_insertion_point(message_clear_start:common.MatchFighterExtend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && fight3v3_ != nullptr) {
    delete fight3v3_;
  }
  fight3v3_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fight5v5_ != nullptr) {
    delete fight5v5_;
  }
  fight5v5_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchFighterExtend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.ExtendFight3v3 fight3v3 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fight3v3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.ExtendFight5v5 fight5v5 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fight5v5(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchFighterExtend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.MatchFighterExtend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.ExtendFight3v3 fight3v3 = 1;
  if (this->_internal_has_fight3v3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::fight3v3(this),
        _Internal::fight3v3(this).GetCachedSize(), target, stream);
  }

  // .common.ExtendFight5v5 fight5v5 = 2;
  if (this->_internal_has_fight5v5()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fight5v5(this),
        _Internal::fight5v5(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.MatchFighterExtend)
  return target;
}

size_t MatchFighterExtend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.MatchFighterExtend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.ExtendFight3v3 fight3v3 = 1;
  if (this->_internal_has_fight3v3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fight3v3_);
  }

  // .common.ExtendFight5v5 fight5v5 = 2;
  if (this->_internal_has_fight5v5()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fight5v5_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchFighterExtend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MatchFighterExtend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchFighterExtend::GetClassData() const { return &_class_data_; }

void MatchFighterExtend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MatchFighterExtend *>(to)->MergeFrom(
      static_cast<const MatchFighterExtend &>(from));
}


void MatchFighterExtend::MergeFrom(const MatchFighterExtend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.MatchFighterExtend)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fight3v3()) {
    _internal_mutable_fight3v3()->::common::ExtendFight3v3::MergeFrom(from._internal_fight3v3());
  }
  if (from._internal_has_fight5v5()) {
    _internal_mutable_fight5v5()->::common::ExtendFight5v5::MergeFrom(from._internal_fight5v5());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchFighterExtend::CopyFrom(const MatchFighterExtend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.MatchFighterExtend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchFighterExtend::IsInitialized() const {
  return true;
}

void MatchFighterExtend::InternalSwap(MatchFighterExtend* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchFighterExtend, fight5v5_)
      + sizeof(MatchFighterExtend::fight5v5_)
      - PROTOBUF_FIELD_OFFSET(MatchFighterExtend, fight3v3_)>(
          reinterpret_cast<char*>(&fight3v3_),
          reinterpret_cast<char*>(&other->fight3v3_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchFighterExtend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_matchcommon_2eproto_getter, &descriptor_table_matchcommon_2eproto_once,
      file_level_metadata_matchcommon_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::common::ModuleMatch*
Arena::CreateMaybeMessage< ::common::ModuleMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ModuleMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::common::MatchTypeData*
Arena::CreateMaybeMessage< ::common::MatchTypeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::MatchTypeData >(arena);
}
template<> PROTOBUF_NOINLINE ::common::MatchStatus*
Arena::CreateMaybeMessage< ::common::MatchStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::MatchStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::common::MatchGroupList*
Arena::CreateMaybeMessage< ::common::MatchGroupList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::MatchGroupList >(arena);
}
template<> PROTOBUF_NOINLINE ::common::MatchGroup*
Arena::CreateMaybeMessage< ::common::MatchGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::MatchGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::common::MatchFighter*
Arena::CreateMaybeMessage< ::common::MatchFighter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::MatchFighter >(arena);
}
template<> PROTOBUF_NOINLINE ::common::MatchFighterExtend*
Arena::CreateMaybeMessage< ::common::MatchFighterExtend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::MatchFighterExtend >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
