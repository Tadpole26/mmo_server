// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fight5v5common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fight5v5common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fight5v5common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fight5v5common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fight5v5common_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fight5v5common_2eproto;
namespace common {
class ExtendFight5v5;
struct ExtendFight5v5DefaultTypeInternal;
extern ExtendFight5v5DefaultTypeInternal _ExtendFight5v5_default_instance_;
class Fight5v5Data;
struct Fight5v5DataDefaultTypeInternal;
extern Fight5v5DataDefaultTypeInternal _Fight5v5Data_default_instance_;
class Fight5v5RoundGroup;
struct Fight5v5RoundGroupDefaultTypeInternal;
extern Fight5v5RoundGroupDefaultTypeInternal _Fight5v5RoundGroup_default_instance_;
class Fight5v5RoundList;
struct Fight5v5RoundListDefaultTypeInternal;
extern Fight5v5RoundListDefaultTypeInternal _Fight5v5RoundList_default_instance_;
class Fight5v5RoundRole;
struct Fight5v5RoundRoleDefaultTypeInternal;
extern Fight5v5RoundRoleDefaultTypeInternal _Fight5v5RoundRole_default_instance_;
class Fight5v5RoundState;
struct Fight5v5RoundStateDefaultTypeInternal;
extern Fight5v5RoundStateDefaultTypeInternal _Fight5v5RoundState_default_instance_;
class Fight5v5Season;
struct Fight5v5SeasonDefaultTypeInternal;
extern Fight5v5SeasonDefaultTypeInternal _Fight5v5Season_default_instance_;
class Fight5v5SeasonBase;
struct Fight5v5SeasonBaseDefaultTypeInternal;
extern Fight5v5SeasonBaseDefaultTypeInternal _Fight5v5SeasonBase_default_instance_;
class Fight5v5SeasonReward;
struct Fight5v5SeasonRewardDefaultTypeInternal;
extern Fight5v5SeasonRewardDefaultTypeInternal _Fight5v5SeasonReward_default_instance_;
class Fight5v5SeasonScore;
struct Fight5v5SeasonScoreDefaultTypeInternal;
extern Fight5v5SeasonScoreDefaultTypeInternal _Fight5v5SeasonScore_default_instance_;
class Fight5v5SeasonStat;
struct Fight5v5SeasonStatDefaultTypeInternal;
extern Fight5v5SeasonStatDefaultTypeInternal _Fight5v5SeasonStat_default_instance_;
class MatchFight5v5;
struct MatchFight5v5DefaultTypeInternal;
extern MatchFight5v5DefaultTypeInternal _MatchFight5v5_default_instance_;
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> ::common::ExtendFight5v5* Arena::CreateMaybeMessage<::common::ExtendFight5v5>(Arena*);
template<> ::common::Fight5v5Data* Arena::CreateMaybeMessage<::common::Fight5v5Data>(Arena*);
template<> ::common::Fight5v5RoundGroup* Arena::CreateMaybeMessage<::common::Fight5v5RoundGroup>(Arena*);
template<> ::common::Fight5v5RoundList* Arena::CreateMaybeMessage<::common::Fight5v5RoundList>(Arena*);
template<> ::common::Fight5v5RoundRole* Arena::CreateMaybeMessage<::common::Fight5v5RoundRole>(Arena*);
template<> ::common::Fight5v5RoundState* Arena::CreateMaybeMessage<::common::Fight5v5RoundState>(Arena*);
template<> ::common::Fight5v5Season* Arena::CreateMaybeMessage<::common::Fight5v5Season>(Arena*);
template<> ::common::Fight5v5SeasonBase* Arena::CreateMaybeMessage<::common::Fight5v5SeasonBase>(Arena*);
template<> ::common::Fight5v5SeasonReward* Arena::CreateMaybeMessage<::common::Fight5v5SeasonReward>(Arena*);
template<> ::common::Fight5v5SeasonScore* Arena::CreateMaybeMessage<::common::Fight5v5SeasonScore>(Arena*);
template<> ::common::Fight5v5SeasonStat* Arena::CreateMaybeMessage<::common::Fight5v5SeasonStat>(Arena*);
template<> ::common::MatchFight5v5* Arena::CreateMaybeMessage<::common::MatchFight5v5>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace common {

// ===================================================================

class MatchFight5v5 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.MatchFight5v5) */ {
 public:
  inline MatchFight5v5() : MatchFight5v5(nullptr) {}
  ~MatchFight5v5() override;
  explicit PROTOBUF_CONSTEXPR MatchFight5v5(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatchFight5v5(const MatchFight5v5& from);
  MatchFight5v5(MatchFight5v5&& from) noexcept
    : MatchFight5v5() {
    *this = ::std::move(from);
  }

  inline MatchFight5v5& operator=(const MatchFight5v5& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchFight5v5& operator=(MatchFight5v5&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MatchFight5v5& default_instance() {
    return *internal_default_instance();
  }
  static inline const MatchFight5v5* internal_default_instance() {
    return reinterpret_cast<const MatchFight5v5*>(
               &_MatchFight5v5_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MatchFight5v5& a, MatchFight5v5& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchFight5v5* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchFight5v5* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MatchFight5v5* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MatchFight5v5>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MatchFight5v5& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MatchFight5v5& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchFight5v5* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.MatchFight5v5";
  }
  protected:
  explicit MatchFight5v5(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeasonFieldNumber = 1,
  };
  // .common.Fight5v5Season season = 1;
  bool has_season() const;
  private:
  bool _internal_has_season() const;
  public:
  void clear_season();
  const ::common::Fight5v5Season& season() const;
  PROTOBUF_NODISCARD ::common::Fight5v5Season* release_season();
  ::common::Fight5v5Season* mutable_season();
  void set_allocated_season(::common::Fight5v5Season* season);
  private:
  const ::common::Fight5v5Season& _internal_season() const;
  ::common::Fight5v5Season* _internal_mutable_season();
  public:
  void unsafe_arena_set_allocated_season(
      ::common::Fight5v5Season* season);
  ::common::Fight5v5Season* unsafe_arena_release_season();

  // @@protoc_insertion_point(class_scope:common.MatchFight5v5)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::Fight5v5Season* season_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fight5v5common_2eproto;
};
// -------------------------------------------------------------------

class ExtendFight5v5 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ExtendFight5v5) */ {
 public:
  inline ExtendFight5v5() : ExtendFight5v5(nullptr) {}
  ~ExtendFight5v5() override;
  explicit PROTOBUF_CONSTEXPR ExtendFight5v5(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtendFight5v5(const ExtendFight5v5& from);
  ExtendFight5v5(ExtendFight5v5&& from) noexcept
    : ExtendFight5v5() {
    *this = ::std::move(from);
  }

  inline ExtendFight5v5& operator=(const ExtendFight5v5& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtendFight5v5& operator=(ExtendFight5v5&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtendFight5v5& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtendFight5v5* internal_default_instance() {
    return reinterpret_cast<const ExtendFight5v5*>(
               &_ExtendFight5v5_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ExtendFight5v5& a, ExtendFight5v5& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtendFight5v5* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtendFight5v5* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtendFight5v5* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtendFight5v5>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtendFight5v5& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExtendFight5v5& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtendFight5v5* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ExtendFight5v5";
  }
  protected:
  explicit ExtendFight5v5(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 2,
    kScoreFieldNumber = 1,
  };
  // .common.Fight5v5SeasonBase base = 2;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::common::Fight5v5SeasonBase& base() const;
  PROTOBUF_NODISCARD ::common::Fight5v5SeasonBase* release_base();
  ::common::Fight5v5SeasonBase* mutable_base();
  void set_allocated_base(::common::Fight5v5SeasonBase* base);
  private:
  const ::common::Fight5v5SeasonBase& _internal_base() const;
  ::common::Fight5v5SeasonBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::common::Fight5v5SeasonBase* base);
  ::common::Fight5v5SeasonBase* unsafe_arena_release_base();

  // uint32 score = 1;
  void clear_score();
  uint32_t score() const;
  void set_score(uint32_t value);
  private:
  uint32_t _internal_score() const;
  void _internal_set_score(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ExtendFight5v5)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::Fight5v5SeasonBase* base_;
  uint32_t score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fight5v5common_2eproto;
};
// -------------------------------------------------------------------

class Fight5v5Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.Fight5v5Data) */ {
 public:
  inline Fight5v5Data() : Fight5v5Data(nullptr) {}
  ~Fight5v5Data() override;
  explicit PROTOBUF_CONSTEXPR Fight5v5Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fight5v5Data(const Fight5v5Data& from);
  Fight5v5Data(Fight5v5Data&& from) noexcept
    : Fight5v5Data() {
    *this = ::std::move(from);
  }

  inline Fight5v5Data& operator=(const Fight5v5Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fight5v5Data& operator=(Fight5v5Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fight5v5Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fight5v5Data* internal_default_instance() {
    return reinterpret_cast<const Fight5v5Data*>(
               &_Fight5v5Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Fight5v5Data& a, Fight5v5Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Fight5v5Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fight5v5Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Fight5v5Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Fight5v5Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Fight5v5Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Fight5v5Data& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fight5v5Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.Fight5v5Data";
  }
  protected:
  explicit Fight5v5Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpireCancelFieldNumber = 1,
    kExpireQuitFieldNumber = 2,
  };
  // uint32 expireCancel = 1;
  void clear_expirecancel();
  uint32_t expirecancel() const;
  void set_expirecancel(uint32_t value);
  private:
  uint32_t _internal_expirecancel() const;
  void _internal_set_expirecancel(uint32_t value);
  public:

  // uint32 expireQuit = 2;
  void clear_expirequit();
  uint32_t expirequit() const;
  void set_expirequit(uint32_t value);
  private:
  uint32_t _internal_expirequit() const;
  void _internal_set_expirequit(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.Fight5v5Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t expirecancel_;
  uint32_t expirequit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fight5v5common_2eproto;
};
// -------------------------------------------------------------------

class Fight5v5Season final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.Fight5v5Season) */ {
 public:
  inline Fight5v5Season() : Fight5v5Season(nullptr) {}
  ~Fight5v5Season() override;
  explicit PROTOBUF_CONSTEXPR Fight5v5Season(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fight5v5Season(const Fight5v5Season& from);
  Fight5v5Season(Fight5v5Season&& from) noexcept
    : Fight5v5Season() {
    *this = ::std::move(from);
  }

  inline Fight5v5Season& operator=(const Fight5v5Season& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fight5v5Season& operator=(Fight5v5Season&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fight5v5Season& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fight5v5Season* internal_default_instance() {
    return reinterpret_cast<const Fight5v5Season*>(
               &_Fight5v5Season_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Fight5v5Season& a, Fight5v5Season& b) {
    a.Swap(&b);
  }
  inline void Swap(Fight5v5Season* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fight5v5Season* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Fight5v5Season* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Fight5v5Season>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Fight5v5Season& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Fight5v5Season& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fight5v5Season* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.Fight5v5Season";
  }
  protected:
  explicit Fight5v5Season(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 4,
    kRewardFieldNumber = 5,
    kSeasonIdFieldNumber = 1,
    kScoreFieldNumber = 2,
    kPointFieldNumber = 3,
    kDuanIdFieldNumber = 6,
  };
  // .common.Fight5v5SeasonBase base = 4;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::common::Fight5v5SeasonBase& base() const;
  PROTOBUF_NODISCARD ::common::Fight5v5SeasonBase* release_base();
  ::common::Fight5v5SeasonBase* mutable_base();
  void set_allocated_base(::common::Fight5v5SeasonBase* base);
  private:
  const ::common::Fight5v5SeasonBase& _internal_base() const;
  ::common::Fight5v5SeasonBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::common::Fight5v5SeasonBase* base);
  ::common::Fight5v5SeasonBase* unsafe_arena_release_base();

  // .common.Fight5v5SeasonReward reward = 5;
  bool has_reward() const;
  private:
  bool _internal_has_reward() const;
  public:
  void clear_reward();
  const ::common::Fight5v5SeasonReward& reward() const;
  PROTOBUF_NODISCARD ::common::Fight5v5SeasonReward* release_reward();
  ::common::Fight5v5SeasonReward* mutable_reward();
  void set_allocated_reward(::common::Fight5v5SeasonReward* reward);
  private:
  const ::common::Fight5v5SeasonReward& _internal_reward() const;
  ::common::Fight5v5SeasonReward* _internal_mutable_reward();
  public:
  void unsafe_arena_set_allocated_reward(
      ::common::Fight5v5SeasonReward* reward);
  ::common::Fight5v5SeasonReward* unsafe_arena_release_reward();

  // uint32 seasonId = 1;
  void clear_seasonid();
  uint32_t seasonid() const;
  void set_seasonid(uint32_t value);
  private:
  uint32_t _internal_seasonid() const;
  void _internal_set_seasonid(uint32_t value);
  public:

  // uint32 score = 2;
  void clear_score();
  uint32_t score() const;
  void set_score(uint32_t value);
  private:
  uint32_t _internal_score() const;
  void _internal_set_score(uint32_t value);
  public:

  // uint32 point = 3;
  void clear_point();
  uint32_t point() const;
  void set_point(uint32_t value);
  private:
  uint32_t _internal_point() const;
  void _internal_set_point(uint32_t value);
  public:

  // uint32 duanId = 6;
  void clear_duanid();
  uint32_t duanid() const;
  void set_duanid(uint32_t value);
  private:
  uint32_t _internal_duanid() const;
  void _internal_set_duanid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.Fight5v5Season)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::Fight5v5SeasonBase* base_;
  ::common::Fight5v5SeasonReward* reward_;
  uint32_t seasonid_;
  uint32_t score_;
  uint32_t point_;
  uint32_t duanid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fight5v5common_2eproto;
};
// -------------------------------------------------------------------

class Fight5v5SeasonScore final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.Fight5v5SeasonScore) */ {
 public:
  inline Fight5v5SeasonScore() : Fight5v5SeasonScore(nullptr) {}
  ~Fight5v5SeasonScore() override;
  explicit PROTOBUF_CONSTEXPR Fight5v5SeasonScore(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fight5v5SeasonScore(const Fight5v5SeasonScore& from);
  Fight5v5SeasonScore(Fight5v5SeasonScore&& from) noexcept
    : Fight5v5SeasonScore() {
    *this = ::std::move(from);
  }

  inline Fight5v5SeasonScore& operator=(const Fight5v5SeasonScore& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fight5v5SeasonScore& operator=(Fight5v5SeasonScore&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fight5v5SeasonScore& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fight5v5SeasonScore* internal_default_instance() {
    return reinterpret_cast<const Fight5v5SeasonScore*>(
               &_Fight5v5SeasonScore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Fight5v5SeasonScore& a, Fight5v5SeasonScore& b) {
    a.Swap(&b);
  }
  inline void Swap(Fight5v5SeasonScore* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fight5v5SeasonScore* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Fight5v5SeasonScore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Fight5v5SeasonScore>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Fight5v5SeasonScore& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Fight5v5SeasonScore& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fight5v5SeasonScore* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.Fight5v5SeasonScore";
  }
  protected:
  explicit Fight5v5SeasonScore(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoreFieldNumber = 1,
    kPointFieldNumber = 2,
    kDuanIdFieldNumber = 3,
  };
  // uint32 score = 1;
  void clear_score();
  uint32_t score() const;
  void set_score(uint32_t value);
  private:
  uint32_t _internal_score() const;
  void _internal_set_score(uint32_t value);
  public:

  // uint32 point = 2;
  void clear_point();
  uint32_t point() const;
  void set_point(uint32_t value);
  private:
  uint32_t _internal_point() const;
  void _internal_set_point(uint32_t value);
  public:

  // uint32 duanId = 3;
  void clear_duanid();
  uint32_t duanid() const;
  void set_duanid(uint32_t value);
  private:
  uint32_t _internal_duanid() const;
  void _internal_set_duanid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.Fight5v5SeasonScore)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t score_;
  uint32_t point_;
  uint32_t duanid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fight5v5common_2eproto;
};
// -------------------------------------------------------------------

class Fight5v5SeasonBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.Fight5v5SeasonBase) */ {
 public:
  inline Fight5v5SeasonBase() : Fight5v5SeasonBase(nullptr) {}
  ~Fight5v5SeasonBase() override;
  explicit PROTOBUF_CONSTEXPR Fight5v5SeasonBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fight5v5SeasonBase(const Fight5v5SeasonBase& from);
  Fight5v5SeasonBase(Fight5v5SeasonBase&& from) noexcept
    : Fight5v5SeasonBase() {
    *this = ::std::move(from);
  }

  inline Fight5v5SeasonBase& operator=(const Fight5v5SeasonBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fight5v5SeasonBase& operator=(Fight5v5SeasonBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fight5v5SeasonBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fight5v5SeasonBase* internal_default_instance() {
    return reinterpret_cast<const Fight5v5SeasonBase*>(
               &_Fight5v5SeasonBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Fight5v5SeasonBase& a, Fight5v5SeasonBase& b) {
    a.Swap(&b);
  }
  inline void Swap(Fight5v5SeasonBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fight5v5SeasonBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Fight5v5SeasonBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Fight5v5SeasonBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Fight5v5SeasonBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Fight5v5SeasonBase& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fight5v5SeasonBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.Fight5v5SeasonBase";
  }
  protected:
  explicit Fight5v5SeasonBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 1,
    kWinFieldNumber = 2,
    kLoseFieldNumber = 3,
    kCwinFieldNumber = 4,
    kCloseFieldNumber = 5,
  };
  // uint32 total = 1;
  void clear_total();
  uint32_t total() const;
  void set_total(uint32_t value);
  private:
  uint32_t _internal_total() const;
  void _internal_set_total(uint32_t value);
  public:

  // uint32 win = 2;
  void clear_win();
  uint32_t win() const;
  void set_win(uint32_t value);
  private:
  uint32_t _internal_win() const;
  void _internal_set_win(uint32_t value);
  public:

  // uint32 lose = 3;
  void clear_lose();
  uint32_t lose() const;
  void set_lose(uint32_t value);
  private:
  uint32_t _internal_lose() const;
  void _internal_set_lose(uint32_t value);
  public:

  // uint32 cwin = 4;
  void clear_cwin();
  uint32_t cwin() const;
  void set_cwin(uint32_t value);
  private:
  uint32_t _internal_cwin() const;
  void _internal_set_cwin(uint32_t value);
  public:

  // uint32 close = 5;
  void clear_close();
  uint32_t close() const;
  void set_close(uint32_t value);
  private:
  uint32_t _internal_close() const;
  void _internal_set_close(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.Fight5v5SeasonBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t total_;
  uint32_t win_;
  uint32_t lose_;
  uint32_t cwin_;
  uint32_t close_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fight5v5common_2eproto;
};
// -------------------------------------------------------------------

class Fight5v5SeasonReward final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.Fight5v5SeasonReward) */ {
 public:
  inline Fight5v5SeasonReward() : Fight5v5SeasonReward(nullptr) {}
  ~Fight5v5SeasonReward() override;
  explicit PROTOBUF_CONSTEXPR Fight5v5SeasonReward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fight5v5SeasonReward(const Fight5v5SeasonReward& from);
  Fight5v5SeasonReward(Fight5v5SeasonReward&& from) noexcept
    : Fight5v5SeasonReward() {
    *this = ::std::move(from);
  }

  inline Fight5v5SeasonReward& operator=(const Fight5v5SeasonReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fight5v5SeasonReward& operator=(Fight5v5SeasonReward&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fight5v5SeasonReward& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fight5v5SeasonReward* internal_default_instance() {
    return reinterpret_cast<const Fight5v5SeasonReward*>(
               &_Fight5v5SeasonReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Fight5v5SeasonReward& a, Fight5v5SeasonReward& b) {
    a.Swap(&b);
  }
  inline void Swap(Fight5v5SeasonReward* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fight5v5SeasonReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Fight5v5SeasonReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Fight5v5SeasonReward>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Fight5v5SeasonReward& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Fight5v5SeasonReward& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fight5v5SeasonReward* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.Fight5v5SeasonReward";
  }
  protected:
  explicit Fight5v5SeasonReward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDuanIdsFieldNumber = 1,
    kDuanIdMaxFieldNumber = 2,
  };
  // repeated uint32 duanIds = 1;
  int duanids_size() const;
  private:
  int _internal_duanids_size() const;
  public:
  void clear_duanids();
  private:
  uint32_t _internal_duanids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_duanids() const;
  void _internal_add_duanids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_duanids();
  public:
  uint32_t duanids(int index) const;
  void set_duanids(int index, uint32_t value);
  void add_duanids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      duanids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_duanids();

  // uint32 duanIdMax = 2;
  void clear_duanidmax();
  uint32_t duanidmax() const;
  void set_duanidmax(uint32_t value);
  private:
  uint32_t _internal_duanidmax() const;
  void _internal_set_duanidmax(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.Fight5v5SeasonReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > duanids_;
  mutable std::atomic<int> _duanids_cached_byte_size_;
  uint32_t duanidmax_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fight5v5common_2eproto;
};
// -------------------------------------------------------------------

class Fight5v5RoundRole final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.Fight5v5RoundRole) */ {
 public:
  inline Fight5v5RoundRole() : Fight5v5RoundRole(nullptr) {}
  ~Fight5v5RoundRole() override;
  explicit PROTOBUF_CONSTEXPR Fight5v5RoundRole(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fight5v5RoundRole(const Fight5v5RoundRole& from);
  Fight5v5RoundRole(Fight5v5RoundRole&& from) noexcept
    : Fight5v5RoundRole() {
    *this = ::std::move(from);
  }

  inline Fight5v5RoundRole& operator=(const Fight5v5RoundRole& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fight5v5RoundRole& operator=(Fight5v5RoundRole&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fight5v5RoundRole& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fight5v5RoundRole* internal_default_instance() {
    return reinterpret_cast<const Fight5v5RoundRole*>(
               &_Fight5v5RoundRole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Fight5v5RoundRole& a, Fight5v5RoundRole& b) {
    a.Swap(&b);
  }
  inline void Swap(Fight5v5RoundRole* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fight5v5RoundRole* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Fight5v5RoundRole* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Fight5v5RoundRole>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Fight5v5RoundRole& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Fight5v5RoundRole& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fight5v5RoundRole* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.Fight5v5RoundRole";
  }
  protected:
  explicit Fight5v5RoundRole(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickNameFieldNumber = 2,
    kRoleIdFieldNumber = 1,
    kLabelFieldNumber = 3,
    kAlineFieldNumber = 4,
    kKillFieldNumber = 5,
    kCtrlFieldNumber = 6,
    kHurtFieldNumber = 7,
    kHurtedFieldNumber = 8,
    kHealFieldNumber = 9,
  };
  // bytes nickName = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // uint64 roleId = 1;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // uint32 label = 3;
  void clear_label();
  uint32_t label() const;
  void set_label(uint32_t value);
  private:
  uint32_t _internal_label() const;
  void _internal_set_label(uint32_t value);
  public:

  // bool aline = 4;
  void clear_aline();
  bool aline() const;
  void set_aline(bool value);
  private:
  bool _internal_aline() const;
  void _internal_set_aline(bool value);
  public:

  // uint32 kill = 5;
  void clear_kill();
  uint32_t kill() const;
  void set_kill(uint32_t value);
  private:
  uint32_t _internal_kill() const;
  void _internal_set_kill(uint32_t value);
  public:

  // uint32 ctrl = 6;
  void clear_ctrl();
  uint32_t ctrl() const;
  void set_ctrl(uint32_t value);
  private:
  uint32_t _internal_ctrl() const;
  void _internal_set_ctrl(uint32_t value);
  public:

  // uint32 hurt = 7;
  void clear_hurt();
  uint32_t hurt() const;
  void set_hurt(uint32_t value);
  private:
  uint32_t _internal_hurt() const;
  void _internal_set_hurt(uint32_t value);
  public:

  // uint32 hurted = 8;
  void clear_hurted();
  uint32_t hurted() const;
  void set_hurted(uint32_t value);
  private:
  uint32_t _internal_hurted() const;
  void _internal_set_hurted(uint32_t value);
  public:

  // uint32 heal = 9;
  void clear_heal();
  uint32_t heal() const;
  void set_heal(uint32_t value);
  private:
  uint32_t _internal_heal() const;
  void _internal_set_heal(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.Fight5v5RoundRole)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  uint64_t roleid_;
  uint32_t label_;
  bool aline_;
  uint32_t kill_;
  uint32_t ctrl_;
  uint32_t hurt_;
  uint32_t hurted_;
  uint32_t heal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fight5v5common_2eproto;
};
// -------------------------------------------------------------------

class Fight5v5RoundGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.Fight5v5RoundGroup) */ {
 public:
  inline Fight5v5RoundGroup() : Fight5v5RoundGroup(nullptr) {}
  ~Fight5v5RoundGroup() override;
  explicit PROTOBUF_CONSTEXPR Fight5v5RoundGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fight5v5RoundGroup(const Fight5v5RoundGroup& from);
  Fight5v5RoundGroup(Fight5v5RoundGroup&& from) noexcept
    : Fight5v5RoundGroup() {
    *this = ::std::move(from);
  }

  inline Fight5v5RoundGroup& operator=(const Fight5v5RoundGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fight5v5RoundGroup& operator=(Fight5v5RoundGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fight5v5RoundGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fight5v5RoundGroup* internal_default_instance() {
    return reinterpret_cast<const Fight5v5RoundGroup*>(
               &_Fight5v5RoundGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Fight5v5RoundGroup& a, Fight5v5RoundGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(Fight5v5RoundGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fight5v5RoundGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Fight5v5RoundGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Fight5v5RoundGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Fight5v5RoundGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Fight5v5RoundGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fight5v5RoundGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.Fight5v5RoundGroup";
  }
  protected:
  explicit Fight5v5RoundGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 2,
    kGroupIdFieldNumber = 1,
  };
  // repeated .common.Fight5v5RoundRole roles = 2;
  int roles_size() const;
  private:
  int _internal_roles_size() const;
  public:
  void clear_roles();
  ::common::Fight5v5RoundRole* mutable_roles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::Fight5v5RoundRole >*
      mutable_roles();
  private:
  const ::common::Fight5v5RoundRole& _internal_roles(int index) const;
  ::common::Fight5v5RoundRole* _internal_add_roles();
  public:
  const ::common::Fight5v5RoundRole& roles(int index) const;
  ::common::Fight5v5RoundRole* add_roles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::Fight5v5RoundRole >&
      roles() const;

  // uint32 groupId = 1;
  void clear_groupid();
  uint32_t groupid() const;
  void set_groupid(uint32_t value);
  private:
  uint32_t _internal_groupid() const;
  void _internal_set_groupid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.Fight5v5RoundGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::Fight5v5RoundRole > roles_;
  uint32_t groupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fight5v5common_2eproto;
};
// -------------------------------------------------------------------

class Fight5v5RoundState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.Fight5v5RoundState) */ {
 public:
  inline Fight5v5RoundState() : Fight5v5RoundState(nullptr) {}
  ~Fight5v5RoundState() override;
  explicit PROTOBUF_CONSTEXPR Fight5v5RoundState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fight5v5RoundState(const Fight5v5RoundState& from);
  Fight5v5RoundState(Fight5v5RoundState&& from) noexcept
    : Fight5v5RoundState() {
    *this = ::std::move(from);
  }

  inline Fight5v5RoundState& operator=(const Fight5v5RoundState& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fight5v5RoundState& operator=(Fight5v5RoundState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fight5v5RoundState& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fight5v5RoundState* internal_default_instance() {
    return reinterpret_cast<const Fight5v5RoundState*>(
               &_Fight5v5RoundState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Fight5v5RoundState& a, Fight5v5RoundState& b) {
    a.Swap(&b);
  }
  inline void Swap(Fight5v5RoundState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fight5v5RoundState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Fight5v5RoundState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Fight5v5RoundState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Fight5v5RoundState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Fight5v5RoundState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fight5v5RoundState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.Fight5v5RoundState";
  }
  protected:
  explicit Fight5v5RoundState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedFieldNumber = 2,
    kBlueFieldNumber = 3,
    kRoundIdFieldNumber = 1,
    kWinIdFieldNumber = 4,
    kEndTimeFieldNumber = 5,
    kSeasonIdFieldNumber = 6,
  };
  // .common.Fight5v5RoundGroup red = 2;
  bool has_red() const;
  private:
  bool _internal_has_red() const;
  public:
  void clear_red();
  const ::common::Fight5v5RoundGroup& red() const;
  PROTOBUF_NODISCARD ::common::Fight5v5RoundGroup* release_red();
  ::common::Fight5v5RoundGroup* mutable_red();
  void set_allocated_red(::common::Fight5v5RoundGroup* red);
  private:
  const ::common::Fight5v5RoundGroup& _internal_red() const;
  ::common::Fight5v5RoundGroup* _internal_mutable_red();
  public:
  void unsafe_arena_set_allocated_red(
      ::common::Fight5v5RoundGroup* red);
  ::common::Fight5v5RoundGroup* unsafe_arena_release_red();

  // .common.Fight5v5RoundGroup blue = 3;
  bool has_blue() const;
  private:
  bool _internal_has_blue() const;
  public:
  void clear_blue();
  const ::common::Fight5v5RoundGroup& blue() const;
  PROTOBUF_NODISCARD ::common::Fight5v5RoundGroup* release_blue();
  ::common::Fight5v5RoundGroup* mutable_blue();
  void set_allocated_blue(::common::Fight5v5RoundGroup* blue);
  private:
  const ::common::Fight5v5RoundGroup& _internal_blue() const;
  ::common::Fight5v5RoundGroup* _internal_mutable_blue();
  public:
  void unsafe_arena_set_allocated_blue(
      ::common::Fight5v5RoundGroup* blue);
  ::common::Fight5v5RoundGroup* unsafe_arena_release_blue();

  // uint64 roundId = 1;
  void clear_roundid();
  uint64_t roundid() const;
  void set_roundid(uint64_t value);
  private:
  uint64_t _internal_roundid() const;
  void _internal_set_roundid(uint64_t value);
  public:

  // uint32 winId = 4;
  void clear_winid();
  uint32_t winid() const;
  void set_winid(uint32_t value);
  private:
  uint32_t _internal_winid() const;
  void _internal_set_winid(uint32_t value);
  public:

  // uint32 endTime = 5;
  void clear_endtime();
  uint32_t endtime() const;
  void set_endtime(uint32_t value);
  private:
  uint32_t _internal_endtime() const;
  void _internal_set_endtime(uint32_t value);
  public:

  // uint32 seasonId = 6;
  void clear_seasonid();
  uint32_t seasonid() const;
  void set_seasonid(uint32_t value);
  private:
  uint32_t _internal_seasonid() const;
  void _internal_set_seasonid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.Fight5v5RoundState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::Fight5v5RoundGroup* red_;
  ::common::Fight5v5RoundGroup* blue_;
  uint64_t roundid_;
  uint32_t winid_;
  uint32_t endtime_;
  uint32_t seasonid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fight5v5common_2eproto;
};
// -------------------------------------------------------------------

class Fight5v5SeasonStat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.Fight5v5SeasonStat) */ {
 public:
  inline Fight5v5SeasonStat() : Fight5v5SeasonStat(nullptr) {}
  ~Fight5v5SeasonStat() override;
  explicit PROTOBUF_CONSTEXPR Fight5v5SeasonStat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fight5v5SeasonStat(const Fight5v5SeasonStat& from);
  Fight5v5SeasonStat(Fight5v5SeasonStat&& from) noexcept
    : Fight5v5SeasonStat() {
    *this = ::std::move(from);
  }

  inline Fight5v5SeasonStat& operator=(const Fight5v5SeasonStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fight5v5SeasonStat& operator=(Fight5v5SeasonStat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fight5v5SeasonStat& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fight5v5SeasonStat* internal_default_instance() {
    return reinterpret_cast<const Fight5v5SeasonStat*>(
               &_Fight5v5SeasonStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Fight5v5SeasonStat& a, Fight5v5SeasonStat& b) {
    a.Swap(&b);
  }
  inline void Swap(Fight5v5SeasonStat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fight5v5SeasonStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Fight5v5SeasonStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Fight5v5SeasonStat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Fight5v5SeasonStat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Fight5v5SeasonStat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fight5v5SeasonStat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.Fight5v5SeasonStat";
  }
  protected:
  explicit Fight5v5SeasonStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJoinFieldNumber = 1,
    kHonorFieldNumber = 2,
    kWinFieldNumber = 3,
    kAlinveFieldNumber = 4,
    kKillFieldNumber = 5,
    kKillMaxFieldNumber = 6,
    kCtrlFieldNumber = 7,
    kCtrlMaxFieldNumber = 8,
    kHurtFieldNumber = 9,
    kHurtMaxFieldNumber = 10,
    kHurtedFieldNumber = 11,
    kHurtedMaxFieldNumber = 12,
    kHealFieldNumber = 13,
    kHealMaxFieldNumber = 14,
  };
  // uint32 join = 1;
  void clear_join();
  uint32_t join() const;
  void set_join(uint32_t value);
  private:
  uint32_t _internal_join() const;
  void _internal_set_join(uint32_t value);
  public:

  // uint32 honor = 2;
  void clear_honor();
  uint32_t honor() const;
  void set_honor(uint32_t value);
  private:
  uint32_t _internal_honor() const;
  void _internal_set_honor(uint32_t value);
  public:

  // uint32 win = 3;
  void clear_win();
  uint32_t win() const;
  void set_win(uint32_t value);
  private:
  uint32_t _internal_win() const;
  void _internal_set_win(uint32_t value);
  public:

  // uint32 alinve = 4;
  void clear_alinve();
  uint32_t alinve() const;
  void set_alinve(uint32_t value);
  private:
  uint32_t _internal_alinve() const;
  void _internal_set_alinve(uint32_t value);
  public:

  // uint32 kill = 5;
  void clear_kill();
  uint32_t kill() const;
  void set_kill(uint32_t value);
  private:
  uint32_t _internal_kill() const;
  void _internal_set_kill(uint32_t value);
  public:

  // uint32 killMax = 6;
  void clear_killmax();
  uint32_t killmax() const;
  void set_killmax(uint32_t value);
  private:
  uint32_t _internal_killmax() const;
  void _internal_set_killmax(uint32_t value);
  public:

  // uint32 ctrl = 7;
  void clear_ctrl();
  uint32_t ctrl() const;
  void set_ctrl(uint32_t value);
  private:
  uint32_t _internal_ctrl() const;
  void _internal_set_ctrl(uint32_t value);
  public:

  // uint32 ctrlMax = 8;
  void clear_ctrlmax();
  uint32_t ctrlmax() const;
  void set_ctrlmax(uint32_t value);
  private:
  uint32_t _internal_ctrlmax() const;
  void _internal_set_ctrlmax(uint32_t value);
  public:

  // uint32 hurt = 9;
  void clear_hurt();
  uint32_t hurt() const;
  void set_hurt(uint32_t value);
  private:
  uint32_t _internal_hurt() const;
  void _internal_set_hurt(uint32_t value);
  public:

  // uint32 hurtMax = 10;
  void clear_hurtmax();
  uint32_t hurtmax() const;
  void set_hurtmax(uint32_t value);
  private:
  uint32_t _internal_hurtmax() const;
  void _internal_set_hurtmax(uint32_t value);
  public:

  // uint32 hurted = 11;
  void clear_hurted();
  uint32_t hurted() const;
  void set_hurted(uint32_t value);
  private:
  uint32_t _internal_hurted() const;
  void _internal_set_hurted(uint32_t value);
  public:

  // uint32 hurtedMax = 12;
  void clear_hurtedmax();
  uint32_t hurtedmax() const;
  void set_hurtedmax(uint32_t value);
  private:
  uint32_t _internal_hurtedmax() const;
  void _internal_set_hurtedmax(uint32_t value);
  public:

  // uint32 heal = 13;
  void clear_heal();
  uint32_t heal() const;
  void set_heal(uint32_t value);
  private:
  uint32_t _internal_heal() const;
  void _internal_set_heal(uint32_t value);
  public:

  // uint32 healMax = 14;
  void clear_healmax();
  uint32_t healmax() const;
  void set_healmax(uint32_t value);
  private:
  uint32_t _internal_healmax() const;
  void _internal_set_healmax(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.Fight5v5SeasonStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t join_;
  uint32_t honor_;
  uint32_t win_;
  uint32_t alinve_;
  uint32_t kill_;
  uint32_t killmax_;
  uint32_t ctrl_;
  uint32_t ctrlmax_;
  uint32_t hurt_;
  uint32_t hurtmax_;
  uint32_t hurted_;
  uint32_t hurtedmax_;
  uint32_t heal_;
  uint32_t healmax_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fight5v5common_2eproto;
};
// -------------------------------------------------------------------

class Fight5v5RoundList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.Fight5v5RoundList) */ {
 public:
  inline Fight5v5RoundList() : Fight5v5RoundList(nullptr) {}
  ~Fight5v5RoundList() override;
  explicit PROTOBUF_CONSTEXPR Fight5v5RoundList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fight5v5RoundList(const Fight5v5RoundList& from);
  Fight5v5RoundList(Fight5v5RoundList&& from) noexcept
    : Fight5v5RoundList() {
    *this = ::std::move(from);
  }

  inline Fight5v5RoundList& operator=(const Fight5v5RoundList& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fight5v5RoundList& operator=(Fight5v5RoundList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fight5v5RoundList& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fight5v5RoundList* internal_default_instance() {
    return reinterpret_cast<const Fight5v5RoundList*>(
               &_Fight5v5RoundList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Fight5v5RoundList& a, Fight5v5RoundList& b) {
    a.Swap(&b);
  }
  inline void Swap(Fight5v5RoundList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fight5v5RoundList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Fight5v5RoundList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Fight5v5RoundList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Fight5v5RoundList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Fight5v5RoundList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fight5v5RoundList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.Fight5v5RoundList";
  }
  protected:
  explicit Fight5v5RoundList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoundidFieldNumber = 1,
  };
  // repeated uint64 roundid = 1;
  int roundid_size() const;
  private:
  int _internal_roundid_size() const;
  public:
  void clear_roundid();
  private:
  uint64_t _internal_roundid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_roundid() const;
  void _internal_add_roundid(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_roundid();
  public:
  uint64_t roundid(int index) const;
  void set_roundid(int index, uint64_t value);
  void add_roundid(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      roundid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_roundid();

  // @@protoc_insertion_point(class_scope:common.Fight5v5RoundList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > roundid_;
  mutable std::atomic<int> _roundid_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fight5v5common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MatchFight5v5

// .common.Fight5v5Season season = 1;
inline bool MatchFight5v5::_internal_has_season() const {
  return this != internal_default_instance() && season_ != nullptr;
}
inline bool MatchFight5v5::has_season() const {
  return _internal_has_season();
}
inline void MatchFight5v5::clear_season() {
  if (GetArenaForAllocation() == nullptr && season_ != nullptr) {
    delete season_;
  }
  season_ = nullptr;
}
inline const ::common::Fight5v5Season& MatchFight5v5::_internal_season() const {
  const ::common::Fight5v5Season* p = season_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Fight5v5Season&>(
      ::common::_Fight5v5Season_default_instance_);
}
inline const ::common::Fight5v5Season& MatchFight5v5::season() const {
  // @@protoc_insertion_point(field_get:common.MatchFight5v5.season)
  return _internal_season();
}
inline void MatchFight5v5::unsafe_arena_set_allocated_season(
    ::common::Fight5v5Season* season) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(season_);
  }
  season_ = season;
  if (season) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.MatchFight5v5.season)
}
inline ::common::Fight5v5Season* MatchFight5v5::release_season() {
  
  ::common::Fight5v5Season* temp = season_;
  season_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::Fight5v5Season* MatchFight5v5::unsafe_arena_release_season() {
  // @@protoc_insertion_point(field_release:common.MatchFight5v5.season)
  
  ::common::Fight5v5Season* temp = season_;
  season_ = nullptr;
  return temp;
}
inline ::common::Fight5v5Season* MatchFight5v5::_internal_mutable_season() {
  
  if (season_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Fight5v5Season>(GetArenaForAllocation());
    season_ = p;
  }
  return season_;
}
inline ::common::Fight5v5Season* MatchFight5v5::mutable_season() {
  ::common::Fight5v5Season* _msg = _internal_mutable_season();
  // @@protoc_insertion_point(field_mutable:common.MatchFight5v5.season)
  return _msg;
}
inline void MatchFight5v5::set_allocated_season(::common::Fight5v5Season* season) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete season_;
  }
  if (season) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(season);
    if (message_arena != submessage_arena) {
      season = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, season, submessage_arena);
    }
    
  } else {
    
  }
  season_ = season;
  // @@protoc_insertion_point(field_set_allocated:common.MatchFight5v5.season)
}

// -------------------------------------------------------------------

// ExtendFight5v5

// uint32 score = 1;
inline void ExtendFight5v5::clear_score() {
  score_ = 0u;
}
inline uint32_t ExtendFight5v5::_internal_score() const {
  return score_;
}
inline uint32_t ExtendFight5v5::score() const {
  // @@protoc_insertion_point(field_get:common.ExtendFight5v5.score)
  return _internal_score();
}
inline void ExtendFight5v5::_internal_set_score(uint32_t value) {
  
  score_ = value;
}
inline void ExtendFight5v5::set_score(uint32_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:common.ExtendFight5v5.score)
}

// .common.Fight5v5SeasonBase base = 2;
inline bool ExtendFight5v5::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool ExtendFight5v5::has_base() const {
  return _internal_has_base();
}
inline void ExtendFight5v5::clear_base() {
  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::common::Fight5v5SeasonBase& ExtendFight5v5::_internal_base() const {
  const ::common::Fight5v5SeasonBase* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Fight5v5SeasonBase&>(
      ::common::_Fight5v5SeasonBase_default_instance_);
}
inline const ::common::Fight5v5SeasonBase& ExtendFight5v5::base() const {
  // @@protoc_insertion_point(field_get:common.ExtendFight5v5.base)
  return _internal_base();
}
inline void ExtendFight5v5::unsafe_arena_set_allocated_base(
    ::common::Fight5v5SeasonBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ExtendFight5v5.base)
}
inline ::common::Fight5v5SeasonBase* ExtendFight5v5::release_base() {
  
  ::common::Fight5v5SeasonBase* temp = base_;
  base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::Fight5v5SeasonBase* ExtendFight5v5::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:common.ExtendFight5v5.base)
  
  ::common::Fight5v5SeasonBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::common::Fight5v5SeasonBase* ExtendFight5v5::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Fight5v5SeasonBase>(GetArenaForAllocation());
    base_ = p;
  }
  return base_;
}
inline ::common::Fight5v5SeasonBase* ExtendFight5v5::mutable_base() {
  ::common::Fight5v5SeasonBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:common.ExtendFight5v5.base)
  return _msg;
}
inline void ExtendFight5v5::set_allocated_base(::common::Fight5v5SeasonBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:common.ExtendFight5v5.base)
}

// -------------------------------------------------------------------

// Fight5v5Data

// uint32 expireCancel = 1;
inline void Fight5v5Data::clear_expirecancel() {
  expirecancel_ = 0u;
}
inline uint32_t Fight5v5Data::_internal_expirecancel() const {
  return expirecancel_;
}
inline uint32_t Fight5v5Data::expirecancel() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5Data.expireCancel)
  return _internal_expirecancel();
}
inline void Fight5v5Data::_internal_set_expirecancel(uint32_t value) {
  
  expirecancel_ = value;
}
inline void Fight5v5Data::set_expirecancel(uint32_t value) {
  _internal_set_expirecancel(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5Data.expireCancel)
}

// uint32 expireQuit = 2;
inline void Fight5v5Data::clear_expirequit() {
  expirequit_ = 0u;
}
inline uint32_t Fight5v5Data::_internal_expirequit() const {
  return expirequit_;
}
inline uint32_t Fight5v5Data::expirequit() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5Data.expireQuit)
  return _internal_expirequit();
}
inline void Fight5v5Data::_internal_set_expirequit(uint32_t value) {
  
  expirequit_ = value;
}
inline void Fight5v5Data::set_expirequit(uint32_t value) {
  _internal_set_expirequit(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5Data.expireQuit)
}

// -------------------------------------------------------------------

// Fight5v5Season

// uint32 seasonId = 1;
inline void Fight5v5Season::clear_seasonid() {
  seasonid_ = 0u;
}
inline uint32_t Fight5v5Season::_internal_seasonid() const {
  return seasonid_;
}
inline uint32_t Fight5v5Season::seasonid() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5Season.seasonId)
  return _internal_seasonid();
}
inline void Fight5v5Season::_internal_set_seasonid(uint32_t value) {
  
  seasonid_ = value;
}
inline void Fight5v5Season::set_seasonid(uint32_t value) {
  _internal_set_seasonid(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5Season.seasonId)
}

// uint32 score = 2;
inline void Fight5v5Season::clear_score() {
  score_ = 0u;
}
inline uint32_t Fight5v5Season::_internal_score() const {
  return score_;
}
inline uint32_t Fight5v5Season::score() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5Season.score)
  return _internal_score();
}
inline void Fight5v5Season::_internal_set_score(uint32_t value) {
  
  score_ = value;
}
inline void Fight5v5Season::set_score(uint32_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5Season.score)
}

// uint32 point = 3;
inline void Fight5v5Season::clear_point() {
  point_ = 0u;
}
inline uint32_t Fight5v5Season::_internal_point() const {
  return point_;
}
inline uint32_t Fight5v5Season::point() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5Season.point)
  return _internal_point();
}
inline void Fight5v5Season::_internal_set_point(uint32_t value) {
  
  point_ = value;
}
inline void Fight5v5Season::set_point(uint32_t value) {
  _internal_set_point(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5Season.point)
}

// .common.Fight5v5SeasonBase base = 4;
inline bool Fight5v5Season::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool Fight5v5Season::has_base() const {
  return _internal_has_base();
}
inline void Fight5v5Season::clear_base() {
  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::common::Fight5v5SeasonBase& Fight5v5Season::_internal_base() const {
  const ::common::Fight5v5SeasonBase* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Fight5v5SeasonBase&>(
      ::common::_Fight5v5SeasonBase_default_instance_);
}
inline const ::common::Fight5v5SeasonBase& Fight5v5Season::base() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5Season.base)
  return _internal_base();
}
inline void Fight5v5Season::unsafe_arena_set_allocated_base(
    ::common::Fight5v5SeasonBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.Fight5v5Season.base)
}
inline ::common::Fight5v5SeasonBase* Fight5v5Season::release_base() {
  
  ::common::Fight5v5SeasonBase* temp = base_;
  base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::Fight5v5SeasonBase* Fight5v5Season::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:common.Fight5v5Season.base)
  
  ::common::Fight5v5SeasonBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::common::Fight5v5SeasonBase* Fight5v5Season::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Fight5v5SeasonBase>(GetArenaForAllocation());
    base_ = p;
  }
  return base_;
}
inline ::common::Fight5v5SeasonBase* Fight5v5Season::mutable_base() {
  ::common::Fight5v5SeasonBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:common.Fight5v5Season.base)
  return _msg;
}
inline void Fight5v5Season::set_allocated_base(::common::Fight5v5SeasonBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:common.Fight5v5Season.base)
}

// .common.Fight5v5SeasonReward reward = 5;
inline bool Fight5v5Season::_internal_has_reward() const {
  return this != internal_default_instance() && reward_ != nullptr;
}
inline bool Fight5v5Season::has_reward() const {
  return _internal_has_reward();
}
inline void Fight5v5Season::clear_reward() {
  if (GetArenaForAllocation() == nullptr && reward_ != nullptr) {
    delete reward_;
  }
  reward_ = nullptr;
}
inline const ::common::Fight5v5SeasonReward& Fight5v5Season::_internal_reward() const {
  const ::common::Fight5v5SeasonReward* p = reward_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Fight5v5SeasonReward&>(
      ::common::_Fight5v5SeasonReward_default_instance_);
}
inline const ::common::Fight5v5SeasonReward& Fight5v5Season::reward() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5Season.reward)
  return _internal_reward();
}
inline void Fight5v5Season::unsafe_arena_set_allocated_reward(
    ::common::Fight5v5SeasonReward* reward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reward_);
  }
  reward_ = reward;
  if (reward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.Fight5v5Season.reward)
}
inline ::common::Fight5v5SeasonReward* Fight5v5Season::release_reward() {
  
  ::common::Fight5v5SeasonReward* temp = reward_;
  reward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::Fight5v5SeasonReward* Fight5v5Season::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_release:common.Fight5v5Season.reward)
  
  ::common::Fight5v5SeasonReward* temp = reward_;
  reward_ = nullptr;
  return temp;
}
inline ::common::Fight5v5SeasonReward* Fight5v5Season::_internal_mutable_reward() {
  
  if (reward_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Fight5v5SeasonReward>(GetArenaForAllocation());
    reward_ = p;
  }
  return reward_;
}
inline ::common::Fight5v5SeasonReward* Fight5v5Season::mutable_reward() {
  ::common::Fight5v5SeasonReward* _msg = _internal_mutable_reward();
  // @@protoc_insertion_point(field_mutable:common.Fight5v5Season.reward)
  return _msg;
}
inline void Fight5v5Season::set_allocated_reward(::common::Fight5v5SeasonReward* reward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reward_;
  }
  if (reward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reward);
    if (message_arena != submessage_arena) {
      reward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reward, submessage_arena);
    }
    
  } else {
    
  }
  reward_ = reward;
  // @@protoc_insertion_point(field_set_allocated:common.Fight5v5Season.reward)
}

// uint32 duanId = 6;
inline void Fight5v5Season::clear_duanid() {
  duanid_ = 0u;
}
inline uint32_t Fight5v5Season::_internal_duanid() const {
  return duanid_;
}
inline uint32_t Fight5v5Season::duanid() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5Season.duanId)
  return _internal_duanid();
}
inline void Fight5v5Season::_internal_set_duanid(uint32_t value) {
  
  duanid_ = value;
}
inline void Fight5v5Season::set_duanid(uint32_t value) {
  _internal_set_duanid(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5Season.duanId)
}

// -------------------------------------------------------------------

// Fight5v5SeasonScore

// uint32 score = 1;
inline void Fight5v5SeasonScore::clear_score() {
  score_ = 0u;
}
inline uint32_t Fight5v5SeasonScore::_internal_score() const {
  return score_;
}
inline uint32_t Fight5v5SeasonScore::score() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5SeasonScore.score)
  return _internal_score();
}
inline void Fight5v5SeasonScore::_internal_set_score(uint32_t value) {
  
  score_ = value;
}
inline void Fight5v5SeasonScore::set_score(uint32_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5SeasonScore.score)
}

// uint32 point = 2;
inline void Fight5v5SeasonScore::clear_point() {
  point_ = 0u;
}
inline uint32_t Fight5v5SeasonScore::_internal_point() const {
  return point_;
}
inline uint32_t Fight5v5SeasonScore::point() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5SeasonScore.point)
  return _internal_point();
}
inline void Fight5v5SeasonScore::_internal_set_point(uint32_t value) {
  
  point_ = value;
}
inline void Fight5v5SeasonScore::set_point(uint32_t value) {
  _internal_set_point(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5SeasonScore.point)
}

// uint32 duanId = 3;
inline void Fight5v5SeasonScore::clear_duanid() {
  duanid_ = 0u;
}
inline uint32_t Fight5v5SeasonScore::_internal_duanid() const {
  return duanid_;
}
inline uint32_t Fight5v5SeasonScore::duanid() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5SeasonScore.duanId)
  return _internal_duanid();
}
inline void Fight5v5SeasonScore::_internal_set_duanid(uint32_t value) {
  
  duanid_ = value;
}
inline void Fight5v5SeasonScore::set_duanid(uint32_t value) {
  _internal_set_duanid(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5SeasonScore.duanId)
}

// -------------------------------------------------------------------

// Fight5v5SeasonBase

// uint32 total = 1;
inline void Fight5v5SeasonBase::clear_total() {
  total_ = 0u;
}
inline uint32_t Fight5v5SeasonBase::_internal_total() const {
  return total_;
}
inline uint32_t Fight5v5SeasonBase::total() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5SeasonBase.total)
  return _internal_total();
}
inline void Fight5v5SeasonBase::_internal_set_total(uint32_t value) {
  
  total_ = value;
}
inline void Fight5v5SeasonBase::set_total(uint32_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5SeasonBase.total)
}

// uint32 win = 2;
inline void Fight5v5SeasonBase::clear_win() {
  win_ = 0u;
}
inline uint32_t Fight5v5SeasonBase::_internal_win() const {
  return win_;
}
inline uint32_t Fight5v5SeasonBase::win() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5SeasonBase.win)
  return _internal_win();
}
inline void Fight5v5SeasonBase::_internal_set_win(uint32_t value) {
  
  win_ = value;
}
inline void Fight5v5SeasonBase::set_win(uint32_t value) {
  _internal_set_win(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5SeasonBase.win)
}

// uint32 lose = 3;
inline void Fight5v5SeasonBase::clear_lose() {
  lose_ = 0u;
}
inline uint32_t Fight5v5SeasonBase::_internal_lose() const {
  return lose_;
}
inline uint32_t Fight5v5SeasonBase::lose() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5SeasonBase.lose)
  return _internal_lose();
}
inline void Fight5v5SeasonBase::_internal_set_lose(uint32_t value) {
  
  lose_ = value;
}
inline void Fight5v5SeasonBase::set_lose(uint32_t value) {
  _internal_set_lose(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5SeasonBase.lose)
}

// uint32 cwin = 4;
inline void Fight5v5SeasonBase::clear_cwin() {
  cwin_ = 0u;
}
inline uint32_t Fight5v5SeasonBase::_internal_cwin() const {
  return cwin_;
}
inline uint32_t Fight5v5SeasonBase::cwin() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5SeasonBase.cwin)
  return _internal_cwin();
}
inline void Fight5v5SeasonBase::_internal_set_cwin(uint32_t value) {
  
  cwin_ = value;
}
inline void Fight5v5SeasonBase::set_cwin(uint32_t value) {
  _internal_set_cwin(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5SeasonBase.cwin)
}

// uint32 close = 5;
inline void Fight5v5SeasonBase::clear_close() {
  close_ = 0u;
}
inline uint32_t Fight5v5SeasonBase::_internal_close() const {
  return close_;
}
inline uint32_t Fight5v5SeasonBase::close() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5SeasonBase.close)
  return _internal_close();
}
inline void Fight5v5SeasonBase::_internal_set_close(uint32_t value) {
  
  close_ = value;
}
inline void Fight5v5SeasonBase::set_close(uint32_t value) {
  _internal_set_close(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5SeasonBase.close)
}

// -------------------------------------------------------------------

// Fight5v5SeasonReward

// repeated uint32 duanIds = 1;
inline int Fight5v5SeasonReward::_internal_duanids_size() const {
  return duanids_.size();
}
inline int Fight5v5SeasonReward::duanids_size() const {
  return _internal_duanids_size();
}
inline void Fight5v5SeasonReward::clear_duanids() {
  duanids_.Clear();
}
inline uint32_t Fight5v5SeasonReward::_internal_duanids(int index) const {
  return duanids_.Get(index);
}
inline uint32_t Fight5v5SeasonReward::duanids(int index) const {
  // @@protoc_insertion_point(field_get:common.Fight5v5SeasonReward.duanIds)
  return _internal_duanids(index);
}
inline void Fight5v5SeasonReward::set_duanids(int index, uint32_t value) {
  duanids_.Set(index, value);
  // @@protoc_insertion_point(field_set:common.Fight5v5SeasonReward.duanIds)
}
inline void Fight5v5SeasonReward::_internal_add_duanids(uint32_t value) {
  duanids_.Add(value);
}
inline void Fight5v5SeasonReward::add_duanids(uint32_t value) {
  _internal_add_duanids(value);
  // @@protoc_insertion_point(field_add:common.Fight5v5SeasonReward.duanIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Fight5v5SeasonReward::_internal_duanids() const {
  return duanids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Fight5v5SeasonReward::duanids() const {
  // @@protoc_insertion_point(field_list:common.Fight5v5SeasonReward.duanIds)
  return _internal_duanids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Fight5v5SeasonReward::_internal_mutable_duanids() {
  return &duanids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Fight5v5SeasonReward::mutable_duanids() {
  // @@protoc_insertion_point(field_mutable_list:common.Fight5v5SeasonReward.duanIds)
  return _internal_mutable_duanids();
}

// uint32 duanIdMax = 2;
inline void Fight5v5SeasonReward::clear_duanidmax() {
  duanidmax_ = 0u;
}
inline uint32_t Fight5v5SeasonReward::_internal_duanidmax() const {
  return duanidmax_;
}
inline uint32_t Fight5v5SeasonReward::duanidmax() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5SeasonReward.duanIdMax)
  return _internal_duanidmax();
}
inline void Fight5v5SeasonReward::_internal_set_duanidmax(uint32_t value) {
  
  duanidmax_ = value;
}
inline void Fight5v5SeasonReward::set_duanidmax(uint32_t value) {
  _internal_set_duanidmax(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5SeasonReward.duanIdMax)
}

// -------------------------------------------------------------------

// Fight5v5RoundRole

// uint64 roleId = 1;
inline void Fight5v5RoundRole::clear_roleid() {
  roleid_ = uint64_t{0u};
}
inline uint64_t Fight5v5RoundRole::_internal_roleid() const {
  return roleid_;
}
inline uint64_t Fight5v5RoundRole::roleid() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5RoundRole.roleId)
  return _internal_roleid();
}
inline void Fight5v5RoundRole::_internal_set_roleid(uint64_t value) {
  
  roleid_ = value;
}
inline void Fight5v5RoundRole::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5RoundRole.roleId)
}

// bytes nickName = 2;
inline void Fight5v5RoundRole::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& Fight5v5RoundRole::nickname() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5RoundRole.nickName)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Fight5v5RoundRole::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.Fight5v5RoundRole.nickName)
}
inline std::string* Fight5v5RoundRole::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:common.Fight5v5RoundRole.nickName)
  return _s;
}
inline const std::string& Fight5v5RoundRole::_internal_nickname() const {
  return nickname_.Get();
}
inline void Fight5v5RoundRole::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* Fight5v5RoundRole::_internal_mutable_nickname() {
  
  return nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* Fight5v5RoundRole::release_nickname() {
  // @@protoc_insertion_point(field_release:common.Fight5v5RoundRole.nickName)
  return nickname_.Release();
}
inline void Fight5v5RoundRole::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nickname_.IsDefault()) {
    nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.Fight5v5RoundRole.nickName)
}

// uint32 label = 3;
inline void Fight5v5RoundRole::clear_label() {
  label_ = 0u;
}
inline uint32_t Fight5v5RoundRole::_internal_label() const {
  return label_;
}
inline uint32_t Fight5v5RoundRole::label() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5RoundRole.label)
  return _internal_label();
}
inline void Fight5v5RoundRole::_internal_set_label(uint32_t value) {
  
  label_ = value;
}
inline void Fight5v5RoundRole::set_label(uint32_t value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5RoundRole.label)
}

// bool aline = 4;
inline void Fight5v5RoundRole::clear_aline() {
  aline_ = false;
}
inline bool Fight5v5RoundRole::_internal_aline() const {
  return aline_;
}
inline bool Fight5v5RoundRole::aline() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5RoundRole.aline)
  return _internal_aline();
}
inline void Fight5v5RoundRole::_internal_set_aline(bool value) {
  
  aline_ = value;
}
inline void Fight5v5RoundRole::set_aline(bool value) {
  _internal_set_aline(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5RoundRole.aline)
}

// uint32 kill = 5;
inline void Fight5v5RoundRole::clear_kill() {
  kill_ = 0u;
}
inline uint32_t Fight5v5RoundRole::_internal_kill() const {
  return kill_;
}
inline uint32_t Fight5v5RoundRole::kill() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5RoundRole.kill)
  return _internal_kill();
}
inline void Fight5v5RoundRole::_internal_set_kill(uint32_t value) {
  
  kill_ = value;
}
inline void Fight5v5RoundRole::set_kill(uint32_t value) {
  _internal_set_kill(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5RoundRole.kill)
}

// uint32 ctrl = 6;
inline void Fight5v5RoundRole::clear_ctrl() {
  ctrl_ = 0u;
}
inline uint32_t Fight5v5RoundRole::_internal_ctrl() const {
  return ctrl_;
}
inline uint32_t Fight5v5RoundRole::ctrl() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5RoundRole.ctrl)
  return _internal_ctrl();
}
inline void Fight5v5RoundRole::_internal_set_ctrl(uint32_t value) {
  
  ctrl_ = value;
}
inline void Fight5v5RoundRole::set_ctrl(uint32_t value) {
  _internal_set_ctrl(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5RoundRole.ctrl)
}

// uint32 hurt = 7;
inline void Fight5v5RoundRole::clear_hurt() {
  hurt_ = 0u;
}
inline uint32_t Fight5v5RoundRole::_internal_hurt() const {
  return hurt_;
}
inline uint32_t Fight5v5RoundRole::hurt() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5RoundRole.hurt)
  return _internal_hurt();
}
inline void Fight5v5RoundRole::_internal_set_hurt(uint32_t value) {
  
  hurt_ = value;
}
inline void Fight5v5RoundRole::set_hurt(uint32_t value) {
  _internal_set_hurt(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5RoundRole.hurt)
}

// uint32 hurted = 8;
inline void Fight5v5RoundRole::clear_hurted() {
  hurted_ = 0u;
}
inline uint32_t Fight5v5RoundRole::_internal_hurted() const {
  return hurted_;
}
inline uint32_t Fight5v5RoundRole::hurted() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5RoundRole.hurted)
  return _internal_hurted();
}
inline void Fight5v5RoundRole::_internal_set_hurted(uint32_t value) {
  
  hurted_ = value;
}
inline void Fight5v5RoundRole::set_hurted(uint32_t value) {
  _internal_set_hurted(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5RoundRole.hurted)
}

// uint32 heal = 9;
inline void Fight5v5RoundRole::clear_heal() {
  heal_ = 0u;
}
inline uint32_t Fight5v5RoundRole::_internal_heal() const {
  return heal_;
}
inline uint32_t Fight5v5RoundRole::heal() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5RoundRole.heal)
  return _internal_heal();
}
inline void Fight5v5RoundRole::_internal_set_heal(uint32_t value) {
  
  heal_ = value;
}
inline void Fight5v5RoundRole::set_heal(uint32_t value) {
  _internal_set_heal(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5RoundRole.heal)
}

// -------------------------------------------------------------------

// Fight5v5RoundGroup

// uint32 groupId = 1;
inline void Fight5v5RoundGroup::clear_groupid() {
  groupid_ = 0u;
}
inline uint32_t Fight5v5RoundGroup::_internal_groupid() const {
  return groupid_;
}
inline uint32_t Fight5v5RoundGroup::groupid() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5RoundGroup.groupId)
  return _internal_groupid();
}
inline void Fight5v5RoundGroup::_internal_set_groupid(uint32_t value) {
  
  groupid_ = value;
}
inline void Fight5v5RoundGroup::set_groupid(uint32_t value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5RoundGroup.groupId)
}

// repeated .common.Fight5v5RoundRole roles = 2;
inline int Fight5v5RoundGroup::_internal_roles_size() const {
  return roles_.size();
}
inline int Fight5v5RoundGroup::roles_size() const {
  return _internal_roles_size();
}
inline void Fight5v5RoundGroup::clear_roles() {
  roles_.Clear();
}
inline ::common::Fight5v5RoundRole* Fight5v5RoundGroup::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:common.Fight5v5RoundGroup.roles)
  return roles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::Fight5v5RoundRole >*
Fight5v5RoundGroup::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:common.Fight5v5RoundGroup.roles)
  return &roles_;
}
inline const ::common::Fight5v5RoundRole& Fight5v5RoundGroup::_internal_roles(int index) const {
  return roles_.Get(index);
}
inline const ::common::Fight5v5RoundRole& Fight5v5RoundGroup::roles(int index) const {
  // @@protoc_insertion_point(field_get:common.Fight5v5RoundGroup.roles)
  return _internal_roles(index);
}
inline ::common::Fight5v5RoundRole* Fight5v5RoundGroup::_internal_add_roles() {
  return roles_.Add();
}
inline ::common::Fight5v5RoundRole* Fight5v5RoundGroup::add_roles() {
  ::common::Fight5v5RoundRole* _add = _internal_add_roles();
  // @@protoc_insertion_point(field_add:common.Fight5v5RoundGroup.roles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::Fight5v5RoundRole >&
Fight5v5RoundGroup::roles() const {
  // @@protoc_insertion_point(field_list:common.Fight5v5RoundGroup.roles)
  return roles_;
}

// -------------------------------------------------------------------

// Fight5v5RoundState

// uint64 roundId = 1;
inline void Fight5v5RoundState::clear_roundid() {
  roundid_ = uint64_t{0u};
}
inline uint64_t Fight5v5RoundState::_internal_roundid() const {
  return roundid_;
}
inline uint64_t Fight5v5RoundState::roundid() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5RoundState.roundId)
  return _internal_roundid();
}
inline void Fight5v5RoundState::_internal_set_roundid(uint64_t value) {
  
  roundid_ = value;
}
inline void Fight5v5RoundState::set_roundid(uint64_t value) {
  _internal_set_roundid(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5RoundState.roundId)
}

// .common.Fight5v5RoundGroup red = 2;
inline bool Fight5v5RoundState::_internal_has_red() const {
  return this != internal_default_instance() && red_ != nullptr;
}
inline bool Fight5v5RoundState::has_red() const {
  return _internal_has_red();
}
inline void Fight5v5RoundState::clear_red() {
  if (GetArenaForAllocation() == nullptr && red_ != nullptr) {
    delete red_;
  }
  red_ = nullptr;
}
inline const ::common::Fight5v5RoundGroup& Fight5v5RoundState::_internal_red() const {
  const ::common::Fight5v5RoundGroup* p = red_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Fight5v5RoundGroup&>(
      ::common::_Fight5v5RoundGroup_default_instance_);
}
inline const ::common::Fight5v5RoundGroup& Fight5v5RoundState::red() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5RoundState.red)
  return _internal_red();
}
inline void Fight5v5RoundState::unsafe_arena_set_allocated_red(
    ::common::Fight5v5RoundGroup* red) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(red_);
  }
  red_ = red;
  if (red) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.Fight5v5RoundState.red)
}
inline ::common::Fight5v5RoundGroup* Fight5v5RoundState::release_red() {
  
  ::common::Fight5v5RoundGroup* temp = red_;
  red_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::Fight5v5RoundGroup* Fight5v5RoundState::unsafe_arena_release_red() {
  // @@protoc_insertion_point(field_release:common.Fight5v5RoundState.red)
  
  ::common::Fight5v5RoundGroup* temp = red_;
  red_ = nullptr;
  return temp;
}
inline ::common::Fight5v5RoundGroup* Fight5v5RoundState::_internal_mutable_red() {
  
  if (red_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Fight5v5RoundGroup>(GetArenaForAllocation());
    red_ = p;
  }
  return red_;
}
inline ::common::Fight5v5RoundGroup* Fight5v5RoundState::mutable_red() {
  ::common::Fight5v5RoundGroup* _msg = _internal_mutable_red();
  // @@protoc_insertion_point(field_mutable:common.Fight5v5RoundState.red)
  return _msg;
}
inline void Fight5v5RoundState::set_allocated_red(::common::Fight5v5RoundGroup* red) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete red_;
  }
  if (red) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(red);
    if (message_arena != submessage_arena) {
      red = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, red, submessage_arena);
    }
    
  } else {
    
  }
  red_ = red;
  // @@protoc_insertion_point(field_set_allocated:common.Fight5v5RoundState.red)
}

// .common.Fight5v5RoundGroup blue = 3;
inline bool Fight5v5RoundState::_internal_has_blue() const {
  return this != internal_default_instance() && blue_ != nullptr;
}
inline bool Fight5v5RoundState::has_blue() const {
  return _internal_has_blue();
}
inline void Fight5v5RoundState::clear_blue() {
  if (GetArenaForAllocation() == nullptr && blue_ != nullptr) {
    delete blue_;
  }
  blue_ = nullptr;
}
inline const ::common::Fight5v5RoundGroup& Fight5v5RoundState::_internal_blue() const {
  const ::common::Fight5v5RoundGroup* p = blue_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Fight5v5RoundGroup&>(
      ::common::_Fight5v5RoundGroup_default_instance_);
}
inline const ::common::Fight5v5RoundGroup& Fight5v5RoundState::blue() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5RoundState.blue)
  return _internal_blue();
}
inline void Fight5v5RoundState::unsafe_arena_set_allocated_blue(
    ::common::Fight5v5RoundGroup* blue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blue_);
  }
  blue_ = blue;
  if (blue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.Fight5v5RoundState.blue)
}
inline ::common::Fight5v5RoundGroup* Fight5v5RoundState::release_blue() {
  
  ::common::Fight5v5RoundGroup* temp = blue_;
  blue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::Fight5v5RoundGroup* Fight5v5RoundState::unsafe_arena_release_blue() {
  // @@protoc_insertion_point(field_release:common.Fight5v5RoundState.blue)
  
  ::common::Fight5v5RoundGroup* temp = blue_;
  blue_ = nullptr;
  return temp;
}
inline ::common::Fight5v5RoundGroup* Fight5v5RoundState::_internal_mutable_blue() {
  
  if (blue_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Fight5v5RoundGroup>(GetArenaForAllocation());
    blue_ = p;
  }
  return blue_;
}
inline ::common::Fight5v5RoundGroup* Fight5v5RoundState::mutable_blue() {
  ::common::Fight5v5RoundGroup* _msg = _internal_mutable_blue();
  // @@protoc_insertion_point(field_mutable:common.Fight5v5RoundState.blue)
  return _msg;
}
inline void Fight5v5RoundState::set_allocated_blue(::common::Fight5v5RoundGroup* blue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete blue_;
  }
  if (blue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(blue);
    if (message_arena != submessage_arena) {
      blue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blue, submessage_arena);
    }
    
  } else {
    
  }
  blue_ = blue;
  // @@protoc_insertion_point(field_set_allocated:common.Fight5v5RoundState.blue)
}

// uint32 winId = 4;
inline void Fight5v5RoundState::clear_winid() {
  winid_ = 0u;
}
inline uint32_t Fight5v5RoundState::_internal_winid() const {
  return winid_;
}
inline uint32_t Fight5v5RoundState::winid() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5RoundState.winId)
  return _internal_winid();
}
inline void Fight5v5RoundState::_internal_set_winid(uint32_t value) {
  
  winid_ = value;
}
inline void Fight5v5RoundState::set_winid(uint32_t value) {
  _internal_set_winid(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5RoundState.winId)
}

// uint32 endTime = 5;
inline void Fight5v5RoundState::clear_endtime() {
  endtime_ = 0u;
}
inline uint32_t Fight5v5RoundState::_internal_endtime() const {
  return endtime_;
}
inline uint32_t Fight5v5RoundState::endtime() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5RoundState.endTime)
  return _internal_endtime();
}
inline void Fight5v5RoundState::_internal_set_endtime(uint32_t value) {
  
  endtime_ = value;
}
inline void Fight5v5RoundState::set_endtime(uint32_t value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5RoundState.endTime)
}

// uint32 seasonId = 6;
inline void Fight5v5RoundState::clear_seasonid() {
  seasonid_ = 0u;
}
inline uint32_t Fight5v5RoundState::_internal_seasonid() const {
  return seasonid_;
}
inline uint32_t Fight5v5RoundState::seasonid() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5RoundState.seasonId)
  return _internal_seasonid();
}
inline void Fight5v5RoundState::_internal_set_seasonid(uint32_t value) {
  
  seasonid_ = value;
}
inline void Fight5v5RoundState::set_seasonid(uint32_t value) {
  _internal_set_seasonid(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5RoundState.seasonId)
}

// -------------------------------------------------------------------

// Fight5v5SeasonStat

// uint32 join = 1;
inline void Fight5v5SeasonStat::clear_join() {
  join_ = 0u;
}
inline uint32_t Fight5v5SeasonStat::_internal_join() const {
  return join_;
}
inline uint32_t Fight5v5SeasonStat::join() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5SeasonStat.join)
  return _internal_join();
}
inline void Fight5v5SeasonStat::_internal_set_join(uint32_t value) {
  
  join_ = value;
}
inline void Fight5v5SeasonStat::set_join(uint32_t value) {
  _internal_set_join(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5SeasonStat.join)
}

// uint32 honor = 2;
inline void Fight5v5SeasonStat::clear_honor() {
  honor_ = 0u;
}
inline uint32_t Fight5v5SeasonStat::_internal_honor() const {
  return honor_;
}
inline uint32_t Fight5v5SeasonStat::honor() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5SeasonStat.honor)
  return _internal_honor();
}
inline void Fight5v5SeasonStat::_internal_set_honor(uint32_t value) {
  
  honor_ = value;
}
inline void Fight5v5SeasonStat::set_honor(uint32_t value) {
  _internal_set_honor(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5SeasonStat.honor)
}

// uint32 win = 3;
inline void Fight5v5SeasonStat::clear_win() {
  win_ = 0u;
}
inline uint32_t Fight5v5SeasonStat::_internal_win() const {
  return win_;
}
inline uint32_t Fight5v5SeasonStat::win() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5SeasonStat.win)
  return _internal_win();
}
inline void Fight5v5SeasonStat::_internal_set_win(uint32_t value) {
  
  win_ = value;
}
inline void Fight5v5SeasonStat::set_win(uint32_t value) {
  _internal_set_win(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5SeasonStat.win)
}

// uint32 alinve = 4;
inline void Fight5v5SeasonStat::clear_alinve() {
  alinve_ = 0u;
}
inline uint32_t Fight5v5SeasonStat::_internal_alinve() const {
  return alinve_;
}
inline uint32_t Fight5v5SeasonStat::alinve() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5SeasonStat.alinve)
  return _internal_alinve();
}
inline void Fight5v5SeasonStat::_internal_set_alinve(uint32_t value) {
  
  alinve_ = value;
}
inline void Fight5v5SeasonStat::set_alinve(uint32_t value) {
  _internal_set_alinve(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5SeasonStat.alinve)
}

// uint32 kill = 5;
inline void Fight5v5SeasonStat::clear_kill() {
  kill_ = 0u;
}
inline uint32_t Fight5v5SeasonStat::_internal_kill() const {
  return kill_;
}
inline uint32_t Fight5v5SeasonStat::kill() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5SeasonStat.kill)
  return _internal_kill();
}
inline void Fight5v5SeasonStat::_internal_set_kill(uint32_t value) {
  
  kill_ = value;
}
inline void Fight5v5SeasonStat::set_kill(uint32_t value) {
  _internal_set_kill(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5SeasonStat.kill)
}

// uint32 killMax = 6;
inline void Fight5v5SeasonStat::clear_killmax() {
  killmax_ = 0u;
}
inline uint32_t Fight5v5SeasonStat::_internal_killmax() const {
  return killmax_;
}
inline uint32_t Fight5v5SeasonStat::killmax() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5SeasonStat.killMax)
  return _internal_killmax();
}
inline void Fight5v5SeasonStat::_internal_set_killmax(uint32_t value) {
  
  killmax_ = value;
}
inline void Fight5v5SeasonStat::set_killmax(uint32_t value) {
  _internal_set_killmax(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5SeasonStat.killMax)
}

// uint32 ctrl = 7;
inline void Fight5v5SeasonStat::clear_ctrl() {
  ctrl_ = 0u;
}
inline uint32_t Fight5v5SeasonStat::_internal_ctrl() const {
  return ctrl_;
}
inline uint32_t Fight5v5SeasonStat::ctrl() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5SeasonStat.ctrl)
  return _internal_ctrl();
}
inline void Fight5v5SeasonStat::_internal_set_ctrl(uint32_t value) {
  
  ctrl_ = value;
}
inline void Fight5v5SeasonStat::set_ctrl(uint32_t value) {
  _internal_set_ctrl(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5SeasonStat.ctrl)
}

// uint32 ctrlMax = 8;
inline void Fight5v5SeasonStat::clear_ctrlmax() {
  ctrlmax_ = 0u;
}
inline uint32_t Fight5v5SeasonStat::_internal_ctrlmax() const {
  return ctrlmax_;
}
inline uint32_t Fight5v5SeasonStat::ctrlmax() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5SeasonStat.ctrlMax)
  return _internal_ctrlmax();
}
inline void Fight5v5SeasonStat::_internal_set_ctrlmax(uint32_t value) {
  
  ctrlmax_ = value;
}
inline void Fight5v5SeasonStat::set_ctrlmax(uint32_t value) {
  _internal_set_ctrlmax(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5SeasonStat.ctrlMax)
}

// uint32 hurt = 9;
inline void Fight5v5SeasonStat::clear_hurt() {
  hurt_ = 0u;
}
inline uint32_t Fight5v5SeasonStat::_internal_hurt() const {
  return hurt_;
}
inline uint32_t Fight5v5SeasonStat::hurt() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5SeasonStat.hurt)
  return _internal_hurt();
}
inline void Fight5v5SeasonStat::_internal_set_hurt(uint32_t value) {
  
  hurt_ = value;
}
inline void Fight5v5SeasonStat::set_hurt(uint32_t value) {
  _internal_set_hurt(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5SeasonStat.hurt)
}

// uint32 hurtMax = 10;
inline void Fight5v5SeasonStat::clear_hurtmax() {
  hurtmax_ = 0u;
}
inline uint32_t Fight5v5SeasonStat::_internal_hurtmax() const {
  return hurtmax_;
}
inline uint32_t Fight5v5SeasonStat::hurtmax() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5SeasonStat.hurtMax)
  return _internal_hurtmax();
}
inline void Fight5v5SeasonStat::_internal_set_hurtmax(uint32_t value) {
  
  hurtmax_ = value;
}
inline void Fight5v5SeasonStat::set_hurtmax(uint32_t value) {
  _internal_set_hurtmax(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5SeasonStat.hurtMax)
}

// uint32 hurted = 11;
inline void Fight5v5SeasonStat::clear_hurted() {
  hurted_ = 0u;
}
inline uint32_t Fight5v5SeasonStat::_internal_hurted() const {
  return hurted_;
}
inline uint32_t Fight5v5SeasonStat::hurted() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5SeasonStat.hurted)
  return _internal_hurted();
}
inline void Fight5v5SeasonStat::_internal_set_hurted(uint32_t value) {
  
  hurted_ = value;
}
inline void Fight5v5SeasonStat::set_hurted(uint32_t value) {
  _internal_set_hurted(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5SeasonStat.hurted)
}

// uint32 hurtedMax = 12;
inline void Fight5v5SeasonStat::clear_hurtedmax() {
  hurtedmax_ = 0u;
}
inline uint32_t Fight5v5SeasonStat::_internal_hurtedmax() const {
  return hurtedmax_;
}
inline uint32_t Fight5v5SeasonStat::hurtedmax() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5SeasonStat.hurtedMax)
  return _internal_hurtedmax();
}
inline void Fight5v5SeasonStat::_internal_set_hurtedmax(uint32_t value) {
  
  hurtedmax_ = value;
}
inline void Fight5v5SeasonStat::set_hurtedmax(uint32_t value) {
  _internal_set_hurtedmax(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5SeasonStat.hurtedMax)
}

// uint32 heal = 13;
inline void Fight5v5SeasonStat::clear_heal() {
  heal_ = 0u;
}
inline uint32_t Fight5v5SeasonStat::_internal_heal() const {
  return heal_;
}
inline uint32_t Fight5v5SeasonStat::heal() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5SeasonStat.heal)
  return _internal_heal();
}
inline void Fight5v5SeasonStat::_internal_set_heal(uint32_t value) {
  
  heal_ = value;
}
inline void Fight5v5SeasonStat::set_heal(uint32_t value) {
  _internal_set_heal(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5SeasonStat.heal)
}

// uint32 healMax = 14;
inline void Fight5v5SeasonStat::clear_healmax() {
  healmax_ = 0u;
}
inline uint32_t Fight5v5SeasonStat::_internal_healmax() const {
  return healmax_;
}
inline uint32_t Fight5v5SeasonStat::healmax() const {
  // @@protoc_insertion_point(field_get:common.Fight5v5SeasonStat.healMax)
  return _internal_healmax();
}
inline void Fight5v5SeasonStat::_internal_set_healmax(uint32_t value) {
  
  healmax_ = value;
}
inline void Fight5v5SeasonStat::set_healmax(uint32_t value) {
  _internal_set_healmax(value);
  // @@protoc_insertion_point(field_set:common.Fight5v5SeasonStat.healMax)
}

// -------------------------------------------------------------------

// Fight5v5RoundList

// repeated uint64 roundid = 1;
inline int Fight5v5RoundList::_internal_roundid_size() const {
  return roundid_.size();
}
inline int Fight5v5RoundList::roundid_size() const {
  return _internal_roundid_size();
}
inline void Fight5v5RoundList::clear_roundid() {
  roundid_.Clear();
}
inline uint64_t Fight5v5RoundList::_internal_roundid(int index) const {
  return roundid_.Get(index);
}
inline uint64_t Fight5v5RoundList::roundid(int index) const {
  // @@protoc_insertion_point(field_get:common.Fight5v5RoundList.roundid)
  return _internal_roundid(index);
}
inline void Fight5v5RoundList::set_roundid(int index, uint64_t value) {
  roundid_.Set(index, value);
  // @@protoc_insertion_point(field_set:common.Fight5v5RoundList.roundid)
}
inline void Fight5v5RoundList::_internal_add_roundid(uint64_t value) {
  roundid_.Add(value);
}
inline void Fight5v5RoundList::add_roundid(uint64_t value) {
  _internal_add_roundid(value);
  // @@protoc_insertion_point(field_add:common.Fight5v5RoundList.roundid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Fight5v5RoundList::_internal_roundid() const {
  return roundid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Fight5v5RoundList::roundid() const {
  // @@protoc_insertion_point(field_list:common.Fight5v5RoundList.roundid)
  return _internal_roundid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Fight5v5RoundList::_internal_mutable_roundid() {
  return &roundid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Fight5v5RoundList::mutable_roundid() {
  // @@protoc_insertion_point(field_mutable_list:common.Fight5v5RoundList.roundid)
  return _internal_mutable_roundid();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fight5v5common_2eproto
