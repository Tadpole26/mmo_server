// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: errorcode.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_errorcode_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_errorcode_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_errorcode_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_errorcode_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_errorcode_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace client {

enum enErrorCode : int {
  ECode_Success = 0,
  ECode_Login_RoleNameCollision = 1001,
  ECode_Login_NoRole = 1002,
  ECode_Login_RoleInGame = 1003,
  ECode_Login_CheckOften = 1004,
  ECode_Login_NoInGame = 1005,
  ECode_Login_NameTooLong = 1006,
  ECode_Login_NameNotRight = 1007,
  ECode_Login_DeviceNotSame = 1008,
  ECode_Login_ReloginTimeout = 1009,
  ECode_Login_Failure = 1010,
  ECode_Match_RoomRelease = 2001,
  ECode_Match_NotEnterRoom = 2002,
  ECode_Match_FullRoom = 2003,
  enErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  enErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool enErrorCode_IsValid(int value);
constexpr enErrorCode enErrorCode_MIN = ECode_Success;
constexpr enErrorCode enErrorCode_MAX = ECode_Match_FullRoom;
constexpr int enErrorCode_ARRAYSIZE = enErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enErrorCode_descriptor();
template<typename T>
inline const std::string& enErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, enErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function enErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    enErrorCode_descriptor(), enum_t_value);
}
inline bool enErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, enErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<enErrorCode>(
    enErrorCode_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace client

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::client::enErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::enErrorCode>() {
  return ::client::enErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_errorcode_2eproto
