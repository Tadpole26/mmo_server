// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fight5v5common.proto

#include "fight5v5common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace common {
PROTOBUF_CONSTEXPR MatchFight5v5::MatchFight5v5(
    ::_pbi::ConstantInitialized)
  : season_(nullptr){}
struct MatchFight5v5DefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchFight5v5DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchFight5v5DefaultTypeInternal() {}
  union {
    MatchFight5v5 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchFight5v5DefaultTypeInternal _MatchFight5v5_default_instance_;
PROTOBUF_CONSTEXPR ExtendFight5v5::ExtendFight5v5(
    ::_pbi::ConstantInitialized)
  : base_(nullptr)
  , score_(0u){}
struct ExtendFight5v5DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtendFight5v5DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtendFight5v5DefaultTypeInternal() {}
  union {
    ExtendFight5v5 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtendFight5v5DefaultTypeInternal _ExtendFight5v5_default_instance_;
PROTOBUF_CONSTEXPR Fight5v5Data::Fight5v5Data(
    ::_pbi::ConstantInitialized)
  : expirecancel_(0u)
  , expirequit_(0u){}
struct Fight5v5DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Fight5v5DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Fight5v5DataDefaultTypeInternal() {}
  union {
    Fight5v5Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Fight5v5DataDefaultTypeInternal _Fight5v5Data_default_instance_;
PROTOBUF_CONSTEXPR Fight5v5Season::Fight5v5Season(
    ::_pbi::ConstantInitialized)
  : base_(nullptr)
  , reward_(nullptr)
  , seasonid_(0u)
  , score_(0u)
  , point_(0u)
  , duanid_(0u){}
struct Fight5v5SeasonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Fight5v5SeasonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Fight5v5SeasonDefaultTypeInternal() {}
  union {
    Fight5v5Season _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Fight5v5SeasonDefaultTypeInternal _Fight5v5Season_default_instance_;
PROTOBUF_CONSTEXPR Fight5v5SeasonScore::Fight5v5SeasonScore(
    ::_pbi::ConstantInitialized)
  : score_(0u)
  , point_(0u)
  , duanid_(0u){}
struct Fight5v5SeasonScoreDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Fight5v5SeasonScoreDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Fight5v5SeasonScoreDefaultTypeInternal() {}
  union {
    Fight5v5SeasonScore _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Fight5v5SeasonScoreDefaultTypeInternal _Fight5v5SeasonScore_default_instance_;
PROTOBUF_CONSTEXPR Fight5v5SeasonBase::Fight5v5SeasonBase(
    ::_pbi::ConstantInitialized)
  : total_(0u)
  , win_(0u)
  , lose_(0u)
  , cwin_(0u)
  , close_(0u){}
struct Fight5v5SeasonBaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Fight5v5SeasonBaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Fight5v5SeasonBaseDefaultTypeInternal() {}
  union {
    Fight5v5SeasonBase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Fight5v5SeasonBaseDefaultTypeInternal _Fight5v5SeasonBase_default_instance_;
PROTOBUF_CONSTEXPR Fight5v5SeasonReward::Fight5v5SeasonReward(
    ::_pbi::ConstantInitialized)
  : duanids_()
  , _duanids_cached_byte_size_(0)
  , duanidmax_(0u){}
struct Fight5v5SeasonRewardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Fight5v5SeasonRewardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Fight5v5SeasonRewardDefaultTypeInternal() {}
  union {
    Fight5v5SeasonReward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Fight5v5SeasonRewardDefaultTypeInternal _Fight5v5SeasonReward_default_instance_;
PROTOBUF_CONSTEXPR Fight5v5RoundRole::Fight5v5RoundRole(
    ::_pbi::ConstantInitialized)
  : nickname_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , roleid_(uint64_t{0u})
  , label_(0u)
  , aline_(false)
  , kill_(0u)
  , ctrl_(0u)
  , hurt_(0u)
  , hurted_(0u)
  , heal_(0u){}
struct Fight5v5RoundRoleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Fight5v5RoundRoleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Fight5v5RoundRoleDefaultTypeInternal() {}
  union {
    Fight5v5RoundRole _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Fight5v5RoundRoleDefaultTypeInternal _Fight5v5RoundRole_default_instance_;
PROTOBUF_CONSTEXPR Fight5v5RoundGroup::Fight5v5RoundGroup(
    ::_pbi::ConstantInitialized)
  : roles_()
  , groupid_(0u){}
struct Fight5v5RoundGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Fight5v5RoundGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Fight5v5RoundGroupDefaultTypeInternal() {}
  union {
    Fight5v5RoundGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Fight5v5RoundGroupDefaultTypeInternal _Fight5v5RoundGroup_default_instance_;
PROTOBUF_CONSTEXPR Fight5v5RoundState::Fight5v5RoundState(
    ::_pbi::ConstantInitialized)
  : red_(nullptr)
  , blue_(nullptr)
  , roundid_(uint64_t{0u})
  , winid_(0u)
  , endtime_(0u)
  , seasonid_(0u){}
struct Fight5v5RoundStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Fight5v5RoundStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Fight5v5RoundStateDefaultTypeInternal() {}
  union {
    Fight5v5RoundState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Fight5v5RoundStateDefaultTypeInternal _Fight5v5RoundState_default_instance_;
PROTOBUF_CONSTEXPR Fight5v5SeasonStat::Fight5v5SeasonStat(
    ::_pbi::ConstantInitialized)
  : join_(0u)
  , honor_(0u)
  , win_(0u)
  , alinve_(0u)
  , kill_(0u)
  , killmax_(0u)
  , ctrl_(0u)
  , ctrlmax_(0u)
  , hurt_(0u)
  , hurtmax_(0u)
  , hurted_(0u)
  , hurtedmax_(0u)
  , heal_(0u)
  , healmax_(0u){}
struct Fight5v5SeasonStatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Fight5v5SeasonStatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Fight5v5SeasonStatDefaultTypeInternal() {}
  union {
    Fight5v5SeasonStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Fight5v5SeasonStatDefaultTypeInternal _Fight5v5SeasonStat_default_instance_;
PROTOBUF_CONSTEXPR Fight5v5RoundList::Fight5v5RoundList(
    ::_pbi::ConstantInitialized)
  : roundid_()
  , _roundid_cached_byte_size_(0){}
struct Fight5v5RoundListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Fight5v5RoundListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Fight5v5RoundListDefaultTypeInternal() {}
  union {
    Fight5v5RoundList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Fight5v5RoundListDefaultTypeInternal _Fight5v5RoundList_default_instance_;
}  // namespace common
static ::_pb::Metadata file_level_metadata_fight5v5common_2eproto[12];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_fight5v5common_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_fight5v5common_2eproto = nullptr;

const uint32_t TableStruct_fight5v5common_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::MatchFight5v5, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::MatchFight5v5, season_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ExtendFight5v5, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ExtendFight5v5, score_),
  PROTOBUF_FIELD_OFFSET(::common::ExtendFight5v5, base_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5Data, expirecancel_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5Data, expirequit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5Season, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5Season, seasonid_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5Season, score_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5Season, point_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5Season, base_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5Season, reward_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5Season, duanid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5SeasonScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5SeasonScore, score_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5SeasonScore, point_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5SeasonScore, duanid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5SeasonBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5SeasonBase, total_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5SeasonBase, win_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5SeasonBase, lose_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5SeasonBase, cwin_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5SeasonBase, close_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5SeasonReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5SeasonReward, duanids_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5SeasonReward, duanidmax_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5RoundRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5RoundRole, roleid_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5RoundRole, nickname_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5RoundRole, label_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5RoundRole, aline_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5RoundRole, kill_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5RoundRole, ctrl_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5RoundRole, hurt_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5RoundRole, hurted_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5RoundRole, heal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5RoundGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5RoundGroup, groupid_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5RoundGroup, roles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5RoundState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5RoundState, roundid_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5RoundState, red_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5RoundState, blue_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5RoundState, winid_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5RoundState, endtime_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5RoundState, seasonid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5SeasonStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5SeasonStat, join_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5SeasonStat, honor_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5SeasonStat, win_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5SeasonStat, alinve_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5SeasonStat, kill_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5SeasonStat, killmax_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5SeasonStat, ctrl_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5SeasonStat, ctrlmax_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5SeasonStat, hurt_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5SeasonStat, hurtmax_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5SeasonStat, hurted_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5SeasonStat, hurtedmax_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5SeasonStat, heal_),
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5SeasonStat, healmax_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5RoundList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::Fight5v5RoundList, roundid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::common::MatchFight5v5)},
  { 7, -1, -1, sizeof(::common::ExtendFight5v5)},
  { 15, -1, -1, sizeof(::common::Fight5v5Data)},
  { 23, -1, -1, sizeof(::common::Fight5v5Season)},
  { 35, -1, -1, sizeof(::common::Fight5v5SeasonScore)},
  { 44, -1, -1, sizeof(::common::Fight5v5SeasonBase)},
  { 55, -1, -1, sizeof(::common::Fight5v5SeasonReward)},
  { 63, -1, -1, sizeof(::common::Fight5v5RoundRole)},
  { 78, -1, -1, sizeof(::common::Fight5v5RoundGroup)},
  { 86, -1, -1, sizeof(::common::Fight5v5RoundState)},
  { 98, -1, -1, sizeof(::common::Fight5v5SeasonStat)},
  { 118, -1, -1, sizeof(::common::Fight5v5RoundList)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::common::_MatchFight5v5_default_instance_._instance,
  &::common::_ExtendFight5v5_default_instance_._instance,
  &::common::_Fight5v5Data_default_instance_._instance,
  &::common::_Fight5v5Season_default_instance_._instance,
  &::common::_Fight5v5SeasonScore_default_instance_._instance,
  &::common::_Fight5v5SeasonBase_default_instance_._instance,
  &::common::_Fight5v5SeasonReward_default_instance_._instance,
  &::common::_Fight5v5RoundRole_default_instance_._instance,
  &::common::_Fight5v5RoundGroup_default_instance_._instance,
  &::common::_Fight5v5RoundState_default_instance_._instance,
  &::common::_Fight5v5SeasonStat_default_instance_._instance,
  &::common::_Fight5v5RoundList_default_instance_._instance,
};

const char descriptor_table_protodef_fight5v5common_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024fight5v5common.proto\022\006common\"7\n\rMatchF"
  "ight5v5\022&\n\006season\030\001 \001(\0132\026.common.Fight5v"
  "5Season\"I\n\016ExtendFight5v5\022\r\n\005score\030\001 \001(\r"
  "\022(\n\004base\030\002 \001(\0132\032.common.Fight5v5SeasonBa"
  "se\"8\n\014Fight5v5Data\022\024\n\014expireCancel\030\001 \001(\r"
  "\022\022\n\nexpireQuit\030\002 \001(\r\"\250\001\n\016Fight5v5Season\022"
  "\020\n\010seasonId\030\001 \001(\r\022\r\n\005score\030\002 \001(\r\022\r\n\005poin"
  "t\030\003 \001(\r\022(\n\004base\030\004 \001(\0132\032.common.Fight5v5S"
  "easonBase\022,\n\006reward\030\005 \001(\0132\034.common.Fight"
  "5v5SeasonReward\022\016\n\006duanId\030\006 \001(\r\"C\n\023Fight"
  "5v5SeasonScore\022\r\n\005score\030\001 \001(\r\022\r\n\005point\030\002"
  " \001(\r\022\016\n\006duanId\030\003 \001(\r\"[\n\022Fight5v5SeasonBa"
  "se\022\r\n\005total\030\001 \001(\r\022\013\n\003win\030\002 \001(\r\022\014\n\004lose\030\003"
  " \001(\r\022\014\n\004cwin\030\004 \001(\r\022\r\n\005close\030\005 \001(\r\":\n\024Fig"
  "ht5v5SeasonReward\022\017\n\007duanIds\030\001 \003(\r\022\021\n\tdu"
  "anIdMax\030\002 \001(\r\"\233\001\n\021Fight5v5RoundRole\022\016\n\006r"
  "oleId\030\001 \001(\004\022\020\n\010nickName\030\002 \001(\014\022\r\n\005label\030\003"
  " \001(\r\022\r\n\005aline\030\004 \001(\010\022\014\n\004kill\030\005 \001(\r\022\014\n\004ctr"
  "l\030\006 \001(\r\022\014\n\004hurt\030\007 \001(\r\022\016\n\006hurted\030\010 \001(\r\022\014\n"
  "\004heal\030\t \001(\r\"O\n\022Fight5v5RoundGroup\022\017\n\007gro"
  "upId\030\001 \001(\r\022(\n\005roles\030\002 \003(\0132\031.common.Fight"
  "5v5RoundRole\"\252\001\n\022Fight5v5RoundState\022\017\n\007r"
  "oundId\030\001 \001(\004\022\'\n\003red\030\002 \001(\0132\032.common.Fight"
  "5v5RoundGroup\022(\n\004blue\030\003 \001(\0132\032.common.Fig"
  "ht5v5RoundGroup\022\r\n\005winId\030\004 \001(\r\022\017\n\007endTim"
  "e\030\005 \001(\r\022\020\n\010seasonId\030\006 \001(\r\"\355\001\n\022Fight5v5Se"
  "asonStat\022\014\n\004join\030\001 \001(\r\022\r\n\005honor\030\002 \001(\r\022\013\n"
  "\003win\030\003 \001(\r\022\016\n\006alinve\030\004 \001(\r\022\014\n\004kill\030\005 \001(\r"
  "\022\017\n\007killMax\030\006 \001(\r\022\014\n\004ctrl\030\007 \001(\r\022\017\n\007ctrlM"
  "ax\030\010 \001(\r\022\014\n\004hurt\030\t \001(\r\022\017\n\007hurtMax\030\n \001(\r\022"
  "\016\n\006hurted\030\013 \001(\r\022\021\n\thurtedMax\030\014 \001(\r\022\014\n\004he"
  "al\030\r \001(\r\022\017\n\007healMax\030\016 \001(\r\"$\n\021Fight5v5Rou"
  "ndList\022\017\n\007roundid\030\001 \003(\004b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_fight5v5common_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_fight5v5common_2eproto = {
    false, false, 1311, descriptor_table_protodef_fight5v5common_2eproto,
    "fight5v5common.proto",
    &descriptor_table_fight5v5common_2eproto_once, nullptr, 0, 12,
    schemas, file_default_instances, TableStruct_fight5v5common_2eproto::offsets,
    file_level_metadata_fight5v5common_2eproto, file_level_enum_descriptors_fight5v5common_2eproto,
    file_level_service_descriptors_fight5v5common_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_fight5v5common_2eproto_getter() {
  return &descriptor_table_fight5v5common_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_fight5v5common_2eproto(&descriptor_table_fight5v5common_2eproto);
namespace common {

// ===================================================================

class MatchFight5v5::_Internal {
 public:
  static const ::common::Fight5v5Season& season(const MatchFight5v5* msg);
};

const ::common::Fight5v5Season&
MatchFight5v5::_Internal::season(const MatchFight5v5* msg) {
  return *msg->season_;
}
MatchFight5v5::MatchFight5v5(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.MatchFight5v5)
}
MatchFight5v5::MatchFight5v5(const MatchFight5v5& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_season()) {
    season_ = new ::common::Fight5v5Season(*from.season_);
  } else {
    season_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:common.MatchFight5v5)
}

inline void MatchFight5v5::SharedCtor() {
season_ = nullptr;
}

MatchFight5v5::~MatchFight5v5() {
  // @@protoc_insertion_point(destructor:common.MatchFight5v5)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatchFight5v5::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete season_;
}

void MatchFight5v5::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MatchFight5v5::Clear() {
// @@protoc_insertion_point(message_clear_start:common.MatchFight5v5)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && season_ != nullptr) {
    delete season_;
  }
  season_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchFight5v5::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.Fight5v5Season season = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_season(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchFight5v5::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.MatchFight5v5)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Fight5v5Season season = 1;
  if (this->_internal_has_season()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::season(this),
        _Internal::season(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.MatchFight5v5)
  return target;
}

size_t MatchFight5v5::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.MatchFight5v5)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.Fight5v5Season season = 1;
  if (this->_internal_has_season()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *season_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchFight5v5::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MatchFight5v5::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchFight5v5::GetClassData() const { return &_class_data_; }

void MatchFight5v5::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MatchFight5v5 *>(to)->MergeFrom(
      static_cast<const MatchFight5v5 &>(from));
}


void MatchFight5v5::MergeFrom(const MatchFight5v5& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.MatchFight5v5)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_season()) {
    _internal_mutable_season()->::common::Fight5v5Season::MergeFrom(from._internal_season());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchFight5v5::CopyFrom(const MatchFight5v5& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.MatchFight5v5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchFight5v5::IsInitialized() const {
  return true;
}

void MatchFight5v5::InternalSwap(MatchFight5v5* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(season_, other->season_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchFight5v5::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fight5v5common_2eproto_getter, &descriptor_table_fight5v5common_2eproto_once,
      file_level_metadata_fight5v5common_2eproto[0]);
}

// ===================================================================

class ExtendFight5v5::_Internal {
 public:
  static const ::common::Fight5v5SeasonBase& base(const ExtendFight5v5* msg);
};

const ::common::Fight5v5SeasonBase&
ExtendFight5v5::_Internal::base(const ExtendFight5v5* msg) {
  return *msg->base_;
}
ExtendFight5v5::ExtendFight5v5(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ExtendFight5v5)
}
ExtendFight5v5::ExtendFight5v5(const ExtendFight5v5& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::common::Fight5v5SeasonBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:common.ExtendFight5v5)
}

inline void ExtendFight5v5::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&base_)) + sizeof(score_));
}

ExtendFight5v5::~ExtendFight5v5() {
  // @@protoc_insertion_point(destructor:common.ExtendFight5v5)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtendFight5v5::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete base_;
}

void ExtendFight5v5::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExtendFight5v5::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ExtendFight5v5)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  score_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtendFight5v5::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.Fight5v5SeasonBase base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtendFight5v5::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ExtendFight5v5)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 score = 1;
  if (this->_internal_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_score(), target);
  }

  // .common.Fight5v5SeasonBase base = 2;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ExtendFight5v5)
  return target;
}

size_t ExtendFight5v5::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ExtendFight5v5)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.Fight5v5SeasonBase base = 2;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // uint32 score = 1;
  if (this->_internal_score() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_score());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtendFight5v5::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExtendFight5v5::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtendFight5v5::GetClassData() const { return &_class_data_; }

void ExtendFight5v5::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExtendFight5v5 *>(to)->MergeFrom(
      static_cast<const ExtendFight5v5 &>(from));
}


void ExtendFight5v5::MergeFrom(const ExtendFight5v5& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ExtendFight5v5)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _internal_mutable_base()->::common::Fight5v5SeasonBase::MergeFrom(from._internal_base());
  }
  if (from._internal_score() != 0) {
    _internal_set_score(from._internal_score());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtendFight5v5::CopyFrom(const ExtendFight5v5& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ExtendFight5v5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtendFight5v5::IsInitialized() const {
  return true;
}

void ExtendFight5v5::InternalSwap(ExtendFight5v5* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtendFight5v5, score_)
      + sizeof(ExtendFight5v5::score_)
      - PROTOBUF_FIELD_OFFSET(ExtendFight5v5, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtendFight5v5::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fight5v5common_2eproto_getter, &descriptor_table_fight5v5common_2eproto_once,
      file_level_metadata_fight5v5common_2eproto[1]);
}

// ===================================================================

class Fight5v5Data::_Internal {
 public:
};

Fight5v5Data::Fight5v5Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.Fight5v5Data)
}
Fight5v5Data::Fight5v5Data(const Fight5v5Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&expirecancel_, &from.expirecancel_,
    static_cast<size_t>(reinterpret_cast<char*>(&expirequit_) -
    reinterpret_cast<char*>(&expirecancel_)) + sizeof(expirequit_));
  // @@protoc_insertion_point(copy_constructor:common.Fight5v5Data)
}

inline void Fight5v5Data::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&expirecancel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expirequit_) -
    reinterpret_cast<char*>(&expirecancel_)) + sizeof(expirequit_));
}

Fight5v5Data::~Fight5v5Data() {
  // @@protoc_insertion_point(destructor:common.Fight5v5Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Fight5v5Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Fight5v5Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Fight5v5Data::Clear() {
// @@protoc_insertion_point(message_clear_start:common.Fight5v5Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&expirecancel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expirequit_) -
      reinterpret_cast<char*>(&expirecancel_)) + sizeof(expirequit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fight5v5Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 expireCancel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          expirecancel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 expireQuit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          expirequit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Fight5v5Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Fight5v5Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 expireCancel = 1;
  if (this->_internal_expirecancel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_expirecancel(), target);
  }

  // uint32 expireQuit = 2;
  if (this->_internal_expirequit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_expirequit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.Fight5v5Data)
  return target;
}

size_t Fight5v5Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.Fight5v5Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 expireCancel = 1;
  if (this->_internal_expirecancel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_expirecancel());
  }

  // uint32 expireQuit = 2;
  if (this->_internal_expirequit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_expirequit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Fight5v5Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Fight5v5Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Fight5v5Data::GetClassData() const { return &_class_data_; }

void Fight5v5Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Fight5v5Data *>(to)->MergeFrom(
      static_cast<const Fight5v5Data &>(from));
}


void Fight5v5Data::MergeFrom(const Fight5v5Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.Fight5v5Data)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_expirecancel() != 0) {
    _internal_set_expirecancel(from._internal_expirecancel());
  }
  if (from._internal_expirequit() != 0) {
    _internal_set_expirequit(from._internal_expirequit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Fight5v5Data::CopyFrom(const Fight5v5Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.Fight5v5Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fight5v5Data::IsInitialized() const {
  return true;
}

void Fight5v5Data::InternalSwap(Fight5v5Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Fight5v5Data, expirequit_)
      + sizeof(Fight5v5Data::expirequit_)
      - PROTOBUF_FIELD_OFFSET(Fight5v5Data, expirecancel_)>(
          reinterpret_cast<char*>(&expirecancel_),
          reinterpret_cast<char*>(&other->expirecancel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Fight5v5Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fight5v5common_2eproto_getter, &descriptor_table_fight5v5common_2eproto_once,
      file_level_metadata_fight5v5common_2eproto[2]);
}

// ===================================================================

class Fight5v5Season::_Internal {
 public:
  static const ::common::Fight5v5SeasonBase& base(const Fight5v5Season* msg);
  static const ::common::Fight5v5SeasonReward& reward(const Fight5v5Season* msg);
};

const ::common::Fight5v5SeasonBase&
Fight5v5Season::_Internal::base(const Fight5v5Season* msg) {
  return *msg->base_;
}
const ::common::Fight5v5SeasonReward&
Fight5v5Season::_Internal::reward(const Fight5v5Season* msg) {
  return *msg->reward_;
}
Fight5v5Season::Fight5v5Season(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.Fight5v5Season)
}
Fight5v5Season::Fight5v5Season(const Fight5v5Season& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::common::Fight5v5SeasonBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_reward()) {
    reward_ = new ::common::Fight5v5SeasonReward(*from.reward_);
  } else {
    reward_ = nullptr;
  }
  ::memcpy(&seasonid_, &from.seasonid_,
    static_cast<size_t>(reinterpret_cast<char*>(&duanid_) -
    reinterpret_cast<char*>(&seasonid_)) + sizeof(duanid_));
  // @@protoc_insertion_point(copy_constructor:common.Fight5v5Season)
}

inline void Fight5v5Season::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duanid_) -
    reinterpret_cast<char*>(&base_)) + sizeof(duanid_));
}

Fight5v5Season::~Fight5v5Season() {
  // @@protoc_insertion_point(destructor:common.Fight5v5Season)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Fight5v5Season::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete reward_;
}

void Fight5v5Season::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Fight5v5Season::Clear() {
// @@protoc_insertion_point(message_clear_start:common.Fight5v5Season)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArenaForAllocation() == nullptr && reward_ != nullptr) {
    delete reward_;
  }
  reward_ = nullptr;
  ::memset(&seasonid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duanid_) -
      reinterpret_cast<char*>(&seasonid_)) + sizeof(duanid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fight5v5Season::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 seasonId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seasonid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.Fight5v5SeasonBase base = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.Fight5v5SeasonReward reward = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_reward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 duanId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          duanid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Fight5v5Season::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Fight5v5Season)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seasonId = 1;
  if (this->_internal_seasonid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_seasonid(), target);
  }

  // uint32 score = 2;
  if (this->_internal_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_score(), target);
  }

  // uint32 point = 3;
  if (this->_internal_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_point(), target);
  }

  // .common.Fight5v5SeasonBase base = 4;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // .common.Fight5v5SeasonReward reward = 5;
  if (this->_internal_has_reward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::reward(this),
        _Internal::reward(this).GetCachedSize(), target, stream);
  }

  // uint32 duanId = 6;
  if (this->_internal_duanid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_duanid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.Fight5v5Season)
  return target;
}

size_t Fight5v5Season::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.Fight5v5Season)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.Fight5v5SeasonBase base = 4;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .common.Fight5v5SeasonReward reward = 5;
  if (this->_internal_has_reward()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reward_);
  }

  // uint32 seasonId = 1;
  if (this->_internal_seasonid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_seasonid());
  }

  // uint32 score = 2;
  if (this->_internal_score() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_score());
  }

  // uint32 point = 3;
  if (this->_internal_point() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_point());
  }

  // uint32 duanId = 6;
  if (this->_internal_duanid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duanid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Fight5v5Season::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Fight5v5Season::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Fight5v5Season::GetClassData() const { return &_class_data_; }

void Fight5v5Season::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Fight5v5Season *>(to)->MergeFrom(
      static_cast<const Fight5v5Season &>(from));
}


void Fight5v5Season::MergeFrom(const Fight5v5Season& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.Fight5v5Season)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _internal_mutable_base()->::common::Fight5v5SeasonBase::MergeFrom(from._internal_base());
  }
  if (from._internal_has_reward()) {
    _internal_mutable_reward()->::common::Fight5v5SeasonReward::MergeFrom(from._internal_reward());
  }
  if (from._internal_seasonid() != 0) {
    _internal_set_seasonid(from._internal_seasonid());
  }
  if (from._internal_score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from._internal_point() != 0) {
    _internal_set_point(from._internal_point());
  }
  if (from._internal_duanid() != 0) {
    _internal_set_duanid(from._internal_duanid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Fight5v5Season::CopyFrom(const Fight5v5Season& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.Fight5v5Season)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fight5v5Season::IsInitialized() const {
  return true;
}

void Fight5v5Season::InternalSwap(Fight5v5Season* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Fight5v5Season, duanid_)
      + sizeof(Fight5v5Season::duanid_)
      - PROTOBUF_FIELD_OFFSET(Fight5v5Season, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Fight5v5Season::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fight5v5common_2eproto_getter, &descriptor_table_fight5v5common_2eproto_once,
      file_level_metadata_fight5v5common_2eproto[3]);
}

// ===================================================================

class Fight5v5SeasonScore::_Internal {
 public:
};

Fight5v5SeasonScore::Fight5v5SeasonScore(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.Fight5v5SeasonScore)
}
Fight5v5SeasonScore::Fight5v5SeasonScore(const Fight5v5SeasonScore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&duanid_) -
    reinterpret_cast<char*>(&score_)) + sizeof(duanid_));
  // @@protoc_insertion_point(copy_constructor:common.Fight5v5SeasonScore)
}

inline void Fight5v5SeasonScore::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&score_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duanid_) -
    reinterpret_cast<char*>(&score_)) + sizeof(duanid_));
}

Fight5v5SeasonScore::~Fight5v5SeasonScore() {
  // @@protoc_insertion_point(destructor:common.Fight5v5SeasonScore)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Fight5v5SeasonScore::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Fight5v5SeasonScore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Fight5v5SeasonScore::Clear() {
// @@protoc_insertion_point(message_clear_start:common.Fight5v5SeasonScore)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duanid_) -
      reinterpret_cast<char*>(&score_)) + sizeof(duanid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fight5v5SeasonScore::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 duanId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          duanid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Fight5v5SeasonScore::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Fight5v5SeasonScore)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 score = 1;
  if (this->_internal_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_score(), target);
  }

  // uint32 point = 2;
  if (this->_internal_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_point(), target);
  }

  // uint32 duanId = 3;
  if (this->_internal_duanid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_duanid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.Fight5v5SeasonScore)
  return target;
}

size_t Fight5v5SeasonScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.Fight5v5SeasonScore)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 score = 1;
  if (this->_internal_score() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_score());
  }

  // uint32 point = 2;
  if (this->_internal_point() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_point());
  }

  // uint32 duanId = 3;
  if (this->_internal_duanid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duanid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Fight5v5SeasonScore::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Fight5v5SeasonScore::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Fight5v5SeasonScore::GetClassData() const { return &_class_data_; }

void Fight5v5SeasonScore::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Fight5v5SeasonScore *>(to)->MergeFrom(
      static_cast<const Fight5v5SeasonScore &>(from));
}


void Fight5v5SeasonScore::MergeFrom(const Fight5v5SeasonScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.Fight5v5SeasonScore)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from._internal_point() != 0) {
    _internal_set_point(from._internal_point());
  }
  if (from._internal_duanid() != 0) {
    _internal_set_duanid(from._internal_duanid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Fight5v5SeasonScore::CopyFrom(const Fight5v5SeasonScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.Fight5v5SeasonScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fight5v5SeasonScore::IsInitialized() const {
  return true;
}

void Fight5v5SeasonScore::InternalSwap(Fight5v5SeasonScore* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Fight5v5SeasonScore, duanid_)
      + sizeof(Fight5v5SeasonScore::duanid_)
      - PROTOBUF_FIELD_OFFSET(Fight5v5SeasonScore, score_)>(
          reinterpret_cast<char*>(&score_),
          reinterpret_cast<char*>(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Fight5v5SeasonScore::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fight5v5common_2eproto_getter, &descriptor_table_fight5v5common_2eproto_once,
      file_level_metadata_fight5v5common_2eproto[4]);
}

// ===================================================================

class Fight5v5SeasonBase::_Internal {
 public:
};

Fight5v5SeasonBase::Fight5v5SeasonBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.Fight5v5SeasonBase)
}
Fight5v5SeasonBase::Fight5v5SeasonBase(const Fight5v5SeasonBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&close_) -
    reinterpret_cast<char*>(&total_)) + sizeof(close_));
  // @@protoc_insertion_point(copy_constructor:common.Fight5v5SeasonBase)
}

inline void Fight5v5SeasonBase::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&close_) -
    reinterpret_cast<char*>(&total_)) + sizeof(close_));
}

Fight5v5SeasonBase::~Fight5v5SeasonBase() {
  // @@protoc_insertion_point(destructor:common.Fight5v5SeasonBase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Fight5v5SeasonBase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Fight5v5SeasonBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Fight5v5SeasonBase::Clear() {
// @@protoc_insertion_point(message_clear_start:common.Fight5v5SeasonBase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&close_) -
      reinterpret_cast<char*>(&total_)) + sizeof(close_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fight5v5SeasonBase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 total = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 win = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          win_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 lose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          lose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cwin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          cwin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 close = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          close_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Fight5v5SeasonBase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Fight5v5SeasonBase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 total = 1;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_total(), target);
  }

  // uint32 win = 2;
  if (this->_internal_win() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_win(), target);
  }

  // uint32 lose = 3;
  if (this->_internal_lose() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_lose(), target);
  }

  // uint32 cwin = 4;
  if (this->_internal_cwin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_cwin(), target);
  }

  // uint32 close = 5;
  if (this->_internal_close() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_close(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.Fight5v5SeasonBase)
  return target;
}

size_t Fight5v5SeasonBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.Fight5v5SeasonBase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 total = 1;
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total());
  }

  // uint32 win = 2;
  if (this->_internal_win() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_win());
  }

  // uint32 lose = 3;
  if (this->_internal_lose() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lose());
  }

  // uint32 cwin = 4;
  if (this->_internal_cwin() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cwin());
  }

  // uint32 close = 5;
  if (this->_internal_close() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_close());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Fight5v5SeasonBase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Fight5v5SeasonBase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Fight5v5SeasonBase::GetClassData() const { return &_class_data_; }

void Fight5v5SeasonBase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Fight5v5SeasonBase *>(to)->MergeFrom(
      static_cast<const Fight5v5SeasonBase &>(from));
}


void Fight5v5SeasonBase::MergeFrom(const Fight5v5SeasonBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.Fight5v5SeasonBase)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_total() != 0) {
    _internal_set_total(from._internal_total());
  }
  if (from._internal_win() != 0) {
    _internal_set_win(from._internal_win());
  }
  if (from._internal_lose() != 0) {
    _internal_set_lose(from._internal_lose());
  }
  if (from._internal_cwin() != 0) {
    _internal_set_cwin(from._internal_cwin());
  }
  if (from._internal_close() != 0) {
    _internal_set_close(from._internal_close());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Fight5v5SeasonBase::CopyFrom(const Fight5v5SeasonBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.Fight5v5SeasonBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fight5v5SeasonBase::IsInitialized() const {
  return true;
}

void Fight5v5SeasonBase::InternalSwap(Fight5v5SeasonBase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Fight5v5SeasonBase, close_)
      + sizeof(Fight5v5SeasonBase::close_)
      - PROTOBUF_FIELD_OFFSET(Fight5v5SeasonBase, total_)>(
          reinterpret_cast<char*>(&total_),
          reinterpret_cast<char*>(&other->total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Fight5v5SeasonBase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fight5v5common_2eproto_getter, &descriptor_table_fight5v5common_2eproto_once,
      file_level_metadata_fight5v5common_2eproto[5]);
}

// ===================================================================

class Fight5v5SeasonReward::_Internal {
 public:
};

Fight5v5SeasonReward::Fight5v5SeasonReward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  duanids_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.Fight5v5SeasonReward)
}
Fight5v5SeasonReward::Fight5v5SeasonReward(const Fight5v5SeasonReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      duanids_(from.duanids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  duanidmax_ = from.duanidmax_;
  // @@protoc_insertion_point(copy_constructor:common.Fight5v5SeasonReward)
}

inline void Fight5v5SeasonReward::SharedCtor() {
duanidmax_ = 0u;
}

Fight5v5SeasonReward::~Fight5v5SeasonReward() {
  // @@protoc_insertion_point(destructor:common.Fight5v5SeasonReward)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Fight5v5SeasonReward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Fight5v5SeasonReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Fight5v5SeasonReward::Clear() {
// @@protoc_insertion_point(message_clear_start:common.Fight5v5SeasonReward)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  duanids_.Clear();
  duanidmax_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fight5v5SeasonReward::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 duanIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_duanids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_duanids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 duanIdMax = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          duanidmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Fight5v5SeasonReward::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Fight5v5SeasonReward)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 duanIds = 1;
  {
    int byte_size = _duanids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_duanids(), byte_size, target);
    }
  }

  // uint32 duanIdMax = 2;
  if (this->_internal_duanidmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duanidmax(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.Fight5v5SeasonReward)
  return target;
}

size_t Fight5v5SeasonReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.Fight5v5SeasonReward)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 duanIds = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->duanids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _duanids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 duanIdMax = 2;
  if (this->_internal_duanidmax() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duanidmax());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Fight5v5SeasonReward::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Fight5v5SeasonReward::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Fight5v5SeasonReward::GetClassData() const { return &_class_data_; }

void Fight5v5SeasonReward::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Fight5v5SeasonReward *>(to)->MergeFrom(
      static_cast<const Fight5v5SeasonReward &>(from));
}


void Fight5v5SeasonReward::MergeFrom(const Fight5v5SeasonReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.Fight5v5SeasonReward)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  duanids_.MergeFrom(from.duanids_);
  if (from._internal_duanidmax() != 0) {
    _internal_set_duanidmax(from._internal_duanidmax());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Fight5v5SeasonReward::CopyFrom(const Fight5v5SeasonReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.Fight5v5SeasonReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fight5v5SeasonReward::IsInitialized() const {
  return true;
}

void Fight5v5SeasonReward::InternalSwap(Fight5v5SeasonReward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  duanids_.InternalSwap(&other->duanids_);
  swap(duanidmax_, other->duanidmax_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Fight5v5SeasonReward::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fight5v5common_2eproto_getter, &descriptor_table_fight5v5common_2eproto_once,
      file_level_metadata_fight5v5common_2eproto[6]);
}

// ===================================================================

class Fight5v5RoundRole::_Internal {
 public:
};

Fight5v5RoundRole::Fight5v5RoundRole(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.Fight5v5RoundRole)
}
Fight5v5RoundRole::Fight5v5RoundRole(const Fight5v5RoundRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    nickname_.Set(from._internal_nickname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&heal_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(heal_));
  // @@protoc_insertion_point(copy_constructor:common.Fight5v5RoundRole)
}

inline void Fight5v5RoundRole::SharedCtor() {
nickname_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nickname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roleid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&heal_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(heal_));
}

Fight5v5RoundRole::~Fight5v5RoundRole() {
  // @@protoc_insertion_point(destructor:common.Fight5v5RoundRole)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Fight5v5RoundRole::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nickname_.Destroy();
}

void Fight5v5RoundRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Fight5v5RoundRole::Clear() {
// @@protoc_insertion_point(message_clear_start:common.Fight5v5RoundRole)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty();
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heal_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(heal_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fight5v5RoundRole::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 roleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes nickName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 label = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool aline = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          aline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 kill = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          kill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ctrl = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ctrl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hurt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          hurt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hurted = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          hurted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 heal = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          heal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Fight5v5RoundRole::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Fight5v5RoundRole)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roleId = 1;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // bytes nickName = 2;
  if (!this->_internal_nickname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // uint32 label = 3;
  if (this->_internal_label() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_label(), target);
  }

  // bool aline = 4;
  if (this->_internal_aline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_aline(), target);
  }

  // uint32 kill = 5;
  if (this->_internal_kill() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_kill(), target);
  }

  // uint32 ctrl = 6;
  if (this->_internal_ctrl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_ctrl(), target);
  }

  // uint32 hurt = 7;
  if (this->_internal_hurt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_hurt(), target);
  }

  // uint32 hurted = 8;
  if (this->_internal_hurted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_hurted(), target);
  }

  // uint32 heal = 9;
  if (this->_internal_heal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_heal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.Fight5v5RoundRole)
  return target;
}

size_t Fight5v5RoundRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.Fight5v5RoundRole)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes nickName = 2;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nickname());
  }

  // uint64 roleId = 1;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
  }

  // uint32 label = 3;
  if (this->_internal_label() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_label());
  }

  // bool aline = 4;
  if (this->_internal_aline() != 0) {
    total_size += 1 + 1;
  }

  // uint32 kill = 5;
  if (this->_internal_kill() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kill());
  }

  // uint32 ctrl = 6;
  if (this->_internal_ctrl() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ctrl());
  }

  // uint32 hurt = 7;
  if (this->_internal_hurt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hurt());
  }

  // uint32 hurted = 8;
  if (this->_internal_hurted() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hurted());
  }

  // uint32 heal = 9;
  if (this->_internal_heal() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_heal());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Fight5v5RoundRole::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Fight5v5RoundRole::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Fight5v5RoundRole::GetClassData() const { return &_class_data_; }

void Fight5v5RoundRole::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Fight5v5RoundRole *>(to)->MergeFrom(
      static_cast<const Fight5v5RoundRole &>(from));
}


void Fight5v5RoundRole::MergeFrom(const Fight5v5RoundRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.Fight5v5RoundRole)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from._internal_roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_label() != 0) {
    _internal_set_label(from._internal_label());
  }
  if (from._internal_aline() != 0) {
    _internal_set_aline(from._internal_aline());
  }
  if (from._internal_kill() != 0) {
    _internal_set_kill(from._internal_kill());
  }
  if (from._internal_ctrl() != 0) {
    _internal_set_ctrl(from._internal_ctrl());
  }
  if (from._internal_hurt() != 0) {
    _internal_set_hurt(from._internal_hurt());
  }
  if (from._internal_hurted() != 0) {
    _internal_set_hurted(from._internal_hurted());
  }
  if (from._internal_heal() != 0) {
    _internal_set_heal(from._internal_heal());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Fight5v5RoundRole::CopyFrom(const Fight5v5RoundRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.Fight5v5RoundRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fight5v5RoundRole::IsInitialized() const {
  return true;
}

void Fight5v5RoundRole::InternalSwap(Fight5v5RoundRole* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &nickname_, lhs_arena,
      &other->nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Fight5v5RoundRole, heal_)
      + sizeof(Fight5v5RoundRole::heal_)
      - PROTOBUF_FIELD_OFFSET(Fight5v5RoundRole, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Fight5v5RoundRole::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fight5v5common_2eproto_getter, &descriptor_table_fight5v5common_2eproto_once,
      file_level_metadata_fight5v5common_2eproto[7]);
}

// ===================================================================

class Fight5v5RoundGroup::_Internal {
 public:
};

Fight5v5RoundGroup::Fight5v5RoundGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  roles_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.Fight5v5RoundGroup)
}
Fight5v5RoundGroup::Fight5v5RoundGroup(const Fight5v5RoundGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roles_(from.roles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  groupid_ = from.groupid_;
  // @@protoc_insertion_point(copy_constructor:common.Fight5v5RoundGroup)
}

inline void Fight5v5RoundGroup::SharedCtor() {
groupid_ = 0u;
}

Fight5v5RoundGroup::~Fight5v5RoundGroup() {
  // @@protoc_insertion_point(destructor:common.Fight5v5RoundGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Fight5v5RoundGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Fight5v5RoundGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Fight5v5RoundGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:common.Fight5v5RoundGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  groupid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fight5v5RoundGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 groupId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .common.Fight5v5RoundRole roles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Fight5v5RoundGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Fight5v5RoundGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 groupId = 1;
  if (this->_internal_groupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_groupid(), target);
  }

  // repeated .common.Fight5v5RoundRole roles = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_roles_size()); i < n; i++) {
    const auto& repfield = this->_internal_roles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.Fight5v5RoundGroup)
  return target;
}

size_t Fight5v5RoundGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.Fight5v5RoundGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.Fight5v5RoundRole roles = 2;
  total_size += 1UL * this->_internal_roles_size();
  for (const auto& msg : this->roles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 groupId = 1;
  if (this->_internal_groupid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_groupid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Fight5v5RoundGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Fight5v5RoundGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Fight5v5RoundGroup::GetClassData() const { return &_class_data_; }

void Fight5v5RoundGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Fight5v5RoundGroup *>(to)->MergeFrom(
      static_cast<const Fight5v5RoundGroup &>(from));
}


void Fight5v5RoundGroup::MergeFrom(const Fight5v5RoundGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.Fight5v5RoundGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  if (from._internal_groupid() != 0) {
    _internal_set_groupid(from._internal_groupid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Fight5v5RoundGroup::CopyFrom(const Fight5v5RoundGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.Fight5v5RoundGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fight5v5RoundGroup::IsInitialized() const {
  return true;
}

void Fight5v5RoundGroup::InternalSwap(Fight5v5RoundGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  roles_.InternalSwap(&other->roles_);
  swap(groupid_, other->groupid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Fight5v5RoundGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fight5v5common_2eproto_getter, &descriptor_table_fight5v5common_2eproto_once,
      file_level_metadata_fight5v5common_2eproto[8]);
}

// ===================================================================

class Fight5v5RoundState::_Internal {
 public:
  static const ::common::Fight5v5RoundGroup& red(const Fight5v5RoundState* msg);
  static const ::common::Fight5v5RoundGroup& blue(const Fight5v5RoundState* msg);
};

const ::common::Fight5v5RoundGroup&
Fight5v5RoundState::_Internal::red(const Fight5v5RoundState* msg) {
  return *msg->red_;
}
const ::common::Fight5v5RoundGroup&
Fight5v5RoundState::_Internal::blue(const Fight5v5RoundState* msg) {
  return *msg->blue_;
}
Fight5v5RoundState::Fight5v5RoundState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.Fight5v5RoundState)
}
Fight5v5RoundState::Fight5v5RoundState(const Fight5v5RoundState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_red()) {
    red_ = new ::common::Fight5v5RoundGroup(*from.red_);
  } else {
    red_ = nullptr;
  }
  if (from._internal_has_blue()) {
    blue_ = new ::common::Fight5v5RoundGroup(*from.blue_);
  } else {
    blue_ = nullptr;
  }
  ::memcpy(&roundid_, &from.roundid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seasonid_) -
    reinterpret_cast<char*>(&roundid_)) + sizeof(seasonid_));
  // @@protoc_insertion_point(copy_constructor:common.Fight5v5RoundState)
}

inline void Fight5v5RoundState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&red_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seasonid_) -
    reinterpret_cast<char*>(&red_)) + sizeof(seasonid_));
}

Fight5v5RoundState::~Fight5v5RoundState() {
  // @@protoc_insertion_point(destructor:common.Fight5v5RoundState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Fight5v5RoundState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete red_;
  if (this != internal_default_instance()) delete blue_;
}

void Fight5v5RoundState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Fight5v5RoundState::Clear() {
// @@protoc_insertion_point(message_clear_start:common.Fight5v5RoundState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && red_ != nullptr) {
    delete red_;
  }
  red_ = nullptr;
  if (GetArenaForAllocation() == nullptr && blue_ != nullptr) {
    delete blue_;
  }
  blue_ = nullptr;
  ::memset(&roundid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seasonid_) -
      reinterpret_cast<char*>(&roundid_)) + sizeof(seasonid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fight5v5RoundState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 roundId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          roundid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.Fight5v5RoundGroup red = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_red(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.Fight5v5RoundGroup blue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_blue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 winId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          winid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 endTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 seasonId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          seasonid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Fight5v5RoundState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Fight5v5RoundState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roundId = 1;
  if (this->_internal_roundid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roundid(), target);
  }

  // .common.Fight5v5RoundGroup red = 2;
  if (this->_internal_has_red()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::red(this),
        _Internal::red(this).GetCachedSize(), target, stream);
  }

  // .common.Fight5v5RoundGroup blue = 3;
  if (this->_internal_has_blue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::blue(this),
        _Internal::blue(this).GetCachedSize(), target, stream);
  }

  // uint32 winId = 4;
  if (this->_internal_winid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_winid(), target);
  }

  // uint32 endTime = 5;
  if (this->_internal_endtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_endtime(), target);
  }

  // uint32 seasonId = 6;
  if (this->_internal_seasonid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_seasonid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.Fight5v5RoundState)
  return target;
}

size_t Fight5v5RoundState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.Fight5v5RoundState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.Fight5v5RoundGroup red = 2;
  if (this->_internal_has_red()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *red_);
  }

  // .common.Fight5v5RoundGroup blue = 3;
  if (this->_internal_has_blue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blue_);
  }

  // uint64 roundId = 1;
  if (this->_internal_roundid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roundid());
  }

  // uint32 winId = 4;
  if (this->_internal_winid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_winid());
  }

  // uint32 endTime = 5;
  if (this->_internal_endtime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_endtime());
  }

  // uint32 seasonId = 6;
  if (this->_internal_seasonid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_seasonid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Fight5v5RoundState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Fight5v5RoundState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Fight5v5RoundState::GetClassData() const { return &_class_data_; }

void Fight5v5RoundState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Fight5v5RoundState *>(to)->MergeFrom(
      static_cast<const Fight5v5RoundState &>(from));
}


void Fight5v5RoundState::MergeFrom(const Fight5v5RoundState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.Fight5v5RoundState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_red()) {
    _internal_mutable_red()->::common::Fight5v5RoundGroup::MergeFrom(from._internal_red());
  }
  if (from._internal_has_blue()) {
    _internal_mutable_blue()->::common::Fight5v5RoundGroup::MergeFrom(from._internal_blue());
  }
  if (from._internal_roundid() != 0) {
    _internal_set_roundid(from._internal_roundid());
  }
  if (from._internal_winid() != 0) {
    _internal_set_winid(from._internal_winid());
  }
  if (from._internal_endtime() != 0) {
    _internal_set_endtime(from._internal_endtime());
  }
  if (from._internal_seasonid() != 0) {
    _internal_set_seasonid(from._internal_seasonid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Fight5v5RoundState::CopyFrom(const Fight5v5RoundState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.Fight5v5RoundState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fight5v5RoundState::IsInitialized() const {
  return true;
}

void Fight5v5RoundState::InternalSwap(Fight5v5RoundState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Fight5v5RoundState, seasonid_)
      + sizeof(Fight5v5RoundState::seasonid_)
      - PROTOBUF_FIELD_OFFSET(Fight5v5RoundState, red_)>(
          reinterpret_cast<char*>(&red_),
          reinterpret_cast<char*>(&other->red_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Fight5v5RoundState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fight5v5common_2eproto_getter, &descriptor_table_fight5v5common_2eproto_once,
      file_level_metadata_fight5v5common_2eproto[9]);
}

// ===================================================================

class Fight5v5SeasonStat::_Internal {
 public:
};

Fight5v5SeasonStat::Fight5v5SeasonStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.Fight5v5SeasonStat)
}
Fight5v5SeasonStat::Fight5v5SeasonStat(const Fight5v5SeasonStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&join_, &from.join_,
    static_cast<size_t>(reinterpret_cast<char*>(&healmax_) -
    reinterpret_cast<char*>(&join_)) + sizeof(healmax_));
  // @@protoc_insertion_point(copy_constructor:common.Fight5v5SeasonStat)
}

inline void Fight5v5SeasonStat::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&join_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&healmax_) -
    reinterpret_cast<char*>(&join_)) + sizeof(healmax_));
}

Fight5v5SeasonStat::~Fight5v5SeasonStat() {
  // @@protoc_insertion_point(destructor:common.Fight5v5SeasonStat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Fight5v5SeasonStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Fight5v5SeasonStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Fight5v5SeasonStat::Clear() {
// @@protoc_insertion_point(message_clear_start:common.Fight5v5SeasonStat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&join_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&healmax_) -
      reinterpret_cast<char*>(&join_)) + sizeof(healmax_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fight5v5SeasonStat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 join = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          join_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 honor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          honor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 win = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          win_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 alinve = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          alinve_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 kill = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          kill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 killMax = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          killmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ctrl = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ctrl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ctrlMax = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ctrlmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hurt = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          hurt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hurtMax = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          hurtmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hurted = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          hurted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hurtedMax = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          hurtedmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 heal = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          heal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 healMax = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          healmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Fight5v5SeasonStat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Fight5v5SeasonStat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 join = 1;
  if (this->_internal_join() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_join(), target);
  }

  // uint32 honor = 2;
  if (this->_internal_honor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_honor(), target);
  }

  // uint32 win = 3;
  if (this->_internal_win() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_win(), target);
  }

  // uint32 alinve = 4;
  if (this->_internal_alinve() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_alinve(), target);
  }

  // uint32 kill = 5;
  if (this->_internal_kill() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_kill(), target);
  }

  // uint32 killMax = 6;
  if (this->_internal_killmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_killmax(), target);
  }

  // uint32 ctrl = 7;
  if (this->_internal_ctrl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_ctrl(), target);
  }

  // uint32 ctrlMax = 8;
  if (this->_internal_ctrlmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_ctrlmax(), target);
  }

  // uint32 hurt = 9;
  if (this->_internal_hurt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_hurt(), target);
  }

  // uint32 hurtMax = 10;
  if (this->_internal_hurtmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_hurtmax(), target);
  }

  // uint32 hurted = 11;
  if (this->_internal_hurted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_hurted(), target);
  }

  // uint32 hurtedMax = 12;
  if (this->_internal_hurtedmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_hurtedmax(), target);
  }

  // uint32 heal = 13;
  if (this->_internal_heal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_heal(), target);
  }

  // uint32 healMax = 14;
  if (this->_internal_healmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_healmax(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.Fight5v5SeasonStat)
  return target;
}

size_t Fight5v5SeasonStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.Fight5v5SeasonStat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 join = 1;
  if (this->_internal_join() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_join());
  }

  // uint32 honor = 2;
  if (this->_internal_honor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_honor());
  }

  // uint32 win = 3;
  if (this->_internal_win() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_win());
  }

  // uint32 alinve = 4;
  if (this->_internal_alinve() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_alinve());
  }

  // uint32 kill = 5;
  if (this->_internal_kill() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kill());
  }

  // uint32 killMax = 6;
  if (this->_internal_killmax() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_killmax());
  }

  // uint32 ctrl = 7;
  if (this->_internal_ctrl() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ctrl());
  }

  // uint32 ctrlMax = 8;
  if (this->_internal_ctrlmax() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ctrlmax());
  }

  // uint32 hurt = 9;
  if (this->_internal_hurt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hurt());
  }

  // uint32 hurtMax = 10;
  if (this->_internal_hurtmax() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hurtmax());
  }

  // uint32 hurted = 11;
  if (this->_internal_hurted() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hurted());
  }

  // uint32 hurtedMax = 12;
  if (this->_internal_hurtedmax() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hurtedmax());
  }

  // uint32 heal = 13;
  if (this->_internal_heal() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_heal());
  }

  // uint32 healMax = 14;
  if (this->_internal_healmax() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_healmax());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Fight5v5SeasonStat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Fight5v5SeasonStat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Fight5v5SeasonStat::GetClassData() const { return &_class_data_; }

void Fight5v5SeasonStat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Fight5v5SeasonStat *>(to)->MergeFrom(
      static_cast<const Fight5v5SeasonStat &>(from));
}


void Fight5v5SeasonStat::MergeFrom(const Fight5v5SeasonStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.Fight5v5SeasonStat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_join() != 0) {
    _internal_set_join(from._internal_join());
  }
  if (from._internal_honor() != 0) {
    _internal_set_honor(from._internal_honor());
  }
  if (from._internal_win() != 0) {
    _internal_set_win(from._internal_win());
  }
  if (from._internal_alinve() != 0) {
    _internal_set_alinve(from._internal_alinve());
  }
  if (from._internal_kill() != 0) {
    _internal_set_kill(from._internal_kill());
  }
  if (from._internal_killmax() != 0) {
    _internal_set_killmax(from._internal_killmax());
  }
  if (from._internal_ctrl() != 0) {
    _internal_set_ctrl(from._internal_ctrl());
  }
  if (from._internal_ctrlmax() != 0) {
    _internal_set_ctrlmax(from._internal_ctrlmax());
  }
  if (from._internal_hurt() != 0) {
    _internal_set_hurt(from._internal_hurt());
  }
  if (from._internal_hurtmax() != 0) {
    _internal_set_hurtmax(from._internal_hurtmax());
  }
  if (from._internal_hurted() != 0) {
    _internal_set_hurted(from._internal_hurted());
  }
  if (from._internal_hurtedmax() != 0) {
    _internal_set_hurtedmax(from._internal_hurtedmax());
  }
  if (from._internal_heal() != 0) {
    _internal_set_heal(from._internal_heal());
  }
  if (from._internal_healmax() != 0) {
    _internal_set_healmax(from._internal_healmax());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Fight5v5SeasonStat::CopyFrom(const Fight5v5SeasonStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.Fight5v5SeasonStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fight5v5SeasonStat::IsInitialized() const {
  return true;
}

void Fight5v5SeasonStat::InternalSwap(Fight5v5SeasonStat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Fight5v5SeasonStat, healmax_)
      + sizeof(Fight5v5SeasonStat::healmax_)
      - PROTOBUF_FIELD_OFFSET(Fight5v5SeasonStat, join_)>(
          reinterpret_cast<char*>(&join_),
          reinterpret_cast<char*>(&other->join_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Fight5v5SeasonStat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fight5v5common_2eproto_getter, &descriptor_table_fight5v5common_2eproto_once,
      file_level_metadata_fight5v5common_2eproto[10]);
}

// ===================================================================

class Fight5v5RoundList::_Internal {
 public:
};

Fight5v5RoundList::Fight5v5RoundList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  roundid_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.Fight5v5RoundList)
}
Fight5v5RoundList::Fight5v5RoundList(const Fight5v5RoundList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roundid_(from.roundid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:common.Fight5v5RoundList)
}

inline void Fight5v5RoundList::SharedCtor() {
}

Fight5v5RoundList::~Fight5v5RoundList() {
  // @@protoc_insertion_point(destructor:common.Fight5v5RoundList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Fight5v5RoundList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Fight5v5RoundList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Fight5v5RoundList::Clear() {
// @@protoc_insertion_point(message_clear_start:common.Fight5v5RoundList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roundid_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fight5v5RoundList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 roundid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_roundid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_roundid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Fight5v5RoundList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Fight5v5RoundList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 roundid = 1;
  {
    int byte_size = _roundid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_roundid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.Fight5v5RoundList)
  return target;
}

size_t Fight5v5RoundList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.Fight5v5RoundList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 roundid = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->roundid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _roundid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Fight5v5RoundList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Fight5v5RoundList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Fight5v5RoundList::GetClassData() const { return &_class_data_; }

void Fight5v5RoundList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Fight5v5RoundList *>(to)->MergeFrom(
      static_cast<const Fight5v5RoundList &>(from));
}


void Fight5v5RoundList::MergeFrom(const Fight5v5RoundList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.Fight5v5RoundList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  roundid_.MergeFrom(from.roundid_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Fight5v5RoundList::CopyFrom(const Fight5v5RoundList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.Fight5v5RoundList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fight5v5RoundList::IsInitialized() const {
  return true;
}

void Fight5v5RoundList::InternalSwap(Fight5v5RoundList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  roundid_.InternalSwap(&other->roundid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Fight5v5RoundList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fight5v5common_2eproto_getter, &descriptor_table_fight5v5common_2eproto_once,
      file_level_metadata_fight5v5common_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::common::MatchFight5v5*
Arena::CreateMaybeMessage< ::common::MatchFight5v5 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::MatchFight5v5 >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ExtendFight5v5*
Arena::CreateMaybeMessage< ::common::ExtendFight5v5 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ExtendFight5v5 >(arena);
}
template<> PROTOBUF_NOINLINE ::common::Fight5v5Data*
Arena::CreateMaybeMessage< ::common::Fight5v5Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::Fight5v5Data >(arena);
}
template<> PROTOBUF_NOINLINE ::common::Fight5v5Season*
Arena::CreateMaybeMessage< ::common::Fight5v5Season >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::Fight5v5Season >(arena);
}
template<> PROTOBUF_NOINLINE ::common::Fight5v5SeasonScore*
Arena::CreateMaybeMessage< ::common::Fight5v5SeasonScore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::Fight5v5SeasonScore >(arena);
}
template<> PROTOBUF_NOINLINE ::common::Fight5v5SeasonBase*
Arena::CreateMaybeMessage< ::common::Fight5v5SeasonBase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::Fight5v5SeasonBase >(arena);
}
template<> PROTOBUF_NOINLINE ::common::Fight5v5SeasonReward*
Arena::CreateMaybeMessage< ::common::Fight5v5SeasonReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::Fight5v5SeasonReward >(arena);
}
template<> PROTOBUF_NOINLINE ::common::Fight5v5RoundRole*
Arena::CreateMaybeMessage< ::common::Fight5v5RoundRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::Fight5v5RoundRole >(arena);
}
template<> PROTOBUF_NOINLINE ::common::Fight5v5RoundGroup*
Arena::CreateMaybeMessage< ::common::Fight5v5RoundGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::Fight5v5RoundGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::common::Fight5v5RoundState*
Arena::CreateMaybeMessage< ::common::Fight5v5RoundState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::Fight5v5RoundState >(arena);
}
template<> PROTOBUF_NOINLINE ::common::Fight5v5SeasonStat*
Arena::CreateMaybeMessage< ::common::Fight5v5SeasonStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::Fight5v5SeasonStat >(arena);
}
template<> PROTOBUF_NOINLINE ::common::Fight5v5RoundList*
Arena::CreateMaybeMessage< ::common::Fight5v5RoundList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::Fight5v5RoundList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
