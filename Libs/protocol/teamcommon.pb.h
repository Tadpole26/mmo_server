// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: teamcommon.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_teamcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_teamcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_teamcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_teamcommon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_teamcommon_2eproto;
namespace common {
class ModuleTeam;
struct ModuleTeamDefaultTypeInternal;
extern ModuleTeamDefaultTypeInternal _ModuleTeam_default_instance_;
class ModuleTeamView;
struct ModuleTeamViewDefaultTypeInternal;
extern ModuleTeamViewDefaultTypeInternal _ModuleTeamView_default_instance_;
class NotOwnTeamInfo;
struct NotOwnTeamInfoDefaultTypeInternal;
extern NotOwnTeamInfoDefaultTypeInternal _NotOwnTeamInfo_default_instance_;
class OwnTeamInfo;
struct OwnTeamInfoDefaultTypeInternal;
extern OwnTeamInfoDefaultTypeInternal _OwnTeamInfo_default_instance_;
class PlatAllTeamList;
struct PlatAllTeamListDefaultTypeInternal;
extern PlatAllTeamListDefaultTypeInternal _PlatAllTeamList_default_instance_;
class PlatTargetTeam;
struct PlatTargetTeamDefaultTypeInternal;
extern PlatTargetTeamDefaultTypeInternal _PlatTargetTeam_default_instance_;
class PlatTargetTeamList;
struct PlatTargetTeamListDefaultTypeInternal;
extern PlatTargetTeamListDefaultTypeInternal _PlatTargetTeamList_default_instance_;
class PlatTeamMember;
struct PlatTeamMemberDefaultTypeInternal;
extern PlatTeamMemberDefaultTypeInternal _PlatTeamMember_default_instance_;
class RecruitTeam;
struct RecruitTeamDefaultTypeInternal;
extern RecruitTeamDefaultTypeInternal _RecruitTeam_default_instance_;
class RecruitTeamLeader;
struct RecruitTeamLeaderDefaultTypeInternal;
extern RecruitTeamLeaderDefaultTypeInternal _RecruitTeamLeader_default_instance_;
class RecruitTeamMember;
struct RecruitTeamMemberDefaultTypeInternal;
extern RecruitTeamMemberDefaultTypeInternal _RecruitTeamMember_default_instance_;
class TeamApply;
struct TeamApplyDefaultTypeInternal;
extern TeamApplyDefaultTypeInternal _TeamApply_default_instance_;
class TeamApplyList;
struct TeamApplyListDefaultTypeInternal;
extern TeamApplyListDefaultTypeInternal _TeamApplyList_default_instance_;
class TeamBase;
struct TeamBaseDefaultTypeInternal;
extern TeamBaseDefaultTypeInternal _TeamBase_default_instance_;
class TeamFieldByte;
struct TeamFieldByteDefaultTypeInternal;
extern TeamFieldByteDefaultTypeInternal _TeamFieldByte_default_instance_;
class TeamFieldId;
struct TeamFieldIdDefaultTypeInternal;
extern TeamFieldIdDefaultTypeInternal _TeamFieldId_default_instance_;
class TeamFieldList;
struct TeamFieldListDefaultTypeInternal;
extern TeamFieldListDefaultTypeInternal _TeamFieldList_default_instance_;
class TeamInvited;
struct TeamInvitedDefaultTypeInternal;
extern TeamInvitedDefaultTypeInternal _TeamInvited_default_instance_;
class TeamMember;
struct TeamMemberDefaultTypeInternal;
extern TeamMemberDefaultTypeInternal _TeamMember_default_instance_;
class TeamMemberFieldBool;
struct TeamMemberFieldBoolDefaultTypeInternal;
extern TeamMemberFieldBoolDefaultTypeInternal _TeamMemberFieldBool_default_instance_;
class TeamMemberFieldByte;
struct TeamMemberFieldByteDefaultTypeInternal;
extern TeamMemberFieldByteDefaultTypeInternal _TeamMemberFieldByte_default_instance_;
class TeamMemberFieldId;
struct TeamMemberFieldIdDefaultTypeInternal;
extern TeamMemberFieldIdDefaultTypeInternal _TeamMemberFieldId_default_instance_;
class TeamMemberFieldList;
struct TeamMemberFieldListDefaultTypeInternal;
extern TeamMemberFieldListDefaultTypeInternal _TeamMemberFieldList_default_instance_;
class TeamMemberList;
struct TeamMemberListDefaultTypeInternal;
extern TeamMemberListDefaultTypeInternal _TeamMemberList_default_instance_;
class TeamVoteBaseData;
struct TeamVoteBaseDataDefaultTypeInternal;
extern TeamVoteBaseDataDefaultTypeInternal _TeamVoteBaseData_default_instance_;
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> ::common::ModuleTeam* Arena::CreateMaybeMessage<::common::ModuleTeam>(Arena*);
template<> ::common::ModuleTeamView* Arena::CreateMaybeMessage<::common::ModuleTeamView>(Arena*);
template<> ::common::NotOwnTeamInfo* Arena::CreateMaybeMessage<::common::NotOwnTeamInfo>(Arena*);
template<> ::common::OwnTeamInfo* Arena::CreateMaybeMessage<::common::OwnTeamInfo>(Arena*);
template<> ::common::PlatAllTeamList* Arena::CreateMaybeMessage<::common::PlatAllTeamList>(Arena*);
template<> ::common::PlatTargetTeam* Arena::CreateMaybeMessage<::common::PlatTargetTeam>(Arena*);
template<> ::common::PlatTargetTeamList* Arena::CreateMaybeMessage<::common::PlatTargetTeamList>(Arena*);
template<> ::common::PlatTeamMember* Arena::CreateMaybeMessage<::common::PlatTeamMember>(Arena*);
template<> ::common::RecruitTeam* Arena::CreateMaybeMessage<::common::RecruitTeam>(Arena*);
template<> ::common::RecruitTeamLeader* Arena::CreateMaybeMessage<::common::RecruitTeamLeader>(Arena*);
template<> ::common::RecruitTeamMember* Arena::CreateMaybeMessage<::common::RecruitTeamMember>(Arena*);
template<> ::common::TeamApply* Arena::CreateMaybeMessage<::common::TeamApply>(Arena*);
template<> ::common::TeamApplyList* Arena::CreateMaybeMessage<::common::TeamApplyList>(Arena*);
template<> ::common::TeamBase* Arena::CreateMaybeMessage<::common::TeamBase>(Arena*);
template<> ::common::TeamFieldByte* Arena::CreateMaybeMessage<::common::TeamFieldByte>(Arena*);
template<> ::common::TeamFieldId* Arena::CreateMaybeMessage<::common::TeamFieldId>(Arena*);
template<> ::common::TeamFieldList* Arena::CreateMaybeMessage<::common::TeamFieldList>(Arena*);
template<> ::common::TeamInvited* Arena::CreateMaybeMessage<::common::TeamInvited>(Arena*);
template<> ::common::TeamMember* Arena::CreateMaybeMessage<::common::TeamMember>(Arena*);
template<> ::common::TeamMemberFieldBool* Arena::CreateMaybeMessage<::common::TeamMemberFieldBool>(Arena*);
template<> ::common::TeamMemberFieldByte* Arena::CreateMaybeMessage<::common::TeamMemberFieldByte>(Arena*);
template<> ::common::TeamMemberFieldId* Arena::CreateMaybeMessage<::common::TeamMemberFieldId>(Arena*);
template<> ::common::TeamMemberFieldList* Arena::CreateMaybeMessage<::common::TeamMemberFieldList>(Arena*);
template<> ::common::TeamMemberList* Arena::CreateMaybeMessage<::common::TeamMemberList>(Arena*);
template<> ::common::TeamVoteBaseData* Arena::CreateMaybeMessage<::common::TeamVoteBaseData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace common {

enum enTeamFieldType : int {
  TFieldType_None = 0,
  TFieldType_LeaderId = 1,
  TFieldType_TargetId = 2,
  TFieldType_MinLevel = 3,
  TFieldType_MaxLevel = 4,
  TFieldType_MatchTime = 5,
  TFieldType_Text = 6,
  TFieldType_LeaderSceneId = 7,
  TFieldType_Max = 8,
  enTeamFieldType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  enTeamFieldType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool enTeamFieldType_IsValid(int value);
constexpr enTeamFieldType enTeamFieldType_MIN = TFieldType_None;
constexpr enTeamFieldType enTeamFieldType_MAX = TFieldType_Max;
constexpr int enTeamFieldType_ARRAYSIZE = enTeamFieldType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enTeamFieldType_descriptor();
template<typename T>
inline const std::string& enTeamFieldType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, enTeamFieldType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function enTeamFieldType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    enTeamFieldType_descriptor(), enum_t_value);
}
inline bool enTeamFieldType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, enTeamFieldType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<enTeamFieldType>(
    enTeamFieldType_descriptor(), name, value);
}
enum enTeamMemberFieldType : int {
  TMFieldType_None = 0,
  TMFieldType_Invited = 1,
  TMFieldType_Apply = 2,
  TMFieldType_Create = 3,
  TMFieldType_Match = 4,
  TMFieldType_AllTarget = 5,
  TMFieldType_Target = 6,
  TMFieldType_Replace = 7,
  TMFieldType_Invite = 8,
  TMFieldType_Together = 9,
  TMFieldType_Index = 10,
  TMFieldType_State = 11,
  TMFieldType_Follow = 12,
  TMFieldType_NickName = 13,
  TMFieldType_HeadIcon = 14,
  TMFieldType_HeadFrame = 15,
  TMFieldType_CareerId = 16,
  TMFieldType_Level = 17,
  TMFieldType_MapInfo = 18,
  TMFieldType_MapPosition = 19,
  TMFieldType_Appoint = 20,
  TMFieldType_Sex = 21,
  TMFieldType_Model = 22,
  TMFieldType_FightPoint = 23,
  TMFieldType_Hp = 24,
  TMFieldType_MaxHp = 25,
  TMFieldType_Mp = 26,
  TMFieldType_MaxMp = 27,
  TMFieldType_CareerLevel = 28,
  TMFieldType_Fashion = 29,
  TMFieldType_MainHand = 30,
  TMFieldType_OffHand = 31,
  enTeamMemberFieldType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  enTeamMemberFieldType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool enTeamMemberFieldType_IsValid(int value);
constexpr enTeamMemberFieldType enTeamMemberFieldType_MIN = TMFieldType_None;
constexpr enTeamMemberFieldType enTeamMemberFieldType_MAX = TMFieldType_OffHand;
constexpr int enTeamMemberFieldType_ARRAYSIZE = enTeamMemberFieldType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enTeamMemberFieldType_descriptor();
template<typename T>
inline const std::string& enTeamMemberFieldType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, enTeamMemberFieldType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function enTeamMemberFieldType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    enTeamMemberFieldType_descriptor(), enum_t_value);
}
inline bool enTeamMemberFieldType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, enTeamMemberFieldType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<enTeamMemberFieldType>(
    enTeamMemberFieldType_descriptor(), name, value);
}
enum enLeaveTeamType : int {
  enLeaveTeamType_None = 0,
  enLeaveTeamType_Active = 1,
  enLeaveTeamType_Fire = 2,
  enLeaveTeamType_Dismiss = 3,
  enLeaveTeamType_Max = 4,
  enLeaveTeamType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  enLeaveTeamType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool enLeaveTeamType_IsValid(int value);
constexpr enLeaveTeamType enLeaveTeamType_MIN = enLeaveTeamType_None;
constexpr enLeaveTeamType enLeaveTeamType_MAX = enLeaveTeamType_Max;
constexpr int enLeaveTeamType_ARRAYSIZE = enLeaveTeamType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enLeaveTeamType_descriptor();
template<typename T>
inline const std::string& enLeaveTeamType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, enLeaveTeamType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function enLeaveTeamType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    enLeaveTeamType_descriptor(), enum_t_value);
}
inline bool enLeaveTeamType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, enLeaveTeamType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<enLeaveTeamType>(
    enLeaveTeamType_descriptor(), name, value);
}
// ===================================================================

class ModuleTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ModuleTeam) */ {
 public:
  inline ModuleTeam() : ModuleTeam(nullptr) {}
  ~ModuleTeam() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeam(const ModuleTeam& from);
  ModuleTeam(ModuleTeam&& from) noexcept
    : ModuleTeam() {
    *this = ::std::move(from);
  }

  inline ModuleTeam& operator=(const ModuleTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeam& operator=(ModuleTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeam* internal_default_instance() {
    return reinterpret_cast<const ModuleTeam*>(
               &_ModuleTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ModuleTeam& a, ModuleTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ModuleTeam";
  }
  protected:
  explicit ModuleTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotteamFieldNumber = 1,
    kOwnTeamFieldNumber = 2,
    kBaseFieldNumber = 3,
    kMemberListFieldNumber = 4,
    kApplyListFieldNumber = 5,
  };
  // .common.NotOwnTeamInfo notteam = 1;
  bool has_notteam() const;
  private:
  bool _internal_has_notteam() const;
  public:
  void clear_notteam();
  const ::common::NotOwnTeamInfo& notteam() const;
  PROTOBUF_NODISCARD ::common::NotOwnTeamInfo* release_notteam();
  ::common::NotOwnTeamInfo* mutable_notteam();
  void set_allocated_notteam(::common::NotOwnTeamInfo* notteam);
  private:
  const ::common::NotOwnTeamInfo& _internal_notteam() const;
  ::common::NotOwnTeamInfo* _internal_mutable_notteam();
  public:
  void unsafe_arena_set_allocated_notteam(
      ::common::NotOwnTeamInfo* notteam);
  ::common::NotOwnTeamInfo* unsafe_arena_release_notteam();

  // .common.OwnTeamInfo ownTeam = 2;
  bool has_ownteam() const;
  private:
  bool _internal_has_ownteam() const;
  public:
  void clear_ownteam();
  const ::common::OwnTeamInfo& ownteam() const;
  PROTOBUF_NODISCARD ::common::OwnTeamInfo* release_ownteam();
  ::common::OwnTeamInfo* mutable_ownteam();
  void set_allocated_ownteam(::common::OwnTeamInfo* ownteam);
  private:
  const ::common::OwnTeamInfo& _internal_ownteam() const;
  ::common::OwnTeamInfo* _internal_mutable_ownteam();
  public:
  void unsafe_arena_set_allocated_ownteam(
      ::common::OwnTeamInfo* ownteam);
  ::common::OwnTeamInfo* unsafe_arena_release_ownteam();

  // .common.TeamBase base = 3;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::common::TeamBase& base() const;
  PROTOBUF_NODISCARD ::common::TeamBase* release_base();
  ::common::TeamBase* mutable_base();
  void set_allocated_base(::common::TeamBase* base);
  private:
  const ::common::TeamBase& _internal_base() const;
  ::common::TeamBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::common::TeamBase* base);
  ::common::TeamBase* unsafe_arena_release_base();

  // .common.TeamMemberList memberList = 4;
  bool has_memberlist() const;
  private:
  bool _internal_has_memberlist() const;
  public:
  void clear_memberlist();
  const ::common::TeamMemberList& memberlist() const;
  PROTOBUF_NODISCARD ::common::TeamMemberList* release_memberlist();
  ::common::TeamMemberList* mutable_memberlist();
  void set_allocated_memberlist(::common::TeamMemberList* memberlist);
  private:
  const ::common::TeamMemberList& _internal_memberlist() const;
  ::common::TeamMemberList* _internal_mutable_memberlist();
  public:
  void unsafe_arena_set_allocated_memberlist(
      ::common::TeamMemberList* memberlist);
  ::common::TeamMemberList* unsafe_arena_release_memberlist();

  // .common.TeamApplyList applyList = 5;
  bool has_applylist() const;
  private:
  bool _internal_has_applylist() const;
  public:
  void clear_applylist();
  const ::common::TeamApplyList& applylist() const;
  PROTOBUF_NODISCARD ::common::TeamApplyList* release_applylist();
  ::common::TeamApplyList* mutable_applylist();
  void set_allocated_applylist(::common::TeamApplyList* applylist);
  private:
  const ::common::TeamApplyList& _internal_applylist() const;
  ::common::TeamApplyList* _internal_mutable_applylist();
  public:
  void unsafe_arena_set_allocated_applylist(
      ::common::TeamApplyList* applylist);
  ::common::TeamApplyList* unsafe_arena_release_applylist();

  // @@protoc_insertion_point(class_scope:common.ModuleTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::NotOwnTeamInfo* notteam_;
  ::common::OwnTeamInfo* ownteam_;
  ::common::TeamBase* base_;
  ::common::TeamMemberList* memberlist_;
  ::common::TeamApplyList* applylist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teamcommon_2eproto;
};
// -------------------------------------------------------------------

class ModuleTeamView final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ModuleTeamView) */ {
 public:
  inline ModuleTeamView() : ModuleTeamView(nullptr) {}
  ~ModuleTeamView() override;
  explicit PROTOBUF_CONSTEXPR ModuleTeamView(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleTeamView(const ModuleTeamView& from);
  ModuleTeamView(ModuleTeamView&& from) noexcept
    : ModuleTeamView() {
    *this = ::std::move(from);
  }

  inline ModuleTeamView& operator=(const ModuleTeamView& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleTeamView& operator=(ModuleTeamView&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleTeamView& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleTeamView* internal_default_instance() {
    return reinterpret_cast<const ModuleTeamView*>(
               &_ModuleTeamView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ModuleTeamView& a, ModuleTeamView& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleTeamView* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleTeamView* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleTeamView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleTeamView>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleTeamView& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleTeamView& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleTeamView* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ModuleTeamView";
  }
  protected:
  explicit ModuleTeamView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamidFieldNumber = 1,
    kLeaderSceneIdFieldNumber = 2,
  };
  // uint64 teamid = 1;
  void clear_teamid();
  uint64_t teamid() const;
  void set_teamid(uint64_t value);
  private:
  uint64_t _internal_teamid() const;
  void _internal_set_teamid(uint64_t value);
  public:

  // uint64 leaderSceneId = 2;
  void clear_leadersceneid();
  uint64_t leadersceneid() const;
  void set_leadersceneid(uint64_t value);
  private:
  uint64_t _internal_leadersceneid() const;
  void _internal_set_leadersceneid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ModuleTeamView)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t teamid_;
  uint64_t leadersceneid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teamcommon_2eproto;
};
// -------------------------------------------------------------------

class NotOwnTeamInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.NotOwnTeamInfo) */ {
 public:
  inline NotOwnTeamInfo() : NotOwnTeamInfo(nullptr) {}
  ~NotOwnTeamInfo() override;
  explicit PROTOBUF_CONSTEXPR NotOwnTeamInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotOwnTeamInfo(const NotOwnTeamInfo& from);
  NotOwnTeamInfo(NotOwnTeamInfo&& from) noexcept
    : NotOwnTeamInfo() {
    *this = ::std::move(from);
  }

  inline NotOwnTeamInfo& operator=(const NotOwnTeamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotOwnTeamInfo& operator=(NotOwnTeamInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotOwnTeamInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotOwnTeamInfo* internal_default_instance() {
    return reinterpret_cast<const NotOwnTeamInfo*>(
               &_NotOwnTeamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NotOwnTeamInfo& a, NotOwnTeamInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NotOwnTeamInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotOwnTeamInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotOwnTeamInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotOwnTeamInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotOwnTeamInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NotOwnTeamInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotOwnTeamInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.NotOwnTeamInfo";
  }
  protected:
  explicit NotOwnTeamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetIdsFieldNumber = 6,
    kExpiresFieldNumber = 7,
    kInvitedFieldNumber = 1,
    kApplyFieldNumber = 2,
    kCreateFieldNumber = 3,
    kMatchFieldNumber = 4,
    kAllExpireFieldNumber = 5,
  };
  // repeated uint32 targetIds = 6;
  int targetids_size() const;
  private:
  int _internal_targetids_size() const;
  public:
  void clear_targetids();
  private:
  uint32_t _internal_targetids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_targetids() const;
  void _internal_add_targetids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_targetids();
  public:
  uint32_t targetids(int index) const;
  void set_targetids(int index, uint32_t value);
  void add_targetids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      targetids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_targetids();

  // repeated uint32 expires = 7;
  int expires_size() const;
  private:
  int _internal_expires_size() const;
  public:
  void clear_expires();
  private:
  uint32_t _internal_expires(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_expires() const;
  void _internal_add_expires(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_expires();
  public:
  uint32_t expires(int index) const;
  void set_expires(int index, uint32_t value);
  void add_expires(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      expires() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_expires();

  // .common.TeamInvited invited = 1;
  bool has_invited() const;
  private:
  bool _internal_has_invited() const;
  public:
  void clear_invited();
  const ::common::TeamInvited& invited() const;
  PROTOBUF_NODISCARD ::common::TeamInvited* release_invited();
  ::common::TeamInvited* mutable_invited();
  void set_allocated_invited(::common::TeamInvited* invited);
  private:
  const ::common::TeamInvited& _internal_invited() const;
  ::common::TeamInvited* _internal_mutable_invited();
  public:
  void unsafe_arena_set_allocated_invited(
      ::common::TeamInvited* invited);
  ::common::TeamInvited* unsafe_arena_release_invited();

  // uint32 apply = 2;
  void clear_apply();
  uint32_t apply() const;
  void set_apply(uint32_t value);
  private:
  uint32_t _internal_apply() const;
  void _internal_set_apply(uint32_t value);
  public:

  // uint32 create = 3;
  void clear_create();
  uint32_t create() const;
  void set_create(uint32_t value);
  private:
  uint32_t _internal_create() const;
  void _internal_set_create(uint32_t value);
  public:

  // uint32 match = 4;
  void clear_match();
  uint32_t match() const;
  void set_match(uint32_t value);
  private:
  uint32_t _internal_match() const;
  void _internal_set_match(uint32_t value);
  public:

  // uint32 allExpire = 5;
  void clear_allexpire();
  uint32_t allexpire() const;
  void set_allexpire(uint32_t value);
  private:
  uint32_t _internal_allexpire() const;
  void _internal_set_allexpire(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.NotOwnTeamInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > targetids_;
  mutable std::atomic<int> _targetids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > expires_;
  mutable std::atomic<int> _expires_cached_byte_size_;
  ::common::TeamInvited* invited_;
  uint32_t apply_;
  uint32_t create_;
  uint32_t match_;
  uint32_t allexpire_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teamcommon_2eproto;
};
// -------------------------------------------------------------------

class OwnTeamInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.OwnTeamInfo) */ {
 public:
  inline OwnTeamInfo() : OwnTeamInfo(nullptr) {}
  ~OwnTeamInfo() override;
  explicit PROTOBUF_CONSTEXPR OwnTeamInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OwnTeamInfo(const OwnTeamInfo& from);
  OwnTeamInfo(OwnTeamInfo&& from) noexcept
    : OwnTeamInfo() {
    *this = ::std::move(from);
  }

  inline OwnTeamInfo& operator=(const OwnTeamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OwnTeamInfo& operator=(OwnTeamInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OwnTeamInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const OwnTeamInfo* internal_default_instance() {
    return reinterpret_cast<const OwnTeamInfo*>(
               &_OwnTeamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OwnTeamInfo& a, OwnTeamInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OwnTeamInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OwnTeamInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OwnTeamInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OwnTeamInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OwnTeamInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OwnTeamInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OwnTeamInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.OwnTeamInfo";
  }
  protected:
  explicit OwnTeamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplaceFieldNumber = 1,
    kInviteFieldNumber = 2,
    kTogetherFieldNumber = 3,
    kAppointFieldNumber = 4,
  };
  // uint32 replace = 1;
  void clear_replace();
  uint32_t replace() const;
  void set_replace(uint32_t value);
  private:
  uint32_t _internal_replace() const;
  void _internal_set_replace(uint32_t value);
  public:

  // uint32 invite = 2;
  void clear_invite();
  uint32_t invite() const;
  void set_invite(uint32_t value);
  private:
  uint32_t _internal_invite() const;
  void _internal_set_invite(uint32_t value);
  public:

  // uint32 together = 3;
  void clear_together();
  uint32_t together() const;
  void set_together(uint32_t value);
  private:
  uint32_t _internal_together() const;
  void _internal_set_together(uint32_t value);
  public:

  // uint32 appoint = 4;
  void clear_appoint();
  uint32_t appoint() const;
  void set_appoint(uint32_t value);
  private:
  uint32_t _internal_appoint() const;
  void _internal_set_appoint(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.OwnTeamInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t replace_;
  uint32_t invite_;
  uint32_t together_;
  uint32_t appoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teamcommon_2eproto;
};
// -------------------------------------------------------------------

class TeamInvited final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.TeamInvited) */ {
 public:
  inline TeamInvited() : TeamInvited(nullptr) {}
  ~TeamInvited() override;
  explicit PROTOBUF_CONSTEXPR TeamInvited(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamInvited(const TeamInvited& from);
  TeamInvited(TeamInvited&& from) noexcept
    : TeamInvited() {
    *this = ::std::move(from);
  }

  inline TeamInvited& operator=(const TeamInvited& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamInvited& operator=(TeamInvited&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeamInvited& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamInvited* internal_default_instance() {
    return reinterpret_cast<const TeamInvited*>(
               &_TeamInvited_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TeamInvited& a, TeamInvited& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamInvited* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamInvited* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeamInvited* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeamInvited>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeamInvited& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TeamInvited& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamInvited* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.TeamInvited";
  }
  protected:
  explicit TeamInvited(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickNameFieldNumber = 2,
    kRoleIdFieldNumber = 1,
    kTeamIdFieldNumber = 4,
    kLeaderSceneIdFieldNumber = 5,
    kExpireFieldNumber = 3,
  };
  // bytes nickName = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // uint64 roleId = 1;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // uint64 teamId = 4;
  void clear_teamid();
  uint64_t teamid() const;
  void set_teamid(uint64_t value);
  private:
  uint64_t _internal_teamid() const;
  void _internal_set_teamid(uint64_t value);
  public:

  // uint64 leaderSceneId = 5;
  void clear_leadersceneid();
  uint64_t leadersceneid() const;
  void set_leadersceneid(uint64_t value);
  private:
  uint64_t _internal_leadersceneid() const;
  void _internal_set_leadersceneid(uint64_t value);
  public:

  // uint32 expire = 3;
  void clear_expire();
  uint32_t expire() const;
  void set_expire(uint32_t value);
  private:
  uint32_t _internal_expire() const;
  void _internal_set_expire(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.TeamInvited)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  uint64_t roleid_;
  uint64_t teamid_;
  uint64_t leadersceneid_;
  uint32_t expire_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teamcommon_2eproto;
};
// -------------------------------------------------------------------

class TeamBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.TeamBase) */ {
 public:
  inline TeamBase() : TeamBase(nullptr) {}
  ~TeamBase() override;
  explicit PROTOBUF_CONSTEXPR TeamBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamBase(const TeamBase& from);
  TeamBase(TeamBase&& from) noexcept
    : TeamBase() {
    *this = ::std::move(from);
  }

  inline TeamBase& operator=(const TeamBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamBase& operator=(TeamBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeamBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamBase* internal_default_instance() {
    return reinterpret_cast<const TeamBase*>(
               &_TeamBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TeamBase& a, TeamBase& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeamBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeamBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeamBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TeamBase& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.TeamBase";
  }
  protected:
  explicit TeamBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 7,
    kTeamIdFieldNumber = 1,
    kLeaderIdFieldNumber = 2,
    kTargetIdFieldNumber = 3,
    kMinLevelFieldNumber = 4,
    kMaxLevelFieldNumber = 5,
    kMatchTimeFieldNumber = 6,
    kLeaderSceneIdFieldNumber = 8,
  };
  // bytes text = 7;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // uint64 teamId = 1;
  void clear_teamid();
  uint64_t teamid() const;
  void set_teamid(uint64_t value);
  private:
  uint64_t _internal_teamid() const;
  void _internal_set_teamid(uint64_t value);
  public:

  // uint64 leaderId = 2;
  void clear_leaderid();
  uint64_t leaderid() const;
  void set_leaderid(uint64_t value);
  private:
  uint64_t _internal_leaderid() const;
  void _internal_set_leaderid(uint64_t value);
  public:

  // uint32 targetId = 3;
  void clear_targetid();
  uint32_t targetid() const;
  void set_targetid(uint32_t value);
  private:
  uint32_t _internal_targetid() const;
  void _internal_set_targetid(uint32_t value);
  public:

  // uint32 minLevel = 4;
  void clear_minlevel();
  uint32_t minlevel() const;
  void set_minlevel(uint32_t value);
  private:
  uint32_t _internal_minlevel() const;
  void _internal_set_minlevel(uint32_t value);
  public:

  // uint32 maxLevel = 5;
  void clear_maxlevel();
  uint32_t maxlevel() const;
  void set_maxlevel(uint32_t value);
  private:
  uint32_t _internal_maxlevel() const;
  void _internal_set_maxlevel(uint32_t value);
  public:

  // uint32 matchTime = 6;
  void clear_matchtime();
  uint32_t matchtime() const;
  void set_matchtime(uint32_t value);
  private:
  uint32_t _internal_matchtime() const;
  void _internal_set_matchtime(uint32_t value);
  public:

  // uint64 leaderSceneId = 8;
  void clear_leadersceneid();
  uint64_t leadersceneid() const;
  void set_leadersceneid(uint64_t value);
  private:
  uint64_t _internal_leadersceneid() const;
  void _internal_set_leadersceneid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.TeamBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  uint64_t teamid_;
  uint64_t leaderid_;
  uint32_t targetid_;
  uint32_t minlevel_;
  uint32_t maxlevel_;
  uint32_t matchtime_;
  uint64_t leadersceneid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teamcommon_2eproto;
};
// -------------------------------------------------------------------

class TeamMemberList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.TeamMemberList) */ {
 public:
  inline TeamMemberList() : TeamMemberList(nullptr) {}
  ~TeamMemberList() override;
  explicit PROTOBUF_CONSTEXPR TeamMemberList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamMemberList(const TeamMemberList& from);
  TeamMemberList(TeamMemberList&& from) noexcept
    : TeamMemberList() {
    *this = ::std::move(from);
  }

  inline TeamMemberList& operator=(const TeamMemberList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamMemberList& operator=(TeamMemberList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeamMemberList& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamMemberList* internal_default_instance() {
    return reinterpret_cast<const TeamMemberList*>(
               &_TeamMemberList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TeamMemberList& a, TeamMemberList& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamMemberList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamMemberList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeamMemberList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeamMemberList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeamMemberList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TeamMemberList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamMemberList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.TeamMemberList";
  }
  protected:
  explicit TeamMemberList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 1,
  };
  // repeated .common.TeamMember members = 1;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::common::TeamMember* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamMember >*
      mutable_members();
  private:
  const ::common::TeamMember& _internal_members(int index) const;
  ::common::TeamMember* _internal_add_members();
  public:
  const ::common::TeamMember& members(int index) const;
  ::common::TeamMember* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamMember >&
      members() const;

  // @@protoc_insertion_point(class_scope:common.TeamMemberList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamMember > members_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teamcommon_2eproto;
};
// -------------------------------------------------------------------

class TeamApplyList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.TeamApplyList) */ {
 public:
  inline TeamApplyList() : TeamApplyList(nullptr) {}
  ~TeamApplyList() override;
  explicit PROTOBUF_CONSTEXPR TeamApplyList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamApplyList(const TeamApplyList& from);
  TeamApplyList(TeamApplyList&& from) noexcept
    : TeamApplyList() {
    *this = ::std::move(from);
  }

  inline TeamApplyList& operator=(const TeamApplyList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamApplyList& operator=(TeamApplyList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeamApplyList& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamApplyList* internal_default_instance() {
    return reinterpret_cast<const TeamApplyList*>(
               &_TeamApplyList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TeamApplyList& a, TeamApplyList& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamApplyList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamApplyList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeamApplyList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeamApplyList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeamApplyList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TeamApplyList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamApplyList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.TeamApplyList";
  }
  protected:
  explicit TeamApplyList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplysFieldNumber = 1,
  };
  // repeated .common.TeamApply applys = 1;
  int applys_size() const;
  private:
  int _internal_applys_size() const;
  public:
  void clear_applys();
  ::common::TeamApply* mutable_applys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamApply >*
      mutable_applys();
  private:
  const ::common::TeamApply& _internal_applys(int index) const;
  ::common::TeamApply* _internal_add_applys();
  public:
  const ::common::TeamApply& applys(int index) const;
  ::common::TeamApply* add_applys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamApply >&
      applys() const;

  // @@protoc_insertion_point(class_scope:common.TeamApplyList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamApply > applys_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teamcommon_2eproto;
};
// -------------------------------------------------------------------

class TeamMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.TeamMember) */ {
 public:
  inline TeamMember() : TeamMember(nullptr) {}
  ~TeamMember() override;
  explicit PROTOBUF_CONSTEXPR TeamMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamMember(const TeamMember& from);
  TeamMember(TeamMember&& from) noexcept
    : TeamMember() {
    *this = ::std::move(from);
  }

  inline TeamMember& operator=(const TeamMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamMember& operator=(TeamMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeamMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamMember* internal_default_instance() {
    return reinterpret_cast<const TeamMember*>(
               &_TeamMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TeamMember& a, TeamMember& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeamMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeamMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeamMember& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TeamMember& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.TeamMember";
  }
  protected:
  explicit TeamMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 1,
    kExtd1FieldNumber = 5,
    kExtd2FieldNumber = 6,
    kExtd3FieldNumber = 7,
    kIndexFieldNumber = 2,
    kStateFieldNumber = 3,
    kFollowFieldNumber = 4,
  };
  // .common.RoleBrief role = 1;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  const ::common::RoleBrief& role() const;
  PROTOBUF_NODISCARD ::common::RoleBrief* release_role();
  ::common::RoleBrief* mutable_role();
  void set_allocated_role(::common::RoleBrief* role);
  private:
  const ::common::RoleBrief& _internal_role() const;
  ::common::RoleBrief* _internal_mutable_role();
  public:
  void unsafe_arena_set_allocated_role(
      ::common::RoleBrief* role);
  ::common::RoleBrief* unsafe_arena_release_role();

  // .common.RoleExtend1 extd1 = 5;
  bool has_extd1() const;
  private:
  bool _internal_has_extd1() const;
  public:
  void clear_extd1();
  const ::common::RoleExtend1& extd1() const;
  PROTOBUF_NODISCARD ::common::RoleExtend1* release_extd1();
  ::common::RoleExtend1* mutable_extd1();
  void set_allocated_extd1(::common::RoleExtend1* extd1);
  private:
  const ::common::RoleExtend1& _internal_extd1() const;
  ::common::RoleExtend1* _internal_mutable_extd1();
  public:
  void unsafe_arena_set_allocated_extd1(
      ::common::RoleExtend1* extd1);
  ::common::RoleExtend1* unsafe_arena_release_extd1();

  // .common.RoleExtend2 extd2 = 6;
  bool has_extd2() const;
  private:
  bool _internal_has_extd2() const;
  public:
  void clear_extd2();
  const ::common::RoleExtend2& extd2() const;
  PROTOBUF_NODISCARD ::common::RoleExtend2* release_extd2();
  ::common::RoleExtend2* mutable_extd2();
  void set_allocated_extd2(::common::RoleExtend2* extd2);
  private:
  const ::common::RoleExtend2& _internal_extd2() const;
  ::common::RoleExtend2* _internal_mutable_extd2();
  public:
  void unsafe_arena_set_allocated_extd2(
      ::common::RoleExtend2* extd2);
  ::common::RoleExtend2* unsafe_arena_release_extd2();

  // .common.RoleExtend3 extd3 = 7;
  bool has_extd3() const;
  private:
  bool _internal_has_extd3() const;
  public:
  void clear_extd3();
  const ::common::RoleExtend3& extd3() const;
  PROTOBUF_NODISCARD ::common::RoleExtend3* release_extd3();
  ::common::RoleExtend3* mutable_extd3();
  void set_allocated_extd3(::common::RoleExtend3* extd3);
  private:
  const ::common::RoleExtend3& _internal_extd3() const;
  ::common::RoleExtend3* _internal_mutable_extd3();
  public:
  void unsafe_arena_set_allocated_extd3(
      ::common::RoleExtend3* extd3);
  ::common::RoleExtend3* unsafe_arena_release_extd3();

  // uint32 index = 2;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // bool state = 3;
  void clear_state();
  bool state() const;
  void set_state(bool value);
  private:
  bool _internal_state() const;
  void _internal_set_state(bool value);
  public:

  // bool follow = 4;
  void clear_follow();
  bool follow() const;
  void set_follow(bool value);
  private:
  bool _internal_follow() const;
  void _internal_set_follow(bool value);
  public:

  // @@protoc_insertion_point(class_scope:common.TeamMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::RoleBrief* role_;
  ::common::RoleExtend1* extd1_;
  ::common::RoleExtend2* extd2_;
  ::common::RoleExtend3* extd3_;
  uint32_t index_;
  bool state_;
  bool follow_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teamcommon_2eproto;
};
// -------------------------------------------------------------------

class TeamApply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.TeamApply) */ {
 public:
  inline TeamApply() : TeamApply(nullptr) {}
  ~TeamApply() override;
  explicit PROTOBUF_CONSTEXPR TeamApply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamApply(const TeamApply& from);
  TeamApply(TeamApply&& from) noexcept
    : TeamApply() {
    *this = ::std::move(from);
  }

  inline TeamApply& operator=(const TeamApply& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamApply& operator=(TeamApply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeamApply& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamApply* internal_default_instance() {
    return reinterpret_cast<const TeamApply*>(
               &_TeamApply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TeamApply& a, TeamApply& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamApply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamApply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeamApply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeamApply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeamApply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TeamApply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamApply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.TeamApply";
  }
  protected:
  explicit TeamApply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 1,
    kLeaderSceneIdFieldNumber = 3,
    kExpireFieldNumber = 2,
  };
  // .common.RoleBrief role = 1;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  const ::common::RoleBrief& role() const;
  PROTOBUF_NODISCARD ::common::RoleBrief* release_role();
  ::common::RoleBrief* mutable_role();
  void set_allocated_role(::common::RoleBrief* role);
  private:
  const ::common::RoleBrief& _internal_role() const;
  ::common::RoleBrief* _internal_mutable_role();
  public:
  void unsafe_arena_set_allocated_role(
      ::common::RoleBrief* role);
  ::common::RoleBrief* unsafe_arena_release_role();

  // uint64 leaderSceneId = 3;
  void clear_leadersceneid();
  uint64_t leadersceneid() const;
  void set_leadersceneid(uint64_t value);
  private:
  uint64_t _internal_leadersceneid() const;
  void _internal_set_leadersceneid(uint64_t value);
  public:

  // uint32 expire = 2;
  void clear_expire();
  uint32_t expire() const;
  void set_expire(uint32_t value);
  private:
  uint32_t _internal_expire() const;
  void _internal_set_expire(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.TeamApply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::RoleBrief* role_;
  uint64_t leadersceneid_;
  uint32_t expire_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teamcommon_2eproto;
};
// -------------------------------------------------------------------

class RecruitTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.RecruitTeam) */ {
 public:
  inline RecruitTeam() : RecruitTeam(nullptr) {}
  ~RecruitTeam() override;
  explicit PROTOBUF_CONSTEXPR RecruitTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecruitTeam(const RecruitTeam& from);
  RecruitTeam(RecruitTeam&& from) noexcept
    : RecruitTeam() {
    *this = ::std::move(from);
  }

  inline RecruitTeam& operator=(const RecruitTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecruitTeam& operator=(RecruitTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecruitTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecruitTeam* internal_default_instance() {
    return reinterpret_cast<const RecruitTeam*>(
               &_RecruitTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RecruitTeam& a, RecruitTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(RecruitTeam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecruitTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecruitTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecruitTeam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecruitTeam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecruitTeam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecruitTeam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.RecruitTeam";
  }
  protected:
  explicit RecruitTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 3,
    kTextFieldNumber = 7,
    kLeaderFieldNumber = 2,
    kTeamIdFieldNumber = 1,
    kTargetIdFieldNumber = 4,
    kMinLevelFieldNumber = 5,
    kLeaderSceneIdFieldNumber = 8,
    kMaxLevelFieldNumber = 6,
  };
  // repeated .common.RecruitTeamMember members = 3;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::common::RecruitTeamMember* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::RecruitTeamMember >*
      mutable_members();
  private:
  const ::common::RecruitTeamMember& _internal_members(int index) const;
  ::common::RecruitTeamMember* _internal_add_members();
  public:
  const ::common::RecruitTeamMember& members(int index) const;
  ::common::RecruitTeamMember* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::RecruitTeamMember >&
      members() const;

  // bytes text = 7;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .common.RecruitTeamLeader leader = 2;
  bool has_leader() const;
  private:
  bool _internal_has_leader() const;
  public:
  void clear_leader();
  const ::common::RecruitTeamLeader& leader() const;
  PROTOBUF_NODISCARD ::common::RecruitTeamLeader* release_leader();
  ::common::RecruitTeamLeader* mutable_leader();
  void set_allocated_leader(::common::RecruitTeamLeader* leader);
  private:
  const ::common::RecruitTeamLeader& _internal_leader() const;
  ::common::RecruitTeamLeader* _internal_mutable_leader();
  public:
  void unsafe_arena_set_allocated_leader(
      ::common::RecruitTeamLeader* leader);
  ::common::RecruitTeamLeader* unsafe_arena_release_leader();

  // uint64 teamId = 1;
  void clear_teamid();
  uint64_t teamid() const;
  void set_teamid(uint64_t value);
  private:
  uint64_t _internal_teamid() const;
  void _internal_set_teamid(uint64_t value);
  public:

  // uint32 targetId = 4;
  void clear_targetid();
  uint32_t targetid() const;
  void set_targetid(uint32_t value);
  private:
  uint32_t _internal_targetid() const;
  void _internal_set_targetid(uint32_t value);
  public:

  // uint32 minLevel = 5;
  void clear_minlevel();
  uint32_t minlevel() const;
  void set_minlevel(uint32_t value);
  private:
  uint32_t _internal_minlevel() const;
  void _internal_set_minlevel(uint32_t value);
  public:

  // int64 leaderSceneId = 8;
  void clear_leadersceneid();
  int64_t leadersceneid() const;
  void set_leadersceneid(int64_t value);
  private:
  int64_t _internal_leadersceneid() const;
  void _internal_set_leadersceneid(int64_t value);
  public:

  // uint32 maxLevel = 6;
  void clear_maxlevel();
  uint32_t maxlevel() const;
  void set_maxlevel(uint32_t value);
  private:
  uint32_t _internal_maxlevel() const;
  void _internal_set_maxlevel(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.RecruitTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::RecruitTeamMember > members_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::common::RecruitTeamLeader* leader_;
  uint64_t teamid_;
  uint32_t targetid_;
  uint32_t minlevel_;
  int64_t leadersceneid_;
  uint32_t maxlevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teamcommon_2eproto;
};
// -------------------------------------------------------------------

class RecruitTeamLeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.RecruitTeamLeader) */ {
 public:
  inline RecruitTeamLeader() : RecruitTeamLeader(nullptr) {}
  ~RecruitTeamLeader() override;
  explicit PROTOBUF_CONSTEXPR RecruitTeamLeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecruitTeamLeader(const RecruitTeamLeader& from);
  RecruitTeamLeader(RecruitTeamLeader&& from) noexcept
    : RecruitTeamLeader() {
    *this = ::std::move(from);
  }

  inline RecruitTeamLeader& operator=(const RecruitTeamLeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecruitTeamLeader& operator=(RecruitTeamLeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecruitTeamLeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecruitTeamLeader* internal_default_instance() {
    return reinterpret_cast<const RecruitTeamLeader*>(
               &_RecruitTeamLeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RecruitTeamLeader& a, RecruitTeamLeader& b) {
    a.Swap(&b);
  }
  inline void Swap(RecruitTeamLeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecruitTeamLeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecruitTeamLeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecruitTeamLeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecruitTeamLeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecruitTeamLeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecruitTeamLeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.RecruitTeamLeader";
  }
  protected:
  explicit RecruitTeamLeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 4,
    kLeaderFieldNumber = 1,
    kChatFontFieldNumber = 2,
    kChatFrameFieldNumber = 3,
  };
  // bytes nickname = 4;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // .common.RecruitTeamMember leader = 1;
  bool has_leader() const;
  private:
  bool _internal_has_leader() const;
  public:
  void clear_leader();
  const ::common::RecruitTeamMember& leader() const;
  PROTOBUF_NODISCARD ::common::RecruitTeamMember* release_leader();
  ::common::RecruitTeamMember* mutable_leader();
  void set_allocated_leader(::common::RecruitTeamMember* leader);
  private:
  const ::common::RecruitTeamMember& _internal_leader() const;
  ::common::RecruitTeamMember* _internal_mutable_leader();
  public:
  void unsafe_arena_set_allocated_leader(
      ::common::RecruitTeamMember* leader);
  ::common::RecruitTeamMember* unsafe_arena_release_leader();

  // uint32 chatFont = 2;
  void clear_chatfont();
  uint32_t chatfont() const;
  void set_chatfont(uint32_t value);
  private:
  uint32_t _internal_chatfont() const;
  void _internal_set_chatfont(uint32_t value);
  public:

  // uint32 chatFrame = 3;
  void clear_chatframe();
  uint32_t chatframe() const;
  void set_chatframe(uint32_t value);
  private:
  uint32_t _internal_chatframe() const;
  void _internal_set_chatframe(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.RecruitTeamLeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::common::RecruitTeamMember* leader_;
  uint32_t chatfont_;
  uint32_t chatframe_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teamcommon_2eproto;
};
// -------------------------------------------------------------------

class RecruitTeamMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.RecruitTeamMember) */ {
 public:
  inline RecruitTeamMember() : RecruitTeamMember(nullptr) {}
  ~RecruitTeamMember() override;
  explicit PROTOBUF_CONSTEXPR RecruitTeamMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecruitTeamMember(const RecruitTeamMember& from);
  RecruitTeamMember(RecruitTeamMember&& from) noexcept
    : RecruitTeamMember() {
    *this = ::std::move(from);
  }

  inline RecruitTeamMember& operator=(const RecruitTeamMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecruitTeamMember& operator=(RecruitTeamMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecruitTeamMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecruitTeamMember* internal_default_instance() {
    return reinterpret_cast<const RecruitTeamMember*>(
               &_RecruitTeamMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RecruitTeamMember& a, RecruitTeamMember& b) {
    a.Swap(&b);
  }
  inline void Swap(RecruitTeamMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecruitTeamMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecruitTeamMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecruitTeamMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecruitTeamMember& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecruitTeamMember& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecruitTeamMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.RecruitTeamMember";
  }
  protected:
  explicit RecruitTeamMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadIconFieldNumber = 1,
    kHeadFrameFieldNumber = 2,
    kCareerIdFieldNumber = 3,
    kLevelFieldNumber = 4,
    kSexFieldNumber = 5,
  };
  // uint32 headIcon = 1;
  void clear_headicon();
  uint32_t headicon() const;
  void set_headicon(uint32_t value);
  private:
  uint32_t _internal_headicon() const;
  void _internal_set_headicon(uint32_t value);
  public:

  // uint32 headFrame = 2;
  void clear_headframe();
  uint32_t headframe() const;
  void set_headframe(uint32_t value);
  private:
  uint32_t _internal_headframe() const;
  void _internal_set_headframe(uint32_t value);
  public:

  // uint32 careerId = 3;
  void clear_careerid();
  uint32_t careerid() const;
  void set_careerid(uint32_t value);
  private:
  uint32_t _internal_careerid() const;
  void _internal_set_careerid(uint32_t value);
  public:

  // uint32 level = 4;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 sex = 5;
  void clear_sex();
  uint32_t sex() const;
  void set_sex(uint32_t value);
  private:
  uint32_t _internal_sex() const;
  void _internal_set_sex(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.RecruitTeamMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t headicon_;
  uint32_t headframe_;
  uint32_t careerid_;
  uint32_t level_;
  uint32_t sex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teamcommon_2eproto;
};
// -------------------------------------------------------------------

class PlatAllTeamList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.PlatAllTeamList) */ {
 public:
  inline PlatAllTeamList() : PlatAllTeamList(nullptr) {}
  ~PlatAllTeamList() override;
  explicit PROTOBUF_CONSTEXPR PlatAllTeamList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlatAllTeamList(const PlatAllTeamList& from);
  PlatAllTeamList(PlatAllTeamList&& from) noexcept
    : PlatAllTeamList() {
    *this = ::std::move(from);
  }

  inline PlatAllTeamList& operator=(const PlatAllTeamList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlatAllTeamList& operator=(PlatAllTeamList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlatAllTeamList& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlatAllTeamList* internal_default_instance() {
    return reinterpret_cast<const PlatAllTeamList*>(
               &_PlatAllTeamList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PlatAllTeamList& a, PlatAllTeamList& b) {
    a.Swap(&b);
  }
  inline void Swap(PlatAllTeamList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlatAllTeamList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlatAllTeamList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlatAllTeamList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlatAllTeamList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlatAllTeamList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlatAllTeamList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.PlatAllTeamList";
  }
  protected:
  explicit PlatAllTeamList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamsFieldNumber = 1,
  };
  // repeated .common.PlatTargetTeamList teams = 1;
  int teams_size() const;
  private:
  int _internal_teams_size() const;
  public:
  void clear_teams();
  ::common::PlatTargetTeamList* mutable_teams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::PlatTargetTeamList >*
      mutable_teams();
  private:
  const ::common::PlatTargetTeamList& _internal_teams(int index) const;
  ::common::PlatTargetTeamList* _internal_add_teams();
  public:
  const ::common::PlatTargetTeamList& teams(int index) const;
  ::common::PlatTargetTeamList* add_teams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::PlatTargetTeamList >&
      teams() const;

  // @@protoc_insertion_point(class_scope:common.PlatAllTeamList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::PlatTargetTeamList > teams_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teamcommon_2eproto;
};
// -------------------------------------------------------------------

class PlatTargetTeamList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.PlatTargetTeamList) */ {
 public:
  inline PlatTargetTeamList() : PlatTargetTeamList(nullptr) {}
  ~PlatTargetTeamList() override;
  explicit PROTOBUF_CONSTEXPR PlatTargetTeamList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlatTargetTeamList(const PlatTargetTeamList& from);
  PlatTargetTeamList(PlatTargetTeamList&& from) noexcept
    : PlatTargetTeamList() {
    *this = ::std::move(from);
  }

  inline PlatTargetTeamList& operator=(const PlatTargetTeamList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlatTargetTeamList& operator=(PlatTargetTeamList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlatTargetTeamList& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlatTargetTeamList* internal_default_instance() {
    return reinterpret_cast<const PlatTargetTeamList*>(
               &_PlatTargetTeamList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PlatTargetTeamList& a, PlatTargetTeamList& b) {
    a.Swap(&b);
  }
  inline void Swap(PlatTargetTeamList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlatTargetTeamList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlatTargetTeamList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlatTargetTeamList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlatTargetTeamList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlatTargetTeamList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlatTargetTeamList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.PlatTargetTeamList";
  }
  protected:
  explicit PlatTargetTeamList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamsFieldNumber = 2,
    kTargetIdFieldNumber = 1,
  };
  // repeated .common.PlatTargetTeam teams = 2;
  int teams_size() const;
  private:
  int _internal_teams_size() const;
  public:
  void clear_teams();
  ::common::PlatTargetTeam* mutable_teams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::PlatTargetTeam >*
      mutable_teams();
  private:
  const ::common::PlatTargetTeam& _internal_teams(int index) const;
  ::common::PlatTargetTeam* _internal_add_teams();
  public:
  const ::common::PlatTargetTeam& teams(int index) const;
  ::common::PlatTargetTeam* add_teams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::PlatTargetTeam >&
      teams() const;

  // uint32 targetId = 1;
  void clear_targetid();
  uint32_t targetid() const;
  void set_targetid(uint32_t value);
  private:
  uint32_t _internal_targetid() const;
  void _internal_set_targetid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.PlatTargetTeamList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::PlatTargetTeam > teams_;
  uint32_t targetid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teamcommon_2eproto;
};
// -------------------------------------------------------------------

class PlatTargetTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.PlatTargetTeam) */ {
 public:
  inline PlatTargetTeam() : PlatTargetTeam(nullptr) {}
  ~PlatTargetTeam() override;
  explicit PROTOBUF_CONSTEXPR PlatTargetTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlatTargetTeam(const PlatTargetTeam& from);
  PlatTargetTeam(PlatTargetTeam&& from) noexcept
    : PlatTargetTeam() {
    *this = ::std::move(from);
  }

  inline PlatTargetTeam& operator=(const PlatTargetTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlatTargetTeam& operator=(PlatTargetTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlatTargetTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlatTargetTeam* internal_default_instance() {
    return reinterpret_cast<const PlatTargetTeam*>(
               &_PlatTargetTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PlatTargetTeam& a, PlatTargetTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(PlatTargetTeam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlatTargetTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlatTargetTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlatTargetTeam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlatTargetTeam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlatTargetTeam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlatTargetTeam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.PlatTargetTeam";
  }
  protected:
  explicit PlatTargetTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 6,
    kLeaderNameFieldNumber = 2,
    kTextFieldNumber = 5,
    kTeamIdFieldNumber = 1,
    kMinLevelFieldNumber = 3,
    kLeaderSceneIdFieldNumber = 7,
    kMaxLevelFieldNumber = 4,
  };
  // repeated .common.PlatTeamMember members = 6;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::common::PlatTeamMember* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::PlatTeamMember >*
      mutable_members();
  private:
  const ::common::PlatTeamMember& _internal_members(int index) const;
  ::common::PlatTeamMember* _internal_add_members();
  public:
  const ::common::PlatTeamMember& members(int index) const;
  ::common::PlatTeamMember* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::PlatTeamMember >&
      members() const;

  // bytes leaderName = 2;
  void clear_leadername();
  const std::string& leadername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_leadername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_leadername();
  PROTOBUF_NODISCARD std::string* release_leadername();
  void set_allocated_leadername(std::string* leadername);
  private:
  const std::string& _internal_leadername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leadername(const std::string& value);
  std::string* _internal_mutable_leadername();
  public:

  // bytes text = 5;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // uint32 teamId = 1;
  void clear_teamid();
  uint32_t teamid() const;
  void set_teamid(uint32_t value);
  private:
  uint32_t _internal_teamid() const;
  void _internal_set_teamid(uint32_t value);
  public:

  // uint32 minLevel = 3;
  void clear_minlevel();
  uint32_t minlevel() const;
  void set_minlevel(uint32_t value);
  private:
  uint32_t _internal_minlevel() const;
  void _internal_set_minlevel(uint32_t value);
  public:

  // uint64 leaderSceneId = 7;
  void clear_leadersceneid();
  uint64_t leadersceneid() const;
  void set_leadersceneid(uint64_t value);
  private:
  uint64_t _internal_leadersceneid() const;
  void _internal_set_leadersceneid(uint64_t value);
  public:

  // uint32 maxLevel = 4;
  void clear_maxlevel();
  uint32_t maxlevel() const;
  void set_maxlevel(uint32_t value);
  private:
  uint32_t _internal_maxlevel() const;
  void _internal_set_maxlevel(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.PlatTargetTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::PlatTeamMember > members_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leadername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  uint32_t teamid_;
  uint32_t minlevel_;
  uint64_t leadersceneid_;
  uint32_t maxlevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teamcommon_2eproto;
};
// -------------------------------------------------------------------

class PlatTeamMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.PlatTeamMember) */ {
 public:
  inline PlatTeamMember() : PlatTeamMember(nullptr) {}
  ~PlatTeamMember() override;
  explicit PROTOBUF_CONSTEXPR PlatTeamMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlatTeamMember(const PlatTeamMember& from);
  PlatTeamMember(PlatTeamMember&& from) noexcept
    : PlatTeamMember() {
    *this = ::std::move(from);
  }

  inline PlatTeamMember& operator=(const PlatTeamMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlatTeamMember& operator=(PlatTeamMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlatTeamMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlatTeamMember* internal_default_instance() {
    return reinterpret_cast<const PlatTeamMember*>(
               &_PlatTeamMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PlatTeamMember& a, PlatTeamMember& b) {
    a.Swap(&b);
  }
  inline void Swap(PlatTeamMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlatTeamMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlatTeamMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlatTeamMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlatTeamMember& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlatTeamMember& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlatTeamMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.PlatTeamMember";
  }
  protected:
  explicit PlatTeamMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCareerIdFieldNumber = 1,
    kLevelFieldNumber = 2,
  };
  // uint32 careerId = 1;
  void clear_careerid();
  uint32_t careerid() const;
  void set_careerid(uint32_t value);
  private:
  uint32_t _internal_careerid() const;
  void _internal_set_careerid(uint32_t value);
  public:

  // uint32 level = 2;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.PlatTeamMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t careerid_;
  uint32_t level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teamcommon_2eproto;
};
// -------------------------------------------------------------------

class TeamFieldId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.TeamFieldId) */ {
 public:
  inline TeamFieldId() : TeamFieldId(nullptr) {}
  ~TeamFieldId() override;
  explicit PROTOBUF_CONSTEXPR TeamFieldId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamFieldId(const TeamFieldId& from);
  TeamFieldId(TeamFieldId&& from) noexcept
    : TeamFieldId() {
    *this = ::std::move(from);
  }

  inline TeamFieldId& operator=(const TeamFieldId& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamFieldId& operator=(TeamFieldId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeamFieldId& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamFieldId* internal_default_instance() {
    return reinterpret_cast<const TeamFieldId*>(
               &_TeamFieldId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(TeamFieldId& a, TeamFieldId& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamFieldId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamFieldId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeamFieldId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeamFieldId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeamFieldId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TeamFieldId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamFieldId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.TeamFieldId";
  }
  protected:
  explicit TeamFieldId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // uint64 val = 2;
  void clear_val();
  uint64_t val() const;
  void set_val(uint64_t value);
  private:
  uint64_t _internal_val() const;
  void _internal_set_val(uint64_t value);
  public:

  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.TeamFieldId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t val_;
  uint32_t type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teamcommon_2eproto;
};
// -------------------------------------------------------------------

class TeamFieldByte final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.TeamFieldByte) */ {
 public:
  inline TeamFieldByte() : TeamFieldByte(nullptr) {}
  ~TeamFieldByte() override;
  explicit PROTOBUF_CONSTEXPR TeamFieldByte(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamFieldByte(const TeamFieldByte& from);
  TeamFieldByte(TeamFieldByte&& from) noexcept
    : TeamFieldByte() {
    *this = ::std::move(from);
  }

  inline TeamFieldByte& operator=(const TeamFieldByte& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamFieldByte& operator=(TeamFieldByte&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeamFieldByte& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamFieldByte* internal_default_instance() {
    return reinterpret_cast<const TeamFieldByte*>(
               &_TeamFieldByte_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(TeamFieldByte& a, TeamFieldByte& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamFieldByte* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamFieldByte* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeamFieldByte* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeamFieldByte>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeamFieldByte& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TeamFieldByte& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamFieldByte* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.TeamFieldByte";
  }
  protected:
  explicit TeamFieldByte(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes val = 2;
  void clear_val();
  const std::string& val() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_val(ArgT0&& arg0, ArgT... args);
  std::string* mutable_val();
  PROTOBUF_NODISCARD std::string* release_val();
  void set_allocated_val(std::string* val);
  private:
  const std::string& _internal_val() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_val(const std::string& value);
  std::string* _internal_mutable_val();
  public:

  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.TeamFieldByte)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
  uint32_t type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teamcommon_2eproto;
};
// -------------------------------------------------------------------

class TeamFieldList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.TeamFieldList) */ {
 public:
  inline TeamFieldList() : TeamFieldList(nullptr) {}
  ~TeamFieldList() override;
  explicit PROTOBUF_CONSTEXPR TeamFieldList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamFieldList(const TeamFieldList& from);
  TeamFieldList(TeamFieldList&& from) noexcept
    : TeamFieldList() {
    *this = ::std::move(from);
  }

  inline TeamFieldList& operator=(const TeamFieldList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamFieldList& operator=(TeamFieldList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeamFieldList& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamFieldList* internal_default_instance() {
    return reinterpret_cast<const TeamFieldList*>(
               &_TeamFieldList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(TeamFieldList& a, TeamFieldList& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamFieldList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamFieldList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeamFieldList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeamFieldList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeamFieldList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TeamFieldList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamFieldList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.TeamFieldList";
  }
  protected:
  explicit TeamFieldList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTfidFieldNumber = 1,
    kTfbyteFieldNumber = 2,
  };
  // repeated .common.TeamFieldId tfid = 1;
  int tfid_size() const;
  private:
  int _internal_tfid_size() const;
  public:
  void clear_tfid();
  ::common::TeamFieldId* mutable_tfid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamFieldId >*
      mutable_tfid();
  private:
  const ::common::TeamFieldId& _internal_tfid(int index) const;
  ::common::TeamFieldId* _internal_add_tfid();
  public:
  const ::common::TeamFieldId& tfid(int index) const;
  ::common::TeamFieldId* add_tfid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamFieldId >&
      tfid() const;

  // repeated .common.TeamFieldByte tfbyte = 2;
  int tfbyte_size() const;
  private:
  int _internal_tfbyte_size() const;
  public:
  void clear_tfbyte();
  ::common::TeamFieldByte* mutable_tfbyte(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamFieldByte >*
      mutable_tfbyte();
  private:
  const ::common::TeamFieldByte& _internal_tfbyte(int index) const;
  ::common::TeamFieldByte* _internal_add_tfbyte();
  public:
  const ::common::TeamFieldByte& tfbyte(int index) const;
  ::common::TeamFieldByte* add_tfbyte();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamFieldByte >&
      tfbyte() const;

  // @@protoc_insertion_point(class_scope:common.TeamFieldList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamFieldId > tfid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamFieldByte > tfbyte_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teamcommon_2eproto;
};
// -------------------------------------------------------------------

class TeamVoteBaseData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.TeamVoteBaseData) */ {
 public:
  inline TeamVoteBaseData() : TeamVoteBaseData(nullptr) {}
  ~TeamVoteBaseData() override;
  explicit PROTOBUF_CONSTEXPR TeamVoteBaseData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamVoteBaseData(const TeamVoteBaseData& from);
  TeamVoteBaseData(TeamVoteBaseData&& from) noexcept
    : TeamVoteBaseData() {
    *this = ::std::move(from);
  }

  inline TeamVoteBaseData& operator=(const TeamVoteBaseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamVoteBaseData& operator=(TeamVoteBaseData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeamVoteBaseData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamVoteBaseData* internal_default_instance() {
    return reinterpret_cast<const TeamVoteBaseData*>(
               &_TeamVoteBaseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(TeamVoteBaseData& a, TeamVoteBaseData& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamVoteBaseData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamVoteBaseData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeamVoteBaseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeamVoteBaseData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeamVoteBaseData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TeamVoteBaseData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamVoteBaseData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.TeamVoteBaseData";
  }
  protected:
  explicit TeamVoteBaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 2,
    kExpireTimeFieldNumber = 1,
  };
  // uint64 roleId = 2;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // uint32 expireTime = 1;
  void clear_expiretime();
  uint32_t expiretime() const;
  void set_expiretime(uint32_t value);
  private:
  uint32_t _internal_expiretime() const;
  void _internal_set_expiretime(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.TeamVoteBaseData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t roleid_;
  uint32_t expiretime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teamcommon_2eproto;
};
// -------------------------------------------------------------------

class TeamMemberFieldId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.TeamMemberFieldId) */ {
 public:
  inline TeamMemberFieldId() : TeamMemberFieldId(nullptr) {}
  ~TeamMemberFieldId() override;
  explicit PROTOBUF_CONSTEXPR TeamMemberFieldId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamMemberFieldId(const TeamMemberFieldId& from);
  TeamMemberFieldId(TeamMemberFieldId&& from) noexcept
    : TeamMemberFieldId() {
    *this = ::std::move(from);
  }

  inline TeamMemberFieldId& operator=(const TeamMemberFieldId& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamMemberFieldId& operator=(TeamMemberFieldId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeamMemberFieldId& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamMemberFieldId* internal_default_instance() {
    return reinterpret_cast<const TeamMemberFieldId*>(
               &_TeamMemberFieldId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(TeamMemberFieldId& a, TeamMemberFieldId& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamMemberFieldId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamMemberFieldId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeamMemberFieldId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeamMemberFieldId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeamMemberFieldId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TeamMemberFieldId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamMemberFieldId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.TeamMemberFieldId";
  }
  protected:
  explicit TeamMemberFieldId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // uint64 val = 2;
  void clear_val();
  uint64_t val() const;
  void set_val(uint64_t value);
  private:
  uint64_t _internal_val() const;
  void _internal_set_val(uint64_t value);
  public:

  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.TeamMemberFieldId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t val_;
  uint32_t type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teamcommon_2eproto;
};
// -------------------------------------------------------------------

class TeamMemberFieldBool final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.TeamMemberFieldBool) */ {
 public:
  inline TeamMemberFieldBool() : TeamMemberFieldBool(nullptr) {}
  ~TeamMemberFieldBool() override;
  explicit PROTOBUF_CONSTEXPR TeamMemberFieldBool(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamMemberFieldBool(const TeamMemberFieldBool& from);
  TeamMemberFieldBool(TeamMemberFieldBool&& from) noexcept
    : TeamMemberFieldBool() {
    *this = ::std::move(from);
  }

  inline TeamMemberFieldBool& operator=(const TeamMemberFieldBool& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamMemberFieldBool& operator=(TeamMemberFieldBool&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeamMemberFieldBool& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamMemberFieldBool* internal_default_instance() {
    return reinterpret_cast<const TeamMemberFieldBool*>(
               &_TeamMemberFieldBool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(TeamMemberFieldBool& a, TeamMemberFieldBool& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamMemberFieldBool* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamMemberFieldBool* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeamMemberFieldBool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeamMemberFieldBool>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeamMemberFieldBool& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TeamMemberFieldBool& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamMemberFieldBool* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.TeamMemberFieldBool";
  }
  protected:
  explicit TeamMemberFieldBool(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValFieldNumber = 2,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // bool val = 2;
  void clear_val();
  bool val() const;
  void set_val(bool value);
  private:
  bool _internal_val() const;
  void _internal_set_val(bool value);
  public:

  // @@protoc_insertion_point(class_scope:common.TeamMemberFieldBool)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t type_;
  bool val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teamcommon_2eproto;
};
// -------------------------------------------------------------------

class TeamMemberFieldByte final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.TeamMemberFieldByte) */ {
 public:
  inline TeamMemberFieldByte() : TeamMemberFieldByte(nullptr) {}
  ~TeamMemberFieldByte() override;
  explicit PROTOBUF_CONSTEXPR TeamMemberFieldByte(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamMemberFieldByte(const TeamMemberFieldByte& from);
  TeamMemberFieldByte(TeamMemberFieldByte&& from) noexcept
    : TeamMemberFieldByte() {
    *this = ::std::move(from);
  }

  inline TeamMemberFieldByte& operator=(const TeamMemberFieldByte& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamMemberFieldByte& operator=(TeamMemberFieldByte&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeamMemberFieldByte& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamMemberFieldByte* internal_default_instance() {
    return reinterpret_cast<const TeamMemberFieldByte*>(
               &_TeamMemberFieldByte_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(TeamMemberFieldByte& a, TeamMemberFieldByte& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamMemberFieldByte* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamMemberFieldByte* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeamMemberFieldByte* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeamMemberFieldByte>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeamMemberFieldByte& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TeamMemberFieldByte& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamMemberFieldByte* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.TeamMemberFieldByte";
  }
  protected:
  explicit TeamMemberFieldByte(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes val = 2;
  void clear_val();
  const std::string& val() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_val(ArgT0&& arg0, ArgT... args);
  std::string* mutable_val();
  PROTOBUF_NODISCARD std::string* release_val();
  void set_allocated_val(std::string* val);
  private:
  const std::string& _internal_val() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_val(const std::string& value);
  std::string* _internal_mutable_val();
  public:

  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.TeamMemberFieldByte)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
  uint32_t type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teamcommon_2eproto;
};
// -------------------------------------------------------------------

class TeamMemberFieldList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.TeamMemberFieldList) */ {
 public:
  inline TeamMemberFieldList() : TeamMemberFieldList(nullptr) {}
  ~TeamMemberFieldList() override;
  explicit PROTOBUF_CONSTEXPR TeamMemberFieldList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamMemberFieldList(const TeamMemberFieldList& from);
  TeamMemberFieldList(TeamMemberFieldList&& from) noexcept
    : TeamMemberFieldList() {
    *this = ::std::move(from);
  }

  inline TeamMemberFieldList& operator=(const TeamMemberFieldList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamMemberFieldList& operator=(TeamMemberFieldList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeamMemberFieldList& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamMemberFieldList* internal_default_instance() {
    return reinterpret_cast<const TeamMemberFieldList*>(
               &_TeamMemberFieldList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(TeamMemberFieldList& a, TeamMemberFieldList& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamMemberFieldList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamMemberFieldList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeamMemberFieldList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeamMemberFieldList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeamMemberFieldList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TeamMemberFieldList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamMemberFieldList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.TeamMemberFieldList";
  }
  protected:
  explicit TeamMemberFieldList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTfidFieldNumber = 1,
    kTfbyteFieldNumber = 2,
    kTfboolFieldNumber = 3,
  };
  // repeated .common.TeamMemberFieldId tfid = 1;
  int tfid_size() const;
  private:
  int _internal_tfid_size() const;
  public:
  void clear_tfid();
  ::common::TeamMemberFieldId* mutable_tfid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamMemberFieldId >*
      mutable_tfid();
  private:
  const ::common::TeamMemberFieldId& _internal_tfid(int index) const;
  ::common::TeamMemberFieldId* _internal_add_tfid();
  public:
  const ::common::TeamMemberFieldId& tfid(int index) const;
  ::common::TeamMemberFieldId* add_tfid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamMemberFieldId >&
      tfid() const;

  // repeated .common.TeamMemberFieldByte tfbyte = 2;
  int tfbyte_size() const;
  private:
  int _internal_tfbyte_size() const;
  public:
  void clear_tfbyte();
  ::common::TeamMemberFieldByte* mutable_tfbyte(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamMemberFieldByte >*
      mutable_tfbyte();
  private:
  const ::common::TeamMemberFieldByte& _internal_tfbyte(int index) const;
  ::common::TeamMemberFieldByte* _internal_add_tfbyte();
  public:
  const ::common::TeamMemberFieldByte& tfbyte(int index) const;
  ::common::TeamMemberFieldByte* add_tfbyte();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamMemberFieldByte >&
      tfbyte() const;

  // repeated .common.TeamMemberFieldBool tfbool = 3;
  int tfbool_size() const;
  private:
  int _internal_tfbool_size() const;
  public:
  void clear_tfbool();
  ::common::TeamMemberFieldBool* mutable_tfbool(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamMemberFieldBool >*
      mutable_tfbool();
  private:
  const ::common::TeamMemberFieldBool& _internal_tfbool(int index) const;
  ::common::TeamMemberFieldBool* _internal_add_tfbool();
  public:
  const ::common::TeamMemberFieldBool& tfbool(int index) const;
  ::common::TeamMemberFieldBool* add_tfbool();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamMemberFieldBool >&
      tfbool() const;

  // @@protoc_insertion_point(class_scope:common.TeamMemberFieldList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamMemberFieldId > tfid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamMemberFieldByte > tfbyte_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamMemberFieldBool > tfbool_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teamcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ModuleTeam

// .common.NotOwnTeamInfo notteam = 1;
inline bool ModuleTeam::_internal_has_notteam() const {
  return this != internal_default_instance() && notteam_ != nullptr;
}
inline bool ModuleTeam::has_notteam() const {
  return _internal_has_notteam();
}
inline void ModuleTeam::clear_notteam() {
  if (GetArenaForAllocation() == nullptr && notteam_ != nullptr) {
    delete notteam_;
  }
  notteam_ = nullptr;
}
inline const ::common::NotOwnTeamInfo& ModuleTeam::_internal_notteam() const {
  const ::common::NotOwnTeamInfo* p = notteam_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::NotOwnTeamInfo&>(
      ::common::_NotOwnTeamInfo_default_instance_);
}
inline const ::common::NotOwnTeamInfo& ModuleTeam::notteam() const {
  // @@protoc_insertion_point(field_get:common.ModuleTeam.notteam)
  return _internal_notteam();
}
inline void ModuleTeam::unsafe_arena_set_allocated_notteam(
    ::common::NotOwnTeamInfo* notteam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(notteam_);
  }
  notteam_ = notteam;
  if (notteam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ModuleTeam.notteam)
}
inline ::common::NotOwnTeamInfo* ModuleTeam::release_notteam() {
  
  ::common::NotOwnTeamInfo* temp = notteam_;
  notteam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::NotOwnTeamInfo* ModuleTeam::unsafe_arena_release_notteam() {
  // @@protoc_insertion_point(field_release:common.ModuleTeam.notteam)
  
  ::common::NotOwnTeamInfo* temp = notteam_;
  notteam_ = nullptr;
  return temp;
}
inline ::common::NotOwnTeamInfo* ModuleTeam::_internal_mutable_notteam() {
  
  if (notteam_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::NotOwnTeamInfo>(GetArenaForAllocation());
    notteam_ = p;
  }
  return notteam_;
}
inline ::common::NotOwnTeamInfo* ModuleTeam::mutable_notteam() {
  ::common::NotOwnTeamInfo* _msg = _internal_mutable_notteam();
  // @@protoc_insertion_point(field_mutable:common.ModuleTeam.notteam)
  return _msg;
}
inline void ModuleTeam::set_allocated_notteam(::common::NotOwnTeamInfo* notteam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete notteam_;
  }
  if (notteam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(notteam);
    if (message_arena != submessage_arena) {
      notteam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notteam, submessage_arena);
    }
    
  } else {
    
  }
  notteam_ = notteam;
  // @@protoc_insertion_point(field_set_allocated:common.ModuleTeam.notteam)
}

// .common.OwnTeamInfo ownTeam = 2;
inline bool ModuleTeam::_internal_has_ownteam() const {
  return this != internal_default_instance() && ownteam_ != nullptr;
}
inline bool ModuleTeam::has_ownteam() const {
  return _internal_has_ownteam();
}
inline void ModuleTeam::clear_ownteam() {
  if (GetArenaForAllocation() == nullptr && ownteam_ != nullptr) {
    delete ownteam_;
  }
  ownteam_ = nullptr;
}
inline const ::common::OwnTeamInfo& ModuleTeam::_internal_ownteam() const {
  const ::common::OwnTeamInfo* p = ownteam_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::OwnTeamInfo&>(
      ::common::_OwnTeamInfo_default_instance_);
}
inline const ::common::OwnTeamInfo& ModuleTeam::ownteam() const {
  // @@protoc_insertion_point(field_get:common.ModuleTeam.ownTeam)
  return _internal_ownteam();
}
inline void ModuleTeam::unsafe_arena_set_allocated_ownteam(
    ::common::OwnTeamInfo* ownteam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ownteam_);
  }
  ownteam_ = ownteam;
  if (ownteam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ModuleTeam.ownTeam)
}
inline ::common::OwnTeamInfo* ModuleTeam::release_ownteam() {
  
  ::common::OwnTeamInfo* temp = ownteam_;
  ownteam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::OwnTeamInfo* ModuleTeam::unsafe_arena_release_ownteam() {
  // @@protoc_insertion_point(field_release:common.ModuleTeam.ownTeam)
  
  ::common::OwnTeamInfo* temp = ownteam_;
  ownteam_ = nullptr;
  return temp;
}
inline ::common::OwnTeamInfo* ModuleTeam::_internal_mutable_ownteam() {
  
  if (ownteam_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::OwnTeamInfo>(GetArenaForAllocation());
    ownteam_ = p;
  }
  return ownteam_;
}
inline ::common::OwnTeamInfo* ModuleTeam::mutable_ownteam() {
  ::common::OwnTeamInfo* _msg = _internal_mutable_ownteam();
  // @@protoc_insertion_point(field_mutable:common.ModuleTeam.ownTeam)
  return _msg;
}
inline void ModuleTeam::set_allocated_ownteam(::common::OwnTeamInfo* ownteam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ownteam_;
  }
  if (ownteam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ownteam);
    if (message_arena != submessage_arena) {
      ownteam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ownteam, submessage_arena);
    }
    
  } else {
    
  }
  ownteam_ = ownteam;
  // @@protoc_insertion_point(field_set_allocated:common.ModuleTeam.ownTeam)
}

// .common.TeamBase base = 3;
inline bool ModuleTeam::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool ModuleTeam::has_base() const {
  return _internal_has_base();
}
inline void ModuleTeam::clear_base() {
  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::common::TeamBase& ModuleTeam::_internal_base() const {
  const ::common::TeamBase* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::TeamBase&>(
      ::common::_TeamBase_default_instance_);
}
inline const ::common::TeamBase& ModuleTeam::base() const {
  // @@protoc_insertion_point(field_get:common.ModuleTeam.base)
  return _internal_base();
}
inline void ModuleTeam::unsafe_arena_set_allocated_base(
    ::common::TeamBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ModuleTeam.base)
}
inline ::common::TeamBase* ModuleTeam::release_base() {
  
  ::common::TeamBase* temp = base_;
  base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::TeamBase* ModuleTeam::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:common.ModuleTeam.base)
  
  ::common::TeamBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::common::TeamBase* ModuleTeam::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::TeamBase>(GetArenaForAllocation());
    base_ = p;
  }
  return base_;
}
inline ::common::TeamBase* ModuleTeam::mutable_base() {
  ::common::TeamBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:common.ModuleTeam.base)
  return _msg;
}
inline void ModuleTeam::set_allocated_base(::common::TeamBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:common.ModuleTeam.base)
}

// .common.TeamMemberList memberList = 4;
inline bool ModuleTeam::_internal_has_memberlist() const {
  return this != internal_default_instance() && memberlist_ != nullptr;
}
inline bool ModuleTeam::has_memberlist() const {
  return _internal_has_memberlist();
}
inline void ModuleTeam::clear_memberlist() {
  if (GetArenaForAllocation() == nullptr && memberlist_ != nullptr) {
    delete memberlist_;
  }
  memberlist_ = nullptr;
}
inline const ::common::TeamMemberList& ModuleTeam::_internal_memberlist() const {
  const ::common::TeamMemberList* p = memberlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::TeamMemberList&>(
      ::common::_TeamMemberList_default_instance_);
}
inline const ::common::TeamMemberList& ModuleTeam::memberlist() const {
  // @@protoc_insertion_point(field_get:common.ModuleTeam.memberList)
  return _internal_memberlist();
}
inline void ModuleTeam::unsafe_arena_set_allocated_memberlist(
    ::common::TeamMemberList* memberlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memberlist_);
  }
  memberlist_ = memberlist;
  if (memberlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ModuleTeam.memberList)
}
inline ::common::TeamMemberList* ModuleTeam::release_memberlist() {
  
  ::common::TeamMemberList* temp = memberlist_;
  memberlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::TeamMemberList* ModuleTeam::unsafe_arena_release_memberlist() {
  // @@protoc_insertion_point(field_release:common.ModuleTeam.memberList)
  
  ::common::TeamMemberList* temp = memberlist_;
  memberlist_ = nullptr;
  return temp;
}
inline ::common::TeamMemberList* ModuleTeam::_internal_mutable_memberlist() {
  
  if (memberlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::TeamMemberList>(GetArenaForAllocation());
    memberlist_ = p;
  }
  return memberlist_;
}
inline ::common::TeamMemberList* ModuleTeam::mutable_memberlist() {
  ::common::TeamMemberList* _msg = _internal_mutable_memberlist();
  // @@protoc_insertion_point(field_mutable:common.ModuleTeam.memberList)
  return _msg;
}
inline void ModuleTeam::set_allocated_memberlist(::common::TeamMemberList* memberlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete memberlist_;
  }
  if (memberlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(memberlist);
    if (message_arena != submessage_arena) {
      memberlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memberlist, submessage_arena);
    }
    
  } else {
    
  }
  memberlist_ = memberlist;
  // @@protoc_insertion_point(field_set_allocated:common.ModuleTeam.memberList)
}

// .common.TeamApplyList applyList = 5;
inline bool ModuleTeam::_internal_has_applylist() const {
  return this != internal_default_instance() && applylist_ != nullptr;
}
inline bool ModuleTeam::has_applylist() const {
  return _internal_has_applylist();
}
inline void ModuleTeam::clear_applylist() {
  if (GetArenaForAllocation() == nullptr && applylist_ != nullptr) {
    delete applylist_;
  }
  applylist_ = nullptr;
}
inline const ::common::TeamApplyList& ModuleTeam::_internal_applylist() const {
  const ::common::TeamApplyList* p = applylist_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::TeamApplyList&>(
      ::common::_TeamApplyList_default_instance_);
}
inline const ::common::TeamApplyList& ModuleTeam::applylist() const {
  // @@protoc_insertion_point(field_get:common.ModuleTeam.applyList)
  return _internal_applylist();
}
inline void ModuleTeam::unsafe_arena_set_allocated_applylist(
    ::common::TeamApplyList* applylist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applylist_);
  }
  applylist_ = applylist;
  if (applylist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ModuleTeam.applyList)
}
inline ::common::TeamApplyList* ModuleTeam::release_applylist() {
  
  ::common::TeamApplyList* temp = applylist_;
  applylist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::TeamApplyList* ModuleTeam::unsafe_arena_release_applylist() {
  // @@protoc_insertion_point(field_release:common.ModuleTeam.applyList)
  
  ::common::TeamApplyList* temp = applylist_;
  applylist_ = nullptr;
  return temp;
}
inline ::common::TeamApplyList* ModuleTeam::_internal_mutable_applylist() {
  
  if (applylist_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::TeamApplyList>(GetArenaForAllocation());
    applylist_ = p;
  }
  return applylist_;
}
inline ::common::TeamApplyList* ModuleTeam::mutable_applylist() {
  ::common::TeamApplyList* _msg = _internal_mutable_applylist();
  // @@protoc_insertion_point(field_mutable:common.ModuleTeam.applyList)
  return _msg;
}
inline void ModuleTeam::set_allocated_applylist(::common::TeamApplyList* applylist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete applylist_;
  }
  if (applylist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(applylist);
    if (message_arena != submessage_arena) {
      applylist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applylist, submessage_arena);
    }
    
  } else {
    
  }
  applylist_ = applylist;
  // @@protoc_insertion_point(field_set_allocated:common.ModuleTeam.applyList)
}

// -------------------------------------------------------------------

// ModuleTeamView

// uint64 teamid = 1;
inline void ModuleTeamView::clear_teamid() {
  teamid_ = uint64_t{0u};
}
inline uint64_t ModuleTeamView::_internal_teamid() const {
  return teamid_;
}
inline uint64_t ModuleTeamView::teamid() const {
  // @@protoc_insertion_point(field_get:common.ModuleTeamView.teamid)
  return _internal_teamid();
}
inline void ModuleTeamView::_internal_set_teamid(uint64_t value) {
  
  teamid_ = value;
}
inline void ModuleTeamView::set_teamid(uint64_t value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:common.ModuleTeamView.teamid)
}

// uint64 leaderSceneId = 2;
inline void ModuleTeamView::clear_leadersceneid() {
  leadersceneid_ = uint64_t{0u};
}
inline uint64_t ModuleTeamView::_internal_leadersceneid() const {
  return leadersceneid_;
}
inline uint64_t ModuleTeamView::leadersceneid() const {
  // @@protoc_insertion_point(field_get:common.ModuleTeamView.leaderSceneId)
  return _internal_leadersceneid();
}
inline void ModuleTeamView::_internal_set_leadersceneid(uint64_t value) {
  
  leadersceneid_ = value;
}
inline void ModuleTeamView::set_leadersceneid(uint64_t value) {
  _internal_set_leadersceneid(value);
  // @@protoc_insertion_point(field_set:common.ModuleTeamView.leaderSceneId)
}

// -------------------------------------------------------------------

// NotOwnTeamInfo

// .common.TeamInvited invited = 1;
inline bool NotOwnTeamInfo::_internal_has_invited() const {
  return this != internal_default_instance() && invited_ != nullptr;
}
inline bool NotOwnTeamInfo::has_invited() const {
  return _internal_has_invited();
}
inline void NotOwnTeamInfo::clear_invited() {
  if (GetArenaForAllocation() == nullptr && invited_ != nullptr) {
    delete invited_;
  }
  invited_ = nullptr;
}
inline const ::common::TeamInvited& NotOwnTeamInfo::_internal_invited() const {
  const ::common::TeamInvited* p = invited_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::TeamInvited&>(
      ::common::_TeamInvited_default_instance_);
}
inline const ::common::TeamInvited& NotOwnTeamInfo::invited() const {
  // @@protoc_insertion_point(field_get:common.NotOwnTeamInfo.invited)
  return _internal_invited();
}
inline void NotOwnTeamInfo::unsafe_arena_set_allocated_invited(
    ::common::TeamInvited* invited) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invited_);
  }
  invited_ = invited;
  if (invited) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.NotOwnTeamInfo.invited)
}
inline ::common::TeamInvited* NotOwnTeamInfo::release_invited() {
  
  ::common::TeamInvited* temp = invited_;
  invited_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::TeamInvited* NotOwnTeamInfo::unsafe_arena_release_invited() {
  // @@protoc_insertion_point(field_release:common.NotOwnTeamInfo.invited)
  
  ::common::TeamInvited* temp = invited_;
  invited_ = nullptr;
  return temp;
}
inline ::common::TeamInvited* NotOwnTeamInfo::_internal_mutable_invited() {
  
  if (invited_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::TeamInvited>(GetArenaForAllocation());
    invited_ = p;
  }
  return invited_;
}
inline ::common::TeamInvited* NotOwnTeamInfo::mutable_invited() {
  ::common::TeamInvited* _msg = _internal_mutable_invited();
  // @@protoc_insertion_point(field_mutable:common.NotOwnTeamInfo.invited)
  return _msg;
}
inline void NotOwnTeamInfo::set_allocated_invited(::common::TeamInvited* invited) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete invited_;
  }
  if (invited) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(invited);
    if (message_arena != submessage_arena) {
      invited = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invited, submessage_arena);
    }
    
  } else {
    
  }
  invited_ = invited;
  // @@protoc_insertion_point(field_set_allocated:common.NotOwnTeamInfo.invited)
}

// uint32 apply = 2;
inline void NotOwnTeamInfo::clear_apply() {
  apply_ = 0u;
}
inline uint32_t NotOwnTeamInfo::_internal_apply() const {
  return apply_;
}
inline uint32_t NotOwnTeamInfo::apply() const {
  // @@protoc_insertion_point(field_get:common.NotOwnTeamInfo.apply)
  return _internal_apply();
}
inline void NotOwnTeamInfo::_internal_set_apply(uint32_t value) {
  
  apply_ = value;
}
inline void NotOwnTeamInfo::set_apply(uint32_t value) {
  _internal_set_apply(value);
  // @@protoc_insertion_point(field_set:common.NotOwnTeamInfo.apply)
}

// uint32 create = 3;
inline void NotOwnTeamInfo::clear_create() {
  create_ = 0u;
}
inline uint32_t NotOwnTeamInfo::_internal_create() const {
  return create_;
}
inline uint32_t NotOwnTeamInfo::create() const {
  // @@protoc_insertion_point(field_get:common.NotOwnTeamInfo.create)
  return _internal_create();
}
inline void NotOwnTeamInfo::_internal_set_create(uint32_t value) {
  
  create_ = value;
}
inline void NotOwnTeamInfo::set_create(uint32_t value) {
  _internal_set_create(value);
  // @@protoc_insertion_point(field_set:common.NotOwnTeamInfo.create)
}

// uint32 match = 4;
inline void NotOwnTeamInfo::clear_match() {
  match_ = 0u;
}
inline uint32_t NotOwnTeamInfo::_internal_match() const {
  return match_;
}
inline uint32_t NotOwnTeamInfo::match() const {
  // @@protoc_insertion_point(field_get:common.NotOwnTeamInfo.match)
  return _internal_match();
}
inline void NotOwnTeamInfo::_internal_set_match(uint32_t value) {
  
  match_ = value;
}
inline void NotOwnTeamInfo::set_match(uint32_t value) {
  _internal_set_match(value);
  // @@protoc_insertion_point(field_set:common.NotOwnTeamInfo.match)
}

// uint32 allExpire = 5;
inline void NotOwnTeamInfo::clear_allexpire() {
  allexpire_ = 0u;
}
inline uint32_t NotOwnTeamInfo::_internal_allexpire() const {
  return allexpire_;
}
inline uint32_t NotOwnTeamInfo::allexpire() const {
  // @@protoc_insertion_point(field_get:common.NotOwnTeamInfo.allExpire)
  return _internal_allexpire();
}
inline void NotOwnTeamInfo::_internal_set_allexpire(uint32_t value) {
  
  allexpire_ = value;
}
inline void NotOwnTeamInfo::set_allexpire(uint32_t value) {
  _internal_set_allexpire(value);
  // @@protoc_insertion_point(field_set:common.NotOwnTeamInfo.allExpire)
}

// repeated uint32 targetIds = 6;
inline int NotOwnTeamInfo::_internal_targetids_size() const {
  return targetids_.size();
}
inline int NotOwnTeamInfo::targetids_size() const {
  return _internal_targetids_size();
}
inline void NotOwnTeamInfo::clear_targetids() {
  targetids_.Clear();
}
inline uint32_t NotOwnTeamInfo::_internal_targetids(int index) const {
  return targetids_.Get(index);
}
inline uint32_t NotOwnTeamInfo::targetids(int index) const {
  // @@protoc_insertion_point(field_get:common.NotOwnTeamInfo.targetIds)
  return _internal_targetids(index);
}
inline void NotOwnTeamInfo::set_targetids(int index, uint32_t value) {
  targetids_.Set(index, value);
  // @@protoc_insertion_point(field_set:common.NotOwnTeamInfo.targetIds)
}
inline void NotOwnTeamInfo::_internal_add_targetids(uint32_t value) {
  targetids_.Add(value);
}
inline void NotOwnTeamInfo::add_targetids(uint32_t value) {
  _internal_add_targetids(value);
  // @@protoc_insertion_point(field_add:common.NotOwnTeamInfo.targetIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
NotOwnTeamInfo::_internal_targetids() const {
  return targetids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
NotOwnTeamInfo::targetids() const {
  // @@protoc_insertion_point(field_list:common.NotOwnTeamInfo.targetIds)
  return _internal_targetids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
NotOwnTeamInfo::_internal_mutable_targetids() {
  return &targetids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
NotOwnTeamInfo::mutable_targetids() {
  // @@protoc_insertion_point(field_mutable_list:common.NotOwnTeamInfo.targetIds)
  return _internal_mutable_targetids();
}

// repeated uint32 expires = 7;
inline int NotOwnTeamInfo::_internal_expires_size() const {
  return expires_.size();
}
inline int NotOwnTeamInfo::expires_size() const {
  return _internal_expires_size();
}
inline void NotOwnTeamInfo::clear_expires() {
  expires_.Clear();
}
inline uint32_t NotOwnTeamInfo::_internal_expires(int index) const {
  return expires_.Get(index);
}
inline uint32_t NotOwnTeamInfo::expires(int index) const {
  // @@protoc_insertion_point(field_get:common.NotOwnTeamInfo.expires)
  return _internal_expires(index);
}
inline void NotOwnTeamInfo::set_expires(int index, uint32_t value) {
  expires_.Set(index, value);
  // @@protoc_insertion_point(field_set:common.NotOwnTeamInfo.expires)
}
inline void NotOwnTeamInfo::_internal_add_expires(uint32_t value) {
  expires_.Add(value);
}
inline void NotOwnTeamInfo::add_expires(uint32_t value) {
  _internal_add_expires(value);
  // @@protoc_insertion_point(field_add:common.NotOwnTeamInfo.expires)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
NotOwnTeamInfo::_internal_expires() const {
  return expires_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
NotOwnTeamInfo::expires() const {
  // @@protoc_insertion_point(field_list:common.NotOwnTeamInfo.expires)
  return _internal_expires();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
NotOwnTeamInfo::_internal_mutable_expires() {
  return &expires_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
NotOwnTeamInfo::mutable_expires() {
  // @@protoc_insertion_point(field_mutable_list:common.NotOwnTeamInfo.expires)
  return _internal_mutable_expires();
}

// -------------------------------------------------------------------

// OwnTeamInfo

// uint32 replace = 1;
inline void OwnTeamInfo::clear_replace() {
  replace_ = 0u;
}
inline uint32_t OwnTeamInfo::_internal_replace() const {
  return replace_;
}
inline uint32_t OwnTeamInfo::replace() const {
  // @@protoc_insertion_point(field_get:common.OwnTeamInfo.replace)
  return _internal_replace();
}
inline void OwnTeamInfo::_internal_set_replace(uint32_t value) {
  
  replace_ = value;
}
inline void OwnTeamInfo::set_replace(uint32_t value) {
  _internal_set_replace(value);
  // @@protoc_insertion_point(field_set:common.OwnTeamInfo.replace)
}

// uint32 invite = 2;
inline void OwnTeamInfo::clear_invite() {
  invite_ = 0u;
}
inline uint32_t OwnTeamInfo::_internal_invite() const {
  return invite_;
}
inline uint32_t OwnTeamInfo::invite() const {
  // @@protoc_insertion_point(field_get:common.OwnTeamInfo.invite)
  return _internal_invite();
}
inline void OwnTeamInfo::_internal_set_invite(uint32_t value) {
  
  invite_ = value;
}
inline void OwnTeamInfo::set_invite(uint32_t value) {
  _internal_set_invite(value);
  // @@protoc_insertion_point(field_set:common.OwnTeamInfo.invite)
}

// uint32 together = 3;
inline void OwnTeamInfo::clear_together() {
  together_ = 0u;
}
inline uint32_t OwnTeamInfo::_internal_together() const {
  return together_;
}
inline uint32_t OwnTeamInfo::together() const {
  // @@protoc_insertion_point(field_get:common.OwnTeamInfo.together)
  return _internal_together();
}
inline void OwnTeamInfo::_internal_set_together(uint32_t value) {
  
  together_ = value;
}
inline void OwnTeamInfo::set_together(uint32_t value) {
  _internal_set_together(value);
  // @@protoc_insertion_point(field_set:common.OwnTeamInfo.together)
}

// uint32 appoint = 4;
inline void OwnTeamInfo::clear_appoint() {
  appoint_ = 0u;
}
inline uint32_t OwnTeamInfo::_internal_appoint() const {
  return appoint_;
}
inline uint32_t OwnTeamInfo::appoint() const {
  // @@protoc_insertion_point(field_get:common.OwnTeamInfo.appoint)
  return _internal_appoint();
}
inline void OwnTeamInfo::_internal_set_appoint(uint32_t value) {
  
  appoint_ = value;
}
inline void OwnTeamInfo::set_appoint(uint32_t value) {
  _internal_set_appoint(value);
  // @@protoc_insertion_point(field_set:common.OwnTeamInfo.appoint)
}

// -------------------------------------------------------------------

// TeamInvited

// uint64 roleId = 1;
inline void TeamInvited::clear_roleid() {
  roleid_ = uint64_t{0u};
}
inline uint64_t TeamInvited::_internal_roleid() const {
  return roleid_;
}
inline uint64_t TeamInvited::roleid() const {
  // @@protoc_insertion_point(field_get:common.TeamInvited.roleId)
  return _internal_roleid();
}
inline void TeamInvited::_internal_set_roleid(uint64_t value) {
  
  roleid_ = value;
}
inline void TeamInvited::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:common.TeamInvited.roleId)
}

// bytes nickName = 2;
inline void TeamInvited::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& TeamInvited::nickname() const {
  // @@protoc_insertion_point(field_get:common.TeamInvited.nickName)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TeamInvited::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.TeamInvited.nickName)
}
inline std::string* TeamInvited::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:common.TeamInvited.nickName)
  return _s;
}
inline const std::string& TeamInvited::_internal_nickname() const {
  return nickname_.Get();
}
inline void TeamInvited::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* TeamInvited::_internal_mutable_nickname() {
  
  return nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* TeamInvited::release_nickname() {
  // @@protoc_insertion_point(field_release:common.TeamInvited.nickName)
  return nickname_.Release();
}
inline void TeamInvited::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nickname_.IsDefault()) {
    nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.TeamInvited.nickName)
}

// uint32 expire = 3;
inline void TeamInvited::clear_expire() {
  expire_ = 0u;
}
inline uint32_t TeamInvited::_internal_expire() const {
  return expire_;
}
inline uint32_t TeamInvited::expire() const {
  // @@protoc_insertion_point(field_get:common.TeamInvited.expire)
  return _internal_expire();
}
inline void TeamInvited::_internal_set_expire(uint32_t value) {
  
  expire_ = value;
}
inline void TeamInvited::set_expire(uint32_t value) {
  _internal_set_expire(value);
  // @@protoc_insertion_point(field_set:common.TeamInvited.expire)
}

// uint64 teamId = 4;
inline void TeamInvited::clear_teamid() {
  teamid_ = uint64_t{0u};
}
inline uint64_t TeamInvited::_internal_teamid() const {
  return teamid_;
}
inline uint64_t TeamInvited::teamid() const {
  // @@protoc_insertion_point(field_get:common.TeamInvited.teamId)
  return _internal_teamid();
}
inline void TeamInvited::_internal_set_teamid(uint64_t value) {
  
  teamid_ = value;
}
inline void TeamInvited::set_teamid(uint64_t value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:common.TeamInvited.teamId)
}

// uint64 leaderSceneId = 5;
inline void TeamInvited::clear_leadersceneid() {
  leadersceneid_ = uint64_t{0u};
}
inline uint64_t TeamInvited::_internal_leadersceneid() const {
  return leadersceneid_;
}
inline uint64_t TeamInvited::leadersceneid() const {
  // @@protoc_insertion_point(field_get:common.TeamInvited.leaderSceneId)
  return _internal_leadersceneid();
}
inline void TeamInvited::_internal_set_leadersceneid(uint64_t value) {
  
  leadersceneid_ = value;
}
inline void TeamInvited::set_leadersceneid(uint64_t value) {
  _internal_set_leadersceneid(value);
  // @@protoc_insertion_point(field_set:common.TeamInvited.leaderSceneId)
}

// -------------------------------------------------------------------

// TeamBase

// uint64 teamId = 1;
inline void TeamBase::clear_teamid() {
  teamid_ = uint64_t{0u};
}
inline uint64_t TeamBase::_internal_teamid() const {
  return teamid_;
}
inline uint64_t TeamBase::teamid() const {
  // @@protoc_insertion_point(field_get:common.TeamBase.teamId)
  return _internal_teamid();
}
inline void TeamBase::_internal_set_teamid(uint64_t value) {
  
  teamid_ = value;
}
inline void TeamBase::set_teamid(uint64_t value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:common.TeamBase.teamId)
}

// uint64 leaderId = 2;
inline void TeamBase::clear_leaderid() {
  leaderid_ = uint64_t{0u};
}
inline uint64_t TeamBase::_internal_leaderid() const {
  return leaderid_;
}
inline uint64_t TeamBase::leaderid() const {
  // @@protoc_insertion_point(field_get:common.TeamBase.leaderId)
  return _internal_leaderid();
}
inline void TeamBase::_internal_set_leaderid(uint64_t value) {
  
  leaderid_ = value;
}
inline void TeamBase::set_leaderid(uint64_t value) {
  _internal_set_leaderid(value);
  // @@protoc_insertion_point(field_set:common.TeamBase.leaderId)
}

// uint32 targetId = 3;
inline void TeamBase::clear_targetid() {
  targetid_ = 0u;
}
inline uint32_t TeamBase::_internal_targetid() const {
  return targetid_;
}
inline uint32_t TeamBase::targetid() const {
  // @@protoc_insertion_point(field_get:common.TeamBase.targetId)
  return _internal_targetid();
}
inline void TeamBase::_internal_set_targetid(uint32_t value) {
  
  targetid_ = value;
}
inline void TeamBase::set_targetid(uint32_t value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:common.TeamBase.targetId)
}

// uint32 minLevel = 4;
inline void TeamBase::clear_minlevel() {
  minlevel_ = 0u;
}
inline uint32_t TeamBase::_internal_minlevel() const {
  return minlevel_;
}
inline uint32_t TeamBase::minlevel() const {
  // @@protoc_insertion_point(field_get:common.TeamBase.minLevel)
  return _internal_minlevel();
}
inline void TeamBase::_internal_set_minlevel(uint32_t value) {
  
  minlevel_ = value;
}
inline void TeamBase::set_minlevel(uint32_t value) {
  _internal_set_minlevel(value);
  // @@protoc_insertion_point(field_set:common.TeamBase.minLevel)
}

// uint32 maxLevel = 5;
inline void TeamBase::clear_maxlevel() {
  maxlevel_ = 0u;
}
inline uint32_t TeamBase::_internal_maxlevel() const {
  return maxlevel_;
}
inline uint32_t TeamBase::maxlevel() const {
  // @@protoc_insertion_point(field_get:common.TeamBase.maxLevel)
  return _internal_maxlevel();
}
inline void TeamBase::_internal_set_maxlevel(uint32_t value) {
  
  maxlevel_ = value;
}
inline void TeamBase::set_maxlevel(uint32_t value) {
  _internal_set_maxlevel(value);
  // @@protoc_insertion_point(field_set:common.TeamBase.maxLevel)
}

// uint32 matchTime = 6;
inline void TeamBase::clear_matchtime() {
  matchtime_ = 0u;
}
inline uint32_t TeamBase::_internal_matchtime() const {
  return matchtime_;
}
inline uint32_t TeamBase::matchtime() const {
  // @@protoc_insertion_point(field_get:common.TeamBase.matchTime)
  return _internal_matchtime();
}
inline void TeamBase::_internal_set_matchtime(uint32_t value) {
  
  matchtime_ = value;
}
inline void TeamBase::set_matchtime(uint32_t value) {
  _internal_set_matchtime(value);
  // @@protoc_insertion_point(field_set:common.TeamBase.matchTime)
}

// bytes text = 7;
inline void TeamBase::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& TeamBase::text() const {
  // @@protoc_insertion_point(field_get:common.TeamBase.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TeamBase::set_text(ArgT0&& arg0, ArgT... args) {
 
 text_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.TeamBase.text)
}
inline std::string* TeamBase::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:common.TeamBase.text)
  return _s;
}
inline const std::string& TeamBase::_internal_text() const {
  return text_.Get();
}
inline void TeamBase::_internal_set_text(const std::string& value) {
  
  text_.Set(value, GetArenaForAllocation());
}
inline std::string* TeamBase::_internal_mutable_text() {
  
  return text_.Mutable(GetArenaForAllocation());
}
inline std::string* TeamBase::release_text() {
  // @@protoc_insertion_point(field_release:common.TeamBase.text)
  return text_.Release();
}
inline void TeamBase::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault()) {
    text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.TeamBase.text)
}

// uint64 leaderSceneId = 8;
inline void TeamBase::clear_leadersceneid() {
  leadersceneid_ = uint64_t{0u};
}
inline uint64_t TeamBase::_internal_leadersceneid() const {
  return leadersceneid_;
}
inline uint64_t TeamBase::leadersceneid() const {
  // @@protoc_insertion_point(field_get:common.TeamBase.leaderSceneId)
  return _internal_leadersceneid();
}
inline void TeamBase::_internal_set_leadersceneid(uint64_t value) {
  
  leadersceneid_ = value;
}
inline void TeamBase::set_leadersceneid(uint64_t value) {
  _internal_set_leadersceneid(value);
  // @@protoc_insertion_point(field_set:common.TeamBase.leaderSceneId)
}

// -------------------------------------------------------------------

// TeamMemberList

// repeated .common.TeamMember members = 1;
inline int TeamMemberList::_internal_members_size() const {
  return members_.size();
}
inline int TeamMemberList::members_size() const {
  return _internal_members_size();
}
inline void TeamMemberList::clear_members() {
  members_.Clear();
}
inline ::common::TeamMember* TeamMemberList::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:common.TeamMemberList.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamMember >*
TeamMemberList::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:common.TeamMemberList.members)
  return &members_;
}
inline const ::common::TeamMember& TeamMemberList::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::common::TeamMember& TeamMemberList::members(int index) const {
  // @@protoc_insertion_point(field_get:common.TeamMemberList.members)
  return _internal_members(index);
}
inline ::common::TeamMember* TeamMemberList::_internal_add_members() {
  return members_.Add();
}
inline ::common::TeamMember* TeamMemberList::add_members() {
  ::common::TeamMember* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:common.TeamMemberList.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamMember >&
TeamMemberList::members() const {
  // @@protoc_insertion_point(field_list:common.TeamMemberList.members)
  return members_;
}

// -------------------------------------------------------------------

// TeamApplyList

// repeated .common.TeamApply applys = 1;
inline int TeamApplyList::_internal_applys_size() const {
  return applys_.size();
}
inline int TeamApplyList::applys_size() const {
  return _internal_applys_size();
}
inline void TeamApplyList::clear_applys() {
  applys_.Clear();
}
inline ::common::TeamApply* TeamApplyList::mutable_applys(int index) {
  // @@protoc_insertion_point(field_mutable:common.TeamApplyList.applys)
  return applys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamApply >*
TeamApplyList::mutable_applys() {
  // @@protoc_insertion_point(field_mutable_list:common.TeamApplyList.applys)
  return &applys_;
}
inline const ::common::TeamApply& TeamApplyList::_internal_applys(int index) const {
  return applys_.Get(index);
}
inline const ::common::TeamApply& TeamApplyList::applys(int index) const {
  // @@protoc_insertion_point(field_get:common.TeamApplyList.applys)
  return _internal_applys(index);
}
inline ::common::TeamApply* TeamApplyList::_internal_add_applys() {
  return applys_.Add();
}
inline ::common::TeamApply* TeamApplyList::add_applys() {
  ::common::TeamApply* _add = _internal_add_applys();
  // @@protoc_insertion_point(field_add:common.TeamApplyList.applys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamApply >&
TeamApplyList::applys() const {
  // @@protoc_insertion_point(field_list:common.TeamApplyList.applys)
  return applys_;
}

// -------------------------------------------------------------------

// TeamMember

// .common.RoleBrief role = 1;
inline bool TeamMember::_internal_has_role() const {
  return this != internal_default_instance() && role_ != nullptr;
}
inline bool TeamMember::has_role() const {
  return _internal_has_role();
}
inline const ::common::RoleBrief& TeamMember::_internal_role() const {
  const ::common::RoleBrief* p = role_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleBrief&>(
      ::common::_RoleBrief_default_instance_);
}
inline const ::common::RoleBrief& TeamMember::role() const {
  // @@protoc_insertion_point(field_get:common.TeamMember.role)
  return _internal_role();
}
inline void TeamMember::unsafe_arena_set_allocated_role(
    ::common::RoleBrief* role) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_);
  }
  role_ = role;
  if (role) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.TeamMember.role)
}
inline ::common::RoleBrief* TeamMember::release_role() {
  
  ::common::RoleBrief* temp = role_;
  role_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleBrief* TeamMember::unsafe_arena_release_role() {
  // @@protoc_insertion_point(field_release:common.TeamMember.role)
  
  ::common::RoleBrief* temp = role_;
  role_ = nullptr;
  return temp;
}
inline ::common::RoleBrief* TeamMember::_internal_mutable_role() {
  
  if (role_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleBrief>(GetArenaForAllocation());
    role_ = p;
  }
  return role_;
}
inline ::common::RoleBrief* TeamMember::mutable_role() {
  ::common::RoleBrief* _msg = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:common.TeamMember.role)
  return _msg;
}
inline void TeamMember::set_allocated_role(::common::RoleBrief* role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_);
  }
  if (role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role));
    if (message_arena != submessage_arena) {
      role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    
  } else {
    
  }
  role_ = role;
  // @@protoc_insertion_point(field_set_allocated:common.TeamMember.role)
}

// uint32 index = 2;
inline void TeamMember::clear_index() {
  index_ = 0u;
}
inline uint32_t TeamMember::_internal_index() const {
  return index_;
}
inline uint32_t TeamMember::index() const {
  // @@protoc_insertion_point(field_get:common.TeamMember.index)
  return _internal_index();
}
inline void TeamMember::_internal_set_index(uint32_t value) {
  
  index_ = value;
}
inline void TeamMember::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:common.TeamMember.index)
}

// bool state = 3;
inline void TeamMember::clear_state() {
  state_ = false;
}
inline bool TeamMember::_internal_state() const {
  return state_;
}
inline bool TeamMember::state() const {
  // @@protoc_insertion_point(field_get:common.TeamMember.state)
  return _internal_state();
}
inline void TeamMember::_internal_set_state(bool value) {
  
  state_ = value;
}
inline void TeamMember::set_state(bool value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:common.TeamMember.state)
}

// bool follow = 4;
inline void TeamMember::clear_follow() {
  follow_ = false;
}
inline bool TeamMember::_internal_follow() const {
  return follow_;
}
inline bool TeamMember::follow() const {
  // @@protoc_insertion_point(field_get:common.TeamMember.follow)
  return _internal_follow();
}
inline void TeamMember::_internal_set_follow(bool value) {
  
  follow_ = value;
}
inline void TeamMember::set_follow(bool value) {
  _internal_set_follow(value);
  // @@protoc_insertion_point(field_set:common.TeamMember.follow)
}

// .common.RoleExtend1 extd1 = 5;
inline bool TeamMember::_internal_has_extd1() const {
  return this != internal_default_instance() && extd1_ != nullptr;
}
inline bool TeamMember::has_extd1() const {
  return _internal_has_extd1();
}
inline const ::common::RoleExtend1& TeamMember::_internal_extd1() const {
  const ::common::RoleExtend1* p = extd1_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleExtend1&>(
      ::common::_RoleExtend1_default_instance_);
}
inline const ::common::RoleExtend1& TeamMember::extd1() const {
  // @@protoc_insertion_point(field_get:common.TeamMember.extd1)
  return _internal_extd1();
}
inline void TeamMember::unsafe_arena_set_allocated_extd1(
    ::common::RoleExtend1* extd1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd1_);
  }
  extd1_ = extd1;
  if (extd1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.TeamMember.extd1)
}
inline ::common::RoleExtend1* TeamMember::release_extd1() {
  
  ::common::RoleExtend1* temp = extd1_;
  extd1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleExtend1* TeamMember::unsafe_arena_release_extd1() {
  // @@protoc_insertion_point(field_release:common.TeamMember.extd1)
  
  ::common::RoleExtend1* temp = extd1_;
  extd1_ = nullptr;
  return temp;
}
inline ::common::RoleExtend1* TeamMember::_internal_mutable_extd1() {
  
  if (extd1_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleExtend1>(GetArenaForAllocation());
    extd1_ = p;
  }
  return extd1_;
}
inline ::common::RoleExtend1* TeamMember::mutable_extd1() {
  ::common::RoleExtend1* _msg = _internal_mutable_extd1();
  // @@protoc_insertion_point(field_mutable:common.TeamMember.extd1)
  return _msg;
}
inline void TeamMember::set_allocated_extd1(::common::RoleExtend1* extd1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd1_);
  }
  if (extd1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd1));
    if (message_arena != submessage_arena) {
      extd1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extd1, submessage_arena);
    }
    
  } else {
    
  }
  extd1_ = extd1;
  // @@protoc_insertion_point(field_set_allocated:common.TeamMember.extd1)
}

// .common.RoleExtend2 extd2 = 6;
inline bool TeamMember::_internal_has_extd2() const {
  return this != internal_default_instance() && extd2_ != nullptr;
}
inline bool TeamMember::has_extd2() const {
  return _internal_has_extd2();
}
inline const ::common::RoleExtend2& TeamMember::_internal_extd2() const {
  const ::common::RoleExtend2* p = extd2_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleExtend2&>(
      ::common::_RoleExtend2_default_instance_);
}
inline const ::common::RoleExtend2& TeamMember::extd2() const {
  // @@protoc_insertion_point(field_get:common.TeamMember.extd2)
  return _internal_extd2();
}
inline void TeamMember::unsafe_arena_set_allocated_extd2(
    ::common::RoleExtend2* extd2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd2_);
  }
  extd2_ = extd2;
  if (extd2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.TeamMember.extd2)
}
inline ::common::RoleExtend2* TeamMember::release_extd2() {
  
  ::common::RoleExtend2* temp = extd2_;
  extd2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleExtend2* TeamMember::unsafe_arena_release_extd2() {
  // @@protoc_insertion_point(field_release:common.TeamMember.extd2)
  
  ::common::RoleExtend2* temp = extd2_;
  extd2_ = nullptr;
  return temp;
}
inline ::common::RoleExtend2* TeamMember::_internal_mutable_extd2() {
  
  if (extd2_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleExtend2>(GetArenaForAllocation());
    extd2_ = p;
  }
  return extd2_;
}
inline ::common::RoleExtend2* TeamMember::mutable_extd2() {
  ::common::RoleExtend2* _msg = _internal_mutable_extd2();
  // @@protoc_insertion_point(field_mutable:common.TeamMember.extd2)
  return _msg;
}
inline void TeamMember::set_allocated_extd2(::common::RoleExtend2* extd2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd2_);
  }
  if (extd2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd2));
    if (message_arena != submessage_arena) {
      extd2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extd2, submessage_arena);
    }
    
  } else {
    
  }
  extd2_ = extd2;
  // @@protoc_insertion_point(field_set_allocated:common.TeamMember.extd2)
}

// .common.RoleExtend3 extd3 = 7;
inline bool TeamMember::_internal_has_extd3() const {
  return this != internal_default_instance() && extd3_ != nullptr;
}
inline bool TeamMember::has_extd3() const {
  return _internal_has_extd3();
}
inline const ::common::RoleExtend3& TeamMember::_internal_extd3() const {
  const ::common::RoleExtend3* p = extd3_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleExtend3&>(
      ::common::_RoleExtend3_default_instance_);
}
inline const ::common::RoleExtend3& TeamMember::extd3() const {
  // @@protoc_insertion_point(field_get:common.TeamMember.extd3)
  return _internal_extd3();
}
inline void TeamMember::unsafe_arena_set_allocated_extd3(
    ::common::RoleExtend3* extd3) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd3_);
  }
  extd3_ = extd3;
  if (extd3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.TeamMember.extd3)
}
inline ::common::RoleExtend3* TeamMember::release_extd3() {
  
  ::common::RoleExtend3* temp = extd3_;
  extd3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleExtend3* TeamMember::unsafe_arena_release_extd3() {
  // @@protoc_insertion_point(field_release:common.TeamMember.extd3)
  
  ::common::RoleExtend3* temp = extd3_;
  extd3_ = nullptr;
  return temp;
}
inline ::common::RoleExtend3* TeamMember::_internal_mutable_extd3() {
  
  if (extd3_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleExtend3>(GetArenaForAllocation());
    extd3_ = p;
  }
  return extd3_;
}
inline ::common::RoleExtend3* TeamMember::mutable_extd3() {
  ::common::RoleExtend3* _msg = _internal_mutable_extd3();
  // @@protoc_insertion_point(field_mutable:common.TeamMember.extd3)
  return _msg;
}
inline void TeamMember::set_allocated_extd3(::common::RoleExtend3* extd3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd3_);
  }
  if (extd3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd3));
    if (message_arena != submessage_arena) {
      extd3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extd3, submessage_arena);
    }
    
  } else {
    
  }
  extd3_ = extd3;
  // @@protoc_insertion_point(field_set_allocated:common.TeamMember.extd3)
}

// -------------------------------------------------------------------

// TeamApply

// .common.RoleBrief role = 1;
inline bool TeamApply::_internal_has_role() const {
  return this != internal_default_instance() && role_ != nullptr;
}
inline bool TeamApply::has_role() const {
  return _internal_has_role();
}
inline const ::common::RoleBrief& TeamApply::_internal_role() const {
  const ::common::RoleBrief* p = role_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleBrief&>(
      ::common::_RoleBrief_default_instance_);
}
inline const ::common::RoleBrief& TeamApply::role() const {
  // @@protoc_insertion_point(field_get:common.TeamApply.role)
  return _internal_role();
}
inline void TeamApply::unsafe_arena_set_allocated_role(
    ::common::RoleBrief* role) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_);
  }
  role_ = role;
  if (role) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.TeamApply.role)
}
inline ::common::RoleBrief* TeamApply::release_role() {
  
  ::common::RoleBrief* temp = role_;
  role_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleBrief* TeamApply::unsafe_arena_release_role() {
  // @@protoc_insertion_point(field_release:common.TeamApply.role)
  
  ::common::RoleBrief* temp = role_;
  role_ = nullptr;
  return temp;
}
inline ::common::RoleBrief* TeamApply::_internal_mutable_role() {
  
  if (role_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleBrief>(GetArenaForAllocation());
    role_ = p;
  }
  return role_;
}
inline ::common::RoleBrief* TeamApply::mutable_role() {
  ::common::RoleBrief* _msg = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:common.TeamApply.role)
  return _msg;
}
inline void TeamApply::set_allocated_role(::common::RoleBrief* role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_);
  }
  if (role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role));
    if (message_arena != submessage_arena) {
      role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    
  } else {
    
  }
  role_ = role;
  // @@protoc_insertion_point(field_set_allocated:common.TeamApply.role)
}

// uint32 expire = 2;
inline void TeamApply::clear_expire() {
  expire_ = 0u;
}
inline uint32_t TeamApply::_internal_expire() const {
  return expire_;
}
inline uint32_t TeamApply::expire() const {
  // @@protoc_insertion_point(field_get:common.TeamApply.expire)
  return _internal_expire();
}
inline void TeamApply::_internal_set_expire(uint32_t value) {
  
  expire_ = value;
}
inline void TeamApply::set_expire(uint32_t value) {
  _internal_set_expire(value);
  // @@protoc_insertion_point(field_set:common.TeamApply.expire)
}

// uint64 leaderSceneId = 3;
inline void TeamApply::clear_leadersceneid() {
  leadersceneid_ = uint64_t{0u};
}
inline uint64_t TeamApply::_internal_leadersceneid() const {
  return leadersceneid_;
}
inline uint64_t TeamApply::leadersceneid() const {
  // @@protoc_insertion_point(field_get:common.TeamApply.leaderSceneId)
  return _internal_leadersceneid();
}
inline void TeamApply::_internal_set_leadersceneid(uint64_t value) {
  
  leadersceneid_ = value;
}
inline void TeamApply::set_leadersceneid(uint64_t value) {
  _internal_set_leadersceneid(value);
  // @@protoc_insertion_point(field_set:common.TeamApply.leaderSceneId)
}

// -------------------------------------------------------------------

// RecruitTeam

// uint64 teamId = 1;
inline void RecruitTeam::clear_teamid() {
  teamid_ = uint64_t{0u};
}
inline uint64_t RecruitTeam::_internal_teamid() const {
  return teamid_;
}
inline uint64_t RecruitTeam::teamid() const {
  // @@protoc_insertion_point(field_get:common.RecruitTeam.teamId)
  return _internal_teamid();
}
inline void RecruitTeam::_internal_set_teamid(uint64_t value) {
  
  teamid_ = value;
}
inline void RecruitTeam::set_teamid(uint64_t value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:common.RecruitTeam.teamId)
}

// .common.RecruitTeamLeader leader = 2;
inline bool RecruitTeam::_internal_has_leader() const {
  return this != internal_default_instance() && leader_ != nullptr;
}
inline bool RecruitTeam::has_leader() const {
  return _internal_has_leader();
}
inline void RecruitTeam::clear_leader() {
  if (GetArenaForAllocation() == nullptr && leader_ != nullptr) {
    delete leader_;
  }
  leader_ = nullptr;
}
inline const ::common::RecruitTeamLeader& RecruitTeam::_internal_leader() const {
  const ::common::RecruitTeamLeader* p = leader_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RecruitTeamLeader&>(
      ::common::_RecruitTeamLeader_default_instance_);
}
inline const ::common::RecruitTeamLeader& RecruitTeam::leader() const {
  // @@protoc_insertion_point(field_get:common.RecruitTeam.leader)
  return _internal_leader();
}
inline void RecruitTeam::unsafe_arena_set_allocated_leader(
    ::common::RecruitTeamLeader* leader) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_);
  }
  leader_ = leader;
  if (leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.RecruitTeam.leader)
}
inline ::common::RecruitTeamLeader* RecruitTeam::release_leader() {
  
  ::common::RecruitTeamLeader* temp = leader_;
  leader_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RecruitTeamLeader* RecruitTeam::unsafe_arena_release_leader() {
  // @@protoc_insertion_point(field_release:common.RecruitTeam.leader)
  
  ::common::RecruitTeamLeader* temp = leader_;
  leader_ = nullptr;
  return temp;
}
inline ::common::RecruitTeamLeader* RecruitTeam::_internal_mutable_leader() {
  
  if (leader_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RecruitTeamLeader>(GetArenaForAllocation());
    leader_ = p;
  }
  return leader_;
}
inline ::common::RecruitTeamLeader* RecruitTeam::mutable_leader() {
  ::common::RecruitTeamLeader* _msg = _internal_mutable_leader();
  // @@protoc_insertion_point(field_mutable:common.RecruitTeam.leader)
  return _msg;
}
inline void RecruitTeam::set_allocated_leader(::common::RecruitTeamLeader* leader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete leader_;
  }
  if (leader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(leader);
    if (message_arena != submessage_arena) {
      leader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leader, submessage_arena);
    }
    
  } else {
    
  }
  leader_ = leader;
  // @@protoc_insertion_point(field_set_allocated:common.RecruitTeam.leader)
}

// repeated .common.RecruitTeamMember members = 3;
inline int RecruitTeam::_internal_members_size() const {
  return members_.size();
}
inline int RecruitTeam::members_size() const {
  return _internal_members_size();
}
inline void RecruitTeam::clear_members() {
  members_.Clear();
}
inline ::common::RecruitTeamMember* RecruitTeam::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:common.RecruitTeam.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::RecruitTeamMember >*
RecruitTeam::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:common.RecruitTeam.members)
  return &members_;
}
inline const ::common::RecruitTeamMember& RecruitTeam::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::common::RecruitTeamMember& RecruitTeam::members(int index) const {
  // @@protoc_insertion_point(field_get:common.RecruitTeam.members)
  return _internal_members(index);
}
inline ::common::RecruitTeamMember* RecruitTeam::_internal_add_members() {
  return members_.Add();
}
inline ::common::RecruitTeamMember* RecruitTeam::add_members() {
  ::common::RecruitTeamMember* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:common.RecruitTeam.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::RecruitTeamMember >&
RecruitTeam::members() const {
  // @@protoc_insertion_point(field_list:common.RecruitTeam.members)
  return members_;
}

// uint32 targetId = 4;
inline void RecruitTeam::clear_targetid() {
  targetid_ = 0u;
}
inline uint32_t RecruitTeam::_internal_targetid() const {
  return targetid_;
}
inline uint32_t RecruitTeam::targetid() const {
  // @@protoc_insertion_point(field_get:common.RecruitTeam.targetId)
  return _internal_targetid();
}
inline void RecruitTeam::_internal_set_targetid(uint32_t value) {
  
  targetid_ = value;
}
inline void RecruitTeam::set_targetid(uint32_t value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:common.RecruitTeam.targetId)
}

// uint32 minLevel = 5;
inline void RecruitTeam::clear_minlevel() {
  minlevel_ = 0u;
}
inline uint32_t RecruitTeam::_internal_minlevel() const {
  return minlevel_;
}
inline uint32_t RecruitTeam::minlevel() const {
  // @@protoc_insertion_point(field_get:common.RecruitTeam.minLevel)
  return _internal_minlevel();
}
inline void RecruitTeam::_internal_set_minlevel(uint32_t value) {
  
  minlevel_ = value;
}
inline void RecruitTeam::set_minlevel(uint32_t value) {
  _internal_set_minlevel(value);
  // @@protoc_insertion_point(field_set:common.RecruitTeam.minLevel)
}

// uint32 maxLevel = 6;
inline void RecruitTeam::clear_maxlevel() {
  maxlevel_ = 0u;
}
inline uint32_t RecruitTeam::_internal_maxlevel() const {
  return maxlevel_;
}
inline uint32_t RecruitTeam::maxlevel() const {
  // @@protoc_insertion_point(field_get:common.RecruitTeam.maxLevel)
  return _internal_maxlevel();
}
inline void RecruitTeam::_internal_set_maxlevel(uint32_t value) {
  
  maxlevel_ = value;
}
inline void RecruitTeam::set_maxlevel(uint32_t value) {
  _internal_set_maxlevel(value);
  // @@protoc_insertion_point(field_set:common.RecruitTeam.maxLevel)
}

// bytes text = 7;
inline void RecruitTeam::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& RecruitTeam::text() const {
  // @@protoc_insertion_point(field_get:common.RecruitTeam.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecruitTeam::set_text(ArgT0&& arg0, ArgT... args) {
 
 text_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.RecruitTeam.text)
}
inline std::string* RecruitTeam::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:common.RecruitTeam.text)
  return _s;
}
inline const std::string& RecruitTeam::_internal_text() const {
  return text_.Get();
}
inline void RecruitTeam::_internal_set_text(const std::string& value) {
  
  text_.Set(value, GetArenaForAllocation());
}
inline std::string* RecruitTeam::_internal_mutable_text() {
  
  return text_.Mutable(GetArenaForAllocation());
}
inline std::string* RecruitTeam::release_text() {
  // @@protoc_insertion_point(field_release:common.RecruitTeam.text)
  return text_.Release();
}
inline void RecruitTeam::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault()) {
    text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.RecruitTeam.text)
}

// int64 leaderSceneId = 8;
inline void RecruitTeam::clear_leadersceneid() {
  leadersceneid_ = int64_t{0};
}
inline int64_t RecruitTeam::_internal_leadersceneid() const {
  return leadersceneid_;
}
inline int64_t RecruitTeam::leadersceneid() const {
  // @@protoc_insertion_point(field_get:common.RecruitTeam.leaderSceneId)
  return _internal_leadersceneid();
}
inline void RecruitTeam::_internal_set_leadersceneid(int64_t value) {
  
  leadersceneid_ = value;
}
inline void RecruitTeam::set_leadersceneid(int64_t value) {
  _internal_set_leadersceneid(value);
  // @@protoc_insertion_point(field_set:common.RecruitTeam.leaderSceneId)
}

// -------------------------------------------------------------------

// RecruitTeamLeader

// .common.RecruitTeamMember leader = 1;
inline bool RecruitTeamLeader::_internal_has_leader() const {
  return this != internal_default_instance() && leader_ != nullptr;
}
inline bool RecruitTeamLeader::has_leader() const {
  return _internal_has_leader();
}
inline void RecruitTeamLeader::clear_leader() {
  if (GetArenaForAllocation() == nullptr && leader_ != nullptr) {
    delete leader_;
  }
  leader_ = nullptr;
}
inline const ::common::RecruitTeamMember& RecruitTeamLeader::_internal_leader() const {
  const ::common::RecruitTeamMember* p = leader_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RecruitTeamMember&>(
      ::common::_RecruitTeamMember_default_instance_);
}
inline const ::common::RecruitTeamMember& RecruitTeamLeader::leader() const {
  // @@protoc_insertion_point(field_get:common.RecruitTeamLeader.leader)
  return _internal_leader();
}
inline void RecruitTeamLeader::unsafe_arena_set_allocated_leader(
    ::common::RecruitTeamMember* leader) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_);
  }
  leader_ = leader;
  if (leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.RecruitTeamLeader.leader)
}
inline ::common::RecruitTeamMember* RecruitTeamLeader::release_leader() {
  
  ::common::RecruitTeamMember* temp = leader_;
  leader_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RecruitTeamMember* RecruitTeamLeader::unsafe_arena_release_leader() {
  // @@protoc_insertion_point(field_release:common.RecruitTeamLeader.leader)
  
  ::common::RecruitTeamMember* temp = leader_;
  leader_ = nullptr;
  return temp;
}
inline ::common::RecruitTeamMember* RecruitTeamLeader::_internal_mutable_leader() {
  
  if (leader_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RecruitTeamMember>(GetArenaForAllocation());
    leader_ = p;
  }
  return leader_;
}
inline ::common::RecruitTeamMember* RecruitTeamLeader::mutable_leader() {
  ::common::RecruitTeamMember* _msg = _internal_mutable_leader();
  // @@protoc_insertion_point(field_mutable:common.RecruitTeamLeader.leader)
  return _msg;
}
inline void RecruitTeamLeader::set_allocated_leader(::common::RecruitTeamMember* leader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete leader_;
  }
  if (leader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(leader);
    if (message_arena != submessage_arena) {
      leader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leader, submessage_arena);
    }
    
  } else {
    
  }
  leader_ = leader;
  // @@protoc_insertion_point(field_set_allocated:common.RecruitTeamLeader.leader)
}

// uint32 chatFont = 2;
inline void RecruitTeamLeader::clear_chatfont() {
  chatfont_ = 0u;
}
inline uint32_t RecruitTeamLeader::_internal_chatfont() const {
  return chatfont_;
}
inline uint32_t RecruitTeamLeader::chatfont() const {
  // @@protoc_insertion_point(field_get:common.RecruitTeamLeader.chatFont)
  return _internal_chatfont();
}
inline void RecruitTeamLeader::_internal_set_chatfont(uint32_t value) {
  
  chatfont_ = value;
}
inline void RecruitTeamLeader::set_chatfont(uint32_t value) {
  _internal_set_chatfont(value);
  // @@protoc_insertion_point(field_set:common.RecruitTeamLeader.chatFont)
}

// uint32 chatFrame = 3;
inline void RecruitTeamLeader::clear_chatframe() {
  chatframe_ = 0u;
}
inline uint32_t RecruitTeamLeader::_internal_chatframe() const {
  return chatframe_;
}
inline uint32_t RecruitTeamLeader::chatframe() const {
  // @@protoc_insertion_point(field_get:common.RecruitTeamLeader.chatFrame)
  return _internal_chatframe();
}
inline void RecruitTeamLeader::_internal_set_chatframe(uint32_t value) {
  
  chatframe_ = value;
}
inline void RecruitTeamLeader::set_chatframe(uint32_t value) {
  _internal_set_chatframe(value);
  // @@protoc_insertion_point(field_set:common.RecruitTeamLeader.chatFrame)
}

// bytes nickname = 4;
inline void RecruitTeamLeader::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& RecruitTeamLeader::nickname() const {
  // @@protoc_insertion_point(field_get:common.RecruitTeamLeader.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecruitTeamLeader::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.RecruitTeamLeader.nickname)
}
inline std::string* RecruitTeamLeader::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:common.RecruitTeamLeader.nickname)
  return _s;
}
inline const std::string& RecruitTeamLeader::_internal_nickname() const {
  return nickname_.Get();
}
inline void RecruitTeamLeader::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* RecruitTeamLeader::_internal_mutable_nickname() {
  
  return nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* RecruitTeamLeader::release_nickname() {
  // @@protoc_insertion_point(field_release:common.RecruitTeamLeader.nickname)
  return nickname_.Release();
}
inline void RecruitTeamLeader::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nickname_.IsDefault()) {
    nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.RecruitTeamLeader.nickname)
}

// -------------------------------------------------------------------

// RecruitTeamMember

// uint32 headIcon = 1;
inline void RecruitTeamMember::clear_headicon() {
  headicon_ = 0u;
}
inline uint32_t RecruitTeamMember::_internal_headicon() const {
  return headicon_;
}
inline uint32_t RecruitTeamMember::headicon() const {
  // @@protoc_insertion_point(field_get:common.RecruitTeamMember.headIcon)
  return _internal_headicon();
}
inline void RecruitTeamMember::_internal_set_headicon(uint32_t value) {
  
  headicon_ = value;
}
inline void RecruitTeamMember::set_headicon(uint32_t value) {
  _internal_set_headicon(value);
  // @@protoc_insertion_point(field_set:common.RecruitTeamMember.headIcon)
}

// uint32 headFrame = 2;
inline void RecruitTeamMember::clear_headframe() {
  headframe_ = 0u;
}
inline uint32_t RecruitTeamMember::_internal_headframe() const {
  return headframe_;
}
inline uint32_t RecruitTeamMember::headframe() const {
  // @@protoc_insertion_point(field_get:common.RecruitTeamMember.headFrame)
  return _internal_headframe();
}
inline void RecruitTeamMember::_internal_set_headframe(uint32_t value) {
  
  headframe_ = value;
}
inline void RecruitTeamMember::set_headframe(uint32_t value) {
  _internal_set_headframe(value);
  // @@protoc_insertion_point(field_set:common.RecruitTeamMember.headFrame)
}

// uint32 careerId = 3;
inline void RecruitTeamMember::clear_careerid() {
  careerid_ = 0u;
}
inline uint32_t RecruitTeamMember::_internal_careerid() const {
  return careerid_;
}
inline uint32_t RecruitTeamMember::careerid() const {
  // @@protoc_insertion_point(field_get:common.RecruitTeamMember.careerId)
  return _internal_careerid();
}
inline void RecruitTeamMember::_internal_set_careerid(uint32_t value) {
  
  careerid_ = value;
}
inline void RecruitTeamMember::set_careerid(uint32_t value) {
  _internal_set_careerid(value);
  // @@protoc_insertion_point(field_set:common.RecruitTeamMember.careerId)
}

// uint32 level = 4;
inline void RecruitTeamMember::clear_level() {
  level_ = 0u;
}
inline uint32_t RecruitTeamMember::_internal_level() const {
  return level_;
}
inline uint32_t RecruitTeamMember::level() const {
  // @@protoc_insertion_point(field_get:common.RecruitTeamMember.level)
  return _internal_level();
}
inline void RecruitTeamMember::_internal_set_level(uint32_t value) {
  
  level_ = value;
}
inline void RecruitTeamMember::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:common.RecruitTeamMember.level)
}

// uint32 sex = 5;
inline void RecruitTeamMember::clear_sex() {
  sex_ = 0u;
}
inline uint32_t RecruitTeamMember::_internal_sex() const {
  return sex_;
}
inline uint32_t RecruitTeamMember::sex() const {
  // @@protoc_insertion_point(field_get:common.RecruitTeamMember.sex)
  return _internal_sex();
}
inline void RecruitTeamMember::_internal_set_sex(uint32_t value) {
  
  sex_ = value;
}
inline void RecruitTeamMember::set_sex(uint32_t value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:common.RecruitTeamMember.sex)
}

// -------------------------------------------------------------------

// PlatAllTeamList

// repeated .common.PlatTargetTeamList teams = 1;
inline int PlatAllTeamList::_internal_teams_size() const {
  return teams_.size();
}
inline int PlatAllTeamList::teams_size() const {
  return _internal_teams_size();
}
inline void PlatAllTeamList::clear_teams() {
  teams_.Clear();
}
inline ::common::PlatTargetTeamList* PlatAllTeamList::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:common.PlatAllTeamList.teams)
  return teams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::PlatTargetTeamList >*
PlatAllTeamList::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:common.PlatAllTeamList.teams)
  return &teams_;
}
inline const ::common::PlatTargetTeamList& PlatAllTeamList::_internal_teams(int index) const {
  return teams_.Get(index);
}
inline const ::common::PlatTargetTeamList& PlatAllTeamList::teams(int index) const {
  // @@protoc_insertion_point(field_get:common.PlatAllTeamList.teams)
  return _internal_teams(index);
}
inline ::common::PlatTargetTeamList* PlatAllTeamList::_internal_add_teams() {
  return teams_.Add();
}
inline ::common::PlatTargetTeamList* PlatAllTeamList::add_teams() {
  ::common::PlatTargetTeamList* _add = _internal_add_teams();
  // @@protoc_insertion_point(field_add:common.PlatAllTeamList.teams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::PlatTargetTeamList >&
PlatAllTeamList::teams() const {
  // @@protoc_insertion_point(field_list:common.PlatAllTeamList.teams)
  return teams_;
}

// -------------------------------------------------------------------

// PlatTargetTeamList

// uint32 targetId = 1;
inline void PlatTargetTeamList::clear_targetid() {
  targetid_ = 0u;
}
inline uint32_t PlatTargetTeamList::_internal_targetid() const {
  return targetid_;
}
inline uint32_t PlatTargetTeamList::targetid() const {
  // @@protoc_insertion_point(field_get:common.PlatTargetTeamList.targetId)
  return _internal_targetid();
}
inline void PlatTargetTeamList::_internal_set_targetid(uint32_t value) {
  
  targetid_ = value;
}
inline void PlatTargetTeamList::set_targetid(uint32_t value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:common.PlatTargetTeamList.targetId)
}

// repeated .common.PlatTargetTeam teams = 2;
inline int PlatTargetTeamList::_internal_teams_size() const {
  return teams_.size();
}
inline int PlatTargetTeamList::teams_size() const {
  return _internal_teams_size();
}
inline void PlatTargetTeamList::clear_teams() {
  teams_.Clear();
}
inline ::common::PlatTargetTeam* PlatTargetTeamList::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:common.PlatTargetTeamList.teams)
  return teams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::PlatTargetTeam >*
PlatTargetTeamList::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:common.PlatTargetTeamList.teams)
  return &teams_;
}
inline const ::common::PlatTargetTeam& PlatTargetTeamList::_internal_teams(int index) const {
  return teams_.Get(index);
}
inline const ::common::PlatTargetTeam& PlatTargetTeamList::teams(int index) const {
  // @@protoc_insertion_point(field_get:common.PlatTargetTeamList.teams)
  return _internal_teams(index);
}
inline ::common::PlatTargetTeam* PlatTargetTeamList::_internal_add_teams() {
  return teams_.Add();
}
inline ::common::PlatTargetTeam* PlatTargetTeamList::add_teams() {
  ::common::PlatTargetTeam* _add = _internal_add_teams();
  // @@protoc_insertion_point(field_add:common.PlatTargetTeamList.teams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::PlatTargetTeam >&
PlatTargetTeamList::teams() const {
  // @@protoc_insertion_point(field_list:common.PlatTargetTeamList.teams)
  return teams_;
}

// -------------------------------------------------------------------

// PlatTargetTeam

// uint32 teamId = 1;
inline void PlatTargetTeam::clear_teamid() {
  teamid_ = 0u;
}
inline uint32_t PlatTargetTeam::_internal_teamid() const {
  return teamid_;
}
inline uint32_t PlatTargetTeam::teamid() const {
  // @@protoc_insertion_point(field_get:common.PlatTargetTeam.teamId)
  return _internal_teamid();
}
inline void PlatTargetTeam::_internal_set_teamid(uint32_t value) {
  
  teamid_ = value;
}
inline void PlatTargetTeam::set_teamid(uint32_t value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:common.PlatTargetTeam.teamId)
}

// bytes leaderName = 2;
inline void PlatTargetTeam::clear_leadername() {
  leadername_.ClearToEmpty();
}
inline const std::string& PlatTargetTeam::leadername() const {
  // @@protoc_insertion_point(field_get:common.PlatTargetTeam.leaderName)
  return _internal_leadername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlatTargetTeam::set_leadername(ArgT0&& arg0, ArgT... args) {
 
 leadername_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.PlatTargetTeam.leaderName)
}
inline std::string* PlatTargetTeam::mutable_leadername() {
  std::string* _s = _internal_mutable_leadername();
  // @@protoc_insertion_point(field_mutable:common.PlatTargetTeam.leaderName)
  return _s;
}
inline const std::string& PlatTargetTeam::_internal_leadername() const {
  return leadername_.Get();
}
inline void PlatTargetTeam::_internal_set_leadername(const std::string& value) {
  
  leadername_.Set(value, GetArenaForAllocation());
}
inline std::string* PlatTargetTeam::_internal_mutable_leadername() {
  
  return leadername_.Mutable(GetArenaForAllocation());
}
inline std::string* PlatTargetTeam::release_leadername() {
  // @@protoc_insertion_point(field_release:common.PlatTargetTeam.leaderName)
  return leadername_.Release();
}
inline void PlatTargetTeam::set_allocated_leadername(std::string* leadername) {
  if (leadername != nullptr) {
    
  } else {
    
  }
  leadername_.SetAllocated(leadername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (leadername_.IsDefault()) {
    leadername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.PlatTargetTeam.leaderName)
}

// uint32 minLevel = 3;
inline void PlatTargetTeam::clear_minlevel() {
  minlevel_ = 0u;
}
inline uint32_t PlatTargetTeam::_internal_minlevel() const {
  return minlevel_;
}
inline uint32_t PlatTargetTeam::minlevel() const {
  // @@protoc_insertion_point(field_get:common.PlatTargetTeam.minLevel)
  return _internal_minlevel();
}
inline void PlatTargetTeam::_internal_set_minlevel(uint32_t value) {
  
  minlevel_ = value;
}
inline void PlatTargetTeam::set_minlevel(uint32_t value) {
  _internal_set_minlevel(value);
  // @@protoc_insertion_point(field_set:common.PlatTargetTeam.minLevel)
}

// uint32 maxLevel = 4;
inline void PlatTargetTeam::clear_maxlevel() {
  maxlevel_ = 0u;
}
inline uint32_t PlatTargetTeam::_internal_maxlevel() const {
  return maxlevel_;
}
inline uint32_t PlatTargetTeam::maxlevel() const {
  // @@protoc_insertion_point(field_get:common.PlatTargetTeam.maxLevel)
  return _internal_maxlevel();
}
inline void PlatTargetTeam::_internal_set_maxlevel(uint32_t value) {
  
  maxlevel_ = value;
}
inline void PlatTargetTeam::set_maxlevel(uint32_t value) {
  _internal_set_maxlevel(value);
  // @@protoc_insertion_point(field_set:common.PlatTargetTeam.maxLevel)
}

// bytes text = 5;
inline void PlatTargetTeam::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& PlatTargetTeam::text() const {
  // @@protoc_insertion_point(field_get:common.PlatTargetTeam.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlatTargetTeam::set_text(ArgT0&& arg0, ArgT... args) {
 
 text_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.PlatTargetTeam.text)
}
inline std::string* PlatTargetTeam::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:common.PlatTargetTeam.text)
  return _s;
}
inline const std::string& PlatTargetTeam::_internal_text() const {
  return text_.Get();
}
inline void PlatTargetTeam::_internal_set_text(const std::string& value) {
  
  text_.Set(value, GetArenaForAllocation());
}
inline std::string* PlatTargetTeam::_internal_mutable_text() {
  
  return text_.Mutable(GetArenaForAllocation());
}
inline std::string* PlatTargetTeam::release_text() {
  // @@protoc_insertion_point(field_release:common.PlatTargetTeam.text)
  return text_.Release();
}
inline void PlatTargetTeam::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault()) {
    text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.PlatTargetTeam.text)
}

// repeated .common.PlatTeamMember members = 6;
inline int PlatTargetTeam::_internal_members_size() const {
  return members_.size();
}
inline int PlatTargetTeam::members_size() const {
  return _internal_members_size();
}
inline void PlatTargetTeam::clear_members() {
  members_.Clear();
}
inline ::common::PlatTeamMember* PlatTargetTeam::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:common.PlatTargetTeam.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::PlatTeamMember >*
PlatTargetTeam::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:common.PlatTargetTeam.members)
  return &members_;
}
inline const ::common::PlatTeamMember& PlatTargetTeam::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::common::PlatTeamMember& PlatTargetTeam::members(int index) const {
  // @@protoc_insertion_point(field_get:common.PlatTargetTeam.members)
  return _internal_members(index);
}
inline ::common::PlatTeamMember* PlatTargetTeam::_internal_add_members() {
  return members_.Add();
}
inline ::common::PlatTeamMember* PlatTargetTeam::add_members() {
  ::common::PlatTeamMember* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:common.PlatTargetTeam.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::PlatTeamMember >&
PlatTargetTeam::members() const {
  // @@protoc_insertion_point(field_list:common.PlatTargetTeam.members)
  return members_;
}

// uint64 leaderSceneId = 7;
inline void PlatTargetTeam::clear_leadersceneid() {
  leadersceneid_ = uint64_t{0u};
}
inline uint64_t PlatTargetTeam::_internal_leadersceneid() const {
  return leadersceneid_;
}
inline uint64_t PlatTargetTeam::leadersceneid() const {
  // @@protoc_insertion_point(field_get:common.PlatTargetTeam.leaderSceneId)
  return _internal_leadersceneid();
}
inline void PlatTargetTeam::_internal_set_leadersceneid(uint64_t value) {
  
  leadersceneid_ = value;
}
inline void PlatTargetTeam::set_leadersceneid(uint64_t value) {
  _internal_set_leadersceneid(value);
  // @@protoc_insertion_point(field_set:common.PlatTargetTeam.leaderSceneId)
}

// -------------------------------------------------------------------

// PlatTeamMember

// uint32 careerId = 1;
inline void PlatTeamMember::clear_careerid() {
  careerid_ = 0u;
}
inline uint32_t PlatTeamMember::_internal_careerid() const {
  return careerid_;
}
inline uint32_t PlatTeamMember::careerid() const {
  // @@protoc_insertion_point(field_get:common.PlatTeamMember.careerId)
  return _internal_careerid();
}
inline void PlatTeamMember::_internal_set_careerid(uint32_t value) {
  
  careerid_ = value;
}
inline void PlatTeamMember::set_careerid(uint32_t value) {
  _internal_set_careerid(value);
  // @@protoc_insertion_point(field_set:common.PlatTeamMember.careerId)
}

// uint32 level = 2;
inline void PlatTeamMember::clear_level() {
  level_ = 0u;
}
inline uint32_t PlatTeamMember::_internal_level() const {
  return level_;
}
inline uint32_t PlatTeamMember::level() const {
  // @@protoc_insertion_point(field_get:common.PlatTeamMember.level)
  return _internal_level();
}
inline void PlatTeamMember::_internal_set_level(uint32_t value) {
  
  level_ = value;
}
inline void PlatTeamMember::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:common.PlatTeamMember.level)
}

// -------------------------------------------------------------------

// TeamFieldId

// uint32 type = 1;
inline void TeamFieldId::clear_type() {
  type_ = 0u;
}
inline uint32_t TeamFieldId::_internal_type() const {
  return type_;
}
inline uint32_t TeamFieldId::type() const {
  // @@protoc_insertion_point(field_get:common.TeamFieldId.type)
  return _internal_type();
}
inline void TeamFieldId::_internal_set_type(uint32_t value) {
  
  type_ = value;
}
inline void TeamFieldId::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:common.TeamFieldId.type)
}

// uint64 val = 2;
inline void TeamFieldId::clear_val() {
  val_ = uint64_t{0u};
}
inline uint64_t TeamFieldId::_internal_val() const {
  return val_;
}
inline uint64_t TeamFieldId::val() const {
  // @@protoc_insertion_point(field_get:common.TeamFieldId.val)
  return _internal_val();
}
inline void TeamFieldId::_internal_set_val(uint64_t value) {
  
  val_ = value;
}
inline void TeamFieldId::set_val(uint64_t value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:common.TeamFieldId.val)
}

// -------------------------------------------------------------------

// TeamFieldByte

// uint32 type = 1;
inline void TeamFieldByte::clear_type() {
  type_ = 0u;
}
inline uint32_t TeamFieldByte::_internal_type() const {
  return type_;
}
inline uint32_t TeamFieldByte::type() const {
  // @@protoc_insertion_point(field_get:common.TeamFieldByte.type)
  return _internal_type();
}
inline void TeamFieldByte::_internal_set_type(uint32_t value) {
  
  type_ = value;
}
inline void TeamFieldByte::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:common.TeamFieldByte.type)
}

// bytes val = 2;
inline void TeamFieldByte::clear_val() {
  val_.ClearToEmpty();
}
inline const std::string& TeamFieldByte::val() const {
  // @@protoc_insertion_point(field_get:common.TeamFieldByte.val)
  return _internal_val();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TeamFieldByte::set_val(ArgT0&& arg0, ArgT... args) {
 
 val_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.TeamFieldByte.val)
}
inline std::string* TeamFieldByte::mutable_val() {
  std::string* _s = _internal_mutable_val();
  // @@protoc_insertion_point(field_mutable:common.TeamFieldByte.val)
  return _s;
}
inline const std::string& TeamFieldByte::_internal_val() const {
  return val_.Get();
}
inline void TeamFieldByte::_internal_set_val(const std::string& value) {
  
  val_.Set(value, GetArenaForAllocation());
}
inline std::string* TeamFieldByte::_internal_mutable_val() {
  
  return val_.Mutable(GetArenaForAllocation());
}
inline std::string* TeamFieldByte::release_val() {
  // @@protoc_insertion_point(field_release:common.TeamFieldByte.val)
  return val_.Release();
}
inline void TeamFieldByte::set_allocated_val(std::string* val) {
  if (val != nullptr) {
    
  } else {
    
  }
  val_.SetAllocated(val, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (val_.IsDefault()) {
    val_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.TeamFieldByte.val)
}

// -------------------------------------------------------------------

// TeamFieldList

// repeated .common.TeamFieldId tfid = 1;
inline int TeamFieldList::_internal_tfid_size() const {
  return tfid_.size();
}
inline int TeamFieldList::tfid_size() const {
  return _internal_tfid_size();
}
inline void TeamFieldList::clear_tfid() {
  tfid_.Clear();
}
inline ::common::TeamFieldId* TeamFieldList::mutable_tfid(int index) {
  // @@protoc_insertion_point(field_mutable:common.TeamFieldList.tfid)
  return tfid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamFieldId >*
TeamFieldList::mutable_tfid() {
  // @@protoc_insertion_point(field_mutable_list:common.TeamFieldList.tfid)
  return &tfid_;
}
inline const ::common::TeamFieldId& TeamFieldList::_internal_tfid(int index) const {
  return tfid_.Get(index);
}
inline const ::common::TeamFieldId& TeamFieldList::tfid(int index) const {
  // @@protoc_insertion_point(field_get:common.TeamFieldList.tfid)
  return _internal_tfid(index);
}
inline ::common::TeamFieldId* TeamFieldList::_internal_add_tfid() {
  return tfid_.Add();
}
inline ::common::TeamFieldId* TeamFieldList::add_tfid() {
  ::common::TeamFieldId* _add = _internal_add_tfid();
  // @@protoc_insertion_point(field_add:common.TeamFieldList.tfid)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamFieldId >&
TeamFieldList::tfid() const {
  // @@protoc_insertion_point(field_list:common.TeamFieldList.tfid)
  return tfid_;
}

// repeated .common.TeamFieldByte tfbyte = 2;
inline int TeamFieldList::_internal_tfbyte_size() const {
  return tfbyte_.size();
}
inline int TeamFieldList::tfbyte_size() const {
  return _internal_tfbyte_size();
}
inline void TeamFieldList::clear_tfbyte() {
  tfbyte_.Clear();
}
inline ::common::TeamFieldByte* TeamFieldList::mutable_tfbyte(int index) {
  // @@protoc_insertion_point(field_mutable:common.TeamFieldList.tfbyte)
  return tfbyte_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamFieldByte >*
TeamFieldList::mutable_tfbyte() {
  // @@protoc_insertion_point(field_mutable_list:common.TeamFieldList.tfbyte)
  return &tfbyte_;
}
inline const ::common::TeamFieldByte& TeamFieldList::_internal_tfbyte(int index) const {
  return tfbyte_.Get(index);
}
inline const ::common::TeamFieldByte& TeamFieldList::tfbyte(int index) const {
  // @@protoc_insertion_point(field_get:common.TeamFieldList.tfbyte)
  return _internal_tfbyte(index);
}
inline ::common::TeamFieldByte* TeamFieldList::_internal_add_tfbyte() {
  return tfbyte_.Add();
}
inline ::common::TeamFieldByte* TeamFieldList::add_tfbyte() {
  ::common::TeamFieldByte* _add = _internal_add_tfbyte();
  // @@protoc_insertion_point(field_add:common.TeamFieldList.tfbyte)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamFieldByte >&
TeamFieldList::tfbyte() const {
  // @@protoc_insertion_point(field_list:common.TeamFieldList.tfbyte)
  return tfbyte_;
}

// -------------------------------------------------------------------

// TeamVoteBaseData

// uint32 expireTime = 1;
inline void TeamVoteBaseData::clear_expiretime() {
  expiretime_ = 0u;
}
inline uint32_t TeamVoteBaseData::_internal_expiretime() const {
  return expiretime_;
}
inline uint32_t TeamVoteBaseData::expiretime() const {
  // @@protoc_insertion_point(field_get:common.TeamVoteBaseData.expireTime)
  return _internal_expiretime();
}
inline void TeamVoteBaseData::_internal_set_expiretime(uint32_t value) {
  
  expiretime_ = value;
}
inline void TeamVoteBaseData::set_expiretime(uint32_t value) {
  _internal_set_expiretime(value);
  // @@protoc_insertion_point(field_set:common.TeamVoteBaseData.expireTime)
}

// uint64 roleId = 2;
inline void TeamVoteBaseData::clear_roleid() {
  roleid_ = uint64_t{0u};
}
inline uint64_t TeamVoteBaseData::_internal_roleid() const {
  return roleid_;
}
inline uint64_t TeamVoteBaseData::roleid() const {
  // @@protoc_insertion_point(field_get:common.TeamVoteBaseData.roleId)
  return _internal_roleid();
}
inline void TeamVoteBaseData::_internal_set_roleid(uint64_t value) {
  
  roleid_ = value;
}
inline void TeamVoteBaseData::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:common.TeamVoteBaseData.roleId)
}

// -------------------------------------------------------------------

// TeamMemberFieldId

// uint32 type = 1;
inline void TeamMemberFieldId::clear_type() {
  type_ = 0u;
}
inline uint32_t TeamMemberFieldId::_internal_type() const {
  return type_;
}
inline uint32_t TeamMemberFieldId::type() const {
  // @@protoc_insertion_point(field_get:common.TeamMemberFieldId.type)
  return _internal_type();
}
inline void TeamMemberFieldId::_internal_set_type(uint32_t value) {
  
  type_ = value;
}
inline void TeamMemberFieldId::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:common.TeamMemberFieldId.type)
}

// uint64 val = 2;
inline void TeamMemberFieldId::clear_val() {
  val_ = uint64_t{0u};
}
inline uint64_t TeamMemberFieldId::_internal_val() const {
  return val_;
}
inline uint64_t TeamMemberFieldId::val() const {
  // @@protoc_insertion_point(field_get:common.TeamMemberFieldId.val)
  return _internal_val();
}
inline void TeamMemberFieldId::_internal_set_val(uint64_t value) {
  
  val_ = value;
}
inline void TeamMemberFieldId::set_val(uint64_t value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:common.TeamMemberFieldId.val)
}

// -------------------------------------------------------------------

// TeamMemberFieldBool

// uint32 type = 1;
inline void TeamMemberFieldBool::clear_type() {
  type_ = 0u;
}
inline uint32_t TeamMemberFieldBool::_internal_type() const {
  return type_;
}
inline uint32_t TeamMemberFieldBool::type() const {
  // @@protoc_insertion_point(field_get:common.TeamMemberFieldBool.type)
  return _internal_type();
}
inline void TeamMemberFieldBool::_internal_set_type(uint32_t value) {
  
  type_ = value;
}
inline void TeamMemberFieldBool::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:common.TeamMemberFieldBool.type)
}

// bool val = 2;
inline void TeamMemberFieldBool::clear_val() {
  val_ = false;
}
inline bool TeamMemberFieldBool::_internal_val() const {
  return val_;
}
inline bool TeamMemberFieldBool::val() const {
  // @@protoc_insertion_point(field_get:common.TeamMemberFieldBool.val)
  return _internal_val();
}
inline void TeamMemberFieldBool::_internal_set_val(bool value) {
  
  val_ = value;
}
inline void TeamMemberFieldBool::set_val(bool value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:common.TeamMemberFieldBool.val)
}

// -------------------------------------------------------------------

// TeamMemberFieldByte

// uint32 type = 1;
inline void TeamMemberFieldByte::clear_type() {
  type_ = 0u;
}
inline uint32_t TeamMemberFieldByte::_internal_type() const {
  return type_;
}
inline uint32_t TeamMemberFieldByte::type() const {
  // @@protoc_insertion_point(field_get:common.TeamMemberFieldByte.type)
  return _internal_type();
}
inline void TeamMemberFieldByte::_internal_set_type(uint32_t value) {
  
  type_ = value;
}
inline void TeamMemberFieldByte::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:common.TeamMemberFieldByte.type)
}

// bytes val = 2;
inline void TeamMemberFieldByte::clear_val() {
  val_.ClearToEmpty();
}
inline const std::string& TeamMemberFieldByte::val() const {
  // @@protoc_insertion_point(field_get:common.TeamMemberFieldByte.val)
  return _internal_val();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TeamMemberFieldByte::set_val(ArgT0&& arg0, ArgT... args) {
 
 val_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.TeamMemberFieldByte.val)
}
inline std::string* TeamMemberFieldByte::mutable_val() {
  std::string* _s = _internal_mutable_val();
  // @@protoc_insertion_point(field_mutable:common.TeamMemberFieldByte.val)
  return _s;
}
inline const std::string& TeamMemberFieldByte::_internal_val() const {
  return val_.Get();
}
inline void TeamMemberFieldByte::_internal_set_val(const std::string& value) {
  
  val_.Set(value, GetArenaForAllocation());
}
inline std::string* TeamMemberFieldByte::_internal_mutable_val() {
  
  return val_.Mutable(GetArenaForAllocation());
}
inline std::string* TeamMemberFieldByte::release_val() {
  // @@protoc_insertion_point(field_release:common.TeamMemberFieldByte.val)
  return val_.Release();
}
inline void TeamMemberFieldByte::set_allocated_val(std::string* val) {
  if (val != nullptr) {
    
  } else {
    
  }
  val_.SetAllocated(val, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (val_.IsDefault()) {
    val_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.TeamMemberFieldByte.val)
}

// -------------------------------------------------------------------

// TeamMemberFieldList

// repeated .common.TeamMemberFieldId tfid = 1;
inline int TeamMemberFieldList::_internal_tfid_size() const {
  return tfid_.size();
}
inline int TeamMemberFieldList::tfid_size() const {
  return _internal_tfid_size();
}
inline void TeamMemberFieldList::clear_tfid() {
  tfid_.Clear();
}
inline ::common::TeamMemberFieldId* TeamMemberFieldList::mutable_tfid(int index) {
  // @@protoc_insertion_point(field_mutable:common.TeamMemberFieldList.tfid)
  return tfid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamMemberFieldId >*
TeamMemberFieldList::mutable_tfid() {
  // @@protoc_insertion_point(field_mutable_list:common.TeamMemberFieldList.tfid)
  return &tfid_;
}
inline const ::common::TeamMemberFieldId& TeamMemberFieldList::_internal_tfid(int index) const {
  return tfid_.Get(index);
}
inline const ::common::TeamMemberFieldId& TeamMemberFieldList::tfid(int index) const {
  // @@protoc_insertion_point(field_get:common.TeamMemberFieldList.tfid)
  return _internal_tfid(index);
}
inline ::common::TeamMemberFieldId* TeamMemberFieldList::_internal_add_tfid() {
  return tfid_.Add();
}
inline ::common::TeamMemberFieldId* TeamMemberFieldList::add_tfid() {
  ::common::TeamMemberFieldId* _add = _internal_add_tfid();
  // @@protoc_insertion_point(field_add:common.TeamMemberFieldList.tfid)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamMemberFieldId >&
TeamMemberFieldList::tfid() const {
  // @@protoc_insertion_point(field_list:common.TeamMemberFieldList.tfid)
  return tfid_;
}

// repeated .common.TeamMemberFieldByte tfbyte = 2;
inline int TeamMemberFieldList::_internal_tfbyte_size() const {
  return tfbyte_.size();
}
inline int TeamMemberFieldList::tfbyte_size() const {
  return _internal_tfbyte_size();
}
inline void TeamMemberFieldList::clear_tfbyte() {
  tfbyte_.Clear();
}
inline ::common::TeamMemberFieldByte* TeamMemberFieldList::mutable_tfbyte(int index) {
  // @@protoc_insertion_point(field_mutable:common.TeamMemberFieldList.tfbyte)
  return tfbyte_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamMemberFieldByte >*
TeamMemberFieldList::mutable_tfbyte() {
  // @@protoc_insertion_point(field_mutable_list:common.TeamMemberFieldList.tfbyte)
  return &tfbyte_;
}
inline const ::common::TeamMemberFieldByte& TeamMemberFieldList::_internal_tfbyte(int index) const {
  return tfbyte_.Get(index);
}
inline const ::common::TeamMemberFieldByte& TeamMemberFieldList::tfbyte(int index) const {
  // @@protoc_insertion_point(field_get:common.TeamMemberFieldList.tfbyte)
  return _internal_tfbyte(index);
}
inline ::common::TeamMemberFieldByte* TeamMemberFieldList::_internal_add_tfbyte() {
  return tfbyte_.Add();
}
inline ::common::TeamMemberFieldByte* TeamMemberFieldList::add_tfbyte() {
  ::common::TeamMemberFieldByte* _add = _internal_add_tfbyte();
  // @@protoc_insertion_point(field_add:common.TeamMemberFieldList.tfbyte)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamMemberFieldByte >&
TeamMemberFieldList::tfbyte() const {
  // @@protoc_insertion_point(field_list:common.TeamMemberFieldList.tfbyte)
  return tfbyte_;
}

// repeated .common.TeamMemberFieldBool tfbool = 3;
inline int TeamMemberFieldList::_internal_tfbool_size() const {
  return tfbool_.size();
}
inline int TeamMemberFieldList::tfbool_size() const {
  return _internal_tfbool_size();
}
inline void TeamMemberFieldList::clear_tfbool() {
  tfbool_.Clear();
}
inline ::common::TeamMemberFieldBool* TeamMemberFieldList::mutable_tfbool(int index) {
  // @@protoc_insertion_point(field_mutable:common.TeamMemberFieldList.tfbool)
  return tfbool_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamMemberFieldBool >*
TeamMemberFieldList::mutable_tfbool() {
  // @@protoc_insertion_point(field_mutable_list:common.TeamMemberFieldList.tfbool)
  return &tfbool_;
}
inline const ::common::TeamMemberFieldBool& TeamMemberFieldList::_internal_tfbool(int index) const {
  return tfbool_.Get(index);
}
inline const ::common::TeamMemberFieldBool& TeamMemberFieldList::tfbool(int index) const {
  // @@protoc_insertion_point(field_get:common.TeamMemberFieldList.tfbool)
  return _internal_tfbool(index);
}
inline ::common::TeamMemberFieldBool* TeamMemberFieldList::_internal_add_tfbool() {
  return tfbool_.Add();
}
inline ::common::TeamMemberFieldBool* TeamMemberFieldList::add_tfbool() {
  ::common::TeamMemberFieldBool* _add = _internal_add_tfbool();
  // @@protoc_insertion_point(field_add:common.TeamMemberFieldList.tfbool)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::TeamMemberFieldBool >&
TeamMemberFieldList::tfbool() const {
  // @@protoc_insertion_point(field_list:common.TeamMemberFieldList.tfbool)
  return tfbool_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::common::enTeamFieldType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::enTeamFieldType>() {
  return ::common::enTeamFieldType_descriptor();
}
template <> struct is_proto_enum< ::common::enTeamMemberFieldType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::enTeamMemberFieldType>() {
  return ::common::enTeamMemberFieldType_descriptor();
}
template <> struct is_proto_enum< ::common::enLeaveTeamType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::enLeaveTeamType>() {
  return ::common::enLeaveTeamType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_teamcommon_2eproto
