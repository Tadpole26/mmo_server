// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: innercommon.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_innercommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_innercommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "fight3v3common.pb.h"
#include "fight5v5common.pb.h"
#include "innerfriend.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_innercommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_innercommon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_innercommon_2eproto;
namespace inner {
class InnerCopyCreateBy;
struct InnerCopyCreateByDefaultTypeInternal;
extern InnerCopyCreateByDefaultTypeInternal _InnerCopyCreateBy_default_instance_;
class InnerCopyCrit;
struct InnerCopyCritDefaultTypeInternal;
extern InnerCopyCritDefaultTypeInternal _InnerCopyCrit_default_instance_;
class InnerCopyEnter;
struct InnerCopyEnterDefaultTypeInternal;
extern InnerCopyEnterDefaultTypeInternal _InnerCopyEnter_default_instance_;
class InnerCopyEnterByChgLvId;
struct InnerCopyEnterByChgLvIdDefaultTypeInternal;
extern InnerCopyEnterByChgLvIdDefaultTypeInternal _InnerCopyEnterByChgLvId_default_instance_;
class InnerCopyEnterByHome;
struct InnerCopyEnterByHomeDefaultTypeInternal;
extern InnerCopyEnterByHomeDefaultTypeInternal _InnerCopyEnterByHome_default_instance_;
class InnerCopyEnterByTeam;
struct InnerCopyEnterByTeamDefaultTypeInternal;
extern InnerCopyEnterByTeamDefaultTypeInternal _InnerCopyEnterByTeam_default_instance_;
class InnerCopyPve;
struct InnerCopyPveDefaultTypeInternal;
extern InnerCopyPveDefaultTypeInternal _InnerCopyPve_default_instance_;
class InnerCopyPvp;
struct InnerCopyPvpDefaultTypeInternal;
extern InnerCopyPvpDefaultTypeInternal _InnerCopyPvp_default_instance_;
class InnerCopyPvpF55;
struct InnerCopyPvpF55DefaultTypeInternal;
extern InnerCopyPvpF55DefaultTypeInternal _InnerCopyPvpF55_default_instance_;
class InnerCopyTeam;
struct InnerCopyTeamDefaultTypeInternal;
extern InnerCopyTeamDefaultTypeInternal _InnerCopyTeam_default_instance_;
class InnerCopyTeamList;
struct InnerCopyTeamListDefaultTypeInternal;
extern InnerCopyTeamListDefaultTypeInternal _InnerCopyTeamList_default_instance_;
class InnerCopyTeamMem;
struct InnerCopyTeamMemDefaultTypeInternal;
extern InnerCopyTeamMemDefaultTypeInternal _InnerCopyTeamMem_default_instance_;
class InnerCopyType;
struct InnerCopyTypeDefaultTypeInternal;
extern InnerCopyTypeDefaultTypeInternal _InnerCopyType_default_instance_;
class InnerCopyWay;
struct InnerCopyWayDefaultTypeInternal;
extern InnerCopyWayDefaultTypeInternal _InnerCopyWay_default_instance_;
class InnerCopyWayByMatch;
struct InnerCopyWayByMatchDefaultTypeInternal;
extern InnerCopyWayByMatchDefaultTypeInternal _InnerCopyWayByMatch_default_instance_;
class InnerCopyWayByTeam;
struct InnerCopyWayByTeamDefaultTypeInternal;
extern InnerCopyWayByTeamDefaultTypeInternal _InnerCopyWayByTeam_default_instance_;
class InnerGameEvent;
struct InnerGameEventDefaultTypeInternal;
extern InnerGameEventDefaultTypeInternal _InnerGameEvent_default_instance_;
class InnerGameEventChangeMap;
struct InnerGameEventChangeMapDefaultTypeInternal;
extern InnerGameEventChangeMapDefaultTypeInternal _InnerGameEventChangeMap_default_instance_;
class InnerGameEventChangeMapFamilysvr;
struct InnerGameEventChangeMapFamilysvrDefaultTypeInternal;
extern InnerGameEventChangeMapFamilysvrDefaultTypeInternal _InnerGameEventChangeMapFamilysvr_default_instance_;
class InnerGameEventChangeMapFriendsvr;
struct InnerGameEventChangeMapFriendsvrDefaultTypeInternal;
extern InnerGameEventChangeMapFriendsvrDefaultTypeInternal _InnerGameEventChangeMapFriendsvr_default_instance_;
class InnerGameEventChangeMapTeamsvr;
struct InnerGameEventChangeMapTeamsvrDefaultTypeInternal;
extern InnerGameEventChangeMapTeamsvrDefaultTypeInternal _InnerGameEventChangeMapTeamsvr_default_instance_;
class InnerGameEventDeath;
struct InnerGameEventDeathDefaultTypeInternal;
extern InnerGameEventDeathDefaultTypeInternal _InnerGameEventDeath_default_instance_;
class InnerGameEventDeathFriendsvr;
struct InnerGameEventDeathFriendsvrDefaultTypeInternal;
extern InnerGameEventDeathFriendsvrDefaultTypeInternal _InnerGameEventDeathFriendsvr_default_instance_;
class InnerGameEventDeathTeamsvr;
struct InnerGameEventDeathTeamsvrDefaultTypeInternal;
extern InnerGameEventDeathTeamsvrDefaultTypeInternal _InnerGameEventDeathTeamsvr_default_instance_;
class InnerGameEventDestroy;
struct InnerGameEventDestroyDefaultTypeInternal;
extern InnerGameEventDestroyDefaultTypeInternal _InnerGameEventDestroy_default_instance_;
class InnerGameEventDestroyFamilysvr;
struct InnerGameEventDestroyFamilysvrDefaultTypeInternal;
extern InnerGameEventDestroyFamilysvrDefaultTypeInternal _InnerGameEventDestroyFamilysvr_default_instance_;
class InnerGameEventDestroyRanksvr;
struct InnerGameEventDestroyRanksvrDefaultTypeInternal;
extern InnerGameEventDestroyRanksvrDefaultTypeInternal _InnerGameEventDestroyRanksvr_default_instance_;
class InnerGameEventDestroyTeamsvr;
struct InnerGameEventDestroyTeamsvrDefaultTypeInternal;
extern InnerGameEventDestroyTeamsvrDefaultTypeInternal _InnerGameEventDestroyTeamsvr_default_instance_;
class InnerGameEventDestryFriendsvr;
struct InnerGameEventDestryFriendsvrDefaultTypeInternal;
extern InnerGameEventDestryFriendsvrDefaultTypeInternal _InnerGameEventDestryFriendsvr_default_instance_;
class InnerGameEventLogin;
struct InnerGameEventLoginDefaultTypeInternal;
extern InnerGameEventLoginDefaultTypeInternal _InnerGameEventLogin_default_instance_;
class InnerGameEventLoginFamilysvr;
struct InnerGameEventLoginFamilysvrDefaultTypeInternal;
extern InnerGameEventLoginFamilysvrDefaultTypeInternal _InnerGameEventLoginFamilysvr_default_instance_;
class InnerGameEventLoginFriendsvr;
struct InnerGameEventLoginFriendsvrDefaultTypeInternal;
extern InnerGameEventLoginFriendsvrDefaultTypeInternal _InnerGameEventLoginFriendsvr_default_instance_;
class InnerGameEventLoginTeamsvr;
struct InnerGameEventLoginTeamsvrDefaultTypeInternal;
extern InnerGameEventLoginTeamsvrDefaultTypeInternal _InnerGameEventLoginTeamsvr_default_instance_;
class InnerGameEventLogout;
struct InnerGameEventLogoutDefaultTypeInternal;
extern InnerGameEventLogoutDefaultTypeInternal _InnerGameEventLogout_default_instance_;
class InnerGameEventLogoutFamilysvr;
struct InnerGameEventLogoutFamilysvrDefaultTypeInternal;
extern InnerGameEventLogoutFamilysvrDefaultTypeInternal _InnerGameEventLogoutFamilysvr_default_instance_;
class InnerGameEventLogoutFriendsvr;
struct InnerGameEventLogoutFriendsvrDefaultTypeInternal;
extern InnerGameEventLogoutFriendsvrDefaultTypeInternal _InnerGameEventLogoutFriendsvr_default_instance_;
class InnerGameEventLogoutTeamvr;
struct InnerGameEventLogoutTeamvrDefaultTypeInternal;
extern InnerGameEventLogoutTeamvrDefaultTypeInternal _InnerGameEventLogoutTeamvr_default_instance_;
class InnerGameEventOffline;
struct InnerGameEventOfflineDefaultTypeInternal;
extern InnerGameEventOfflineDefaultTypeInternal _InnerGameEventOffline_default_instance_;
class InnerGameEventOfflineFamilysvr;
struct InnerGameEventOfflineFamilysvrDefaultTypeInternal;
extern InnerGameEventOfflineFamilysvrDefaultTypeInternal _InnerGameEventOfflineFamilysvr_default_instance_;
class InnerGameEventOfflineFriendsvr;
struct InnerGameEventOfflineFriendsvrDefaultTypeInternal;
extern InnerGameEventOfflineFriendsvrDefaultTypeInternal _InnerGameEventOfflineFriendsvr_default_instance_;
class InnerGameEventOfflineTeamsvr;
struct InnerGameEventOfflineTeamsvrDefaultTypeInternal;
extern InnerGameEventOfflineTeamsvrDefaultTypeInternal _InnerGameEventOfflineTeamsvr_default_instance_;
class InnerGameEventOnline;
struct InnerGameEventOnlineDefaultTypeInternal;
extern InnerGameEventOnlineDefaultTypeInternal _InnerGameEventOnline_default_instance_;
class InnerGameEventOnlineFamilysvr;
struct InnerGameEventOnlineFamilysvrDefaultTypeInternal;
extern InnerGameEventOnlineFamilysvrDefaultTypeInternal _InnerGameEventOnlineFamilysvr_default_instance_;
class InnerGameEventOnlineFriendsvr;
struct InnerGameEventOnlineFriendsvrDefaultTypeInternal;
extern InnerGameEventOnlineFriendsvrDefaultTypeInternal _InnerGameEventOnlineFriendsvr_default_instance_;
class InnerGameEventOnlineTeamsvr;
struct InnerGameEventOnlineTeamsvrDefaultTypeInternal;
extern InnerGameEventOnlineTeamsvrDefaultTypeInternal _InnerGameEventOnlineTeamsvr_default_instance_;
class InnerGameEventRebirth;
struct InnerGameEventRebirthDefaultTypeInternal;
extern InnerGameEventRebirthDefaultTypeInternal _InnerGameEventRebirth_default_instance_;
class InnerGameEventRebirthFriendsvr;
struct InnerGameEventRebirthFriendsvrDefaultTypeInternal;
extern InnerGameEventRebirthFriendsvrDefaultTypeInternal _InnerGameEventRebirthFriendsvr_default_instance_;
class InnerGameEventRebirthTeamsvr;
struct InnerGameEventRebirthTeamsvrDefaultTypeInternal;
extern InnerGameEventRebirthTeamsvrDefaultTypeInternal _InnerGameEventRebirthTeamsvr_default_instance_;
class InnerGameEventWakeup;
struct InnerGameEventWakeupDefaultTypeInternal;
extern InnerGameEventWakeupDefaultTypeInternal _InnerGameEventWakeup_default_instance_;
class InnerGameEventWakeupFamilysvr;
struct InnerGameEventWakeupFamilysvrDefaultTypeInternal;
extern InnerGameEventWakeupFamilysvrDefaultTypeInternal _InnerGameEventWakeupFamilysvr_default_instance_;
class InnerGameEventWakeupFriendsvr;
struct InnerGameEventWakeupFriendsvrDefaultTypeInternal;
extern InnerGameEventWakeupFriendsvrDefaultTypeInternal _InnerGameEventWakeupFriendsvr_default_instance_;
class InnerGameEventWakeupTeamsvr;
struct InnerGameEventWakeupTeamsvrDefaultTypeInternal;
extern InnerGameEventWakeupTeamsvrDefaultTypeInternal _InnerGameEventWakeupTeamsvr_default_instance_;
class InnerRoleIdList;
struct InnerRoleIdListDefaultTypeInternal;
extern InnerRoleIdListDefaultTypeInternal _InnerRoleIdList_default_instance_;
}  // namespace inner
PROTOBUF_NAMESPACE_OPEN
template<> ::inner::InnerCopyCreateBy* Arena::CreateMaybeMessage<::inner::InnerCopyCreateBy>(Arena*);
template<> ::inner::InnerCopyCrit* Arena::CreateMaybeMessage<::inner::InnerCopyCrit>(Arena*);
template<> ::inner::InnerCopyEnter* Arena::CreateMaybeMessage<::inner::InnerCopyEnter>(Arena*);
template<> ::inner::InnerCopyEnterByChgLvId* Arena::CreateMaybeMessage<::inner::InnerCopyEnterByChgLvId>(Arena*);
template<> ::inner::InnerCopyEnterByHome* Arena::CreateMaybeMessage<::inner::InnerCopyEnterByHome>(Arena*);
template<> ::inner::InnerCopyEnterByTeam* Arena::CreateMaybeMessage<::inner::InnerCopyEnterByTeam>(Arena*);
template<> ::inner::InnerCopyPve* Arena::CreateMaybeMessage<::inner::InnerCopyPve>(Arena*);
template<> ::inner::InnerCopyPvp* Arena::CreateMaybeMessage<::inner::InnerCopyPvp>(Arena*);
template<> ::inner::InnerCopyPvpF55* Arena::CreateMaybeMessage<::inner::InnerCopyPvpF55>(Arena*);
template<> ::inner::InnerCopyTeam* Arena::CreateMaybeMessage<::inner::InnerCopyTeam>(Arena*);
template<> ::inner::InnerCopyTeamList* Arena::CreateMaybeMessage<::inner::InnerCopyTeamList>(Arena*);
template<> ::inner::InnerCopyTeamMem* Arena::CreateMaybeMessage<::inner::InnerCopyTeamMem>(Arena*);
template<> ::inner::InnerCopyType* Arena::CreateMaybeMessage<::inner::InnerCopyType>(Arena*);
template<> ::inner::InnerCopyWay* Arena::CreateMaybeMessage<::inner::InnerCopyWay>(Arena*);
template<> ::inner::InnerCopyWayByMatch* Arena::CreateMaybeMessage<::inner::InnerCopyWayByMatch>(Arena*);
template<> ::inner::InnerCopyWayByTeam* Arena::CreateMaybeMessage<::inner::InnerCopyWayByTeam>(Arena*);
template<> ::inner::InnerGameEvent* Arena::CreateMaybeMessage<::inner::InnerGameEvent>(Arena*);
template<> ::inner::InnerGameEventChangeMap* Arena::CreateMaybeMessage<::inner::InnerGameEventChangeMap>(Arena*);
template<> ::inner::InnerGameEventChangeMapFamilysvr* Arena::CreateMaybeMessage<::inner::InnerGameEventChangeMapFamilysvr>(Arena*);
template<> ::inner::InnerGameEventChangeMapFriendsvr* Arena::CreateMaybeMessage<::inner::InnerGameEventChangeMapFriendsvr>(Arena*);
template<> ::inner::InnerGameEventChangeMapTeamsvr* Arena::CreateMaybeMessage<::inner::InnerGameEventChangeMapTeamsvr>(Arena*);
template<> ::inner::InnerGameEventDeath* Arena::CreateMaybeMessage<::inner::InnerGameEventDeath>(Arena*);
template<> ::inner::InnerGameEventDeathFriendsvr* Arena::CreateMaybeMessage<::inner::InnerGameEventDeathFriendsvr>(Arena*);
template<> ::inner::InnerGameEventDeathTeamsvr* Arena::CreateMaybeMessage<::inner::InnerGameEventDeathTeamsvr>(Arena*);
template<> ::inner::InnerGameEventDestroy* Arena::CreateMaybeMessage<::inner::InnerGameEventDestroy>(Arena*);
template<> ::inner::InnerGameEventDestroyFamilysvr* Arena::CreateMaybeMessage<::inner::InnerGameEventDestroyFamilysvr>(Arena*);
template<> ::inner::InnerGameEventDestroyRanksvr* Arena::CreateMaybeMessage<::inner::InnerGameEventDestroyRanksvr>(Arena*);
template<> ::inner::InnerGameEventDestroyTeamsvr* Arena::CreateMaybeMessage<::inner::InnerGameEventDestroyTeamsvr>(Arena*);
template<> ::inner::InnerGameEventDestryFriendsvr* Arena::CreateMaybeMessage<::inner::InnerGameEventDestryFriendsvr>(Arena*);
template<> ::inner::InnerGameEventLogin* Arena::CreateMaybeMessage<::inner::InnerGameEventLogin>(Arena*);
template<> ::inner::InnerGameEventLoginFamilysvr* Arena::CreateMaybeMessage<::inner::InnerGameEventLoginFamilysvr>(Arena*);
template<> ::inner::InnerGameEventLoginFriendsvr* Arena::CreateMaybeMessage<::inner::InnerGameEventLoginFriendsvr>(Arena*);
template<> ::inner::InnerGameEventLoginTeamsvr* Arena::CreateMaybeMessage<::inner::InnerGameEventLoginTeamsvr>(Arena*);
template<> ::inner::InnerGameEventLogout* Arena::CreateMaybeMessage<::inner::InnerGameEventLogout>(Arena*);
template<> ::inner::InnerGameEventLogoutFamilysvr* Arena::CreateMaybeMessage<::inner::InnerGameEventLogoutFamilysvr>(Arena*);
template<> ::inner::InnerGameEventLogoutFriendsvr* Arena::CreateMaybeMessage<::inner::InnerGameEventLogoutFriendsvr>(Arena*);
template<> ::inner::InnerGameEventLogoutTeamvr* Arena::CreateMaybeMessage<::inner::InnerGameEventLogoutTeamvr>(Arena*);
template<> ::inner::InnerGameEventOffline* Arena::CreateMaybeMessage<::inner::InnerGameEventOffline>(Arena*);
template<> ::inner::InnerGameEventOfflineFamilysvr* Arena::CreateMaybeMessage<::inner::InnerGameEventOfflineFamilysvr>(Arena*);
template<> ::inner::InnerGameEventOfflineFriendsvr* Arena::CreateMaybeMessage<::inner::InnerGameEventOfflineFriendsvr>(Arena*);
template<> ::inner::InnerGameEventOfflineTeamsvr* Arena::CreateMaybeMessage<::inner::InnerGameEventOfflineTeamsvr>(Arena*);
template<> ::inner::InnerGameEventOnline* Arena::CreateMaybeMessage<::inner::InnerGameEventOnline>(Arena*);
template<> ::inner::InnerGameEventOnlineFamilysvr* Arena::CreateMaybeMessage<::inner::InnerGameEventOnlineFamilysvr>(Arena*);
template<> ::inner::InnerGameEventOnlineFriendsvr* Arena::CreateMaybeMessage<::inner::InnerGameEventOnlineFriendsvr>(Arena*);
template<> ::inner::InnerGameEventOnlineTeamsvr* Arena::CreateMaybeMessage<::inner::InnerGameEventOnlineTeamsvr>(Arena*);
template<> ::inner::InnerGameEventRebirth* Arena::CreateMaybeMessage<::inner::InnerGameEventRebirth>(Arena*);
template<> ::inner::InnerGameEventRebirthFriendsvr* Arena::CreateMaybeMessage<::inner::InnerGameEventRebirthFriendsvr>(Arena*);
template<> ::inner::InnerGameEventRebirthTeamsvr* Arena::CreateMaybeMessage<::inner::InnerGameEventRebirthTeamsvr>(Arena*);
template<> ::inner::InnerGameEventWakeup* Arena::CreateMaybeMessage<::inner::InnerGameEventWakeup>(Arena*);
template<> ::inner::InnerGameEventWakeupFamilysvr* Arena::CreateMaybeMessage<::inner::InnerGameEventWakeupFamilysvr>(Arena*);
template<> ::inner::InnerGameEventWakeupFriendsvr* Arena::CreateMaybeMessage<::inner::InnerGameEventWakeupFriendsvr>(Arena*);
template<> ::inner::InnerGameEventWakeupTeamsvr* Arena::CreateMaybeMessage<::inner::InnerGameEventWakeupTeamsvr>(Arena*);
template<> ::inner::InnerRoleIdList* Arena::CreateMaybeMessage<::inner::InnerRoleIdList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inner {

// ===================================================================

class InnerRoleIdList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerRoleIdList) */ {
 public:
  inline InnerRoleIdList() : InnerRoleIdList(nullptr) {}
  ~InnerRoleIdList() override;
  explicit PROTOBUF_CONSTEXPR InnerRoleIdList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerRoleIdList(const InnerRoleIdList& from);
  InnerRoleIdList(InnerRoleIdList&& from) noexcept
    : InnerRoleIdList() {
    *this = ::std::move(from);
  }

  inline InnerRoleIdList& operator=(const InnerRoleIdList& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerRoleIdList& operator=(InnerRoleIdList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerRoleIdList& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerRoleIdList* internal_default_instance() {
    return reinterpret_cast<const InnerRoleIdList*>(
               &_InnerRoleIdList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InnerRoleIdList& a, InnerRoleIdList& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerRoleIdList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerRoleIdList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerRoleIdList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerRoleIdList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerRoleIdList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerRoleIdList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerRoleIdList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerRoleIdList";
  }
  protected:
  explicit InnerRoleIdList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdsFieldNumber = 1,
  };
  // repeated uint64 roleIds = 1;
  int roleids_size() const;
  private:
  int _internal_roleids_size() const;
  public:
  void clear_roleids();
  private:
  uint64_t _internal_roleids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_roleids() const;
  void _internal_add_roleids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_roleids();
  public:
  uint64_t roleids(int index) const;
  void set_roleids(int index, uint64_t value);
  void add_roleids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      roleids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_roleids();

  // @@protoc_insertion_point(class_scope:inner.InnerRoleIdList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > roleids_;
  mutable std::atomic<int> _roleids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerCopyTeamMem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerCopyTeamMem) */ {
 public:
  inline InnerCopyTeamMem() : InnerCopyTeamMem(nullptr) {}
  ~InnerCopyTeamMem() override;
  explicit PROTOBUF_CONSTEXPR InnerCopyTeamMem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerCopyTeamMem(const InnerCopyTeamMem& from);
  InnerCopyTeamMem(InnerCopyTeamMem&& from) noexcept
    : InnerCopyTeamMem() {
    *this = ::std::move(from);
  }

  inline InnerCopyTeamMem& operator=(const InnerCopyTeamMem& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerCopyTeamMem& operator=(InnerCopyTeamMem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerCopyTeamMem& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerCopyTeamMem* internal_default_instance() {
    return reinterpret_cast<const InnerCopyTeamMem*>(
               &_InnerCopyTeamMem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InnerCopyTeamMem& a, InnerCopyTeamMem& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerCopyTeamMem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerCopyTeamMem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerCopyTeamMem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerCopyTeamMem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerCopyTeamMem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerCopyTeamMem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerCopyTeamMem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerCopyTeamMem";
  }
  protected:
  explicit InnerCopyTeamMem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
    kZoneIdFFieldNumber = 2,
  };
  // uint64 roleId = 1;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // uint32 zoneIdF = 2;
  void clear_zoneidf();
  uint32_t zoneidf() const;
  void set_zoneidf(uint32_t value);
  private:
  uint32_t _internal_zoneidf() const;
  void _internal_set_zoneidf(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerCopyTeamMem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t roleid_;
  uint32_t zoneidf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerCopyTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerCopyTeam) */ {
 public:
  inline InnerCopyTeam() : InnerCopyTeam(nullptr) {}
  ~InnerCopyTeam() override;
  explicit PROTOBUF_CONSTEXPR InnerCopyTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerCopyTeam(const InnerCopyTeam& from);
  InnerCopyTeam(InnerCopyTeam&& from) noexcept
    : InnerCopyTeam() {
    *this = ::std::move(from);
  }

  inline InnerCopyTeam& operator=(const InnerCopyTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerCopyTeam& operator=(InnerCopyTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerCopyTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerCopyTeam* internal_default_instance() {
    return reinterpret_cast<const InnerCopyTeam*>(
               &_InnerCopyTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InnerCopyTeam& a, InnerCopyTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerCopyTeam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerCopyTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerCopyTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerCopyTeam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerCopyTeam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerCopyTeam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerCopyTeam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerCopyTeam";
  }
  protected:
  explicit InnerCopyTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 1,
    kRobotsFieldNumber = 2,
  };
  // repeated .inner.InnerCopyTeamMem roles = 1;
  int roles_size() const;
  private:
  int _internal_roles_size() const;
  public:
  void clear_roles();
  ::inner::InnerCopyTeamMem* mutable_roles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inner::InnerCopyTeamMem >*
      mutable_roles();
  private:
  const ::inner::InnerCopyTeamMem& _internal_roles(int index) const;
  ::inner::InnerCopyTeamMem* _internal_add_roles();
  public:
  const ::inner::InnerCopyTeamMem& roles(int index) const;
  ::inner::InnerCopyTeamMem* add_roles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inner::InnerCopyTeamMem >&
      roles() const;

  // repeated .inner.InnerCopyTeamMem robots = 2;
  int robots_size() const;
  private:
  int _internal_robots_size() const;
  public:
  void clear_robots();
  ::inner::InnerCopyTeamMem* mutable_robots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inner::InnerCopyTeamMem >*
      mutable_robots();
  private:
  const ::inner::InnerCopyTeamMem& _internal_robots(int index) const;
  ::inner::InnerCopyTeamMem* _internal_add_robots();
  public:
  const ::inner::InnerCopyTeamMem& robots(int index) const;
  ::inner::InnerCopyTeamMem* add_robots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inner::InnerCopyTeamMem >&
      robots() const;

  // @@protoc_insertion_point(class_scope:inner.InnerCopyTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inner::InnerCopyTeamMem > roles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inner::InnerCopyTeamMem > robots_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerCopyTeamList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerCopyTeamList) */ {
 public:
  inline InnerCopyTeamList() : InnerCopyTeamList(nullptr) {}
  ~InnerCopyTeamList() override;
  explicit PROTOBUF_CONSTEXPR InnerCopyTeamList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerCopyTeamList(const InnerCopyTeamList& from);
  InnerCopyTeamList(InnerCopyTeamList&& from) noexcept
    : InnerCopyTeamList() {
    *this = ::std::move(from);
  }

  inline InnerCopyTeamList& operator=(const InnerCopyTeamList& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerCopyTeamList& operator=(InnerCopyTeamList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerCopyTeamList& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerCopyTeamList* internal_default_instance() {
    return reinterpret_cast<const InnerCopyTeamList*>(
               &_InnerCopyTeamList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InnerCopyTeamList& a, InnerCopyTeamList& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerCopyTeamList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerCopyTeamList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerCopyTeamList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerCopyTeamList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerCopyTeamList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerCopyTeamList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerCopyTeamList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerCopyTeamList";
  }
  protected:
  explicit InnerCopyTeamList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamsFieldNumber = 2,
    kTargetIdFieldNumber = 1,
  };
  // repeated .inner.InnerCopyTeam teams = 2;
  int teams_size() const;
  private:
  int _internal_teams_size() const;
  public:
  void clear_teams();
  ::inner::InnerCopyTeam* mutable_teams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inner::InnerCopyTeam >*
      mutable_teams();
  private:
  const ::inner::InnerCopyTeam& _internal_teams(int index) const;
  ::inner::InnerCopyTeam* _internal_add_teams();
  public:
  const ::inner::InnerCopyTeam& teams(int index) const;
  ::inner::InnerCopyTeam* add_teams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inner::InnerCopyTeam >&
      teams() const;

  // uint32 targetId = 1;
  void clear_targetid();
  uint32_t targetid() const;
  void set_targetid(uint32_t value);
  private:
  uint32_t _internal_targetid() const;
  void _internal_set_targetid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerCopyTeamList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inner::InnerCopyTeam > teams_;
  uint32_t targetid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerCopyEnterByTeam final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerCopyEnterByTeam) */ {
 public:
  inline InnerCopyEnterByTeam() : InnerCopyEnterByTeam(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerCopyEnterByTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerCopyEnterByTeam(const InnerCopyEnterByTeam& from);
  InnerCopyEnterByTeam(InnerCopyEnterByTeam&& from) noexcept
    : InnerCopyEnterByTeam() {
    *this = ::std::move(from);
  }

  inline InnerCopyEnterByTeam& operator=(const InnerCopyEnterByTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerCopyEnterByTeam& operator=(InnerCopyEnterByTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerCopyEnterByTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerCopyEnterByTeam* internal_default_instance() {
    return reinterpret_cast<const InnerCopyEnterByTeam*>(
               &_InnerCopyEnterByTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InnerCopyEnterByTeam& a, InnerCopyEnterByTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerCopyEnterByTeam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerCopyEnterByTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerCopyEnterByTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerCopyEnterByTeam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerCopyEnterByTeam& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerCopyEnterByTeam& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerCopyEnterByTeam";
  }
  protected:
  explicit InnerCopyEnterByTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerCopyEnterByTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerCopyEnterByChgLvId final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerCopyEnterByChgLvId) */ {
 public:
  inline InnerCopyEnterByChgLvId() : InnerCopyEnterByChgLvId(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerCopyEnterByChgLvId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerCopyEnterByChgLvId(const InnerCopyEnterByChgLvId& from);
  InnerCopyEnterByChgLvId(InnerCopyEnterByChgLvId&& from) noexcept
    : InnerCopyEnterByChgLvId() {
    *this = ::std::move(from);
  }

  inline InnerCopyEnterByChgLvId& operator=(const InnerCopyEnterByChgLvId& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerCopyEnterByChgLvId& operator=(InnerCopyEnterByChgLvId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerCopyEnterByChgLvId& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerCopyEnterByChgLvId* internal_default_instance() {
    return reinterpret_cast<const InnerCopyEnterByChgLvId*>(
               &_InnerCopyEnterByChgLvId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InnerCopyEnterByChgLvId& a, InnerCopyEnterByChgLvId& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerCopyEnterByChgLvId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerCopyEnterByChgLvId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerCopyEnterByChgLvId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerCopyEnterByChgLvId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerCopyEnterByChgLvId& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerCopyEnterByChgLvId& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerCopyEnterByChgLvId";
  }
  protected:
  explicit InnerCopyEnterByChgLvId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerCopyEnterByChgLvId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerCopyEnterByHome final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerCopyEnterByHome) */ {
 public:
  inline InnerCopyEnterByHome() : InnerCopyEnterByHome(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerCopyEnterByHome(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerCopyEnterByHome(const InnerCopyEnterByHome& from);
  InnerCopyEnterByHome(InnerCopyEnterByHome&& from) noexcept
    : InnerCopyEnterByHome() {
    *this = ::std::move(from);
  }

  inline InnerCopyEnterByHome& operator=(const InnerCopyEnterByHome& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerCopyEnterByHome& operator=(InnerCopyEnterByHome&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerCopyEnterByHome& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerCopyEnterByHome* internal_default_instance() {
    return reinterpret_cast<const InnerCopyEnterByHome*>(
               &_InnerCopyEnterByHome_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(InnerCopyEnterByHome& a, InnerCopyEnterByHome& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerCopyEnterByHome* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerCopyEnterByHome* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerCopyEnterByHome* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerCopyEnterByHome>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerCopyEnterByHome& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerCopyEnterByHome& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerCopyEnterByHome";
  }
  protected:
  explicit InnerCopyEnterByHome(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerCopyEnterByHome)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerCopyEnter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerCopyEnter) */ {
 public:
  inline InnerCopyEnter() : InnerCopyEnter(nullptr) {}
  ~InnerCopyEnter() override;
  explicit PROTOBUF_CONSTEXPR InnerCopyEnter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerCopyEnter(const InnerCopyEnter& from);
  InnerCopyEnter(InnerCopyEnter&& from) noexcept
    : InnerCopyEnter() {
    *this = ::std::move(from);
  }

  inline InnerCopyEnter& operator=(const InnerCopyEnter& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerCopyEnter& operator=(InnerCopyEnter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerCopyEnter& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kTeam = 11,
    kChgLvId = 12,
    kHome = 13,
    TYPE_NOT_SET = 0,
  };

  static inline const InnerCopyEnter* internal_default_instance() {
    return reinterpret_cast<const InnerCopyEnter*>(
               &_InnerCopyEnter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(InnerCopyEnter& a, InnerCopyEnter& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerCopyEnter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerCopyEnter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerCopyEnter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerCopyEnter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerCopyEnter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerCopyEnter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerCopyEnter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerCopyEnter";
  }
  protected:
  explicit InnerCopyEnter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamListFieldNumber = 5,
    kCopyLvIdFieldNumber = 1,
    kEProcFieldNumber = 2,
    kThreeIdFieldNumber = 3,
    kVoteIdFieldNumber = 4,
    kTeamFieldNumber = 11,
    kChgLvIdFieldNumber = 12,
    kHomeFieldNumber = 13,
  };
  // .inner.InnerCopyTeamList teamList = 5;
  bool has_teamlist() const;
  private:
  bool _internal_has_teamlist() const;
  public:
  void clear_teamlist();
  const ::inner::InnerCopyTeamList& teamlist() const;
  PROTOBUF_NODISCARD ::inner::InnerCopyTeamList* release_teamlist();
  ::inner::InnerCopyTeamList* mutable_teamlist();
  void set_allocated_teamlist(::inner::InnerCopyTeamList* teamlist);
  private:
  const ::inner::InnerCopyTeamList& _internal_teamlist() const;
  ::inner::InnerCopyTeamList* _internal_mutable_teamlist();
  public:
  void unsafe_arena_set_allocated_teamlist(
      ::inner::InnerCopyTeamList* teamlist);
  ::inner::InnerCopyTeamList* unsafe_arena_release_teamlist();

  // uint32 copyLvId = 1;
  void clear_copylvid();
  uint32_t copylvid() const;
  void set_copylvid(uint32_t value);
  private:
  uint32_t _internal_copylvid() const;
  void _internal_set_copylvid(uint32_t value);
  public:

  // uint32 eProc = 2;
  void clear_eproc();
  uint32_t eproc() const;
  void set_eproc(uint32_t value);
  private:
  uint32_t _internal_eproc() const;
  void _internal_set_eproc(uint32_t value);
  public:

  // uint32 threeId = 3;
  void clear_threeid();
  uint32_t threeid() const;
  void set_threeid(uint32_t value);
  private:
  uint32_t _internal_threeid() const;
  void _internal_set_threeid(uint32_t value);
  public:

  // uint32 voteId = 4;
  void clear_voteid();
  uint32_t voteid() const;
  void set_voteid(uint32_t value);
  private:
  uint32_t _internal_voteid() const;
  void _internal_set_voteid(uint32_t value);
  public:

  // .inner.InnerCopyEnterByTeam team = 11;
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  const ::inner::InnerCopyEnterByTeam& team() const;
  PROTOBUF_NODISCARD ::inner::InnerCopyEnterByTeam* release_team();
  ::inner::InnerCopyEnterByTeam* mutable_team();
  void set_allocated_team(::inner::InnerCopyEnterByTeam* team);
  private:
  const ::inner::InnerCopyEnterByTeam& _internal_team() const;
  ::inner::InnerCopyEnterByTeam* _internal_mutable_team();
  public:
  void unsafe_arena_set_allocated_team(
      ::inner::InnerCopyEnterByTeam* team);
  ::inner::InnerCopyEnterByTeam* unsafe_arena_release_team();

  // .inner.InnerCopyEnterByChgLvId chgLvId = 12;
  bool has_chglvid() const;
  private:
  bool _internal_has_chglvid() const;
  public:
  void clear_chglvid();
  const ::inner::InnerCopyEnterByChgLvId& chglvid() const;
  PROTOBUF_NODISCARD ::inner::InnerCopyEnterByChgLvId* release_chglvid();
  ::inner::InnerCopyEnterByChgLvId* mutable_chglvid();
  void set_allocated_chglvid(::inner::InnerCopyEnterByChgLvId* chglvid);
  private:
  const ::inner::InnerCopyEnterByChgLvId& _internal_chglvid() const;
  ::inner::InnerCopyEnterByChgLvId* _internal_mutable_chglvid();
  public:
  void unsafe_arena_set_allocated_chglvid(
      ::inner::InnerCopyEnterByChgLvId* chglvid);
  ::inner::InnerCopyEnterByChgLvId* unsafe_arena_release_chglvid();

  // .inner.InnerCopyEnterByHome home = 13;
  bool has_home() const;
  private:
  bool _internal_has_home() const;
  public:
  void clear_home();
  const ::inner::InnerCopyEnterByHome& home() const;
  PROTOBUF_NODISCARD ::inner::InnerCopyEnterByHome* release_home();
  ::inner::InnerCopyEnterByHome* mutable_home();
  void set_allocated_home(::inner::InnerCopyEnterByHome* home);
  private:
  const ::inner::InnerCopyEnterByHome& _internal_home() const;
  ::inner::InnerCopyEnterByHome* _internal_mutable_home();
  public:
  void unsafe_arena_set_allocated_home(
      ::inner::InnerCopyEnterByHome* home);
  ::inner::InnerCopyEnterByHome* unsafe_arena_release_home();

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:inner.InnerCopyEnter)
 private:
  class _Internal;
  void set_has_team();
  void set_has_chglvid();
  void set_has_home();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::inner::InnerCopyTeamList* teamlist_;
  uint32_t copylvid_;
  uint32_t eproc_;
  uint32_t threeid_;
  uint32_t voteid_;
  union TypeUnion {
    constexpr TypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::inner::InnerCopyEnterByTeam* team_;
    ::inner::InnerCopyEnterByChgLvId* chglvid_;
    ::inner::InnerCopyEnterByHome* home_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerCopyWayByMatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerCopyWayByMatch) */ {
 public:
  inline InnerCopyWayByMatch() : InnerCopyWayByMatch(nullptr) {}
  ~InnerCopyWayByMatch() override;
  explicit PROTOBUF_CONSTEXPR InnerCopyWayByMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerCopyWayByMatch(const InnerCopyWayByMatch& from);
  InnerCopyWayByMatch(InnerCopyWayByMatch&& from) noexcept
    : InnerCopyWayByMatch() {
    *this = ::std::move(from);
  }

  inline InnerCopyWayByMatch& operator=(const InnerCopyWayByMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerCopyWayByMatch& operator=(InnerCopyWayByMatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerCopyWayByMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerCopyWayByMatch* internal_default_instance() {
    return reinterpret_cast<const InnerCopyWayByMatch*>(
               &_InnerCopyWayByMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(InnerCopyWayByMatch& a, InnerCopyWayByMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerCopyWayByMatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerCopyWayByMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerCopyWayByMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerCopyWayByMatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerCopyWayByMatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerCopyWayByMatch& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerCopyWayByMatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerCopyWayByMatch";
  }
  protected:
  explicit InnerCopyWayByMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMtypeFieldNumber = 1,
    kSeasonIdFieldNumber = 2,
    kDayIdFieldNumber = 3,
  };
  // uint32 mtype = 1;
  void clear_mtype();
  uint32_t mtype() const;
  void set_mtype(uint32_t value);
  private:
  uint32_t _internal_mtype() const;
  void _internal_set_mtype(uint32_t value);
  public:

  // uint32 seasonId = 2;
  void clear_seasonid();
  uint32_t seasonid() const;
  void set_seasonid(uint32_t value);
  private:
  uint32_t _internal_seasonid() const;
  void _internal_set_seasonid(uint32_t value);
  public:

  // uint32 dayId = 3;
  void clear_dayid();
  uint32_t dayid() const;
  void set_dayid(uint32_t value);
  private:
  uint32_t _internal_dayid() const;
  void _internal_set_dayid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerCopyWayByMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t mtype_;
  uint32_t seasonid_;
  uint32_t dayid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerCopyWayByTeam final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerCopyWayByTeam) */ {
 public:
  inline InnerCopyWayByTeam() : InnerCopyWayByTeam(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerCopyWayByTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerCopyWayByTeam(const InnerCopyWayByTeam& from);
  InnerCopyWayByTeam(InnerCopyWayByTeam&& from) noexcept
    : InnerCopyWayByTeam() {
    *this = ::std::move(from);
  }

  inline InnerCopyWayByTeam& operator=(const InnerCopyWayByTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerCopyWayByTeam& operator=(InnerCopyWayByTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerCopyWayByTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerCopyWayByTeam* internal_default_instance() {
    return reinterpret_cast<const InnerCopyWayByTeam*>(
               &_InnerCopyWayByTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(InnerCopyWayByTeam& a, InnerCopyWayByTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerCopyWayByTeam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerCopyWayByTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerCopyWayByTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerCopyWayByTeam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerCopyWayByTeam& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerCopyWayByTeam& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerCopyWayByTeam";
  }
  protected:
  explicit InnerCopyWayByTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerCopyWayByTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerCopyWay final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerCopyWay) */ {
 public:
  inline InnerCopyWay() : InnerCopyWay(nullptr) {}
  ~InnerCopyWay() override;
  explicit PROTOBUF_CONSTEXPR InnerCopyWay(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerCopyWay(const InnerCopyWay& from);
  InnerCopyWay(InnerCopyWay&& from) noexcept
    : InnerCopyWay() {
    *this = ::std::move(from);
  }

  inline InnerCopyWay& operator=(const InnerCopyWay& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerCopyWay& operator=(InnerCopyWay&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerCopyWay& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kByMatch = 11,
    kByTeam = 12,
    TYPE_NOT_SET = 0,
  };

  static inline const InnerCopyWay* internal_default_instance() {
    return reinterpret_cast<const InnerCopyWay*>(
               &_InnerCopyWay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(InnerCopyWay& a, InnerCopyWay& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerCopyWay* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerCopyWay* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerCopyWay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerCopyWay>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerCopyWay& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerCopyWay& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerCopyWay* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerCopyWay";
  }
  protected:
  explicit InnerCopyWay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamListFieldNumber = 1,
    kByMatchFieldNumber = 11,
    kByTeamFieldNumber = 12,
  };
  // .inner.InnerCopyTeamList teamList = 1;
  bool has_teamlist() const;
  private:
  bool _internal_has_teamlist() const;
  public:
  void clear_teamlist();
  const ::inner::InnerCopyTeamList& teamlist() const;
  PROTOBUF_NODISCARD ::inner::InnerCopyTeamList* release_teamlist();
  ::inner::InnerCopyTeamList* mutable_teamlist();
  void set_allocated_teamlist(::inner::InnerCopyTeamList* teamlist);
  private:
  const ::inner::InnerCopyTeamList& _internal_teamlist() const;
  ::inner::InnerCopyTeamList* _internal_mutable_teamlist();
  public:
  void unsafe_arena_set_allocated_teamlist(
      ::inner::InnerCopyTeamList* teamlist);
  ::inner::InnerCopyTeamList* unsafe_arena_release_teamlist();

  // .inner.InnerCopyWayByMatch byMatch = 11;
  bool has_bymatch() const;
  private:
  bool _internal_has_bymatch() const;
  public:
  void clear_bymatch();
  const ::inner::InnerCopyWayByMatch& bymatch() const;
  PROTOBUF_NODISCARD ::inner::InnerCopyWayByMatch* release_bymatch();
  ::inner::InnerCopyWayByMatch* mutable_bymatch();
  void set_allocated_bymatch(::inner::InnerCopyWayByMatch* bymatch);
  private:
  const ::inner::InnerCopyWayByMatch& _internal_bymatch() const;
  ::inner::InnerCopyWayByMatch* _internal_mutable_bymatch();
  public:
  void unsafe_arena_set_allocated_bymatch(
      ::inner::InnerCopyWayByMatch* bymatch);
  ::inner::InnerCopyWayByMatch* unsafe_arena_release_bymatch();

  // .inner.InnerCopyWayByTeam byTeam = 12;
  bool has_byteam() const;
  private:
  bool _internal_has_byteam() const;
  public:
  void clear_byteam();
  const ::inner::InnerCopyWayByTeam& byteam() const;
  PROTOBUF_NODISCARD ::inner::InnerCopyWayByTeam* release_byteam();
  ::inner::InnerCopyWayByTeam* mutable_byteam();
  void set_allocated_byteam(::inner::InnerCopyWayByTeam* byteam);
  private:
  const ::inner::InnerCopyWayByTeam& _internal_byteam() const;
  ::inner::InnerCopyWayByTeam* _internal_mutable_byteam();
  public:
  void unsafe_arena_set_allocated_byteam(
      ::inner::InnerCopyWayByTeam* byteam);
  ::inner::InnerCopyWayByTeam* unsafe_arena_release_byteam();

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:inner.InnerCopyWay)
 private:
  class _Internal;
  void set_has_bymatch();
  void set_has_byteam();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::inner::InnerCopyTeamList* teamlist_;
  union TypeUnion {
    constexpr TypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::inner::InnerCopyWayByMatch* bymatch_;
    ::inner::InnerCopyWayByTeam* byteam_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerCopyPvpF55 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerCopyPvpF55) */ {
 public:
  inline InnerCopyPvpF55() : InnerCopyPvpF55(nullptr) {}
  ~InnerCopyPvpF55() override;
  explicit PROTOBUF_CONSTEXPR InnerCopyPvpF55(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerCopyPvpF55(const InnerCopyPvpF55& from);
  InnerCopyPvpF55(InnerCopyPvpF55&& from) noexcept
    : InnerCopyPvpF55() {
    *this = ::std::move(from);
  }

  inline InnerCopyPvpF55& operator=(const InnerCopyPvpF55& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerCopyPvpF55& operator=(InnerCopyPvpF55&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerCopyPvpF55& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerCopyPvpF55* internal_default_instance() {
    return reinterpret_cast<const InnerCopyPvpF55*>(
               &_InnerCopyPvpF55_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(InnerCopyPvpF55& a, InnerCopyPvpF55& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerCopyPvpF55* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerCopyPvpF55* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerCopyPvpF55* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerCopyPvpF55>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerCopyPvpF55& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerCopyPvpF55& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerCopyPvpF55* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerCopyPvpF55";
  }
  protected:
  explicit InnerCopyPvpF55(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCopyIdFieldNumber = 1,
  };
  // uint32 copyId = 1;
  void clear_copyid();
  uint32_t copyid() const;
  void set_copyid(uint32_t value);
  private:
  uint32_t _internal_copyid() const;
  void _internal_set_copyid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerCopyPvpF55)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t copyid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerCopyPvp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerCopyPvp) */ {
 public:
  inline InnerCopyPvp() : InnerCopyPvp(nullptr) {}
  ~InnerCopyPvp() override;
  explicit PROTOBUF_CONSTEXPR InnerCopyPvp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerCopyPvp(const InnerCopyPvp& from);
  InnerCopyPvp(InnerCopyPvp&& from) noexcept
    : InnerCopyPvp() {
    *this = ::std::move(from);
  }

  inline InnerCopyPvp& operator=(const InnerCopyPvp& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerCopyPvp& operator=(InnerCopyPvp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerCopyPvp& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kF55 = 11,
    TYPE_NOT_SET = 0,
  };

  static inline const InnerCopyPvp* internal_default_instance() {
    return reinterpret_cast<const InnerCopyPvp*>(
               &_InnerCopyPvp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(InnerCopyPvp& a, InnerCopyPvp& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerCopyPvp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerCopyPvp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerCopyPvp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerCopyPvp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerCopyPvp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerCopyPvp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerCopyPvp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerCopyPvp";
  }
  protected:
  explicit InnerCopyPvp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF55FieldNumber = 11,
  };
  // .inner.InnerCopyPvpF55 f55 = 11;
  bool has_f55() const;
  private:
  bool _internal_has_f55() const;
  public:
  void clear_f55();
  const ::inner::InnerCopyPvpF55& f55() const;
  PROTOBUF_NODISCARD ::inner::InnerCopyPvpF55* release_f55();
  ::inner::InnerCopyPvpF55* mutable_f55();
  void set_allocated_f55(::inner::InnerCopyPvpF55* f55);
  private:
  const ::inner::InnerCopyPvpF55& _internal_f55() const;
  ::inner::InnerCopyPvpF55* _internal_mutable_f55();
  public:
  void unsafe_arena_set_allocated_f55(
      ::inner::InnerCopyPvpF55* f55);
  ::inner::InnerCopyPvpF55* unsafe_arena_release_f55();

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:inner.InnerCopyPvp)
 private:
  class _Internal;
  void set_has_f55();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TypeUnion {
    constexpr TypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::inner::InnerCopyPvpF55* f55_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerCopyPve final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerCopyPve) */ {
 public:
  inline InnerCopyPve() : InnerCopyPve(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerCopyPve(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerCopyPve(const InnerCopyPve& from);
  InnerCopyPve(InnerCopyPve&& from) noexcept
    : InnerCopyPve() {
    *this = ::std::move(from);
  }

  inline InnerCopyPve& operator=(const InnerCopyPve& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerCopyPve& operator=(InnerCopyPve&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerCopyPve& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerCopyPve* internal_default_instance() {
    return reinterpret_cast<const InnerCopyPve*>(
               &_InnerCopyPve_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(InnerCopyPve& a, InnerCopyPve& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerCopyPve* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerCopyPve* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerCopyPve* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerCopyPve>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerCopyPve& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerCopyPve& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerCopyPve";
  }
  protected:
  explicit InnerCopyPve(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerCopyPve)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerCopyType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerCopyType) */ {
 public:
  inline InnerCopyType() : InnerCopyType(nullptr) {}
  ~InnerCopyType() override;
  explicit PROTOBUF_CONSTEXPR InnerCopyType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerCopyType(const InnerCopyType& from);
  InnerCopyType(InnerCopyType&& from) noexcept
    : InnerCopyType() {
    *this = ::std::move(from);
  }

  inline InnerCopyType& operator=(const InnerCopyType& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerCopyType& operator=(InnerCopyType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerCopyType& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kPvp = 11,
    kPve = 12,
    TYPE_NOT_SET = 0,
  };

  static inline const InnerCopyType* internal_default_instance() {
    return reinterpret_cast<const InnerCopyType*>(
               &_InnerCopyType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(InnerCopyType& a, InnerCopyType& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerCopyType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerCopyType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerCopyType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerCopyType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerCopyType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerCopyType& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerCopyType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerCopyType";
  }
  protected:
  explicit InnerCopyType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCopyLvIdFieldNumber = 1,
    kEProcFieldNumber = 2,
    kThreeIdFieldNumber = 3,
    kPvpFieldNumber = 11,
    kPveFieldNumber = 12,
  };
  // uint32 copyLvId = 1;
  void clear_copylvid();
  uint32_t copylvid() const;
  void set_copylvid(uint32_t value);
  private:
  uint32_t _internal_copylvid() const;
  void _internal_set_copylvid(uint32_t value);
  public:

  // uint32 eProc = 2;
  void clear_eproc();
  uint32_t eproc() const;
  void set_eproc(uint32_t value);
  private:
  uint32_t _internal_eproc() const;
  void _internal_set_eproc(uint32_t value);
  public:

  // uint32 threeId = 3;
  void clear_threeid();
  uint32_t threeid() const;
  void set_threeid(uint32_t value);
  private:
  uint32_t _internal_threeid() const;
  void _internal_set_threeid(uint32_t value);
  public:

  // .inner.InnerCopyPvp pvp = 11;
  bool has_pvp() const;
  private:
  bool _internal_has_pvp() const;
  public:
  void clear_pvp();
  const ::inner::InnerCopyPvp& pvp() const;
  PROTOBUF_NODISCARD ::inner::InnerCopyPvp* release_pvp();
  ::inner::InnerCopyPvp* mutable_pvp();
  void set_allocated_pvp(::inner::InnerCopyPvp* pvp);
  private:
  const ::inner::InnerCopyPvp& _internal_pvp() const;
  ::inner::InnerCopyPvp* _internal_mutable_pvp();
  public:
  void unsafe_arena_set_allocated_pvp(
      ::inner::InnerCopyPvp* pvp);
  ::inner::InnerCopyPvp* unsafe_arena_release_pvp();

  // .inner.InnerCopyPve pve = 12;
  bool has_pve() const;
  private:
  bool _internal_has_pve() const;
  public:
  void clear_pve();
  const ::inner::InnerCopyPve& pve() const;
  PROTOBUF_NODISCARD ::inner::InnerCopyPve* release_pve();
  ::inner::InnerCopyPve* mutable_pve();
  void set_allocated_pve(::inner::InnerCopyPve* pve);
  private:
  const ::inner::InnerCopyPve& _internal_pve() const;
  ::inner::InnerCopyPve* _internal_mutable_pve();
  public:
  void unsafe_arena_set_allocated_pve(
      ::inner::InnerCopyPve* pve);
  ::inner::InnerCopyPve* unsafe_arena_release_pve();

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:inner.InnerCopyType)
 private:
  class _Internal;
  void set_has_pvp();
  void set_has_pve();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t copylvid_;
  uint32_t eproc_;
  uint32_t threeid_;
  union TypeUnion {
    constexpr TypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::inner::InnerCopyPvp* pvp_;
    ::inner::InnerCopyPve* pve_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerCopyCreateBy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerCopyCreateBy) */ {
 public:
  inline InnerCopyCreateBy() : InnerCopyCreateBy(nullptr) {}
  ~InnerCopyCreateBy() override;
  explicit PROTOBUF_CONSTEXPR InnerCopyCreateBy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerCopyCreateBy(const InnerCopyCreateBy& from);
  InnerCopyCreateBy(InnerCopyCreateBy&& from) noexcept
    : InnerCopyCreateBy() {
    *this = ::std::move(from);
  }

  inline InnerCopyCreateBy& operator=(const InnerCopyCreateBy& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerCopyCreateBy& operator=(InnerCopyCreateBy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerCopyCreateBy& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerCopyCreateBy* internal_default_instance() {
    return reinterpret_cast<const InnerCopyCreateBy*>(
               &_InnerCopyCreateBy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(InnerCopyCreateBy& a, InnerCopyCreateBy& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerCopyCreateBy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerCopyCreateBy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerCopyCreateBy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerCopyCreateBy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerCopyCreateBy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerCopyCreateBy& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerCopyCreateBy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerCopyCreateBy";
  }
  protected:
  explicit InnerCopyCreateBy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCritFieldNumber = 1,
    kCopyFieldNumber = 2,
    kWayFieldNumber = 3,
  };
  // .inner.InnerCopyCrit crit = 1;
  bool has_crit() const;
  private:
  bool _internal_has_crit() const;
  public:
  void clear_crit();
  const ::inner::InnerCopyCrit& crit() const;
  PROTOBUF_NODISCARD ::inner::InnerCopyCrit* release_crit();
  ::inner::InnerCopyCrit* mutable_crit();
  void set_allocated_crit(::inner::InnerCopyCrit* crit);
  private:
  const ::inner::InnerCopyCrit& _internal_crit() const;
  ::inner::InnerCopyCrit* _internal_mutable_crit();
  public:
  void unsafe_arena_set_allocated_crit(
      ::inner::InnerCopyCrit* crit);
  ::inner::InnerCopyCrit* unsafe_arena_release_crit();

  // .inner.InnerCopyType copy = 2;
  bool has_copy() const;
  private:
  bool _internal_has_copy() const;
  public:
  void clear_copy();
  const ::inner::InnerCopyType& copy() const;
  PROTOBUF_NODISCARD ::inner::InnerCopyType* release_copy();
  ::inner::InnerCopyType* mutable_copy();
  void set_allocated_copy(::inner::InnerCopyType* copy);
  private:
  const ::inner::InnerCopyType& _internal_copy() const;
  ::inner::InnerCopyType* _internal_mutable_copy();
  public:
  void unsafe_arena_set_allocated_copy(
      ::inner::InnerCopyType* copy);
  ::inner::InnerCopyType* unsafe_arena_release_copy();

  // .inner.InnerCopyWay way = 3;
  bool has_way() const;
  private:
  bool _internal_has_way() const;
  public:
  void clear_way();
  const ::inner::InnerCopyWay& way() const;
  PROTOBUF_NODISCARD ::inner::InnerCopyWay* release_way();
  ::inner::InnerCopyWay* mutable_way();
  void set_allocated_way(::inner::InnerCopyWay* way);
  private:
  const ::inner::InnerCopyWay& _internal_way() const;
  ::inner::InnerCopyWay* _internal_mutable_way();
  public:
  void unsafe_arena_set_allocated_way(
      ::inner::InnerCopyWay* way);
  ::inner::InnerCopyWay* unsafe_arena_release_way();

  // @@protoc_insertion_point(class_scope:inner.InnerCopyCreateBy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::inner::InnerCopyCrit* crit_;
  ::inner::InnerCopyType* copy_;
  ::inner::InnerCopyWay* way_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerCopyCrit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerCopyCrit) */ {
 public:
  inline InnerCopyCrit() : InnerCopyCrit(nullptr) {}
  ~InnerCopyCrit() override;
  explicit PROTOBUF_CONSTEXPR InnerCopyCrit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerCopyCrit(const InnerCopyCrit& from);
  InnerCopyCrit(InnerCopyCrit&& from) noexcept
    : InnerCopyCrit() {
    *this = ::std::move(from);
  }

  inline InnerCopyCrit& operator=(const InnerCopyCrit& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerCopyCrit& operator=(InnerCopyCrit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerCopyCrit& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerCopyCrit* internal_default_instance() {
    return reinterpret_cast<const InnerCopyCrit*>(
               &_InnerCopyCrit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(InnerCopyCrit& a, InnerCopyCrit& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerCopyCrit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerCopyCrit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerCopyCrit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerCopyCrit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerCopyCrit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerCopyCrit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerCopyCrit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerCopyCrit";
  }
  protected:
  explicit InnerCopyCrit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCritIdFieldNumber = 2,
    kHashIdFFieldNumber = 1,
    kExpireFieldNumber = 3,
  };
  // uint64 critId = 2;
  void clear_critid();
  uint64_t critid() const;
  void set_critid(uint64_t value);
  private:
  uint64_t _internal_critid() const;
  void _internal_set_critid(uint64_t value);
  public:

  // uint32 hashIdF = 1;
  void clear_hashidf();
  uint32_t hashidf() const;
  void set_hashidf(uint32_t value);
  private:
  uint32_t _internal_hashidf() const;
  void _internal_set_hashidf(uint32_t value);
  public:

  // uint32 expire = 3;
  void clear_expire();
  uint32_t expire() const;
  void set_expire(uint32_t value);
  private:
  uint32_t _internal_expire() const;
  void _internal_set_expire(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerCopyCrit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t critid_;
  uint32_t hashidf_;
  uint32_t expire_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerGameEvent) */ {
 public:
  inline InnerGameEvent() : InnerGameEvent(nullptr) {}
  ~InnerGameEvent() override;
  explicit PROTOBUF_CONSTEXPR InnerGameEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEvent(const InnerGameEvent& from);
  InnerGameEvent(InnerGameEvent&& from) noexcept
    : InnerGameEvent() {
    *this = ::std::move(from);
  }

  inline InnerGameEvent& operator=(const InnerGameEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEvent& operator=(InnerGameEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEvent& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kDestroy = 1,
    kLogin = 2,
    kLogout = 3,
    kOnline = 4,
    kOffline = 5,
    kChangemap = 6,
    kDeath = 7,
    kRebirth = 8,
    kWakeup = 9,
    TYPE_NOT_SET = 0,
  };

  static inline const InnerGameEvent* internal_default_instance() {
    return reinterpret_cast<const InnerGameEvent*>(
               &_InnerGameEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(InnerGameEvent& a, InnerGameEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerGameEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerGameEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerGameEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEvent";
  }
  protected:
  explicit InnerGameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestroyFieldNumber = 1,
    kLoginFieldNumber = 2,
    kLogoutFieldNumber = 3,
    kOnlineFieldNumber = 4,
    kOfflineFieldNumber = 5,
    kChangemapFieldNumber = 6,
    kDeathFieldNumber = 7,
    kRebirthFieldNumber = 8,
    kWakeupFieldNumber = 9,
  };
  // .inner.InnerGameEventDestroy destroy = 1;
  bool has_destroy() const;
  private:
  bool _internal_has_destroy() const;
  public:
  void clear_destroy();
  const ::inner::InnerGameEventDestroy& destroy() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventDestroy* release_destroy();
  ::inner::InnerGameEventDestroy* mutable_destroy();
  void set_allocated_destroy(::inner::InnerGameEventDestroy* destroy);
  private:
  const ::inner::InnerGameEventDestroy& _internal_destroy() const;
  ::inner::InnerGameEventDestroy* _internal_mutable_destroy();
  public:
  void unsafe_arena_set_allocated_destroy(
      ::inner::InnerGameEventDestroy* destroy);
  ::inner::InnerGameEventDestroy* unsafe_arena_release_destroy();

  // .inner.InnerGameEventLogin login = 2;
  bool has_login() const;
  private:
  bool _internal_has_login() const;
  public:
  void clear_login();
  const ::inner::InnerGameEventLogin& login() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventLogin* release_login();
  ::inner::InnerGameEventLogin* mutable_login();
  void set_allocated_login(::inner::InnerGameEventLogin* login);
  private:
  const ::inner::InnerGameEventLogin& _internal_login() const;
  ::inner::InnerGameEventLogin* _internal_mutable_login();
  public:
  void unsafe_arena_set_allocated_login(
      ::inner::InnerGameEventLogin* login);
  ::inner::InnerGameEventLogin* unsafe_arena_release_login();

  // .inner.InnerGameEventLogout logout = 3;
  bool has_logout() const;
  private:
  bool _internal_has_logout() const;
  public:
  void clear_logout();
  const ::inner::InnerGameEventLogout& logout() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventLogout* release_logout();
  ::inner::InnerGameEventLogout* mutable_logout();
  void set_allocated_logout(::inner::InnerGameEventLogout* logout);
  private:
  const ::inner::InnerGameEventLogout& _internal_logout() const;
  ::inner::InnerGameEventLogout* _internal_mutable_logout();
  public:
  void unsafe_arena_set_allocated_logout(
      ::inner::InnerGameEventLogout* logout);
  ::inner::InnerGameEventLogout* unsafe_arena_release_logout();

  // .inner.InnerGameEventOnline online = 4;
  bool has_online() const;
  private:
  bool _internal_has_online() const;
  public:
  void clear_online();
  const ::inner::InnerGameEventOnline& online() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventOnline* release_online();
  ::inner::InnerGameEventOnline* mutable_online();
  void set_allocated_online(::inner::InnerGameEventOnline* online);
  private:
  const ::inner::InnerGameEventOnline& _internal_online() const;
  ::inner::InnerGameEventOnline* _internal_mutable_online();
  public:
  void unsafe_arena_set_allocated_online(
      ::inner::InnerGameEventOnline* online);
  ::inner::InnerGameEventOnline* unsafe_arena_release_online();

  // .inner.InnerGameEventOffline offline = 5;
  bool has_offline() const;
  private:
  bool _internal_has_offline() const;
  public:
  void clear_offline();
  const ::inner::InnerGameEventOffline& offline() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventOffline* release_offline();
  ::inner::InnerGameEventOffline* mutable_offline();
  void set_allocated_offline(::inner::InnerGameEventOffline* offline);
  private:
  const ::inner::InnerGameEventOffline& _internal_offline() const;
  ::inner::InnerGameEventOffline* _internal_mutable_offline();
  public:
  void unsafe_arena_set_allocated_offline(
      ::inner::InnerGameEventOffline* offline);
  ::inner::InnerGameEventOffline* unsafe_arena_release_offline();

  // .inner.InnerGameEventChangeMap changemap = 6;
  bool has_changemap() const;
  private:
  bool _internal_has_changemap() const;
  public:
  void clear_changemap();
  const ::inner::InnerGameEventChangeMap& changemap() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventChangeMap* release_changemap();
  ::inner::InnerGameEventChangeMap* mutable_changemap();
  void set_allocated_changemap(::inner::InnerGameEventChangeMap* changemap);
  private:
  const ::inner::InnerGameEventChangeMap& _internal_changemap() const;
  ::inner::InnerGameEventChangeMap* _internal_mutable_changemap();
  public:
  void unsafe_arena_set_allocated_changemap(
      ::inner::InnerGameEventChangeMap* changemap);
  ::inner::InnerGameEventChangeMap* unsafe_arena_release_changemap();

  // .inner.InnerGameEventDeath death = 7;
  bool has_death() const;
  private:
  bool _internal_has_death() const;
  public:
  void clear_death();
  const ::inner::InnerGameEventDeath& death() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventDeath* release_death();
  ::inner::InnerGameEventDeath* mutable_death();
  void set_allocated_death(::inner::InnerGameEventDeath* death);
  private:
  const ::inner::InnerGameEventDeath& _internal_death() const;
  ::inner::InnerGameEventDeath* _internal_mutable_death();
  public:
  void unsafe_arena_set_allocated_death(
      ::inner::InnerGameEventDeath* death);
  ::inner::InnerGameEventDeath* unsafe_arena_release_death();

  // .inner.InnerGameEventRebirth rebirth = 8;
  bool has_rebirth() const;
  private:
  bool _internal_has_rebirth() const;
  public:
  void clear_rebirth();
  const ::inner::InnerGameEventRebirth& rebirth() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventRebirth* release_rebirth();
  ::inner::InnerGameEventRebirth* mutable_rebirth();
  void set_allocated_rebirth(::inner::InnerGameEventRebirth* rebirth);
  private:
  const ::inner::InnerGameEventRebirth& _internal_rebirth() const;
  ::inner::InnerGameEventRebirth* _internal_mutable_rebirth();
  public:
  void unsafe_arena_set_allocated_rebirth(
      ::inner::InnerGameEventRebirth* rebirth);
  ::inner::InnerGameEventRebirth* unsafe_arena_release_rebirth();

  // .inner.InnerGameEventWakeup wakeup = 9;
  bool has_wakeup() const;
  private:
  bool _internal_has_wakeup() const;
  public:
  void clear_wakeup();
  const ::inner::InnerGameEventWakeup& wakeup() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventWakeup* release_wakeup();
  ::inner::InnerGameEventWakeup* mutable_wakeup();
  void set_allocated_wakeup(::inner::InnerGameEventWakeup* wakeup);
  private:
  const ::inner::InnerGameEventWakeup& _internal_wakeup() const;
  ::inner::InnerGameEventWakeup* _internal_mutable_wakeup();
  public:
  void unsafe_arena_set_allocated_wakeup(
      ::inner::InnerGameEventWakeup* wakeup);
  ::inner::InnerGameEventWakeup* unsafe_arena_release_wakeup();

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:inner.InnerGameEvent)
 private:
  class _Internal;
  void set_has_destroy();
  void set_has_login();
  void set_has_logout();
  void set_has_online();
  void set_has_offline();
  void set_has_changemap();
  void set_has_death();
  void set_has_rebirth();
  void set_has_wakeup();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TypeUnion {
    constexpr TypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::inner::InnerGameEventDestroy* destroy_;
    ::inner::InnerGameEventLogin* login_;
    ::inner::InnerGameEventLogout* logout_;
    ::inner::InnerGameEventOnline* online_;
    ::inner::InnerGameEventOffline* offline_;
    ::inner::InnerGameEventChangeMap* changemap_;
    ::inner::InnerGameEventDeath* death_;
    ::inner::InnerGameEventRebirth* rebirth_;
    ::inner::InnerGameEventWakeup* wakeup_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventDestroy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerGameEventDestroy) */ {
 public:
  inline InnerGameEventDestroy() : InnerGameEventDestroy(nullptr) {}
  ~InnerGameEventDestroy() override;
  explicit PROTOBUF_CONSTEXPR InnerGameEventDestroy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventDestroy(const InnerGameEventDestroy& from);
  InnerGameEventDestroy(InnerGameEventDestroy&& from) noexcept
    : InnerGameEventDestroy() {
    *this = ::std::move(from);
  }

  inline InnerGameEventDestroy& operator=(const InnerGameEventDestroy& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventDestroy& operator=(InnerGameEventDestroy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventDestroy& default_instance() {
    return *internal_default_instance();
  }
  enum ServerCase {
    kTeamsvr = 1,
    kFriendsvr = 2,
    kFamilysvr = 3,
    kRanksvr = 4,
    SERVER_NOT_SET = 0,
  };

  static inline const InnerGameEventDestroy* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventDestroy*>(
               &_InnerGameEventDestroy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(InnerGameEventDestroy& a, InnerGameEventDestroy& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventDestroy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventDestroy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventDestroy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventDestroy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerGameEventDestroy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerGameEventDestroy& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerGameEventDestroy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventDestroy";
  }
  protected:
  explicit InnerGameEventDestroy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamsvrFieldNumber = 1,
    kFriendsvrFieldNumber = 2,
    kFamilysvrFieldNumber = 3,
    kRanksvrFieldNumber = 4,
  };
  // .inner.InnerGameEventDestroyTeamsvr teamsvr = 1;
  bool has_teamsvr() const;
  private:
  bool _internal_has_teamsvr() const;
  public:
  void clear_teamsvr();
  const ::inner::InnerGameEventDestroyTeamsvr& teamsvr() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventDestroyTeamsvr* release_teamsvr();
  ::inner::InnerGameEventDestroyTeamsvr* mutable_teamsvr();
  void set_allocated_teamsvr(::inner::InnerGameEventDestroyTeamsvr* teamsvr);
  private:
  const ::inner::InnerGameEventDestroyTeamsvr& _internal_teamsvr() const;
  ::inner::InnerGameEventDestroyTeamsvr* _internal_mutable_teamsvr();
  public:
  void unsafe_arena_set_allocated_teamsvr(
      ::inner::InnerGameEventDestroyTeamsvr* teamsvr);
  ::inner::InnerGameEventDestroyTeamsvr* unsafe_arena_release_teamsvr();

  // .inner.InnerGameEventDestryFriendsvr friendsvr = 2;
  bool has_friendsvr() const;
  private:
  bool _internal_has_friendsvr() const;
  public:
  void clear_friendsvr();
  const ::inner::InnerGameEventDestryFriendsvr& friendsvr() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventDestryFriendsvr* release_friendsvr();
  ::inner::InnerGameEventDestryFriendsvr* mutable_friendsvr();
  void set_allocated_friendsvr(::inner::InnerGameEventDestryFriendsvr* friendsvr);
  private:
  const ::inner::InnerGameEventDestryFriendsvr& _internal_friendsvr() const;
  ::inner::InnerGameEventDestryFriendsvr* _internal_mutable_friendsvr();
  public:
  void unsafe_arena_set_allocated_friendsvr(
      ::inner::InnerGameEventDestryFriendsvr* friendsvr);
  ::inner::InnerGameEventDestryFriendsvr* unsafe_arena_release_friendsvr();

  // .inner.InnerGameEventDestroyFamilysvr familysvr = 3;
  bool has_familysvr() const;
  private:
  bool _internal_has_familysvr() const;
  public:
  void clear_familysvr();
  const ::inner::InnerGameEventDestroyFamilysvr& familysvr() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventDestroyFamilysvr* release_familysvr();
  ::inner::InnerGameEventDestroyFamilysvr* mutable_familysvr();
  void set_allocated_familysvr(::inner::InnerGameEventDestroyFamilysvr* familysvr);
  private:
  const ::inner::InnerGameEventDestroyFamilysvr& _internal_familysvr() const;
  ::inner::InnerGameEventDestroyFamilysvr* _internal_mutable_familysvr();
  public:
  void unsafe_arena_set_allocated_familysvr(
      ::inner::InnerGameEventDestroyFamilysvr* familysvr);
  ::inner::InnerGameEventDestroyFamilysvr* unsafe_arena_release_familysvr();

  // .inner.InnerGameEventDestroyRanksvr ranksvr = 4;
  bool has_ranksvr() const;
  private:
  bool _internal_has_ranksvr() const;
  public:
  void clear_ranksvr();
  const ::inner::InnerGameEventDestroyRanksvr& ranksvr() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventDestroyRanksvr* release_ranksvr();
  ::inner::InnerGameEventDestroyRanksvr* mutable_ranksvr();
  void set_allocated_ranksvr(::inner::InnerGameEventDestroyRanksvr* ranksvr);
  private:
  const ::inner::InnerGameEventDestroyRanksvr& _internal_ranksvr() const;
  ::inner::InnerGameEventDestroyRanksvr* _internal_mutable_ranksvr();
  public:
  void unsafe_arena_set_allocated_ranksvr(
      ::inner::InnerGameEventDestroyRanksvr* ranksvr);
  ::inner::InnerGameEventDestroyRanksvr* unsafe_arena_release_ranksvr();

  void clear_server();
  ServerCase server_case() const;
  // @@protoc_insertion_point(class_scope:inner.InnerGameEventDestroy)
 private:
  class _Internal;
  void set_has_teamsvr();
  void set_has_friendsvr();
  void set_has_familysvr();
  void set_has_ranksvr();

  inline bool has_server() const;
  inline void clear_has_server();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ServerUnion {
    constexpr ServerUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::inner::InnerGameEventDestroyTeamsvr* teamsvr_;
    ::inner::InnerGameEventDestryFriendsvr* friendsvr_;
    ::inner::InnerGameEventDestroyFamilysvr* familysvr_;
    ::inner::InnerGameEventDestroyRanksvr* ranksvr_;
  } server_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventDestroyTeamsvr final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerGameEventDestroyTeamsvr) */ {
 public:
  inline InnerGameEventDestroyTeamsvr() : InnerGameEventDestroyTeamsvr(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerGameEventDestroyTeamsvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventDestroyTeamsvr(const InnerGameEventDestroyTeamsvr& from);
  InnerGameEventDestroyTeamsvr(InnerGameEventDestroyTeamsvr&& from) noexcept
    : InnerGameEventDestroyTeamsvr() {
    *this = ::std::move(from);
  }

  inline InnerGameEventDestroyTeamsvr& operator=(const InnerGameEventDestroyTeamsvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventDestroyTeamsvr& operator=(InnerGameEventDestroyTeamsvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventDestroyTeamsvr& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGameEventDestroyTeamsvr* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventDestroyTeamsvr*>(
               &_InnerGameEventDestroyTeamsvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(InnerGameEventDestroyTeamsvr& a, InnerGameEventDestroyTeamsvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventDestroyTeamsvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventDestroyTeamsvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventDestroyTeamsvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventDestroyTeamsvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerGameEventDestroyTeamsvr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerGameEventDestroyTeamsvr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventDestroyTeamsvr";
  }
  protected:
  explicit InnerGameEventDestroyTeamsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerGameEventDestroyTeamsvr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventDestryFriendsvr final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerGameEventDestryFriendsvr) */ {
 public:
  inline InnerGameEventDestryFriendsvr() : InnerGameEventDestryFriendsvr(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerGameEventDestryFriendsvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventDestryFriendsvr(const InnerGameEventDestryFriendsvr& from);
  InnerGameEventDestryFriendsvr(InnerGameEventDestryFriendsvr&& from) noexcept
    : InnerGameEventDestryFriendsvr() {
    *this = ::std::move(from);
  }

  inline InnerGameEventDestryFriendsvr& operator=(const InnerGameEventDestryFriendsvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventDestryFriendsvr& operator=(InnerGameEventDestryFriendsvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventDestryFriendsvr& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGameEventDestryFriendsvr* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventDestryFriendsvr*>(
               &_InnerGameEventDestryFriendsvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(InnerGameEventDestryFriendsvr& a, InnerGameEventDestryFriendsvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventDestryFriendsvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventDestryFriendsvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventDestryFriendsvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventDestryFriendsvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerGameEventDestryFriendsvr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerGameEventDestryFriendsvr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventDestryFriendsvr";
  }
  protected:
  explicit InnerGameEventDestryFriendsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerGameEventDestryFriendsvr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventDestroyFamilysvr final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerGameEventDestroyFamilysvr) */ {
 public:
  inline InnerGameEventDestroyFamilysvr() : InnerGameEventDestroyFamilysvr(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerGameEventDestroyFamilysvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventDestroyFamilysvr(const InnerGameEventDestroyFamilysvr& from);
  InnerGameEventDestroyFamilysvr(InnerGameEventDestroyFamilysvr&& from) noexcept
    : InnerGameEventDestroyFamilysvr() {
    *this = ::std::move(from);
  }

  inline InnerGameEventDestroyFamilysvr& operator=(const InnerGameEventDestroyFamilysvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventDestroyFamilysvr& operator=(InnerGameEventDestroyFamilysvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventDestroyFamilysvr& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGameEventDestroyFamilysvr* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventDestroyFamilysvr*>(
               &_InnerGameEventDestroyFamilysvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(InnerGameEventDestroyFamilysvr& a, InnerGameEventDestroyFamilysvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventDestroyFamilysvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventDestroyFamilysvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventDestroyFamilysvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventDestroyFamilysvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerGameEventDestroyFamilysvr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerGameEventDestroyFamilysvr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventDestroyFamilysvr";
  }
  protected:
  explicit InnerGameEventDestroyFamilysvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerGameEventDestroyFamilysvr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventDestroyRanksvr final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerGameEventDestroyRanksvr) */ {
 public:
  inline InnerGameEventDestroyRanksvr() : InnerGameEventDestroyRanksvr(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerGameEventDestroyRanksvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventDestroyRanksvr(const InnerGameEventDestroyRanksvr& from);
  InnerGameEventDestroyRanksvr(InnerGameEventDestroyRanksvr&& from) noexcept
    : InnerGameEventDestroyRanksvr() {
    *this = ::std::move(from);
  }

  inline InnerGameEventDestroyRanksvr& operator=(const InnerGameEventDestroyRanksvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventDestroyRanksvr& operator=(InnerGameEventDestroyRanksvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventDestroyRanksvr& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGameEventDestroyRanksvr* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventDestroyRanksvr*>(
               &_InnerGameEventDestroyRanksvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(InnerGameEventDestroyRanksvr& a, InnerGameEventDestroyRanksvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventDestroyRanksvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventDestroyRanksvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventDestroyRanksvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventDestroyRanksvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerGameEventDestroyRanksvr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerGameEventDestroyRanksvr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventDestroyRanksvr";
  }
  protected:
  explicit InnerGameEventDestroyRanksvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerGameEventDestroyRanksvr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerGameEventLogin) */ {
 public:
  inline InnerGameEventLogin() : InnerGameEventLogin(nullptr) {}
  ~InnerGameEventLogin() override;
  explicit PROTOBUF_CONSTEXPR InnerGameEventLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventLogin(const InnerGameEventLogin& from);
  InnerGameEventLogin(InnerGameEventLogin&& from) noexcept
    : InnerGameEventLogin() {
    *this = ::std::move(from);
  }

  inline InnerGameEventLogin& operator=(const InnerGameEventLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventLogin& operator=(InnerGameEventLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventLogin& default_instance() {
    return *internal_default_instance();
  }
  enum ServerCase {
    kTeamsvr = 1,
    kFriendsvr = 2,
    kFamilysvr = 3,
    SERVER_NOT_SET = 0,
  };

  static inline const InnerGameEventLogin* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventLogin*>(
               &_InnerGameEventLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(InnerGameEventLogin& a, InnerGameEventLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventLogin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventLogin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerGameEventLogin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerGameEventLogin& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerGameEventLogin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventLogin";
  }
  protected:
  explicit InnerGameEventLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamsvrFieldNumber = 1,
    kFriendsvrFieldNumber = 2,
    kFamilysvrFieldNumber = 3,
  };
  // .inner.InnerGameEventLoginTeamsvr teamsvr = 1;
  bool has_teamsvr() const;
  private:
  bool _internal_has_teamsvr() const;
  public:
  void clear_teamsvr();
  const ::inner::InnerGameEventLoginTeamsvr& teamsvr() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventLoginTeamsvr* release_teamsvr();
  ::inner::InnerGameEventLoginTeamsvr* mutable_teamsvr();
  void set_allocated_teamsvr(::inner::InnerGameEventLoginTeamsvr* teamsvr);
  private:
  const ::inner::InnerGameEventLoginTeamsvr& _internal_teamsvr() const;
  ::inner::InnerGameEventLoginTeamsvr* _internal_mutable_teamsvr();
  public:
  void unsafe_arena_set_allocated_teamsvr(
      ::inner::InnerGameEventLoginTeamsvr* teamsvr);
  ::inner::InnerGameEventLoginTeamsvr* unsafe_arena_release_teamsvr();

  // .inner.InnerGameEventLoginFriendsvr friendsvr = 2;
  bool has_friendsvr() const;
  private:
  bool _internal_has_friendsvr() const;
  public:
  void clear_friendsvr();
  const ::inner::InnerGameEventLoginFriendsvr& friendsvr() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventLoginFriendsvr* release_friendsvr();
  ::inner::InnerGameEventLoginFriendsvr* mutable_friendsvr();
  void set_allocated_friendsvr(::inner::InnerGameEventLoginFriendsvr* friendsvr);
  private:
  const ::inner::InnerGameEventLoginFriendsvr& _internal_friendsvr() const;
  ::inner::InnerGameEventLoginFriendsvr* _internal_mutable_friendsvr();
  public:
  void unsafe_arena_set_allocated_friendsvr(
      ::inner::InnerGameEventLoginFriendsvr* friendsvr);
  ::inner::InnerGameEventLoginFriendsvr* unsafe_arena_release_friendsvr();

  // .inner.InnerGameEventLoginFamilysvr familysvr = 3;
  bool has_familysvr() const;
  private:
  bool _internal_has_familysvr() const;
  public:
  void clear_familysvr();
  const ::inner::InnerGameEventLoginFamilysvr& familysvr() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventLoginFamilysvr* release_familysvr();
  ::inner::InnerGameEventLoginFamilysvr* mutable_familysvr();
  void set_allocated_familysvr(::inner::InnerGameEventLoginFamilysvr* familysvr);
  private:
  const ::inner::InnerGameEventLoginFamilysvr& _internal_familysvr() const;
  ::inner::InnerGameEventLoginFamilysvr* _internal_mutable_familysvr();
  public:
  void unsafe_arena_set_allocated_familysvr(
      ::inner::InnerGameEventLoginFamilysvr* familysvr);
  ::inner::InnerGameEventLoginFamilysvr* unsafe_arena_release_familysvr();

  void clear_server();
  ServerCase server_case() const;
  // @@protoc_insertion_point(class_scope:inner.InnerGameEventLogin)
 private:
  class _Internal;
  void set_has_teamsvr();
  void set_has_friendsvr();
  void set_has_familysvr();

  inline bool has_server() const;
  inline void clear_has_server();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ServerUnion {
    constexpr ServerUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::inner::InnerGameEventLoginTeamsvr* teamsvr_;
    ::inner::InnerGameEventLoginFriendsvr* friendsvr_;
    ::inner::InnerGameEventLoginFamilysvr* familysvr_;
  } server_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventLoginTeamsvr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerGameEventLoginTeamsvr) */ {
 public:
  inline InnerGameEventLoginTeamsvr() : InnerGameEventLoginTeamsvr(nullptr) {}
  ~InnerGameEventLoginTeamsvr() override;
  explicit PROTOBUF_CONSTEXPR InnerGameEventLoginTeamsvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventLoginTeamsvr(const InnerGameEventLoginTeamsvr& from);
  InnerGameEventLoginTeamsvr(InnerGameEventLoginTeamsvr&& from) noexcept
    : InnerGameEventLoginTeamsvr() {
    *this = ::std::move(from);
  }

  inline InnerGameEventLoginTeamsvr& operator=(const InnerGameEventLoginTeamsvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventLoginTeamsvr& operator=(InnerGameEventLoginTeamsvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventLoginTeamsvr& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGameEventLoginTeamsvr* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventLoginTeamsvr*>(
               &_InnerGameEventLoginTeamsvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(InnerGameEventLoginTeamsvr& a, InnerGameEventLoginTeamsvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventLoginTeamsvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventLoginTeamsvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventLoginTeamsvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventLoginTeamsvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerGameEventLoginTeamsvr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerGameEventLoginTeamsvr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerGameEventLoginTeamsvr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventLoginTeamsvr";
  }
  protected:
  explicit InnerGameEventLoginTeamsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBriefFieldNumber = 1,
    kExtd1FieldNumber = 2,
    kExtd2FieldNumber = 3,
    kExtd3FieldNumber = 4,
    kF33FieldNumber = 5,
    kF55FieldNumber = 6,
    kSceneHashIdFieldNumber = 7,
  };
  // .common.RoleBrief brief = 1;
  bool has_brief() const;
  private:
  bool _internal_has_brief() const;
  public:
  void clear_brief();
  const ::common::RoleBrief& brief() const;
  PROTOBUF_NODISCARD ::common::RoleBrief* release_brief();
  ::common::RoleBrief* mutable_brief();
  void set_allocated_brief(::common::RoleBrief* brief);
  private:
  const ::common::RoleBrief& _internal_brief() const;
  ::common::RoleBrief* _internal_mutable_brief();
  public:
  void unsafe_arena_set_allocated_brief(
      ::common::RoleBrief* brief);
  ::common::RoleBrief* unsafe_arena_release_brief();

  // .common.RoleExtend1 extd1 = 2;
  bool has_extd1() const;
  private:
  bool _internal_has_extd1() const;
  public:
  void clear_extd1();
  const ::common::RoleExtend1& extd1() const;
  PROTOBUF_NODISCARD ::common::RoleExtend1* release_extd1();
  ::common::RoleExtend1* mutable_extd1();
  void set_allocated_extd1(::common::RoleExtend1* extd1);
  private:
  const ::common::RoleExtend1& _internal_extd1() const;
  ::common::RoleExtend1* _internal_mutable_extd1();
  public:
  void unsafe_arena_set_allocated_extd1(
      ::common::RoleExtend1* extd1);
  ::common::RoleExtend1* unsafe_arena_release_extd1();

  // .common.RoleExtend2 extd2 = 3;
  bool has_extd2() const;
  private:
  bool _internal_has_extd2() const;
  public:
  void clear_extd2();
  const ::common::RoleExtend2& extd2() const;
  PROTOBUF_NODISCARD ::common::RoleExtend2* release_extd2();
  ::common::RoleExtend2* mutable_extd2();
  void set_allocated_extd2(::common::RoleExtend2* extd2);
  private:
  const ::common::RoleExtend2& _internal_extd2() const;
  ::common::RoleExtend2* _internal_mutable_extd2();
  public:
  void unsafe_arena_set_allocated_extd2(
      ::common::RoleExtend2* extd2);
  ::common::RoleExtend2* unsafe_arena_release_extd2();

  // .common.RoleExtend3 extd3 = 4;
  bool has_extd3() const;
  private:
  bool _internal_has_extd3() const;
  public:
  void clear_extd3();
  const ::common::RoleExtend3& extd3() const;
  PROTOBUF_NODISCARD ::common::RoleExtend3* release_extd3();
  ::common::RoleExtend3* mutable_extd3();
  void set_allocated_extd3(::common::RoleExtend3* extd3);
  private:
  const ::common::RoleExtend3& _internal_extd3() const;
  ::common::RoleExtend3* _internal_mutable_extd3();
  public:
  void unsafe_arena_set_allocated_extd3(
      ::common::RoleExtend3* extd3);
  ::common::RoleExtend3* unsafe_arena_release_extd3();

  // .common.ExtendFight3v3 f33 = 5;
  bool has_f33() const;
  private:
  bool _internal_has_f33() const;
  public:
  void clear_f33();
  const ::common::ExtendFight3v3& f33() const;
  PROTOBUF_NODISCARD ::common::ExtendFight3v3* release_f33();
  ::common::ExtendFight3v3* mutable_f33();
  void set_allocated_f33(::common::ExtendFight3v3* f33);
  private:
  const ::common::ExtendFight3v3& _internal_f33() const;
  ::common::ExtendFight3v3* _internal_mutable_f33();
  public:
  void unsafe_arena_set_allocated_f33(
      ::common::ExtendFight3v3* f33);
  ::common::ExtendFight3v3* unsafe_arena_release_f33();

  // .common.ExtendFight5v5 f55 = 6;
  bool has_f55() const;
  private:
  bool _internal_has_f55() const;
  public:
  void clear_f55();
  const ::common::ExtendFight5v5& f55() const;
  PROTOBUF_NODISCARD ::common::ExtendFight5v5* release_f55();
  ::common::ExtendFight5v5* mutable_f55();
  void set_allocated_f55(::common::ExtendFight5v5* f55);
  private:
  const ::common::ExtendFight5v5& _internal_f55() const;
  ::common::ExtendFight5v5* _internal_mutable_f55();
  public:
  void unsafe_arena_set_allocated_f55(
      ::common::ExtendFight5v5* f55);
  ::common::ExtendFight5v5* unsafe_arena_release_f55();

  // uint32 sceneHashId = 7;
  void clear_scenehashid();
  uint32_t scenehashid() const;
  void set_scenehashid(uint32_t value);
  private:
  uint32_t _internal_scenehashid() const;
  void _internal_set_scenehashid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerGameEventLoginTeamsvr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::RoleBrief* brief_;
  ::common::RoleExtend1* extd1_;
  ::common::RoleExtend2* extd2_;
  ::common::RoleExtend3* extd3_;
  ::common::ExtendFight3v3* f33_;
  ::common::ExtendFight5v5* f55_;
  uint32_t scenehashid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventLoginFriendsvr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerGameEventLoginFriendsvr) */ {
 public:
  inline InnerGameEventLoginFriendsvr() : InnerGameEventLoginFriendsvr(nullptr) {}
  ~InnerGameEventLoginFriendsvr() override;
  explicit PROTOBUF_CONSTEXPR InnerGameEventLoginFriendsvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventLoginFriendsvr(const InnerGameEventLoginFriendsvr& from);
  InnerGameEventLoginFriendsvr(InnerGameEventLoginFriendsvr&& from) noexcept
    : InnerGameEventLoginFriendsvr() {
    *this = ::std::move(from);
  }

  inline InnerGameEventLoginFriendsvr& operator=(const InnerGameEventLoginFriendsvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventLoginFriendsvr& operator=(InnerGameEventLoginFriendsvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventLoginFriendsvr& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGameEventLoginFriendsvr* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventLoginFriendsvr*>(
               &_InnerGameEventLoginFriendsvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(InnerGameEventLoginFriendsvr& a, InnerGameEventLoginFriendsvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventLoginFriendsvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventLoginFriendsvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventLoginFriendsvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventLoginFriendsvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerGameEventLoginFriendsvr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerGameEventLoginFriendsvr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerGameEventLoginFriendsvr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventLoginFriendsvr";
  }
  protected:
  explicit InnerGameEventLoginFriendsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOInfoFieldNumber = 1,
    kOGiftsFieldNumber = 2,
    kLlTeamIdFieldNumber = 3,
  };
  // .inner.InnerFriendInfo oInfo = 1;
  bool has_oinfo() const;
  private:
  bool _internal_has_oinfo() const;
  public:
  void clear_oinfo();
  const ::inner::InnerFriendInfo& oinfo() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendInfo* release_oinfo();
  ::inner::InnerFriendInfo* mutable_oinfo();
  void set_allocated_oinfo(::inner::InnerFriendInfo* oinfo);
  private:
  const ::inner::InnerFriendInfo& _internal_oinfo() const;
  ::inner::InnerFriendInfo* _internal_mutable_oinfo();
  public:
  void unsafe_arena_set_allocated_oinfo(
      ::inner::InnerFriendInfo* oinfo);
  ::inner::InnerFriendInfo* unsafe_arena_release_oinfo();

  // .inner.InnerFriendGiftList oGifts = 2;
  bool has_ogifts() const;
  private:
  bool _internal_has_ogifts() const;
  public:
  void clear_ogifts();
  const ::inner::InnerFriendGiftList& ogifts() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendGiftList* release_ogifts();
  ::inner::InnerFriendGiftList* mutable_ogifts();
  void set_allocated_ogifts(::inner::InnerFriendGiftList* ogifts);
  private:
  const ::inner::InnerFriendGiftList& _internal_ogifts() const;
  ::inner::InnerFriendGiftList* _internal_mutable_ogifts();
  public:
  void unsafe_arena_set_allocated_ogifts(
      ::inner::InnerFriendGiftList* ogifts);
  ::inner::InnerFriendGiftList* unsafe_arena_release_ogifts();

  // uint64 llTeamId = 3;
  void clear_llteamid();
  uint64_t llteamid() const;
  void set_llteamid(uint64_t value);
  private:
  uint64_t _internal_llteamid() const;
  void _internal_set_llteamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerGameEventLoginFriendsvr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::inner::InnerFriendInfo* oinfo_;
  ::inner::InnerFriendGiftList* ogifts_;
  uint64_t llteamid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventLoginFamilysvr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerGameEventLoginFamilysvr) */ {
 public:
  inline InnerGameEventLoginFamilysvr() : InnerGameEventLoginFamilysvr(nullptr) {}
  ~InnerGameEventLoginFamilysvr() override;
  explicit PROTOBUF_CONSTEXPR InnerGameEventLoginFamilysvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventLoginFamilysvr(const InnerGameEventLoginFamilysvr& from);
  InnerGameEventLoginFamilysvr(InnerGameEventLoginFamilysvr&& from) noexcept
    : InnerGameEventLoginFamilysvr() {
    *this = ::std::move(from);
  }

  inline InnerGameEventLoginFamilysvr& operator=(const InnerGameEventLoginFamilysvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventLoginFamilysvr& operator=(InnerGameEventLoginFamilysvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventLoginFamilysvr& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGameEventLoginFamilysvr* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventLoginFamilysvr*>(
               &_InnerGameEventLoginFamilysvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(InnerGameEventLoginFamilysvr& a, InnerGameEventLoginFamilysvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventLoginFamilysvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventLoginFamilysvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventLoginFamilysvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventLoginFamilysvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerGameEventLoginFamilysvr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerGameEventLoginFamilysvr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerGameEventLoginFamilysvr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventLoginFamilysvr";
  }
  protected:
  explicit InnerGameEventLoginFamilysvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBriefFieldNumber = 1,
  };
  // .common.RoleBrief brief = 1;
  bool has_brief() const;
  private:
  bool _internal_has_brief() const;
  public:
  void clear_brief();
  const ::common::RoleBrief& brief() const;
  PROTOBUF_NODISCARD ::common::RoleBrief* release_brief();
  ::common::RoleBrief* mutable_brief();
  void set_allocated_brief(::common::RoleBrief* brief);
  private:
  const ::common::RoleBrief& _internal_brief() const;
  ::common::RoleBrief* _internal_mutable_brief();
  public:
  void unsafe_arena_set_allocated_brief(
      ::common::RoleBrief* brief);
  ::common::RoleBrief* unsafe_arena_release_brief();

  // @@protoc_insertion_point(class_scope:inner.InnerGameEventLoginFamilysvr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::RoleBrief* brief_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventLogout final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerGameEventLogout) */ {
 public:
  inline InnerGameEventLogout() : InnerGameEventLogout(nullptr) {}
  ~InnerGameEventLogout() override;
  explicit PROTOBUF_CONSTEXPR InnerGameEventLogout(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventLogout(const InnerGameEventLogout& from);
  InnerGameEventLogout(InnerGameEventLogout&& from) noexcept
    : InnerGameEventLogout() {
    *this = ::std::move(from);
  }

  inline InnerGameEventLogout& operator=(const InnerGameEventLogout& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventLogout& operator=(InnerGameEventLogout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventLogout& default_instance() {
    return *internal_default_instance();
  }
  enum ServerCase {
    kTeamsvr = 1,
    kFriendsvr = 2,
    kFamilysvr = 3,
    SERVER_NOT_SET = 0,
  };

  static inline const InnerGameEventLogout* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventLogout*>(
               &_InnerGameEventLogout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(InnerGameEventLogout& a, InnerGameEventLogout& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventLogout* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventLogout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventLogout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventLogout>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerGameEventLogout& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerGameEventLogout& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerGameEventLogout* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventLogout";
  }
  protected:
  explicit InnerGameEventLogout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamsvrFieldNumber = 1,
    kFriendsvrFieldNumber = 2,
    kFamilysvrFieldNumber = 3,
  };
  // .inner.InnerGameEventLogoutTeamvr teamsvr = 1;
  bool has_teamsvr() const;
  private:
  bool _internal_has_teamsvr() const;
  public:
  void clear_teamsvr();
  const ::inner::InnerGameEventLogoutTeamvr& teamsvr() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventLogoutTeamvr* release_teamsvr();
  ::inner::InnerGameEventLogoutTeamvr* mutable_teamsvr();
  void set_allocated_teamsvr(::inner::InnerGameEventLogoutTeamvr* teamsvr);
  private:
  const ::inner::InnerGameEventLogoutTeamvr& _internal_teamsvr() const;
  ::inner::InnerGameEventLogoutTeamvr* _internal_mutable_teamsvr();
  public:
  void unsafe_arena_set_allocated_teamsvr(
      ::inner::InnerGameEventLogoutTeamvr* teamsvr);
  ::inner::InnerGameEventLogoutTeamvr* unsafe_arena_release_teamsvr();

  // .inner.InnerGameEventLogoutFriendsvr friendsvr = 2;
  bool has_friendsvr() const;
  private:
  bool _internal_has_friendsvr() const;
  public:
  void clear_friendsvr();
  const ::inner::InnerGameEventLogoutFriendsvr& friendsvr() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventLogoutFriendsvr* release_friendsvr();
  ::inner::InnerGameEventLogoutFriendsvr* mutable_friendsvr();
  void set_allocated_friendsvr(::inner::InnerGameEventLogoutFriendsvr* friendsvr);
  private:
  const ::inner::InnerGameEventLogoutFriendsvr& _internal_friendsvr() const;
  ::inner::InnerGameEventLogoutFriendsvr* _internal_mutable_friendsvr();
  public:
  void unsafe_arena_set_allocated_friendsvr(
      ::inner::InnerGameEventLogoutFriendsvr* friendsvr);
  ::inner::InnerGameEventLogoutFriendsvr* unsafe_arena_release_friendsvr();

  // .inner.InnerGameEventLogoutFamilysvr familysvr = 3;
  bool has_familysvr() const;
  private:
  bool _internal_has_familysvr() const;
  public:
  void clear_familysvr();
  const ::inner::InnerGameEventLogoutFamilysvr& familysvr() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventLogoutFamilysvr* release_familysvr();
  ::inner::InnerGameEventLogoutFamilysvr* mutable_familysvr();
  void set_allocated_familysvr(::inner::InnerGameEventLogoutFamilysvr* familysvr);
  private:
  const ::inner::InnerGameEventLogoutFamilysvr& _internal_familysvr() const;
  ::inner::InnerGameEventLogoutFamilysvr* _internal_mutable_familysvr();
  public:
  void unsafe_arena_set_allocated_familysvr(
      ::inner::InnerGameEventLogoutFamilysvr* familysvr);
  ::inner::InnerGameEventLogoutFamilysvr* unsafe_arena_release_familysvr();

  void clear_server();
  ServerCase server_case() const;
  // @@protoc_insertion_point(class_scope:inner.InnerGameEventLogout)
 private:
  class _Internal;
  void set_has_teamsvr();
  void set_has_friendsvr();
  void set_has_familysvr();

  inline bool has_server() const;
  inline void clear_has_server();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ServerUnion {
    constexpr ServerUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::inner::InnerGameEventLogoutTeamvr* teamsvr_;
    ::inner::InnerGameEventLogoutFriendsvr* friendsvr_;
    ::inner::InnerGameEventLogoutFamilysvr* familysvr_;
  } server_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventLogoutTeamvr final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerGameEventLogoutTeamvr) */ {
 public:
  inline InnerGameEventLogoutTeamvr() : InnerGameEventLogoutTeamvr(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerGameEventLogoutTeamvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventLogoutTeamvr(const InnerGameEventLogoutTeamvr& from);
  InnerGameEventLogoutTeamvr(InnerGameEventLogoutTeamvr&& from) noexcept
    : InnerGameEventLogoutTeamvr() {
    *this = ::std::move(from);
  }

  inline InnerGameEventLogoutTeamvr& operator=(const InnerGameEventLogoutTeamvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventLogoutTeamvr& operator=(InnerGameEventLogoutTeamvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventLogoutTeamvr& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGameEventLogoutTeamvr* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventLogoutTeamvr*>(
               &_InnerGameEventLogoutTeamvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(InnerGameEventLogoutTeamvr& a, InnerGameEventLogoutTeamvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventLogoutTeamvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventLogoutTeamvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventLogoutTeamvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventLogoutTeamvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerGameEventLogoutTeamvr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerGameEventLogoutTeamvr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventLogoutTeamvr";
  }
  protected:
  explicit InnerGameEventLogoutTeamvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerGameEventLogoutTeamvr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventLogoutFriendsvr final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerGameEventLogoutFriendsvr) */ {
 public:
  inline InnerGameEventLogoutFriendsvr() : InnerGameEventLogoutFriendsvr(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerGameEventLogoutFriendsvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventLogoutFriendsvr(const InnerGameEventLogoutFriendsvr& from);
  InnerGameEventLogoutFriendsvr(InnerGameEventLogoutFriendsvr&& from) noexcept
    : InnerGameEventLogoutFriendsvr() {
    *this = ::std::move(from);
  }

  inline InnerGameEventLogoutFriendsvr& operator=(const InnerGameEventLogoutFriendsvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventLogoutFriendsvr& operator=(InnerGameEventLogoutFriendsvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventLogoutFriendsvr& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGameEventLogoutFriendsvr* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventLogoutFriendsvr*>(
               &_InnerGameEventLogoutFriendsvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(InnerGameEventLogoutFriendsvr& a, InnerGameEventLogoutFriendsvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventLogoutFriendsvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventLogoutFriendsvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventLogoutFriendsvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventLogoutFriendsvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerGameEventLogoutFriendsvr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerGameEventLogoutFriendsvr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventLogoutFriendsvr";
  }
  protected:
  explicit InnerGameEventLogoutFriendsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerGameEventLogoutFriendsvr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventLogoutFamilysvr final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerGameEventLogoutFamilysvr) */ {
 public:
  inline InnerGameEventLogoutFamilysvr() : InnerGameEventLogoutFamilysvr(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerGameEventLogoutFamilysvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventLogoutFamilysvr(const InnerGameEventLogoutFamilysvr& from);
  InnerGameEventLogoutFamilysvr(InnerGameEventLogoutFamilysvr&& from) noexcept
    : InnerGameEventLogoutFamilysvr() {
    *this = ::std::move(from);
  }

  inline InnerGameEventLogoutFamilysvr& operator=(const InnerGameEventLogoutFamilysvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventLogoutFamilysvr& operator=(InnerGameEventLogoutFamilysvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventLogoutFamilysvr& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGameEventLogoutFamilysvr* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventLogoutFamilysvr*>(
               &_InnerGameEventLogoutFamilysvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(InnerGameEventLogoutFamilysvr& a, InnerGameEventLogoutFamilysvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventLogoutFamilysvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventLogoutFamilysvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventLogoutFamilysvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventLogoutFamilysvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerGameEventLogoutFamilysvr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerGameEventLogoutFamilysvr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventLogoutFamilysvr";
  }
  protected:
  explicit InnerGameEventLogoutFamilysvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerGameEventLogoutFamilysvr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventOnline final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerGameEventOnline) */ {
 public:
  inline InnerGameEventOnline() : InnerGameEventOnline(nullptr) {}
  ~InnerGameEventOnline() override;
  explicit PROTOBUF_CONSTEXPR InnerGameEventOnline(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventOnline(const InnerGameEventOnline& from);
  InnerGameEventOnline(InnerGameEventOnline&& from) noexcept
    : InnerGameEventOnline() {
    *this = ::std::move(from);
  }

  inline InnerGameEventOnline& operator=(const InnerGameEventOnline& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventOnline& operator=(InnerGameEventOnline&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventOnline& default_instance() {
    return *internal_default_instance();
  }
  enum ServerCase {
    kTeamsvr = 1,
    kFriendsvr = 2,
    kFamilysvr = 3,
    SERVER_NOT_SET = 0,
  };

  static inline const InnerGameEventOnline* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventOnline*>(
               &_InnerGameEventOnline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(InnerGameEventOnline& a, InnerGameEventOnline& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventOnline* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventOnline* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventOnline* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventOnline>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerGameEventOnline& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerGameEventOnline& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerGameEventOnline* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventOnline";
  }
  protected:
  explicit InnerGameEventOnline(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamsvrFieldNumber = 1,
    kFriendsvrFieldNumber = 2,
    kFamilysvrFieldNumber = 3,
  };
  // .inner.InnerGameEventOnlineTeamsvr teamsvr = 1;
  bool has_teamsvr() const;
  private:
  bool _internal_has_teamsvr() const;
  public:
  void clear_teamsvr();
  const ::inner::InnerGameEventOnlineTeamsvr& teamsvr() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventOnlineTeamsvr* release_teamsvr();
  ::inner::InnerGameEventOnlineTeamsvr* mutable_teamsvr();
  void set_allocated_teamsvr(::inner::InnerGameEventOnlineTeamsvr* teamsvr);
  private:
  const ::inner::InnerGameEventOnlineTeamsvr& _internal_teamsvr() const;
  ::inner::InnerGameEventOnlineTeamsvr* _internal_mutable_teamsvr();
  public:
  void unsafe_arena_set_allocated_teamsvr(
      ::inner::InnerGameEventOnlineTeamsvr* teamsvr);
  ::inner::InnerGameEventOnlineTeamsvr* unsafe_arena_release_teamsvr();

  // .inner.InnerGameEventOnlineFriendsvr friendsvr = 2;
  bool has_friendsvr() const;
  private:
  bool _internal_has_friendsvr() const;
  public:
  void clear_friendsvr();
  const ::inner::InnerGameEventOnlineFriendsvr& friendsvr() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventOnlineFriendsvr* release_friendsvr();
  ::inner::InnerGameEventOnlineFriendsvr* mutable_friendsvr();
  void set_allocated_friendsvr(::inner::InnerGameEventOnlineFriendsvr* friendsvr);
  private:
  const ::inner::InnerGameEventOnlineFriendsvr& _internal_friendsvr() const;
  ::inner::InnerGameEventOnlineFriendsvr* _internal_mutable_friendsvr();
  public:
  void unsafe_arena_set_allocated_friendsvr(
      ::inner::InnerGameEventOnlineFriendsvr* friendsvr);
  ::inner::InnerGameEventOnlineFriendsvr* unsafe_arena_release_friendsvr();

  // .inner.InnerGameEventOnlineFamilysvr familysvr = 3;
  bool has_familysvr() const;
  private:
  bool _internal_has_familysvr() const;
  public:
  void clear_familysvr();
  const ::inner::InnerGameEventOnlineFamilysvr& familysvr() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventOnlineFamilysvr* release_familysvr();
  ::inner::InnerGameEventOnlineFamilysvr* mutable_familysvr();
  void set_allocated_familysvr(::inner::InnerGameEventOnlineFamilysvr* familysvr);
  private:
  const ::inner::InnerGameEventOnlineFamilysvr& _internal_familysvr() const;
  ::inner::InnerGameEventOnlineFamilysvr* _internal_mutable_familysvr();
  public:
  void unsafe_arena_set_allocated_familysvr(
      ::inner::InnerGameEventOnlineFamilysvr* familysvr);
  ::inner::InnerGameEventOnlineFamilysvr* unsafe_arena_release_familysvr();

  void clear_server();
  ServerCase server_case() const;
  // @@protoc_insertion_point(class_scope:inner.InnerGameEventOnline)
 private:
  class _Internal;
  void set_has_teamsvr();
  void set_has_friendsvr();
  void set_has_familysvr();

  inline bool has_server() const;
  inline void clear_has_server();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ServerUnion {
    constexpr ServerUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::inner::InnerGameEventOnlineTeamsvr* teamsvr_;
    ::inner::InnerGameEventOnlineFriendsvr* friendsvr_;
    ::inner::InnerGameEventOnlineFamilysvr* familysvr_;
  } server_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventOnlineTeamsvr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerGameEventOnlineTeamsvr) */ {
 public:
  inline InnerGameEventOnlineTeamsvr() : InnerGameEventOnlineTeamsvr(nullptr) {}
  ~InnerGameEventOnlineTeamsvr() override;
  explicit PROTOBUF_CONSTEXPR InnerGameEventOnlineTeamsvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventOnlineTeamsvr(const InnerGameEventOnlineTeamsvr& from);
  InnerGameEventOnlineTeamsvr(InnerGameEventOnlineTeamsvr&& from) noexcept
    : InnerGameEventOnlineTeamsvr() {
    *this = ::std::move(from);
  }

  inline InnerGameEventOnlineTeamsvr& operator=(const InnerGameEventOnlineTeamsvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventOnlineTeamsvr& operator=(InnerGameEventOnlineTeamsvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventOnlineTeamsvr& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGameEventOnlineTeamsvr* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventOnlineTeamsvr*>(
               &_InnerGameEventOnlineTeamsvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(InnerGameEventOnlineTeamsvr& a, InnerGameEventOnlineTeamsvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventOnlineTeamsvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventOnlineTeamsvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventOnlineTeamsvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventOnlineTeamsvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerGameEventOnlineTeamsvr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerGameEventOnlineTeamsvr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerGameEventOnlineTeamsvr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventOnlineTeamsvr";
  }
  protected:
  explicit InnerGameEventOnlineTeamsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtd2FieldNumber = 1,
    kExtd3FieldNumber = 2,
  };
  // .common.RoleExtend2 extd2 = 1;
  bool has_extd2() const;
  private:
  bool _internal_has_extd2() const;
  public:
  void clear_extd2();
  const ::common::RoleExtend2& extd2() const;
  PROTOBUF_NODISCARD ::common::RoleExtend2* release_extd2();
  ::common::RoleExtend2* mutable_extd2();
  void set_allocated_extd2(::common::RoleExtend2* extd2);
  private:
  const ::common::RoleExtend2& _internal_extd2() const;
  ::common::RoleExtend2* _internal_mutable_extd2();
  public:
  void unsafe_arena_set_allocated_extd2(
      ::common::RoleExtend2* extd2);
  ::common::RoleExtend2* unsafe_arena_release_extd2();

  // .common.RoleExtend3 extd3 = 2;
  bool has_extd3() const;
  private:
  bool _internal_has_extd3() const;
  public:
  void clear_extd3();
  const ::common::RoleExtend3& extd3() const;
  PROTOBUF_NODISCARD ::common::RoleExtend3* release_extd3();
  ::common::RoleExtend3* mutable_extd3();
  void set_allocated_extd3(::common::RoleExtend3* extd3);
  private:
  const ::common::RoleExtend3& _internal_extd3() const;
  ::common::RoleExtend3* _internal_mutable_extd3();
  public:
  void unsafe_arena_set_allocated_extd3(
      ::common::RoleExtend3* extd3);
  ::common::RoleExtend3* unsafe_arena_release_extd3();

  // @@protoc_insertion_point(class_scope:inner.InnerGameEventOnlineTeamsvr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::RoleExtend2* extd2_;
  ::common::RoleExtend3* extd3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventOnlineFriendsvr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerGameEventOnlineFriendsvr) */ {
 public:
  inline InnerGameEventOnlineFriendsvr() : InnerGameEventOnlineFriendsvr(nullptr) {}
  ~InnerGameEventOnlineFriendsvr() override;
  explicit PROTOBUF_CONSTEXPR InnerGameEventOnlineFriendsvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventOnlineFriendsvr(const InnerGameEventOnlineFriendsvr& from);
  InnerGameEventOnlineFriendsvr(InnerGameEventOnlineFriendsvr&& from) noexcept
    : InnerGameEventOnlineFriendsvr() {
    *this = ::std::move(from);
  }

  inline InnerGameEventOnlineFriendsvr& operator=(const InnerGameEventOnlineFriendsvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventOnlineFriendsvr& operator=(InnerGameEventOnlineFriendsvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventOnlineFriendsvr& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGameEventOnlineFriendsvr* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventOnlineFriendsvr*>(
               &_InnerGameEventOnlineFriendsvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(InnerGameEventOnlineFriendsvr& a, InnerGameEventOnlineFriendsvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventOnlineFriendsvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventOnlineFriendsvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventOnlineFriendsvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventOnlineFriendsvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerGameEventOnlineFriendsvr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerGameEventOnlineFriendsvr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerGameEventOnlineFriendsvr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventOnlineFriendsvr";
  }
  protected:
  explicit InnerGameEventOnlineFriendsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOInfoFieldNumber = 1,
    kOGiftsFieldNumber = 2,
    kLlTeamIdFieldNumber = 3,
  };
  // .inner.InnerFriendInfo oInfo = 1;
  bool has_oinfo() const;
  private:
  bool _internal_has_oinfo() const;
  public:
  void clear_oinfo();
  const ::inner::InnerFriendInfo& oinfo() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendInfo* release_oinfo();
  ::inner::InnerFriendInfo* mutable_oinfo();
  void set_allocated_oinfo(::inner::InnerFriendInfo* oinfo);
  private:
  const ::inner::InnerFriendInfo& _internal_oinfo() const;
  ::inner::InnerFriendInfo* _internal_mutable_oinfo();
  public:
  void unsafe_arena_set_allocated_oinfo(
      ::inner::InnerFriendInfo* oinfo);
  ::inner::InnerFriendInfo* unsafe_arena_release_oinfo();

  // .inner.InnerFriendGiftList oGifts = 2;
  bool has_ogifts() const;
  private:
  bool _internal_has_ogifts() const;
  public:
  void clear_ogifts();
  const ::inner::InnerFriendGiftList& ogifts() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendGiftList* release_ogifts();
  ::inner::InnerFriendGiftList* mutable_ogifts();
  void set_allocated_ogifts(::inner::InnerFriendGiftList* ogifts);
  private:
  const ::inner::InnerFriendGiftList& _internal_ogifts() const;
  ::inner::InnerFriendGiftList* _internal_mutable_ogifts();
  public:
  void unsafe_arena_set_allocated_ogifts(
      ::inner::InnerFriendGiftList* ogifts);
  ::inner::InnerFriendGiftList* unsafe_arena_release_ogifts();

  // uint64 llTeamId = 3;
  void clear_llteamid();
  uint64_t llteamid() const;
  void set_llteamid(uint64_t value);
  private:
  uint64_t _internal_llteamid() const;
  void _internal_set_llteamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerGameEventOnlineFriendsvr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::inner::InnerFriendInfo* oinfo_;
  ::inner::InnerFriendGiftList* ogifts_;
  uint64_t llteamid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventOnlineFamilysvr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerGameEventOnlineFamilysvr) */ {
 public:
  inline InnerGameEventOnlineFamilysvr() : InnerGameEventOnlineFamilysvr(nullptr) {}
  ~InnerGameEventOnlineFamilysvr() override;
  explicit PROTOBUF_CONSTEXPR InnerGameEventOnlineFamilysvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventOnlineFamilysvr(const InnerGameEventOnlineFamilysvr& from);
  InnerGameEventOnlineFamilysvr(InnerGameEventOnlineFamilysvr&& from) noexcept
    : InnerGameEventOnlineFamilysvr() {
    *this = ::std::move(from);
  }

  inline InnerGameEventOnlineFamilysvr& operator=(const InnerGameEventOnlineFamilysvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventOnlineFamilysvr& operator=(InnerGameEventOnlineFamilysvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventOnlineFamilysvr& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGameEventOnlineFamilysvr* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventOnlineFamilysvr*>(
               &_InnerGameEventOnlineFamilysvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(InnerGameEventOnlineFamilysvr& a, InnerGameEventOnlineFamilysvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventOnlineFamilysvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventOnlineFamilysvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventOnlineFamilysvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventOnlineFamilysvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerGameEventOnlineFamilysvr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerGameEventOnlineFamilysvr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerGameEventOnlineFamilysvr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventOnlineFamilysvr";
  }
  protected:
  explicit InnerGameEventOnlineFamilysvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBriefFieldNumber = 1,
  };
  // .common.RoleBrief brief = 1;
  bool has_brief() const;
  private:
  bool _internal_has_brief() const;
  public:
  void clear_brief();
  const ::common::RoleBrief& brief() const;
  PROTOBUF_NODISCARD ::common::RoleBrief* release_brief();
  ::common::RoleBrief* mutable_brief();
  void set_allocated_brief(::common::RoleBrief* brief);
  private:
  const ::common::RoleBrief& _internal_brief() const;
  ::common::RoleBrief* _internal_mutable_brief();
  public:
  void unsafe_arena_set_allocated_brief(
      ::common::RoleBrief* brief);
  ::common::RoleBrief* unsafe_arena_release_brief();

  // @@protoc_insertion_point(class_scope:inner.InnerGameEventOnlineFamilysvr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::RoleBrief* brief_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventOffline final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerGameEventOffline) */ {
 public:
  inline InnerGameEventOffline() : InnerGameEventOffline(nullptr) {}
  ~InnerGameEventOffline() override;
  explicit PROTOBUF_CONSTEXPR InnerGameEventOffline(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventOffline(const InnerGameEventOffline& from);
  InnerGameEventOffline(InnerGameEventOffline&& from) noexcept
    : InnerGameEventOffline() {
    *this = ::std::move(from);
  }

  inline InnerGameEventOffline& operator=(const InnerGameEventOffline& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventOffline& operator=(InnerGameEventOffline&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventOffline& default_instance() {
    return *internal_default_instance();
  }
  enum ServerCase {
    kTeamsvr = 1,
    kFriendsvr = 2,
    kFamilysvr = 3,
    SERVER_NOT_SET = 0,
  };

  static inline const InnerGameEventOffline* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventOffline*>(
               &_InnerGameEventOffline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(InnerGameEventOffline& a, InnerGameEventOffline& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventOffline* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventOffline* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventOffline* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventOffline>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerGameEventOffline& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerGameEventOffline& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerGameEventOffline* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventOffline";
  }
  protected:
  explicit InnerGameEventOffline(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamsvrFieldNumber = 1,
    kFriendsvrFieldNumber = 2,
    kFamilysvrFieldNumber = 3,
  };
  // .inner.InnerGameEventOfflineTeamsvr teamsvr = 1;
  bool has_teamsvr() const;
  private:
  bool _internal_has_teamsvr() const;
  public:
  void clear_teamsvr();
  const ::inner::InnerGameEventOfflineTeamsvr& teamsvr() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventOfflineTeamsvr* release_teamsvr();
  ::inner::InnerGameEventOfflineTeamsvr* mutable_teamsvr();
  void set_allocated_teamsvr(::inner::InnerGameEventOfflineTeamsvr* teamsvr);
  private:
  const ::inner::InnerGameEventOfflineTeamsvr& _internal_teamsvr() const;
  ::inner::InnerGameEventOfflineTeamsvr* _internal_mutable_teamsvr();
  public:
  void unsafe_arena_set_allocated_teamsvr(
      ::inner::InnerGameEventOfflineTeamsvr* teamsvr);
  ::inner::InnerGameEventOfflineTeamsvr* unsafe_arena_release_teamsvr();

  // .inner.InnerGameEventOfflineFriendsvr friendsvr = 2;
  bool has_friendsvr() const;
  private:
  bool _internal_has_friendsvr() const;
  public:
  void clear_friendsvr();
  const ::inner::InnerGameEventOfflineFriendsvr& friendsvr() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventOfflineFriendsvr* release_friendsvr();
  ::inner::InnerGameEventOfflineFriendsvr* mutable_friendsvr();
  void set_allocated_friendsvr(::inner::InnerGameEventOfflineFriendsvr* friendsvr);
  private:
  const ::inner::InnerGameEventOfflineFriendsvr& _internal_friendsvr() const;
  ::inner::InnerGameEventOfflineFriendsvr* _internal_mutable_friendsvr();
  public:
  void unsafe_arena_set_allocated_friendsvr(
      ::inner::InnerGameEventOfflineFriendsvr* friendsvr);
  ::inner::InnerGameEventOfflineFriendsvr* unsafe_arena_release_friendsvr();

  // .inner.InnerGameEventOfflineFamilysvr familysvr = 3;
  bool has_familysvr() const;
  private:
  bool _internal_has_familysvr() const;
  public:
  void clear_familysvr();
  const ::inner::InnerGameEventOfflineFamilysvr& familysvr() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventOfflineFamilysvr* release_familysvr();
  ::inner::InnerGameEventOfflineFamilysvr* mutable_familysvr();
  void set_allocated_familysvr(::inner::InnerGameEventOfflineFamilysvr* familysvr);
  private:
  const ::inner::InnerGameEventOfflineFamilysvr& _internal_familysvr() const;
  ::inner::InnerGameEventOfflineFamilysvr* _internal_mutable_familysvr();
  public:
  void unsafe_arena_set_allocated_familysvr(
      ::inner::InnerGameEventOfflineFamilysvr* familysvr);
  ::inner::InnerGameEventOfflineFamilysvr* unsafe_arena_release_familysvr();

  void clear_server();
  ServerCase server_case() const;
  // @@protoc_insertion_point(class_scope:inner.InnerGameEventOffline)
 private:
  class _Internal;
  void set_has_teamsvr();
  void set_has_friendsvr();
  void set_has_familysvr();

  inline bool has_server() const;
  inline void clear_has_server();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ServerUnion {
    constexpr ServerUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::inner::InnerGameEventOfflineTeamsvr* teamsvr_;
    ::inner::InnerGameEventOfflineFriendsvr* friendsvr_;
    ::inner::InnerGameEventOfflineFamilysvr* familysvr_;
  } server_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventOfflineTeamsvr final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerGameEventOfflineTeamsvr) */ {
 public:
  inline InnerGameEventOfflineTeamsvr() : InnerGameEventOfflineTeamsvr(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerGameEventOfflineTeamsvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventOfflineTeamsvr(const InnerGameEventOfflineTeamsvr& from);
  InnerGameEventOfflineTeamsvr(InnerGameEventOfflineTeamsvr&& from) noexcept
    : InnerGameEventOfflineTeamsvr() {
    *this = ::std::move(from);
  }

  inline InnerGameEventOfflineTeamsvr& operator=(const InnerGameEventOfflineTeamsvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventOfflineTeamsvr& operator=(InnerGameEventOfflineTeamsvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventOfflineTeamsvr& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGameEventOfflineTeamsvr* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventOfflineTeamsvr*>(
               &_InnerGameEventOfflineTeamsvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(InnerGameEventOfflineTeamsvr& a, InnerGameEventOfflineTeamsvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventOfflineTeamsvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventOfflineTeamsvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventOfflineTeamsvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventOfflineTeamsvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerGameEventOfflineTeamsvr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerGameEventOfflineTeamsvr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventOfflineTeamsvr";
  }
  protected:
  explicit InnerGameEventOfflineTeamsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerGameEventOfflineTeamsvr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventOfflineFriendsvr final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerGameEventOfflineFriendsvr) */ {
 public:
  inline InnerGameEventOfflineFriendsvr() : InnerGameEventOfflineFriendsvr(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerGameEventOfflineFriendsvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventOfflineFriendsvr(const InnerGameEventOfflineFriendsvr& from);
  InnerGameEventOfflineFriendsvr(InnerGameEventOfflineFriendsvr&& from) noexcept
    : InnerGameEventOfflineFriendsvr() {
    *this = ::std::move(from);
  }

  inline InnerGameEventOfflineFriendsvr& operator=(const InnerGameEventOfflineFriendsvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventOfflineFriendsvr& operator=(InnerGameEventOfflineFriendsvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventOfflineFriendsvr& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGameEventOfflineFriendsvr* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventOfflineFriendsvr*>(
               &_InnerGameEventOfflineFriendsvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(InnerGameEventOfflineFriendsvr& a, InnerGameEventOfflineFriendsvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventOfflineFriendsvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventOfflineFriendsvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventOfflineFriendsvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventOfflineFriendsvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerGameEventOfflineFriendsvr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerGameEventOfflineFriendsvr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventOfflineFriendsvr";
  }
  protected:
  explicit InnerGameEventOfflineFriendsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerGameEventOfflineFriendsvr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventOfflineFamilysvr final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerGameEventOfflineFamilysvr) */ {
 public:
  inline InnerGameEventOfflineFamilysvr() : InnerGameEventOfflineFamilysvr(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerGameEventOfflineFamilysvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventOfflineFamilysvr(const InnerGameEventOfflineFamilysvr& from);
  InnerGameEventOfflineFamilysvr(InnerGameEventOfflineFamilysvr&& from) noexcept
    : InnerGameEventOfflineFamilysvr() {
    *this = ::std::move(from);
  }

  inline InnerGameEventOfflineFamilysvr& operator=(const InnerGameEventOfflineFamilysvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventOfflineFamilysvr& operator=(InnerGameEventOfflineFamilysvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventOfflineFamilysvr& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGameEventOfflineFamilysvr* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventOfflineFamilysvr*>(
               &_InnerGameEventOfflineFamilysvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(InnerGameEventOfflineFamilysvr& a, InnerGameEventOfflineFamilysvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventOfflineFamilysvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventOfflineFamilysvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventOfflineFamilysvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventOfflineFamilysvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerGameEventOfflineFamilysvr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerGameEventOfflineFamilysvr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventOfflineFamilysvr";
  }
  protected:
  explicit InnerGameEventOfflineFamilysvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerGameEventOfflineFamilysvr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventChangeMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerGameEventChangeMap) */ {
 public:
  inline InnerGameEventChangeMap() : InnerGameEventChangeMap(nullptr) {}
  ~InnerGameEventChangeMap() override;
  explicit PROTOBUF_CONSTEXPR InnerGameEventChangeMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventChangeMap(const InnerGameEventChangeMap& from);
  InnerGameEventChangeMap(InnerGameEventChangeMap&& from) noexcept
    : InnerGameEventChangeMap() {
    *this = ::std::move(from);
  }

  inline InnerGameEventChangeMap& operator=(const InnerGameEventChangeMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventChangeMap& operator=(InnerGameEventChangeMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventChangeMap& default_instance() {
    return *internal_default_instance();
  }
  enum ServerCase {
    kTeamsvr = 1,
    kFriendsvr = 2,
    kFamilysvr = 3,
    SERVER_NOT_SET = 0,
  };

  static inline const InnerGameEventChangeMap* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventChangeMap*>(
               &_InnerGameEventChangeMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(InnerGameEventChangeMap& a, InnerGameEventChangeMap& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventChangeMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventChangeMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventChangeMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventChangeMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerGameEventChangeMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerGameEventChangeMap& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerGameEventChangeMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventChangeMap";
  }
  protected:
  explicit InnerGameEventChangeMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUiProcDirectFieldNumber = 100,
    kTeamsvrFieldNumber = 1,
    kFriendsvrFieldNumber = 2,
    kFamilysvrFieldNumber = 3,
  };
  // uint32 uiProcDirect = 100;
  void clear_uiprocdirect();
  uint32_t uiprocdirect() const;
  void set_uiprocdirect(uint32_t value);
  private:
  uint32_t _internal_uiprocdirect() const;
  void _internal_set_uiprocdirect(uint32_t value);
  public:

  // .inner.InnerGameEventChangeMapTeamsvr teamsvr = 1;
  bool has_teamsvr() const;
  private:
  bool _internal_has_teamsvr() const;
  public:
  void clear_teamsvr();
  const ::inner::InnerGameEventChangeMapTeamsvr& teamsvr() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventChangeMapTeamsvr* release_teamsvr();
  ::inner::InnerGameEventChangeMapTeamsvr* mutable_teamsvr();
  void set_allocated_teamsvr(::inner::InnerGameEventChangeMapTeamsvr* teamsvr);
  private:
  const ::inner::InnerGameEventChangeMapTeamsvr& _internal_teamsvr() const;
  ::inner::InnerGameEventChangeMapTeamsvr* _internal_mutable_teamsvr();
  public:
  void unsafe_arena_set_allocated_teamsvr(
      ::inner::InnerGameEventChangeMapTeamsvr* teamsvr);
  ::inner::InnerGameEventChangeMapTeamsvr* unsafe_arena_release_teamsvr();

  // .inner.InnerGameEventChangeMapFriendsvr friendsvr = 2;
  bool has_friendsvr() const;
  private:
  bool _internal_has_friendsvr() const;
  public:
  void clear_friendsvr();
  const ::inner::InnerGameEventChangeMapFriendsvr& friendsvr() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventChangeMapFriendsvr* release_friendsvr();
  ::inner::InnerGameEventChangeMapFriendsvr* mutable_friendsvr();
  void set_allocated_friendsvr(::inner::InnerGameEventChangeMapFriendsvr* friendsvr);
  private:
  const ::inner::InnerGameEventChangeMapFriendsvr& _internal_friendsvr() const;
  ::inner::InnerGameEventChangeMapFriendsvr* _internal_mutable_friendsvr();
  public:
  void unsafe_arena_set_allocated_friendsvr(
      ::inner::InnerGameEventChangeMapFriendsvr* friendsvr);
  ::inner::InnerGameEventChangeMapFriendsvr* unsafe_arena_release_friendsvr();

  // .inner.InnerGameEventChangeMapFamilysvr familysvr = 3;
  bool has_familysvr() const;
  private:
  bool _internal_has_familysvr() const;
  public:
  void clear_familysvr();
  const ::inner::InnerGameEventChangeMapFamilysvr& familysvr() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventChangeMapFamilysvr* release_familysvr();
  ::inner::InnerGameEventChangeMapFamilysvr* mutable_familysvr();
  void set_allocated_familysvr(::inner::InnerGameEventChangeMapFamilysvr* familysvr);
  private:
  const ::inner::InnerGameEventChangeMapFamilysvr& _internal_familysvr() const;
  ::inner::InnerGameEventChangeMapFamilysvr* _internal_mutable_familysvr();
  public:
  void unsafe_arena_set_allocated_familysvr(
      ::inner::InnerGameEventChangeMapFamilysvr* familysvr);
  ::inner::InnerGameEventChangeMapFamilysvr* unsafe_arena_release_familysvr();

  void clear_server();
  ServerCase server_case() const;
  // @@protoc_insertion_point(class_scope:inner.InnerGameEventChangeMap)
 private:
  class _Internal;
  void set_has_teamsvr();
  void set_has_friendsvr();
  void set_has_familysvr();

  inline bool has_server() const;
  inline void clear_has_server();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t uiprocdirect_;
  union ServerUnion {
    constexpr ServerUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::inner::InnerGameEventChangeMapTeamsvr* teamsvr_;
    ::inner::InnerGameEventChangeMapFriendsvr* friendsvr_;
    ::inner::InnerGameEventChangeMapFamilysvr* familysvr_;
  } server_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventChangeMapTeamsvr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerGameEventChangeMapTeamsvr) */ {
 public:
  inline InnerGameEventChangeMapTeamsvr() : InnerGameEventChangeMapTeamsvr(nullptr) {}
  ~InnerGameEventChangeMapTeamsvr() override;
  explicit PROTOBUF_CONSTEXPR InnerGameEventChangeMapTeamsvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventChangeMapTeamsvr(const InnerGameEventChangeMapTeamsvr& from);
  InnerGameEventChangeMapTeamsvr(InnerGameEventChangeMapTeamsvr&& from) noexcept
    : InnerGameEventChangeMapTeamsvr() {
    *this = ::std::move(from);
  }

  inline InnerGameEventChangeMapTeamsvr& operator=(const InnerGameEventChangeMapTeamsvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventChangeMapTeamsvr& operator=(InnerGameEventChangeMapTeamsvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventChangeMapTeamsvr& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGameEventChangeMapTeamsvr* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventChangeMapTeamsvr*>(
               &_InnerGameEventChangeMapTeamsvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(InnerGameEventChangeMapTeamsvr& a, InnerGameEventChangeMapTeamsvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventChangeMapTeamsvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventChangeMapTeamsvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventChangeMapTeamsvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventChangeMapTeamsvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerGameEventChangeMapTeamsvr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerGameEventChangeMapTeamsvr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerGameEventChangeMapTeamsvr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventChangeMapTeamsvr";
  }
  protected:
  explicit InnerGameEventChangeMapTeamsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBriefFieldNumber = 1,
    kExtd1FieldNumber = 2,
    kExtd2FieldNumber = 3,
    kExtd3FieldNumber = 4,
    kF33FieldNumber = 5,
    kF55FieldNumber = 6,
    kSceneHashIdFieldNumber = 7,
  };
  // .common.RoleBrief brief = 1;
  bool has_brief() const;
  private:
  bool _internal_has_brief() const;
  public:
  void clear_brief();
  const ::common::RoleBrief& brief() const;
  PROTOBUF_NODISCARD ::common::RoleBrief* release_brief();
  ::common::RoleBrief* mutable_brief();
  void set_allocated_brief(::common::RoleBrief* brief);
  private:
  const ::common::RoleBrief& _internal_brief() const;
  ::common::RoleBrief* _internal_mutable_brief();
  public:
  void unsafe_arena_set_allocated_brief(
      ::common::RoleBrief* brief);
  ::common::RoleBrief* unsafe_arena_release_brief();

  // .common.RoleExtend1 extd1 = 2;
  bool has_extd1() const;
  private:
  bool _internal_has_extd1() const;
  public:
  void clear_extd1();
  const ::common::RoleExtend1& extd1() const;
  PROTOBUF_NODISCARD ::common::RoleExtend1* release_extd1();
  ::common::RoleExtend1* mutable_extd1();
  void set_allocated_extd1(::common::RoleExtend1* extd1);
  private:
  const ::common::RoleExtend1& _internal_extd1() const;
  ::common::RoleExtend1* _internal_mutable_extd1();
  public:
  void unsafe_arena_set_allocated_extd1(
      ::common::RoleExtend1* extd1);
  ::common::RoleExtend1* unsafe_arena_release_extd1();

  // .common.RoleExtend2 extd2 = 3;
  bool has_extd2() const;
  private:
  bool _internal_has_extd2() const;
  public:
  void clear_extd2();
  const ::common::RoleExtend2& extd2() const;
  PROTOBUF_NODISCARD ::common::RoleExtend2* release_extd2();
  ::common::RoleExtend2* mutable_extd2();
  void set_allocated_extd2(::common::RoleExtend2* extd2);
  private:
  const ::common::RoleExtend2& _internal_extd2() const;
  ::common::RoleExtend2* _internal_mutable_extd2();
  public:
  void unsafe_arena_set_allocated_extd2(
      ::common::RoleExtend2* extd2);
  ::common::RoleExtend2* unsafe_arena_release_extd2();

  // .common.RoleExtend3 extd3 = 4;
  bool has_extd3() const;
  private:
  bool _internal_has_extd3() const;
  public:
  void clear_extd3();
  const ::common::RoleExtend3& extd3() const;
  PROTOBUF_NODISCARD ::common::RoleExtend3* release_extd3();
  ::common::RoleExtend3* mutable_extd3();
  void set_allocated_extd3(::common::RoleExtend3* extd3);
  private:
  const ::common::RoleExtend3& _internal_extd3() const;
  ::common::RoleExtend3* _internal_mutable_extd3();
  public:
  void unsafe_arena_set_allocated_extd3(
      ::common::RoleExtend3* extd3);
  ::common::RoleExtend3* unsafe_arena_release_extd3();

  // .common.ExtendFight3v3 f33 = 5;
  bool has_f33() const;
  private:
  bool _internal_has_f33() const;
  public:
  void clear_f33();
  const ::common::ExtendFight3v3& f33() const;
  PROTOBUF_NODISCARD ::common::ExtendFight3v3* release_f33();
  ::common::ExtendFight3v3* mutable_f33();
  void set_allocated_f33(::common::ExtendFight3v3* f33);
  private:
  const ::common::ExtendFight3v3& _internal_f33() const;
  ::common::ExtendFight3v3* _internal_mutable_f33();
  public:
  void unsafe_arena_set_allocated_f33(
      ::common::ExtendFight3v3* f33);
  ::common::ExtendFight3v3* unsafe_arena_release_f33();

  // .common.ExtendFight5v5 f55 = 6;
  bool has_f55() const;
  private:
  bool _internal_has_f55() const;
  public:
  void clear_f55();
  const ::common::ExtendFight5v5& f55() const;
  PROTOBUF_NODISCARD ::common::ExtendFight5v5* release_f55();
  ::common::ExtendFight5v5* mutable_f55();
  void set_allocated_f55(::common::ExtendFight5v5* f55);
  private:
  const ::common::ExtendFight5v5& _internal_f55() const;
  ::common::ExtendFight5v5* _internal_mutable_f55();
  public:
  void unsafe_arena_set_allocated_f55(
      ::common::ExtendFight5v5* f55);
  ::common::ExtendFight5v5* unsafe_arena_release_f55();

  // uint32 sceneHashId = 7;
  void clear_scenehashid();
  uint32_t scenehashid() const;
  void set_scenehashid(uint32_t value);
  private:
  uint32_t _internal_scenehashid() const;
  void _internal_set_scenehashid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerGameEventChangeMapTeamsvr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::RoleBrief* brief_;
  ::common::RoleExtend1* extd1_;
  ::common::RoleExtend2* extd2_;
  ::common::RoleExtend3* extd3_;
  ::common::ExtendFight3v3* f33_;
  ::common::ExtendFight5v5* f55_;
  uint32_t scenehashid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventChangeMapFriendsvr final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerGameEventChangeMapFriendsvr) */ {
 public:
  inline InnerGameEventChangeMapFriendsvr() : InnerGameEventChangeMapFriendsvr(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerGameEventChangeMapFriendsvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventChangeMapFriendsvr(const InnerGameEventChangeMapFriendsvr& from);
  InnerGameEventChangeMapFriendsvr(InnerGameEventChangeMapFriendsvr&& from) noexcept
    : InnerGameEventChangeMapFriendsvr() {
    *this = ::std::move(from);
  }

  inline InnerGameEventChangeMapFriendsvr& operator=(const InnerGameEventChangeMapFriendsvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventChangeMapFriendsvr& operator=(InnerGameEventChangeMapFriendsvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventChangeMapFriendsvr& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGameEventChangeMapFriendsvr* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventChangeMapFriendsvr*>(
               &_InnerGameEventChangeMapFriendsvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(InnerGameEventChangeMapFriendsvr& a, InnerGameEventChangeMapFriendsvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventChangeMapFriendsvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventChangeMapFriendsvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventChangeMapFriendsvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventChangeMapFriendsvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerGameEventChangeMapFriendsvr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerGameEventChangeMapFriendsvr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventChangeMapFriendsvr";
  }
  protected:
  explicit InnerGameEventChangeMapFriendsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerGameEventChangeMapFriendsvr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventChangeMapFamilysvr final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerGameEventChangeMapFamilysvr) */ {
 public:
  inline InnerGameEventChangeMapFamilysvr() : InnerGameEventChangeMapFamilysvr(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerGameEventChangeMapFamilysvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventChangeMapFamilysvr(const InnerGameEventChangeMapFamilysvr& from);
  InnerGameEventChangeMapFamilysvr(InnerGameEventChangeMapFamilysvr&& from) noexcept
    : InnerGameEventChangeMapFamilysvr() {
    *this = ::std::move(from);
  }

  inline InnerGameEventChangeMapFamilysvr& operator=(const InnerGameEventChangeMapFamilysvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventChangeMapFamilysvr& operator=(InnerGameEventChangeMapFamilysvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventChangeMapFamilysvr& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGameEventChangeMapFamilysvr* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventChangeMapFamilysvr*>(
               &_InnerGameEventChangeMapFamilysvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(InnerGameEventChangeMapFamilysvr& a, InnerGameEventChangeMapFamilysvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventChangeMapFamilysvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventChangeMapFamilysvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventChangeMapFamilysvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventChangeMapFamilysvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerGameEventChangeMapFamilysvr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerGameEventChangeMapFamilysvr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventChangeMapFamilysvr";
  }
  protected:
  explicit InnerGameEventChangeMapFamilysvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerGameEventChangeMapFamilysvr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventDeath final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerGameEventDeath) */ {
 public:
  inline InnerGameEventDeath() : InnerGameEventDeath(nullptr) {}
  ~InnerGameEventDeath() override;
  explicit PROTOBUF_CONSTEXPR InnerGameEventDeath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventDeath(const InnerGameEventDeath& from);
  InnerGameEventDeath(InnerGameEventDeath&& from) noexcept
    : InnerGameEventDeath() {
    *this = ::std::move(from);
  }

  inline InnerGameEventDeath& operator=(const InnerGameEventDeath& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventDeath& operator=(InnerGameEventDeath&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventDeath& default_instance() {
    return *internal_default_instance();
  }
  enum ServerCase {
    kTeamsvr = 1,
    kFriendsvr = 2,
    SERVER_NOT_SET = 0,
  };

  static inline const InnerGameEventDeath* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventDeath*>(
               &_InnerGameEventDeath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(InnerGameEventDeath& a, InnerGameEventDeath& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventDeath* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventDeath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventDeath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventDeath>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerGameEventDeath& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerGameEventDeath& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerGameEventDeath* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventDeath";
  }
  protected:
  explicit InnerGameEventDeath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamsvrFieldNumber = 1,
    kFriendsvrFieldNumber = 2,
  };
  // .inner.InnerGameEventDeathTeamsvr teamsvr = 1;
  bool has_teamsvr() const;
  private:
  bool _internal_has_teamsvr() const;
  public:
  void clear_teamsvr();
  const ::inner::InnerGameEventDeathTeamsvr& teamsvr() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventDeathTeamsvr* release_teamsvr();
  ::inner::InnerGameEventDeathTeamsvr* mutable_teamsvr();
  void set_allocated_teamsvr(::inner::InnerGameEventDeathTeamsvr* teamsvr);
  private:
  const ::inner::InnerGameEventDeathTeamsvr& _internal_teamsvr() const;
  ::inner::InnerGameEventDeathTeamsvr* _internal_mutable_teamsvr();
  public:
  void unsafe_arena_set_allocated_teamsvr(
      ::inner::InnerGameEventDeathTeamsvr* teamsvr);
  ::inner::InnerGameEventDeathTeamsvr* unsafe_arena_release_teamsvr();

  // .inner.InnerGameEventDeathFriendsvr friendsvr = 2;
  bool has_friendsvr() const;
  private:
  bool _internal_has_friendsvr() const;
  public:
  void clear_friendsvr();
  const ::inner::InnerGameEventDeathFriendsvr& friendsvr() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventDeathFriendsvr* release_friendsvr();
  ::inner::InnerGameEventDeathFriendsvr* mutable_friendsvr();
  void set_allocated_friendsvr(::inner::InnerGameEventDeathFriendsvr* friendsvr);
  private:
  const ::inner::InnerGameEventDeathFriendsvr& _internal_friendsvr() const;
  ::inner::InnerGameEventDeathFriendsvr* _internal_mutable_friendsvr();
  public:
  void unsafe_arena_set_allocated_friendsvr(
      ::inner::InnerGameEventDeathFriendsvr* friendsvr);
  ::inner::InnerGameEventDeathFriendsvr* unsafe_arena_release_friendsvr();

  void clear_server();
  ServerCase server_case() const;
  // @@protoc_insertion_point(class_scope:inner.InnerGameEventDeath)
 private:
  class _Internal;
  void set_has_teamsvr();
  void set_has_friendsvr();

  inline bool has_server() const;
  inline void clear_has_server();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ServerUnion {
    constexpr ServerUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::inner::InnerGameEventDeathTeamsvr* teamsvr_;
    ::inner::InnerGameEventDeathFriendsvr* friendsvr_;
  } server_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventDeathTeamsvr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerGameEventDeathTeamsvr) */ {
 public:
  inline InnerGameEventDeathTeamsvr() : InnerGameEventDeathTeamsvr(nullptr) {}
  ~InnerGameEventDeathTeamsvr() override;
  explicit PROTOBUF_CONSTEXPR InnerGameEventDeathTeamsvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventDeathTeamsvr(const InnerGameEventDeathTeamsvr& from);
  InnerGameEventDeathTeamsvr(InnerGameEventDeathTeamsvr&& from) noexcept
    : InnerGameEventDeathTeamsvr() {
    *this = ::std::move(from);
  }

  inline InnerGameEventDeathTeamsvr& operator=(const InnerGameEventDeathTeamsvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventDeathTeamsvr& operator=(InnerGameEventDeathTeamsvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventDeathTeamsvr& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGameEventDeathTeamsvr* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventDeathTeamsvr*>(
               &_InnerGameEventDeathTeamsvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(InnerGameEventDeathTeamsvr& a, InnerGameEventDeathTeamsvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventDeathTeamsvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventDeathTeamsvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventDeathTeamsvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventDeathTeamsvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerGameEventDeathTeamsvr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerGameEventDeathTeamsvr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerGameEventDeathTeamsvr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventDeathTeamsvr";
  }
  protected:
  explicit InnerGameEventDeathTeamsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtd3FieldNumber = 1,
  };
  // .common.RoleExtend3 extd3 = 1;
  bool has_extd3() const;
  private:
  bool _internal_has_extd3() const;
  public:
  void clear_extd3();
  const ::common::RoleExtend3& extd3() const;
  PROTOBUF_NODISCARD ::common::RoleExtend3* release_extd3();
  ::common::RoleExtend3* mutable_extd3();
  void set_allocated_extd3(::common::RoleExtend3* extd3);
  private:
  const ::common::RoleExtend3& _internal_extd3() const;
  ::common::RoleExtend3* _internal_mutable_extd3();
  public:
  void unsafe_arena_set_allocated_extd3(
      ::common::RoleExtend3* extd3);
  ::common::RoleExtend3* unsafe_arena_release_extd3();

  // @@protoc_insertion_point(class_scope:inner.InnerGameEventDeathTeamsvr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::RoleExtend3* extd3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventDeathFriendsvr final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerGameEventDeathFriendsvr) */ {
 public:
  inline InnerGameEventDeathFriendsvr() : InnerGameEventDeathFriendsvr(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerGameEventDeathFriendsvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventDeathFriendsvr(const InnerGameEventDeathFriendsvr& from);
  InnerGameEventDeathFriendsvr(InnerGameEventDeathFriendsvr&& from) noexcept
    : InnerGameEventDeathFriendsvr() {
    *this = ::std::move(from);
  }

  inline InnerGameEventDeathFriendsvr& operator=(const InnerGameEventDeathFriendsvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventDeathFriendsvr& operator=(InnerGameEventDeathFriendsvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventDeathFriendsvr& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGameEventDeathFriendsvr* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventDeathFriendsvr*>(
               &_InnerGameEventDeathFriendsvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(InnerGameEventDeathFriendsvr& a, InnerGameEventDeathFriendsvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventDeathFriendsvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventDeathFriendsvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventDeathFriendsvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventDeathFriendsvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerGameEventDeathFriendsvr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerGameEventDeathFriendsvr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventDeathFriendsvr";
  }
  protected:
  explicit InnerGameEventDeathFriendsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerGameEventDeathFriendsvr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventRebirth final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerGameEventRebirth) */ {
 public:
  inline InnerGameEventRebirth() : InnerGameEventRebirth(nullptr) {}
  ~InnerGameEventRebirth() override;
  explicit PROTOBUF_CONSTEXPR InnerGameEventRebirth(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventRebirth(const InnerGameEventRebirth& from);
  InnerGameEventRebirth(InnerGameEventRebirth&& from) noexcept
    : InnerGameEventRebirth() {
    *this = ::std::move(from);
  }

  inline InnerGameEventRebirth& operator=(const InnerGameEventRebirth& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventRebirth& operator=(InnerGameEventRebirth&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventRebirth& default_instance() {
    return *internal_default_instance();
  }
  enum ServerCase {
    kTeamsvr = 1,
    kFriendsvr = 2,
    SERVER_NOT_SET = 0,
  };

  static inline const InnerGameEventRebirth* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventRebirth*>(
               &_InnerGameEventRebirth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(InnerGameEventRebirth& a, InnerGameEventRebirth& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventRebirth* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventRebirth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventRebirth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventRebirth>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerGameEventRebirth& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerGameEventRebirth& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerGameEventRebirth* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventRebirth";
  }
  protected:
  explicit InnerGameEventRebirth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamsvrFieldNumber = 1,
    kFriendsvrFieldNumber = 2,
  };
  // .inner.InnerGameEventRebirthTeamsvr teamsvr = 1;
  bool has_teamsvr() const;
  private:
  bool _internal_has_teamsvr() const;
  public:
  void clear_teamsvr();
  const ::inner::InnerGameEventRebirthTeamsvr& teamsvr() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventRebirthTeamsvr* release_teamsvr();
  ::inner::InnerGameEventRebirthTeamsvr* mutable_teamsvr();
  void set_allocated_teamsvr(::inner::InnerGameEventRebirthTeamsvr* teamsvr);
  private:
  const ::inner::InnerGameEventRebirthTeamsvr& _internal_teamsvr() const;
  ::inner::InnerGameEventRebirthTeamsvr* _internal_mutable_teamsvr();
  public:
  void unsafe_arena_set_allocated_teamsvr(
      ::inner::InnerGameEventRebirthTeamsvr* teamsvr);
  ::inner::InnerGameEventRebirthTeamsvr* unsafe_arena_release_teamsvr();

  // .inner.InnerGameEventRebirthFriendsvr friendsvr = 2;
  bool has_friendsvr() const;
  private:
  bool _internal_has_friendsvr() const;
  public:
  void clear_friendsvr();
  const ::inner::InnerGameEventRebirthFriendsvr& friendsvr() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventRebirthFriendsvr* release_friendsvr();
  ::inner::InnerGameEventRebirthFriendsvr* mutable_friendsvr();
  void set_allocated_friendsvr(::inner::InnerGameEventRebirthFriendsvr* friendsvr);
  private:
  const ::inner::InnerGameEventRebirthFriendsvr& _internal_friendsvr() const;
  ::inner::InnerGameEventRebirthFriendsvr* _internal_mutable_friendsvr();
  public:
  void unsafe_arena_set_allocated_friendsvr(
      ::inner::InnerGameEventRebirthFriendsvr* friendsvr);
  ::inner::InnerGameEventRebirthFriendsvr* unsafe_arena_release_friendsvr();

  void clear_server();
  ServerCase server_case() const;
  // @@protoc_insertion_point(class_scope:inner.InnerGameEventRebirth)
 private:
  class _Internal;
  void set_has_teamsvr();
  void set_has_friendsvr();

  inline bool has_server() const;
  inline void clear_has_server();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ServerUnion {
    constexpr ServerUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::inner::InnerGameEventRebirthTeamsvr* teamsvr_;
    ::inner::InnerGameEventRebirthFriendsvr* friendsvr_;
  } server_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventRebirthTeamsvr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerGameEventRebirthTeamsvr) */ {
 public:
  inline InnerGameEventRebirthTeamsvr() : InnerGameEventRebirthTeamsvr(nullptr) {}
  ~InnerGameEventRebirthTeamsvr() override;
  explicit PROTOBUF_CONSTEXPR InnerGameEventRebirthTeamsvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventRebirthTeamsvr(const InnerGameEventRebirthTeamsvr& from);
  InnerGameEventRebirthTeamsvr(InnerGameEventRebirthTeamsvr&& from) noexcept
    : InnerGameEventRebirthTeamsvr() {
    *this = ::std::move(from);
  }

  inline InnerGameEventRebirthTeamsvr& operator=(const InnerGameEventRebirthTeamsvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventRebirthTeamsvr& operator=(InnerGameEventRebirthTeamsvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventRebirthTeamsvr& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGameEventRebirthTeamsvr* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventRebirthTeamsvr*>(
               &_InnerGameEventRebirthTeamsvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(InnerGameEventRebirthTeamsvr& a, InnerGameEventRebirthTeamsvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventRebirthTeamsvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventRebirthTeamsvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventRebirthTeamsvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventRebirthTeamsvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerGameEventRebirthTeamsvr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerGameEventRebirthTeamsvr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerGameEventRebirthTeamsvr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventRebirthTeamsvr";
  }
  protected:
  explicit InnerGameEventRebirthTeamsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtd2FieldNumber = 1,
    kExtd3FieldNumber = 2,
  };
  // .common.RoleExtend2 extd2 = 1;
  bool has_extd2() const;
  private:
  bool _internal_has_extd2() const;
  public:
  void clear_extd2();
  const ::common::RoleExtend2& extd2() const;
  PROTOBUF_NODISCARD ::common::RoleExtend2* release_extd2();
  ::common::RoleExtend2* mutable_extd2();
  void set_allocated_extd2(::common::RoleExtend2* extd2);
  private:
  const ::common::RoleExtend2& _internal_extd2() const;
  ::common::RoleExtend2* _internal_mutable_extd2();
  public:
  void unsafe_arena_set_allocated_extd2(
      ::common::RoleExtend2* extd2);
  ::common::RoleExtend2* unsafe_arena_release_extd2();

  // .common.RoleExtend3 extd3 = 2;
  bool has_extd3() const;
  private:
  bool _internal_has_extd3() const;
  public:
  void clear_extd3();
  const ::common::RoleExtend3& extd3() const;
  PROTOBUF_NODISCARD ::common::RoleExtend3* release_extd3();
  ::common::RoleExtend3* mutable_extd3();
  void set_allocated_extd3(::common::RoleExtend3* extd3);
  private:
  const ::common::RoleExtend3& _internal_extd3() const;
  ::common::RoleExtend3* _internal_mutable_extd3();
  public:
  void unsafe_arena_set_allocated_extd3(
      ::common::RoleExtend3* extd3);
  ::common::RoleExtend3* unsafe_arena_release_extd3();

  // @@protoc_insertion_point(class_scope:inner.InnerGameEventRebirthTeamsvr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::RoleExtend2* extd2_;
  ::common::RoleExtend3* extd3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventRebirthFriendsvr final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerGameEventRebirthFriendsvr) */ {
 public:
  inline InnerGameEventRebirthFriendsvr() : InnerGameEventRebirthFriendsvr(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerGameEventRebirthFriendsvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventRebirthFriendsvr(const InnerGameEventRebirthFriendsvr& from);
  InnerGameEventRebirthFriendsvr(InnerGameEventRebirthFriendsvr&& from) noexcept
    : InnerGameEventRebirthFriendsvr() {
    *this = ::std::move(from);
  }

  inline InnerGameEventRebirthFriendsvr& operator=(const InnerGameEventRebirthFriendsvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventRebirthFriendsvr& operator=(InnerGameEventRebirthFriendsvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventRebirthFriendsvr& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGameEventRebirthFriendsvr* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventRebirthFriendsvr*>(
               &_InnerGameEventRebirthFriendsvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(InnerGameEventRebirthFriendsvr& a, InnerGameEventRebirthFriendsvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventRebirthFriendsvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventRebirthFriendsvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventRebirthFriendsvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventRebirthFriendsvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerGameEventRebirthFriendsvr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerGameEventRebirthFriendsvr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventRebirthFriendsvr";
  }
  protected:
  explicit InnerGameEventRebirthFriendsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerGameEventRebirthFriendsvr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventWakeup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerGameEventWakeup) */ {
 public:
  inline InnerGameEventWakeup() : InnerGameEventWakeup(nullptr) {}
  ~InnerGameEventWakeup() override;
  explicit PROTOBUF_CONSTEXPR InnerGameEventWakeup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventWakeup(const InnerGameEventWakeup& from);
  InnerGameEventWakeup(InnerGameEventWakeup&& from) noexcept
    : InnerGameEventWakeup() {
    *this = ::std::move(from);
  }

  inline InnerGameEventWakeup& operator=(const InnerGameEventWakeup& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventWakeup& operator=(InnerGameEventWakeup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventWakeup& default_instance() {
    return *internal_default_instance();
  }
  enum ServerCase {
    kTeamsvr = 1,
    kFriendsvr = 2,
    kFamilysvr = 3,
    SERVER_NOT_SET = 0,
  };

  static inline const InnerGameEventWakeup* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventWakeup*>(
               &_InnerGameEventWakeup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(InnerGameEventWakeup& a, InnerGameEventWakeup& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventWakeup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventWakeup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventWakeup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventWakeup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerGameEventWakeup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerGameEventWakeup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerGameEventWakeup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventWakeup";
  }
  protected:
  explicit InnerGameEventWakeup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamsvrFieldNumber = 1,
    kFriendsvrFieldNumber = 2,
    kFamilysvrFieldNumber = 3,
  };
  // .inner.InnerGameEventWakeupTeamsvr teamsvr = 1;
  bool has_teamsvr() const;
  private:
  bool _internal_has_teamsvr() const;
  public:
  void clear_teamsvr();
  const ::inner::InnerGameEventWakeupTeamsvr& teamsvr() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventWakeupTeamsvr* release_teamsvr();
  ::inner::InnerGameEventWakeupTeamsvr* mutable_teamsvr();
  void set_allocated_teamsvr(::inner::InnerGameEventWakeupTeamsvr* teamsvr);
  private:
  const ::inner::InnerGameEventWakeupTeamsvr& _internal_teamsvr() const;
  ::inner::InnerGameEventWakeupTeamsvr* _internal_mutable_teamsvr();
  public:
  void unsafe_arena_set_allocated_teamsvr(
      ::inner::InnerGameEventWakeupTeamsvr* teamsvr);
  ::inner::InnerGameEventWakeupTeamsvr* unsafe_arena_release_teamsvr();

  // .inner.InnerGameEventWakeupFriendsvr friendsvr = 2;
  bool has_friendsvr() const;
  private:
  bool _internal_has_friendsvr() const;
  public:
  void clear_friendsvr();
  const ::inner::InnerGameEventWakeupFriendsvr& friendsvr() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventWakeupFriendsvr* release_friendsvr();
  ::inner::InnerGameEventWakeupFriendsvr* mutable_friendsvr();
  void set_allocated_friendsvr(::inner::InnerGameEventWakeupFriendsvr* friendsvr);
  private:
  const ::inner::InnerGameEventWakeupFriendsvr& _internal_friendsvr() const;
  ::inner::InnerGameEventWakeupFriendsvr* _internal_mutable_friendsvr();
  public:
  void unsafe_arena_set_allocated_friendsvr(
      ::inner::InnerGameEventWakeupFriendsvr* friendsvr);
  ::inner::InnerGameEventWakeupFriendsvr* unsafe_arena_release_friendsvr();

  // .inner.InnerGameEventWakeupFamilysvr familysvr = 3;
  bool has_familysvr() const;
  private:
  bool _internal_has_familysvr() const;
  public:
  void clear_familysvr();
  const ::inner::InnerGameEventWakeupFamilysvr& familysvr() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEventWakeupFamilysvr* release_familysvr();
  ::inner::InnerGameEventWakeupFamilysvr* mutable_familysvr();
  void set_allocated_familysvr(::inner::InnerGameEventWakeupFamilysvr* familysvr);
  private:
  const ::inner::InnerGameEventWakeupFamilysvr& _internal_familysvr() const;
  ::inner::InnerGameEventWakeupFamilysvr* _internal_mutable_familysvr();
  public:
  void unsafe_arena_set_allocated_familysvr(
      ::inner::InnerGameEventWakeupFamilysvr* familysvr);
  ::inner::InnerGameEventWakeupFamilysvr* unsafe_arena_release_familysvr();

  void clear_server();
  ServerCase server_case() const;
  // @@protoc_insertion_point(class_scope:inner.InnerGameEventWakeup)
 private:
  class _Internal;
  void set_has_teamsvr();
  void set_has_friendsvr();
  void set_has_familysvr();

  inline bool has_server() const;
  inline void clear_has_server();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ServerUnion {
    constexpr ServerUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::inner::InnerGameEventWakeupTeamsvr* teamsvr_;
    ::inner::InnerGameEventWakeupFriendsvr* friendsvr_;
    ::inner::InnerGameEventWakeupFamilysvr* familysvr_;
  } server_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventWakeupTeamsvr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerGameEventWakeupTeamsvr) */ {
 public:
  inline InnerGameEventWakeupTeamsvr() : InnerGameEventWakeupTeamsvr(nullptr) {}
  ~InnerGameEventWakeupTeamsvr() override;
  explicit PROTOBUF_CONSTEXPR InnerGameEventWakeupTeamsvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventWakeupTeamsvr(const InnerGameEventWakeupTeamsvr& from);
  InnerGameEventWakeupTeamsvr(InnerGameEventWakeupTeamsvr&& from) noexcept
    : InnerGameEventWakeupTeamsvr() {
    *this = ::std::move(from);
  }

  inline InnerGameEventWakeupTeamsvr& operator=(const InnerGameEventWakeupTeamsvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventWakeupTeamsvr& operator=(InnerGameEventWakeupTeamsvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventWakeupTeamsvr& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGameEventWakeupTeamsvr* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventWakeupTeamsvr*>(
               &_InnerGameEventWakeupTeamsvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(InnerGameEventWakeupTeamsvr& a, InnerGameEventWakeupTeamsvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventWakeupTeamsvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventWakeupTeamsvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventWakeupTeamsvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventWakeupTeamsvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerGameEventWakeupTeamsvr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerGameEventWakeupTeamsvr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerGameEventWakeupTeamsvr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventWakeupTeamsvr";
  }
  protected:
  explicit InnerGameEventWakeupTeamsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBriefFieldNumber = 1,
    kExtd1FieldNumber = 2,
    kExtd2FieldNumber = 3,
    kExtd3FieldNumber = 4,
    kF33FieldNumber = 5,
    kF55FieldNumber = 6,
    kSceneHashIdFieldNumber = 7,
  };
  // .common.RoleBrief brief = 1;
  bool has_brief() const;
  private:
  bool _internal_has_brief() const;
  public:
  void clear_brief();
  const ::common::RoleBrief& brief() const;
  PROTOBUF_NODISCARD ::common::RoleBrief* release_brief();
  ::common::RoleBrief* mutable_brief();
  void set_allocated_brief(::common::RoleBrief* brief);
  private:
  const ::common::RoleBrief& _internal_brief() const;
  ::common::RoleBrief* _internal_mutable_brief();
  public:
  void unsafe_arena_set_allocated_brief(
      ::common::RoleBrief* brief);
  ::common::RoleBrief* unsafe_arena_release_brief();

  // .common.RoleExtend1 extd1 = 2;
  bool has_extd1() const;
  private:
  bool _internal_has_extd1() const;
  public:
  void clear_extd1();
  const ::common::RoleExtend1& extd1() const;
  PROTOBUF_NODISCARD ::common::RoleExtend1* release_extd1();
  ::common::RoleExtend1* mutable_extd1();
  void set_allocated_extd1(::common::RoleExtend1* extd1);
  private:
  const ::common::RoleExtend1& _internal_extd1() const;
  ::common::RoleExtend1* _internal_mutable_extd1();
  public:
  void unsafe_arena_set_allocated_extd1(
      ::common::RoleExtend1* extd1);
  ::common::RoleExtend1* unsafe_arena_release_extd1();

  // .common.RoleExtend2 extd2 = 3;
  bool has_extd2() const;
  private:
  bool _internal_has_extd2() const;
  public:
  void clear_extd2();
  const ::common::RoleExtend2& extd2() const;
  PROTOBUF_NODISCARD ::common::RoleExtend2* release_extd2();
  ::common::RoleExtend2* mutable_extd2();
  void set_allocated_extd2(::common::RoleExtend2* extd2);
  private:
  const ::common::RoleExtend2& _internal_extd2() const;
  ::common::RoleExtend2* _internal_mutable_extd2();
  public:
  void unsafe_arena_set_allocated_extd2(
      ::common::RoleExtend2* extd2);
  ::common::RoleExtend2* unsafe_arena_release_extd2();

  // .common.RoleExtend3 extd3 = 4;
  bool has_extd3() const;
  private:
  bool _internal_has_extd3() const;
  public:
  void clear_extd3();
  const ::common::RoleExtend3& extd3() const;
  PROTOBUF_NODISCARD ::common::RoleExtend3* release_extd3();
  ::common::RoleExtend3* mutable_extd3();
  void set_allocated_extd3(::common::RoleExtend3* extd3);
  private:
  const ::common::RoleExtend3& _internal_extd3() const;
  ::common::RoleExtend3* _internal_mutable_extd3();
  public:
  void unsafe_arena_set_allocated_extd3(
      ::common::RoleExtend3* extd3);
  ::common::RoleExtend3* unsafe_arena_release_extd3();

  // .common.ExtendFight3v3 f33 = 5;
  bool has_f33() const;
  private:
  bool _internal_has_f33() const;
  public:
  void clear_f33();
  const ::common::ExtendFight3v3& f33() const;
  PROTOBUF_NODISCARD ::common::ExtendFight3v3* release_f33();
  ::common::ExtendFight3v3* mutable_f33();
  void set_allocated_f33(::common::ExtendFight3v3* f33);
  private:
  const ::common::ExtendFight3v3& _internal_f33() const;
  ::common::ExtendFight3v3* _internal_mutable_f33();
  public:
  void unsafe_arena_set_allocated_f33(
      ::common::ExtendFight3v3* f33);
  ::common::ExtendFight3v3* unsafe_arena_release_f33();

  // .common.ExtendFight5v5 f55 = 6;
  bool has_f55() const;
  private:
  bool _internal_has_f55() const;
  public:
  void clear_f55();
  const ::common::ExtendFight5v5& f55() const;
  PROTOBUF_NODISCARD ::common::ExtendFight5v5* release_f55();
  ::common::ExtendFight5v5* mutable_f55();
  void set_allocated_f55(::common::ExtendFight5v5* f55);
  private:
  const ::common::ExtendFight5v5& _internal_f55() const;
  ::common::ExtendFight5v5* _internal_mutable_f55();
  public:
  void unsafe_arena_set_allocated_f55(
      ::common::ExtendFight5v5* f55);
  ::common::ExtendFight5v5* unsafe_arena_release_f55();

  // uint32 sceneHashId = 7;
  void clear_scenehashid();
  uint32_t scenehashid() const;
  void set_scenehashid(uint32_t value);
  private:
  uint32_t _internal_scenehashid() const;
  void _internal_set_scenehashid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerGameEventWakeupTeamsvr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::RoleBrief* brief_;
  ::common::RoleExtend1* extd1_;
  ::common::RoleExtend2* extd2_;
  ::common::RoleExtend3* extd3_;
  ::common::ExtendFight3v3* f33_;
  ::common::ExtendFight5v5* f55_;
  uint32_t scenehashid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventWakeupFriendsvr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerGameEventWakeupFriendsvr) */ {
 public:
  inline InnerGameEventWakeupFriendsvr() : InnerGameEventWakeupFriendsvr(nullptr) {}
  ~InnerGameEventWakeupFriendsvr() override;
  explicit PROTOBUF_CONSTEXPR InnerGameEventWakeupFriendsvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventWakeupFriendsvr(const InnerGameEventWakeupFriendsvr& from);
  InnerGameEventWakeupFriendsvr(InnerGameEventWakeupFriendsvr&& from) noexcept
    : InnerGameEventWakeupFriendsvr() {
    *this = ::std::move(from);
  }

  inline InnerGameEventWakeupFriendsvr& operator=(const InnerGameEventWakeupFriendsvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventWakeupFriendsvr& operator=(InnerGameEventWakeupFriendsvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventWakeupFriendsvr& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGameEventWakeupFriendsvr* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventWakeupFriendsvr*>(
               &_InnerGameEventWakeupFriendsvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(InnerGameEventWakeupFriendsvr& a, InnerGameEventWakeupFriendsvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventWakeupFriendsvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventWakeupFriendsvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventWakeupFriendsvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventWakeupFriendsvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerGameEventWakeupFriendsvr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerGameEventWakeupFriendsvr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerGameEventWakeupFriendsvr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventWakeupFriendsvr";
  }
  protected:
  explicit InnerGameEventWakeupFriendsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOInfoFieldNumber = 1,
    kOGiftsFieldNumber = 2,
    kLlTeamIdFieldNumber = 3,
  };
  // .inner.InnerFriendInfo oInfo = 1;
  bool has_oinfo() const;
  private:
  bool _internal_has_oinfo() const;
  public:
  void clear_oinfo();
  const ::inner::InnerFriendInfo& oinfo() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendInfo* release_oinfo();
  ::inner::InnerFriendInfo* mutable_oinfo();
  void set_allocated_oinfo(::inner::InnerFriendInfo* oinfo);
  private:
  const ::inner::InnerFriendInfo& _internal_oinfo() const;
  ::inner::InnerFriendInfo* _internal_mutable_oinfo();
  public:
  void unsafe_arena_set_allocated_oinfo(
      ::inner::InnerFriendInfo* oinfo);
  ::inner::InnerFriendInfo* unsafe_arena_release_oinfo();

  // .inner.InnerFriendGiftList oGifts = 2;
  bool has_ogifts() const;
  private:
  bool _internal_has_ogifts() const;
  public:
  void clear_ogifts();
  const ::inner::InnerFriendGiftList& ogifts() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendGiftList* release_ogifts();
  ::inner::InnerFriendGiftList* mutable_ogifts();
  void set_allocated_ogifts(::inner::InnerFriendGiftList* ogifts);
  private:
  const ::inner::InnerFriendGiftList& _internal_ogifts() const;
  ::inner::InnerFriendGiftList* _internal_mutable_ogifts();
  public:
  void unsafe_arena_set_allocated_ogifts(
      ::inner::InnerFriendGiftList* ogifts);
  ::inner::InnerFriendGiftList* unsafe_arena_release_ogifts();

  // uint64 llTeamId = 3;
  void clear_llteamid();
  uint64_t llteamid() const;
  void set_llteamid(uint64_t value);
  private:
  uint64_t _internal_llteamid() const;
  void _internal_set_llteamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerGameEventWakeupFriendsvr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::inner::InnerFriendInfo* oinfo_;
  ::inner::InnerFriendGiftList* ogifts_;
  uint64_t llteamid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// -------------------------------------------------------------------

class InnerGameEventWakeupFamilysvr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerGameEventWakeupFamilysvr) */ {
 public:
  inline InnerGameEventWakeupFamilysvr() : InnerGameEventWakeupFamilysvr(nullptr) {}
  ~InnerGameEventWakeupFamilysvr() override;
  explicit PROTOBUF_CONSTEXPR InnerGameEventWakeupFamilysvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerGameEventWakeupFamilysvr(const InnerGameEventWakeupFamilysvr& from);
  InnerGameEventWakeupFamilysvr(InnerGameEventWakeupFamilysvr&& from) noexcept
    : InnerGameEventWakeupFamilysvr() {
    *this = ::std::move(from);
  }

  inline InnerGameEventWakeupFamilysvr& operator=(const InnerGameEventWakeupFamilysvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerGameEventWakeupFamilysvr& operator=(InnerGameEventWakeupFamilysvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerGameEventWakeupFamilysvr& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerGameEventWakeupFamilysvr* internal_default_instance() {
    return reinterpret_cast<const InnerGameEventWakeupFamilysvr*>(
               &_InnerGameEventWakeupFamilysvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(InnerGameEventWakeupFamilysvr& a, InnerGameEventWakeupFamilysvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerGameEventWakeupFamilysvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerGameEventWakeupFamilysvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerGameEventWakeupFamilysvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerGameEventWakeupFamilysvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerGameEventWakeupFamilysvr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerGameEventWakeupFamilysvr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerGameEventWakeupFamilysvr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerGameEventWakeupFamilysvr";
  }
  protected:
  explicit InnerGameEventWakeupFamilysvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBriefFieldNumber = 1,
  };
  // .common.RoleBrief brief = 1;
  bool has_brief() const;
  private:
  bool _internal_has_brief() const;
  public:
  void clear_brief();
  const ::common::RoleBrief& brief() const;
  PROTOBUF_NODISCARD ::common::RoleBrief* release_brief();
  ::common::RoleBrief* mutable_brief();
  void set_allocated_brief(::common::RoleBrief* brief);
  private:
  const ::common::RoleBrief& _internal_brief() const;
  ::common::RoleBrief* _internal_mutable_brief();
  public:
  void unsafe_arena_set_allocated_brief(
      ::common::RoleBrief* brief);
  ::common::RoleBrief* unsafe_arena_release_brief();

  // @@protoc_insertion_point(class_scope:inner.InnerGameEventWakeupFamilysvr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::RoleBrief* brief_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_innercommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InnerRoleIdList

// repeated uint64 roleIds = 1;
inline int InnerRoleIdList::_internal_roleids_size() const {
  return roleids_.size();
}
inline int InnerRoleIdList::roleids_size() const {
  return _internal_roleids_size();
}
inline void InnerRoleIdList::clear_roleids() {
  roleids_.Clear();
}
inline uint64_t InnerRoleIdList::_internal_roleids(int index) const {
  return roleids_.Get(index);
}
inline uint64_t InnerRoleIdList::roleids(int index) const {
  // @@protoc_insertion_point(field_get:inner.InnerRoleIdList.roleIds)
  return _internal_roleids(index);
}
inline void InnerRoleIdList::set_roleids(int index, uint64_t value) {
  roleids_.Set(index, value);
  // @@protoc_insertion_point(field_set:inner.InnerRoleIdList.roleIds)
}
inline void InnerRoleIdList::_internal_add_roleids(uint64_t value) {
  roleids_.Add(value);
}
inline void InnerRoleIdList::add_roleids(uint64_t value) {
  _internal_add_roleids(value);
  // @@protoc_insertion_point(field_add:inner.InnerRoleIdList.roleIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
InnerRoleIdList::_internal_roleids() const {
  return roleids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
InnerRoleIdList::roleids() const {
  // @@protoc_insertion_point(field_list:inner.InnerRoleIdList.roleIds)
  return _internal_roleids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
InnerRoleIdList::_internal_mutable_roleids() {
  return &roleids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
InnerRoleIdList::mutable_roleids() {
  // @@protoc_insertion_point(field_mutable_list:inner.InnerRoleIdList.roleIds)
  return _internal_mutable_roleids();
}

// -------------------------------------------------------------------

// InnerCopyTeamMem

// uint64 roleId = 1;
inline void InnerCopyTeamMem::clear_roleid() {
  roleid_ = uint64_t{0u};
}
inline uint64_t InnerCopyTeamMem::_internal_roleid() const {
  return roleid_;
}
inline uint64_t InnerCopyTeamMem::roleid() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyTeamMem.roleId)
  return _internal_roleid();
}
inline void InnerCopyTeamMem::_internal_set_roleid(uint64_t value) {
  
  roleid_ = value;
}
inline void InnerCopyTeamMem::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:inner.InnerCopyTeamMem.roleId)
}

// uint32 zoneIdF = 2;
inline void InnerCopyTeamMem::clear_zoneidf() {
  zoneidf_ = 0u;
}
inline uint32_t InnerCopyTeamMem::_internal_zoneidf() const {
  return zoneidf_;
}
inline uint32_t InnerCopyTeamMem::zoneidf() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyTeamMem.zoneIdF)
  return _internal_zoneidf();
}
inline void InnerCopyTeamMem::_internal_set_zoneidf(uint32_t value) {
  
  zoneidf_ = value;
}
inline void InnerCopyTeamMem::set_zoneidf(uint32_t value) {
  _internal_set_zoneidf(value);
  // @@protoc_insertion_point(field_set:inner.InnerCopyTeamMem.zoneIdF)
}

// -------------------------------------------------------------------

// InnerCopyTeam

// repeated .inner.InnerCopyTeamMem roles = 1;
inline int InnerCopyTeam::_internal_roles_size() const {
  return roles_.size();
}
inline int InnerCopyTeam::roles_size() const {
  return _internal_roles_size();
}
inline void InnerCopyTeam::clear_roles() {
  roles_.Clear();
}
inline ::inner::InnerCopyTeamMem* InnerCopyTeam::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:inner.InnerCopyTeam.roles)
  return roles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inner::InnerCopyTeamMem >*
InnerCopyTeam::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:inner.InnerCopyTeam.roles)
  return &roles_;
}
inline const ::inner::InnerCopyTeamMem& InnerCopyTeam::_internal_roles(int index) const {
  return roles_.Get(index);
}
inline const ::inner::InnerCopyTeamMem& InnerCopyTeam::roles(int index) const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyTeam.roles)
  return _internal_roles(index);
}
inline ::inner::InnerCopyTeamMem* InnerCopyTeam::_internal_add_roles() {
  return roles_.Add();
}
inline ::inner::InnerCopyTeamMem* InnerCopyTeam::add_roles() {
  ::inner::InnerCopyTeamMem* _add = _internal_add_roles();
  // @@protoc_insertion_point(field_add:inner.InnerCopyTeam.roles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inner::InnerCopyTeamMem >&
InnerCopyTeam::roles() const {
  // @@protoc_insertion_point(field_list:inner.InnerCopyTeam.roles)
  return roles_;
}

// repeated .inner.InnerCopyTeamMem robots = 2;
inline int InnerCopyTeam::_internal_robots_size() const {
  return robots_.size();
}
inline int InnerCopyTeam::robots_size() const {
  return _internal_robots_size();
}
inline void InnerCopyTeam::clear_robots() {
  robots_.Clear();
}
inline ::inner::InnerCopyTeamMem* InnerCopyTeam::mutable_robots(int index) {
  // @@protoc_insertion_point(field_mutable:inner.InnerCopyTeam.robots)
  return robots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inner::InnerCopyTeamMem >*
InnerCopyTeam::mutable_robots() {
  // @@protoc_insertion_point(field_mutable_list:inner.InnerCopyTeam.robots)
  return &robots_;
}
inline const ::inner::InnerCopyTeamMem& InnerCopyTeam::_internal_robots(int index) const {
  return robots_.Get(index);
}
inline const ::inner::InnerCopyTeamMem& InnerCopyTeam::robots(int index) const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyTeam.robots)
  return _internal_robots(index);
}
inline ::inner::InnerCopyTeamMem* InnerCopyTeam::_internal_add_robots() {
  return robots_.Add();
}
inline ::inner::InnerCopyTeamMem* InnerCopyTeam::add_robots() {
  ::inner::InnerCopyTeamMem* _add = _internal_add_robots();
  // @@protoc_insertion_point(field_add:inner.InnerCopyTeam.robots)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inner::InnerCopyTeamMem >&
InnerCopyTeam::robots() const {
  // @@protoc_insertion_point(field_list:inner.InnerCopyTeam.robots)
  return robots_;
}

// -------------------------------------------------------------------

// InnerCopyTeamList

// uint32 targetId = 1;
inline void InnerCopyTeamList::clear_targetid() {
  targetid_ = 0u;
}
inline uint32_t InnerCopyTeamList::_internal_targetid() const {
  return targetid_;
}
inline uint32_t InnerCopyTeamList::targetid() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyTeamList.targetId)
  return _internal_targetid();
}
inline void InnerCopyTeamList::_internal_set_targetid(uint32_t value) {
  
  targetid_ = value;
}
inline void InnerCopyTeamList::set_targetid(uint32_t value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:inner.InnerCopyTeamList.targetId)
}

// repeated .inner.InnerCopyTeam teams = 2;
inline int InnerCopyTeamList::_internal_teams_size() const {
  return teams_.size();
}
inline int InnerCopyTeamList::teams_size() const {
  return _internal_teams_size();
}
inline void InnerCopyTeamList::clear_teams() {
  teams_.Clear();
}
inline ::inner::InnerCopyTeam* InnerCopyTeamList::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:inner.InnerCopyTeamList.teams)
  return teams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inner::InnerCopyTeam >*
InnerCopyTeamList::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:inner.InnerCopyTeamList.teams)
  return &teams_;
}
inline const ::inner::InnerCopyTeam& InnerCopyTeamList::_internal_teams(int index) const {
  return teams_.Get(index);
}
inline const ::inner::InnerCopyTeam& InnerCopyTeamList::teams(int index) const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyTeamList.teams)
  return _internal_teams(index);
}
inline ::inner::InnerCopyTeam* InnerCopyTeamList::_internal_add_teams() {
  return teams_.Add();
}
inline ::inner::InnerCopyTeam* InnerCopyTeamList::add_teams() {
  ::inner::InnerCopyTeam* _add = _internal_add_teams();
  // @@protoc_insertion_point(field_add:inner.InnerCopyTeamList.teams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inner::InnerCopyTeam >&
InnerCopyTeamList::teams() const {
  // @@protoc_insertion_point(field_list:inner.InnerCopyTeamList.teams)
  return teams_;
}

// -------------------------------------------------------------------

// InnerCopyEnterByTeam

// -------------------------------------------------------------------

// InnerCopyEnterByChgLvId

// -------------------------------------------------------------------

// InnerCopyEnterByHome

// -------------------------------------------------------------------

// InnerCopyEnter

// uint32 copyLvId = 1;
inline void InnerCopyEnter::clear_copylvid() {
  copylvid_ = 0u;
}
inline uint32_t InnerCopyEnter::_internal_copylvid() const {
  return copylvid_;
}
inline uint32_t InnerCopyEnter::copylvid() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyEnter.copyLvId)
  return _internal_copylvid();
}
inline void InnerCopyEnter::_internal_set_copylvid(uint32_t value) {
  
  copylvid_ = value;
}
inline void InnerCopyEnter::set_copylvid(uint32_t value) {
  _internal_set_copylvid(value);
  // @@protoc_insertion_point(field_set:inner.InnerCopyEnter.copyLvId)
}

// uint32 eProc = 2;
inline void InnerCopyEnter::clear_eproc() {
  eproc_ = 0u;
}
inline uint32_t InnerCopyEnter::_internal_eproc() const {
  return eproc_;
}
inline uint32_t InnerCopyEnter::eproc() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyEnter.eProc)
  return _internal_eproc();
}
inline void InnerCopyEnter::_internal_set_eproc(uint32_t value) {
  
  eproc_ = value;
}
inline void InnerCopyEnter::set_eproc(uint32_t value) {
  _internal_set_eproc(value);
  // @@protoc_insertion_point(field_set:inner.InnerCopyEnter.eProc)
}

// uint32 threeId = 3;
inline void InnerCopyEnter::clear_threeid() {
  threeid_ = 0u;
}
inline uint32_t InnerCopyEnter::_internal_threeid() const {
  return threeid_;
}
inline uint32_t InnerCopyEnter::threeid() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyEnter.threeId)
  return _internal_threeid();
}
inline void InnerCopyEnter::_internal_set_threeid(uint32_t value) {
  
  threeid_ = value;
}
inline void InnerCopyEnter::set_threeid(uint32_t value) {
  _internal_set_threeid(value);
  // @@protoc_insertion_point(field_set:inner.InnerCopyEnter.threeId)
}

// uint32 voteId = 4;
inline void InnerCopyEnter::clear_voteid() {
  voteid_ = 0u;
}
inline uint32_t InnerCopyEnter::_internal_voteid() const {
  return voteid_;
}
inline uint32_t InnerCopyEnter::voteid() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyEnter.voteId)
  return _internal_voteid();
}
inline void InnerCopyEnter::_internal_set_voteid(uint32_t value) {
  
  voteid_ = value;
}
inline void InnerCopyEnter::set_voteid(uint32_t value) {
  _internal_set_voteid(value);
  // @@protoc_insertion_point(field_set:inner.InnerCopyEnter.voteId)
}

// .inner.InnerCopyTeamList teamList = 5;
inline bool InnerCopyEnter::_internal_has_teamlist() const {
  return this != internal_default_instance() && teamlist_ != nullptr;
}
inline bool InnerCopyEnter::has_teamlist() const {
  return _internal_has_teamlist();
}
inline void InnerCopyEnter::clear_teamlist() {
  if (GetArenaForAllocation() == nullptr && teamlist_ != nullptr) {
    delete teamlist_;
  }
  teamlist_ = nullptr;
}
inline const ::inner::InnerCopyTeamList& InnerCopyEnter::_internal_teamlist() const {
  const ::inner::InnerCopyTeamList* p = teamlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::inner::InnerCopyTeamList&>(
      ::inner::_InnerCopyTeamList_default_instance_);
}
inline const ::inner::InnerCopyTeamList& InnerCopyEnter::teamlist() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyEnter.teamList)
  return _internal_teamlist();
}
inline void InnerCopyEnter::unsafe_arena_set_allocated_teamlist(
    ::inner::InnerCopyTeamList* teamlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(teamlist_);
  }
  teamlist_ = teamlist;
  if (teamlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerCopyEnter.teamList)
}
inline ::inner::InnerCopyTeamList* InnerCopyEnter::release_teamlist() {
  
  ::inner::InnerCopyTeamList* temp = teamlist_;
  teamlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::inner::InnerCopyTeamList* InnerCopyEnter::unsafe_arena_release_teamlist() {
  // @@protoc_insertion_point(field_release:inner.InnerCopyEnter.teamList)
  
  ::inner::InnerCopyTeamList* temp = teamlist_;
  teamlist_ = nullptr;
  return temp;
}
inline ::inner::InnerCopyTeamList* InnerCopyEnter::_internal_mutable_teamlist() {
  
  if (teamlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::inner::InnerCopyTeamList>(GetArenaForAllocation());
    teamlist_ = p;
  }
  return teamlist_;
}
inline ::inner::InnerCopyTeamList* InnerCopyEnter::mutable_teamlist() {
  ::inner::InnerCopyTeamList* _msg = _internal_mutable_teamlist();
  // @@protoc_insertion_point(field_mutable:inner.InnerCopyEnter.teamList)
  return _msg;
}
inline void InnerCopyEnter::set_allocated_teamlist(::inner::InnerCopyTeamList* teamlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete teamlist_;
  }
  if (teamlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(teamlist);
    if (message_arena != submessage_arena) {
      teamlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teamlist, submessage_arena);
    }
    
  } else {
    
  }
  teamlist_ = teamlist;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerCopyEnter.teamList)
}

// .inner.InnerCopyEnterByTeam team = 11;
inline bool InnerCopyEnter::_internal_has_team() const {
  return type_case() == kTeam;
}
inline bool InnerCopyEnter::has_team() const {
  return _internal_has_team();
}
inline void InnerCopyEnter::set_has_team() {
  _oneof_case_[0] = kTeam;
}
inline void InnerCopyEnter::clear_team() {
  if (_internal_has_team()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.team_;
    }
    clear_has_type();
  }
}
inline ::inner::InnerCopyEnterByTeam* InnerCopyEnter::release_team() {
  // @@protoc_insertion_point(field_release:inner.InnerCopyEnter.team)
  if (_internal_has_team()) {
    clear_has_type();
    ::inner::InnerCopyEnterByTeam* temp = type_.team_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.team_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerCopyEnterByTeam& InnerCopyEnter::_internal_team() const {
  return _internal_has_team()
      ? *type_.team_
      : reinterpret_cast< ::inner::InnerCopyEnterByTeam&>(::inner::_InnerCopyEnterByTeam_default_instance_);
}
inline const ::inner::InnerCopyEnterByTeam& InnerCopyEnter::team() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyEnter.team)
  return _internal_team();
}
inline ::inner::InnerCopyEnterByTeam* InnerCopyEnter::unsafe_arena_release_team() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerCopyEnter.team)
  if (_internal_has_team()) {
    clear_has_type();
    ::inner::InnerCopyEnterByTeam* temp = type_.team_;
    type_.team_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerCopyEnter::unsafe_arena_set_allocated_team(::inner::InnerCopyEnterByTeam* team) {
  clear_type();
  if (team) {
    set_has_team();
    type_.team_ = team;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerCopyEnter.team)
}
inline ::inner::InnerCopyEnterByTeam* InnerCopyEnter::_internal_mutable_team() {
  if (!_internal_has_team()) {
    clear_type();
    set_has_team();
    type_.team_ = CreateMaybeMessage< ::inner::InnerCopyEnterByTeam >(GetArenaForAllocation());
  }
  return type_.team_;
}
inline ::inner::InnerCopyEnterByTeam* InnerCopyEnter::mutable_team() {
  ::inner::InnerCopyEnterByTeam* _msg = _internal_mutable_team();
  // @@protoc_insertion_point(field_mutable:inner.InnerCopyEnter.team)
  return _msg;
}

// .inner.InnerCopyEnterByChgLvId chgLvId = 12;
inline bool InnerCopyEnter::_internal_has_chglvid() const {
  return type_case() == kChgLvId;
}
inline bool InnerCopyEnter::has_chglvid() const {
  return _internal_has_chglvid();
}
inline void InnerCopyEnter::set_has_chglvid() {
  _oneof_case_[0] = kChgLvId;
}
inline void InnerCopyEnter::clear_chglvid() {
  if (_internal_has_chglvid()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.chglvid_;
    }
    clear_has_type();
  }
}
inline ::inner::InnerCopyEnterByChgLvId* InnerCopyEnter::release_chglvid() {
  // @@protoc_insertion_point(field_release:inner.InnerCopyEnter.chgLvId)
  if (_internal_has_chglvid()) {
    clear_has_type();
    ::inner::InnerCopyEnterByChgLvId* temp = type_.chglvid_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.chglvid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerCopyEnterByChgLvId& InnerCopyEnter::_internal_chglvid() const {
  return _internal_has_chglvid()
      ? *type_.chglvid_
      : reinterpret_cast< ::inner::InnerCopyEnterByChgLvId&>(::inner::_InnerCopyEnterByChgLvId_default_instance_);
}
inline const ::inner::InnerCopyEnterByChgLvId& InnerCopyEnter::chglvid() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyEnter.chgLvId)
  return _internal_chglvid();
}
inline ::inner::InnerCopyEnterByChgLvId* InnerCopyEnter::unsafe_arena_release_chglvid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerCopyEnter.chgLvId)
  if (_internal_has_chglvid()) {
    clear_has_type();
    ::inner::InnerCopyEnterByChgLvId* temp = type_.chglvid_;
    type_.chglvid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerCopyEnter::unsafe_arena_set_allocated_chglvid(::inner::InnerCopyEnterByChgLvId* chglvid) {
  clear_type();
  if (chglvid) {
    set_has_chglvid();
    type_.chglvid_ = chglvid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerCopyEnter.chgLvId)
}
inline ::inner::InnerCopyEnterByChgLvId* InnerCopyEnter::_internal_mutable_chglvid() {
  if (!_internal_has_chglvid()) {
    clear_type();
    set_has_chglvid();
    type_.chglvid_ = CreateMaybeMessage< ::inner::InnerCopyEnterByChgLvId >(GetArenaForAllocation());
  }
  return type_.chglvid_;
}
inline ::inner::InnerCopyEnterByChgLvId* InnerCopyEnter::mutable_chglvid() {
  ::inner::InnerCopyEnterByChgLvId* _msg = _internal_mutable_chglvid();
  // @@protoc_insertion_point(field_mutable:inner.InnerCopyEnter.chgLvId)
  return _msg;
}

// .inner.InnerCopyEnterByHome home = 13;
inline bool InnerCopyEnter::_internal_has_home() const {
  return type_case() == kHome;
}
inline bool InnerCopyEnter::has_home() const {
  return _internal_has_home();
}
inline void InnerCopyEnter::set_has_home() {
  _oneof_case_[0] = kHome;
}
inline void InnerCopyEnter::clear_home() {
  if (_internal_has_home()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.home_;
    }
    clear_has_type();
  }
}
inline ::inner::InnerCopyEnterByHome* InnerCopyEnter::release_home() {
  // @@protoc_insertion_point(field_release:inner.InnerCopyEnter.home)
  if (_internal_has_home()) {
    clear_has_type();
    ::inner::InnerCopyEnterByHome* temp = type_.home_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.home_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerCopyEnterByHome& InnerCopyEnter::_internal_home() const {
  return _internal_has_home()
      ? *type_.home_
      : reinterpret_cast< ::inner::InnerCopyEnterByHome&>(::inner::_InnerCopyEnterByHome_default_instance_);
}
inline const ::inner::InnerCopyEnterByHome& InnerCopyEnter::home() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyEnter.home)
  return _internal_home();
}
inline ::inner::InnerCopyEnterByHome* InnerCopyEnter::unsafe_arena_release_home() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerCopyEnter.home)
  if (_internal_has_home()) {
    clear_has_type();
    ::inner::InnerCopyEnterByHome* temp = type_.home_;
    type_.home_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerCopyEnter::unsafe_arena_set_allocated_home(::inner::InnerCopyEnterByHome* home) {
  clear_type();
  if (home) {
    set_has_home();
    type_.home_ = home;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerCopyEnter.home)
}
inline ::inner::InnerCopyEnterByHome* InnerCopyEnter::_internal_mutable_home() {
  if (!_internal_has_home()) {
    clear_type();
    set_has_home();
    type_.home_ = CreateMaybeMessage< ::inner::InnerCopyEnterByHome >(GetArenaForAllocation());
  }
  return type_.home_;
}
inline ::inner::InnerCopyEnterByHome* InnerCopyEnter::mutable_home() {
  ::inner::InnerCopyEnterByHome* _msg = _internal_mutable_home();
  // @@protoc_insertion_point(field_mutable:inner.InnerCopyEnter.home)
  return _msg;
}

inline bool InnerCopyEnter::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void InnerCopyEnter::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline InnerCopyEnter::TypeCase InnerCopyEnter::type_case() const {
  return InnerCopyEnter::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InnerCopyWayByMatch

// uint32 mtype = 1;
inline void InnerCopyWayByMatch::clear_mtype() {
  mtype_ = 0u;
}
inline uint32_t InnerCopyWayByMatch::_internal_mtype() const {
  return mtype_;
}
inline uint32_t InnerCopyWayByMatch::mtype() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyWayByMatch.mtype)
  return _internal_mtype();
}
inline void InnerCopyWayByMatch::_internal_set_mtype(uint32_t value) {
  
  mtype_ = value;
}
inline void InnerCopyWayByMatch::set_mtype(uint32_t value) {
  _internal_set_mtype(value);
  // @@protoc_insertion_point(field_set:inner.InnerCopyWayByMatch.mtype)
}

// uint32 seasonId = 2;
inline void InnerCopyWayByMatch::clear_seasonid() {
  seasonid_ = 0u;
}
inline uint32_t InnerCopyWayByMatch::_internal_seasonid() const {
  return seasonid_;
}
inline uint32_t InnerCopyWayByMatch::seasonid() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyWayByMatch.seasonId)
  return _internal_seasonid();
}
inline void InnerCopyWayByMatch::_internal_set_seasonid(uint32_t value) {
  
  seasonid_ = value;
}
inline void InnerCopyWayByMatch::set_seasonid(uint32_t value) {
  _internal_set_seasonid(value);
  // @@protoc_insertion_point(field_set:inner.InnerCopyWayByMatch.seasonId)
}

// uint32 dayId = 3;
inline void InnerCopyWayByMatch::clear_dayid() {
  dayid_ = 0u;
}
inline uint32_t InnerCopyWayByMatch::_internal_dayid() const {
  return dayid_;
}
inline uint32_t InnerCopyWayByMatch::dayid() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyWayByMatch.dayId)
  return _internal_dayid();
}
inline void InnerCopyWayByMatch::_internal_set_dayid(uint32_t value) {
  
  dayid_ = value;
}
inline void InnerCopyWayByMatch::set_dayid(uint32_t value) {
  _internal_set_dayid(value);
  // @@protoc_insertion_point(field_set:inner.InnerCopyWayByMatch.dayId)
}

// -------------------------------------------------------------------

// InnerCopyWayByTeam

// -------------------------------------------------------------------

// InnerCopyWay

// .inner.InnerCopyTeamList teamList = 1;
inline bool InnerCopyWay::_internal_has_teamlist() const {
  return this != internal_default_instance() && teamlist_ != nullptr;
}
inline bool InnerCopyWay::has_teamlist() const {
  return _internal_has_teamlist();
}
inline void InnerCopyWay::clear_teamlist() {
  if (GetArenaForAllocation() == nullptr && teamlist_ != nullptr) {
    delete teamlist_;
  }
  teamlist_ = nullptr;
}
inline const ::inner::InnerCopyTeamList& InnerCopyWay::_internal_teamlist() const {
  const ::inner::InnerCopyTeamList* p = teamlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::inner::InnerCopyTeamList&>(
      ::inner::_InnerCopyTeamList_default_instance_);
}
inline const ::inner::InnerCopyTeamList& InnerCopyWay::teamlist() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyWay.teamList)
  return _internal_teamlist();
}
inline void InnerCopyWay::unsafe_arena_set_allocated_teamlist(
    ::inner::InnerCopyTeamList* teamlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(teamlist_);
  }
  teamlist_ = teamlist;
  if (teamlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerCopyWay.teamList)
}
inline ::inner::InnerCopyTeamList* InnerCopyWay::release_teamlist() {
  
  ::inner::InnerCopyTeamList* temp = teamlist_;
  teamlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::inner::InnerCopyTeamList* InnerCopyWay::unsafe_arena_release_teamlist() {
  // @@protoc_insertion_point(field_release:inner.InnerCopyWay.teamList)
  
  ::inner::InnerCopyTeamList* temp = teamlist_;
  teamlist_ = nullptr;
  return temp;
}
inline ::inner::InnerCopyTeamList* InnerCopyWay::_internal_mutable_teamlist() {
  
  if (teamlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::inner::InnerCopyTeamList>(GetArenaForAllocation());
    teamlist_ = p;
  }
  return teamlist_;
}
inline ::inner::InnerCopyTeamList* InnerCopyWay::mutable_teamlist() {
  ::inner::InnerCopyTeamList* _msg = _internal_mutable_teamlist();
  // @@protoc_insertion_point(field_mutable:inner.InnerCopyWay.teamList)
  return _msg;
}
inline void InnerCopyWay::set_allocated_teamlist(::inner::InnerCopyTeamList* teamlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete teamlist_;
  }
  if (teamlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(teamlist);
    if (message_arena != submessage_arena) {
      teamlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teamlist, submessage_arena);
    }
    
  } else {
    
  }
  teamlist_ = teamlist;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerCopyWay.teamList)
}

// .inner.InnerCopyWayByMatch byMatch = 11;
inline bool InnerCopyWay::_internal_has_bymatch() const {
  return type_case() == kByMatch;
}
inline bool InnerCopyWay::has_bymatch() const {
  return _internal_has_bymatch();
}
inline void InnerCopyWay::set_has_bymatch() {
  _oneof_case_[0] = kByMatch;
}
inline void InnerCopyWay::clear_bymatch() {
  if (_internal_has_bymatch()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.bymatch_;
    }
    clear_has_type();
  }
}
inline ::inner::InnerCopyWayByMatch* InnerCopyWay::release_bymatch() {
  // @@protoc_insertion_point(field_release:inner.InnerCopyWay.byMatch)
  if (_internal_has_bymatch()) {
    clear_has_type();
    ::inner::InnerCopyWayByMatch* temp = type_.bymatch_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.bymatch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerCopyWayByMatch& InnerCopyWay::_internal_bymatch() const {
  return _internal_has_bymatch()
      ? *type_.bymatch_
      : reinterpret_cast< ::inner::InnerCopyWayByMatch&>(::inner::_InnerCopyWayByMatch_default_instance_);
}
inline const ::inner::InnerCopyWayByMatch& InnerCopyWay::bymatch() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyWay.byMatch)
  return _internal_bymatch();
}
inline ::inner::InnerCopyWayByMatch* InnerCopyWay::unsafe_arena_release_bymatch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerCopyWay.byMatch)
  if (_internal_has_bymatch()) {
    clear_has_type();
    ::inner::InnerCopyWayByMatch* temp = type_.bymatch_;
    type_.bymatch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerCopyWay::unsafe_arena_set_allocated_bymatch(::inner::InnerCopyWayByMatch* bymatch) {
  clear_type();
  if (bymatch) {
    set_has_bymatch();
    type_.bymatch_ = bymatch;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerCopyWay.byMatch)
}
inline ::inner::InnerCopyWayByMatch* InnerCopyWay::_internal_mutable_bymatch() {
  if (!_internal_has_bymatch()) {
    clear_type();
    set_has_bymatch();
    type_.bymatch_ = CreateMaybeMessage< ::inner::InnerCopyWayByMatch >(GetArenaForAllocation());
  }
  return type_.bymatch_;
}
inline ::inner::InnerCopyWayByMatch* InnerCopyWay::mutable_bymatch() {
  ::inner::InnerCopyWayByMatch* _msg = _internal_mutable_bymatch();
  // @@protoc_insertion_point(field_mutable:inner.InnerCopyWay.byMatch)
  return _msg;
}

// .inner.InnerCopyWayByTeam byTeam = 12;
inline bool InnerCopyWay::_internal_has_byteam() const {
  return type_case() == kByTeam;
}
inline bool InnerCopyWay::has_byteam() const {
  return _internal_has_byteam();
}
inline void InnerCopyWay::set_has_byteam() {
  _oneof_case_[0] = kByTeam;
}
inline void InnerCopyWay::clear_byteam() {
  if (_internal_has_byteam()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.byteam_;
    }
    clear_has_type();
  }
}
inline ::inner::InnerCopyWayByTeam* InnerCopyWay::release_byteam() {
  // @@protoc_insertion_point(field_release:inner.InnerCopyWay.byTeam)
  if (_internal_has_byteam()) {
    clear_has_type();
    ::inner::InnerCopyWayByTeam* temp = type_.byteam_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.byteam_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerCopyWayByTeam& InnerCopyWay::_internal_byteam() const {
  return _internal_has_byteam()
      ? *type_.byteam_
      : reinterpret_cast< ::inner::InnerCopyWayByTeam&>(::inner::_InnerCopyWayByTeam_default_instance_);
}
inline const ::inner::InnerCopyWayByTeam& InnerCopyWay::byteam() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyWay.byTeam)
  return _internal_byteam();
}
inline ::inner::InnerCopyWayByTeam* InnerCopyWay::unsafe_arena_release_byteam() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerCopyWay.byTeam)
  if (_internal_has_byteam()) {
    clear_has_type();
    ::inner::InnerCopyWayByTeam* temp = type_.byteam_;
    type_.byteam_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerCopyWay::unsafe_arena_set_allocated_byteam(::inner::InnerCopyWayByTeam* byteam) {
  clear_type();
  if (byteam) {
    set_has_byteam();
    type_.byteam_ = byteam;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerCopyWay.byTeam)
}
inline ::inner::InnerCopyWayByTeam* InnerCopyWay::_internal_mutable_byteam() {
  if (!_internal_has_byteam()) {
    clear_type();
    set_has_byteam();
    type_.byteam_ = CreateMaybeMessage< ::inner::InnerCopyWayByTeam >(GetArenaForAllocation());
  }
  return type_.byteam_;
}
inline ::inner::InnerCopyWayByTeam* InnerCopyWay::mutable_byteam() {
  ::inner::InnerCopyWayByTeam* _msg = _internal_mutable_byteam();
  // @@protoc_insertion_point(field_mutable:inner.InnerCopyWay.byTeam)
  return _msg;
}

inline bool InnerCopyWay::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void InnerCopyWay::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline InnerCopyWay::TypeCase InnerCopyWay::type_case() const {
  return InnerCopyWay::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InnerCopyPvpF55

// uint32 copyId = 1;
inline void InnerCopyPvpF55::clear_copyid() {
  copyid_ = 0u;
}
inline uint32_t InnerCopyPvpF55::_internal_copyid() const {
  return copyid_;
}
inline uint32_t InnerCopyPvpF55::copyid() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyPvpF55.copyId)
  return _internal_copyid();
}
inline void InnerCopyPvpF55::_internal_set_copyid(uint32_t value) {
  
  copyid_ = value;
}
inline void InnerCopyPvpF55::set_copyid(uint32_t value) {
  _internal_set_copyid(value);
  // @@protoc_insertion_point(field_set:inner.InnerCopyPvpF55.copyId)
}

// -------------------------------------------------------------------

// InnerCopyPvp

// .inner.InnerCopyPvpF55 f55 = 11;
inline bool InnerCopyPvp::_internal_has_f55() const {
  return type_case() == kF55;
}
inline bool InnerCopyPvp::has_f55() const {
  return _internal_has_f55();
}
inline void InnerCopyPvp::set_has_f55() {
  _oneof_case_[0] = kF55;
}
inline void InnerCopyPvp::clear_f55() {
  if (_internal_has_f55()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.f55_;
    }
    clear_has_type();
  }
}
inline ::inner::InnerCopyPvpF55* InnerCopyPvp::release_f55() {
  // @@protoc_insertion_point(field_release:inner.InnerCopyPvp.f55)
  if (_internal_has_f55()) {
    clear_has_type();
    ::inner::InnerCopyPvpF55* temp = type_.f55_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.f55_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerCopyPvpF55& InnerCopyPvp::_internal_f55() const {
  return _internal_has_f55()
      ? *type_.f55_
      : reinterpret_cast< ::inner::InnerCopyPvpF55&>(::inner::_InnerCopyPvpF55_default_instance_);
}
inline const ::inner::InnerCopyPvpF55& InnerCopyPvp::f55() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyPvp.f55)
  return _internal_f55();
}
inline ::inner::InnerCopyPvpF55* InnerCopyPvp::unsafe_arena_release_f55() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerCopyPvp.f55)
  if (_internal_has_f55()) {
    clear_has_type();
    ::inner::InnerCopyPvpF55* temp = type_.f55_;
    type_.f55_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerCopyPvp::unsafe_arena_set_allocated_f55(::inner::InnerCopyPvpF55* f55) {
  clear_type();
  if (f55) {
    set_has_f55();
    type_.f55_ = f55;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerCopyPvp.f55)
}
inline ::inner::InnerCopyPvpF55* InnerCopyPvp::_internal_mutable_f55() {
  if (!_internal_has_f55()) {
    clear_type();
    set_has_f55();
    type_.f55_ = CreateMaybeMessage< ::inner::InnerCopyPvpF55 >(GetArenaForAllocation());
  }
  return type_.f55_;
}
inline ::inner::InnerCopyPvpF55* InnerCopyPvp::mutable_f55() {
  ::inner::InnerCopyPvpF55* _msg = _internal_mutable_f55();
  // @@protoc_insertion_point(field_mutable:inner.InnerCopyPvp.f55)
  return _msg;
}

inline bool InnerCopyPvp::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void InnerCopyPvp::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline InnerCopyPvp::TypeCase InnerCopyPvp::type_case() const {
  return InnerCopyPvp::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InnerCopyPve

// -------------------------------------------------------------------

// InnerCopyType

// uint32 copyLvId = 1;
inline void InnerCopyType::clear_copylvid() {
  copylvid_ = 0u;
}
inline uint32_t InnerCopyType::_internal_copylvid() const {
  return copylvid_;
}
inline uint32_t InnerCopyType::copylvid() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyType.copyLvId)
  return _internal_copylvid();
}
inline void InnerCopyType::_internal_set_copylvid(uint32_t value) {
  
  copylvid_ = value;
}
inline void InnerCopyType::set_copylvid(uint32_t value) {
  _internal_set_copylvid(value);
  // @@protoc_insertion_point(field_set:inner.InnerCopyType.copyLvId)
}

// uint32 eProc = 2;
inline void InnerCopyType::clear_eproc() {
  eproc_ = 0u;
}
inline uint32_t InnerCopyType::_internal_eproc() const {
  return eproc_;
}
inline uint32_t InnerCopyType::eproc() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyType.eProc)
  return _internal_eproc();
}
inline void InnerCopyType::_internal_set_eproc(uint32_t value) {
  
  eproc_ = value;
}
inline void InnerCopyType::set_eproc(uint32_t value) {
  _internal_set_eproc(value);
  // @@protoc_insertion_point(field_set:inner.InnerCopyType.eProc)
}

// uint32 threeId = 3;
inline void InnerCopyType::clear_threeid() {
  threeid_ = 0u;
}
inline uint32_t InnerCopyType::_internal_threeid() const {
  return threeid_;
}
inline uint32_t InnerCopyType::threeid() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyType.threeId)
  return _internal_threeid();
}
inline void InnerCopyType::_internal_set_threeid(uint32_t value) {
  
  threeid_ = value;
}
inline void InnerCopyType::set_threeid(uint32_t value) {
  _internal_set_threeid(value);
  // @@protoc_insertion_point(field_set:inner.InnerCopyType.threeId)
}

// .inner.InnerCopyPvp pvp = 11;
inline bool InnerCopyType::_internal_has_pvp() const {
  return type_case() == kPvp;
}
inline bool InnerCopyType::has_pvp() const {
  return _internal_has_pvp();
}
inline void InnerCopyType::set_has_pvp() {
  _oneof_case_[0] = kPvp;
}
inline void InnerCopyType::clear_pvp() {
  if (_internal_has_pvp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.pvp_;
    }
    clear_has_type();
  }
}
inline ::inner::InnerCopyPvp* InnerCopyType::release_pvp() {
  // @@protoc_insertion_point(field_release:inner.InnerCopyType.pvp)
  if (_internal_has_pvp()) {
    clear_has_type();
    ::inner::InnerCopyPvp* temp = type_.pvp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.pvp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerCopyPvp& InnerCopyType::_internal_pvp() const {
  return _internal_has_pvp()
      ? *type_.pvp_
      : reinterpret_cast< ::inner::InnerCopyPvp&>(::inner::_InnerCopyPvp_default_instance_);
}
inline const ::inner::InnerCopyPvp& InnerCopyType::pvp() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyType.pvp)
  return _internal_pvp();
}
inline ::inner::InnerCopyPvp* InnerCopyType::unsafe_arena_release_pvp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerCopyType.pvp)
  if (_internal_has_pvp()) {
    clear_has_type();
    ::inner::InnerCopyPvp* temp = type_.pvp_;
    type_.pvp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerCopyType::unsafe_arena_set_allocated_pvp(::inner::InnerCopyPvp* pvp) {
  clear_type();
  if (pvp) {
    set_has_pvp();
    type_.pvp_ = pvp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerCopyType.pvp)
}
inline ::inner::InnerCopyPvp* InnerCopyType::_internal_mutable_pvp() {
  if (!_internal_has_pvp()) {
    clear_type();
    set_has_pvp();
    type_.pvp_ = CreateMaybeMessage< ::inner::InnerCopyPvp >(GetArenaForAllocation());
  }
  return type_.pvp_;
}
inline ::inner::InnerCopyPvp* InnerCopyType::mutable_pvp() {
  ::inner::InnerCopyPvp* _msg = _internal_mutable_pvp();
  // @@protoc_insertion_point(field_mutable:inner.InnerCopyType.pvp)
  return _msg;
}

// .inner.InnerCopyPve pve = 12;
inline bool InnerCopyType::_internal_has_pve() const {
  return type_case() == kPve;
}
inline bool InnerCopyType::has_pve() const {
  return _internal_has_pve();
}
inline void InnerCopyType::set_has_pve() {
  _oneof_case_[0] = kPve;
}
inline void InnerCopyType::clear_pve() {
  if (_internal_has_pve()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.pve_;
    }
    clear_has_type();
  }
}
inline ::inner::InnerCopyPve* InnerCopyType::release_pve() {
  // @@protoc_insertion_point(field_release:inner.InnerCopyType.pve)
  if (_internal_has_pve()) {
    clear_has_type();
    ::inner::InnerCopyPve* temp = type_.pve_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.pve_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerCopyPve& InnerCopyType::_internal_pve() const {
  return _internal_has_pve()
      ? *type_.pve_
      : reinterpret_cast< ::inner::InnerCopyPve&>(::inner::_InnerCopyPve_default_instance_);
}
inline const ::inner::InnerCopyPve& InnerCopyType::pve() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyType.pve)
  return _internal_pve();
}
inline ::inner::InnerCopyPve* InnerCopyType::unsafe_arena_release_pve() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerCopyType.pve)
  if (_internal_has_pve()) {
    clear_has_type();
    ::inner::InnerCopyPve* temp = type_.pve_;
    type_.pve_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerCopyType::unsafe_arena_set_allocated_pve(::inner::InnerCopyPve* pve) {
  clear_type();
  if (pve) {
    set_has_pve();
    type_.pve_ = pve;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerCopyType.pve)
}
inline ::inner::InnerCopyPve* InnerCopyType::_internal_mutable_pve() {
  if (!_internal_has_pve()) {
    clear_type();
    set_has_pve();
    type_.pve_ = CreateMaybeMessage< ::inner::InnerCopyPve >(GetArenaForAllocation());
  }
  return type_.pve_;
}
inline ::inner::InnerCopyPve* InnerCopyType::mutable_pve() {
  ::inner::InnerCopyPve* _msg = _internal_mutable_pve();
  // @@protoc_insertion_point(field_mutable:inner.InnerCopyType.pve)
  return _msg;
}

inline bool InnerCopyType::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void InnerCopyType::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline InnerCopyType::TypeCase InnerCopyType::type_case() const {
  return InnerCopyType::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InnerCopyCreateBy

// .inner.InnerCopyCrit crit = 1;
inline bool InnerCopyCreateBy::_internal_has_crit() const {
  return this != internal_default_instance() && crit_ != nullptr;
}
inline bool InnerCopyCreateBy::has_crit() const {
  return _internal_has_crit();
}
inline void InnerCopyCreateBy::clear_crit() {
  if (GetArenaForAllocation() == nullptr && crit_ != nullptr) {
    delete crit_;
  }
  crit_ = nullptr;
}
inline const ::inner::InnerCopyCrit& InnerCopyCreateBy::_internal_crit() const {
  const ::inner::InnerCopyCrit* p = crit_;
  return p != nullptr ? *p : reinterpret_cast<const ::inner::InnerCopyCrit&>(
      ::inner::_InnerCopyCrit_default_instance_);
}
inline const ::inner::InnerCopyCrit& InnerCopyCreateBy::crit() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyCreateBy.crit)
  return _internal_crit();
}
inline void InnerCopyCreateBy::unsafe_arena_set_allocated_crit(
    ::inner::InnerCopyCrit* crit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(crit_);
  }
  crit_ = crit;
  if (crit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerCopyCreateBy.crit)
}
inline ::inner::InnerCopyCrit* InnerCopyCreateBy::release_crit() {
  
  ::inner::InnerCopyCrit* temp = crit_;
  crit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::inner::InnerCopyCrit* InnerCopyCreateBy::unsafe_arena_release_crit() {
  // @@protoc_insertion_point(field_release:inner.InnerCopyCreateBy.crit)
  
  ::inner::InnerCopyCrit* temp = crit_;
  crit_ = nullptr;
  return temp;
}
inline ::inner::InnerCopyCrit* InnerCopyCreateBy::_internal_mutable_crit() {
  
  if (crit_ == nullptr) {
    auto* p = CreateMaybeMessage<::inner::InnerCopyCrit>(GetArenaForAllocation());
    crit_ = p;
  }
  return crit_;
}
inline ::inner::InnerCopyCrit* InnerCopyCreateBy::mutable_crit() {
  ::inner::InnerCopyCrit* _msg = _internal_mutable_crit();
  // @@protoc_insertion_point(field_mutable:inner.InnerCopyCreateBy.crit)
  return _msg;
}
inline void InnerCopyCreateBy::set_allocated_crit(::inner::InnerCopyCrit* crit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete crit_;
  }
  if (crit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(crit);
    if (message_arena != submessage_arena) {
      crit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crit, submessage_arena);
    }
    
  } else {
    
  }
  crit_ = crit;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerCopyCreateBy.crit)
}

// .inner.InnerCopyType copy = 2;
inline bool InnerCopyCreateBy::_internal_has_copy() const {
  return this != internal_default_instance() && copy_ != nullptr;
}
inline bool InnerCopyCreateBy::has_copy() const {
  return _internal_has_copy();
}
inline void InnerCopyCreateBy::clear_copy() {
  if (GetArenaForAllocation() == nullptr && copy_ != nullptr) {
    delete copy_;
  }
  copy_ = nullptr;
}
inline const ::inner::InnerCopyType& InnerCopyCreateBy::_internal_copy() const {
  const ::inner::InnerCopyType* p = copy_;
  return p != nullptr ? *p : reinterpret_cast<const ::inner::InnerCopyType&>(
      ::inner::_InnerCopyType_default_instance_);
}
inline const ::inner::InnerCopyType& InnerCopyCreateBy::copy() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyCreateBy.copy)
  return _internal_copy();
}
inline void InnerCopyCreateBy::unsafe_arena_set_allocated_copy(
    ::inner::InnerCopyType* copy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(copy_);
  }
  copy_ = copy;
  if (copy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerCopyCreateBy.copy)
}
inline ::inner::InnerCopyType* InnerCopyCreateBy::release_copy() {
  
  ::inner::InnerCopyType* temp = copy_;
  copy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::inner::InnerCopyType* InnerCopyCreateBy::unsafe_arena_release_copy() {
  // @@protoc_insertion_point(field_release:inner.InnerCopyCreateBy.copy)
  
  ::inner::InnerCopyType* temp = copy_;
  copy_ = nullptr;
  return temp;
}
inline ::inner::InnerCopyType* InnerCopyCreateBy::_internal_mutable_copy() {
  
  if (copy_ == nullptr) {
    auto* p = CreateMaybeMessage<::inner::InnerCopyType>(GetArenaForAllocation());
    copy_ = p;
  }
  return copy_;
}
inline ::inner::InnerCopyType* InnerCopyCreateBy::mutable_copy() {
  ::inner::InnerCopyType* _msg = _internal_mutable_copy();
  // @@protoc_insertion_point(field_mutable:inner.InnerCopyCreateBy.copy)
  return _msg;
}
inline void InnerCopyCreateBy::set_allocated_copy(::inner::InnerCopyType* copy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete copy_;
  }
  if (copy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(copy);
    if (message_arena != submessage_arena) {
      copy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, copy, submessage_arena);
    }
    
  } else {
    
  }
  copy_ = copy;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerCopyCreateBy.copy)
}

// .inner.InnerCopyWay way = 3;
inline bool InnerCopyCreateBy::_internal_has_way() const {
  return this != internal_default_instance() && way_ != nullptr;
}
inline bool InnerCopyCreateBy::has_way() const {
  return _internal_has_way();
}
inline void InnerCopyCreateBy::clear_way() {
  if (GetArenaForAllocation() == nullptr && way_ != nullptr) {
    delete way_;
  }
  way_ = nullptr;
}
inline const ::inner::InnerCopyWay& InnerCopyCreateBy::_internal_way() const {
  const ::inner::InnerCopyWay* p = way_;
  return p != nullptr ? *p : reinterpret_cast<const ::inner::InnerCopyWay&>(
      ::inner::_InnerCopyWay_default_instance_);
}
inline const ::inner::InnerCopyWay& InnerCopyCreateBy::way() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyCreateBy.way)
  return _internal_way();
}
inline void InnerCopyCreateBy::unsafe_arena_set_allocated_way(
    ::inner::InnerCopyWay* way) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(way_);
  }
  way_ = way;
  if (way) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerCopyCreateBy.way)
}
inline ::inner::InnerCopyWay* InnerCopyCreateBy::release_way() {
  
  ::inner::InnerCopyWay* temp = way_;
  way_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::inner::InnerCopyWay* InnerCopyCreateBy::unsafe_arena_release_way() {
  // @@protoc_insertion_point(field_release:inner.InnerCopyCreateBy.way)
  
  ::inner::InnerCopyWay* temp = way_;
  way_ = nullptr;
  return temp;
}
inline ::inner::InnerCopyWay* InnerCopyCreateBy::_internal_mutable_way() {
  
  if (way_ == nullptr) {
    auto* p = CreateMaybeMessage<::inner::InnerCopyWay>(GetArenaForAllocation());
    way_ = p;
  }
  return way_;
}
inline ::inner::InnerCopyWay* InnerCopyCreateBy::mutable_way() {
  ::inner::InnerCopyWay* _msg = _internal_mutable_way();
  // @@protoc_insertion_point(field_mutable:inner.InnerCopyCreateBy.way)
  return _msg;
}
inline void InnerCopyCreateBy::set_allocated_way(::inner::InnerCopyWay* way) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete way_;
  }
  if (way) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(way);
    if (message_arena != submessage_arena) {
      way = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, way, submessage_arena);
    }
    
  } else {
    
  }
  way_ = way;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerCopyCreateBy.way)
}

// -------------------------------------------------------------------

// InnerCopyCrit

// uint32 hashIdF = 1;
inline void InnerCopyCrit::clear_hashidf() {
  hashidf_ = 0u;
}
inline uint32_t InnerCopyCrit::_internal_hashidf() const {
  return hashidf_;
}
inline uint32_t InnerCopyCrit::hashidf() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyCrit.hashIdF)
  return _internal_hashidf();
}
inline void InnerCopyCrit::_internal_set_hashidf(uint32_t value) {
  
  hashidf_ = value;
}
inline void InnerCopyCrit::set_hashidf(uint32_t value) {
  _internal_set_hashidf(value);
  // @@protoc_insertion_point(field_set:inner.InnerCopyCrit.hashIdF)
}

// uint64 critId = 2;
inline void InnerCopyCrit::clear_critid() {
  critid_ = uint64_t{0u};
}
inline uint64_t InnerCopyCrit::_internal_critid() const {
  return critid_;
}
inline uint64_t InnerCopyCrit::critid() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyCrit.critId)
  return _internal_critid();
}
inline void InnerCopyCrit::_internal_set_critid(uint64_t value) {
  
  critid_ = value;
}
inline void InnerCopyCrit::set_critid(uint64_t value) {
  _internal_set_critid(value);
  // @@protoc_insertion_point(field_set:inner.InnerCopyCrit.critId)
}

// uint32 expire = 3;
inline void InnerCopyCrit::clear_expire() {
  expire_ = 0u;
}
inline uint32_t InnerCopyCrit::_internal_expire() const {
  return expire_;
}
inline uint32_t InnerCopyCrit::expire() const {
  // @@protoc_insertion_point(field_get:inner.InnerCopyCrit.expire)
  return _internal_expire();
}
inline void InnerCopyCrit::_internal_set_expire(uint32_t value) {
  
  expire_ = value;
}
inline void InnerCopyCrit::set_expire(uint32_t value) {
  _internal_set_expire(value);
  // @@protoc_insertion_point(field_set:inner.InnerCopyCrit.expire)
}

// -------------------------------------------------------------------

// InnerGameEvent

// .inner.InnerGameEventDestroy destroy = 1;
inline bool InnerGameEvent::_internal_has_destroy() const {
  return type_case() == kDestroy;
}
inline bool InnerGameEvent::has_destroy() const {
  return _internal_has_destroy();
}
inline void InnerGameEvent::set_has_destroy() {
  _oneof_case_[0] = kDestroy;
}
inline void InnerGameEvent::clear_destroy() {
  if (_internal_has_destroy()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.destroy_;
    }
    clear_has_type();
  }
}
inline ::inner::InnerGameEventDestroy* InnerGameEvent::release_destroy() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEvent.destroy)
  if (_internal_has_destroy()) {
    clear_has_type();
    ::inner::InnerGameEventDestroy* temp = type_.destroy_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.destroy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventDestroy& InnerGameEvent::_internal_destroy() const {
  return _internal_has_destroy()
      ? *type_.destroy_
      : reinterpret_cast< ::inner::InnerGameEventDestroy&>(::inner::_InnerGameEventDestroy_default_instance_);
}
inline const ::inner::InnerGameEventDestroy& InnerGameEvent::destroy() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEvent.destroy)
  return _internal_destroy();
}
inline ::inner::InnerGameEventDestroy* InnerGameEvent::unsafe_arena_release_destroy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEvent.destroy)
  if (_internal_has_destroy()) {
    clear_has_type();
    ::inner::InnerGameEventDestroy* temp = type_.destroy_;
    type_.destroy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEvent::unsafe_arena_set_allocated_destroy(::inner::InnerGameEventDestroy* destroy) {
  clear_type();
  if (destroy) {
    set_has_destroy();
    type_.destroy_ = destroy;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEvent.destroy)
}
inline ::inner::InnerGameEventDestroy* InnerGameEvent::_internal_mutable_destroy() {
  if (!_internal_has_destroy()) {
    clear_type();
    set_has_destroy();
    type_.destroy_ = CreateMaybeMessage< ::inner::InnerGameEventDestroy >(GetArenaForAllocation());
  }
  return type_.destroy_;
}
inline ::inner::InnerGameEventDestroy* InnerGameEvent::mutable_destroy() {
  ::inner::InnerGameEventDestroy* _msg = _internal_mutable_destroy();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEvent.destroy)
  return _msg;
}

// .inner.InnerGameEventLogin login = 2;
inline bool InnerGameEvent::_internal_has_login() const {
  return type_case() == kLogin;
}
inline bool InnerGameEvent::has_login() const {
  return _internal_has_login();
}
inline void InnerGameEvent::set_has_login() {
  _oneof_case_[0] = kLogin;
}
inline void InnerGameEvent::clear_login() {
  if (_internal_has_login()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.login_;
    }
    clear_has_type();
  }
}
inline ::inner::InnerGameEventLogin* InnerGameEvent::release_login() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEvent.login)
  if (_internal_has_login()) {
    clear_has_type();
    ::inner::InnerGameEventLogin* temp = type_.login_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.login_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventLogin& InnerGameEvent::_internal_login() const {
  return _internal_has_login()
      ? *type_.login_
      : reinterpret_cast< ::inner::InnerGameEventLogin&>(::inner::_InnerGameEventLogin_default_instance_);
}
inline const ::inner::InnerGameEventLogin& InnerGameEvent::login() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEvent.login)
  return _internal_login();
}
inline ::inner::InnerGameEventLogin* InnerGameEvent::unsafe_arena_release_login() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEvent.login)
  if (_internal_has_login()) {
    clear_has_type();
    ::inner::InnerGameEventLogin* temp = type_.login_;
    type_.login_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEvent::unsafe_arena_set_allocated_login(::inner::InnerGameEventLogin* login) {
  clear_type();
  if (login) {
    set_has_login();
    type_.login_ = login;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEvent.login)
}
inline ::inner::InnerGameEventLogin* InnerGameEvent::_internal_mutable_login() {
  if (!_internal_has_login()) {
    clear_type();
    set_has_login();
    type_.login_ = CreateMaybeMessage< ::inner::InnerGameEventLogin >(GetArenaForAllocation());
  }
  return type_.login_;
}
inline ::inner::InnerGameEventLogin* InnerGameEvent::mutable_login() {
  ::inner::InnerGameEventLogin* _msg = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEvent.login)
  return _msg;
}

// .inner.InnerGameEventLogout logout = 3;
inline bool InnerGameEvent::_internal_has_logout() const {
  return type_case() == kLogout;
}
inline bool InnerGameEvent::has_logout() const {
  return _internal_has_logout();
}
inline void InnerGameEvent::set_has_logout() {
  _oneof_case_[0] = kLogout;
}
inline void InnerGameEvent::clear_logout() {
  if (_internal_has_logout()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.logout_;
    }
    clear_has_type();
  }
}
inline ::inner::InnerGameEventLogout* InnerGameEvent::release_logout() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEvent.logout)
  if (_internal_has_logout()) {
    clear_has_type();
    ::inner::InnerGameEventLogout* temp = type_.logout_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.logout_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventLogout& InnerGameEvent::_internal_logout() const {
  return _internal_has_logout()
      ? *type_.logout_
      : reinterpret_cast< ::inner::InnerGameEventLogout&>(::inner::_InnerGameEventLogout_default_instance_);
}
inline const ::inner::InnerGameEventLogout& InnerGameEvent::logout() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEvent.logout)
  return _internal_logout();
}
inline ::inner::InnerGameEventLogout* InnerGameEvent::unsafe_arena_release_logout() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEvent.logout)
  if (_internal_has_logout()) {
    clear_has_type();
    ::inner::InnerGameEventLogout* temp = type_.logout_;
    type_.logout_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEvent::unsafe_arena_set_allocated_logout(::inner::InnerGameEventLogout* logout) {
  clear_type();
  if (logout) {
    set_has_logout();
    type_.logout_ = logout;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEvent.logout)
}
inline ::inner::InnerGameEventLogout* InnerGameEvent::_internal_mutable_logout() {
  if (!_internal_has_logout()) {
    clear_type();
    set_has_logout();
    type_.logout_ = CreateMaybeMessage< ::inner::InnerGameEventLogout >(GetArenaForAllocation());
  }
  return type_.logout_;
}
inline ::inner::InnerGameEventLogout* InnerGameEvent::mutable_logout() {
  ::inner::InnerGameEventLogout* _msg = _internal_mutable_logout();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEvent.logout)
  return _msg;
}

// .inner.InnerGameEventOnline online = 4;
inline bool InnerGameEvent::_internal_has_online() const {
  return type_case() == kOnline;
}
inline bool InnerGameEvent::has_online() const {
  return _internal_has_online();
}
inline void InnerGameEvent::set_has_online() {
  _oneof_case_[0] = kOnline;
}
inline void InnerGameEvent::clear_online() {
  if (_internal_has_online()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.online_;
    }
    clear_has_type();
  }
}
inline ::inner::InnerGameEventOnline* InnerGameEvent::release_online() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEvent.online)
  if (_internal_has_online()) {
    clear_has_type();
    ::inner::InnerGameEventOnline* temp = type_.online_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.online_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventOnline& InnerGameEvent::_internal_online() const {
  return _internal_has_online()
      ? *type_.online_
      : reinterpret_cast< ::inner::InnerGameEventOnline&>(::inner::_InnerGameEventOnline_default_instance_);
}
inline const ::inner::InnerGameEventOnline& InnerGameEvent::online() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEvent.online)
  return _internal_online();
}
inline ::inner::InnerGameEventOnline* InnerGameEvent::unsafe_arena_release_online() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEvent.online)
  if (_internal_has_online()) {
    clear_has_type();
    ::inner::InnerGameEventOnline* temp = type_.online_;
    type_.online_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEvent::unsafe_arena_set_allocated_online(::inner::InnerGameEventOnline* online) {
  clear_type();
  if (online) {
    set_has_online();
    type_.online_ = online;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEvent.online)
}
inline ::inner::InnerGameEventOnline* InnerGameEvent::_internal_mutable_online() {
  if (!_internal_has_online()) {
    clear_type();
    set_has_online();
    type_.online_ = CreateMaybeMessage< ::inner::InnerGameEventOnline >(GetArenaForAllocation());
  }
  return type_.online_;
}
inline ::inner::InnerGameEventOnline* InnerGameEvent::mutable_online() {
  ::inner::InnerGameEventOnline* _msg = _internal_mutable_online();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEvent.online)
  return _msg;
}

// .inner.InnerGameEventOffline offline = 5;
inline bool InnerGameEvent::_internal_has_offline() const {
  return type_case() == kOffline;
}
inline bool InnerGameEvent::has_offline() const {
  return _internal_has_offline();
}
inline void InnerGameEvent::set_has_offline() {
  _oneof_case_[0] = kOffline;
}
inline void InnerGameEvent::clear_offline() {
  if (_internal_has_offline()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.offline_;
    }
    clear_has_type();
  }
}
inline ::inner::InnerGameEventOffline* InnerGameEvent::release_offline() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEvent.offline)
  if (_internal_has_offline()) {
    clear_has_type();
    ::inner::InnerGameEventOffline* temp = type_.offline_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.offline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventOffline& InnerGameEvent::_internal_offline() const {
  return _internal_has_offline()
      ? *type_.offline_
      : reinterpret_cast< ::inner::InnerGameEventOffline&>(::inner::_InnerGameEventOffline_default_instance_);
}
inline const ::inner::InnerGameEventOffline& InnerGameEvent::offline() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEvent.offline)
  return _internal_offline();
}
inline ::inner::InnerGameEventOffline* InnerGameEvent::unsafe_arena_release_offline() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEvent.offline)
  if (_internal_has_offline()) {
    clear_has_type();
    ::inner::InnerGameEventOffline* temp = type_.offline_;
    type_.offline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEvent::unsafe_arena_set_allocated_offline(::inner::InnerGameEventOffline* offline) {
  clear_type();
  if (offline) {
    set_has_offline();
    type_.offline_ = offline;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEvent.offline)
}
inline ::inner::InnerGameEventOffline* InnerGameEvent::_internal_mutable_offline() {
  if (!_internal_has_offline()) {
    clear_type();
    set_has_offline();
    type_.offline_ = CreateMaybeMessage< ::inner::InnerGameEventOffline >(GetArenaForAllocation());
  }
  return type_.offline_;
}
inline ::inner::InnerGameEventOffline* InnerGameEvent::mutable_offline() {
  ::inner::InnerGameEventOffline* _msg = _internal_mutable_offline();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEvent.offline)
  return _msg;
}

// .inner.InnerGameEventChangeMap changemap = 6;
inline bool InnerGameEvent::_internal_has_changemap() const {
  return type_case() == kChangemap;
}
inline bool InnerGameEvent::has_changemap() const {
  return _internal_has_changemap();
}
inline void InnerGameEvent::set_has_changemap() {
  _oneof_case_[0] = kChangemap;
}
inline void InnerGameEvent::clear_changemap() {
  if (_internal_has_changemap()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.changemap_;
    }
    clear_has_type();
  }
}
inline ::inner::InnerGameEventChangeMap* InnerGameEvent::release_changemap() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEvent.changemap)
  if (_internal_has_changemap()) {
    clear_has_type();
    ::inner::InnerGameEventChangeMap* temp = type_.changemap_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.changemap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventChangeMap& InnerGameEvent::_internal_changemap() const {
  return _internal_has_changemap()
      ? *type_.changemap_
      : reinterpret_cast< ::inner::InnerGameEventChangeMap&>(::inner::_InnerGameEventChangeMap_default_instance_);
}
inline const ::inner::InnerGameEventChangeMap& InnerGameEvent::changemap() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEvent.changemap)
  return _internal_changemap();
}
inline ::inner::InnerGameEventChangeMap* InnerGameEvent::unsafe_arena_release_changemap() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEvent.changemap)
  if (_internal_has_changemap()) {
    clear_has_type();
    ::inner::InnerGameEventChangeMap* temp = type_.changemap_;
    type_.changemap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEvent::unsafe_arena_set_allocated_changemap(::inner::InnerGameEventChangeMap* changemap) {
  clear_type();
  if (changemap) {
    set_has_changemap();
    type_.changemap_ = changemap;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEvent.changemap)
}
inline ::inner::InnerGameEventChangeMap* InnerGameEvent::_internal_mutable_changemap() {
  if (!_internal_has_changemap()) {
    clear_type();
    set_has_changemap();
    type_.changemap_ = CreateMaybeMessage< ::inner::InnerGameEventChangeMap >(GetArenaForAllocation());
  }
  return type_.changemap_;
}
inline ::inner::InnerGameEventChangeMap* InnerGameEvent::mutable_changemap() {
  ::inner::InnerGameEventChangeMap* _msg = _internal_mutable_changemap();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEvent.changemap)
  return _msg;
}

// .inner.InnerGameEventDeath death = 7;
inline bool InnerGameEvent::_internal_has_death() const {
  return type_case() == kDeath;
}
inline bool InnerGameEvent::has_death() const {
  return _internal_has_death();
}
inline void InnerGameEvent::set_has_death() {
  _oneof_case_[0] = kDeath;
}
inline void InnerGameEvent::clear_death() {
  if (_internal_has_death()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.death_;
    }
    clear_has_type();
  }
}
inline ::inner::InnerGameEventDeath* InnerGameEvent::release_death() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEvent.death)
  if (_internal_has_death()) {
    clear_has_type();
    ::inner::InnerGameEventDeath* temp = type_.death_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.death_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventDeath& InnerGameEvent::_internal_death() const {
  return _internal_has_death()
      ? *type_.death_
      : reinterpret_cast< ::inner::InnerGameEventDeath&>(::inner::_InnerGameEventDeath_default_instance_);
}
inline const ::inner::InnerGameEventDeath& InnerGameEvent::death() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEvent.death)
  return _internal_death();
}
inline ::inner::InnerGameEventDeath* InnerGameEvent::unsafe_arena_release_death() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEvent.death)
  if (_internal_has_death()) {
    clear_has_type();
    ::inner::InnerGameEventDeath* temp = type_.death_;
    type_.death_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEvent::unsafe_arena_set_allocated_death(::inner::InnerGameEventDeath* death) {
  clear_type();
  if (death) {
    set_has_death();
    type_.death_ = death;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEvent.death)
}
inline ::inner::InnerGameEventDeath* InnerGameEvent::_internal_mutable_death() {
  if (!_internal_has_death()) {
    clear_type();
    set_has_death();
    type_.death_ = CreateMaybeMessage< ::inner::InnerGameEventDeath >(GetArenaForAllocation());
  }
  return type_.death_;
}
inline ::inner::InnerGameEventDeath* InnerGameEvent::mutable_death() {
  ::inner::InnerGameEventDeath* _msg = _internal_mutable_death();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEvent.death)
  return _msg;
}

// .inner.InnerGameEventRebirth rebirth = 8;
inline bool InnerGameEvent::_internal_has_rebirth() const {
  return type_case() == kRebirth;
}
inline bool InnerGameEvent::has_rebirth() const {
  return _internal_has_rebirth();
}
inline void InnerGameEvent::set_has_rebirth() {
  _oneof_case_[0] = kRebirth;
}
inline void InnerGameEvent::clear_rebirth() {
  if (_internal_has_rebirth()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.rebirth_;
    }
    clear_has_type();
  }
}
inline ::inner::InnerGameEventRebirth* InnerGameEvent::release_rebirth() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEvent.rebirth)
  if (_internal_has_rebirth()) {
    clear_has_type();
    ::inner::InnerGameEventRebirth* temp = type_.rebirth_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.rebirth_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventRebirth& InnerGameEvent::_internal_rebirth() const {
  return _internal_has_rebirth()
      ? *type_.rebirth_
      : reinterpret_cast< ::inner::InnerGameEventRebirth&>(::inner::_InnerGameEventRebirth_default_instance_);
}
inline const ::inner::InnerGameEventRebirth& InnerGameEvent::rebirth() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEvent.rebirth)
  return _internal_rebirth();
}
inline ::inner::InnerGameEventRebirth* InnerGameEvent::unsafe_arena_release_rebirth() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEvent.rebirth)
  if (_internal_has_rebirth()) {
    clear_has_type();
    ::inner::InnerGameEventRebirth* temp = type_.rebirth_;
    type_.rebirth_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEvent::unsafe_arena_set_allocated_rebirth(::inner::InnerGameEventRebirth* rebirth) {
  clear_type();
  if (rebirth) {
    set_has_rebirth();
    type_.rebirth_ = rebirth;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEvent.rebirth)
}
inline ::inner::InnerGameEventRebirth* InnerGameEvent::_internal_mutable_rebirth() {
  if (!_internal_has_rebirth()) {
    clear_type();
    set_has_rebirth();
    type_.rebirth_ = CreateMaybeMessage< ::inner::InnerGameEventRebirth >(GetArenaForAllocation());
  }
  return type_.rebirth_;
}
inline ::inner::InnerGameEventRebirth* InnerGameEvent::mutable_rebirth() {
  ::inner::InnerGameEventRebirth* _msg = _internal_mutable_rebirth();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEvent.rebirth)
  return _msg;
}

// .inner.InnerGameEventWakeup wakeup = 9;
inline bool InnerGameEvent::_internal_has_wakeup() const {
  return type_case() == kWakeup;
}
inline bool InnerGameEvent::has_wakeup() const {
  return _internal_has_wakeup();
}
inline void InnerGameEvent::set_has_wakeup() {
  _oneof_case_[0] = kWakeup;
}
inline void InnerGameEvent::clear_wakeup() {
  if (_internal_has_wakeup()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.wakeup_;
    }
    clear_has_type();
  }
}
inline ::inner::InnerGameEventWakeup* InnerGameEvent::release_wakeup() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEvent.wakeup)
  if (_internal_has_wakeup()) {
    clear_has_type();
    ::inner::InnerGameEventWakeup* temp = type_.wakeup_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.wakeup_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventWakeup& InnerGameEvent::_internal_wakeup() const {
  return _internal_has_wakeup()
      ? *type_.wakeup_
      : reinterpret_cast< ::inner::InnerGameEventWakeup&>(::inner::_InnerGameEventWakeup_default_instance_);
}
inline const ::inner::InnerGameEventWakeup& InnerGameEvent::wakeup() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEvent.wakeup)
  return _internal_wakeup();
}
inline ::inner::InnerGameEventWakeup* InnerGameEvent::unsafe_arena_release_wakeup() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEvent.wakeup)
  if (_internal_has_wakeup()) {
    clear_has_type();
    ::inner::InnerGameEventWakeup* temp = type_.wakeup_;
    type_.wakeup_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEvent::unsafe_arena_set_allocated_wakeup(::inner::InnerGameEventWakeup* wakeup) {
  clear_type();
  if (wakeup) {
    set_has_wakeup();
    type_.wakeup_ = wakeup;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEvent.wakeup)
}
inline ::inner::InnerGameEventWakeup* InnerGameEvent::_internal_mutable_wakeup() {
  if (!_internal_has_wakeup()) {
    clear_type();
    set_has_wakeup();
    type_.wakeup_ = CreateMaybeMessage< ::inner::InnerGameEventWakeup >(GetArenaForAllocation());
  }
  return type_.wakeup_;
}
inline ::inner::InnerGameEventWakeup* InnerGameEvent::mutable_wakeup() {
  ::inner::InnerGameEventWakeup* _msg = _internal_mutable_wakeup();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEvent.wakeup)
  return _msg;
}

inline bool InnerGameEvent::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void InnerGameEvent::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline InnerGameEvent::TypeCase InnerGameEvent::type_case() const {
  return InnerGameEvent::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InnerGameEventDestroy

// .inner.InnerGameEventDestroyTeamsvr teamsvr = 1;
inline bool InnerGameEventDestroy::_internal_has_teamsvr() const {
  return server_case() == kTeamsvr;
}
inline bool InnerGameEventDestroy::has_teamsvr() const {
  return _internal_has_teamsvr();
}
inline void InnerGameEventDestroy::set_has_teamsvr() {
  _oneof_case_[0] = kTeamsvr;
}
inline void InnerGameEventDestroy::clear_teamsvr() {
  if (_internal_has_teamsvr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete server_.teamsvr_;
    }
    clear_has_server();
  }
}
inline ::inner::InnerGameEventDestroyTeamsvr* InnerGameEventDestroy::release_teamsvr() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventDestroy.teamsvr)
  if (_internal_has_teamsvr()) {
    clear_has_server();
    ::inner::InnerGameEventDestroyTeamsvr* temp = server_.teamsvr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    server_.teamsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventDestroyTeamsvr& InnerGameEventDestroy::_internal_teamsvr() const {
  return _internal_has_teamsvr()
      ? *server_.teamsvr_
      : reinterpret_cast< ::inner::InnerGameEventDestroyTeamsvr&>(::inner::_InnerGameEventDestroyTeamsvr_default_instance_);
}
inline const ::inner::InnerGameEventDestroyTeamsvr& InnerGameEventDestroy::teamsvr() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventDestroy.teamsvr)
  return _internal_teamsvr();
}
inline ::inner::InnerGameEventDestroyTeamsvr* InnerGameEventDestroy::unsafe_arena_release_teamsvr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEventDestroy.teamsvr)
  if (_internal_has_teamsvr()) {
    clear_has_server();
    ::inner::InnerGameEventDestroyTeamsvr* temp = server_.teamsvr_;
    server_.teamsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEventDestroy::unsafe_arena_set_allocated_teamsvr(::inner::InnerGameEventDestroyTeamsvr* teamsvr) {
  clear_server();
  if (teamsvr) {
    set_has_teamsvr();
    server_.teamsvr_ = teamsvr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventDestroy.teamsvr)
}
inline ::inner::InnerGameEventDestroyTeamsvr* InnerGameEventDestroy::_internal_mutable_teamsvr() {
  if (!_internal_has_teamsvr()) {
    clear_server();
    set_has_teamsvr();
    server_.teamsvr_ = CreateMaybeMessage< ::inner::InnerGameEventDestroyTeamsvr >(GetArenaForAllocation());
  }
  return server_.teamsvr_;
}
inline ::inner::InnerGameEventDestroyTeamsvr* InnerGameEventDestroy::mutable_teamsvr() {
  ::inner::InnerGameEventDestroyTeamsvr* _msg = _internal_mutable_teamsvr();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventDestroy.teamsvr)
  return _msg;
}

// .inner.InnerGameEventDestryFriendsvr friendsvr = 2;
inline bool InnerGameEventDestroy::_internal_has_friendsvr() const {
  return server_case() == kFriendsvr;
}
inline bool InnerGameEventDestroy::has_friendsvr() const {
  return _internal_has_friendsvr();
}
inline void InnerGameEventDestroy::set_has_friendsvr() {
  _oneof_case_[0] = kFriendsvr;
}
inline void InnerGameEventDestroy::clear_friendsvr() {
  if (_internal_has_friendsvr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete server_.friendsvr_;
    }
    clear_has_server();
  }
}
inline ::inner::InnerGameEventDestryFriendsvr* InnerGameEventDestroy::release_friendsvr() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventDestroy.friendsvr)
  if (_internal_has_friendsvr()) {
    clear_has_server();
    ::inner::InnerGameEventDestryFriendsvr* temp = server_.friendsvr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    server_.friendsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventDestryFriendsvr& InnerGameEventDestroy::_internal_friendsvr() const {
  return _internal_has_friendsvr()
      ? *server_.friendsvr_
      : reinterpret_cast< ::inner::InnerGameEventDestryFriendsvr&>(::inner::_InnerGameEventDestryFriendsvr_default_instance_);
}
inline const ::inner::InnerGameEventDestryFriendsvr& InnerGameEventDestroy::friendsvr() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventDestroy.friendsvr)
  return _internal_friendsvr();
}
inline ::inner::InnerGameEventDestryFriendsvr* InnerGameEventDestroy::unsafe_arena_release_friendsvr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEventDestroy.friendsvr)
  if (_internal_has_friendsvr()) {
    clear_has_server();
    ::inner::InnerGameEventDestryFriendsvr* temp = server_.friendsvr_;
    server_.friendsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEventDestroy::unsafe_arena_set_allocated_friendsvr(::inner::InnerGameEventDestryFriendsvr* friendsvr) {
  clear_server();
  if (friendsvr) {
    set_has_friendsvr();
    server_.friendsvr_ = friendsvr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventDestroy.friendsvr)
}
inline ::inner::InnerGameEventDestryFriendsvr* InnerGameEventDestroy::_internal_mutable_friendsvr() {
  if (!_internal_has_friendsvr()) {
    clear_server();
    set_has_friendsvr();
    server_.friendsvr_ = CreateMaybeMessage< ::inner::InnerGameEventDestryFriendsvr >(GetArenaForAllocation());
  }
  return server_.friendsvr_;
}
inline ::inner::InnerGameEventDestryFriendsvr* InnerGameEventDestroy::mutable_friendsvr() {
  ::inner::InnerGameEventDestryFriendsvr* _msg = _internal_mutable_friendsvr();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventDestroy.friendsvr)
  return _msg;
}

// .inner.InnerGameEventDestroyFamilysvr familysvr = 3;
inline bool InnerGameEventDestroy::_internal_has_familysvr() const {
  return server_case() == kFamilysvr;
}
inline bool InnerGameEventDestroy::has_familysvr() const {
  return _internal_has_familysvr();
}
inline void InnerGameEventDestroy::set_has_familysvr() {
  _oneof_case_[0] = kFamilysvr;
}
inline void InnerGameEventDestroy::clear_familysvr() {
  if (_internal_has_familysvr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete server_.familysvr_;
    }
    clear_has_server();
  }
}
inline ::inner::InnerGameEventDestroyFamilysvr* InnerGameEventDestroy::release_familysvr() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventDestroy.familysvr)
  if (_internal_has_familysvr()) {
    clear_has_server();
    ::inner::InnerGameEventDestroyFamilysvr* temp = server_.familysvr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    server_.familysvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventDestroyFamilysvr& InnerGameEventDestroy::_internal_familysvr() const {
  return _internal_has_familysvr()
      ? *server_.familysvr_
      : reinterpret_cast< ::inner::InnerGameEventDestroyFamilysvr&>(::inner::_InnerGameEventDestroyFamilysvr_default_instance_);
}
inline const ::inner::InnerGameEventDestroyFamilysvr& InnerGameEventDestroy::familysvr() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventDestroy.familysvr)
  return _internal_familysvr();
}
inline ::inner::InnerGameEventDestroyFamilysvr* InnerGameEventDestroy::unsafe_arena_release_familysvr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEventDestroy.familysvr)
  if (_internal_has_familysvr()) {
    clear_has_server();
    ::inner::InnerGameEventDestroyFamilysvr* temp = server_.familysvr_;
    server_.familysvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEventDestroy::unsafe_arena_set_allocated_familysvr(::inner::InnerGameEventDestroyFamilysvr* familysvr) {
  clear_server();
  if (familysvr) {
    set_has_familysvr();
    server_.familysvr_ = familysvr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventDestroy.familysvr)
}
inline ::inner::InnerGameEventDestroyFamilysvr* InnerGameEventDestroy::_internal_mutable_familysvr() {
  if (!_internal_has_familysvr()) {
    clear_server();
    set_has_familysvr();
    server_.familysvr_ = CreateMaybeMessage< ::inner::InnerGameEventDestroyFamilysvr >(GetArenaForAllocation());
  }
  return server_.familysvr_;
}
inline ::inner::InnerGameEventDestroyFamilysvr* InnerGameEventDestroy::mutable_familysvr() {
  ::inner::InnerGameEventDestroyFamilysvr* _msg = _internal_mutable_familysvr();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventDestroy.familysvr)
  return _msg;
}

// .inner.InnerGameEventDestroyRanksvr ranksvr = 4;
inline bool InnerGameEventDestroy::_internal_has_ranksvr() const {
  return server_case() == kRanksvr;
}
inline bool InnerGameEventDestroy::has_ranksvr() const {
  return _internal_has_ranksvr();
}
inline void InnerGameEventDestroy::set_has_ranksvr() {
  _oneof_case_[0] = kRanksvr;
}
inline void InnerGameEventDestroy::clear_ranksvr() {
  if (_internal_has_ranksvr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete server_.ranksvr_;
    }
    clear_has_server();
  }
}
inline ::inner::InnerGameEventDestroyRanksvr* InnerGameEventDestroy::release_ranksvr() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventDestroy.ranksvr)
  if (_internal_has_ranksvr()) {
    clear_has_server();
    ::inner::InnerGameEventDestroyRanksvr* temp = server_.ranksvr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    server_.ranksvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventDestroyRanksvr& InnerGameEventDestroy::_internal_ranksvr() const {
  return _internal_has_ranksvr()
      ? *server_.ranksvr_
      : reinterpret_cast< ::inner::InnerGameEventDestroyRanksvr&>(::inner::_InnerGameEventDestroyRanksvr_default_instance_);
}
inline const ::inner::InnerGameEventDestroyRanksvr& InnerGameEventDestroy::ranksvr() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventDestroy.ranksvr)
  return _internal_ranksvr();
}
inline ::inner::InnerGameEventDestroyRanksvr* InnerGameEventDestroy::unsafe_arena_release_ranksvr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEventDestroy.ranksvr)
  if (_internal_has_ranksvr()) {
    clear_has_server();
    ::inner::InnerGameEventDestroyRanksvr* temp = server_.ranksvr_;
    server_.ranksvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEventDestroy::unsafe_arena_set_allocated_ranksvr(::inner::InnerGameEventDestroyRanksvr* ranksvr) {
  clear_server();
  if (ranksvr) {
    set_has_ranksvr();
    server_.ranksvr_ = ranksvr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventDestroy.ranksvr)
}
inline ::inner::InnerGameEventDestroyRanksvr* InnerGameEventDestroy::_internal_mutable_ranksvr() {
  if (!_internal_has_ranksvr()) {
    clear_server();
    set_has_ranksvr();
    server_.ranksvr_ = CreateMaybeMessage< ::inner::InnerGameEventDestroyRanksvr >(GetArenaForAllocation());
  }
  return server_.ranksvr_;
}
inline ::inner::InnerGameEventDestroyRanksvr* InnerGameEventDestroy::mutable_ranksvr() {
  ::inner::InnerGameEventDestroyRanksvr* _msg = _internal_mutable_ranksvr();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventDestroy.ranksvr)
  return _msg;
}

inline bool InnerGameEventDestroy::has_server() const {
  return server_case() != SERVER_NOT_SET;
}
inline void InnerGameEventDestroy::clear_has_server() {
  _oneof_case_[0] = SERVER_NOT_SET;
}
inline InnerGameEventDestroy::ServerCase InnerGameEventDestroy::server_case() const {
  return InnerGameEventDestroy::ServerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InnerGameEventDestroyTeamsvr

// -------------------------------------------------------------------

// InnerGameEventDestryFriendsvr

// -------------------------------------------------------------------

// InnerGameEventDestroyFamilysvr

// -------------------------------------------------------------------

// InnerGameEventDestroyRanksvr

// -------------------------------------------------------------------

// InnerGameEventLogin

// .inner.InnerGameEventLoginTeamsvr teamsvr = 1;
inline bool InnerGameEventLogin::_internal_has_teamsvr() const {
  return server_case() == kTeamsvr;
}
inline bool InnerGameEventLogin::has_teamsvr() const {
  return _internal_has_teamsvr();
}
inline void InnerGameEventLogin::set_has_teamsvr() {
  _oneof_case_[0] = kTeamsvr;
}
inline void InnerGameEventLogin::clear_teamsvr() {
  if (_internal_has_teamsvr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete server_.teamsvr_;
    }
    clear_has_server();
  }
}
inline ::inner::InnerGameEventLoginTeamsvr* InnerGameEventLogin::release_teamsvr() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventLogin.teamsvr)
  if (_internal_has_teamsvr()) {
    clear_has_server();
    ::inner::InnerGameEventLoginTeamsvr* temp = server_.teamsvr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    server_.teamsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventLoginTeamsvr& InnerGameEventLogin::_internal_teamsvr() const {
  return _internal_has_teamsvr()
      ? *server_.teamsvr_
      : reinterpret_cast< ::inner::InnerGameEventLoginTeamsvr&>(::inner::_InnerGameEventLoginTeamsvr_default_instance_);
}
inline const ::inner::InnerGameEventLoginTeamsvr& InnerGameEventLogin::teamsvr() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventLogin.teamsvr)
  return _internal_teamsvr();
}
inline ::inner::InnerGameEventLoginTeamsvr* InnerGameEventLogin::unsafe_arena_release_teamsvr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEventLogin.teamsvr)
  if (_internal_has_teamsvr()) {
    clear_has_server();
    ::inner::InnerGameEventLoginTeamsvr* temp = server_.teamsvr_;
    server_.teamsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEventLogin::unsafe_arena_set_allocated_teamsvr(::inner::InnerGameEventLoginTeamsvr* teamsvr) {
  clear_server();
  if (teamsvr) {
    set_has_teamsvr();
    server_.teamsvr_ = teamsvr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventLogin.teamsvr)
}
inline ::inner::InnerGameEventLoginTeamsvr* InnerGameEventLogin::_internal_mutable_teamsvr() {
  if (!_internal_has_teamsvr()) {
    clear_server();
    set_has_teamsvr();
    server_.teamsvr_ = CreateMaybeMessage< ::inner::InnerGameEventLoginTeamsvr >(GetArenaForAllocation());
  }
  return server_.teamsvr_;
}
inline ::inner::InnerGameEventLoginTeamsvr* InnerGameEventLogin::mutable_teamsvr() {
  ::inner::InnerGameEventLoginTeamsvr* _msg = _internal_mutable_teamsvr();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventLogin.teamsvr)
  return _msg;
}

// .inner.InnerGameEventLoginFriendsvr friendsvr = 2;
inline bool InnerGameEventLogin::_internal_has_friendsvr() const {
  return server_case() == kFriendsvr;
}
inline bool InnerGameEventLogin::has_friendsvr() const {
  return _internal_has_friendsvr();
}
inline void InnerGameEventLogin::set_has_friendsvr() {
  _oneof_case_[0] = kFriendsvr;
}
inline void InnerGameEventLogin::clear_friendsvr() {
  if (_internal_has_friendsvr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete server_.friendsvr_;
    }
    clear_has_server();
  }
}
inline ::inner::InnerGameEventLoginFriendsvr* InnerGameEventLogin::release_friendsvr() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventLogin.friendsvr)
  if (_internal_has_friendsvr()) {
    clear_has_server();
    ::inner::InnerGameEventLoginFriendsvr* temp = server_.friendsvr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    server_.friendsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventLoginFriendsvr& InnerGameEventLogin::_internal_friendsvr() const {
  return _internal_has_friendsvr()
      ? *server_.friendsvr_
      : reinterpret_cast< ::inner::InnerGameEventLoginFriendsvr&>(::inner::_InnerGameEventLoginFriendsvr_default_instance_);
}
inline const ::inner::InnerGameEventLoginFriendsvr& InnerGameEventLogin::friendsvr() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventLogin.friendsvr)
  return _internal_friendsvr();
}
inline ::inner::InnerGameEventLoginFriendsvr* InnerGameEventLogin::unsafe_arena_release_friendsvr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEventLogin.friendsvr)
  if (_internal_has_friendsvr()) {
    clear_has_server();
    ::inner::InnerGameEventLoginFriendsvr* temp = server_.friendsvr_;
    server_.friendsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEventLogin::unsafe_arena_set_allocated_friendsvr(::inner::InnerGameEventLoginFriendsvr* friendsvr) {
  clear_server();
  if (friendsvr) {
    set_has_friendsvr();
    server_.friendsvr_ = friendsvr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventLogin.friendsvr)
}
inline ::inner::InnerGameEventLoginFriendsvr* InnerGameEventLogin::_internal_mutable_friendsvr() {
  if (!_internal_has_friendsvr()) {
    clear_server();
    set_has_friendsvr();
    server_.friendsvr_ = CreateMaybeMessage< ::inner::InnerGameEventLoginFriendsvr >(GetArenaForAllocation());
  }
  return server_.friendsvr_;
}
inline ::inner::InnerGameEventLoginFriendsvr* InnerGameEventLogin::mutable_friendsvr() {
  ::inner::InnerGameEventLoginFriendsvr* _msg = _internal_mutable_friendsvr();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventLogin.friendsvr)
  return _msg;
}

// .inner.InnerGameEventLoginFamilysvr familysvr = 3;
inline bool InnerGameEventLogin::_internal_has_familysvr() const {
  return server_case() == kFamilysvr;
}
inline bool InnerGameEventLogin::has_familysvr() const {
  return _internal_has_familysvr();
}
inline void InnerGameEventLogin::set_has_familysvr() {
  _oneof_case_[0] = kFamilysvr;
}
inline void InnerGameEventLogin::clear_familysvr() {
  if (_internal_has_familysvr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete server_.familysvr_;
    }
    clear_has_server();
  }
}
inline ::inner::InnerGameEventLoginFamilysvr* InnerGameEventLogin::release_familysvr() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventLogin.familysvr)
  if (_internal_has_familysvr()) {
    clear_has_server();
    ::inner::InnerGameEventLoginFamilysvr* temp = server_.familysvr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    server_.familysvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventLoginFamilysvr& InnerGameEventLogin::_internal_familysvr() const {
  return _internal_has_familysvr()
      ? *server_.familysvr_
      : reinterpret_cast< ::inner::InnerGameEventLoginFamilysvr&>(::inner::_InnerGameEventLoginFamilysvr_default_instance_);
}
inline const ::inner::InnerGameEventLoginFamilysvr& InnerGameEventLogin::familysvr() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventLogin.familysvr)
  return _internal_familysvr();
}
inline ::inner::InnerGameEventLoginFamilysvr* InnerGameEventLogin::unsafe_arena_release_familysvr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEventLogin.familysvr)
  if (_internal_has_familysvr()) {
    clear_has_server();
    ::inner::InnerGameEventLoginFamilysvr* temp = server_.familysvr_;
    server_.familysvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEventLogin::unsafe_arena_set_allocated_familysvr(::inner::InnerGameEventLoginFamilysvr* familysvr) {
  clear_server();
  if (familysvr) {
    set_has_familysvr();
    server_.familysvr_ = familysvr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventLogin.familysvr)
}
inline ::inner::InnerGameEventLoginFamilysvr* InnerGameEventLogin::_internal_mutable_familysvr() {
  if (!_internal_has_familysvr()) {
    clear_server();
    set_has_familysvr();
    server_.familysvr_ = CreateMaybeMessage< ::inner::InnerGameEventLoginFamilysvr >(GetArenaForAllocation());
  }
  return server_.familysvr_;
}
inline ::inner::InnerGameEventLoginFamilysvr* InnerGameEventLogin::mutable_familysvr() {
  ::inner::InnerGameEventLoginFamilysvr* _msg = _internal_mutable_familysvr();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventLogin.familysvr)
  return _msg;
}

inline bool InnerGameEventLogin::has_server() const {
  return server_case() != SERVER_NOT_SET;
}
inline void InnerGameEventLogin::clear_has_server() {
  _oneof_case_[0] = SERVER_NOT_SET;
}
inline InnerGameEventLogin::ServerCase InnerGameEventLogin::server_case() const {
  return InnerGameEventLogin::ServerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InnerGameEventLoginTeamsvr

// .common.RoleBrief brief = 1;
inline bool InnerGameEventLoginTeamsvr::_internal_has_brief() const {
  return this != internal_default_instance() && brief_ != nullptr;
}
inline bool InnerGameEventLoginTeamsvr::has_brief() const {
  return _internal_has_brief();
}
inline const ::common::RoleBrief& InnerGameEventLoginTeamsvr::_internal_brief() const {
  const ::common::RoleBrief* p = brief_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleBrief&>(
      ::common::_RoleBrief_default_instance_);
}
inline const ::common::RoleBrief& InnerGameEventLoginTeamsvr::brief() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventLoginTeamsvr.brief)
  return _internal_brief();
}
inline void InnerGameEventLoginTeamsvr::unsafe_arena_set_allocated_brief(
    ::common::RoleBrief* brief) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brief_);
  }
  brief_ = brief;
  if (brief) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventLoginTeamsvr.brief)
}
inline ::common::RoleBrief* InnerGameEventLoginTeamsvr::release_brief() {
  
  ::common::RoleBrief* temp = brief_;
  brief_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleBrief* InnerGameEventLoginTeamsvr::unsafe_arena_release_brief() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventLoginTeamsvr.brief)
  
  ::common::RoleBrief* temp = brief_;
  brief_ = nullptr;
  return temp;
}
inline ::common::RoleBrief* InnerGameEventLoginTeamsvr::_internal_mutable_brief() {
  
  if (brief_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleBrief>(GetArenaForAllocation());
    brief_ = p;
  }
  return brief_;
}
inline ::common::RoleBrief* InnerGameEventLoginTeamsvr::mutable_brief() {
  ::common::RoleBrief* _msg = _internal_mutable_brief();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventLoginTeamsvr.brief)
  return _msg;
}
inline void InnerGameEventLoginTeamsvr::set_allocated_brief(::common::RoleBrief* brief) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(brief_);
  }
  if (brief) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brief));
    if (message_arena != submessage_arena) {
      brief = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brief, submessage_arena);
    }
    
  } else {
    
  }
  brief_ = brief;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventLoginTeamsvr.brief)
}

// .common.RoleExtend1 extd1 = 2;
inline bool InnerGameEventLoginTeamsvr::_internal_has_extd1() const {
  return this != internal_default_instance() && extd1_ != nullptr;
}
inline bool InnerGameEventLoginTeamsvr::has_extd1() const {
  return _internal_has_extd1();
}
inline const ::common::RoleExtend1& InnerGameEventLoginTeamsvr::_internal_extd1() const {
  const ::common::RoleExtend1* p = extd1_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleExtend1&>(
      ::common::_RoleExtend1_default_instance_);
}
inline const ::common::RoleExtend1& InnerGameEventLoginTeamsvr::extd1() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventLoginTeamsvr.extd1)
  return _internal_extd1();
}
inline void InnerGameEventLoginTeamsvr::unsafe_arena_set_allocated_extd1(
    ::common::RoleExtend1* extd1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd1_);
  }
  extd1_ = extd1;
  if (extd1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventLoginTeamsvr.extd1)
}
inline ::common::RoleExtend1* InnerGameEventLoginTeamsvr::release_extd1() {
  
  ::common::RoleExtend1* temp = extd1_;
  extd1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleExtend1* InnerGameEventLoginTeamsvr::unsafe_arena_release_extd1() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventLoginTeamsvr.extd1)
  
  ::common::RoleExtend1* temp = extd1_;
  extd1_ = nullptr;
  return temp;
}
inline ::common::RoleExtend1* InnerGameEventLoginTeamsvr::_internal_mutable_extd1() {
  
  if (extd1_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleExtend1>(GetArenaForAllocation());
    extd1_ = p;
  }
  return extd1_;
}
inline ::common::RoleExtend1* InnerGameEventLoginTeamsvr::mutable_extd1() {
  ::common::RoleExtend1* _msg = _internal_mutable_extd1();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventLoginTeamsvr.extd1)
  return _msg;
}
inline void InnerGameEventLoginTeamsvr::set_allocated_extd1(::common::RoleExtend1* extd1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd1_);
  }
  if (extd1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd1));
    if (message_arena != submessage_arena) {
      extd1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extd1, submessage_arena);
    }
    
  } else {
    
  }
  extd1_ = extd1;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventLoginTeamsvr.extd1)
}

// .common.RoleExtend2 extd2 = 3;
inline bool InnerGameEventLoginTeamsvr::_internal_has_extd2() const {
  return this != internal_default_instance() && extd2_ != nullptr;
}
inline bool InnerGameEventLoginTeamsvr::has_extd2() const {
  return _internal_has_extd2();
}
inline const ::common::RoleExtend2& InnerGameEventLoginTeamsvr::_internal_extd2() const {
  const ::common::RoleExtend2* p = extd2_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleExtend2&>(
      ::common::_RoleExtend2_default_instance_);
}
inline const ::common::RoleExtend2& InnerGameEventLoginTeamsvr::extd2() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventLoginTeamsvr.extd2)
  return _internal_extd2();
}
inline void InnerGameEventLoginTeamsvr::unsafe_arena_set_allocated_extd2(
    ::common::RoleExtend2* extd2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd2_);
  }
  extd2_ = extd2;
  if (extd2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventLoginTeamsvr.extd2)
}
inline ::common::RoleExtend2* InnerGameEventLoginTeamsvr::release_extd2() {
  
  ::common::RoleExtend2* temp = extd2_;
  extd2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleExtend2* InnerGameEventLoginTeamsvr::unsafe_arena_release_extd2() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventLoginTeamsvr.extd2)
  
  ::common::RoleExtend2* temp = extd2_;
  extd2_ = nullptr;
  return temp;
}
inline ::common::RoleExtend2* InnerGameEventLoginTeamsvr::_internal_mutable_extd2() {
  
  if (extd2_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleExtend2>(GetArenaForAllocation());
    extd2_ = p;
  }
  return extd2_;
}
inline ::common::RoleExtend2* InnerGameEventLoginTeamsvr::mutable_extd2() {
  ::common::RoleExtend2* _msg = _internal_mutable_extd2();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventLoginTeamsvr.extd2)
  return _msg;
}
inline void InnerGameEventLoginTeamsvr::set_allocated_extd2(::common::RoleExtend2* extd2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd2_);
  }
  if (extd2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd2));
    if (message_arena != submessage_arena) {
      extd2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extd2, submessage_arena);
    }
    
  } else {
    
  }
  extd2_ = extd2;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventLoginTeamsvr.extd2)
}

// .common.RoleExtend3 extd3 = 4;
inline bool InnerGameEventLoginTeamsvr::_internal_has_extd3() const {
  return this != internal_default_instance() && extd3_ != nullptr;
}
inline bool InnerGameEventLoginTeamsvr::has_extd3() const {
  return _internal_has_extd3();
}
inline const ::common::RoleExtend3& InnerGameEventLoginTeamsvr::_internal_extd3() const {
  const ::common::RoleExtend3* p = extd3_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleExtend3&>(
      ::common::_RoleExtend3_default_instance_);
}
inline const ::common::RoleExtend3& InnerGameEventLoginTeamsvr::extd3() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventLoginTeamsvr.extd3)
  return _internal_extd3();
}
inline void InnerGameEventLoginTeamsvr::unsafe_arena_set_allocated_extd3(
    ::common::RoleExtend3* extd3) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd3_);
  }
  extd3_ = extd3;
  if (extd3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventLoginTeamsvr.extd3)
}
inline ::common::RoleExtend3* InnerGameEventLoginTeamsvr::release_extd3() {
  
  ::common::RoleExtend3* temp = extd3_;
  extd3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleExtend3* InnerGameEventLoginTeamsvr::unsafe_arena_release_extd3() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventLoginTeamsvr.extd3)
  
  ::common::RoleExtend3* temp = extd3_;
  extd3_ = nullptr;
  return temp;
}
inline ::common::RoleExtend3* InnerGameEventLoginTeamsvr::_internal_mutable_extd3() {
  
  if (extd3_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleExtend3>(GetArenaForAllocation());
    extd3_ = p;
  }
  return extd3_;
}
inline ::common::RoleExtend3* InnerGameEventLoginTeamsvr::mutable_extd3() {
  ::common::RoleExtend3* _msg = _internal_mutable_extd3();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventLoginTeamsvr.extd3)
  return _msg;
}
inline void InnerGameEventLoginTeamsvr::set_allocated_extd3(::common::RoleExtend3* extd3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd3_);
  }
  if (extd3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd3));
    if (message_arena != submessage_arena) {
      extd3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extd3, submessage_arena);
    }
    
  } else {
    
  }
  extd3_ = extd3;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventLoginTeamsvr.extd3)
}

// .common.ExtendFight3v3 f33 = 5;
inline bool InnerGameEventLoginTeamsvr::_internal_has_f33() const {
  return this != internal_default_instance() && f33_ != nullptr;
}
inline bool InnerGameEventLoginTeamsvr::has_f33() const {
  return _internal_has_f33();
}
inline const ::common::ExtendFight3v3& InnerGameEventLoginTeamsvr::_internal_f33() const {
  const ::common::ExtendFight3v3* p = f33_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ExtendFight3v3&>(
      ::common::_ExtendFight3v3_default_instance_);
}
inline const ::common::ExtendFight3v3& InnerGameEventLoginTeamsvr::f33() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventLoginTeamsvr.f33)
  return _internal_f33();
}
inline void InnerGameEventLoginTeamsvr::unsafe_arena_set_allocated_f33(
    ::common::ExtendFight3v3* f33) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f33_);
  }
  f33_ = f33;
  if (f33) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventLoginTeamsvr.f33)
}
inline ::common::ExtendFight3v3* InnerGameEventLoginTeamsvr::release_f33() {
  
  ::common::ExtendFight3v3* temp = f33_;
  f33_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ExtendFight3v3* InnerGameEventLoginTeamsvr::unsafe_arena_release_f33() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventLoginTeamsvr.f33)
  
  ::common::ExtendFight3v3* temp = f33_;
  f33_ = nullptr;
  return temp;
}
inline ::common::ExtendFight3v3* InnerGameEventLoginTeamsvr::_internal_mutable_f33() {
  
  if (f33_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ExtendFight3v3>(GetArenaForAllocation());
    f33_ = p;
  }
  return f33_;
}
inline ::common::ExtendFight3v3* InnerGameEventLoginTeamsvr::mutable_f33() {
  ::common::ExtendFight3v3* _msg = _internal_mutable_f33();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventLoginTeamsvr.f33)
  return _msg;
}
inline void InnerGameEventLoginTeamsvr::set_allocated_f33(::common::ExtendFight3v3* f33) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(f33_);
  }
  if (f33) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f33));
    if (message_arena != submessage_arena) {
      f33 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f33, submessage_arena);
    }
    
  } else {
    
  }
  f33_ = f33;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventLoginTeamsvr.f33)
}

// .common.ExtendFight5v5 f55 = 6;
inline bool InnerGameEventLoginTeamsvr::_internal_has_f55() const {
  return this != internal_default_instance() && f55_ != nullptr;
}
inline bool InnerGameEventLoginTeamsvr::has_f55() const {
  return _internal_has_f55();
}
inline const ::common::ExtendFight5v5& InnerGameEventLoginTeamsvr::_internal_f55() const {
  const ::common::ExtendFight5v5* p = f55_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ExtendFight5v5&>(
      ::common::_ExtendFight5v5_default_instance_);
}
inline const ::common::ExtendFight5v5& InnerGameEventLoginTeamsvr::f55() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventLoginTeamsvr.f55)
  return _internal_f55();
}
inline void InnerGameEventLoginTeamsvr::unsafe_arena_set_allocated_f55(
    ::common::ExtendFight5v5* f55) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f55_);
  }
  f55_ = f55;
  if (f55) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventLoginTeamsvr.f55)
}
inline ::common::ExtendFight5v5* InnerGameEventLoginTeamsvr::release_f55() {
  
  ::common::ExtendFight5v5* temp = f55_;
  f55_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ExtendFight5v5* InnerGameEventLoginTeamsvr::unsafe_arena_release_f55() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventLoginTeamsvr.f55)
  
  ::common::ExtendFight5v5* temp = f55_;
  f55_ = nullptr;
  return temp;
}
inline ::common::ExtendFight5v5* InnerGameEventLoginTeamsvr::_internal_mutable_f55() {
  
  if (f55_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ExtendFight5v5>(GetArenaForAllocation());
    f55_ = p;
  }
  return f55_;
}
inline ::common::ExtendFight5v5* InnerGameEventLoginTeamsvr::mutable_f55() {
  ::common::ExtendFight5v5* _msg = _internal_mutable_f55();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventLoginTeamsvr.f55)
  return _msg;
}
inline void InnerGameEventLoginTeamsvr::set_allocated_f55(::common::ExtendFight5v5* f55) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(f55_);
  }
  if (f55) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f55));
    if (message_arena != submessage_arena) {
      f55 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f55, submessage_arena);
    }
    
  } else {
    
  }
  f55_ = f55;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventLoginTeamsvr.f55)
}

// uint32 sceneHashId = 7;
inline void InnerGameEventLoginTeamsvr::clear_scenehashid() {
  scenehashid_ = 0u;
}
inline uint32_t InnerGameEventLoginTeamsvr::_internal_scenehashid() const {
  return scenehashid_;
}
inline uint32_t InnerGameEventLoginTeamsvr::scenehashid() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventLoginTeamsvr.sceneHashId)
  return _internal_scenehashid();
}
inline void InnerGameEventLoginTeamsvr::_internal_set_scenehashid(uint32_t value) {
  
  scenehashid_ = value;
}
inline void InnerGameEventLoginTeamsvr::set_scenehashid(uint32_t value) {
  _internal_set_scenehashid(value);
  // @@protoc_insertion_point(field_set:inner.InnerGameEventLoginTeamsvr.sceneHashId)
}

// -------------------------------------------------------------------

// InnerGameEventLoginFriendsvr

// .inner.InnerFriendInfo oInfo = 1;
inline bool InnerGameEventLoginFriendsvr::_internal_has_oinfo() const {
  return this != internal_default_instance() && oinfo_ != nullptr;
}
inline bool InnerGameEventLoginFriendsvr::has_oinfo() const {
  return _internal_has_oinfo();
}
inline const ::inner::InnerFriendInfo& InnerGameEventLoginFriendsvr::_internal_oinfo() const {
  const ::inner::InnerFriendInfo* p = oinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::inner::InnerFriendInfo&>(
      ::inner::_InnerFriendInfo_default_instance_);
}
inline const ::inner::InnerFriendInfo& InnerGameEventLoginFriendsvr::oinfo() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventLoginFriendsvr.oInfo)
  return _internal_oinfo();
}
inline void InnerGameEventLoginFriendsvr::unsafe_arena_set_allocated_oinfo(
    ::inner::InnerFriendInfo* oinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oinfo_);
  }
  oinfo_ = oinfo;
  if (oinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventLoginFriendsvr.oInfo)
}
inline ::inner::InnerFriendInfo* InnerGameEventLoginFriendsvr::release_oinfo() {
  
  ::inner::InnerFriendInfo* temp = oinfo_;
  oinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::inner::InnerFriendInfo* InnerGameEventLoginFriendsvr::unsafe_arena_release_oinfo() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventLoginFriendsvr.oInfo)
  
  ::inner::InnerFriendInfo* temp = oinfo_;
  oinfo_ = nullptr;
  return temp;
}
inline ::inner::InnerFriendInfo* InnerGameEventLoginFriendsvr::_internal_mutable_oinfo() {
  
  if (oinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::inner::InnerFriendInfo>(GetArenaForAllocation());
    oinfo_ = p;
  }
  return oinfo_;
}
inline ::inner::InnerFriendInfo* InnerGameEventLoginFriendsvr::mutable_oinfo() {
  ::inner::InnerFriendInfo* _msg = _internal_mutable_oinfo();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventLoginFriendsvr.oInfo)
  return _msg;
}
inline void InnerGameEventLoginFriendsvr::set_allocated_oinfo(::inner::InnerFriendInfo* oinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oinfo_);
  }
  if (oinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oinfo));
    if (message_arena != submessage_arena) {
      oinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oinfo, submessage_arena);
    }
    
  } else {
    
  }
  oinfo_ = oinfo;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventLoginFriendsvr.oInfo)
}

// .inner.InnerFriendGiftList oGifts = 2;
inline bool InnerGameEventLoginFriendsvr::_internal_has_ogifts() const {
  return this != internal_default_instance() && ogifts_ != nullptr;
}
inline bool InnerGameEventLoginFriendsvr::has_ogifts() const {
  return _internal_has_ogifts();
}
inline const ::inner::InnerFriendGiftList& InnerGameEventLoginFriendsvr::_internal_ogifts() const {
  const ::inner::InnerFriendGiftList* p = ogifts_;
  return p != nullptr ? *p : reinterpret_cast<const ::inner::InnerFriendGiftList&>(
      ::inner::_InnerFriendGiftList_default_instance_);
}
inline const ::inner::InnerFriendGiftList& InnerGameEventLoginFriendsvr::ogifts() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventLoginFriendsvr.oGifts)
  return _internal_ogifts();
}
inline void InnerGameEventLoginFriendsvr::unsafe_arena_set_allocated_ogifts(
    ::inner::InnerFriendGiftList* ogifts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ogifts_);
  }
  ogifts_ = ogifts;
  if (ogifts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventLoginFriendsvr.oGifts)
}
inline ::inner::InnerFriendGiftList* InnerGameEventLoginFriendsvr::release_ogifts() {
  
  ::inner::InnerFriendGiftList* temp = ogifts_;
  ogifts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::inner::InnerFriendGiftList* InnerGameEventLoginFriendsvr::unsafe_arena_release_ogifts() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventLoginFriendsvr.oGifts)
  
  ::inner::InnerFriendGiftList* temp = ogifts_;
  ogifts_ = nullptr;
  return temp;
}
inline ::inner::InnerFriendGiftList* InnerGameEventLoginFriendsvr::_internal_mutable_ogifts() {
  
  if (ogifts_ == nullptr) {
    auto* p = CreateMaybeMessage<::inner::InnerFriendGiftList>(GetArenaForAllocation());
    ogifts_ = p;
  }
  return ogifts_;
}
inline ::inner::InnerFriendGiftList* InnerGameEventLoginFriendsvr::mutable_ogifts() {
  ::inner::InnerFriendGiftList* _msg = _internal_mutable_ogifts();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventLoginFriendsvr.oGifts)
  return _msg;
}
inline void InnerGameEventLoginFriendsvr::set_allocated_ogifts(::inner::InnerFriendGiftList* ogifts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ogifts_);
  }
  if (ogifts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ogifts));
    if (message_arena != submessage_arena) {
      ogifts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ogifts, submessage_arena);
    }
    
  } else {
    
  }
  ogifts_ = ogifts;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventLoginFriendsvr.oGifts)
}

// uint64 llTeamId = 3;
inline void InnerGameEventLoginFriendsvr::clear_llteamid() {
  llteamid_ = uint64_t{0u};
}
inline uint64_t InnerGameEventLoginFriendsvr::_internal_llteamid() const {
  return llteamid_;
}
inline uint64_t InnerGameEventLoginFriendsvr::llteamid() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventLoginFriendsvr.llTeamId)
  return _internal_llteamid();
}
inline void InnerGameEventLoginFriendsvr::_internal_set_llteamid(uint64_t value) {
  
  llteamid_ = value;
}
inline void InnerGameEventLoginFriendsvr::set_llteamid(uint64_t value) {
  _internal_set_llteamid(value);
  // @@protoc_insertion_point(field_set:inner.InnerGameEventLoginFriendsvr.llTeamId)
}

// -------------------------------------------------------------------

// InnerGameEventLoginFamilysvr

// .common.RoleBrief brief = 1;
inline bool InnerGameEventLoginFamilysvr::_internal_has_brief() const {
  return this != internal_default_instance() && brief_ != nullptr;
}
inline bool InnerGameEventLoginFamilysvr::has_brief() const {
  return _internal_has_brief();
}
inline const ::common::RoleBrief& InnerGameEventLoginFamilysvr::_internal_brief() const {
  const ::common::RoleBrief* p = brief_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleBrief&>(
      ::common::_RoleBrief_default_instance_);
}
inline const ::common::RoleBrief& InnerGameEventLoginFamilysvr::brief() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventLoginFamilysvr.brief)
  return _internal_brief();
}
inline void InnerGameEventLoginFamilysvr::unsafe_arena_set_allocated_brief(
    ::common::RoleBrief* brief) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brief_);
  }
  brief_ = brief;
  if (brief) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventLoginFamilysvr.brief)
}
inline ::common::RoleBrief* InnerGameEventLoginFamilysvr::release_brief() {
  
  ::common::RoleBrief* temp = brief_;
  brief_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleBrief* InnerGameEventLoginFamilysvr::unsafe_arena_release_brief() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventLoginFamilysvr.brief)
  
  ::common::RoleBrief* temp = brief_;
  brief_ = nullptr;
  return temp;
}
inline ::common::RoleBrief* InnerGameEventLoginFamilysvr::_internal_mutable_brief() {
  
  if (brief_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleBrief>(GetArenaForAllocation());
    brief_ = p;
  }
  return brief_;
}
inline ::common::RoleBrief* InnerGameEventLoginFamilysvr::mutable_brief() {
  ::common::RoleBrief* _msg = _internal_mutable_brief();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventLoginFamilysvr.brief)
  return _msg;
}
inline void InnerGameEventLoginFamilysvr::set_allocated_brief(::common::RoleBrief* brief) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(brief_);
  }
  if (brief) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brief));
    if (message_arena != submessage_arena) {
      brief = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brief, submessage_arena);
    }
    
  } else {
    
  }
  brief_ = brief;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventLoginFamilysvr.brief)
}

// -------------------------------------------------------------------

// InnerGameEventLogout

// .inner.InnerGameEventLogoutTeamvr teamsvr = 1;
inline bool InnerGameEventLogout::_internal_has_teamsvr() const {
  return server_case() == kTeamsvr;
}
inline bool InnerGameEventLogout::has_teamsvr() const {
  return _internal_has_teamsvr();
}
inline void InnerGameEventLogout::set_has_teamsvr() {
  _oneof_case_[0] = kTeamsvr;
}
inline void InnerGameEventLogout::clear_teamsvr() {
  if (_internal_has_teamsvr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete server_.teamsvr_;
    }
    clear_has_server();
  }
}
inline ::inner::InnerGameEventLogoutTeamvr* InnerGameEventLogout::release_teamsvr() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventLogout.teamsvr)
  if (_internal_has_teamsvr()) {
    clear_has_server();
    ::inner::InnerGameEventLogoutTeamvr* temp = server_.teamsvr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    server_.teamsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventLogoutTeamvr& InnerGameEventLogout::_internal_teamsvr() const {
  return _internal_has_teamsvr()
      ? *server_.teamsvr_
      : reinterpret_cast< ::inner::InnerGameEventLogoutTeamvr&>(::inner::_InnerGameEventLogoutTeamvr_default_instance_);
}
inline const ::inner::InnerGameEventLogoutTeamvr& InnerGameEventLogout::teamsvr() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventLogout.teamsvr)
  return _internal_teamsvr();
}
inline ::inner::InnerGameEventLogoutTeamvr* InnerGameEventLogout::unsafe_arena_release_teamsvr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEventLogout.teamsvr)
  if (_internal_has_teamsvr()) {
    clear_has_server();
    ::inner::InnerGameEventLogoutTeamvr* temp = server_.teamsvr_;
    server_.teamsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEventLogout::unsafe_arena_set_allocated_teamsvr(::inner::InnerGameEventLogoutTeamvr* teamsvr) {
  clear_server();
  if (teamsvr) {
    set_has_teamsvr();
    server_.teamsvr_ = teamsvr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventLogout.teamsvr)
}
inline ::inner::InnerGameEventLogoutTeamvr* InnerGameEventLogout::_internal_mutable_teamsvr() {
  if (!_internal_has_teamsvr()) {
    clear_server();
    set_has_teamsvr();
    server_.teamsvr_ = CreateMaybeMessage< ::inner::InnerGameEventLogoutTeamvr >(GetArenaForAllocation());
  }
  return server_.teamsvr_;
}
inline ::inner::InnerGameEventLogoutTeamvr* InnerGameEventLogout::mutable_teamsvr() {
  ::inner::InnerGameEventLogoutTeamvr* _msg = _internal_mutable_teamsvr();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventLogout.teamsvr)
  return _msg;
}

// .inner.InnerGameEventLogoutFriendsvr friendsvr = 2;
inline bool InnerGameEventLogout::_internal_has_friendsvr() const {
  return server_case() == kFriendsvr;
}
inline bool InnerGameEventLogout::has_friendsvr() const {
  return _internal_has_friendsvr();
}
inline void InnerGameEventLogout::set_has_friendsvr() {
  _oneof_case_[0] = kFriendsvr;
}
inline void InnerGameEventLogout::clear_friendsvr() {
  if (_internal_has_friendsvr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete server_.friendsvr_;
    }
    clear_has_server();
  }
}
inline ::inner::InnerGameEventLogoutFriendsvr* InnerGameEventLogout::release_friendsvr() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventLogout.friendsvr)
  if (_internal_has_friendsvr()) {
    clear_has_server();
    ::inner::InnerGameEventLogoutFriendsvr* temp = server_.friendsvr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    server_.friendsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventLogoutFriendsvr& InnerGameEventLogout::_internal_friendsvr() const {
  return _internal_has_friendsvr()
      ? *server_.friendsvr_
      : reinterpret_cast< ::inner::InnerGameEventLogoutFriendsvr&>(::inner::_InnerGameEventLogoutFriendsvr_default_instance_);
}
inline const ::inner::InnerGameEventLogoutFriendsvr& InnerGameEventLogout::friendsvr() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventLogout.friendsvr)
  return _internal_friendsvr();
}
inline ::inner::InnerGameEventLogoutFriendsvr* InnerGameEventLogout::unsafe_arena_release_friendsvr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEventLogout.friendsvr)
  if (_internal_has_friendsvr()) {
    clear_has_server();
    ::inner::InnerGameEventLogoutFriendsvr* temp = server_.friendsvr_;
    server_.friendsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEventLogout::unsafe_arena_set_allocated_friendsvr(::inner::InnerGameEventLogoutFriendsvr* friendsvr) {
  clear_server();
  if (friendsvr) {
    set_has_friendsvr();
    server_.friendsvr_ = friendsvr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventLogout.friendsvr)
}
inline ::inner::InnerGameEventLogoutFriendsvr* InnerGameEventLogout::_internal_mutable_friendsvr() {
  if (!_internal_has_friendsvr()) {
    clear_server();
    set_has_friendsvr();
    server_.friendsvr_ = CreateMaybeMessage< ::inner::InnerGameEventLogoutFriendsvr >(GetArenaForAllocation());
  }
  return server_.friendsvr_;
}
inline ::inner::InnerGameEventLogoutFriendsvr* InnerGameEventLogout::mutable_friendsvr() {
  ::inner::InnerGameEventLogoutFriendsvr* _msg = _internal_mutable_friendsvr();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventLogout.friendsvr)
  return _msg;
}

// .inner.InnerGameEventLogoutFamilysvr familysvr = 3;
inline bool InnerGameEventLogout::_internal_has_familysvr() const {
  return server_case() == kFamilysvr;
}
inline bool InnerGameEventLogout::has_familysvr() const {
  return _internal_has_familysvr();
}
inline void InnerGameEventLogout::set_has_familysvr() {
  _oneof_case_[0] = kFamilysvr;
}
inline void InnerGameEventLogout::clear_familysvr() {
  if (_internal_has_familysvr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete server_.familysvr_;
    }
    clear_has_server();
  }
}
inline ::inner::InnerGameEventLogoutFamilysvr* InnerGameEventLogout::release_familysvr() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventLogout.familysvr)
  if (_internal_has_familysvr()) {
    clear_has_server();
    ::inner::InnerGameEventLogoutFamilysvr* temp = server_.familysvr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    server_.familysvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventLogoutFamilysvr& InnerGameEventLogout::_internal_familysvr() const {
  return _internal_has_familysvr()
      ? *server_.familysvr_
      : reinterpret_cast< ::inner::InnerGameEventLogoutFamilysvr&>(::inner::_InnerGameEventLogoutFamilysvr_default_instance_);
}
inline const ::inner::InnerGameEventLogoutFamilysvr& InnerGameEventLogout::familysvr() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventLogout.familysvr)
  return _internal_familysvr();
}
inline ::inner::InnerGameEventLogoutFamilysvr* InnerGameEventLogout::unsafe_arena_release_familysvr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEventLogout.familysvr)
  if (_internal_has_familysvr()) {
    clear_has_server();
    ::inner::InnerGameEventLogoutFamilysvr* temp = server_.familysvr_;
    server_.familysvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEventLogout::unsafe_arena_set_allocated_familysvr(::inner::InnerGameEventLogoutFamilysvr* familysvr) {
  clear_server();
  if (familysvr) {
    set_has_familysvr();
    server_.familysvr_ = familysvr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventLogout.familysvr)
}
inline ::inner::InnerGameEventLogoutFamilysvr* InnerGameEventLogout::_internal_mutable_familysvr() {
  if (!_internal_has_familysvr()) {
    clear_server();
    set_has_familysvr();
    server_.familysvr_ = CreateMaybeMessage< ::inner::InnerGameEventLogoutFamilysvr >(GetArenaForAllocation());
  }
  return server_.familysvr_;
}
inline ::inner::InnerGameEventLogoutFamilysvr* InnerGameEventLogout::mutable_familysvr() {
  ::inner::InnerGameEventLogoutFamilysvr* _msg = _internal_mutable_familysvr();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventLogout.familysvr)
  return _msg;
}

inline bool InnerGameEventLogout::has_server() const {
  return server_case() != SERVER_NOT_SET;
}
inline void InnerGameEventLogout::clear_has_server() {
  _oneof_case_[0] = SERVER_NOT_SET;
}
inline InnerGameEventLogout::ServerCase InnerGameEventLogout::server_case() const {
  return InnerGameEventLogout::ServerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InnerGameEventLogoutTeamvr

// -------------------------------------------------------------------

// InnerGameEventLogoutFriendsvr

// -------------------------------------------------------------------

// InnerGameEventLogoutFamilysvr

// -------------------------------------------------------------------

// InnerGameEventOnline

// .inner.InnerGameEventOnlineTeamsvr teamsvr = 1;
inline bool InnerGameEventOnline::_internal_has_teamsvr() const {
  return server_case() == kTeamsvr;
}
inline bool InnerGameEventOnline::has_teamsvr() const {
  return _internal_has_teamsvr();
}
inline void InnerGameEventOnline::set_has_teamsvr() {
  _oneof_case_[0] = kTeamsvr;
}
inline void InnerGameEventOnline::clear_teamsvr() {
  if (_internal_has_teamsvr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete server_.teamsvr_;
    }
    clear_has_server();
  }
}
inline ::inner::InnerGameEventOnlineTeamsvr* InnerGameEventOnline::release_teamsvr() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventOnline.teamsvr)
  if (_internal_has_teamsvr()) {
    clear_has_server();
    ::inner::InnerGameEventOnlineTeamsvr* temp = server_.teamsvr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    server_.teamsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventOnlineTeamsvr& InnerGameEventOnline::_internal_teamsvr() const {
  return _internal_has_teamsvr()
      ? *server_.teamsvr_
      : reinterpret_cast< ::inner::InnerGameEventOnlineTeamsvr&>(::inner::_InnerGameEventOnlineTeamsvr_default_instance_);
}
inline const ::inner::InnerGameEventOnlineTeamsvr& InnerGameEventOnline::teamsvr() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventOnline.teamsvr)
  return _internal_teamsvr();
}
inline ::inner::InnerGameEventOnlineTeamsvr* InnerGameEventOnline::unsafe_arena_release_teamsvr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEventOnline.teamsvr)
  if (_internal_has_teamsvr()) {
    clear_has_server();
    ::inner::InnerGameEventOnlineTeamsvr* temp = server_.teamsvr_;
    server_.teamsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEventOnline::unsafe_arena_set_allocated_teamsvr(::inner::InnerGameEventOnlineTeamsvr* teamsvr) {
  clear_server();
  if (teamsvr) {
    set_has_teamsvr();
    server_.teamsvr_ = teamsvr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventOnline.teamsvr)
}
inline ::inner::InnerGameEventOnlineTeamsvr* InnerGameEventOnline::_internal_mutable_teamsvr() {
  if (!_internal_has_teamsvr()) {
    clear_server();
    set_has_teamsvr();
    server_.teamsvr_ = CreateMaybeMessage< ::inner::InnerGameEventOnlineTeamsvr >(GetArenaForAllocation());
  }
  return server_.teamsvr_;
}
inline ::inner::InnerGameEventOnlineTeamsvr* InnerGameEventOnline::mutable_teamsvr() {
  ::inner::InnerGameEventOnlineTeamsvr* _msg = _internal_mutable_teamsvr();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventOnline.teamsvr)
  return _msg;
}

// .inner.InnerGameEventOnlineFriendsvr friendsvr = 2;
inline bool InnerGameEventOnline::_internal_has_friendsvr() const {
  return server_case() == kFriendsvr;
}
inline bool InnerGameEventOnline::has_friendsvr() const {
  return _internal_has_friendsvr();
}
inline void InnerGameEventOnline::set_has_friendsvr() {
  _oneof_case_[0] = kFriendsvr;
}
inline void InnerGameEventOnline::clear_friendsvr() {
  if (_internal_has_friendsvr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete server_.friendsvr_;
    }
    clear_has_server();
  }
}
inline ::inner::InnerGameEventOnlineFriendsvr* InnerGameEventOnline::release_friendsvr() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventOnline.friendsvr)
  if (_internal_has_friendsvr()) {
    clear_has_server();
    ::inner::InnerGameEventOnlineFriendsvr* temp = server_.friendsvr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    server_.friendsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventOnlineFriendsvr& InnerGameEventOnline::_internal_friendsvr() const {
  return _internal_has_friendsvr()
      ? *server_.friendsvr_
      : reinterpret_cast< ::inner::InnerGameEventOnlineFriendsvr&>(::inner::_InnerGameEventOnlineFriendsvr_default_instance_);
}
inline const ::inner::InnerGameEventOnlineFriendsvr& InnerGameEventOnline::friendsvr() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventOnline.friendsvr)
  return _internal_friendsvr();
}
inline ::inner::InnerGameEventOnlineFriendsvr* InnerGameEventOnline::unsafe_arena_release_friendsvr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEventOnline.friendsvr)
  if (_internal_has_friendsvr()) {
    clear_has_server();
    ::inner::InnerGameEventOnlineFriendsvr* temp = server_.friendsvr_;
    server_.friendsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEventOnline::unsafe_arena_set_allocated_friendsvr(::inner::InnerGameEventOnlineFriendsvr* friendsvr) {
  clear_server();
  if (friendsvr) {
    set_has_friendsvr();
    server_.friendsvr_ = friendsvr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventOnline.friendsvr)
}
inline ::inner::InnerGameEventOnlineFriendsvr* InnerGameEventOnline::_internal_mutable_friendsvr() {
  if (!_internal_has_friendsvr()) {
    clear_server();
    set_has_friendsvr();
    server_.friendsvr_ = CreateMaybeMessage< ::inner::InnerGameEventOnlineFriendsvr >(GetArenaForAllocation());
  }
  return server_.friendsvr_;
}
inline ::inner::InnerGameEventOnlineFriendsvr* InnerGameEventOnline::mutable_friendsvr() {
  ::inner::InnerGameEventOnlineFriendsvr* _msg = _internal_mutable_friendsvr();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventOnline.friendsvr)
  return _msg;
}

// .inner.InnerGameEventOnlineFamilysvr familysvr = 3;
inline bool InnerGameEventOnline::_internal_has_familysvr() const {
  return server_case() == kFamilysvr;
}
inline bool InnerGameEventOnline::has_familysvr() const {
  return _internal_has_familysvr();
}
inline void InnerGameEventOnline::set_has_familysvr() {
  _oneof_case_[0] = kFamilysvr;
}
inline void InnerGameEventOnline::clear_familysvr() {
  if (_internal_has_familysvr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete server_.familysvr_;
    }
    clear_has_server();
  }
}
inline ::inner::InnerGameEventOnlineFamilysvr* InnerGameEventOnline::release_familysvr() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventOnline.familysvr)
  if (_internal_has_familysvr()) {
    clear_has_server();
    ::inner::InnerGameEventOnlineFamilysvr* temp = server_.familysvr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    server_.familysvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventOnlineFamilysvr& InnerGameEventOnline::_internal_familysvr() const {
  return _internal_has_familysvr()
      ? *server_.familysvr_
      : reinterpret_cast< ::inner::InnerGameEventOnlineFamilysvr&>(::inner::_InnerGameEventOnlineFamilysvr_default_instance_);
}
inline const ::inner::InnerGameEventOnlineFamilysvr& InnerGameEventOnline::familysvr() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventOnline.familysvr)
  return _internal_familysvr();
}
inline ::inner::InnerGameEventOnlineFamilysvr* InnerGameEventOnline::unsafe_arena_release_familysvr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEventOnline.familysvr)
  if (_internal_has_familysvr()) {
    clear_has_server();
    ::inner::InnerGameEventOnlineFamilysvr* temp = server_.familysvr_;
    server_.familysvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEventOnline::unsafe_arena_set_allocated_familysvr(::inner::InnerGameEventOnlineFamilysvr* familysvr) {
  clear_server();
  if (familysvr) {
    set_has_familysvr();
    server_.familysvr_ = familysvr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventOnline.familysvr)
}
inline ::inner::InnerGameEventOnlineFamilysvr* InnerGameEventOnline::_internal_mutable_familysvr() {
  if (!_internal_has_familysvr()) {
    clear_server();
    set_has_familysvr();
    server_.familysvr_ = CreateMaybeMessage< ::inner::InnerGameEventOnlineFamilysvr >(GetArenaForAllocation());
  }
  return server_.familysvr_;
}
inline ::inner::InnerGameEventOnlineFamilysvr* InnerGameEventOnline::mutable_familysvr() {
  ::inner::InnerGameEventOnlineFamilysvr* _msg = _internal_mutable_familysvr();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventOnline.familysvr)
  return _msg;
}

inline bool InnerGameEventOnline::has_server() const {
  return server_case() != SERVER_NOT_SET;
}
inline void InnerGameEventOnline::clear_has_server() {
  _oneof_case_[0] = SERVER_NOT_SET;
}
inline InnerGameEventOnline::ServerCase InnerGameEventOnline::server_case() const {
  return InnerGameEventOnline::ServerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InnerGameEventOnlineTeamsvr

// .common.RoleExtend2 extd2 = 1;
inline bool InnerGameEventOnlineTeamsvr::_internal_has_extd2() const {
  return this != internal_default_instance() && extd2_ != nullptr;
}
inline bool InnerGameEventOnlineTeamsvr::has_extd2() const {
  return _internal_has_extd2();
}
inline const ::common::RoleExtend2& InnerGameEventOnlineTeamsvr::_internal_extd2() const {
  const ::common::RoleExtend2* p = extd2_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleExtend2&>(
      ::common::_RoleExtend2_default_instance_);
}
inline const ::common::RoleExtend2& InnerGameEventOnlineTeamsvr::extd2() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventOnlineTeamsvr.extd2)
  return _internal_extd2();
}
inline void InnerGameEventOnlineTeamsvr::unsafe_arena_set_allocated_extd2(
    ::common::RoleExtend2* extd2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd2_);
  }
  extd2_ = extd2;
  if (extd2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventOnlineTeamsvr.extd2)
}
inline ::common::RoleExtend2* InnerGameEventOnlineTeamsvr::release_extd2() {
  
  ::common::RoleExtend2* temp = extd2_;
  extd2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleExtend2* InnerGameEventOnlineTeamsvr::unsafe_arena_release_extd2() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventOnlineTeamsvr.extd2)
  
  ::common::RoleExtend2* temp = extd2_;
  extd2_ = nullptr;
  return temp;
}
inline ::common::RoleExtend2* InnerGameEventOnlineTeamsvr::_internal_mutable_extd2() {
  
  if (extd2_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleExtend2>(GetArenaForAllocation());
    extd2_ = p;
  }
  return extd2_;
}
inline ::common::RoleExtend2* InnerGameEventOnlineTeamsvr::mutable_extd2() {
  ::common::RoleExtend2* _msg = _internal_mutable_extd2();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventOnlineTeamsvr.extd2)
  return _msg;
}
inline void InnerGameEventOnlineTeamsvr::set_allocated_extd2(::common::RoleExtend2* extd2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd2_);
  }
  if (extd2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd2));
    if (message_arena != submessage_arena) {
      extd2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extd2, submessage_arena);
    }
    
  } else {
    
  }
  extd2_ = extd2;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventOnlineTeamsvr.extd2)
}

// .common.RoleExtend3 extd3 = 2;
inline bool InnerGameEventOnlineTeamsvr::_internal_has_extd3() const {
  return this != internal_default_instance() && extd3_ != nullptr;
}
inline bool InnerGameEventOnlineTeamsvr::has_extd3() const {
  return _internal_has_extd3();
}
inline const ::common::RoleExtend3& InnerGameEventOnlineTeamsvr::_internal_extd3() const {
  const ::common::RoleExtend3* p = extd3_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleExtend3&>(
      ::common::_RoleExtend3_default_instance_);
}
inline const ::common::RoleExtend3& InnerGameEventOnlineTeamsvr::extd3() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventOnlineTeamsvr.extd3)
  return _internal_extd3();
}
inline void InnerGameEventOnlineTeamsvr::unsafe_arena_set_allocated_extd3(
    ::common::RoleExtend3* extd3) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd3_);
  }
  extd3_ = extd3;
  if (extd3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventOnlineTeamsvr.extd3)
}
inline ::common::RoleExtend3* InnerGameEventOnlineTeamsvr::release_extd3() {
  
  ::common::RoleExtend3* temp = extd3_;
  extd3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleExtend3* InnerGameEventOnlineTeamsvr::unsafe_arena_release_extd3() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventOnlineTeamsvr.extd3)
  
  ::common::RoleExtend3* temp = extd3_;
  extd3_ = nullptr;
  return temp;
}
inline ::common::RoleExtend3* InnerGameEventOnlineTeamsvr::_internal_mutable_extd3() {
  
  if (extd3_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleExtend3>(GetArenaForAllocation());
    extd3_ = p;
  }
  return extd3_;
}
inline ::common::RoleExtend3* InnerGameEventOnlineTeamsvr::mutable_extd3() {
  ::common::RoleExtend3* _msg = _internal_mutable_extd3();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventOnlineTeamsvr.extd3)
  return _msg;
}
inline void InnerGameEventOnlineTeamsvr::set_allocated_extd3(::common::RoleExtend3* extd3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd3_);
  }
  if (extd3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd3));
    if (message_arena != submessage_arena) {
      extd3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extd3, submessage_arena);
    }
    
  } else {
    
  }
  extd3_ = extd3;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventOnlineTeamsvr.extd3)
}

// -------------------------------------------------------------------

// InnerGameEventOnlineFriendsvr

// .inner.InnerFriendInfo oInfo = 1;
inline bool InnerGameEventOnlineFriendsvr::_internal_has_oinfo() const {
  return this != internal_default_instance() && oinfo_ != nullptr;
}
inline bool InnerGameEventOnlineFriendsvr::has_oinfo() const {
  return _internal_has_oinfo();
}
inline const ::inner::InnerFriendInfo& InnerGameEventOnlineFriendsvr::_internal_oinfo() const {
  const ::inner::InnerFriendInfo* p = oinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::inner::InnerFriendInfo&>(
      ::inner::_InnerFriendInfo_default_instance_);
}
inline const ::inner::InnerFriendInfo& InnerGameEventOnlineFriendsvr::oinfo() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventOnlineFriendsvr.oInfo)
  return _internal_oinfo();
}
inline void InnerGameEventOnlineFriendsvr::unsafe_arena_set_allocated_oinfo(
    ::inner::InnerFriendInfo* oinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oinfo_);
  }
  oinfo_ = oinfo;
  if (oinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventOnlineFriendsvr.oInfo)
}
inline ::inner::InnerFriendInfo* InnerGameEventOnlineFriendsvr::release_oinfo() {
  
  ::inner::InnerFriendInfo* temp = oinfo_;
  oinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::inner::InnerFriendInfo* InnerGameEventOnlineFriendsvr::unsafe_arena_release_oinfo() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventOnlineFriendsvr.oInfo)
  
  ::inner::InnerFriendInfo* temp = oinfo_;
  oinfo_ = nullptr;
  return temp;
}
inline ::inner::InnerFriendInfo* InnerGameEventOnlineFriendsvr::_internal_mutable_oinfo() {
  
  if (oinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::inner::InnerFriendInfo>(GetArenaForAllocation());
    oinfo_ = p;
  }
  return oinfo_;
}
inline ::inner::InnerFriendInfo* InnerGameEventOnlineFriendsvr::mutable_oinfo() {
  ::inner::InnerFriendInfo* _msg = _internal_mutable_oinfo();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventOnlineFriendsvr.oInfo)
  return _msg;
}
inline void InnerGameEventOnlineFriendsvr::set_allocated_oinfo(::inner::InnerFriendInfo* oinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oinfo_);
  }
  if (oinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oinfo));
    if (message_arena != submessage_arena) {
      oinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oinfo, submessage_arena);
    }
    
  } else {
    
  }
  oinfo_ = oinfo;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventOnlineFriendsvr.oInfo)
}

// .inner.InnerFriendGiftList oGifts = 2;
inline bool InnerGameEventOnlineFriendsvr::_internal_has_ogifts() const {
  return this != internal_default_instance() && ogifts_ != nullptr;
}
inline bool InnerGameEventOnlineFriendsvr::has_ogifts() const {
  return _internal_has_ogifts();
}
inline const ::inner::InnerFriendGiftList& InnerGameEventOnlineFriendsvr::_internal_ogifts() const {
  const ::inner::InnerFriendGiftList* p = ogifts_;
  return p != nullptr ? *p : reinterpret_cast<const ::inner::InnerFriendGiftList&>(
      ::inner::_InnerFriendGiftList_default_instance_);
}
inline const ::inner::InnerFriendGiftList& InnerGameEventOnlineFriendsvr::ogifts() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventOnlineFriendsvr.oGifts)
  return _internal_ogifts();
}
inline void InnerGameEventOnlineFriendsvr::unsafe_arena_set_allocated_ogifts(
    ::inner::InnerFriendGiftList* ogifts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ogifts_);
  }
  ogifts_ = ogifts;
  if (ogifts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventOnlineFriendsvr.oGifts)
}
inline ::inner::InnerFriendGiftList* InnerGameEventOnlineFriendsvr::release_ogifts() {
  
  ::inner::InnerFriendGiftList* temp = ogifts_;
  ogifts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::inner::InnerFriendGiftList* InnerGameEventOnlineFriendsvr::unsafe_arena_release_ogifts() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventOnlineFriendsvr.oGifts)
  
  ::inner::InnerFriendGiftList* temp = ogifts_;
  ogifts_ = nullptr;
  return temp;
}
inline ::inner::InnerFriendGiftList* InnerGameEventOnlineFriendsvr::_internal_mutable_ogifts() {
  
  if (ogifts_ == nullptr) {
    auto* p = CreateMaybeMessage<::inner::InnerFriendGiftList>(GetArenaForAllocation());
    ogifts_ = p;
  }
  return ogifts_;
}
inline ::inner::InnerFriendGiftList* InnerGameEventOnlineFriendsvr::mutable_ogifts() {
  ::inner::InnerFriendGiftList* _msg = _internal_mutable_ogifts();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventOnlineFriendsvr.oGifts)
  return _msg;
}
inline void InnerGameEventOnlineFriendsvr::set_allocated_ogifts(::inner::InnerFriendGiftList* ogifts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ogifts_);
  }
  if (ogifts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ogifts));
    if (message_arena != submessage_arena) {
      ogifts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ogifts, submessage_arena);
    }
    
  } else {
    
  }
  ogifts_ = ogifts;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventOnlineFriendsvr.oGifts)
}

// uint64 llTeamId = 3;
inline void InnerGameEventOnlineFriendsvr::clear_llteamid() {
  llteamid_ = uint64_t{0u};
}
inline uint64_t InnerGameEventOnlineFriendsvr::_internal_llteamid() const {
  return llteamid_;
}
inline uint64_t InnerGameEventOnlineFriendsvr::llteamid() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventOnlineFriendsvr.llTeamId)
  return _internal_llteamid();
}
inline void InnerGameEventOnlineFriendsvr::_internal_set_llteamid(uint64_t value) {
  
  llteamid_ = value;
}
inline void InnerGameEventOnlineFriendsvr::set_llteamid(uint64_t value) {
  _internal_set_llteamid(value);
  // @@protoc_insertion_point(field_set:inner.InnerGameEventOnlineFriendsvr.llTeamId)
}

// -------------------------------------------------------------------

// InnerGameEventOnlineFamilysvr

// .common.RoleBrief brief = 1;
inline bool InnerGameEventOnlineFamilysvr::_internal_has_brief() const {
  return this != internal_default_instance() && brief_ != nullptr;
}
inline bool InnerGameEventOnlineFamilysvr::has_brief() const {
  return _internal_has_brief();
}
inline const ::common::RoleBrief& InnerGameEventOnlineFamilysvr::_internal_brief() const {
  const ::common::RoleBrief* p = brief_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleBrief&>(
      ::common::_RoleBrief_default_instance_);
}
inline const ::common::RoleBrief& InnerGameEventOnlineFamilysvr::brief() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventOnlineFamilysvr.brief)
  return _internal_brief();
}
inline void InnerGameEventOnlineFamilysvr::unsafe_arena_set_allocated_brief(
    ::common::RoleBrief* brief) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brief_);
  }
  brief_ = brief;
  if (brief) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventOnlineFamilysvr.brief)
}
inline ::common::RoleBrief* InnerGameEventOnlineFamilysvr::release_brief() {
  
  ::common::RoleBrief* temp = brief_;
  brief_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleBrief* InnerGameEventOnlineFamilysvr::unsafe_arena_release_brief() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventOnlineFamilysvr.brief)
  
  ::common::RoleBrief* temp = brief_;
  brief_ = nullptr;
  return temp;
}
inline ::common::RoleBrief* InnerGameEventOnlineFamilysvr::_internal_mutable_brief() {
  
  if (brief_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleBrief>(GetArenaForAllocation());
    brief_ = p;
  }
  return brief_;
}
inline ::common::RoleBrief* InnerGameEventOnlineFamilysvr::mutable_brief() {
  ::common::RoleBrief* _msg = _internal_mutable_brief();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventOnlineFamilysvr.brief)
  return _msg;
}
inline void InnerGameEventOnlineFamilysvr::set_allocated_brief(::common::RoleBrief* brief) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(brief_);
  }
  if (brief) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brief));
    if (message_arena != submessage_arena) {
      brief = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brief, submessage_arena);
    }
    
  } else {
    
  }
  brief_ = brief;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventOnlineFamilysvr.brief)
}

// -------------------------------------------------------------------

// InnerGameEventOffline

// .inner.InnerGameEventOfflineTeamsvr teamsvr = 1;
inline bool InnerGameEventOffline::_internal_has_teamsvr() const {
  return server_case() == kTeamsvr;
}
inline bool InnerGameEventOffline::has_teamsvr() const {
  return _internal_has_teamsvr();
}
inline void InnerGameEventOffline::set_has_teamsvr() {
  _oneof_case_[0] = kTeamsvr;
}
inline void InnerGameEventOffline::clear_teamsvr() {
  if (_internal_has_teamsvr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete server_.teamsvr_;
    }
    clear_has_server();
  }
}
inline ::inner::InnerGameEventOfflineTeamsvr* InnerGameEventOffline::release_teamsvr() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventOffline.teamsvr)
  if (_internal_has_teamsvr()) {
    clear_has_server();
    ::inner::InnerGameEventOfflineTeamsvr* temp = server_.teamsvr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    server_.teamsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventOfflineTeamsvr& InnerGameEventOffline::_internal_teamsvr() const {
  return _internal_has_teamsvr()
      ? *server_.teamsvr_
      : reinterpret_cast< ::inner::InnerGameEventOfflineTeamsvr&>(::inner::_InnerGameEventOfflineTeamsvr_default_instance_);
}
inline const ::inner::InnerGameEventOfflineTeamsvr& InnerGameEventOffline::teamsvr() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventOffline.teamsvr)
  return _internal_teamsvr();
}
inline ::inner::InnerGameEventOfflineTeamsvr* InnerGameEventOffline::unsafe_arena_release_teamsvr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEventOffline.teamsvr)
  if (_internal_has_teamsvr()) {
    clear_has_server();
    ::inner::InnerGameEventOfflineTeamsvr* temp = server_.teamsvr_;
    server_.teamsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEventOffline::unsafe_arena_set_allocated_teamsvr(::inner::InnerGameEventOfflineTeamsvr* teamsvr) {
  clear_server();
  if (teamsvr) {
    set_has_teamsvr();
    server_.teamsvr_ = teamsvr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventOffline.teamsvr)
}
inline ::inner::InnerGameEventOfflineTeamsvr* InnerGameEventOffline::_internal_mutable_teamsvr() {
  if (!_internal_has_teamsvr()) {
    clear_server();
    set_has_teamsvr();
    server_.teamsvr_ = CreateMaybeMessage< ::inner::InnerGameEventOfflineTeamsvr >(GetArenaForAllocation());
  }
  return server_.teamsvr_;
}
inline ::inner::InnerGameEventOfflineTeamsvr* InnerGameEventOffline::mutable_teamsvr() {
  ::inner::InnerGameEventOfflineTeamsvr* _msg = _internal_mutable_teamsvr();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventOffline.teamsvr)
  return _msg;
}

// .inner.InnerGameEventOfflineFriendsvr friendsvr = 2;
inline bool InnerGameEventOffline::_internal_has_friendsvr() const {
  return server_case() == kFriendsvr;
}
inline bool InnerGameEventOffline::has_friendsvr() const {
  return _internal_has_friendsvr();
}
inline void InnerGameEventOffline::set_has_friendsvr() {
  _oneof_case_[0] = kFriendsvr;
}
inline void InnerGameEventOffline::clear_friendsvr() {
  if (_internal_has_friendsvr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete server_.friendsvr_;
    }
    clear_has_server();
  }
}
inline ::inner::InnerGameEventOfflineFriendsvr* InnerGameEventOffline::release_friendsvr() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventOffline.friendsvr)
  if (_internal_has_friendsvr()) {
    clear_has_server();
    ::inner::InnerGameEventOfflineFriendsvr* temp = server_.friendsvr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    server_.friendsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventOfflineFriendsvr& InnerGameEventOffline::_internal_friendsvr() const {
  return _internal_has_friendsvr()
      ? *server_.friendsvr_
      : reinterpret_cast< ::inner::InnerGameEventOfflineFriendsvr&>(::inner::_InnerGameEventOfflineFriendsvr_default_instance_);
}
inline const ::inner::InnerGameEventOfflineFriendsvr& InnerGameEventOffline::friendsvr() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventOffline.friendsvr)
  return _internal_friendsvr();
}
inline ::inner::InnerGameEventOfflineFriendsvr* InnerGameEventOffline::unsafe_arena_release_friendsvr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEventOffline.friendsvr)
  if (_internal_has_friendsvr()) {
    clear_has_server();
    ::inner::InnerGameEventOfflineFriendsvr* temp = server_.friendsvr_;
    server_.friendsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEventOffline::unsafe_arena_set_allocated_friendsvr(::inner::InnerGameEventOfflineFriendsvr* friendsvr) {
  clear_server();
  if (friendsvr) {
    set_has_friendsvr();
    server_.friendsvr_ = friendsvr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventOffline.friendsvr)
}
inline ::inner::InnerGameEventOfflineFriendsvr* InnerGameEventOffline::_internal_mutable_friendsvr() {
  if (!_internal_has_friendsvr()) {
    clear_server();
    set_has_friendsvr();
    server_.friendsvr_ = CreateMaybeMessage< ::inner::InnerGameEventOfflineFriendsvr >(GetArenaForAllocation());
  }
  return server_.friendsvr_;
}
inline ::inner::InnerGameEventOfflineFriendsvr* InnerGameEventOffline::mutable_friendsvr() {
  ::inner::InnerGameEventOfflineFriendsvr* _msg = _internal_mutable_friendsvr();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventOffline.friendsvr)
  return _msg;
}

// .inner.InnerGameEventOfflineFamilysvr familysvr = 3;
inline bool InnerGameEventOffline::_internal_has_familysvr() const {
  return server_case() == kFamilysvr;
}
inline bool InnerGameEventOffline::has_familysvr() const {
  return _internal_has_familysvr();
}
inline void InnerGameEventOffline::set_has_familysvr() {
  _oneof_case_[0] = kFamilysvr;
}
inline void InnerGameEventOffline::clear_familysvr() {
  if (_internal_has_familysvr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete server_.familysvr_;
    }
    clear_has_server();
  }
}
inline ::inner::InnerGameEventOfflineFamilysvr* InnerGameEventOffline::release_familysvr() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventOffline.familysvr)
  if (_internal_has_familysvr()) {
    clear_has_server();
    ::inner::InnerGameEventOfflineFamilysvr* temp = server_.familysvr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    server_.familysvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventOfflineFamilysvr& InnerGameEventOffline::_internal_familysvr() const {
  return _internal_has_familysvr()
      ? *server_.familysvr_
      : reinterpret_cast< ::inner::InnerGameEventOfflineFamilysvr&>(::inner::_InnerGameEventOfflineFamilysvr_default_instance_);
}
inline const ::inner::InnerGameEventOfflineFamilysvr& InnerGameEventOffline::familysvr() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventOffline.familysvr)
  return _internal_familysvr();
}
inline ::inner::InnerGameEventOfflineFamilysvr* InnerGameEventOffline::unsafe_arena_release_familysvr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEventOffline.familysvr)
  if (_internal_has_familysvr()) {
    clear_has_server();
    ::inner::InnerGameEventOfflineFamilysvr* temp = server_.familysvr_;
    server_.familysvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEventOffline::unsafe_arena_set_allocated_familysvr(::inner::InnerGameEventOfflineFamilysvr* familysvr) {
  clear_server();
  if (familysvr) {
    set_has_familysvr();
    server_.familysvr_ = familysvr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventOffline.familysvr)
}
inline ::inner::InnerGameEventOfflineFamilysvr* InnerGameEventOffline::_internal_mutable_familysvr() {
  if (!_internal_has_familysvr()) {
    clear_server();
    set_has_familysvr();
    server_.familysvr_ = CreateMaybeMessage< ::inner::InnerGameEventOfflineFamilysvr >(GetArenaForAllocation());
  }
  return server_.familysvr_;
}
inline ::inner::InnerGameEventOfflineFamilysvr* InnerGameEventOffline::mutable_familysvr() {
  ::inner::InnerGameEventOfflineFamilysvr* _msg = _internal_mutable_familysvr();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventOffline.familysvr)
  return _msg;
}

inline bool InnerGameEventOffline::has_server() const {
  return server_case() != SERVER_NOT_SET;
}
inline void InnerGameEventOffline::clear_has_server() {
  _oneof_case_[0] = SERVER_NOT_SET;
}
inline InnerGameEventOffline::ServerCase InnerGameEventOffline::server_case() const {
  return InnerGameEventOffline::ServerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InnerGameEventOfflineTeamsvr

// -------------------------------------------------------------------

// InnerGameEventOfflineFriendsvr

// -------------------------------------------------------------------

// InnerGameEventOfflineFamilysvr

// -------------------------------------------------------------------

// InnerGameEventChangeMap

// .inner.InnerGameEventChangeMapTeamsvr teamsvr = 1;
inline bool InnerGameEventChangeMap::_internal_has_teamsvr() const {
  return server_case() == kTeamsvr;
}
inline bool InnerGameEventChangeMap::has_teamsvr() const {
  return _internal_has_teamsvr();
}
inline void InnerGameEventChangeMap::set_has_teamsvr() {
  _oneof_case_[0] = kTeamsvr;
}
inline void InnerGameEventChangeMap::clear_teamsvr() {
  if (_internal_has_teamsvr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete server_.teamsvr_;
    }
    clear_has_server();
  }
}
inline ::inner::InnerGameEventChangeMapTeamsvr* InnerGameEventChangeMap::release_teamsvr() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventChangeMap.teamsvr)
  if (_internal_has_teamsvr()) {
    clear_has_server();
    ::inner::InnerGameEventChangeMapTeamsvr* temp = server_.teamsvr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    server_.teamsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventChangeMapTeamsvr& InnerGameEventChangeMap::_internal_teamsvr() const {
  return _internal_has_teamsvr()
      ? *server_.teamsvr_
      : reinterpret_cast< ::inner::InnerGameEventChangeMapTeamsvr&>(::inner::_InnerGameEventChangeMapTeamsvr_default_instance_);
}
inline const ::inner::InnerGameEventChangeMapTeamsvr& InnerGameEventChangeMap::teamsvr() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventChangeMap.teamsvr)
  return _internal_teamsvr();
}
inline ::inner::InnerGameEventChangeMapTeamsvr* InnerGameEventChangeMap::unsafe_arena_release_teamsvr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEventChangeMap.teamsvr)
  if (_internal_has_teamsvr()) {
    clear_has_server();
    ::inner::InnerGameEventChangeMapTeamsvr* temp = server_.teamsvr_;
    server_.teamsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEventChangeMap::unsafe_arena_set_allocated_teamsvr(::inner::InnerGameEventChangeMapTeamsvr* teamsvr) {
  clear_server();
  if (teamsvr) {
    set_has_teamsvr();
    server_.teamsvr_ = teamsvr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventChangeMap.teamsvr)
}
inline ::inner::InnerGameEventChangeMapTeamsvr* InnerGameEventChangeMap::_internal_mutable_teamsvr() {
  if (!_internal_has_teamsvr()) {
    clear_server();
    set_has_teamsvr();
    server_.teamsvr_ = CreateMaybeMessage< ::inner::InnerGameEventChangeMapTeamsvr >(GetArenaForAllocation());
  }
  return server_.teamsvr_;
}
inline ::inner::InnerGameEventChangeMapTeamsvr* InnerGameEventChangeMap::mutable_teamsvr() {
  ::inner::InnerGameEventChangeMapTeamsvr* _msg = _internal_mutable_teamsvr();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventChangeMap.teamsvr)
  return _msg;
}

// .inner.InnerGameEventChangeMapFriendsvr friendsvr = 2;
inline bool InnerGameEventChangeMap::_internal_has_friendsvr() const {
  return server_case() == kFriendsvr;
}
inline bool InnerGameEventChangeMap::has_friendsvr() const {
  return _internal_has_friendsvr();
}
inline void InnerGameEventChangeMap::set_has_friendsvr() {
  _oneof_case_[0] = kFriendsvr;
}
inline void InnerGameEventChangeMap::clear_friendsvr() {
  if (_internal_has_friendsvr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete server_.friendsvr_;
    }
    clear_has_server();
  }
}
inline ::inner::InnerGameEventChangeMapFriendsvr* InnerGameEventChangeMap::release_friendsvr() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventChangeMap.friendsvr)
  if (_internal_has_friendsvr()) {
    clear_has_server();
    ::inner::InnerGameEventChangeMapFriendsvr* temp = server_.friendsvr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    server_.friendsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventChangeMapFriendsvr& InnerGameEventChangeMap::_internal_friendsvr() const {
  return _internal_has_friendsvr()
      ? *server_.friendsvr_
      : reinterpret_cast< ::inner::InnerGameEventChangeMapFriendsvr&>(::inner::_InnerGameEventChangeMapFriendsvr_default_instance_);
}
inline const ::inner::InnerGameEventChangeMapFriendsvr& InnerGameEventChangeMap::friendsvr() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventChangeMap.friendsvr)
  return _internal_friendsvr();
}
inline ::inner::InnerGameEventChangeMapFriendsvr* InnerGameEventChangeMap::unsafe_arena_release_friendsvr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEventChangeMap.friendsvr)
  if (_internal_has_friendsvr()) {
    clear_has_server();
    ::inner::InnerGameEventChangeMapFriendsvr* temp = server_.friendsvr_;
    server_.friendsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEventChangeMap::unsafe_arena_set_allocated_friendsvr(::inner::InnerGameEventChangeMapFriendsvr* friendsvr) {
  clear_server();
  if (friendsvr) {
    set_has_friendsvr();
    server_.friendsvr_ = friendsvr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventChangeMap.friendsvr)
}
inline ::inner::InnerGameEventChangeMapFriendsvr* InnerGameEventChangeMap::_internal_mutable_friendsvr() {
  if (!_internal_has_friendsvr()) {
    clear_server();
    set_has_friendsvr();
    server_.friendsvr_ = CreateMaybeMessage< ::inner::InnerGameEventChangeMapFriendsvr >(GetArenaForAllocation());
  }
  return server_.friendsvr_;
}
inline ::inner::InnerGameEventChangeMapFriendsvr* InnerGameEventChangeMap::mutable_friendsvr() {
  ::inner::InnerGameEventChangeMapFriendsvr* _msg = _internal_mutable_friendsvr();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventChangeMap.friendsvr)
  return _msg;
}

// .inner.InnerGameEventChangeMapFamilysvr familysvr = 3;
inline bool InnerGameEventChangeMap::_internal_has_familysvr() const {
  return server_case() == kFamilysvr;
}
inline bool InnerGameEventChangeMap::has_familysvr() const {
  return _internal_has_familysvr();
}
inline void InnerGameEventChangeMap::set_has_familysvr() {
  _oneof_case_[0] = kFamilysvr;
}
inline void InnerGameEventChangeMap::clear_familysvr() {
  if (_internal_has_familysvr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete server_.familysvr_;
    }
    clear_has_server();
  }
}
inline ::inner::InnerGameEventChangeMapFamilysvr* InnerGameEventChangeMap::release_familysvr() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventChangeMap.familysvr)
  if (_internal_has_familysvr()) {
    clear_has_server();
    ::inner::InnerGameEventChangeMapFamilysvr* temp = server_.familysvr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    server_.familysvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventChangeMapFamilysvr& InnerGameEventChangeMap::_internal_familysvr() const {
  return _internal_has_familysvr()
      ? *server_.familysvr_
      : reinterpret_cast< ::inner::InnerGameEventChangeMapFamilysvr&>(::inner::_InnerGameEventChangeMapFamilysvr_default_instance_);
}
inline const ::inner::InnerGameEventChangeMapFamilysvr& InnerGameEventChangeMap::familysvr() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventChangeMap.familysvr)
  return _internal_familysvr();
}
inline ::inner::InnerGameEventChangeMapFamilysvr* InnerGameEventChangeMap::unsafe_arena_release_familysvr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEventChangeMap.familysvr)
  if (_internal_has_familysvr()) {
    clear_has_server();
    ::inner::InnerGameEventChangeMapFamilysvr* temp = server_.familysvr_;
    server_.familysvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEventChangeMap::unsafe_arena_set_allocated_familysvr(::inner::InnerGameEventChangeMapFamilysvr* familysvr) {
  clear_server();
  if (familysvr) {
    set_has_familysvr();
    server_.familysvr_ = familysvr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventChangeMap.familysvr)
}
inline ::inner::InnerGameEventChangeMapFamilysvr* InnerGameEventChangeMap::_internal_mutable_familysvr() {
  if (!_internal_has_familysvr()) {
    clear_server();
    set_has_familysvr();
    server_.familysvr_ = CreateMaybeMessage< ::inner::InnerGameEventChangeMapFamilysvr >(GetArenaForAllocation());
  }
  return server_.familysvr_;
}
inline ::inner::InnerGameEventChangeMapFamilysvr* InnerGameEventChangeMap::mutable_familysvr() {
  ::inner::InnerGameEventChangeMapFamilysvr* _msg = _internal_mutable_familysvr();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventChangeMap.familysvr)
  return _msg;
}

// uint32 uiProcDirect = 100;
inline void InnerGameEventChangeMap::clear_uiprocdirect() {
  uiprocdirect_ = 0u;
}
inline uint32_t InnerGameEventChangeMap::_internal_uiprocdirect() const {
  return uiprocdirect_;
}
inline uint32_t InnerGameEventChangeMap::uiprocdirect() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventChangeMap.uiProcDirect)
  return _internal_uiprocdirect();
}
inline void InnerGameEventChangeMap::_internal_set_uiprocdirect(uint32_t value) {
  
  uiprocdirect_ = value;
}
inline void InnerGameEventChangeMap::set_uiprocdirect(uint32_t value) {
  _internal_set_uiprocdirect(value);
  // @@protoc_insertion_point(field_set:inner.InnerGameEventChangeMap.uiProcDirect)
}

inline bool InnerGameEventChangeMap::has_server() const {
  return server_case() != SERVER_NOT_SET;
}
inline void InnerGameEventChangeMap::clear_has_server() {
  _oneof_case_[0] = SERVER_NOT_SET;
}
inline InnerGameEventChangeMap::ServerCase InnerGameEventChangeMap::server_case() const {
  return InnerGameEventChangeMap::ServerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InnerGameEventChangeMapTeamsvr

// .common.RoleBrief brief = 1;
inline bool InnerGameEventChangeMapTeamsvr::_internal_has_brief() const {
  return this != internal_default_instance() && brief_ != nullptr;
}
inline bool InnerGameEventChangeMapTeamsvr::has_brief() const {
  return _internal_has_brief();
}
inline const ::common::RoleBrief& InnerGameEventChangeMapTeamsvr::_internal_brief() const {
  const ::common::RoleBrief* p = brief_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleBrief&>(
      ::common::_RoleBrief_default_instance_);
}
inline const ::common::RoleBrief& InnerGameEventChangeMapTeamsvr::brief() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventChangeMapTeamsvr.brief)
  return _internal_brief();
}
inline void InnerGameEventChangeMapTeamsvr::unsafe_arena_set_allocated_brief(
    ::common::RoleBrief* brief) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brief_);
  }
  brief_ = brief;
  if (brief) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventChangeMapTeamsvr.brief)
}
inline ::common::RoleBrief* InnerGameEventChangeMapTeamsvr::release_brief() {
  
  ::common::RoleBrief* temp = brief_;
  brief_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleBrief* InnerGameEventChangeMapTeamsvr::unsafe_arena_release_brief() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventChangeMapTeamsvr.brief)
  
  ::common::RoleBrief* temp = brief_;
  brief_ = nullptr;
  return temp;
}
inline ::common::RoleBrief* InnerGameEventChangeMapTeamsvr::_internal_mutable_brief() {
  
  if (brief_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleBrief>(GetArenaForAllocation());
    brief_ = p;
  }
  return brief_;
}
inline ::common::RoleBrief* InnerGameEventChangeMapTeamsvr::mutable_brief() {
  ::common::RoleBrief* _msg = _internal_mutable_brief();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventChangeMapTeamsvr.brief)
  return _msg;
}
inline void InnerGameEventChangeMapTeamsvr::set_allocated_brief(::common::RoleBrief* brief) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(brief_);
  }
  if (brief) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brief));
    if (message_arena != submessage_arena) {
      brief = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brief, submessage_arena);
    }
    
  } else {
    
  }
  brief_ = brief;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventChangeMapTeamsvr.brief)
}

// .common.RoleExtend1 extd1 = 2;
inline bool InnerGameEventChangeMapTeamsvr::_internal_has_extd1() const {
  return this != internal_default_instance() && extd1_ != nullptr;
}
inline bool InnerGameEventChangeMapTeamsvr::has_extd1() const {
  return _internal_has_extd1();
}
inline const ::common::RoleExtend1& InnerGameEventChangeMapTeamsvr::_internal_extd1() const {
  const ::common::RoleExtend1* p = extd1_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleExtend1&>(
      ::common::_RoleExtend1_default_instance_);
}
inline const ::common::RoleExtend1& InnerGameEventChangeMapTeamsvr::extd1() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventChangeMapTeamsvr.extd1)
  return _internal_extd1();
}
inline void InnerGameEventChangeMapTeamsvr::unsafe_arena_set_allocated_extd1(
    ::common::RoleExtend1* extd1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd1_);
  }
  extd1_ = extd1;
  if (extd1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventChangeMapTeamsvr.extd1)
}
inline ::common::RoleExtend1* InnerGameEventChangeMapTeamsvr::release_extd1() {
  
  ::common::RoleExtend1* temp = extd1_;
  extd1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleExtend1* InnerGameEventChangeMapTeamsvr::unsafe_arena_release_extd1() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventChangeMapTeamsvr.extd1)
  
  ::common::RoleExtend1* temp = extd1_;
  extd1_ = nullptr;
  return temp;
}
inline ::common::RoleExtend1* InnerGameEventChangeMapTeamsvr::_internal_mutable_extd1() {
  
  if (extd1_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleExtend1>(GetArenaForAllocation());
    extd1_ = p;
  }
  return extd1_;
}
inline ::common::RoleExtend1* InnerGameEventChangeMapTeamsvr::mutable_extd1() {
  ::common::RoleExtend1* _msg = _internal_mutable_extd1();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventChangeMapTeamsvr.extd1)
  return _msg;
}
inline void InnerGameEventChangeMapTeamsvr::set_allocated_extd1(::common::RoleExtend1* extd1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd1_);
  }
  if (extd1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd1));
    if (message_arena != submessage_arena) {
      extd1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extd1, submessage_arena);
    }
    
  } else {
    
  }
  extd1_ = extd1;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventChangeMapTeamsvr.extd1)
}

// .common.RoleExtend2 extd2 = 3;
inline bool InnerGameEventChangeMapTeamsvr::_internal_has_extd2() const {
  return this != internal_default_instance() && extd2_ != nullptr;
}
inline bool InnerGameEventChangeMapTeamsvr::has_extd2() const {
  return _internal_has_extd2();
}
inline const ::common::RoleExtend2& InnerGameEventChangeMapTeamsvr::_internal_extd2() const {
  const ::common::RoleExtend2* p = extd2_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleExtend2&>(
      ::common::_RoleExtend2_default_instance_);
}
inline const ::common::RoleExtend2& InnerGameEventChangeMapTeamsvr::extd2() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventChangeMapTeamsvr.extd2)
  return _internal_extd2();
}
inline void InnerGameEventChangeMapTeamsvr::unsafe_arena_set_allocated_extd2(
    ::common::RoleExtend2* extd2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd2_);
  }
  extd2_ = extd2;
  if (extd2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventChangeMapTeamsvr.extd2)
}
inline ::common::RoleExtend2* InnerGameEventChangeMapTeamsvr::release_extd2() {
  
  ::common::RoleExtend2* temp = extd2_;
  extd2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleExtend2* InnerGameEventChangeMapTeamsvr::unsafe_arena_release_extd2() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventChangeMapTeamsvr.extd2)
  
  ::common::RoleExtend2* temp = extd2_;
  extd2_ = nullptr;
  return temp;
}
inline ::common::RoleExtend2* InnerGameEventChangeMapTeamsvr::_internal_mutable_extd2() {
  
  if (extd2_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleExtend2>(GetArenaForAllocation());
    extd2_ = p;
  }
  return extd2_;
}
inline ::common::RoleExtend2* InnerGameEventChangeMapTeamsvr::mutable_extd2() {
  ::common::RoleExtend2* _msg = _internal_mutable_extd2();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventChangeMapTeamsvr.extd2)
  return _msg;
}
inline void InnerGameEventChangeMapTeamsvr::set_allocated_extd2(::common::RoleExtend2* extd2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd2_);
  }
  if (extd2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd2));
    if (message_arena != submessage_arena) {
      extd2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extd2, submessage_arena);
    }
    
  } else {
    
  }
  extd2_ = extd2;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventChangeMapTeamsvr.extd2)
}

// .common.RoleExtend3 extd3 = 4;
inline bool InnerGameEventChangeMapTeamsvr::_internal_has_extd3() const {
  return this != internal_default_instance() && extd3_ != nullptr;
}
inline bool InnerGameEventChangeMapTeamsvr::has_extd3() const {
  return _internal_has_extd3();
}
inline const ::common::RoleExtend3& InnerGameEventChangeMapTeamsvr::_internal_extd3() const {
  const ::common::RoleExtend3* p = extd3_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleExtend3&>(
      ::common::_RoleExtend3_default_instance_);
}
inline const ::common::RoleExtend3& InnerGameEventChangeMapTeamsvr::extd3() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventChangeMapTeamsvr.extd3)
  return _internal_extd3();
}
inline void InnerGameEventChangeMapTeamsvr::unsafe_arena_set_allocated_extd3(
    ::common::RoleExtend3* extd3) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd3_);
  }
  extd3_ = extd3;
  if (extd3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventChangeMapTeamsvr.extd3)
}
inline ::common::RoleExtend3* InnerGameEventChangeMapTeamsvr::release_extd3() {
  
  ::common::RoleExtend3* temp = extd3_;
  extd3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleExtend3* InnerGameEventChangeMapTeamsvr::unsafe_arena_release_extd3() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventChangeMapTeamsvr.extd3)
  
  ::common::RoleExtend3* temp = extd3_;
  extd3_ = nullptr;
  return temp;
}
inline ::common::RoleExtend3* InnerGameEventChangeMapTeamsvr::_internal_mutable_extd3() {
  
  if (extd3_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleExtend3>(GetArenaForAllocation());
    extd3_ = p;
  }
  return extd3_;
}
inline ::common::RoleExtend3* InnerGameEventChangeMapTeamsvr::mutable_extd3() {
  ::common::RoleExtend3* _msg = _internal_mutable_extd3();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventChangeMapTeamsvr.extd3)
  return _msg;
}
inline void InnerGameEventChangeMapTeamsvr::set_allocated_extd3(::common::RoleExtend3* extd3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd3_);
  }
  if (extd3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd3));
    if (message_arena != submessage_arena) {
      extd3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extd3, submessage_arena);
    }
    
  } else {
    
  }
  extd3_ = extd3;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventChangeMapTeamsvr.extd3)
}

// .common.ExtendFight3v3 f33 = 5;
inline bool InnerGameEventChangeMapTeamsvr::_internal_has_f33() const {
  return this != internal_default_instance() && f33_ != nullptr;
}
inline bool InnerGameEventChangeMapTeamsvr::has_f33() const {
  return _internal_has_f33();
}
inline const ::common::ExtendFight3v3& InnerGameEventChangeMapTeamsvr::_internal_f33() const {
  const ::common::ExtendFight3v3* p = f33_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ExtendFight3v3&>(
      ::common::_ExtendFight3v3_default_instance_);
}
inline const ::common::ExtendFight3v3& InnerGameEventChangeMapTeamsvr::f33() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventChangeMapTeamsvr.f33)
  return _internal_f33();
}
inline void InnerGameEventChangeMapTeamsvr::unsafe_arena_set_allocated_f33(
    ::common::ExtendFight3v3* f33) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f33_);
  }
  f33_ = f33;
  if (f33) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventChangeMapTeamsvr.f33)
}
inline ::common::ExtendFight3v3* InnerGameEventChangeMapTeamsvr::release_f33() {
  
  ::common::ExtendFight3v3* temp = f33_;
  f33_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ExtendFight3v3* InnerGameEventChangeMapTeamsvr::unsafe_arena_release_f33() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventChangeMapTeamsvr.f33)
  
  ::common::ExtendFight3v3* temp = f33_;
  f33_ = nullptr;
  return temp;
}
inline ::common::ExtendFight3v3* InnerGameEventChangeMapTeamsvr::_internal_mutable_f33() {
  
  if (f33_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ExtendFight3v3>(GetArenaForAllocation());
    f33_ = p;
  }
  return f33_;
}
inline ::common::ExtendFight3v3* InnerGameEventChangeMapTeamsvr::mutable_f33() {
  ::common::ExtendFight3v3* _msg = _internal_mutable_f33();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventChangeMapTeamsvr.f33)
  return _msg;
}
inline void InnerGameEventChangeMapTeamsvr::set_allocated_f33(::common::ExtendFight3v3* f33) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(f33_);
  }
  if (f33) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f33));
    if (message_arena != submessage_arena) {
      f33 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f33, submessage_arena);
    }
    
  } else {
    
  }
  f33_ = f33;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventChangeMapTeamsvr.f33)
}

// .common.ExtendFight5v5 f55 = 6;
inline bool InnerGameEventChangeMapTeamsvr::_internal_has_f55() const {
  return this != internal_default_instance() && f55_ != nullptr;
}
inline bool InnerGameEventChangeMapTeamsvr::has_f55() const {
  return _internal_has_f55();
}
inline const ::common::ExtendFight5v5& InnerGameEventChangeMapTeamsvr::_internal_f55() const {
  const ::common::ExtendFight5v5* p = f55_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ExtendFight5v5&>(
      ::common::_ExtendFight5v5_default_instance_);
}
inline const ::common::ExtendFight5v5& InnerGameEventChangeMapTeamsvr::f55() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventChangeMapTeamsvr.f55)
  return _internal_f55();
}
inline void InnerGameEventChangeMapTeamsvr::unsafe_arena_set_allocated_f55(
    ::common::ExtendFight5v5* f55) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f55_);
  }
  f55_ = f55;
  if (f55) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventChangeMapTeamsvr.f55)
}
inline ::common::ExtendFight5v5* InnerGameEventChangeMapTeamsvr::release_f55() {
  
  ::common::ExtendFight5v5* temp = f55_;
  f55_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ExtendFight5v5* InnerGameEventChangeMapTeamsvr::unsafe_arena_release_f55() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventChangeMapTeamsvr.f55)
  
  ::common::ExtendFight5v5* temp = f55_;
  f55_ = nullptr;
  return temp;
}
inline ::common::ExtendFight5v5* InnerGameEventChangeMapTeamsvr::_internal_mutable_f55() {
  
  if (f55_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ExtendFight5v5>(GetArenaForAllocation());
    f55_ = p;
  }
  return f55_;
}
inline ::common::ExtendFight5v5* InnerGameEventChangeMapTeamsvr::mutable_f55() {
  ::common::ExtendFight5v5* _msg = _internal_mutable_f55();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventChangeMapTeamsvr.f55)
  return _msg;
}
inline void InnerGameEventChangeMapTeamsvr::set_allocated_f55(::common::ExtendFight5v5* f55) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(f55_);
  }
  if (f55) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f55));
    if (message_arena != submessage_arena) {
      f55 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f55, submessage_arena);
    }
    
  } else {
    
  }
  f55_ = f55;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventChangeMapTeamsvr.f55)
}

// uint32 sceneHashId = 7;
inline void InnerGameEventChangeMapTeamsvr::clear_scenehashid() {
  scenehashid_ = 0u;
}
inline uint32_t InnerGameEventChangeMapTeamsvr::_internal_scenehashid() const {
  return scenehashid_;
}
inline uint32_t InnerGameEventChangeMapTeamsvr::scenehashid() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventChangeMapTeamsvr.sceneHashId)
  return _internal_scenehashid();
}
inline void InnerGameEventChangeMapTeamsvr::_internal_set_scenehashid(uint32_t value) {
  
  scenehashid_ = value;
}
inline void InnerGameEventChangeMapTeamsvr::set_scenehashid(uint32_t value) {
  _internal_set_scenehashid(value);
  // @@protoc_insertion_point(field_set:inner.InnerGameEventChangeMapTeamsvr.sceneHashId)
}

// -------------------------------------------------------------------

// InnerGameEventChangeMapFriendsvr

// -------------------------------------------------------------------

// InnerGameEventChangeMapFamilysvr

// -------------------------------------------------------------------

// InnerGameEventDeath

// .inner.InnerGameEventDeathTeamsvr teamsvr = 1;
inline bool InnerGameEventDeath::_internal_has_teamsvr() const {
  return server_case() == kTeamsvr;
}
inline bool InnerGameEventDeath::has_teamsvr() const {
  return _internal_has_teamsvr();
}
inline void InnerGameEventDeath::set_has_teamsvr() {
  _oneof_case_[0] = kTeamsvr;
}
inline void InnerGameEventDeath::clear_teamsvr() {
  if (_internal_has_teamsvr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete server_.teamsvr_;
    }
    clear_has_server();
  }
}
inline ::inner::InnerGameEventDeathTeamsvr* InnerGameEventDeath::release_teamsvr() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventDeath.teamsvr)
  if (_internal_has_teamsvr()) {
    clear_has_server();
    ::inner::InnerGameEventDeathTeamsvr* temp = server_.teamsvr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    server_.teamsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventDeathTeamsvr& InnerGameEventDeath::_internal_teamsvr() const {
  return _internal_has_teamsvr()
      ? *server_.teamsvr_
      : reinterpret_cast< ::inner::InnerGameEventDeathTeamsvr&>(::inner::_InnerGameEventDeathTeamsvr_default_instance_);
}
inline const ::inner::InnerGameEventDeathTeamsvr& InnerGameEventDeath::teamsvr() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventDeath.teamsvr)
  return _internal_teamsvr();
}
inline ::inner::InnerGameEventDeathTeamsvr* InnerGameEventDeath::unsafe_arena_release_teamsvr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEventDeath.teamsvr)
  if (_internal_has_teamsvr()) {
    clear_has_server();
    ::inner::InnerGameEventDeathTeamsvr* temp = server_.teamsvr_;
    server_.teamsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEventDeath::unsafe_arena_set_allocated_teamsvr(::inner::InnerGameEventDeathTeamsvr* teamsvr) {
  clear_server();
  if (teamsvr) {
    set_has_teamsvr();
    server_.teamsvr_ = teamsvr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventDeath.teamsvr)
}
inline ::inner::InnerGameEventDeathTeamsvr* InnerGameEventDeath::_internal_mutable_teamsvr() {
  if (!_internal_has_teamsvr()) {
    clear_server();
    set_has_teamsvr();
    server_.teamsvr_ = CreateMaybeMessage< ::inner::InnerGameEventDeathTeamsvr >(GetArenaForAllocation());
  }
  return server_.teamsvr_;
}
inline ::inner::InnerGameEventDeathTeamsvr* InnerGameEventDeath::mutable_teamsvr() {
  ::inner::InnerGameEventDeathTeamsvr* _msg = _internal_mutable_teamsvr();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventDeath.teamsvr)
  return _msg;
}

// .inner.InnerGameEventDeathFriendsvr friendsvr = 2;
inline bool InnerGameEventDeath::_internal_has_friendsvr() const {
  return server_case() == kFriendsvr;
}
inline bool InnerGameEventDeath::has_friendsvr() const {
  return _internal_has_friendsvr();
}
inline void InnerGameEventDeath::set_has_friendsvr() {
  _oneof_case_[0] = kFriendsvr;
}
inline void InnerGameEventDeath::clear_friendsvr() {
  if (_internal_has_friendsvr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete server_.friendsvr_;
    }
    clear_has_server();
  }
}
inline ::inner::InnerGameEventDeathFriendsvr* InnerGameEventDeath::release_friendsvr() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventDeath.friendsvr)
  if (_internal_has_friendsvr()) {
    clear_has_server();
    ::inner::InnerGameEventDeathFriendsvr* temp = server_.friendsvr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    server_.friendsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventDeathFriendsvr& InnerGameEventDeath::_internal_friendsvr() const {
  return _internal_has_friendsvr()
      ? *server_.friendsvr_
      : reinterpret_cast< ::inner::InnerGameEventDeathFriendsvr&>(::inner::_InnerGameEventDeathFriendsvr_default_instance_);
}
inline const ::inner::InnerGameEventDeathFriendsvr& InnerGameEventDeath::friendsvr() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventDeath.friendsvr)
  return _internal_friendsvr();
}
inline ::inner::InnerGameEventDeathFriendsvr* InnerGameEventDeath::unsafe_arena_release_friendsvr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEventDeath.friendsvr)
  if (_internal_has_friendsvr()) {
    clear_has_server();
    ::inner::InnerGameEventDeathFriendsvr* temp = server_.friendsvr_;
    server_.friendsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEventDeath::unsafe_arena_set_allocated_friendsvr(::inner::InnerGameEventDeathFriendsvr* friendsvr) {
  clear_server();
  if (friendsvr) {
    set_has_friendsvr();
    server_.friendsvr_ = friendsvr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventDeath.friendsvr)
}
inline ::inner::InnerGameEventDeathFriendsvr* InnerGameEventDeath::_internal_mutable_friendsvr() {
  if (!_internal_has_friendsvr()) {
    clear_server();
    set_has_friendsvr();
    server_.friendsvr_ = CreateMaybeMessage< ::inner::InnerGameEventDeathFriendsvr >(GetArenaForAllocation());
  }
  return server_.friendsvr_;
}
inline ::inner::InnerGameEventDeathFriendsvr* InnerGameEventDeath::mutable_friendsvr() {
  ::inner::InnerGameEventDeathFriendsvr* _msg = _internal_mutable_friendsvr();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventDeath.friendsvr)
  return _msg;
}

inline bool InnerGameEventDeath::has_server() const {
  return server_case() != SERVER_NOT_SET;
}
inline void InnerGameEventDeath::clear_has_server() {
  _oneof_case_[0] = SERVER_NOT_SET;
}
inline InnerGameEventDeath::ServerCase InnerGameEventDeath::server_case() const {
  return InnerGameEventDeath::ServerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InnerGameEventDeathTeamsvr

// .common.RoleExtend3 extd3 = 1;
inline bool InnerGameEventDeathTeamsvr::_internal_has_extd3() const {
  return this != internal_default_instance() && extd3_ != nullptr;
}
inline bool InnerGameEventDeathTeamsvr::has_extd3() const {
  return _internal_has_extd3();
}
inline const ::common::RoleExtend3& InnerGameEventDeathTeamsvr::_internal_extd3() const {
  const ::common::RoleExtend3* p = extd3_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleExtend3&>(
      ::common::_RoleExtend3_default_instance_);
}
inline const ::common::RoleExtend3& InnerGameEventDeathTeamsvr::extd3() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventDeathTeamsvr.extd3)
  return _internal_extd3();
}
inline void InnerGameEventDeathTeamsvr::unsafe_arena_set_allocated_extd3(
    ::common::RoleExtend3* extd3) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd3_);
  }
  extd3_ = extd3;
  if (extd3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventDeathTeamsvr.extd3)
}
inline ::common::RoleExtend3* InnerGameEventDeathTeamsvr::release_extd3() {
  
  ::common::RoleExtend3* temp = extd3_;
  extd3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleExtend3* InnerGameEventDeathTeamsvr::unsafe_arena_release_extd3() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventDeathTeamsvr.extd3)
  
  ::common::RoleExtend3* temp = extd3_;
  extd3_ = nullptr;
  return temp;
}
inline ::common::RoleExtend3* InnerGameEventDeathTeamsvr::_internal_mutable_extd3() {
  
  if (extd3_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleExtend3>(GetArenaForAllocation());
    extd3_ = p;
  }
  return extd3_;
}
inline ::common::RoleExtend3* InnerGameEventDeathTeamsvr::mutable_extd3() {
  ::common::RoleExtend3* _msg = _internal_mutable_extd3();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventDeathTeamsvr.extd3)
  return _msg;
}
inline void InnerGameEventDeathTeamsvr::set_allocated_extd3(::common::RoleExtend3* extd3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd3_);
  }
  if (extd3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd3));
    if (message_arena != submessage_arena) {
      extd3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extd3, submessage_arena);
    }
    
  } else {
    
  }
  extd3_ = extd3;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventDeathTeamsvr.extd3)
}

// -------------------------------------------------------------------

// InnerGameEventDeathFriendsvr

// -------------------------------------------------------------------

// InnerGameEventRebirth

// .inner.InnerGameEventRebirthTeamsvr teamsvr = 1;
inline bool InnerGameEventRebirth::_internal_has_teamsvr() const {
  return server_case() == kTeamsvr;
}
inline bool InnerGameEventRebirth::has_teamsvr() const {
  return _internal_has_teamsvr();
}
inline void InnerGameEventRebirth::set_has_teamsvr() {
  _oneof_case_[0] = kTeamsvr;
}
inline void InnerGameEventRebirth::clear_teamsvr() {
  if (_internal_has_teamsvr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete server_.teamsvr_;
    }
    clear_has_server();
  }
}
inline ::inner::InnerGameEventRebirthTeamsvr* InnerGameEventRebirth::release_teamsvr() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventRebirth.teamsvr)
  if (_internal_has_teamsvr()) {
    clear_has_server();
    ::inner::InnerGameEventRebirthTeamsvr* temp = server_.teamsvr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    server_.teamsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventRebirthTeamsvr& InnerGameEventRebirth::_internal_teamsvr() const {
  return _internal_has_teamsvr()
      ? *server_.teamsvr_
      : reinterpret_cast< ::inner::InnerGameEventRebirthTeamsvr&>(::inner::_InnerGameEventRebirthTeamsvr_default_instance_);
}
inline const ::inner::InnerGameEventRebirthTeamsvr& InnerGameEventRebirth::teamsvr() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventRebirth.teamsvr)
  return _internal_teamsvr();
}
inline ::inner::InnerGameEventRebirthTeamsvr* InnerGameEventRebirth::unsafe_arena_release_teamsvr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEventRebirth.teamsvr)
  if (_internal_has_teamsvr()) {
    clear_has_server();
    ::inner::InnerGameEventRebirthTeamsvr* temp = server_.teamsvr_;
    server_.teamsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEventRebirth::unsafe_arena_set_allocated_teamsvr(::inner::InnerGameEventRebirthTeamsvr* teamsvr) {
  clear_server();
  if (teamsvr) {
    set_has_teamsvr();
    server_.teamsvr_ = teamsvr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventRebirth.teamsvr)
}
inline ::inner::InnerGameEventRebirthTeamsvr* InnerGameEventRebirth::_internal_mutable_teamsvr() {
  if (!_internal_has_teamsvr()) {
    clear_server();
    set_has_teamsvr();
    server_.teamsvr_ = CreateMaybeMessage< ::inner::InnerGameEventRebirthTeamsvr >(GetArenaForAllocation());
  }
  return server_.teamsvr_;
}
inline ::inner::InnerGameEventRebirthTeamsvr* InnerGameEventRebirth::mutable_teamsvr() {
  ::inner::InnerGameEventRebirthTeamsvr* _msg = _internal_mutable_teamsvr();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventRebirth.teamsvr)
  return _msg;
}

// .inner.InnerGameEventRebirthFriendsvr friendsvr = 2;
inline bool InnerGameEventRebirth::_internal_has_friendsvr() const {
  return server_case() == kFriendsvr;
}
inline bool InnerGameEventRebirth::has_friendsvr() const {
  return _internal_has_friendsvr();
}
inline void InnerGameEventRebirth::set_has_friendsvr() {
  _oneof_case_[0] = kFriendsvr;
}
inline void InnerGameEventRebirth::clear_friendsvr() {
  if (_internal_has_friendsvr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete server_.friendsvr_;
    }
    clear_has_server();
  }
}
inline ::inner::InnerGameEventRebirthFriendsvr* InnerGameEventRebirth::release_friendsvr() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventRebirth.friendsvr)
  if (_internal_has_friendsvr()) {
    clear_has_server();
    ::inner::InnerGameEventRebirthFriendsvr* temp = server_.friendsvr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    server_.friendsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventRebirthFriendsvr& InnerGameEventRebirth::_internal_friendsvr() const {
  return _internal_has_friendsvr()
      ? *server_.friendsvr_
      : reinterpret_cast< ::inner::InnerGameEventRebirthFriendsvr&>(::inner::_InnerGameEventRebirthFriendsvr_default_instance_);
}
inline const ::inner::InnerGameEventRebirthFriendsvr& InnerGameEventRebirth::friendsvr() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventRebirth.friendsvr)
  return _internal_friendsvr();
}
inline ::inner::InnerGameEventRebirthFriendsvr* InnerGameEventRebirth::unsafe_arena_release_friendsvr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEventRebirth.friendsvr)
  if (_internal_has_friendsvr()) {
    clear_has_server();
    ::inner::InnerGameEventRebirthFriendsvr* temp = server_.friendsvr_;
    server_.friendsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEventRebirth::unsafe_arena_set_allocated_friendsvr(::inner::InnerGameEventRebirthFriendsvr* friendsvr) {
  clear_server();
  if (friendsvr) {
    set_has_friendsvr();
    server_.friendsvr_ = friendsvr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventRebirth.friendsvr)
}
inline ::inner::InnerGameEventRebirthFriendsvr* InnerGameEventRebirth::_internal_mutable_friendsvr() {
  if (!_internal_has_friendsvr()) {
    clear_server();
    set_has_friendsvr();
    server_.friendsvr_ = CreateMaybeMessage< ::inner::InnerGameEventRebirthFriendsvr >(GetArenaForAllocation());
  }
  return server_.friendsvr_;
}
inline ::inner::InnerGameEventRebirthFriendsvr* InnerGameEventRebirth::mutable_friendsvr() {
  ::inner::InnerGameEventRebirthFriendsvr* _msg = _internal_mutable_friendsvr();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventRebirth.friendsvr)
  return _msg;
}

inline bool InnerGameEventRebirth::has_server() const {
  return server_case() != SERVER_NOT_SET;
}
inline void InnerGameEventRebirth::clear_has_server() {
  _oneof_case_[0] = SERVER_NOT_SET;
}
inline InnerGameEventRebirth::ServerCase InnerGameEventRebirth::server_case() const {
  return InnerGameEventRebirth::ServerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InnerGameEventRebirthTeamsvr

// .common.RoleExtend2 extd2 = 1;
inline bool InnerGameEventRebirthTeamsvr::_internal_has_extd2() const {
  return this != internal_default_instance() && extd2_ != nullptr;
}
inline bool InnerGameEventRebirthTeamsvr::has_extd2() const {
  return _internal_has_extd2();
}
inline const ::common::RoleExtend2& InnerGameEventRebirthTeamsvr::_internal_extd2() const {
  const ::common::RoleExtend2* p = extd2_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleExtend2&>(
      ::common::_RoleExtend2_default_instance_);
}
inline const ::common::RoleExtend2& InnerGameEventRebirthTeamsvr::extd2() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventRebirthTeamsvr.extd2)
  return _internal_extd2();
}
inline void InnerGameEventRebirthTeamsvr::unsafe_arena_set_allocated_extd2(
    ::common::RoleExtend2* extd2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd2_);
  }
  extd2_ = extd2;
  if (extd2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventRebirthTeamsvr.extd2)
}
inline ::common::RoleExtend2* InnerGameEventRebirthTeamsvr::release_extd2() {
  
  ::common::RoleExtend2* temp = extd2_;
  extd2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleExtend2* InnerGameEventRebirthTeamsvr::unsafe_arena_release_extd2() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventRebirthTeamsvr.extd2)
  
  ::common::RoleExtend2* temp = extd2_;
  extd2_ = nullptr;
  return temp;
}
inline ::common::RoleExtend2* InnerGameEventRebirthTeamsvr::_internal_mutable_extd2() {
  
  if (extd2_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleExtend2>(GetArenaForAllocation());
    extd2_ = p;
  }
  return extd2_;
}
inline ::common::RoleExtend2* InnerGameEventRebirthTeamsvr::mutable_extd2() {
  ::common::RoleExtend2* _msg = _internal_mutable_extd2();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventRebirthTeamsvr.extd2)
  return _msg;
}
inline void InnerGameEventRebirthTeamsvr::set_allocated_extd2(::common::RoleExtend2* extd2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd2_);
  }
  if (extd2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd2));
    if (message_arena != submessage_arena) {
      extd2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extd2, submessage_arena);
    }
    
  } else {
    
  }
  extd2_ = extd2;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventRebirthTeamsvr.extd2)
}

// .common.RoleExtend3 extd3 = 2;
inline bool InnerGameEventRebirthTeamsvr::_internal_has_extd3() const {
  return this != internal_default_instance() && extd3_ != nullptr;
}
inline bool InnerGameEventRebirthTeamsvr::has_extd3() const {
  return _internal_has_extd3();
}
inline const ::common::RoleExtend3& InnerGameEventRebirthTeamsvr::_internal_extd3() const {
  const ::common::RoleExtend3* p = extd3_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleExtend3&>(
      ::common::_RoleExtend3_default_instance_);
}
inline const ::common::RoleExtend3& InnerGameEventRebirthTeamsvr::extd3() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventRebirthTeamsvr.extd3)
  return _internal_extd3();
}
inline void InnerGameEventRebirthTeamsvr::unsafe_arena_set_allocated_extd3(
    ::common::RoleExtend3* extd3) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd3_);
  }
  extd3_ = extd3;
  if (extd3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventRebirthTeamsvr.extd3)
}
inline ::common::RoleExtend3* InnerGameEventRebirthTeamsvr::release_extd3() {
  
  ::common::RoleExtend3* temp = extd3_;
  extd3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleExtend3* InnerGameEventRebirthTeamsvr::unsafe_arena_release_extd3() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventRebirthTeamsvr.extd3)
  
  ::common::RoleExtend3* temp = extd3_;
  extd3_ = nullptr;
  return temp;
}
inline ::common::RoleExtend3* InnerGameEventRebirthTeamsvr::_internal_mutable_extd3() {
  
  if (extd3_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleExtend3>(GetArenaForAllocation());
    extd3_ = p;
  }
  return extd3_;
}
inline ::common::RoleExtend3* InnerGameEventRebirthTeamsvr::mutable_extd3() {
  ::common::RoleExtend3* _msg = _internal_mutable_extd3();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventRebirthTeamsvr.extd3)
  return _msg;
}
inline void InnerGameEventRebirthTeamsvr::set_allocated_extd3(::common::RoleExtend3* extd3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd3_);
  }
  if (extd3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd3));
    if (message_arena != submessage_arena) {
      extd3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extd3, submessage_arena);
    }
    
  } else {
    
  }
  extd3_ = extd3;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventRebirthTeamsvr.extd3)
}

// -------------------------------------------------------------------

// InnerGameEventRebirthFriendsvr

// -------------------------------------------------------------------

// InnerGameEventWakeup

// .inner.InnerGameEventWakeupTeamsvr teamsvr = 1;
inline bool InnerGameEventWakeup::_internal_has_teamsvr() const {
  return server_case() == kTeamsvr;
}
inline bool InnerGameEventWakeup::has_teamsvr() const {
  return _internal_has_teamsvr();
}
inline void InnerGameEventWakeup::set_has_teamsvr() {
  _oneof_case_[0] = kTeamsvr;
}
inline void InnerGameEventWakeup::clear_teamsvr() {
  if (_internal_has_teamsvr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete server_.teamsvr_;
    }
    clear_has_server();
  }
}
inline ::inner::InnerGameEventWakeupTeamsvr* InnerGameEventWakeup::release_teamsvr() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventWakeup.teamsvr)
  if (_internal_has_teamsvr()) {
    clear_has_server();
    ::inner::InnerGameEventWakeupTeamsvr* temp = server_.teamsvr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    server_.teamsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventWakeupTeamsvr& InnerGameEventWakeup::_internal_teamsvr() const {
  return _internal_has_teamsvr()
      ? *server_.teamsvr_
      : reinterpret_cast< ::inner::InnerGameEventWakeupTeamsvr&>(::inner::_InnerGameEventWakeupTeamsvr_default_instance_);
}
inline const ::inner::InnerGameEventWakeupTeamsvr& InnerGameEventWakeup::teamsvr() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventWakeup.teamsvr)
  return _internal_teamsvr();
}
inline ::inner::InnerGameEventWakeupTeamsvr* InnerGameEventWakeup::unsafe_arena_release_teamsvr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEventWakeup.teamsvr)
  if (_internal_has_teamsvr()) {
    clear_has_server();
    ::inner::InnerGameEventWakeupTeamsvr* temp = server_.teamsvr_;
    server_.teamsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEventWakeup::unsafe_arena_set_allocated_teamsvr(::inner::InnerGameEventWakeupTeamsvr* teamsvr) {
  clear_server();
  if (teamsvr) {
    set_has_teamsvr();
    server_.teamsvr_ = teamsvr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventWakeup.teamsvr)
}
inline ::inner::InnerGameEventWakeupTeamsvr* InnerGameEventWakeup::_internal_mutable_teamsvr() {
  if (!_internal_has_teamsvr()) {
    clear_server();
    set_has_teamsvr();
    server_.teamsvr_ = CreateMaybeMessage< ::inner::InnerGameEventWakeupTeamsvr >(GetArenaForAllocation());
  }
  return server_.teamsvr_;
}
inline ::inner::InnerGameEventWakeupTeamsvr* InnerGameEventWakeup::mutable_teamsvr() {
  ::inner::InnerGameEventWakeupTeamsvr* _msg = _internal_mutable_teamsvr();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventWakeup.teamsvr)
  return _msg;
}

// .inner.InnerGameEventWakeupFriendsvr friendsvr = 2;
inline bool InnerGameEventWakeup::_internal_has_friendsvr() const {
  return server_case() == kFriendsvr;
}
inline bool InnerGameEventWakeup::has_friendsvr() const {
  return _internal_has_friendsvr();
}
inline void InnerGameEventWakeup::set_has_friendsvr() {
  _oneof_case_[0] = kFriendsvr;
}
inline void InnerGameEventWakeup::clear_friendsvr() {
  if (_internal_has_friendsvr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete server_.friendsvr_;
    }
    clear_has_server();
  }
}
inline ::inner::InnerGameEventWakeupFriendsvr* InnerGameEventWakeup::release_friendsvr() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventWakeup.friendsvr)
  if (_internal_has_friendsvr()) {
    clear_has_server();
    ::inner::InnerGameEventWakeupFriendsvr* temp = server_.friendsvr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    server_.friendsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventWakeupFriendsvr& InnerGameEventWakeup::_internal_friendsvr() const {
  return _internal_has_friendsvr()
      ? *server_.friendsvr_
      : reinterpret_cast< ::inner::InnerGameEventWakeupFriendsvr&>(::inner::_InnerGameEventWakeupFriendsvr_default_instance_);
}
inline const ::inner::InnerGameEventWakeupFriendsvr& InnerGameEventWakeup::friendsvr() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventWakeup.friendsvr)
  return _internal_friendsvr();
}
inline ::inner::InnerGameEventWakeupFriendsvr* InnerGameEventWakeup::unsafe_arena_release_friendsvr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEventWakeup.friendsvr)
  if (_internal_has_friendsvr()) {
    clear_has_server();
    ::inner::InnerGameEventWakeupFriendsvr* temp = server_.friendsvr_;
    server_.friendsvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEventWakeup::unsafe_arena_set_allocated_friendsvr(::inner::InnerGameEventWakeupFriendsvr* friendsvr) {
  clear_server();
  if (friendsvr) {
    set_has_friendsvr();
    server_.friendsvr_ = friendsvr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventWakeup.friendsvr)
}
inline ::inner::InnerGameEventWakeupFriendsvr* InnerGameEventWakeup::_internal_mutable_friendsvr() {
  if (!_internal_has_friendsvr()) {
    clear_server();
    set_has_friendsvr();
    server_.friendsvr_ = CreateMaybeMessage< ::inner::InnerGameEventWakeupFriendsvr >(GetArenaForAllocation());
  }
  return server_.friendsvr_;
}
inline ::inner::InnerGameEventWakeupFriendsvr* InnerGameEventWakeup::mutable_friendsvr() {
  ::inner::InnerGameEventWakeupFriendsvr* _msg = _internal_mutable_friendsvr();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventWakeup.friendsvr)
  return _msg;
}

// .inner.InnerGameEventWakeupFamilysvr familysvr = 3;
inline bool InnerGameEventWakeup::_internal_has_familysvr() const {
  return server_case() == kFamilysvr;
}
inline bool InnerGameEventWakeup::has_familysvr() const {
  return _internal_has_familysvr();
}
inline void InnerGameEventWakeup::set_has_familysvr() {
  _oneof_case_[0] = kFamilysvr;
}
inline void InnerGameEventWakeup::clear_familysvr() {
  if (_internal_has_familysvr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete server_.familysvr_;
    }
    clear_has_server();
  }
}
inline ::inner::InnerGameEventWakeupFamilysvr* InnerGameEventWakeup::release_familysvr() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventWakeup.familysvr)
  if (_internal_has_familysvr()) {
    clear_has_server();
    ::inner::InnerGameEventWakeupFamilysvr* temp = server_.familysvr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    server_.familysvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerGameEventWakeupFamilysvr& InnerGameEventWakeup::_internal_familysvr() const {
  return _internal_has_familysvr()
      ? *server_.familysvr_
      : reinterpret_cast< ::inner::InnerGameEventWakeupFamilysvr&>(::inner::_InnerGameEventWakeupFamilysvr_default_instance_);
}
inline const ::inner::InnerGameEventWakeupFamilysvr& InnerGameEventWakeup::familysvr() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventWakeup.familysvr)
  return _internal_familysvr();
}
inline ::inner::InnerGameEventWakeupFamilysvr* InnerGameEventWakeup::unsafe_arena_release_familysvr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerGameEventWakeup.familysvr)
  if (_internal_has_familysvr()) {
    clear_has_server();
    ::inner::InnerGameEventWakeupFamilysvr* temp = server_.familysvr_;
    server_.familysvr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerGameEventWakeup::unsafe_arena_set_allocated_familysvr(::inner::InnerGameEventWakeupFamilysvr* familysvr) {
  clear_server();
  if (familysvr) {
    set_has_familysvr();
    server_.familysvr_ = familysvr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventWakeup.familysvr)
}
inline ::inner::InnerGameEventWakeupFamilysvr* InnerGameEventWakeup::_internal_mutable_familysvr() {
  if (!_internal_has_familysvr()) {
    clear_server();
    set_has_familysvr();
    server_.familysvr_ = CreateMaybeMessage< ::inner::InnerGameEventWakeupFamilysvr >(GetArenaForAllocation());
  }
  return server_.familysvr_;
}
inline ::inner::InnerGameEventWakeupFamilysvr* InnerGameEventWakeup::mutable_familysvr() {
  ::inner::InnerGameEventWakeupFamilysvr* _msg = _internal_mutable_familysvr();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventWakeup.familysvr)
  return _msg;
}

inline bool InnerGameEventWakeup::has_server() const {
  return server_case() != SERVER_NOT_SET;
}
inline void InnerGameEventWakeup::clear_has_server() {
  _oneof_case_[0] = SERVER_NOT_SET;
}
inline InnerGameEventWakeup::ServerCase InnerGameEventWakeup::server_case() const {
  return InnerGameEventWakeup::ServerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InnerGameEventWakeupTeamsvr

// .common.RoleBrief brief = 1;
inline bool InnerGameEventWakeupTeamsvr::_internal_has_brief() const {
  return this != internal_default_instance() && brief_ != nullptr;
}
inline bool InnerGameEventWakeupTeamsvr::has_brief() const {
  return _internal_has_brief();
}
inline const ::common::RoleBrief& InnerGameEventWakeupTeamsvr::_internal_brief() const {
  const ::common::RoleBrief* p = brief_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleBrief&>(
      ::common::_RoleBrief_default_instance_);
}
inline const ::common::RoleBrief& InnerGameEventWakeupTeamsvr::brief() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventWakeupTeamsvr.brief)
  return _internal_brief();
}
inline void InnerGameEventWakeupTeamsvr::unsafe_arena_set_allocated_brief(
    ::common::RoleBrief* brief) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brief_);
  }
  brief_ = brief;
  if (brief) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventWakeupTeamsvr.brief)
}
inline ::common::RoleBrief* InnerGameEventWakeupTeamsvr::release_brief() {
  
  ::common::RoleBrief* temp = brief_;
  brief_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleBrief* InnerGameEventWakeupTeamsvr::unsafe_arena_release_brief() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventWakeupTeamsvr.brief)
  
  ::common::RoleBrief* temp = brief_;
  brief_ = nullptr;
  return temp;
}
inline ::common::RoleBrief* InnerGameEventWakeupTeamsvr::_internal_mutable_brief() {
  
  if (brief_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleBrief>(GetArenaForAllocation());
    brief_ = p;
  }
  return brief_;
}
inline ::common::RoleBrief* InnerGameEventWakeupTeamsvr::mutable_brief() {
  ::common::RoleBrief* _msg = _internal_mutable_brief();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventWakeupTeamsvr.brief)
  return _msg;
}
inline void InnerGameEventWakeupTeamsvr::set_allocated_brief(::common::RoleBrief* brief) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(brief_);
  }
  if (brief) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brief));
    if (message_arena != submessage_arena) {
      brief = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brief, submessage_arena);
    }
    
  } else {
    
  }
  brief_ = brief;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventWakeupTeamsvr.brief)
}

// .common.RoleExtend1 extd1 = 2;
inline bool InnerGameEventWakeupTeamsvr::_internal_has_extd1() const {
  return this != internal_default_instance() && extd1_ != nullptr;
}
inline bool InnerGameEventWakeupTeamsvr::has_extd1() const {
  return _internal_has_extd1();
}
inline const ::common::RoleExtend1& InnerGameEventWakeupTeamsvr::_internal_extd1() const {
  const ::common::RoleExtend1* p = extd1_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleExtend1&>(
      ::common::_RoleExtend1_default_instance_);
}
inline const ::common::RoleExtend1& InnerGameEventWakeupTeamsvr::extd1() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventWakeupTeamsvr.extd1)
  return _internal_extd1();
}
inline void InnerGameEventWakeupTeamsvr::unsafe_arena_set_allocated_extd1(
    ::common::RoleExtend1* extd1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd1_);
  }
  extd1_ = extd1;
  if (extd1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventWakeupTeamsvr.extd1)
}
inline ::common::RoleExtend1* InnerGameEventWakeupTeamsvr::release_extd1() {
  
  ::common::RoleExtend1* temp = extd1_;
  extd1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleExtend1* InnerGameEventWakeupTeamsvr::unsafe_arena_release_extd1() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventWakeupTeamsvr.extd1)
  
  ::common::RoleExtend1* temp = extd1_;
  extd1_ = nullptr;
  return temp;
}
inline ::common::RoleExtend1* InnerGameEventWakeupTeamsvr::_internal_mutable_extd1() {
  
  if (extd1_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleExtend1>(GetArenaForAllocation());
    extd1_ = p;
  }
  return extd1_;
}
inline ::common::RoleExtend1* InnerGameEventWakeupTeamsvr::mutable_extd1() {
  ::common::RoleExtend1* _msg = _internal_mutable_extd1();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventWakeupTeamsvr.extd1)
  return _msg;
}
inline void InnerGameEventWakeupTeamsvr::set_allocated_extd1(::common::RoleExtend1* extd1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd1_);
  }
  if (extd1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd1));
    if (message_arena != submessage_arena) {
      extd1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extd1, submessage_arena);
    }
    
  } else {
    
  }
  extd1_ = extd1;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventWakeupTeamsvr.extd1)
}

// .common.RoleExtend2 extd2 = 3;
inline bool InnerGameEventWakeupTeamsvr::_internal_has_extd2() const {
  return this != internal_default_instance() && extd2_ != nullptr;
}
inline bool InnerGameEventWakeupTeamsvr::has_extd2() const {
  return _internal_has_extd2();
}
inline const ::common::RoleExtend2& InnerGameEventWakeupTeamsvr::_internal_extd2() const {
  const ::common::RoleExtend2* p = extd2_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleExtend2&>(
      ::common::_RoleExtend2_default_instance_);
}
inline const ::common::RoleExtend2& InnerGameEventWakeupTeamsvr::extd2() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventWakeupTeamsvr.extd2)
  return _internal_extd2();
}
inline void InnerGameEventWakeupTeamsvr::unsafe_arena_set_allocated_extd2(
    ::common::RoleExtend2* extd2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd2_);
  }
  extd2_ = extd2;
  if (extd2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventWakeupTeamsvr.extd2)
}
inline ::common::RoleExtend2* InnerGameEventWakeupTeamsvr::release_extd2() {
  
  ::common::RoleExtend2* temp = extd2_;
  extd2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleExtend2* InnerGameEventWakeupTeamsvr::unsafe_arena_release_extd2() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventWakeupTeamsvr.extd2)
  
  ::common::RoleExtend2* temp = extd2_;
  extd2_ = nullptr;
  return temp;
}
inline ::common::RoleExtend2* InnerGameEventWakeupTeamsvr::_internal_mutable_extd2() {
  
  if (extd2_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleExtend2>(GetArenaForAllocation());
    extd2_ = p;
  }
  return extd2_;
}
inline ::common::RoleExtend2* InnerGameEventWakeupTeamsvr::mutable_extd2() {
  ::common::RoleExtend2* _msg = _internal_mutable_extd2();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventWakeupTeamsvr.extd2)
  return _msg;
}
inline void InnerGameEventWakeupTeamsvr::set_allocated_extd2(::common::RoleExtend2* extd2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd2_);
  }
  if (extd2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd2));
    if (message_arena != submessage_arena) {
      extd2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extd2, submessage_arena);
    }
    
  } else {
    
  }
  extd2_ = extd2;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventWakeupTeamsvr.extd2)
}

// .common.RoleExtend3 extd3 = 4;
inline bool InnerGameEventWakeupTeamsvr::_internal_has_extd3() const {
  return this != internal_default_instance() && extd3_ != nullptr;
}
inline bool InnerGameEventWakeupTeamsvr::has_extd3() const {
  return _internal_has_extd3();
}
inline const ::common::RoleExtend3& InnerGameEventWakeupTeamsvr::_internal_extd3() const {
  const ::common::RoleExtend3* p = extd3_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleExtend3&>(
      ::common::_RoleExtend3_default_instance_);
}
inline const ::common::RoleExtend3& InnerGameEventWakeupTeamsvr::extd3() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventWakeupTeamsvr.extd3)
  return _internal_extd3();
}
inline void InnerGameEventWakeupTeamsvr::unsafe_arena_set_allocated_extd3(
    ::common::RoleExtend3* extd3) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd3_);
  }
  extd3_ = extd3;
  if (extd3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventWakeupTeamsvr.extd3)
}
inline ::common::RoleExtend3* InnerGameEventWakeupTeamsvr::release_extd3() {
  
  ::common::RoleExtend3* temp = extd3_;
  extd3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleExtend3* InnerGameEventWakeupTeamsvr::unsafe_arena_release_extd3() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventWakeupTeamsvr.extd3)
  
  ::common::RoleExtend3* temp = extd3_;
  extd3_ = nullptr;
  return temp;
}
inline ::common::RoleExtend3* InnerGameEventWakeupTeamsvr::_internal_mutable_extd3() {
  
  if (extd3_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleExtend3>(GetArenaForAllocation());
    extd3_ = p;
  }
  return extd3_;
}
inline ::common::RoleExtend3* InnerGameEventWakeupTeamsvr::mutable_extd3() {
  ::common::RoleExtend3* _msg = _internal_mutable_extd3();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventWakeupTeamsvr.extd3)
  return _msg;
}
inline void InnerGameEventWakeupTeamsvr::set_allocated_extd3(::common::RoleExtend3* extd3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd3_);
  }
  if (extd3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd3));
    if (message_arena != submessage_arena) {
      extd3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extd3, submessage_arena);
    }
    
  } else {
    
  }
  extd3_ = extd3;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventWakeupTeamsvr.extd3)
}

// .common.ExtendFight3v3 f33 = 5;
inline bool InnerGameEventWakeupTeamsvr::_internal_has_f33() const {
  return this != internal_default_instance() && f33_ != nullptr;
}
inline bool InnerGameEventWakeupTeamsvr::has_f33() const {
  return _internal_has_f33();
}
inline const ::common::ExtendFight3v3& InnerGameEventWakeupTeamsvr::_internal_f33() const {
  const ::common::ExtendFight3v3* p = f33_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ExtendFight3v3&>(
      ::common::_ExtendFight3v3_default_instance_);
}
inline const ::common::ExtendFight3v3& InnerGameEventWakeupTeamsvr::f33() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventWakeupTeamsvr.f33)
  return _internal_f33();
}
inline void InnerGameEventWakeupTeamsvr::unsafe_arena_set_allocated_f33(
    ::common::ExtendFight3v3* f33) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f33_);
  }
  f33_ = f33;
  if (f33) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventWakeupTeamsvr.f33)
}
inline ::common::ExtendFight3v3* InnerGameEventWakeupTeamsvr::release_f33() {
  
  ::common::ExtendFight3v3* temp = f33_;
  f33_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ExtendFight3v3* InnerGameEventWakeupTeamsvr::unsafe_arena_release_f33() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventWakeupTeamsvr.f33)
  
  ::common::ExtendFight3v3* temp = f33_;
  f33_ = nullptr;
  return temp;
}
inline ::common::ExtendFight3v3* InnerGameEventWakeupTeamsvr::_internal_mutable_f33() {
  
  if (f33_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ExtendFight3v3>(GetArenaForAllocation());
    f33_ = p;
  }
  return f33_;
}
inline ::common::ExtendFight3v3* InnerGameEventWakeupTeamsvr::mutable_f33() {
  ::common::ExtendFight3v3* _msg = _internal_mutable_f33();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventWakeupTeamsvr.f33)
  return _msg;
}
inline void InnerGameEventWakeupTeamsvr::set_allocated_f33(::common::ExtendFight3v3* f33) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(f33_);
  }
  if (f33) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f33));
    if (message_arena != submessage_arena) {
      f33 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f33, submessage_arena);
    }
    
  } else {
    
  }
  f33_ = f33;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventWakeupTeamsvr.f33)
}

// .common.ExtendFight5v5 f55 = 6;
inline bool InnerGameEventWakeupTeamsvr::_internal_has_f55() const {
  return this != internal_default_instance() && f55_ != nullptr;
}
inline bool InnerGameEventWakeupTeamsvr::has_f55() const {
  return _internal_has_f55();
}
inline const ::common::ExtendFight5v5& InnerGameEventWakeupTeamsvr::_internal_f55() const {
  const ::common::ExtendFight5v5* p = f55_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ExtendFight5v5&>(
      ::common::_ExtendFight5v5_default_instance_);
}
inline const ::common::ExtendFight5v5& InnerGameEventWakeupTeamsvr::f55() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventWakeupTeamsvr.f55)
  return _internal_f55();
}
inline void InnerGameEventWakeupTeamsvr::unsafe_arena_set_allocated_f55(
    ::common::ExtendFight5v5* f55) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f55_);
  }
  f55_ = f55;
  if (f55) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventWakeupTeamsvr.f55)
}
inline ::common::ExtendFight5v5* InnerGameEventWakeupTeamsvr::release_f55() {
  
  ::common::ExtendFight5v5* temp = f55_;
  f55_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ExtendFight5v5* InnerGameEventWakeupTeamsvr::unsafe_arena_release_f55() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventWakeupTeamsvr.f55)
  
  ::common::ExtendFight5v5* temp = f55_;
  f55_ = nullptr;
  return temp;
}
inline ::common::ExtendFight5v5* InnerGameEventWakeupTeamsvr::_internal_mutable_f55() {
  
  if (f55_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ExtendFight5v5>(GetArenaForAllocation());
    f55_ = p;
  }
  return f55_;
}
inline ::common::ExtendFight5v5* InnerGameEventWakeupTeamsvr::mutable_f55() {
  ::common::ExtendFight5v5* _msg = _internal_mutable_f55();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventWakeupTeamsvr.f55)
  return _msg;
}
inline void InnerGameEventWakeupTeamsvr::set_allocated_f55(::common::ExtendFight5v5* f55) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(f55_);
  }
  if (f55) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f55));
    if (message_arena != submessage_arena) {
      f55 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f55, submessage_arena);
    }
    
  } else {
    
  }
  f55_ = f55;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventWakeupTeamsvr.f55)
}

// uint32 sceneHashId = 7;
inline void InnerGameEventWakeupTeamsvr::clear_scenehashid() {
  scenehashid_ = 0u;
}
inline uint32_t InnerGameEventWakeupTeamsvr::_internal_scenehashid() const {
  return scenehashid_;
}
inline uint32_t InnerGameEventWakeupTeamsvr::scenehashid() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventWakeupTeamsvr.sceneHashId)
  return _internal_scenehashid();
}
inline void InnerGameEventWakeupTeamsvr::_internal_set_scenehashid(uint32_t value) {
  
  scenehashid_ = value;
}
inline void InnerGameEventWakeupTeamsvr::set_scenehashid(uint32_t value) {
  _internal_set_scenehashid(value);
  // @@protoc_insertion_point(field_set:inner.InnerGameEventWakeupTeamsvr.sceneHashId)
}

// -------------------------------------------------------------------

// InnerGameEventWakeupFriendsvr

// .inner.InnerFriendInfo oInfo = 1;
inline bool InnerGameEventWakeupFriendsvr::_internal_has_oinfo() const {
  return this != internal_default_instance() && oinfo_ != nullptr;
}
inline bool InnerGameEventWakeupFriendsvr::has_oinfo() const {
  return _internal_has_oinfo();
}
inline const ::inner::InnerFriendInfo& InnerGameEventWakeupFriendsvr::_internal_oinfo() const {
  const ::inner::InnerFriendInfo* p = oinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::inner::InnerFriendInfo&>(
      ::inner::_InnerFriendInfo_default_instance_);
}
inline const ::inner::InnerFriendInfo& InnerGameEventWakeupFriendsvr::oinfo() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventWakeupFriendsvr.oInfo)
  return _internal_oinfo();
}
inline void InnerGameEventWakeupFriendsvr::unsafe_arena_set_allocated_oinfo(
    ::inner::InnerFriendInfo* oinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oinfo_);
  }
  oinfo_ = oinfo;
  if (oinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventWakeupFriendsvr.oInfo)
}
inline ::inner::InnerFriendInfo* InnerGameEventWakeupFriendsvr::release_oinfo() {
  
  ::inner::InnerFriendInfo* temp = oinfo_;
  oinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::inner::InnerFriendInfo* InnerGameEventWakeupFriendsvr::unsafe_arena_release_oinfo() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventWakeupFriendsvr.oInfo)
  
  ::inner::InnerFriendInfo* temp = oinfo_;
  oinfo_ = nullptr;
  return temp;
}
inline ::inner::InnerFriendInfo* InnerGameEventWakeupFriendsvr::_internal_mutable_oinfo() {
  
  if (oinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::inner::InnerFriendInfo>(GetArenaForAllocation());
    oinfo_ = p;
  }
  return oinfo_;
}
inline ::inner::InnerFriendInfo* InnerGameEventWakeupFriendsvr::mutable_oinfo() {
  ::inner::InnerFriendInfo* _msg = _internal_mutable_oinfo();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventWakeupFriendsvr.oInfo)
  return _msg;
}
inline void InnerGameEventWakeupFriendsvr::set_allocated_oinfo(::inner::InnerFriendInfo* oinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oinfo_);
  }
  if (oinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oinfo));
    if (message_arena != submessage_arena) {
      oinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oinfo, submessage_arena);
    }
    
  } else {
    
  }
  oinfo_ = oinfo;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventWakeupFriendsvr.oInfo)
}

// .inner.InnerFriendGiftList oGifts = 2;
inline bool InnerGameEventWakeupFriendsvr::_internal_has_ogifts() const {
  return this != internal_default_instance() && ogifts_ != nullptr;
}
inline bool InnerGameEventWakeupFriendsvr::has_ogifts() const {
  return _internal_has_ogifts();
}
inline const ::inner::InnerFriendGiftList& InnerGameEventWakeupFriendsvr::_internal_ogifts() const {
  const ::inner::InnerFriendGiftList* p = ogifts_;
  return p != nullptr ? *p : reinterpret_cast<const ::inner::InnerFriendGiftList&>(
      ::inner::_InnerFriendGiftList_default_instance_);
}
inline const ::inner::InnerFriendGiftList& InnerGameEventWakeupFriendsvr::ogifts() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventWakeupFriendsvr.oGifts)
  return _internal_ogifts();
}
inline void InnerGameEventWakeupFriendsvr::unsafe_arena_set_allocated_ogifts(
    ::inner::InnerFriendGiftList* ogifts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ogifts_);
  }
  ogifts_ = ogifts;
  if (ogifts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventWakeupFriendsvr.oGifts)
}
inline ::inner::InnerFriendGiftList* InnerGameEventWakeupFriendsvr::release_ogifts() {
  
  ::inner::InnerFriendGiftList* temp = ogifts_;
  ogifts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::inner::InnerFriendGiftList* InnerGameEventWakeupFriendsvr::unsafe_arena_release_ogifts() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventWakeupFriendsvr.oGifts)
  
  ::inner::InnerFriendGiftList* temp = ogifts_;
  ogifts_ = nullptr;
  return temp;
}
inline ::inner::InnerFriendGiftList* InnerGameEventWakeupFriendsvr::_internal_mutable_ogifts() {
  
  if (ogifts_ == nullptr) {
    auto* p = CreateMaybeMessage<::inner::InnerFriendGiftList>(GetArenaForAllocation());
    ogifts_ = p;
  }
  return ogifts_;
}
inline ::inner::InnerFriendGiftList* InnerGameEventWakeupFriendsvr::mutable_ogifts() {
  ::inner::InnerFriendGiftList* _msg = _internal_mutable_ogifts();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventWakeupFriendsvr.oGifts)
  return _msg;
}
inline void InnerGameEventWakeupFriendsvr::set_allocated_ogifts(::inner::InnerFriendGiftList* ogifts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ogifts_);
  }
  if (ogifts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ogifts));
    if (message_arena != submessage_arena) {
      ogifts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ogifts, submessage_arena);
    }
    
  } else {
    
  }
  ogifts_ = ogifts;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventWakeupFriendsvr.oGifts)
}

// uint64 llTeamId = 3;
inline void InnerGameEventWakeupFriendsvr::clear_llteamid() {
  llteamid_ = uint64_t{0u};
}
inline uint64_t InnerGameEventWakeupFriendsvr::_internal_llteamid() const {
  return llteamid_;
}
inline uint64_t InnerGameEventWakeupFriendsvr::llteamid() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventWakeupFriendsvr.llTeamId)
  return _internal_llteamid();
}
inline void InnerGameEventWakeupFriendsvr::_internal_set_llteamid(uint64_t value) {
  
  llteamid_ = value;
}
inline void InnerGameEventWakeupFriendsvr::set_llteamid(uint64_t value) {
  _internal_set_llteamid(value);
  // @@protoc_insertion_point(field_set:inner.InnerGameEventWakeupFriendsvr.llTeamId)
}

// -------------------------------------------------------------------

// InnerGameEventWakeupFamilysvr

// .common.RoleBrief brief = 1;
inline bool InnerGameEventWakeupFamilysvr::_internal_has_brief() const {
  return this != internal_default_instance() && brief_ != nullptr;
}
inline bool InnerGameEventWakeupFamilysvr::has_brief() const {
  return _internal_has_brief();
}
inline const ::common::RoleBrief& InnerGameEventWakeupFamilysvr::_internal_brief() const {
  const ::common::RoleBrief* p = brief_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleBrief&>(
      ::common::_RoleBrief_default_instance_);
}
inline const ::common::RoleBrief& InnerGameEventWakeupFamilysvr::brief() const {
  // @@protoc_insertion_point(field_get:inner.InnerGameEventWakeupFamilysvr.brief)
  return _internal_brief();
}
inline void InnerGameEventWakeupFamilysvr::unsafe_arena_set_allocated_brief(
    ::common::RoleBrief* brief) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brief_);
  }
  brief_ = brief;
  if (brief) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerGameEventWakeupFamilysvr.brief)
}
inline ::common::RoleBrief* InnerGameEventWakeupFamilysvr::release_brief() {
  
  ::common::RoleBrief* temp = brief_;
  brief_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleBrief* InnerGameEventWakeupFamilysvr::unsafe_arena_release_brief() {
  // @@protoc_insertion_point(field_release:inner.InnerGameEventWakeupFamilysvr.brief)
  
  ::common::RoleBrief* temp = brief_;
  brief_ = nullptr;
  return temp;
}
inline ::common::RoleBrief* InnerGameEventWakeupFamilysvr::_internal_mutable_brief() {
  
  if (brief_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleBrief>(GetArenaForAllocation());
    brief_ = p;
  }
  return brief_;
}
inline ::common::RoleBrief* InnerGameEventWakeupFamilysvr::mutable_brief() {
  ::common::RoleBrief* _msg = _internal_mutable_brief();
  // @@protoc_insertion_point(field_mutable:inner.InnerGameEventWakeupFamilysvr.brief)
  return _msg;
}
inline void InnerGameEventWakeupFamilysvr::set_allocated_brief(::common::RoleBrief* brief) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(brief_);
  }
  if (brief) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brief));
    if (message_arena != submessage_arena) {
      brief = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brief, submessage_arena);
    }
    
  } else {
    
  }
  brief_ = brief;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerGameEventWakeupFamilysvr.brief)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace inner

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_innercommon_2eproto
