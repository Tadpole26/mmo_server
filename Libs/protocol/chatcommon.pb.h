// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatcommon.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chatcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chatcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "itemcommon.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chatcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chatcommon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chatcommon_2eproto;
namespace common {
class ChatAtId;
struct ChatAtIdDefaultTypeInternal;
extern ChatAtIdDefaultTypeInternal _ChatAtId_default_instance_;
class ChatAtName;
struct ChatAtNameDefaultTypeInternal;
extern ChatAtNameDefaultTypeInternal _ChatAtName_default_instance_;
class ChatItem;
struct ChatItemDefaultTypeInternal;
extern ChatItemDefaultTypeInternal _ChatItem_default_instance_;
class ChatParamDown;
struct ChatParamDownDefaultTypeInternal;
extern ChatParamDownDefaultTypeInternal _ChatParamDown_default_instance_;
class ChatParamUp;
struct ChatParamUpDefaultTypeInternal;
extern ChatParamUpDefaultTypeInternal _ChatParamUp_default_instance_;
class ChatRole;
struct ChatRoleDefaultTypeInternal;
extern ChatRoleDefaultTypeInternal _ChatRole_default_instance_;
class ChatSmile;
struct ChatSmileDefaultTypeInternal;
extern ChatSmileDefaultTypeInternal _ChatSmile_default_instance_;
class ChatString;
struct ChatStringDefaultTypeInternal;
extern ChatStringDefaultTypeInternal _ChatString_default_instance_;
class ChatTypeContextDown;
struct ChatTypeContextDownDefaultTypeInternal;
extern ChatTypeContextDownDefaultTypeInternal _ChatTypeContextDown_default_instance_;
class ChatTypeContextUp;
struct ChatTypeContextUpDefaultTypeInternal;
extern ChatTypeContextUpDefaultTypeInternal _ChatTypeContextUp_default_instance_;
class ChatVoice;
struct ChatVoiceDefaultTypeInternal;
extern ChatVoiceDefaultTypeInternal _ChatVoice_default_instance_;
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> ::common::ChatAtId* Arena::CreateMaybeMessage<::common::ChatAtId>(Arena*);
template<> ::common::ChatAtName* Arena::CreateMaybeMessage<::common::ChatAtName>(Arena*);
template<> ::common::ChatItem* Arena::CreateMaybeMessage<::common::ChatItem>(Arena*);
template<> ::common::ChatParamDown* Arena::CreateMaybeMessage<::common::ChatParamDown>(Arena*);
template<> ::common::ChatParamUp* Arena::CreateMaybeMessage<::common::ChatParamUp>(Arena*);
template<> ::common::ChatRole* Arena::CreateMaybeMessage<::common::ChatRole>(Arena*);
template<> ::common::ChatSmile* Arena::CreateMaybeMessage<::common::ChatSmile>(Arena*);
template<> ::common::ChatString* Arena::CreateMaybeMessage<::common::ChatString>(Arena*);
template<> ::common::ChatTypeContextDown* Arena::CreateMaybeMessage<::common::ChatTypeContextDown>(Arena*);
template<> ::common::ChatTypeContextUp* Arena::CreateMaybeMessage<::common::ChatTypeContextUp>(Arena*);
template<> ::common::ChatVoice* Arena::CreateMaybeMessage<::common::ChatVoice>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace common {

// ===================================================================

class ChatTypeContextUp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ChatTypeContextUp) */ {
 public:
  inline ChatTypeContextUp() : ChatTypeContextUp(nullptr) {}
  ~ChatTypeContextUp() override;
  explicit PROTOBUF_CONSTEXPR ChatTypeContextUp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatTypeContextUp(const ChatTypeContextUp& from);
  ChatTypeContextUp(ChatTypeContextUp&& from) noexcept
    : ChatTypeContextUp() {
    *this = ::std::move(from);
  }

  inline ChatTypeContextUp& operator=(const ChatTypeContextUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatTypeContextUp& operator=(ChatTypeContextUp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatTypeContextUp& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatTypeContextUp* internal_default_instance() {
    return reinterpret_cast<const ChatTypeContextUp*>(
               &_ChatTypeContextUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChatTypeContextUp& a, ChatTypeContextUp& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatTypeContextUp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatTypeContextUp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatTypeContextUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatTypeContextUp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatTypeContextUp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatTypeContextUp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatTypeContextUp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ChatTypeContextUp";
  }
  protected:
  explicit ChatTypeContextUp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecContextsFieldNumber = 2,
    kLlRecverIdFieldNumber = 1,
  };
  // repeated .common.ChatParamUp vecContexts = 2;
  int veccontexts_size() const;
  private:
  int _internal_veccontexts_size() const;
  public:
  void clear_veccontexts();
  ::common::ChatParamUp* mutable_veccontexts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ChatParamUp >*
      mutable_veccontexts();
  private:
  const ::common::ChatParamUp& _internal_veccontexts(int index) const;
  ::common::ChatParamUp* _internal_add_veccontexts();
  public:
  const ::common::ChatParamUp& veccontexts(int index) const;
  ::common::ChatParamUp* add_veccontexts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ChatParamUp >&
      veccontexts() const;

  // uint64 llRecverId = 1;
  void clear_llrecverid();
  uint64_t llrecverid() const;
  void set_llrecverid(uint64_t value);
  private:
  uint64_t _internal_llrecverid() const;
  void _internal_set_llrecverid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ChatTypeContextUp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ChatParamUp > veccontexts_;
  uint64_t llrecverid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chatcommon_2eproto;
};
// -------------------------------------------------------------------

class ChatTypeContextDown final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ChatTypeContextDown) */ {
 public:
  inline ChatTypeContextDown() : ChatTypeContextDown(nullptr) {}
  ~ChatTypeContextDown() override;
  explicit PROTOBUF_CONSTEXPR ChatTypeContextDown(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatTypeContextDown(const ChatTypeContextDown& from);
  ChatTypeContextDown(ChatTypeContextDown&& from) noexcept
    : ChatTypeContextDown() {
    *this = ::std::move(from);
  }

  inline ChatTypeContextDown& operator=(const ChatTypeContextDown& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatTypeContextDown& operator=(ChatTypeContextDown&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatTypeContextDown& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatTypeContextDown* internal_default_instance() {
    return reinterpret_cast<const ChatTypeContextDown*>(
               &_ChatTypeContextDown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChatTypeContextDown& a, ChatTypeContextDown& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatTypeContextDown* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatTypeContextDown* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatTypeContextDown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatTypeContextDown>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatTypeContextDown& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatTypeContextDown& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatTypeContextDown* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ChatTypeContextDown";
  }
  protected:
  explicit ChatTypeContextDown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecContextsFieldNumber = 3,
    kOSenderFieldNumber = 2,
    kLlTimestampFieldNumber = 1,
  };
  // repeated .common.ChatParamDown vecContexts = 3;
  int veccontexts_size() const;
  private:
  int _internal_veccontexts_size() const;
  public:
  void clear_veccontexts();
  ::common::ChatParamDown* mutable_veccontexts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ChatParamDown >*
      mutable_veccontexts();
  private:
  const ::common::ChatParamDown& _internal_veccontexts(int index) const;
  ::common::ChatParamDown* _internal_add_veccontexts();
  public:
  const ::common::ChatParamDown& veccontexts(int index) const;
  ::common::ChatParamDown* add_veccontexts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ChatParamDown >&
      veccontexts() const;

  // .common.ChatRole oSender = 2;
  bool has_osender() const;
  private:
  bool _internal_has_osender() const;
  public:
  void clear_osender();
  const ::common::ChatRole& osender() const;
  PROTOBUF_NODISCARD ::common::ChatRole* release_osender();
  ::common::ChatRole* mutable_osender();
  void set_allocated_osender(::common::ChatRole* osender);
  private:
  const ::common::ChatRole& _internal_osender() const;
  ::common::ChatRole* _internal_mutable_osender();
  public:
  void unsafe_arena_set_allocated_osender(
      ::common::ChatRole* osender);
  ::common::ChatRole* unsafe_arena_release_osender();

  // uint64 llTimestamp = 1;
  void clear_lltimestamp();
  uint64_t lltimestamp() const;
  void set_lltimestamp(uint64_t value);
  private:
  uint64_t _internal_lltimestamp() const;
  void _internal_set_lltimestamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ChatTypeContextDown)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ChatParamDown > veccontexts_;
  ::common::ChatRole* osender_;
  uint64_t lltimestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chatcommon_2eproto;
};
// -------------------------------------------------------------------

class ChatRole final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ChatRole) */ {
 public:
  inline ChatRole() : ChatRole(nullptr) {}
  ~ChatRole() override;
  explicit PROTOBUF_CONSTEXPR ChatRole(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatRole(const ChatRole& from);
  ChatRole(ChatRole&& from) noexcept
    : ChatRole() {
    *this = ::std::move(from);
  }

  inline ChatRole& operator=(const ChatRole& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatRole& operator=(ChatRole&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatRole& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatRole* internal_default_instance() {
    return reinterpret_cast<const ChatRole*>(
               &_ChatRole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChatRole& a, ChatRole& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatRole* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatRole* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatRole* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatRole>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatRole& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatRole& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatRole* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ChatRole";
  }
  protected:
  explicit ChatRole(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOBriefFieldNumber = 1,
    kUiOfficialFieldNumber = 2,
    kUiChatFrameFieldNumber = 3,
    kUiChatFontFieldNumber = 4,
    kUiChatBgdFieldNumber = 5,
  };
  // .common.RoleBrief oBrief = 1;
  bool has_obrief() const;
  private:
  bool _internal_has_obrief() const;
  public:
  void clear_obrief();
  const ::common::RoleBrief& obrief() const;
  PROTOBUF_NODISCARD ::common::RoleBrief* release_obrief();
  ::common::RoleBrief* mutable_obrief();
  void set_allocated_obrief(::common::RoleBrief* obrief);
  private:
  const ::common::RoleBrief& _internal_obrief() const;
  ::common::RoleBrief* _internal_mutable_obrief();
  public:
  void unsafe_arena_set_allocated_obrief(
      ::common::RoleBrief* obrief);
  ::common::RoleBrief* unsafe_arena_release_obrief();

  // uint32 uiOfficial = 2;
  void clear_uiofficial();
  uint32_t uiofficial() const;
  void set_uiofficial(uint32_t value);
  private:
  uint32_t _internal_uiofficial() const;
  void _internal_set_uiofficial(uint32_t value);
  public:

  // uint32 uiChatFrame = 3;
  void clear_uichatframe();
  uint32_t uichatframe() const;
  void set_uichatframe(uint32_t value);
  private:
  uint32_t _internal_uichatframe() const;
  void _internal_set_uichatframe(uint32_t value);
  public:

  // uint32 uiChatFont = 4;
  void clear_uichatfont();
  uint32_t uichatfont() const;
  void set_uichatfont(uint32_t value);
  private:
  uint32_t _internal_uichatfont() const;
  void _internal_set_uichatfont(uint32_t value);
  public:

  // uint32 uiChatBgd = 5;
  void clear_uichatbgd();
  uint32_t uichatbgd() const;
  void set_uichatbgd(uint32_t value);
  private:
  uint32_t _internal_uichatbgd() const;
  void _internal_set_uichatbgd(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ChatRole)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::RoleBrief* obrief_;
  uint32_t uiofficial_;
  uint32_t uichatframe_;
  uint32_t uichatfont_;
  uint32_t uichatbgd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chatcommon_2eproto;
};
// -------------------------------------------------------------------

class ChatParamUp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ChatParamUp) */ {
 public:
  inline ChatParamUp() : ChatParamUp(nullptr) {}
  ~ChatParamUp() override;
  explicit PROTOBUF_CONSTEXPR ChatParamUp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatParamUp(const ChatParamUp& from);
  ChatParamUp(ChatParamUp&& from) noexcept
    : ChatParamUp() {
    *this = ::std::move(from);
  }

  inline ChatParamUp& operator=(const ChatParamUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatParamUp& operator=(ChatParamUp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatParamUp& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatParamUp* internal_default_instance() {
    return reinterpret_cast<const ChatParamUp*>(
               &_ChatParamUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChatParamUp& a, ChatParamUp& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatParamUp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatParamUp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatParamUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatParamUp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatParamUp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatParamUp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatParamUp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ChatParamUp";
  }
  protected:
  explicit ChatParamUp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOChatFieldNumber = 1,
    kOVoiceFieldNumber = 2,
    kOSmileFieldNumber = 3,
    kOItemFieldNumber = 4,
    kOTidFieldNumber = 5,
  };
  // .common.ChatString oChat = 1;
  bool has_ochat() const;
  private:
  bool _internal_has_ochat() const;
  public:
  void clear_ochat();
  const ::common::ChatString& ochat() const;
  PROTOBUF_NODISCARD ::common::ChatString* release_ochat();
  ::common::ChatString* mutable_ochat();
  void set_allocated_ochat(::common::ChatString* ochat);
  private:
  const ::common::ChatString& _internal_ochat() const;
  ::common::ChatString* _internal_mutable_ochat();
  public:
  void unsafe_arena_set_allocated_ochat(
      ::common::ChatString* ochat);
  ::common::ChatString* unsafe_arena_release_ochat();

  // .common.ChatVoice oVoice = 2;
  bool has_ovoice() const;
  private:
  bool _internal_has_ovoice() const;
  public:
  void clear_ovoice();
  const ::common::ChatVoice& ovoice() const;
  PROTOBUF_NODISCARD ::common::ChatVoice* release_ovoice();
  ::common::ChatVoice* mutable_ovoice();
  void set_allocated_ovoice(::common::ChatVoice* ovoice);
  private:
  const ::common::ChatVoice& _internal_ovoice() const;
  ::common::ChatVoice* _internal_mutable_ovoice();
  public:
  void unsafe_arena_set_allocated_ovoice(
      ::common::ChatVoice* ovoice);
  ::common::ChatVoice* unsafe_arena_release_ovoice();

  // .common.ChatSmile oSmile = 3;
  bool has_osmile() const;
  private:
  bool _internal_has_osmile() const;
  public:
  void clear_osmile();
  const ::common::ChatSmile& osmile() const;
  PROTOBUF_NODISCARD ::common::ChatSmile* release_osmile();
  ::common::ChatSmile* mutable_osmile();
  void set_allocated_osmile(::common::ChatSmile* osmile);
  private:
  const ::common::ChatSmile& _internal_osmile() const;
  ::common::ChatSmile* _internal_mutable_osmile();
  public:
  void unsafe_arena_set_allocated_osmile(
      ::common::ChatSmile* osmile);
  ::common::ChatSmile* unsafe_arena_release_osmile();

  // .common.ChatItem oItem = 4;
  bool has_oitem() const;
  private:
  bool _internal_has_oitem() const;
  public:
  void clear_oitem();
  const ::common::ChatItem& oitem() const;
  PROTOBUF_NODISCARD ::common::ChatItem* release_oitem();
  ::common::ChatItem* mutable_oitem();
  void set_allocated_oitem(::common::ChatItem* oitem);
  private:
  const ::common::ChatItem& _internal_oitem() const;
  ::common::ChatItem* _internal_mutable_oitem();
  public:
  void unsafe_arena_set_allocated_oitem(
      ::common::ChatItem* oitem);
  ::common::ChatItem* unsafe_arena_release_oitem();

  // .common.ChatAtId oTid = 5;
  bool has_otid() const;
  private:
  bool _internal_has_otid() const;
  public:
  void clear_otid();
  const ::common::ChatAtId& otid() const;
  PROTOBUF_NODISCARD ::common::ChatAtId* release_otid();
  ::common::ChatAtId* mutable_otid();
  void set_allocated_otid(::common::ChatAtId* otid);
  private:
  const ::common::ChatAtId& _internal_otid() const;
  ::common::ChatAtId* _internal_mutable_otid();
  public:
  void unsafe_arena_set_allocated_otid(
      ::common::ChatAtId* otid);
  ::common::ChatAtId* unsafe_arena_release_otid();

  // @@protoc_insertion_point(class_scope:common.ChatParamUp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::ChatString* ochat_;
  ::common::ChatVoice* ovoice_;
  ::common::ChatSmile* osmile_;
  ::common::ChatItem* oitem_;
  ::common::ChatAtId* otid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chatcommon_2eproto;
};
// -------------------------------------------------------------------

class ChatParamDown final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ChatParamDown) */ {
 public:
  inline ChatParamDown() : ChatParamDown(nullptr) {}
  ~ChatParamDown() override;
  explicit PROTOBUF_CONSTEXPR ChatParamDown(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatParamDown(const ChatParamDown& from);
  ChatParamDown(ChatParamDown&& from) noexcept
    : ChatParamDown() {
    *this = ::std::move(from);
  }

  inline ChatParamDown& operator=(const ChatParamDown& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatParamDown& operator=(ChatParamDown&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatParamDown& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatParamDown* internal_default_instance() {
    return reinterpret_cast<const ChatParamDown*>(
               &_ChatParamDown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChatParamDown& a, ChatParamDown& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatParamDown* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatParamDown* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatParamDown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatParamDown>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatParamDown& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatParamDown& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatParamDown* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ChatParamDown";
  }
  protected:
  explicit ChatParamDown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOChatFieldNumber = 1,
    kOVoiceFieldNumber = 2,
    kOSmileFieldNumber = 3,
    kOItemFieldNumber = 4,
    kOAtNameFieldNumber = 5,
  };
  // .common.ChatString oChat = 1;
  bool has_ochat() const;
  private:
  bool _internal_has_ochat() const;
  public:
  void clear_ochat();
  const ::common::ChatString& ochat() const;
  PROTOBUF_NODISCARD ::common::ChatString* release_ochat();
  ::common::ChatString* mutable_ochat();
  void set_allocated_ochat(::common::ChatString* ochat);
  private:
  const ::common::ChatString& _internal_ochat() const;
  ::common::ChatString* _internal_mutable_ochat();
  public:
  void unsafe_arena_set_allocated_ochat(
      ::common::ChatString* ochat);
  ::common::ChatString* unsafe_arena_release_ochat();

  // .common.ChatVoice oVoice = 2;
  bool has_ovoice() const;
  private:
  bool _internal_has_ovoice() const;
  public:
  void clear_ovoice();
  const ::common::ChatVoice& ovoice() const;
  PROTOBUF_NODISCARD ::common::ChatVoice* release_ovoice();
  ::common::ChatVoice* mutable_ovoice();
  void set_allocated_ovoice(::common::ChatVoice* ovoice);
  private:
  const ::common::ChatVoice& _internal_ovoice() const;
  ::common::ChatVoice* _internal_mutable_ovoice();
  public:
  void unsafe_arena_set_allocated_ovoice(
      ::common::ChatVoice* ovoice);
  ::common::ChatVoice* unsafe_arena_release_ovoice();

  // .common.ChatSmile oSmile = 3;
  bool has_osmile() const;
  private:
  bool _internal_has_osmile() const;
  public:
  void clear_osmile();
  const ::common::ChatSmile& osmile() const;
  PROTOBUF_NODISCARD ::common::ChatSmile* release_osmile();
  ::common::ChatSmile* mutable_osmile();
  void set_allocated_osmile(::common::ChatSmile* osmile);
  private:
  const ::common::ChatSmile& _internal_osmile() const;
  ::common::ChatSmile* _internal_mutable_osmile();
  public:
  void unsafe_arena_set_allocated_osmile(
      ::common::ChatSmile* osmile);
  ::common::ChatSmile* unsafe_arena_release_osmile();

  // .common.ChatItem oItem = 4;
  bool has_oitem() const;
  private:
  bool _internal_has_oitem() const;
  public:
  void clear_oitem();
  const ::common::ChatItem& oitem() const;
  PROTOBUF_NODISCARD ::common::ChatItem* release_oitem();
  ::common::ChatItem* mutable_oitem();
  void set_allocated_oitem(::common::ChatItem* oitem);
  private:
  const ::common::ChatItem& _internal_oitem() const;
  ::common::ChatItem* _internal_mutable_oitem();
  public:
  void unsafe_arena_set_allocated_oitem(
      ::common::ChatItem* oitem);
  ::common::ChatItem* unsafe_arena_release_oitem();

  // .common.ChatAtName oAtName = 5;
  bool has_oatname() const;
  private:
  bool _internal_has_oatname() const;
  public:
  void clear_oatname();
  const ::common::ChatAtName& oatname() const;
  PROTOBUF_NODISCARD ::common::ChatAtName* release_oatname();
  ::common::ChatAtName* mutable_oatname();
  void set_allocated_oatname(::common::ChatAtName* oatname);
  private:
  const ::common::ChatAtName& _internal_oatname() const;
  ::common::ChatAtName* _internal_mutable_oatname();
  public:
  void unsafe_arena_set_allocated_oatname(
      ::common::ChatAtName* oatname);
  ::common::ChatAtName* unsafe_arena_release_oatname();

  // @@protoc_insertion_point(class_scope:common.ChatParamDown)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::ChatString* ochat_;
  ::common::ChatVoice* ovoice_;
  ::common::ChatSmile* osmile_;
  ::common::ChatItem* oitem_;
  ::common::ChatAtName* oatname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chatcommon_2eproto;
};
// -------------------------------------------------------------------

class ChatString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ChatString) */ {
 public:
  inline ChatString() : ChatString(nullptr) {}
  ~ChatString() override;
  explicit PROTOBUF_CONSTEXPR ChatString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatString(const ChatString& from);
  ChatString(ChatString&& from) noexcept
    : ChatString() {
    *this = ::std::move(from);
  }

  inline ChatString& operator=(const ChatString& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatString& operator=(ChatString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatString& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatString* internal_default_instance() {
    return reinterpret_cast<const ChatString*>(
               &_ChatString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChatString& a, ChatString& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatString& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ChatString";
  }
  protected:
  explicit ChatString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrCharsFieldNumber = 1,
  };
  // bytes strChars = 1;
  void clear_strchars();
  const std::string& strchars() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strchars(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strchars();
  PROTOBUF_NODISCARD std::string* release_strchars();
  void set_allocated_strchars(std::string* strchars);
  private:
  const std::string& _internal_strchars() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strchars(const std::string& value);
  std::string* _internal_mutable_strchars();
  public:

  // @@protoc_insertion_point(class_scope:common.ChatString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strchars_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chatcommon_2eproto;
};
// -------------------------------------------------------------------

class ChatVoice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ChatVoice) */ {
 public:
  inline ChatVoice() : ChatVoice(nullptr) {}
  ~ChatVoice() override;
  explicit PROTOBUF_CONSTEXPR ChatVoice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatVoice(const ChatVoice& from);
  ChatVoice(ChatVoice&& from) noexcept
    : ChatVoice() {
    *this = ::std::move(from);
  }

  inline ChatVoice& operator=(const ChatVoice& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatVoice& operator=(ChatVoice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatVoice& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatVoice* internal_default_instance() {
    return reinterpret_cast<const ChatVoice*>(
               &_ChatVoice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChatVoice& a, ChatVoice& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatVoice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatVoice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatVoice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatVoice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatVoice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatVoice& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatVoice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ChatVoice";
  }
  protected:
  explicit ChatVoice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrVoicesFieldNumber = 1,
  };
  // bytes strVoices = 1;
  void clear_strvoices();
  const std::string& strvoices() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strvoices(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strvoices();
  PROTOBUF_NODISCARD std::string* release_strvoices();
  void set_allocated_strvoices(std::string* strvoices);
  private:
  const std::string& _internal_strvoices() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strvoices(const std::string& value);
  std::string* _internal_mutable_strvoices();
  public:

  // @@protoc_insertion_point(class_scope:common.ChatVoice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strvoices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chatcommon_2eproto;
};
// -------------------------------------------------------------------

class ChatItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ChatItem) */ {
 public:
  inline ChatItem() : ChatItem(nullptr) {}
  ~ChatItem() override;
  explicit PROTOBUF_CONSTEXPR ChatItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatItem(const ChatItem& from);
  ChatItem(ChatItem&& from) noexcept
    : ChatItem() {
    *this = ::std::move(from);
  }

  inline ChatItem& operator=(const ChatItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatItem& operator=(ChatItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatItem* internal_default_instance() {
    return reinterpret_cast<const ChatItem*>(
               &_ChatItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ChatItem& a, ChatItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ChatItem";
  }
  protected:
  explicit ChatItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOItemFieldNumber = 1,
  };
  // .common.Item oItem = 1;
  bool has_oitem() const;
  private:
  bool _internal_has_oitem() const;
  public:
  void clear_oitem();
  const ::common::Item& oitem() const;
  PROTOBUF_NODISCARD ::common::Item* release_oitem();
  ::common::Item* mutable_oitem();
  void set_allocated_oitem(::common::Item* oitem);
  private:
  const ::common::Item& _internal_oitem() const;
  ::common::Item* _internal_mutable_oitem();
  public:
  void unsafe_arena_set_allocated_oitem(
      ::common::Item* oitem);
  ::common::Item* unsafe_arena_release_oitem();

  // @@protoc_insertion_point(class_scope:common.ChatItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::Item* oitem_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chatcommon_2eproto;
};
// -------------------------------------------------------------------

class ChatSmile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ChatSmile) */ {
 public:
  inline ChatSmile() : ChatSmile(nullptr) {}
  ~ChatSmile() override;
  explicit PROTOBUF_CONSTEXPR ChatSmile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatSmile(const ChatSmile& from);
  ChatSmile(ChatSmile&& from) noexcept
    : ChatSmile() {
    *this = ::std::move(from);
  }

  inline ChatSmile& operator=(const ChatSmile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatSmile& operator=(ChatSmile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatSmile& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatSmile* internal_default_instance() {
    return reinterpret_cast<const ChatSmile*>(
               &_ChatSmile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ChatSmile& a, ChatSmile& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatSmile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatSmile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatSmile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatSmile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatSmile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatSmile& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatSmile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ChatSmile";
  }
  protected:
  explicit ChatSmile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUiIdFieldNumber = 1,
  };
  // uint32 uiId = 1;
  void clear_uiid();
  uint32_t uiid() const;
  void set_uiid(uint32_t value);
  private:
  uint32_t _internal_uiid() const;
  void _internal_set_uiid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ChatSmile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t uiid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chatcommon_2eproto;
};
// -------------------------------------------------------------------

class ChatAtId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ChatAtId) */ {
 public:
  inline ChatAtId() : ChatAtId(nullptr) {}
  ~ChatAtId() override;
  explicit PROTOBUF_CONSTEXPR ChatAtId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatAtId(const ChatAtId& from);
  ChatAtId(ChatAtId&& from) noexcept
    : ChatAtId() {
    *this = ::std::move(from);
  }

  inline ChatAtId& operator=(const ChatAtId& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatAtId& operator=(ChatAtId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatAtId& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatAtId* internal_default_instance() {
    return reinterpret_cast<const ChatAtId*>(
               &_ChatAtId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ChatAtId& a, ChatAtId& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatAtId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatAtId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatAtId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatAtId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatAtId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatAtId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatAtId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ChatAtId";
  }
  protected:
  explicit ChatAtId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlRoleIdFieldNumber = 1,
  };
  // uint64 llRoleId = 1;
  void clear_llroleid();
  uint64_t llroleid() const;
  void set_llroleid(uint64_t value);
  private:
  uint64_t _internal_llroleid() const;
  void _internal_set_llroleid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ChatAtId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t llroleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chatcommon_2eproto;
};
// -------------------------------------------------------------------

class ChatAtName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ChatAtName) */ {
 public:
  inline ChatAtName() : ChatAtName(nullptr) {}
  ~ChatAtName() override;
  explicit PROTOBUF_CONSTEXPR ChatAtName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatAtName(const ChatAtName& from);
  ChatAtName(ChatAtName&& from) noexcept
    : ChatAtName() {
    *this = ::std::move(from);
  }

  inline ChatAtName& operator=(const ChatAtName& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatAtName& operator=(ChatAtName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatAtName& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatAtName* internal_default_instance() {
    return reinterpret_cast<const ChatAtName*>(
               &_ChatAtName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ChatAtName& a, ChatAtName& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatAtName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatAtName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatAtName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatAtName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatAtName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatAtName& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatAtName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ChatAtName";
  }
  protected:
  explicit ChatAtName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrNickFieldNumber = 2,
    kLlRoleIdFieldNumber = 1,
  };
  // string strNick = 2;
  void clear_strnick();
  const std::string& strnick() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strnick(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strnick();
  PROTOBUF_NODISCARD std::string* release_strnick();
  void set_allocated_strnick(std::string* strnick);
  private:
  const std::string& _internal_strnick() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strnick(const std::string& value);
  std::string* _internal_mutable_strnick();
  public:

  // uint64 llRoleId = 1;
  void clear_llroleid();
  uint64_t llroleid() const;
  void set_llroleid(uint64_t value);
  private:
  uint64_t _internal_llroleid() const;
  void _internal_set_llroleid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.ChatAtName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strnick_;
  uint64_t llroleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chatcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChatTypeContextUp

// uint64 llRecverId = 1;
inline void ChatTypeContextUp::clear_llrecverid() {
  llrecverid_ = uint64_t{0u};
}
inline uint64_t ChatTypeContextUp::_internal_llrecverid() const {
  return llrecverid_;
}
inline uint64_t ChatTypeContextUp::llrecverid() const {
  // @@protoc_insertion_point(field_get:common.ChatTypeContextUp.llRecverId)
  return _internal_llrecverid();
}
inline void ChatTypeContextUp::_internal_set_llrecverid(uint64_t value) {
  
  llrecverid_ = value;
}
inline void ChatTypeContextUp::set_llrecverid(uint64_t value) {
  _internal_set_llrecverid(value);
  // @@protoc_insertion_point(field_set:common.ChatTypeContextUp.llRecverId)
}

// repeated .common.ChatParamUp vecContexts = 2;
inline int ChatTypeContextUp::_internal_veccontexts_size() const {
  return veccontexts_.size();
}
inline int ChatTypeContextUp::veccontexts_size() const {
  return _internal_veccontexts_size();
}
inline void ChatTypeContextUp::clear_veccontexts() {
  veccontexts_.Clear();
}
inline ::common::ChatParamUp* ChatTypeContextUp::mutable_veccontexts(int index) {
  // @@protoc_insertion_point(field_mutable:common.ChatTypeContextUp.vecContexts)
  return veccontexts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ChatParamUp >*
ChatTypeContextUp::mutable_veccontexts() {
  // @@protoc_insertion_point(field_mutable_list:common.ChatTypeContextUp.vecContexts)
  return &veccontexts_;
}
inline const ::common::ChatParamUp& ChatTypeContextUp::_internal_veccontexts(int index) const {
  return veccontexts_.Get(index);
}
inline const ::common::ChatParamUp& ChatTypeContextUp::veccontexts(int index) const {
  // @@protoc_insertion_point(field_get:common.ChatTypeContextUp.vecContexts)
  return _internal_veccontexts(index);
}
inline ::common::ChatParamUp* ChatTypeContextUp::_internal_add_veccontexts() {
  return veccontexts_.Add();
}
inline ::common::ChatParamUp* ChatTypeContextUp::add_veccontexts() {
  ::common::ChatParamUp* _add = _internal_add_veccontexts();
  // @@protoc_insertion_point(field_add:common.ChatTypeContextUp.vecContexts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ChatParamUp >&
ChatTypeContextUp::veccontexts() const {
  // @@protoc_insertion_point(field_list:common.ChatTypeContextUp.vecContexts)
  return veccontexts_;
}

// -------------------------------------------------------------------

// ChatTypeContextDown

// uint64 llTimestamp = 1;
inline void ChatTypeContextDown::clear_lltimestamp() {
  lltimestamp_ = uint64_t{0u};
}
inline uint64_t ChatTypeContextDown::_internal_lltimestamp() const {
  return lltimestamp_;
}
inline uint64_t ChatTypeContextDown::lltimestamp() const {
  // @@protoc_insertion_point(field_get:common.ChatTypeContextDown.llTimestamp)
  return _internal_lltimestamp();
}
inline void ChatTypeContextDown::_internal_set_lltimestamp(uint64_t value) {
  
  lltimestamp_ = value;
}
inline void ChatTypeContextDown::set_lltimestamp(uint64_t value) {
  _internal_set_lltimestamp(value);
  // @@protoc_insertion_point(field_set:common.ChatTypeContextDown.llTimestamp)
}

// .common.ChatRole oSender = 2;
inline bool ChatTypeContextDown::_internal_has_osender() const {
  return this != internal_default_instance() && osender_ != nullptr;
}
inline bool ChatTypeContextDown::has_osender() const {
  return _internal_has_osender();
}
inline void ChatTypeContextDown::clear_osender() {
  if (GetArenaForAllocation() == nullptr && osender_ != nullptr) {
    delete osender_;
  }
  osender_ = nullptr;
}
inline const ::common::ChatRole& ChatTypeContextDown::_internal_osender() const {
  const ::common::ChatRole* p = osender_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ChatRole&>(
      ::common::_ChatRole_default_instance_);
}
inline const ::common::ChatRole& ChatTypeContextDown::osender() const {
  // @@protoc_insertion_point(field_get:common.ChatTypeContextDown.oSender)
  return _internal_osender();
}
inline void ChatTypeContextDown::unsafe_arena_set_allocated_osender(
    ::common::ChatRole* osender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(osender_);
  }
  osender_ = osender;
  if (osender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ChatTypeContextDown.oSender)
}
inline ::common::ChatRole* ChatTypeContextDown::release_osender() {
  
  ::common::ChatRole* temp = osender_;
  osender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ChatRole* ChatTypeContextDown::unsafe_arena_release_osender() {
  // @@protoc_insertion_point(field_release:common.ChatTypeContextDown.oSender)
  
  ::common::ChatRole* temp = osender_;
  osender_ = nullptr;
  return temp;
}
inline ::common::ChatRole* ChatTypeContextDown::_internal_mutable_osender() {
  
  if (osender_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ChatRole>(GetArenaForAllocation());
    osender_ = p;
  }
  return osender_;
}
inline ::common::ChatRole* ChatTypeContextDown::mutable_osender() {
  ::common::ChatRole* _msg = _internal_mutable_osender();
  // @@protoc_insertion_point(field_mutable:common.ChatTypeContextDown.oSender)
  return _msg;
}
inline void ChatTypeContextDown::set_allocated_osender(::common::ChatRole* osender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete osender_;
  }
  if (osender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(osender);
    if (message_arena != submessage_arena) {
      osender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, osender, submessage_arena);
    }
    
  } else {
    
  }
  osender_ = osender;
  // @@protoc_insertion_point(field_set_allocated:common.ChatTypeContextDown.oSender)
}

// repeated .common.ChatParamDown vecContexts = 3;
inline int ChatTypeContextDown::_internal_veccontexts_size() const {
  return veccontexts_.size();
}
inline int ChatTypeContextDown::veccontexts_size() const {
  return _internal_veccontexts_size();
}
inline void ChatTypeContextDown::clear_veccontexts() {
  veccontexts_.Clear();
}
inline ::common::ChatParamDown* ChatTypeContextDown::mutable_veccontexts(int index) {
  // @@protoc_insertion_point(field_mutable:common.ChatTypeContextDown.vecContexts)
  return veccontexts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ChatParamDown >*
ChatTypeContextDown::mutable_veccontexts() {
  // @@protoc_insertion_point(field_mutable_list:common.ChatTypeContextDown.vecContexts)
  return &veccontexts_;
}
inline const ::common::ChatParamDown& ChatTypeContextDown::_internal_veccontexts(int index) const {
  return veccontexts_.Get(index);
}
inline const ::common::ChatParamDown& ChatTypeContextDown::veccontexts(int index) const {
  // @@protoc_insertion_point(field_get:common.ChatTypeContextDown.vecContexts)
  return _internal_veccontexts(index);
}
inline ::common::ChatParamDown* ChatTypeContextDown::_internal_add_veccontexts() {
  return veccontexts_.Add();
}
inline ::common::ChatParamDown* ChatTypeContextDown::add_veccontexts() {
  ::common::ChatParamDown* _add = _internal_add_veccontexts();
  // @@protoc_insertion_point(field_add:common.ChatTypeContextDown.vecContexts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ChatParamDown >&
ChatTypeContextDown::veccontexts() const {
  // @@protoc_insertion_point(field_list:common.ChatTypeContextDown.vecContexts)
  return veccontexts_;
}

// -------------------------------------------------------------------

// ChatRole

// .common.RoleBrief oBrief = 1;
inline bool ChatRole::_internal_has_obrief() const {
  return this != internal_default_instance() && obrief_ != nullptr;
}
inline bool ChatRole::has_obrief() const {
  return _internal_has_obrief();
}
inline const ::common::RoleBrief& ChatRole::_internal_obrief() const {
  const ::common::RoleBrief* p = obrief_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::RoleBrief&>(
      ::common::_RoleBrief_default_instance_);
}
inline const ::common::RoleBrief& ChatRole::obrief() const {
  // @@protoc_insertion_point(field_get:common.ChatRole.oBrief)
  return _internal_obrief();
}
inline void ChatRole::unsafe_arena_set_allocated_obrief(
    ::common::RoleBrief* obrief) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obrief_);
  }
  obrief_ = obrief;
  if (obrief) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ChatRole.oBrief)
}
inline ::common::RoleBrief* ChatRole::release_obrief() {
  
  ::common::RoleBrief* temp = obrief_;
  obrief_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::RoleBrief* ChatRole::unsafe_arena_release_obrief() {
  // @@protoc_insertion_point(field_release:common.ChatRole.oBrief)
  
  ::common::RoleBrief* temp = obrief_;
  obrief_ = nullptr;
  return temp;
}
inline ::common::RoleBrief* ChatRole::_internal_mutable_obrief() {
  
  if (obrief_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::RoleBrief>(GetArenaForAllocation());
    obrief_ = p;
  }
  return obrief_;
}
inline ::common::RoleBrief* ChatRole::mutable_obrief() {
  ::common::RoleBrief* _msg = _internal_mutable_obrief();
  // @@protoc_insertion_point(field_mutable:common.ChatRole.oBrief)
  return _msg;
}
inline void ChatRole::set_allocated_obrief(::common::RoleBrief* obrief) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(obrief_);
  }
  if (obrief) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obrief));
    if (message_arena != submessage_arena) {
      obrief = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obrief, submessage_arena);
    }
    
  } else {
    
  }
  obrief_ = obrief;
  // @@protoc_insertion_point(field_set_allocated:common.ChatRole.oBrief)
}

// uint32 uiOfficial = 2;
inline void ChatRole::clear_uiofficial() {
  uiofficial_ = 0u;
}
inline uint32_t ChatRole::_internal_uiofficial() const {
  return uiofficial_;
}
inline uint32_t ChatRole::uiofficial() const {
  // @@protoc_insertion_point(field_get:common.ChatRole.uiOfficial)
  return _internal_uiofficial();
}
inline void ChatRole::_internal_set_uiofficial(uint32_t value) {
  
  uiofficial_ = value;
}
inline void ChatRole::set_uiofficial(uint32_t value) {
  _internal_set_uiofficial(value);
  // @@protoc_insertion_point(field_set:common.ChatRole.uiOfficial)
}

// uint32 uiChatFrame = 3;
inline void ChatRole::clear_uichatframe() {
  uichatframe_ = 0u;
}
inline uint32_t ChatRole::_internal_uichatframe() const {
  return uichatframe_;
}
inline uint32_t ChatRole::uichatframe() const {
  // @@protoc_insertion_point(field_get:common.ChatRole.uiChatFrame)
  return _internal_uichatframe();
}
inline void ChatRole::_internal_set_uichatframe(uint32_t value) {
  
  uichatframe_ = value;
}
inline void ChatRole::set_uichatframe(uint32_t value) {
  _internal_set_uichatframe(value);
  // @@protoc_insertion_point(field_set:common.ChatRole.uiChatFrame)
}

// uint32 uiChatFont = 4;
inline void ChatRole::clear_uichatfont() {
  uichatfont_ = 0u;
}
inline uint32_t ChatRole::_internal_uichatfont() const {
  return uichatfont_;
}
inline uint32_t ChatRole::uichatfont() const {
  // @@protoc_insertion_point(field_get:common.ChatRole.uiChatFont)
  return _internal_uichatfont();
}
inline void ChatRole::_internal_set_uichatfont(uint32_t value) {
  
  uichatfont_ = value;
}
inline void ChatRole::set_uichatfont(uint32_t value) {
  _internal_set_uichatfont(value);
  // @@protoc_insertion_point(field_set:common.ChatRole.uiChatFont)
}

// uint32 uiChatBgd = 5;
inline void ChatRole::clear_uichatbgd() {
  uichatbgd_ = 0u;
}
inline uint32_t ChatRole::_internal_uichatbgd() const {
  return uichatbgd_;
}
inline uint32_t ChatRole::uichatbgd() const {
  // @@protoc_insertion_point(field_get:common.ChatRole.uiChatBgd)
  return _internal_uichatbgd();
}
inline void ChatRole::_internal_set_uichatbgd(uint32_t value) {
  
  uichatbgd_ = value;
}
inline void ChatRole::set_uichatbgd(uint32_t value) {
  _internal_set_uichatbgd(value);
  // @@protoc_insertion_point(field_set:common.ChatRole.uiChatBgd)
}

// -------------------------------------------------------------------

// ChatParamUp

// .common.ChatString oChat = 1;
inline bool ChatParamUp::_internal_has_ochat() const {
  return this != internal_default_instance() && ochat_ != nullptr;
}
inline bool ChatParamUp::has_ochat() const {
  return _internal_has_ochat();
}
inline void ChatParamUp::clear_ochat() {
  if (GetArenaForAllocation() == nullptr && ochat_ != nullptr) {
    delete ochat_;
  }
  ochat_ = nullptr;
}
inline const ::common::ChatString& ChatParamUp::_internal_ochat() const {
  const ::common::ChatString* p = ochat_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ChatString&>(
      ::common::_ChatString_default_instance_);
}
inline const ::common::ChatString& ChatParamUp::ochat() const {
  // @@protoc_insertion_point(field_get:common.ChatParamUp.oChat)
  return _internal_ochat();
}
inline void ChatParamUp::unsafe_arena_set_allocated_ochat(
    ::common::ChatString* ochat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ochat_);
  }
  ochat_ = ochat;
  if (ochat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ChatParamUp.oChat)
}
inline ::common::ChatString* ChatParamUp::release_ochat() {
  
  ::common::ChatString* temp = ochat_;
  ochat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ChatString* ChatParamUp::unsafe_arena_release_ochat() {
  // @@protoc_insertion_point(field_release:common.ChatParamUp.oChat)
  
  ::common::ChatString* temp = ochat_;
  ochat_ = nullptr;
  return temp;
}
inline ::common::ChatString* ChatParamUp::_internal_mutable_ochat() {
  
  if (ochat_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ChatString>(GetArenaForAllocation());
    ochat_ = p;
  }
  return ochat_;
}
inline ::common::ChatString* ChatParamUp::mutable_ochat() {
  ::common::ChatString* _msg = _internal_mutable_ochat();
  // @@protoc_insertion_point(field_mutable:common.ChatParamUp.oChat)
  return _msg;
}
inline void ChatParamUp::set_allocated_ochat(::common::ChatString* ochat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ochat_;
  }
  if (ochat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ochat);
    if (message_arena != submessage_arena) {
      ochat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ochat, submessage_arena);
    }
    
  } else {
    
  }
  ochat_ = ochat;
  // @@protoc_insertion_point(field_set_allocated:common.ChatParamUp.oChat)
}

// .common.ChatVoice oVoice = 2;
inline bool ChatParamUp::_internal_has_ovoice() const {
  return this != internal_default_instance() && ovoice_ != nullptr;
}
inline bool ChatParamUp::has_ovoice() const {
  return _internal_has_ovoice();
}
inline void ChatParamUp::clear_ovoice() {
  if (GetArenaForAllocation() == nullptr && ovoice_ != nullptr) {
    delete ovoice_;
  }
  ovoice_ = nullptr;
}
inline const ::common::ChatVoice& ChatParamUp::_internal_ovoice() const {
  const ::common::ChatVoice* p = ovoice_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ChatVoice&>(
      ::common::_ChatVoice_default_instance_);
}
inline const ::common::ChatVoice& ChatParamUp::ovoice() const {
  // @@protoc_insertion_point(field_get:common.ChatParamUp.oVoice)
  return _internal_ovoice();
}
inline void ChatParamUp::unsafe_arena_set_allocated_ovoice(
    ::common::ChatVoice* ovoice) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ovoice_);
  }
  ovoice_ = ovoice;
  if (ovoice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ChatParamUp.oVoice)
}
inline ::common::ChatVoice* ChatParamUp::release_ovoice() {
  
  ::common::ChatVoice* temp = ovoice_;
  ovoice_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ChatVoice* ChatParamUp::unsafe_arena_release_ovoice() {
  // @@protoc_insertion_point(field_release:common.ChatParamUp.oVoice)
  
  ::common::ChatVoice* temp = ovoice_;
  ovoice_ = nullptr;
  return temp;
}
inline ::common::ChatVoice* ChatParamUp::_internal_mutable_ovoice() {
  
  if (ovoice_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ChatVoice>(GetArenaForAllocation());
    ovoice_ = p;
  }
  return ovoice_;
}
inline ::common::ChatVoice* ChatParamUp::mutable_ovoice() {
  ::common::ChatVoice* _msg = _internal_mutable_ovoice();
  // @@protoc_insertion_point(field_mutable:common.ChatParamUp.oVoice)
  return _msg;
}
inline void ChatParamUp::set_allocated_ovoice(::common::ChatVoice* ovoice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ovoice_;
  }
  if (ovoice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ovoice);
    if (message_arena != submessage_arena) {
      ovoice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ovoice, submessage_arena);
    }
    
  } else {
    
  }
  ovoice_ = ovoice;
  // @@protoc_insertion_point(field_set_allocated:common.ChatParamUp.oVoice)
}

// .common.ChatSmile oSmile = 3;
inline bool ChatParamUp::_internal_has_osmile() const {
  return this != internal_default_instance() && osmile_ != nullptr;
}
inline bool ChatParamUp::has_osmile() const {
  return _internal_has_osmile();
}
inline void ChatParamUp::clear_osmile() {
  if (GetArenaForAllocation() == nullptr && osmile_ != nullptr) {
    delete osmile_;
  }
  osmile_ = nullptr;
}
inline const ::common::ChatSmile& ChatParamUp::_internal_osmile() const {
  const ::common::ChatSmile* p = osmile_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ChatSmile&>(
      ::common::_ChatSmile_default_instance_);
}
inline const ::common::ChatSmile& ChatParamUp::osmile() const {
  // @@protoc_insertion_point(field_get:common.ChatParamUp.oSmile)
  return _internal_osmile();
}
inline void ChatParamUp::unsafe_arena_set_allocated_osmile(
    ::common::ChatSmile* osmile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(osmile_);
  }
  osmile_ = osmile;
  if (osmile) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ChatParamUp.oSmile)
}
inline ::common::ChatSmile* ChatParamUp::release_osmile() {
  
  ::common::ChatSmile* temp = osmile_;
  osmile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ChatSmile* ChatParamUp::unsafe_arena_release_osmile() {
  // @@protoc_insertion_point(field_release:common.ChatParamUp.oSmile)
  
  ::common::ChatSmile* temp = osmile_;
  osmile_ = nullptr;
  return temp;
}
inline ::common::ChatSmile* ChatParamUp::_internal_mutable_osmile() {
  
  if (osmile_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ChatSmile>(GetArenaForAllocation());
    osmile_ = p;
  }
  return osmile_;
}
inline ::common::ChatSmile* ChatParamUp::mutable_osmile() {
  ::common::ChatSmile* _msg = _internal_mutable_osmile();
  // @@protoc_insertion_point(field_mutable:common.ChatParamUp.oSmile)
  return _msg;
}
inline void ChatParamUp::set_allocated_osmile(::common::ChatSmile* osmile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete osmile_;
  }
  if (osmile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(osmile);
    if (message_arena != submessage_arena) {
      osmile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, osmile, submessage_arena);
    }
    
  } else {
    
  }
  osmile_ = osmile;
  // @@protoc_insertion_point(field_set_allocated:common.ChatParamUp.oSmile)
}

// .common.ChatItem oItem = 4;
inline bool ChatParamUp::_internal_has_oitem() const {
  return this != internal_default_instance() && oitem_ != nullptr;
}
inline bool ChatParamUp::has_oitem() const {
  return _internal_has_oitem();
}
inline void ChatParamUp::clear_oitem() {
  if (GetArenaForAllocation() == nullptr && oitem_ != nullptr) {
    delete oitem_;
  }
  oitem_ = nullptr;
}
inline const ::common::ChatItem& ChatParamUp::_internal_oitem() const {
  const ::common::ChatItem* p = oitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ChatItem&>(
      ::common::_ChatItem_default_instance_);
}
inline const ::common::ChatItem& ChatParamUp::oitem() const {
  // @@protoc_insertion_point(field_get:common.ChatParamUp.oItem)
  return _internal_oitem();
}
inline void ChatParamUp::unsafe_arena_set_allocated_oitem(
    ::common::ChatItem* oitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oitem_);
  }
  oitem_ = oitem;
  if (oitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ChatParamUp.oItem)
}
inline ::common::ChatItem* ChatParamUp::release_oitem() {
  
  ::common::ChatItem* temp = oitem_;
  oitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ChatItem* ChatParamUp::unsafe_arena_release_oitem() {
  // @@protoc_insertion_point(field_release:common.ChatParamUp.oItem)
  
  ::common::ChatItem* temp = oitem_;
  oitem_ = nullptr;
  return temp;
}
inline ::common::ChatItem* ChatParamUp::_internal_mutable_oitem() {
  
  if (oitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ChatItem>(GetArenaForAllocation());
    oitem_ = p;
  }
  return oitem_;
}
inline ::common::ChatItem* ChatParamUp::mutable_oitem() {
  ::common::ChatItem* _msg = _internal_mutable_oitem();
  // @@protoc_insertion_point(field_mutable:common.ChatParamUp.oItem)
  return _msg;
}
inline void ChatParamUp::set_allocated_oitem(::common::ChatItem* oitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete oitem_;
  }
  if (oitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(oitem);
    if (message_arena != submessage_arena) {
      oitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oitem, submessage_arena);
    }
    
  } else {
    
  }
  oitem_ = oitem;
  // @@protoc_insertion_point(field_set_allocated:common.ChatParamUp.oItem)
}

// .common.ChatAtId oTid = 5;
inline bool ChatParamUp::_internal_has_otid() const {
  return this != internal_default_instance() && otid_ != nullptr;
}
inline bool ChatParamUp::has_otid() const {
  return _internal_has_otid();
}
inline void ChatParamUp::clear_otid() {
  if (GetArenaForAllocation() == nullptr && otid_ != nullptr) {
    delete otid_;
  }
  otid_ = nullptr;
}
inline const ::common::ChatAtId& ChatParamUp::_internal_otid() const {
  const ::common::ChatAtId* p = otid_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ChatAtId&>(
      ::common::_ChatAtId_default_instance_);
}
inline const ::common::ChatAtId& ChatParamUp::otid() const {
  // @@protoc_insertion_point(field_get:common.ChatParamUp.oTid)
  return _internal_otid();
}
inline void ChatParamUp::unsafe_arena_set_allocated_otid(
    ::common::ChatAtId* otid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(otid_);
  }
  otid_ = otid;
  if (otid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ChatParamUp.oTid)
}
inline ::common::ChatAtId* ChatParamUp::release_otid() {
  
  ::common::ChatAtId* temp = otid_;
  otid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ChatAtId* ChatParamUp::unsafe_arena_release_otid() {
  // @@protoc_insertion_point(field_release:common.ChatParamUp.oTid)
  
  ::common::ChatAtId* temp = otid_;
  otid_ = nullptr;
  return temp;
}
inline ::common::ChatAtId* ChatParamUp::_internal_mutable_otid() {
  
  if (otid_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ChatAtId>(GetArenaForAllocation());
    otid_ = p;
  }
  return otid_;
}
inline ::common::ChatAtId* ChatParamUp::mutable_otid() {
  ::common::ChatAtId* _msg = _internal_mutable_otid();
  // @@protoc_insertion_point(field_mutable:common.ChatParamUp.oTid)
  return _msg;
}
inline void ChatParamUp::set_allocated_otid(::common::ChatAtId* otid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete otid_;
  }
  if (otid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(otid);
    if (message_arena != submessage_arena) {
      otid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, otid, submessage_arena);
    }
    
  } else {
    
  }
  otid_ = otid;
  // @@protoc_insertion_point(field_set_allocated:common.ChatParamUp.oTid)
}

// -------------------------------------------------------------------

// ChatParamDown

// .common.ChatString oChat = 1;
inline bool ChatParamDown::_internal_has_ochat() const {
  return this != internal_default_instance() && ochat_ != nullptr;
}
inline bool ChatParamDown::has_ochat() const {
  return _internal_has_ochat();
}
inline void ChatParamDown::clear_ochat() {
  if (GetArenaForAllocation() == nullptr && ochat_ != nullptr) {
    delete ochat_;
  }
  ochat_ = nullptr;
}
inline const ::common::ChatString& ChatParamDown::_internal_ochat() const {
  const ::common::ChatString* p = ochat_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ChatString&>(
      ::common::_ChatString_default_instance_);
}
inline const ::common::ChatString& ChatParamDown::ochat() const {
  // @@protoc_insertion_point(field_get:common.ChatParamDown.oChat)
  return _internal_ochat();
}
inline void ChatParamDown::unsafe_arena_set_allocated_ochat(
    ::common::ChatString* ochat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ochat_);
  }
  ochat_ = ochat;
  if (ochat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ChatParamDown.oChat)
}
inline ::common::ChatString* ChatParamDown::release_ochat() {
  
  ::common::ChatString* temp = ochat_;
  ochat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ChatString* ChatParamDown::unsafe_arena_release_ochat() {
  // @@protoc_insertion_point(field_release:common.ChatParamDown.oChat)
  
  ::common::ChatString* temp = ochat_;
  ochat_ = nullptr;
  return temp;
}
inline ::common::ChatString* ChatParamDown::_internal_mutable_ochat() {
  
  if (ochat_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ChatString>(GetArenaForAllocation());
    ochat_ = p;
  }
  return ochat_;
}
inline ::common::ChatString* ChatParamDown::mutable_ochat() {
  ::common::ChatString* _msg = _internal_mutable_ochat();
  // @@protoc_insertion_point(field_mutable:common.ChatParamDown.oChat)
  return _msg;
}
inline void ChatParamDown::set_allocated_ochat(::common::ChatString* ochat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ochat_;
  }
  if (ochat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ochat);
    if (message_arena != submessage_arena) {
      ochat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ochat, submessage_arena);
    }
    
  } else {
    
  }
  ochat_ = ochat;
  // @@protoc_insertion_point(field_set_allocated:common.ChatParamDown.oChat)
}

// .common.ChatVoice oVoice = 2;
inline bool ChatParamDown::_internal_has_ovoice() const {
  return this != internal_default_instance() && ovoice_ != nullptr;
}
inline bool ChatParamDown::has_ovoice() const {
  return _internal_has_ovoice();
}
inline void ChatParamDown::clear_ovoice() {
  if (GetArenaForAllocation() == nullptr && ovoice_ != nullptr) {
    delete ovoice_;
  }
  ovoice_ = nullptr;
}
inline const ::common::ChatVoice& ChatParamDown::_internal_ovoice() const {
  const ::common::ChatVoice* p = ovoice_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ChatVoice&>(
      ::common::_ChatVoice_default_instance_);
}
inline const ::common::ChatVoice& ChatParamDown::ovoice() const {
  // @@protoc_insertion_point(field_get:common.ChatParamDown.oVoice)
  return _internal_ovoice();
}
inline void ChatParamDown::unsafe_arena_set_allocated_ovoice(
    ::common::ChatVoice* ovoice) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ovoice_);
  }
  ovoice_ = ovoice;
  if (ovoice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ChatParamDown.oVoice)
}
inline ::common::ChatVoice* ChatParamDown::release_ovoice() {
  
  ::common::ChatVoice* temp = ovoice_;
  ovoice_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ChatVoice* ChatParamDown::unsafe_arena_release_ovoice() {
  // @@protoc_insertion_point(field_release:common.ChatParamDown.oVoice)
  
  ::common::ChatVoice* temp = ovoice_;
  ovoice_ = nullptr;
  return temp;
}
inline ::common::ChatVoice* ChatParamDown::_internal_mutable_ovoice() {
  
  if (ovoice_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ChatVoice>(GetArenaForAllocation());
    ovoice_ = p;
  }
  return ovoice_;
}
inline ::common::ChatVoice* ChatParamDown::mutable_ovoice() {
  ::common::ChatVoice* _msg = _internal_mutable_ovoice();
  // @@protoc_insertion_point(field_mutable:common.ChatParamDown.oVoice)
  return _msg;
}
inline void ChatParamDown::set_allocated_ovoice(::common::ChatVoice* ovoice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ovoice_;
  }
  if (ovoice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ovoice);
    if (message_arena != submessage_arena) {
      ovoice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ovoice, submessage_arena);
    }
    
  } else {
    
  }
  ovoice_ = ovoice;
  // @@protoc_insertion_point(field_set_allocated:common.ChatParamDown.oVoice)
}

// .common.ChatSmile oSmile = 3;
inline bool ChatParamDown::_internal_has_osmile() const {
  return this != internal_default_instance() && osmile_ != nullptr;
}
inline bool ChatParamDown::has_osmile() const {
  return _internal_has_osmile();
}
inline void ChatParamDown::clear_osmile() {
  if (GetArenaForAllocation() == nullptr && osmile_ != nullptr) {
    delete osmile_;
  }
  osmile_ = nullptr;
}
inline const ::common::ChatSmile& ChatParamDown::_internal_osmile() const {
  const ::common::ChatSmile* p = osmile_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ChatSmile&>(
      ::common::_ChatSmile_default_instance_);
}
inline const ::common::ChatSmile& ChatParamDown::osmile() const {
  // @@protoc_insertion_point(field_get:common.ChatParamDown.oSmile)
  return _internal_osmile();
}
inline void ChatParamDown::unsafe_arena_set_allocated_osmile(
    ::common::ChatSmile* osmile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(osmile_);
  }
  osmile_ = osmile;
  if (osmile) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ChatParamDown.oSmile)
}
inline ::common::ChatSmile* ChatParamDown::release_osmile() {
  
  ::common::ChatSmile* temp = osmile_;
  osmile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ChatSmile* ChatParamDown::unsafe_arena_release_osmile() {
  // @@protoc_insertion_point(field_release:common.ChatParamDown.oSmile)
  
  ::common::ChatSmile* temp = osmile_;
  osmile_ = nullptr;
  return temp;
}
inline ::common::ChatSmile* ChatParamDown::_internal_mutable_osmile() {
  
  if (osmile_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ChatSmile>(GetArenaForAllocation());
    osmile_ = p;
  }
  return osmile_;
}
inline ::common::ChatSmile* ChatParamDown::mutable_osmile() {
  ::common::ChatSmile* _msg = _internal_mutable_osmile();
  // @@protoc_insertion_point(field_mutable:common.ChatParamDown.oSmile)
  return _msg;
}
inline void ChatParamDown::set_allocated_osmile(::common::ChatSmile* osmile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete osmile_;
  }
  if (osmile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(osmile);
    if (message_arena != submessage_arena) {
      osmile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, osmile, submessage_arena);
    }
    
  } else {
    
  }
  osmile_ = osmile;
  // @@protoc_insertion_point(field_set_allocated:common.ChatParamDown.oSmile)
}

// .common.ChatItem oItem = 4;
inline bool ChatParamDown::_internal_has_oitem() const {
  return this != internal_default_instance() && oitem_ != nullptr;
}
inline bool ChatParamDown::has_oitem() const {
  return _internal_has_oitem();
}
inline void ChatParamDown::clear_oitem() {
  if (GetArenaForAllocation() == nullptr && oitem_ != nullptr) {
    delete oitem_;
  }
  oitem_ = nullptr;
}
inline const ::common::ChatItem& ChatParamDown::_internal_oitem() const {
  const ::common::ChatItem* p = oitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ChatItem&>(
      ::common::_ChatItem_default_instance_);
}
inline const ::common::ChatItem& ChatParamDown::oitem() const {
  // @@protoc_insertion_point(field_get:common.ChatParamDown.oItem)
  return _internal_oitem();
}
inline void ChatParamDown::unsafe_arena_set_allocated_oitem(
    ::common::ChatItem* oitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oitem_);
  }
  oitem_ = oitem;
  if (oitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ChatParamDown.oItem)
}
inline ::common::ChatItem* ChatParamDown::release_oitem() {
  
  ::common::ChatItem* temp = oitem_;
  oitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ChatItem* ChatParamDown::unsafe_arena_release_oitem() {
  // @@protoc_insertion_point(field_release:common.ChatParamDown.oItem)
  
  ::common::ChatItem* temp = oitem_;
  oitem_ = nullptr;
  return temp;
}
inline ::common::ChatItem* ChatParamDown::_internal_mutable_oitem() {
  
  if (oitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ChatItem>(GetArenaForAllocation());
    oitem_ = p;
  }
  return oitem_;
}
inline ::common::ChatItem* ChatParamDown::mutable_oitem() {
  ::common::ChatItem* _msg = _internal_mutable_oitem();
  // @@protoc_insertion_point(field_mutable:common.ChatParamDown.oItem)
  return _msg;
}
inline void ChatParamDown::set_allocated_oitem(::common::ChatItem* oitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete oitem_;
  }
  if (oitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(oitem);
    if (message_arena != submessage_arena) {
      oitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oitem, submessage_arena);
    }
    
  } else {
    
  }
  oitem_ = oitem;
  // @@protoc_insertion_point(field_set_allocated:common.ChatParamDown.oItem)
}

// .common.ChatAtName oAtName = 5;
inline bool ChatParamDown::_internal_has_oatname() const {
  return this != internal_default_instance() && oatname_ != nullptr;
}
inline bool ChatParamDown::has_oatname() const {
  return _internal_has_oatname();
}
inline void ChatParamDown::clear_oatname() {
  if (GetArenaForAllocation() == nullptr && oatname_ != nullptr) {
    delete oatname_;
  }
  oatname_ = nullptr;
}
inline const ::common::ChatAtName& ChatParamDown::_internal_oatname() const {
  const ::common::ChatAtName* p = oatname_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ChatAtName&>(
      ::common::_ChatAtName_default_instance_);
}
inline const ::common::ChatAtName& ChatParamDown::oatname() const {
  // @@protoc_insertion_point(field_get:common.ChatParamDown.oAtName)
  return _internal_oatname();
}
inline void ChatParamDown::unsafe_arena_set_allocated_oatname(
    ::common::ChatAtName* oatname) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oatname_);
  }
  oatname_ = oatname;
  if (oatname) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ChatParamDown.oAtName)
}
inline ::common::ChatAtName* ChatParamDown::release_oatname() {
  
  ::common::ChatAtName* temp = oatname_;
  oatname_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ChatAtName* ChatParamDown::unsafe_arena_release_oatname() {
  // @@protoc_insertion_point(field_release:common.ChatParamDown.oAtName)
  
  ::common::ChatAtName* temp = oatname_;
  oatname_ = nullptr;
  return temp;
}
inline ::common::ChatAtName* ChatParamDown::_internal_mutable_oatname() {
  
  if (oatname_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ChatAtName>(GetArenaForAllocation());
    oatname_ = p;
  }
  return oatname_;
}
inline ::common::ChatAtName* ChatParamDown::mutable_oatname() {
  ::common::ChatAtName* _msg = _internal_mutable_oatname();
  // @@protoc_insertion_point(field_mutable:common.ChatParamDown.oAtName)
  return _msg;
}
inline void ChatParamDown::set_allocated_oatname(::common::ChatAtName* oatname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete oatname_;
  }
  if (oatname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(oatname);
    if (message_arena != submessage_arena) {
      oatname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oatname, submessage_arena);
    }
    
  } else {
    
  }
  oatname_ = oatname;
  // @@protoc_insertion_point(field_set_allocated:common.ChatParamDown.oAtName)
}

// -------------------------------------------------------------------

// ChatString

// bytes strChars = 1;
inline void ChatString::clear_strchars() {
  strchars_.ClearToEmpty();
}
inline const std::string& ChatString::strchars() const {
  // @@protoc_insertion_point(field_get:common.ChatString.strChars)
  return _internal_strchars();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatString::set_strchars(ArgT0&& arg0, ArgT... args) {
 
 strchars_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.ChatString.strChars)
}
inline std::string* ChatString::mutable_strchars() {
  std::string* _s = _internal_mutable_strchars();
  // @@protoc_insertion_point(field_mutable:common.ChatString.strChars)
  return _s;
}
inline const std::string& ChatString::_internal_strchars() const {
  return strchars_.Get();
}
inline void ChatString::_internal_set_strchars(const std::string& value) {
  
  strchars_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatString::_internal_mutable_strchars() {
  
  return strchars_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatString::release_strchars() {
  // @@protoc_insertion_point(field_release:common.ChatString.strChars)
  return strchars_.Release();
}
inline void ChatString::set_allocated_strchars(std::string* strchars) {
  if (strchars != nullptr) {
    
  } else {
    
  }
  strchars_.SetAllocated(strchars, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strchars_.IsDefault()) {
    strchars_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.ChatString.strChars)
}

// -------------------------------------------------------------------

// ChatVoice

// bytes strVoices = 1;
inline void ChatVoice::clear_strvoices() {
  strvoices_.ClearToEmpty();
}
inline const std::string& ChatVoice::strvoices() const {
  // @@protoc_insertion_point(field_get:common.ChatVoice.strVoices)
  return _internal_strvoices();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatVoice::set_strvoices(ArgT0&& arg0, ArgT... args) {
 
 strvoices_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.ChatVoice.strVoices)
}
inline std::string* ChatVoice::mutable_strvoices() {
  std::string* _s = _internal_mutable_strvoices();
  // @@protoc_insertion_point(field_mutable:common.ChatVoice.strVoices)
  return _s;
}
inline const std::string& ChatVoice::_internal_strvoices() const {
  return strvoices_.Get();
}
inline void ChatVoice::_internal_set_strvoices(const std::string& value) {
  
  strvoices_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatVoice::_internal_mutable_strvoices() {
  
  return strvoices_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatVoice::release_strvoices() {
  // @@protoc_insertion_point(field_release:common.ChatVoice.strVoices)
  return strvoices_.Release();
}
inline void ChatVoice::set_allocated_strvoices(std::string* strvoices) {
  if (strvoices != nullptr) {
    
  } else {
    
  }
  strvoices_.SetAllocated(strvoices, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strvoices_.IsDefault()) {
    strvoices_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.ChatVoice.strVoices)
}

// -------------------------------------------------------------------

// ChatItem

// .common.Item oItem = 1;
inline bool ChatItem::_internal_has_oitem() const {
  return this != internal_default_instance() && oitem_ != nullptr;
}
inline bool ChatItem::has_oitem() const {
  return _internal_has_oitem();
}
inline const ::common::Item& ChatItem::_internal_oitem() const {
  const ::common::Item* p = oitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Item&>(
      ::common::_Item_default_instance_);
}
inline const ::common::Item& ChatItem::oitem() const {
  // @@protoc_insertion_point(field_get:common.ChatItem.oItem)
  return _internal_oitem();
}
inline void ChatItem::unsafe_arena_set_allocated_oitem(
    ::common::Item* oitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oitem_);
  }
  oitem_ = oitem;
  if (oitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.ChatItem.oItem)
}
inline ::common::Item* ChatItem::release_oitem() {
  
  ::common::Item* temp = oitem_;
  oitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::Item* ChatItem::unsafe_arena_release_oitem() {
  // @@protoc_insertion_point(field_release:common.ChatItem.oItem)
  
  ::common::Item* temp = oitem_;
  oitem_ = nullptr;
  return temp;
}
inline ::common::Item* ChatItem::_internal_mutable_oitem() {
  
  if (oitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Item>(GetArenaForAllocation());
    oitem_ = p;
  }
  return oitem_;
}
inline ::common::Item* ChatItem::mutable_oitem() {
  ::common::Item* _msg = _internal_mutable_oitem();
  // @@protoc_insertion_point(field_mutable:common.ChatItem.oItem)
  return _msg;
}
inline void ChatItem::set_allocated_oitem(::common::Item* oitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oitem_);
  }
  if (oitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oitem));
    if (message_arena != submessage_arena) {
      oitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oitem, submessage_arena);
    }
    
  } else {
    
  }
  oitem_ = oitem;
  // @@protoc_insertion_point(field_set_allocated:common.ChatItem.oItem)
}

// -------------------------------------------------------------------

// ChatSmile

// uint32 uiId = 1;
inline void ChatSmile::clear_uiid() {
  uiid_ = 0u;
}
inline uint32_t ChatSmile::_internal_uiid() const {
  return uiid_;
}
inline uint32_t ChatSmile::uiid() const {
  // @@protoc_insertion_point(field_get:common.ChatSmile.uiId)
  return _internal_uiid();
}
inline void ChatSmile::_internal_set_uiid(uint32_t value) {
  
  uiid_ = value;
}
inline void ChatSmile::set_uiid(uint32_t value) {
  _internal_set_uiid(value);
  // @@protoc_insertion_point(field_set:common.ChatSmile.uiId)
}

// -------------------------------------------------------------------

// ChatAtId

// uint64 llRoleId = 1;
inline void ChatAtId::clear_llroleid() {
  llroleid_ = uint64_t{0u};
}
inline uint64_t ChatAtId::_internal_llroleid() const {
  return llroleid_;
}
inline uint64_t ChatAtId::llroleid() const {
  // @@protoc_insertion_point(field_get:common.ChatAtId.llRoleId)
  return _internal_llroleid();
}
inline void ChatAtId::_internal_set_llroleid(uint64_t value) {
  
  llroleid_ = value;
}
inline void ChatAtId::set_llroleid(uint64_t value) {
  _internal_set_llroleid(value);
  // @@protoc_insertion_point(field_set:common.ChatAtId.llRoleId)
}

// -------------------------------------------------------------------

// ChatAtName

// uint64 llRoleId = 1;
inline void ChatAtName::clear_llroleid() {
  llroleid_ = uint64_t{0u};
}
inline uint64_t ChatAtName::_internal_llroleid() const {
  return llroleid_;
}
inline uint64_t ChatAtName::llroleid() const {
  // @@protoc_insertion_point(field_get:common.ChatAtName.llRoleId)
  return _internal_llroleid();
}
inline void ChatAtName::_internal_set_llroleid(uint64_t value) {
  
  llroleid_ = value;
}
inline void ChatAtName::set_llroleid(uint64_t value) {
  _internal_set_llroleid(value);
  // @@protoc_insertion_point(field_set:common.ChatAtName.llRoleId)
}

// string strNick = 2;
inline void ChatAtName::clear_strnick() {
  strnick_.ClearToEmpty();
}
inline const std::string& ChatAtName::strnick() const {
  // @@protoc_insertion_point(field_get:common.ChatAtName.strNick)
  return _internal_strnick();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatAtName::set_strnick(ArgT0&& arg0, ArgT... args) {
 
 strnick_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.ChatAtName.strNick)
}
inline std::string* ChatAtName::mutable_strnick() {
  std::string* _s = _internal_mutable_strnick();
  // @@protoc_insertion_point(field_mutable:common.ChatAtName.strNick)
  return _s;
}
inline const std::string& ChatAtName::_internal_strnick() const {
  return strnick_.Get();
}
inline void ChatAtName::_internal_set_strnick(const std::string& value) {
  
  strnick_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatAtName::_internal_mutable_strnick() {
  
  return strnick_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatAtName::release_strnick() {
  // @@protoc_insertion_point(field_release:common.ChatAtName.strNick)
  return strnick_.Release();
}
inline void ChatAtName::set_allocated_strnick(std::string* strnick) {
  if (strnick != nullptr) {
    
  } else {
    
  }
  strnick_.SetAllocated(strnick, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strnick_.IsDefault()) {
    strnick_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.ChatAtName.strNick)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chatcommon_2eproto
