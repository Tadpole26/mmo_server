// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friendcommon.proto

#include "friendcommon.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace common {
PROTOBUF_CONSTEXPR FriendInfo::FriendInfo(
    ::_pbi::ConstantInitialized)
  : ofriend_(nullptr)
  , orequest_(nullptr)
  , oblock_(nullptr)
  , ofilter_(nullptr)
  , olabel_(nullptr)
  , osendtimes_(nullptr)
  , ohistory_(nullptr)
  , omsglist_(0)
{}
struct FriendInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendInfoDefaultTypeInternal() {}
  union {
    FriendInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendInfoDefaultTypeInternal _FriendInfo_default_instance_;
PROTOBUF_CONSTEXPR FriendList::FriendList(
    ::_pbi::ConstantInitialized)
  : vecfriends_()
  , uifriendlistmax_(0u){}
struct FriendListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendListDefaultTypeInternal() {}
  union {
    FriendList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendListDefaultTypeInternal _FriendList_default_instance_;
PROTOBUF_CONSTEXPR FriendRelation::FriendRelation(
    ::_pbi::ConstantInitialized)
  : llroleid_(uint64_t{0u})
  , uifriendship_(0u)
  , uidailychat_(0u)
  , llteamid_(uint64_t{0u})
  , bonline_(false){}
struct FriendRelationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendRelationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendRelationDefaultTypeInternal() {}
  union {
    FriendRelation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendRelationDefaultTypeInternal _FriendRelation_default_instance_;
PROTOBUF_CONSTEXPR RequestList::RequestList(
    ::_pbi::ConstantInitialized)
  : vecrequest_()
  , _vecrequest_cached_byte_size_(0){}
struct RequestListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestListDefaultTypeInternal() {}
  union {
    RequestList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestListDefaultTypeInternal _RequestList_default_instance_;
PROTOBUF_CONSTEXPR BlockList::BlockList(
    ::_pbi::ConstantInitialized)
  : vecblock_()
  , _vecblock_cached_byte_size_(0){}
struct BlockListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockListDefaultTypeInternal() {}
  union {
    BlockList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockListDefaultTypeInternal _BlockList_default_instance_;
PROTOBUF_CONSTEXPR RecommendFilter::RecommendFilter(
    ::_pbi::ConstantInitialized)
  : bonlycity_(false)
  , uisex_(0u)
  , uibitlabel_(0u){}
struct RecommendFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecommendFilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecommendFilterDefaultTypeInternal() {}
  union {
    RecommendFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecommendFilterDefaultTypeInternal _RecommendFilter_default_instance_;
PROTOBUF_CONSTEXPR RecommendLabel::RecommendLabel(
    ::_pbi::ConstantInitialized)
  : uicity_(0u)
  , uibitlabel_(0u)
  , bavailable_(false){}
struct RecommendLabelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecommendLabelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecommendLabelDefaultTypeInternal() {}
  union {
    RecommendLabel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecommendLabelDefaultTypeInternal _RecommendLabel_default_instance_;
PROTOBUF_CONSTEXPR SendGiftTimes::SendGiftTimes(
    ::_pbi::ConstantInitialized)
  : vecsendtimes_()
  , uidailysendcount_(0u){}
struct SendGiftTimesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendGiftTimesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendGiftTimesDefaultTypeInternal() {}
  union {
    SendGiftTimes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendGiftTimesDefaultTypeInternal _SendGiftTimes_default_instance_;
PROTOBUF_CONSTEXPR SendGiftHistory::SendGiftHistory(
    ::_pbi::ConstantInitialized)
  : vecsend_()
  , vecrecv_(){}
struct SendGiftHistoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendGiftHistoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendGiftHistoryDefaultTypeInternal() {}
  union {
    SendGiftHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendGiftHistoryDefaultTypeInternal _SendGiftHistory_default_instance_;
PROTOBUF_CONSTEXPR SingleSendTimes::SingleSendTimes(
    ::_pbi::ConstantInitialized)
  : llroleid_(uint64_t{0u})
  , uitimes_(0u){}
struct SingleSendTimesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleSendTimesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleSendTimesDefaultTypeInternal() {}
  union {
    SingleSendTimes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleSendTimesDefaultTypeInternal _SingleSendTimes_default_instance_;
PROTOBUF_CONSTEXPR SendGift::SendGift(
    ::_pbi::ConstantInitialized)
  : lluid_(uint64_t{0u})
  , llrecver_(uint64_t{0u})
  , uiitemtid_(0u)
  , uicount_(0u)
  , lltimestamp_(uint64_t{0u})
  , breceived_(false){}
struct SendGiftDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendGiftDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendGiftDefaultTypeInternal() {}
  union {
    SendGift _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendGiftDefaultTypeInternal _SendGift_default_instance_;
PROTOBUF_CONSTEXPR RecvGift::RecvGift(
    ::_pbi::ConstantInitialized)
  : lluid_(uint64_t{0u})
  , llsender_(uint64_t{0u})
  , uiitemtid_(0u)
  , uicount_(0u)
  , lltimestamp_(uint64_t{0u}){}
struct RecvGiftDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecvGiftDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecvGiftDefaultTypeInternal() {}
  union {
    RecvGift _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecvGiftDefaultTypeInternal _RecvGift_default_instance_;
PROTOBUF_CONSTEXPR FriendFieldList::FriendFieldList(
    ::_pbi::ConstantInitialized)
  : vecids_()
  , vecstr_(){}
struct FriendFieldListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendFieldListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendFieldListDefaultTypeInternal() {}
  union {
    FriendFieldList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendFieldListDefaultTypeInternal _FriendFieldList_default_instance_;
PROTOBUF_CONSTEXPR FriendFieldId::FriendFieldId(
    ::_pbi::ConstantInitialized)
  : llval_(uint64_t{0u})
  , uitype_(0u){}
struct FriendFieldIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendFieldIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendFieldIdDefaultTypeInternal() {}
  union {
    FriendFieldId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendFieldIdDefaultTypeInternal _FriendFieldId_default_instance_;
PROTOBUF_CONSTEXPR FriendFieldStr::FriendFieldStr(
    ::_pbi::ConstantInitialized)
  : strdata_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , uitype_(0u){}
struct FriendFieldStrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendFieldStrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendFieldStrDefaultTypeInternal() {}
  union {
    FriendFieldStr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendFieldStrDefaultTypeInternal _FriendFieldStr_default_instance_;
PROTOBUF_CONSTEXPR RecommendList::RecommendList(
    ::_pbi::ConstantInitialized)
  : vecrolelist_(){}
struct RecommendListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecommendListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecommendListDefaultTypeInternal() {}
  union {
    RecommendList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecommendListDefaultTypeInternal _RecommendList_default_instance_;
PROTOBUF_CONSTEXPR Recommend::Recommend(
    ::_pbi::ConstantInitialized)
  : llroleid_(uint64_t{0u})
  , uicity_(0u)
  , uilabel_(0u){}
struct RecommendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecommendDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecommendDefaultTypeInternal() {}
  union {
    Recommend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecommendDefaultTypeInternal _Recommend_default_instance_;
}  // namespace common
static ::_pb::Metadata file_level_metadata_friendcommon_2eproto[17];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_friendcommon_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_friendcommon_2eproto = nullptr;

const uint32_t TableStruct_friendcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::FriendInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::FriendInfo, ofriend_),
  PROTOBUF_FIELD_OFFSET(::common::FriendInfo, orequest_),
  PROTOBUF_FIELD_OFFSET(::common::FriendInfo, oblock_),
  PROTOBUF_FIELD_OFFSET(::common::FriendInfo, omsglist_),
  PROTOBUF_FIELD_OFFSET(::common::FriendInfo, ofilter_),
  PROTOBUF_FIELD_OFFSET(::common::FriendInfo, olabel_),
  PROTOBUF_FIELD_OFFSET(::common::FriendInfo, osendtimes_),
  PROTOBUF_FIELD_OFFSET(::common::FriendInfo, ohistory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::FriendList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::FriendList, uifriendlistmax_),
  PROTOBUF_FIELD_OFFSET(::common::FriendList, vecfriends_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::FriendRelation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::FriendRelation, llroleid_),
  PROTOBUF_FIELD_OFFSET(::common::FriendRelation, uifriendship_),
  PROTOBUF_FIELD_OFFSET(::common::FriendRelation, uidailychat_),
  PROTOBUF_FIELD_OFFSET(::common::FriendRelation, llteamid_),
  PROTOBUF_FIELD_OFFSET(::common::FriendRelation, bonline_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::RequestList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::RequestList, vecrequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::BlockList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::BlockList, vecblock_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::RecommendFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::RecommendFilter, bonlycity_),
  PROTOBUF_FIELD_OFFSET(::common::RecommendFilter, uisex_),
  PROTOBUF_FIELD_OFFSET(::common::RecommendFilter, uibitlabel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::RecommendLabel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::RecommendLabel, uicity_),
  PROTOBUF_FIELD_OFFSET(::common::RecommendLabel, uibitlabel_),
  PROTOBUF_FIELD_OFFSET(::common::RecommendLabel, bavailable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::SendGiftTimes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::SendGiftTimes, uidailysendcount_),
  PROTOBUF_FIELD_OFFSET(::common::SendGiftTimes, vecsendtimes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::SendGiftHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::SendGiftHistory, vecsend_),
  PROTOBUF_FIELD_OFFSET(::common::SendGiftHistory, vecrecv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::SingleSendTimes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::SingleSendTimes, llroleid_),
  PROTOBUF_FIELD_OFFSET(::common::SingleSendTimes, uitimes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::SendGift, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::SendGift, lluid_),
  PROTOBUF_FIELD_OFFSET(::common::SendGift, llrecver_),
  PROTOBUF_FIELD_OFFSET(::common::SendGift, uiitemtid_),
  PROTOBUF_FIELD_OFFSET(::common::SendGift, uicount_),
  PROTOBUF_FIELD_OFFSET(::common::SendGift, lltimestamp_),
  PROTOBUF_FIELD_OFFSET(::common::SendGift, breceived_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::RecvGift, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::RecvGift, lluid_),
  PROTOBUF_FIELD_OFFSET(::common::RecvGift, llsender_),
  PROTOBUF_FIELD_OFFSET(::common::RecvGift, uiitemtid_),
  PROTOBUF_FIELD_OFFSET(::common::RecvGift, uicount_),
  PROTOBUF_FIELD_OFFSET(::common::RecvGift, lltimestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::FriendFieldList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::FriendFieldList, vecids_),
  PROTOBUF_FIELD_OFFSET(::common::FriendFieldList, vecstr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::FriendFieldId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::FriendFieldId, uitype_),
  PROTOBUF_FIELD_OFFSET(::common::FriendFieldId, llval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::FriendFieldStr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::FriendFieldStr, uitype_),
  PROTOBUF_FIELD_OFFSET(::common::FriendFieldStr, strdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::RecommendList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::RecommendList, vecrolelist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::Recommend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::Recommend, llroleid_),
  PROTOBUF_FIELD_OFFSET(::common::Recommend, uicity_),
  PROTOBUF_FIELD_OFFSET(::common::Recommend, uilabel_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::common::FriendInfo)},
  { 14, -1, -1, sizeof(::common::FriendList)},
  { 22, -1, -1, sizeof(::common::FriendRelation)},
  { 33, -1, -1, sizeof(::common::RequestList)},
  { 40, -1, -1, sizeof(::common::BlockList)},
  { 47, -1, -1, sizeof(::common::RecommendFilter)},
  { 56, -1, -1, sizeof(::common::RecommendLabel)},
  { 65, -1, -1, sizeof(::common::SendGiftTimes)},
  { 73, -1, -1, sizeof(::common::SendGiftHistory)},
  { 81, -1, -1, sizeof(::common::SingleSendTimes)},
  { 89, -1, -1, sizeof(::common::SendGift)},
  { 101, -1, -1, sizeof(::common::RecvGift)},
  { 112, -1, -1, sizeof(::common::FriendFieldList)},
  { 120, -1, -1, sizeof(::common::FriendFieldId)},
  { 128, -1, -1, sizeof(::common::FriendFieldStr)},
  { 136, -1, -1, sizeof(::common::RecommendList)},
  { 143, -1, -1, sizeof(::common::Recommend)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::common::_FriendInfo_default_instance_._instance,
  &::common::_FriendList_default_instance_._instance,
  &::common::_FriendRelation_default_instance_._instance,
  &::common::_RequestList_default_instance_._instance,
  &::common::_BlockList_default_instance_._instance,
  &::common::_RecommendFilter_default_instance_._instance,
  &::common::_RecommendLabel_default_instance_._instance,
  &::common::_SendGiftTimes_default_instance_._instance,
  &::common::_SendGiftHistory_default_instance_._instance,
  &::common::_SingleSendTimes_default_instance_._instance,
  &::common::_SendGift_default_instance_._instance,
  &::common::_RecvGift_default_instance_._instance,
  &::common::_FriendFieldList_default_instance_._instance,
  &::common::_FriendFieldId_default_instance_._instance,
  &::common::_FriendFieldStr_default_instance_._instance,
  &::common::_RecommendList_default_instance_._instance,
  &::common::_Recommend_default_instance_._instance,
};

const char descriptor_table_protodef_friendcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022friendcommon.proto\022\006common\"\320\002\n\nFriendI"
  "nfo\022#\n\007oFriend\030\001 \001(\0132\022.common.FriendList"
  "\022%\n\010oRequest\030\002 \001(\0132\023.common.RequestList\022"
  "!\n\006oBlock\030\003 \001(\0132\021.common.BlockList\022+\n\010oM"
  "sgList\030\004 \001(\0162\031.common.enFriendFieldType\022"
  "(\n\007oFilter\030\005 \001(\0132\027.common.RecommendFilte"
  "r\022&\n\006oLabel\030\006 \001(\0132\026.common.RecommendLabe"
  "l\022)\n\noSendTimes\030\007 \001(\0132\025.common.SendGiftT"
  "imes\022)\n\010oHistory\030\010 \001(\0132\027.common.SendGift"
  "History\"Q\n\nFriendList\022\027\n\017uiFriendListMax"
  "\030\001 \001(\r\022*\n\nvecFriends\030\002 \003(\0132\026.common.Frie"
  "ndRelation\"p\n\016FriendRelation\022\020\n\010llRoleId"
  "\030\001 \001(\004\022\024\n\014uiFriendship\030\002 \001(\r\022\023\n\013uiDailyC"
  "hat\030\003 \001(\r\022\020\n\010llTeamId\030\004 \001(\004\022\017\n\007bOnline\030\005"
  " \001(\010\"!\n\013RequestList\022\022\n\nvecRequest\030\001 \003(\004\""
  "\035\n\tBlockList\022\020\n\010vecBlock\030\001 \003(\004\"G\n\017Recomm"
  "endFilter\022\021\n\tbOnlyCity\030\001 \001(\010\022\r\n\005uiSex\030\002 "
  "\001(\r\022\022\n\nuiBitLabel\030\003 \001(\r\"H\n\016RecommendLabe"
  "l\022\016\n\006uiCity\030\001 \001(\r\022\022\n\nuiBitLabel\030\002 \001(\r\022\022\n"
  "\nbAvailable\030\003 \001(\010\"X\n\rSendGiftTimes\022\030\n\020ui"
  "DailySendCount\030\001 \001(\r\022-\n\014vecSendTimes\030\002 \003"
  "(\0132\027.common.SingleSendTimes\"W\n\017SendGiftH"
  "istory\022!\n\007vecSend\030\001 \003(\0132\020.common.SendGif"
  "t\022!\n\007vecRecv\030\002 \003(\0132\020.common.RecvGift\"4\n\017"
  "SingleSendTimes\022\020\n\010llRoleId\030\001 \001(\004\022\017\n\007uiT"
  "imes\030\002 \001(\r\"w\n\010SendGift\022\r\n\005llUid\030\001 \001(\004\022\020\n"
  "\010llRecver\030\002 \001(\004\022\021\n\tuiItemTid\030\003 \001(\r\022\017\n\007ui"
  "Count\030\004 \001(\r\022\023\n\013llTimestamp\030\005 \001(\004\022\021\n\tbRec"
  "eived\030\006 \001(\010\"d\n\010RecvGift\022\r\n\005llUid\030\001 \001(\004\022\020"
  "\n\010llSender\030\002 \001(\004\022\021\n\tuiItemTid\030\003 \001(\r\022\017\n\007u"
  "iCount\030\004 \001(\r\022\023\n\013llTimeStamp\030\005 \001(\004\"`\n\017Fri"
  "endFieldList\022%\n\006vecIds\030\001 \003(\0132\025.common.Fr"
  "iendFieldId\022&\n\006vecStr\030\002 \003(\0132\026.common.Fri"
  "endFieldStr\".\n\rFriendFieldId\022\016\n\006uiType\030\001"
  " \001(\r\022\r\n\005llVal\030\002 \001(\004\"1\n\016FriendFieldStr\022\016\n"
  "\006uiType\030\001 \001(\r\022\017\n\007strData\030\002 \001(\014\"7\n\rRecomm"
  "endList\022&\n\013vecRoleList\030\001 \003(\0132\021.common.Re"
  "commend\">\n\tRecommend\022\020\n\010llRoleId\030\001 \001(\004\022\016"
  "\n\006uiCity\030\002 \001(\r\022\017\n\007uiLabel\030\003 \001(\r*4\n\021enFri"
  "endLabelType\022\017\n\013FLType_None\020\000\022\016\n\nFLType_"
  "Max\020\037*\314\001\n\021enFriendFieldType\022\017\n\013FFType_No"
  "ne\020\000\022\030\n\024FFType_FriendListMax\020\001\022\023\n\017FFType"
  "_Relation\020\002\022\026\n\022FFType_RequestList\020\003\022\024\n\020F"
  "FType_BlockList\020\004\022\021\n\rFFType_Filter\020\005\022\020\n\014"
  "FFType_Label\020\006\022\024\n\020FFType_SendTimes\020\007\022\016\n\n"
  "FFType_Max\020\010b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_friendcommon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_friendcommon_2eproto = {
    false, false, 1820, descriptor_table_protodef_friendcommon_2eproto,
    "friendcommon.proto",
    &descriptor_table_friendcommon_2eproto_once, nullptr, 0, 17,
    schemas, file_default_instances, TableStruct_friendcommon_2eproto::offsets,
    file_level_metadata_friendcommon_2eproto, file_level_enum_descriptors_friendcommon_2eproto,
    file_level_service_descriptors_friendcommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_friendcommon_2eproto_getter() {
  return &descriptor_table_friendcommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_friendcommon_2eproto(&descriptor_table_friendcommon_2eproto);
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enFriendLabelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_friendcommon_2eproto);
  return file_level_enum_descriptors_friendcommon_2eproto[0];
}
bool enFriendLabelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 31:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enFriendFieldType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_friendcommon_2eproto);
  return file_level_enum_descriptors_friendcommon_2eproto[1];
}
bool enFriendFieldType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class FriendInfo::_Internal {
 public:
  static const ::common::FriendList& ofriend(const FriendInfo* msg);
  static const ::common::RequestList& orequest(const FriendInfo* msg);
  static const ::common::BlockList& oblock(const FriendInfo* msg);
  static const ::common::RecommendFilter& ofilter(const FriendInfo* msg);
  static const ::common::RecommendLabel& olabel(const FriendInfo* msg);
  static const ::common::SendGiftTimes& osendtimes(const FriendInfo* msg);
  static const ::common::SendGiftHistory& ohistory(const FriendInfo* msg);
};

const ::common::FriendList&
FriendInfo::_Internal::ofriend(const FriendInfo* msg) {
  return *msg->ofriend_;
}
const ::common::RequestList&
FriendInfo::_Internal::orequest(const FriendInfo* msg) {
  return *msg->orequest_;
}
const ::common::BlockList&
FriendInfo::_Internal::oblock(const FriendInfo* msg) {
  return *msg->oblock_;
}
const ::common::RecommendFilter&
FriendInfo::_Internal::ofilter(const FriendInfo* msg) {
  return *msg->ofilter_;
}
const ::common::RecommendLabel&
FriendInfo::_Internal::olabel(const FriendInfo* msg) {
  return *msg->olabel_;
}
const ::common::SendGiftTimes&
FriendInfo::_Internal::osendtimes(const FriendInfo* msg) {
  return *msg->osendtimes_;
}
const ::common::SendGiftHistory&
FriendInfo::_Internal::ohistory(const FriendInfo* msg) {
  return *msg->ohistory_;
}
FriendInfo::FriendInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.FriendInfo)
}
FriendInfo::FriendInfo(const FriendInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ofriend()) {
    ofriend_ = new ::common::FriendList(*from.ofriend_);
  } else {
    ofriend_ = nullptr;
  }
  if (from._internal_has_orequest()) {
    orequest_ = new ::common::RequestList(*from.orequest_);
  } else {
    orequest_ = nullptr;
  }
  if (from._internal_has_oblock()) {
    oblock_ = new ::common::BlockList(*from.oblock_);
  } else {
    oblock_ = nullptr;
  }
  if (from._internal_has_ofilter()) {
    ofilter_ = new ::common::RecommendFilter(*from.ofilter_);
  } else {
    ofilter_ = nullptr;
  }
  if (from._internal_has_olabel()) {
    olabel_ = new ::common::RecommendLabel(*from.olabel_);
  } else {
    olabel_ = nullptr;
  }
  if (from._internal_has_osendtimes()) {
    osendtimes_ = new ::common::SendGiftTimes(*from.osendtimes_);
  } else {
    osendtimes_ = nullptr;
  }
  if (from._internal_has_ohistory()) {
    ohistory_ = new ::common::SendGiftHistory(*from.ohistory_);
  } else {
    ohistory_ = nullptr;
  }
  omsglist_ = from.omsglist_;
  // @@protoc_insertion_point(copy_constructor:common.FriendInfo)
}

inline void FriendInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ofriend_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&omsglist_) -
    reinterpret_cast<char*>(&ofriend_)) + sizeof(omsglist_));
}

FriendInfo::~FriendInfo() {
  // @@protoc_insertion_point(destructor:common.FriendInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ofriend_;
  if (this != internal_default_instance()) delete orequest_;
  if (this != internal_default_instance()) delete oblock_;
  if (this != internal_default_instance()) delete ofilter_;
  if (this != internal_default_instance()) delete olabel_;
  if (this != internal_default_instance()) delete osendtimes_;
  if (this != internal_default_instance()) delete ohistory_;
}

void FriendInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FriendInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:common.FriendInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && ofriend_ != nullptr) {
    delete ofriend_;
  }
  ofriend_ = nullptr;
  if (GetArenaForAllocation() == nullptr && orequest_ != nullptr) {
    delete orequest_;
  }
  orequest_ = nullptr;
  if (GetArenaForAllocation() == nullptr && oblock_ != nullptr) {
    delete oblock_;
  }
  oblock_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ofilter_ != nullptr) {
    delete ofilter_;
  }
  ofilter_ = nullptr;
  if (GetArenaForAllocation() == nullptr && olabel_ != nullptr) {
    delete olabel_;
  }
  olabel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && osendtimes_ != nullptr) {
    delete osendtimes_;
  }
  osendtimes_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ohistory_ != nullptr) {
    delete ohistory_;
  }
  ohistory_ = nullptr;
  omsglist_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.FriendList oFriend = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ofriend(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.RequestList oRequest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orequest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.BlockList oBlock = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_oblock(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.enFriendFieldType oMsgList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_omsglist(static_cast<::common::enFriendFieldType>(val));
        } else
          goto handle_unusual;
        continue;
      // .common.RecommendFilter oFilter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ofilter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.RecommendLabel oLabel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_olabel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.SendGiftTimes oSendTimes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_osendtimes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.SendGiftHistory oHistory = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ohistory(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.FriendInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.FriendList oFriend = 1;
  if (this->_internal_has_ofriend()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ofriend(this),
        _Internal::ofriend(this).GetCachedSize(), target, stream);
  }

  // .common.RequestList oRequest = 2;
  if (this->_internal_has_orequest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::orequest(this),
        _Internal::orequest(this).GetCachedSize(), target, stream);
  }

  // .common.BlockList oBlock = 3;
  if (this->_internal_has_oblock()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::oblock(this),
        _Internal::oblock(this).GetCachedSize(), target, stream);
  }

  // .common.enFriendFieldType oMsgList = 4;
  if (this->_internal_omsglist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_omsglist(), target);
  }

  // .common.RecommendFilter oFilter = 5;
  if (this->_internal_has_ofilter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::ofilter(this),
        _Internal::ofilter(this).GetCachedSize(), target, stream);
  }

  // .common.RecommendLabel oLabel = 6;
  if (this->_internal_has_olabel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::olabel(this),
        _Internal::olabel(this).GetCachedSize(), target, stream);
  }

  // .common.SendGiftTimes oSendTimes = 7;
  if (this->_internal_has_osendtimes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::osendtimes(this),
        _Internal::osendtimes(this).GetCachedSize(), target, stream);
  }

  // .common.SendGiftHistory oHistory = 8;
  if (this->_internal_has_ohistory()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::ohistory(this),
        _Internal::ohistory(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.FriendInfo)
  return target;
}

size_t FriendInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.FriendInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.FriendList oFriend = 1;
  if (this->_internal_has_ofriend()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ofriend_);
  }

  // .common.RequestList oRequest = 2;
  if (this->_internal_has_orequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orequest_);
  }

  // .common.BlockList oBlock = 3;
  if (this->_internal_has_oblock()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oblock_);
  }

  // .common.RecommendFilter oFilter = 5;
  if (this->_internal_has_ofilter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ofilter_);
  }

  // .common.RecommendLabel oLabel = 6;
  if (this->_internal_has_olabel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *olabel_);
  }

  // .common.SendGiftTimes oSendTimes = 7;
  if (this->_internal_has_osendtimes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *osendtimes_);
  }

  // .common.SendGiftHistory oHistory = 8;
  if (this->_internal_has_ohistory()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ohistory_);
  }

  // .common.enFriendFieldType oMsgList = 4;
  if (this->_internal_omsglist() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_omsglist());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FriendInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendInfo::GetClassData() const { return &_class_data_; }

void FriendInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FriendInfo *>(to)->MergeFrom(
      static_cast<const FriendInfo &>(from));
}


void FriendInfo::MergeFrom(const FriendInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.FriendInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ofriend()) {
    _internal_mutable_ofriend()->::common::FriendList::MergeFrom(from._internal_ofriend());
  }
  if (from._internal_has_orequest()) {
    _internal_mutable_orequest()->::common::RequestList::MergeFrom(from._internal_orequest());
  }
  if (from._internal_has_oblock()) {
    _internal_mutable_oblock()->::common::BlockList::MergeFrom(from._internal_oblock());
  }
  if (from._internal_has_ofilter()) {
    _internal_mutable_ofilter()->::common::RecommendFilter::MergeFrom(from._internal_ofilter());
  }
  if (from._internal_has_olabel()) {
    _internal_mutable_olabel()->::common::RecommendLabel::MergeFrom(from._internal_olabel());
  }
  if (from._internal_has_osendtimes()) {
    _internal_mutable_osendtimes()->::common::SendGiftTimes::MergeFrom(from._internal_osendtimes());
  }
  if (from._internal_has_ohistory()) {
    _internal_mutable_ohistory()->::common::SendGiftHistory::MergeFrom(from._internal_ohistory());
  }
  if (from._internal_omsglist() != 0) {
    _internal_set_omsglist(from._internal_omsglist());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendInfo::CopyFrom(const FriendInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.FriendInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendInfo::IsInitialized() const {
  return true;
}

void FriendInfo::InternalSwap(FriendInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FriendInfo, omsglist_)
      + sizeof(FriendInfo::omsglist_)
      - PROTOBUF_FIELD_OFFSET(FriendInfo, ofriend_)>(
          reinterpret_cast<char*>(&ofriend_),
          reinterpret_cast<char*>(&other->ofriend_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friendcommon_2eproto_getter, &descriptor_table_friendcommon_2eproto_once,
      file_level_metadata_friendcommon_2eproto[0]);
}

// ===================================================================

class FriendList::_Internal {
 public:
};

FriendList::FriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vecfriends_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.FriendList)
}
FriendList::FriendList(const FriendList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vecfriends_(from.vecfriends_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uifriendlistmax_ = from.uifriendlistmax_;
  // @@protoc_insertion_point(copy_constructor:common.FriendList)
}

inline void FriendList::SharedCtor() {
uifriendlistmax_ = 0u;
}

FriendList::~FriendList() {
  // @@protoc_insertion_point(destructor:common.FriendList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FriendList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FriendList::Clear() {
// @@protoc_insertion_point(message_clear_start:common.FriendList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vecfriends_.Clear();
  uifriendlistmax_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 uiFriendListMax = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uifriendlistmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .common.FriendRelation vecFriends = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vecfriends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.FriendList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiFriendListMax = 1;
  if (this->_internal_uifriendlistmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uifriendlistmax(), target);
  }

  // repeated .common.FriendRelation vecFriends = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vecfriends_size()); i < n; i++) {
    const auto& repfield = this->_internal_vecfriends(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.FriendList)
  return target;
}

size_t FriendList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.FriendList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.FriendRelation vecFriends = 2;
  total_size += 1UL * this->_internal_vecfriends_size();
  for (const auto& msg : this->vecfriends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 uiFriendListMax = 1;
  if (this->_internal_uifriendlistmax() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uifriendlistmax());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FriendList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendList::GetClassData() const { return &_class_data_; }

void FriendList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FriendList *>(to)->MergeFrom(
      static_cast<const FriendList &>(from));
}


void FriendList::MergeFrom(const FriendList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.FriendList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vecfriends_.MergeFrom(from.vecfriends_);
  if (from._internal_uifriendlistmax() != 0) {
    _internal_set_uifriendlistmax(from._internal_uifriendlistmax());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendList::CopyFrom(const FriendList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.FriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendList::IsInitialized() const {
  return true;
}

void FriendList::InternalSwap(FriendList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vecfriends_.InternalSwap(&other->vecfriends_);
  swap(uifriendlistmax_, other->uifriendlistmax_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friendcommon_2eproto_getter, &descriptor_table_friendcommon_2eproto_once,
      file_level_metadata_friendcommon_2eproto[1]);
}

// ===================================================================

class FriendRelation::_Internal {
 public:
};

FriendRelation::FriendRelation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.FriendRelation)
}
FriendRelation::FriendRelation(const FriendRelation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&llroleid_, &from.llroleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&bonline_) -
    reinterpret_cast<char*>(&llroleid_)) + sizeof(bonline_));
  // @@protoc_insertion_point(copy_constructor:common.FriendRelation)
}

inline void FriendRelation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&llroleid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bonline_) -
    reinterpret_cast<char*>(&llroleid_)) + sizeof(bonline_));
}

FriendRelation::~FriendRelation() {
  // @@protoc_insertion_point(destructor:common.FriendRelation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendRelation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FriendRelation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FriendRelation::Clear() {
// @@protoc_insertion_point(message_clear_start:common.FriendRelation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&llroleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bonline_) -
      reinterpret_cast<char*>(&llroleid_)) + sizeof(bonline_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendRelation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 llRoleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          llroleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiFriendship = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uifriendship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiDailyChat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uidailychat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 llTeamId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          llteamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bOnline = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          bonline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendRelation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.FriendRelation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 llRoleId = 1;
  if (this->_internal_llroleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_llroleid(), target);
  }

  // uint32 uiFriendship = 2;
  if (this->_internal_uifriendship() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uifriendship(), target);
  }

  // uint32 uiDailyChat = 3;
  if (this->_internal_uidailychat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uidailychat(), target);
  }

  // uint64 llTeamId = 4;
  if (this->_internal_llteamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_llteamid(), target);
  }

  // bool bOnline = 5;
  if (this->_internal_bonline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_bonline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.FriendRelation)
  return target;
}

size_t FriendRelation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.FriendRelation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 llRoleId = 1;
  if (this->_internal_llroleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_llroleid());
  }

  // uint32 uiFriendship = 2;
  if (this->_internal_uifriendship() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uifriendship());
  }

  // uint32 uiDailyChat = 3;
  if (this->_internal_uidailychat() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uidailychat());
  }

  // uint64 llTeamId = 4;
  if (this->_internal_llteamid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_llteamid());
  }

  // bool bOnline = 5;
  if (this->_internal_bonline() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendRelation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FriendRelation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendRelation::GetClassData() const { return &_class_data_; }

void FriendRelation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FriendRelation *>(to)->MergeFrom(
      static_cast<const FriendRelation &>(from));
}


void FriendRelation::MergeFrom(const FriendRelation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.FriendRelation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_llroleid() != 0) {
    _internal_set_llroleid(from._internal_llroleid());
  }
  if (from._internal_uifriendship() != 0) {
    _internal_set_uifriendship(from._internal_uifriendship());
  }
  if (from._internal_uidailychat() != 0) {
    _internal_set_uidailychat(from._internal_uidailychat());
  }
  if (from._internal_llteamid() != 0) {
    _internal_set_llteamid(from._internal_llteamid());
  }
  if (from._internal_bonline() != 0) {
    _internal_set_bonline(from._internal_bonline());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendRelation::CopyFrom(const FriendRelation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.FriendRelation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRelation::IsInitialized() const {
  return true;
}

void FriendRelation::InternalSwap(FriendRelation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FriendRelation, bonline_)
      + sizeof(FriendRelation::bonline_)
      - PROTOBUF_FIELD_OFFSET(FriendRelation, llroleid_)>(
          reinterpret_cast<char*>(&llroleid_),
          reinterpret_cast<char*>(&other->llroleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendRelation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friendcommon_2eproto_getter, &descriptor_table_friendcommon_2eproto_once,
      file_level_metadata_friendcommon_2eproto[2]);
}

// ===================================================================

class RequestList::_Internal {
 public:
};

RequestList::RequestList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vecrequest_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.RequestList)
}
RequestList::RequestList(const RequestList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vecrequest_(from.vecrequest_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:common.RequestList)
}

inline void RequestList::SharedCtor() {
}

RequestList::~RequestList() {
  // @@protoc_insertion_point(destructor:common.RequestList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestList::Clear() {
// @@protoc_insertion_point(message_clear_start:common.RequestList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vecrequest_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 vecRequest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_vecrequest(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_vecrequest(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.RequestList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 vecRequest = 1;
  {
    int byte_size = _vecrequest_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_vecrequest(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.RequestList)
  return target;
}

size_t RequestList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.RequestList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 vecRequest = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->vecrequest_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _vecrequest_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestList::GetClassData() const { return &_class_data_; }

void RequestList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestList *>(to)->MergeFrom(
      static_cast<const RequestList &>(from));
}


void RequestList::MergeFrom(const RequestList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.RequestList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vecrequest_.MergeFrom(from.vecrequest_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestList::CopyFrom(const RequestList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.RequestList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestList::IsInitialized() const {
  return true;
}

void RequestList::InternalSwap(RequestList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vecrequest_.InternalSwap(&other->vecrequest_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friendcommon_2eproto_getter, &descriptor_table_friendcommon_2eproto_once,
      file_level_metadata_friendcommon_2eproto[3]);
}

// ===================================================================

class BlockList::_Internal {
 public:
};

BlockList::BlockList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vecblock_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.BlockList)
}
BlockList::BlockList(const BlockList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vecblock_(from.vecblock_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:common.BlockList)
}

inline void BlockList::SharedCtor() {
}

BlockList::~BlockList() {
  // @@protoc_insertion_point(destructor:common.BlockList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BlockList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockList::Clear() {
// @@protoc_insertion_point(message_clear_start:common.BlockList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vecblock_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 vecBlock = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_vecblock(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_vecblock(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.BlockList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 vecBlock = 1;
  {
    int byte_size = _vecblock_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_vecblock(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.BlockList)
  return target;
}

size_t BlockList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.BlockList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 vecBlock = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->vecblock_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _vecblock_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockList::GetClassData() const { return &_class_data_; }

void BlockList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlockList *>(to)->MergeFrom(
      static_cast<const BlockList &>(from));
}


void BlockList::MergeFrom(const BlockList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.BlockList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vecblock_.MergeFrom(from.vecblock_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockList::CopyFrom(const BlockList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.BlockList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockList::IsInitialized() const {
  return true;
}

void BlockList::InternalSwap(BlockList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vecblock_.InternalSwap(&other->vecblock_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friendcommon_2eproto_getter, &descriptor_table_friendcommon_2eproto_once,
      file_level_metadata_friendcommon_2eproto[4]);
}

// ===================================================================

class RecommendFilter::_Internal {
 public:
};

RecommendFilter::RecommendFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.RecommendFilter)
}
RecommendFilter::RecommendFilter(const RecommendFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bonlycity_, &from.bonlycity_,
    static_cast<size_t>(reinterpret_cast<char*>(&uibitlabel_) -
    reinterpret_cast<char*>(&bonlycity_)) + sizeof(uibitlabel_));
  // @@protoc_insertion_point(copy_constructor:common.RecommendFilter)
}

inline void RecommendFilter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bonlycity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uibitlabel_) -
    reinterpret_cast<char*>(&bonlycity_)) + sizeof(uibitlabel_));
}

RecommendFilter::~RecommendFilter() {
  // @@protoc_insertion_point(destructor:common.RecommendFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecommendFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecommendFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecommendFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:common.RecommendFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bonlycity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uibitlabel_) -
      reinterpret_cast<char*>(&bonlycity_)) + sizeof(uibitlabel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecommendFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool bOnlyCity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          bonlycity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiSex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uisex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiBitLabel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uibitlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecommendFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.RecommendFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bOnlyCity = 1;
  if (this->_internal_bonlycity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_bonlycity(), target);
  }

  // uint32 uiSex = 2;
  if (this->_internal_uisex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uisex(), target);
  }

  // uint32 uiBitLabel = 3;
  if (this->_internal_uibitlabel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uibitlabel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.RecommendFilter)
  return target;
}

size_t RecommendFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.RecommendFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool bOnlyCity = 1;
  if (this->_internal_bonlycity() != 0) {
    total_size += 1 + 1;
  }

  // uint32 uiSex = 2;
  if (this->_internal_uisex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uisex());
  }

  // uint32 uiBitLabel = 3;
  if (this->_internal_uibitlabel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uibitlabel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecommendFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecommendFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecommendFilter::GetClassData() const { return &_class_data_; }

void RecommendFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecommendFilter *>(to)->MergeFrom(
      static_cast<const RecommendFilter &>(from));
}


void RecommendFilter::MergeFrom(const RecommendFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.RecommendFilter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bonlycity() != 0) {
    _internal_set_bonlycity(from._internal_bonlycity());
  }
  if (from._internal_uisex() != 0) {
    _internal_set_uisex(from._internal_uisex());
  }
  if (from._internal_uibitlabel() != 0) {
    _internal_set_uibitlabel(from._internal_uibitlabel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecommendFilter::CopyFrom(const RecommendFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.RecommendFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecommendFilter::IsInitialized() const {
  return true;
}

void RecommendFilter::InternalSwap(RecommendFilter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecommendFilter, uibitlabel_)
      + sizeof(RecommendFilter::uibitlabel_)
      - PROTOBUF_FIELD_OFFSET(RecommendFilter, bonlycity_)>(
          reinterpret_cast<char*>(&bonlycity_),
          reinterpret_cast<char*>(&other->bonlycity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecommendFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friendcommon_2eproto_getter, &descriptor_table_friendcommon_2eproto_once,
      file_level_metadata_friendcommon_2eproto[5]);
}

// ===================================================================

class RecommendLabel::_Internal {
 public:
};

RecommendLabel::RecommendLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.RecommendLabel)
}
RecommendLabel::RecommendLabel(const RecommendLabel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uicity_, &from.uicity_,
    static_cast<size_t>(reinterpret_cast<char*>(&bavailable_) -
    reinterpret_cast<char*>(&uicity_)) + sizeof(bavailable_));
  // @@protoc_insertion_point(copy_constructor:common.RecommendLabel)
}

inline void RecommendLabel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uicity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bavailable_) -
    reinterpret_cast<char*>(&uicity_)) + sizeof(bavailable_));
}

RecommendLabel::~RecommendLabel() {
  // @@protoc_insertion_point(destructor:common.RecommendLabel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecommendLabel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecommendLabel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecommendLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:common.RecommendLabel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uicity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bavailable_) -
      reinterpret_cast<char*>(&uicity_)) + sizeof(bavailable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecommendLabel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 uiCity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uicity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiBitLabel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uibitlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bAvailable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          bavailable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecommendLabel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.RecommendLabel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiCity = 1;
  if (this->_internal_uicity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uicity(), target);
  }

  // uint32 uiBitLabel = 2;
  if (this->_internal_uibitlabel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uibitlabel(), target);
  }

  // bool bAvailable = 3;
  if (this->_internal_bavailable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_bavailable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.RecommendLabel)
  return target;
}

size_t RecommendLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.RecommendLabel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 uiCity = 1;
  if (this->_internal_uicity() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uicity());
  }

  // uint32 uiBitLabel = 2;
  if (this->_internal_uibitlabel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uibitlabel());
  }

  // bool bAvailable = 3;
  if (this->_internal_bavailable() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecommendLabel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecommendLabel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecommendLabel::GetClassData() const { return &_class_data_; }

void RecommendLabel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecommendLabel *>(to)->MergeFrom(
      static_cast<const RecommendLabel &>(from));
}


void RecommendLabel::MergeFrom(const RecommendLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.RecommendLabel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uicity() != 0) {
    _internal_set_uicity(from._internal_uicity());
  }
  if (from._internal_uibitlabel() != 0) {
    _internal_set_uibitlabel(from._internal_uibitlabel());
  }
  if (from._internal_bavailable() != 0) {
    _internal_set_bavailable(from._internal_bavailable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecommendLabel::CopyFrom(const RecommendLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.RecommendLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecommendLabel::IsInitialized() const {
  return true;
}

void RecommendLabel::InternalSwap(RecommendLabel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecommendLabel, bavailable_)
      + sizeof(RecommendLabel::bavailable_)
      - PROTOBUF_FIELD_OFFSET(RecommendLabel, uicity_)>(
          reinterpret_cast<char*>(&uicity_),
          reinterpret_cast<char*>(&other->uicity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecommendLabel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friendcommon_2eproto_getter, &descriptor_table_friendcommon_2eproto_once,
      file_level_metadata_friendcommon_2eproto[6]);
}

// ===================================================================

class SendGiftTimes::_Internal {
 public:
};

SendGiftTimes::SendGiftTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vecsendtimes_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.SendGiftTimes)
}
SendGiftTimes::SendGiftTimes(const SendGiftTimes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vecsendtimes_(from.vecsendtimes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uidailysendcount_ = from.uidailysendcount_;
  // @@protoc_insertion_point(copy_constructor:common.SendGiftTimes)
}

inline void SendGiftTimes::SharedCtor() {
uidailysendcount_ = 0u;
}

SendGiftTimes::~SendGiftTimes() {
  // @@protoc_insertion_point(destructor:common.SendGiftTimes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendGiftTimes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SendGiftTimes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendGiftTimes::Clear() {
// @@protoc_insertion_point(message_clear_start:common.SendGiftTimes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vecsendtimes_.Clear();
  uidailysendcount_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendGiftTimes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 uiDailySendCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uidailysendcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .common.SingleSendTimes vecSendTimes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vecsendtimes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendGiftTimes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.SendGiftTimes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiDailySendCount = 1;
  if (this->_internal_uidailysendcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uidailysendcount(), target);
  }

  // repeated .common.SingleSendTimes vecSendTimes = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vecsendtimes_size()); i < n; i++) {
    const auto& repfield = this->_internal_vecsendtimes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.SendGiftTimes)
  return target;
}

size_t SendGiftTimes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.SendGiftTimes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.SingleSendTimes vecSendTimes = 2;
  total_size += 1UL * this->_internal_vecsendtimes_size();
  for (const auto& msg : this->vecsendtimes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 uiDailySendCount = 1;
  if (this->_internal_uidailysendcount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uidailysendcount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendGiftTimes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendGiftTimes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendGiftTimes::GetClassData() const { return &_class_data_; }

void SendGiftTimes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SendGiftTimes *>(to)->MergeFrom(
      static_cast<const SendGiftTimes &>(from));
}


void SendGiftTimes::MergeFrom(const SendGiftTimes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.SendGiftTimes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vecsendtimes_.MergeFrom(from.vecsendtimes_);
  if (from._internal_uidailysendcount() != 0) {
    _internal_set_uidailysendcount(from._internal_uidailysendcount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendGiftTimes::CopyFrom(const SendGiftTimes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.SendGiftTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendGiftTimes::IsInitialized() const {
  return true;
}

void SendGiftTimes::InternalSwap(SendGiftTimes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vecsendtimes_.InternalSwap(&other->vecsendtimes_);
  swap(uidailysendcount_, other->uidailysendcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendGiftTimes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friendcommon_2eproto_getter, &descriptor_table_friendcommon_2eproto_once,
      file_level_metadata_friendcommon_2eproto[7]);
}

// ===================================================================

class SendGiftHistory::_Internal {
 public:
};

SendGiftHistory::SendGiftHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vecsend_(arena),
  vecrecv_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.SendGiftHistory)
}
SendGiftHistory::SendGiftHistory(const SendGiftHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vecsend_(from.vecsend_),
      vecrecv_(from.vecrecv_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:common.SendGiftHistory)
}

inline void SendGiftHistory::SharedCtor() {
}

SendGiftHistory::~SendGiftHistory() {
  // @@protoc_insertion_point(destructor:common.SendGiftHistory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendGiftHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SendGiftHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendGiftHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:common.SendGiftHistory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vecsend_.Clear();
  vecrecv_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendGiftHistory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .common.SendGift vecSend = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vecsend(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .common.RecvGift vecRecv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vecrecv(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendGiftHistory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.SendGiftHistory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.SendGift vecSend = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vecsend_size()); i < n; i++) {
    const auto& repfield = this->_internal_vecsend(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .common.RecvGift vecRecv = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vecrecv_size()); i < n; i++) {
    const auto& repfield = this->_internal_vecrecv(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.SendGiftHistory)
  return target;
}

size_t SendGiftHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.SendGiftHistory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.SendGift vecSend = 1;
  total_size += 1UL * this->_internal_vecsend_size();
  for (const auto& msg : this->vecsend_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .common.RecvGift vecRecv = 2;
  total_size += 1UL * this->_internal_vecrecv_size();
  for (const auto& msg : this->vecrecv_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendGiftHistory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendGiftHistory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendGiftHistory::GetClassData() const { return &_class_data_; }

void SendGiftHistory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SendGiftHistory *>(to)->MergeFrom(
      static_cast<const SendGiftHistory &>(from));
}


void SendGiftHistory::MergeFrom(const SendGiftHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.SendGiftHistory)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vecsend_.MergeFrom(from.vecsend_);
  vecrecv_.MergeFrom(from.vecrecv_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendGiftHistory::CopyFrom(const SendGiftHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.SendGiftHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendGiftHistory::IsInitialized() const {
  return true;
}

void SendGiftHistory::InternalSwap(SendGiftHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vecsend_.InternalSwap(&other->vecsend_);
  vecrecv_.InternalSwap(&other->vecrecv_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendGiftHistory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friendcommon_2eproto_getter, &descriptor_table_friendcommon_2eproto_once,
      file_level_metadata_friendcommon_2eproto[8]);
}

// ===================================================================

class SingleSendTimes::_Internal {
 public:
};

SingleSendTimes::SingleSendTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.SingleSendTimes)
}
SingleSendTimes::SingleSendTimes(const SingleSendTimes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&llroleid_, &from.llroleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&uitimes_) -
    reinterpret_cast<char*>(&llroleid_)) + sizeof(uitimes_));
  // @@protoc_insertion_point(copy_constructor:common.SingleSendTimes)
}

inline void SingleSendTimes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&llroleid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uitimes_) -
    reinterpret_cast<char*>(&llroleid_)) + sizeof(uitimes_));
}

SingleSendTimes::~SingleSendTimes() {
  // @@protoc_insertion_point(destructor:common.SingleSendTimes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleSendTimes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SingleSendTimes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleSendTimes::Clear() {
// @@protoc_insertion_point(message_clear_start:common.SingleSendTimes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&llroleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uitimes_) -
      reinterpret_cast<char*>(&llroleid_)) + sizeof(uitimes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleSendTimes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 llRoleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          llroleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiTimes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uitimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleSendTimes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.SingleSendTimes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 llRoleId = 1;
  if (this->_internal_llroleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_llroleid(), target);
  }

  // uint32 uiTimes = 2;
  if (this->_internal_uitimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uitimes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.SingleSendTimes)
  return target;
}

size_t SingleSendTimes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.SingleSendTimes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 llRoleId = 1;
  if (this->_internal_llroleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_llroleid());
  }

  // uint32 uiTimes = 2;
  if (this->_internal_uitimes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uitimes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleSendTimes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleSendTimes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleSendTimes::GetClassData() const { return &_class_data_; }

void SingleSendTimes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleSendTimes *>(to)->MergeFrom(
      static_cast<const SingleSendTimes &>(from));
}


void SingleSendTimes::MergeFrom(const SingleSendTimes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.SingleSendTimes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_llroleid() != 0) {
    _internal_set_llroleid(from._internal_llroleid());
  }
  if (from._internal_uitimes() != 0) {
    _internal_set_uitimes(from._internal_uitimes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleSendTimes::CopyFrom(const SingleSendTimes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.SingleSendTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleSendTimes::IsInitialized() const {
  return true;
}

void SingleSendTimes::InternalSwap(SingleSendTimes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleSendTimes, uitimes_)
      + sizeof(SingleSendTimes::uitimes_)
      - PROTOBUF_FIELD_OFFSET(SingleSendTimes, llroleid_)>(
          reinterpret_cast<char*>(&llroleid_),
          reinterpret_cast<char*>(&other->llroleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleSendTimes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friendcommon_2eproto_getter, &descriptor_table_friendcommon_2eproto_once,
      file_level_metadata_friendcommon_2eproto[9]);
}

// ===================================================================

class SendGift::_Internal {
 public:
};

SendGift::SendGift(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.SendGift)
}
SendGift::SendGift(const SendGift& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lluid_, &from.lluid_,
    static_cast<size_t>(reinterpret_cast<char*>(&breceived_) -
    reinterpret_cast<char*>(&lluid_)) + sizeof(breceived_));
  // @@protoc_insertion_point(copy_constructor:common.SendGift)
}

inline void SendGift::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lluid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&breceived_) -
    reinterpret_cast<char*>(&lluid_)) + sizeof(breceived_));
}

SendGift::~SendGift() {
  // @@protoc_insertion_point(destructor:common.SendGift)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendGift::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SendGift::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendGift::Clear() {
// @@protoc_insertion_point(message_clear_start:common.SendGift)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lluid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&breceived_) -
      reinterpret_cast<char*>(&lluid_)) + sizeof(breceived_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendGift::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 llUid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          lluid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 llRecver = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          llrecver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiItemTid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uiitemtid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uicount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 llTimestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          lltimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bReceived = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          breceived_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendGift::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.SendGift)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 llUid = 1;
  if (this->_internal_lluid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_lluid(), target);
  }

  // uint64 llRecver = 2;
  if (this->_internal_llrecver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_llrecver(), target);
  }

  // uint32 uiItemTid = 3;
  if (this->_internal_uiitemtid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uiitemtid(), target);
  }

  // uint32 uiCount = 4;
  if (this->_internal_uicount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uicount(), target);
  }

  // uint64 llTimestamp = 5;
  if (this->_internal_lltimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_lltimestamp(), target);
  }

  // bool bReceived = 6;
  if (this->_internal_breceived() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_breceived(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.SendGift)
  return target;
}

size_t SendGift::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.SendGift)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 llUid = 1;
  if (this->_internal_lluid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lluid());
  }

  // uint64 llRecver = 2;
  if (this->_internal_llrecver() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_llrecver());
  }

  // uint32 uiItemTid = 3;
  if (this->_internal_uiitemtid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uiitemtid());
  }

  // uint32 uiCount = 4;
  if (this->_internal_uicount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uicount());
  }

  // uint64 llTimestamp = 5;
  if (this->_internal_lltimestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lltimestamp());
  }

  // bool bReceived = 6;
  if (this->_internal_breceived() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendGift::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendGift::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendGift::GetClassData() const { return &_class_data_; }

void SendGift::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SendGift *>(to)->MergeFrom(
      static_cast<const SendGift &>(from));
}


void SendGift::MergeFrom(const SendGift& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.SendGift)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_lluid() != 0) {
    _internal_set_lluid(from._internal_lluid());
  }
  if (from._internal_llrecver() != 0) {
    _internal_set_llrecver(from._internal_llrecver());
  }
  if (from._internal_uiitemtid() != 0) {
    _internal_set_uiitemtid(from._internal_uiitemtid());
  }
  if (from._internal_uicount() != 0) {
    _internal_set_uicount(from._internal_uicount());
  }
  if (from._internal_lltimestamp() != 0) {
    _internal_set_lltimestamp(from._internal_lltimestamp());
  }
  if (from._internal_breceived() != 0) {
    _internal_set_breceived(from._internal_breceived());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendGift::CopyFrom(const SendGift& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.SendGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendGift::IsInitialized() const {
  return true;
}

void SendGift::InternalSwap(SendGift* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendGift, breceived_)
      + sizeof(SendGift::breceived_)
      - PROTOBUF_FIELD_OFFSET(SendGift, lluid_)>(
          reinterpret_cast<char*>(&lluid_),
          reinterpret_cast<char*>(&other->lluid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendGift::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friendcommon_2eproto_getter, &descriptor_table_friendcommon_2eproto_once,
      file_level_metadata_friendcommon_2eproto[10]);
}

// ===================================================================

class RecvGift::_Internal {
 public:
};

RecvGift::RecvGift(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.RecvGift)
}
RecvGift::RecvGift(const RecvGift& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lluid_, &from.lluid_,
    static_cast<size_t>(reinterpret_cast<char*>(&lltimestamp_) -
    reinterpret_cast<char*>(&lluid_)) + sizeof(lltimestamp_));
  // @@protoc_insertion_point(copy_constructor:common.RecvGift)
}

inline void RecvGift::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lluid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lltimestamp_) -
    reinterpret_cast<char*>(&lluid_)) + sizeof(lltimestamp_));
}

RecvGift::~RecvGift() {
  // @@protoc_insertion_point(destructor:common.RecvGift)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecvGift::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecvGift::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecvGift::Clear() {
// @@protoc_insertion_point(message_clear_start:common.RecvGift)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lluid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lltimestamp_) -
      reinterpret_cast<char*>(&lluid_)) + sizeof(lltimestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecvGift::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 llUid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          lluid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 llSender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          llsender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiItemTid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uiitemtid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uicount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 llTimeStamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          lltimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecvGift::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.RecvGift)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 llUid = 1;
  if (this->_internal_lluid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_lluid(), target);
  }

  // uint64 llSender = 2;
  if (this->_internal_llsender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_llsender(), target);
  }

  // uint32 uiItemTid = 3;
  if (this->_internal_uiitemtid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uiitemtid(), target);
  }

  // uint32 uiCount = 4;
  if (this->_internal_uicount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uicount(), target);
  }

  // uint64 llTimeStamp = 5;
  if (this->_internal_lltimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_lltimestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.RecvGift)
  return target;
}

size_t RecvGift::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.RecvGift)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 llUid = 1;
  if (this->_internal_lluid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lluid());
  }

  // uint64 llSender = 2;
  if (this->_internal_llsender() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_llsender());
  }

  // uint32 uiItemTid = 3;
  if (this->_internal_uiitemtid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uiitemtid());
  }

  // uint32 uiCount = 4;
  if (this->_internal_uicount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uicount());
  }

  // uint64 llTimeStamp = 5;
  if (this->_internal_lltimestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lltimestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecvGift::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecvGift::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecvGift::GetClassData() const { return &_class_data_; }

void RecvGift::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecvGift *>(to)->MergeFrom(
      static_cast<const RecvGift &>(from));
}


void RecvGift::MergeFrom(const RecvGift& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.RecvGift)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_lluid() != 0) {
    _internal_set_lluid(from._internal_lluid());
  }
  if (from._internal_llsender() != 0) {
    _internal_set_llsender(from._internal_llsender());
  }
  if (from._internal_uiitemtid() != 0) {
    _internal_set_uiitemtid(from._internal_uiitemtid());
  }
  if (from._internal_uicount() != 0) {
    _internal_set_uicount(from._internal_uicount());
  }
  if (from._internal_lltimestamp() != 0) {
    _internal_set_lltimestamp(from._internal_lltimestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecvGift::CopyFrom(const RecvGift& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.RecvGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvGift::IsInitialized() const {
  return true;
}

void RecvGift::InternalSwap(RecvGift* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecvGift, lltimestamp_)
      + sizeof(RecvGift::lltimestamp_)
      - PROTOBUF_FIELD_OFFSET(RecvGift, lluid_)>(
          reinterpret_cast<char*>(&lluid_),
          reinterpret_cast<char*>(&other->lluid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecvGift::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friendcommon_2eproto_getter, &descriptor_table_friendcommon_2eproto_once,
      file_level_metadata_friendcommon_2eproto[11]);
}

// ===================================================================

class FriendFieldList::_Internal {
 public:
};

FriendFieldList::FriendFieldList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vecids_(arena),
  vecstr_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.FriendFieldList)
}
FriendFieldList::FriendFieldList(const FriendFieldList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vecids_(from.vecids_),
      vecstr_(from.vecstr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:common.FriendFieldList)
}

inline void FriendFieldList::SharedCtor() {
}

FriendFieldList::~FriendFieldList() {
  // @@protoc_insertion_point(destructor:common.FriendFieldList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendFieldList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FriendFieldList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FriendFieldList::Clear() {
// @@protoc_insertion_point(message_clear_start:common.FriendFieldList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vecids_.Clear();
  vecstr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendFieldList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .common.FriendFieldId vecIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vecids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .common.FriendFieldStr vecStr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vecstr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendFieldList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.FriendFieldList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.FriendFieldId vecIds = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vecids_size()); i < n; i++) {
    const auto& repfield = this->_internal_vecids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .common.FriendFieldStr vecStr = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vecstr_size()); i < n; i++) {
    const auto& repfield = this->_internal_vecstr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.FriendFieldList)
  return target;
}

size_t FriendFieldList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.FriendFieldList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.FriendFieldId vecIds = 1;
  total_size += 1UL * this->_internal_vecids_size();
  for (const auto& msg : this->vecids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .common.FriendFieldStr vecStr = 2;
  total_size += 1UL * this->_internal_vecstr_size();
  for (const auto& msg : this->vecstr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendFieldList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FriendFieldList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendFieldList::GetClassData() const { return &_class_data_; }

void FriendFieldList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FriendFieldList *>(to)->MergeFrom(
      static_cast<const FriendFieldList &>(from));
}


void FriendFieldList::MergeFrom(const FriendFieldList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.FriendFieldList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vecids_.MergeFrom(from.vecids_);
  vecstr_.MergeFrom(from.vecstr_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendFieldList::CopyFrom(const FriendFieldList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.FriendFieldList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendFieldList::IsInitialized() const {
  return true;
}

void FriendFieldList::InternalSwap(FriendFieldList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vecids_.InternalSwap(&other->vecids_);
  vecstr_.InternalSwap(&other->vecstr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendFieldList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friendcommon_2eproto_getter, &descriptor_table_friendcommon_2eproto_once,
      file_level_metadata_friendcommon_2eproto[12]);
}

// ===================================================================

class FriendFieldId::_Internal {
 public:
};

FriendFieldId::FriendFieldId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.FriendFieldId)
}
FriendFieldId::FriendFieldId(const FriendFieldId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&llval_, &from.llval_,
    static_cast<size_t>(reinterpret_cast<char*>(&uitype_) -
    reinterpret_cast<char*>(&llval_)) + sizeof(uitype_));
  // @@protoc_insertion_point(copy_constructor:common.FriendFieldId)
}

inline void FriendFieldId::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&llval_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uitype_) -
    reinterpret_cast<char*>(&llval_)) + sizeof(uitype_));
}

FriendFieldId::~FriendFieldId() {
  // @@protoc_insertion_point(destructor:common.FriendFieldId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendFieldId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FriendFieldId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FriendFieldId::Clear() {
// @@protoc_insertion_point(message_clear_start:common.FriendFieldId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&llval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uitype_) -
      reinterpret_cast<char*>(&llval_)) + sizeof(uitype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendFieldId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 uiType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uitype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 llVal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          llval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendFieldId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.FriendFieldId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiType = 1;
  if (this->_internal_uitype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uitype(), target);
  }

  // uint64 llVal = 2;
  if (this->_internal_llval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_llval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.FriendFieldId)
  return target;
}

size_t FriendFieldId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.FriendFieldId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 llVal = 2;
  if (this->_internal_llval() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_llval());
  }

  // uint32 uiType = 1;
  if (this->_internal_uitype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uitype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendFieldId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FriendFieldId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendFieldId::GetClassData() const { return &_class_data_; }

void FriendFieldId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FriendFieldId *>(to)->MergeFrom(
      static_cast<const FriendFieldId &>(from));
}


void FriendFieldId::MergeFrom(const FriendFieldId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.FriendFieldId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_llval() != 0) {
    _internal_set_llval(from._internal_llval());
  }
  if (from._internal_uitype() != 0) {
    _internal_set_uitype(from._internal_uitype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendFieldId::CopyFrom(const FriendFieldId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.FriendFieldId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendFieldId::IsInitialized() const {
  return true;
}

void FriendFieldId::InternalSwap(FriendFieldId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FriendFieldId, uitype_)
      + sizeof(FriendFieldId::uitype_)
      - PROTOBUF_FIELD_OFFSET(FriendFieldId, llval_)>(
          reinterpret_cast<char*>(&llval_),
          reinterpret_cast<char*>(&other->llval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendFieldId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friendcommon_2eproto_getter, &descriptor_table_friendcommon_2eproto_once,
      file_level_metadata_friendcommon_2eproto[13]);
}

// ===================================================================

class FriendFieldStr::_Internal {
 public:
};

FriendFieldStr::FriendFieldStr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.FriendFieldStr)
}
FriendFieldStr::FriendFieldStr(const FriendFieldStr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    strdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_strdata().empty()) {
    strdata_.Set(from._internal_strdata(), 
      GetArenaForAllocation());
  }
  uitype_ = from.uitype_;
  // @@protoc_insertion_point(copy_constructor:common.FriendFieldStr)
}

inline void FriendFieldStr::SharedCtor() {
strdata_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  strdata_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
uitype_ = 0u;
}

FriendFieldStr::~FriendFieldStr() {
  // @@protoc_insertion_point(destructor:common.FriendFieldStr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendFieldStr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  strdata_.Destroy();
}

void FriendFieldStr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FriendFieldStr::Clear() {
// @@protoc_insertion_point(message_clear_start:common.FriendFieldStr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strdata_.ClearToEmpty();
  uitype_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendFieldStr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 uiType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uitype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes strData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_strdata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendFieldStr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.FriendFieldStr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiType = 1;
  if (this->_internal_uitype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uitype(), target);
  }

  // bytes strData = 2;
  if (!this->_internal_strdata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_strdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.FriendFieldStr)
  return target;
}

size_t FriendFieldStr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.FriendFieldStr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes strData = 2;
  if (!this->_internal_strdata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_strdata());
  }

  // uint32 uiType = 1;
  if (this->_internal_uitype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uitype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendFieldStr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FriendFieldStr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendFieldStr::GetClassData() const { return &_class_data_; }

void FriendFieldStr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FriendFieldStr *>(to)->MergeFrom(
      static_cast<const FriendFieldStr &>(from));
}


void FriendFieldStr::MergeFrom(const FriendFieldStr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.FriendFieldStr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_strdata().empty()) {
    _internal_set_strdata(from._internal_strdata());
  }
  if (from._internal_uitype() != 0) {
    _internal_set_uitype(from._internal_uitype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendFieldStr::CopyFrom(const FriendFieldStr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.FriendFieldStr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendFieldStr::IsInitialized() const {
  return true;
}

void FriendFieldStr::InternalSwap(FriendFieldStr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &strdata_, lhs_arena,
      &other->strdata_, rhs_arena
  );
  swap(uitype_, other->uitype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendFieldStr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friendcommon_2eproto_getter, &descriptor_table_friendcommon_2eproto_once,
      file_level_metadata_friendcommon_2eproto[14]);
}

// ===================================================================

class RecommendList::_Internal {
 public:
};

RecommendList::RecommendList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vecrolelist_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.RecommendList)
}
RecommendList::RecommendList(const RecommendList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vecrolelist_(from.vecrolelist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:common.RecommendList)
}

inline void RecommendList::SharedCtor() {
}

RecommendList::~RecommendList() {
  // @@protoc_insertion_point(destructor:common.RecommendList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecommendList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecommendList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecommendList::Clear() {
// @@protoc_insertion_point(message_clear_start:common.RecommendList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vecrolelist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecommendList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .common.Recommend vecRoleList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vecrolelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecommendList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.RecommendList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.Recommend vecRoleList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vecrolelist_size()); i < n; i++) {
    const auto& repfield = this->_internal_vecrolelist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.RecommendList)
  return target;
}

size_t RecommendList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.RecommendList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.Recommend vecRoleList = 1;
  total_size += 1UL * this->_internal_vecrolelist_size();
  for (const auto& msg : this->vecrolelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecommendList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecommendList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecommendList::GetClassData() const { return &_class_data_; }

void RecommendList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecommendList *>(to)->MergeFrom(
      static_cast<const RecommendList &>(from));
}


void RecommendList::MergeFrom(const RecommendList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.RecommendList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vecrolelist_.MergeFrom(from.vecrolelist_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecommendList::CopyFrom(const RecommendList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.RecommendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecommendList::IsInitialized() const {
  return true;
}

void RecommendList::InternalSwap(RecommendList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vecrolelist_.InternalSwap(&other->vecrolelist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecommendList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friendcommon_2eproto_getter, &descriptor_table_friendcommon_2eproto_once,
      file_level_metadata_friendcommon_2eproto[15]);
}

// ===================================================================

class Recommend::_Internal {
 public:
};

Recommend::Recommend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.Recommend)
}
Recommend::Recommend(const Recommend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&llroleid_, &from.llroleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&uilabel_) -
    reinterpret_cast<char*>(&llroleid_)) + sizeof(uilabel_));
  // @@protoc_insertion_point(copy_constructor:common.Recommend)
}

inline void Recommend::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&llroleid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uilabel_) -
    reinterpret_cast<char*>(&llroleid_)) + sizeof(uilabel_));
}

Recommend::~Recommend() {
  // @@protoc_insertion_point(destructor:common.Recommend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Recommend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Recommend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Recommend::Clear() {
// @@protoc_insertion_point(message_clear_start:common.Recommend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&llroleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uilabel_) -
      reinterpret_cast<char*>(&llroleid_)) + sizeof(uilabel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Recommend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 llRoleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          llroleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiCity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uicity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiLabel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uilabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Recommend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Recommend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 llRoleId = 1;
  if (this->_internal_llroleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_llroleid(), target);
  }

  // uint32 uiCity = 2;
  if (this->_internal_uicity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uicity(), target);
  }

  // uint32 uiLabel = 3;
  if (this->_internal_uilabel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uilabel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.Recommend)
  return target;
}

size_t Recommend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.Recommend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 llRoleId = 1;
  if (this->_internal_llroleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_llroleid());
  }

  // uint32 uiCity = 2;
  if (this->_internal_uicity() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uicity());
  }

  // uint32 uiLabel = 3;
  if (this->_internal_uilabel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uilabel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Recommend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Recommend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Recommend::GetClassData() const { return &_class_data_; }

void Recommend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Recommend *>(to)->MergeFrom(
      static_cast<const Recommend &>(from));
}


void Recommend::MergeFrom(const Recommend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.Recommend)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_llroleid() != 0) {
    _internal_set_llroleid(from._internal_llroleid());
  }
  if (from._internal_uicity() != 0) {
    _internal_set_uicity(from._internal_uicity());
  }
  if (from._internal_uilabel() != 0) {
    _internal_set_uilabel(from._internal_uilabel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Recommend::CopyFrom(const Recommend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.Recommend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Recommend::IsInitialized() const {
  return true;
}

void Recommend::InternalSwap(Recommend* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Recommend, uilabel_)
      + sizeof(Recommend::uilabel_)
      - PROTOBUF_FIELD_OFFSET(Recommend, llroleid_)>(
          reinterpret_cast<char*>(&llroleid_),
          reinterpret_cast<char*>(&other->llroleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Recommend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friendcommon_2eproto_getter, &descriptor_table_friendcommon_2eproto_once,
      file_level_metadata_friendcommon_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::common::FriendInfo*
Arena::CreateMaybeMessage< ::common::FriendInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::FriendInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::common::FriendList*
Arena::CreateMaybeMessage< ::common::FriendList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::FriendList >(arena);
}
template<> PROTOBUF_NOINLINE ::common::FriendRelation*
Arena::CreateMaybeMessage< ::common::FriendRelation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::FriendRelation >(arena);
}
template<> PROTOBUF_NOINLINE ::common::RequestList*
Arena::CreateMaybeMessage< ::common::RequestList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::RequestList >(arena);
}
template<> PROTOBUF_NOINLINE ::common::BlockList*
Arena::CreateMaybeMessage< ::common::BlockList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::BlockList >(arena);
}
template<> PROTOBUF_NOINLINE ::common::RecommendFilter*
Arena::CreateMaybeMessage< ::common::RecommendFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::RecommendFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::common::RecommendLabel*
Arena::CreateMaybeMessage< ::common::RecommendLabel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::RecommendLabel >(arena);
}
template<> PROTOBUF_NOINLINE ::common::SendGiftTimes*
Arena::CreateMaybeMessage< ::common::SendGiftTimes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::SendGiftTimes >(arena);
}
template<> PROTOBUF_NOINLINE ::common::SendGiftHistory*
Arena::CreateMaybeMessage< ::common::SendGiftHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::SendGiftHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::common::SingleSendTimes*
Arena::CreateMaybeMessage< ::common::SingleSendTimes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::SingleSendTimes >(arena);
}
template<> PROTOBUF_NOINLINE ::common::SendGift*
Arena::CreateMaybeMessage< ::common::SendGift >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::SendGift >(arena);
}
template<> PROTOBUF_NOINLINE ::common::RecvGift*
Arena::CreateMaybeMessage< ::common::RecvGift >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::RecvGift >(arena);
}
template<> PROTOBUF_NOINLINE ::common::FriendFieldList*
Arena::CreateMaybeMessage< ::common::FriendFieldList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::FriendFieldList >(arena);
}
template<> PROTOBUF_NOINLINE ::common::FriendFieldId*
Arena::CreateMaybeMessage< ::common::FriendFieldId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::FriendFieldId >(arena);
}
template<> PROTOBUF_NOINLINE ::common::FriendFieldStr*
Arena::CreateMaybeMessage< ::common::FriendFieldStr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::FriendFieldStr >(arena);
}
template<> PROTOBUF_NOINLINE ::common::RecommendList*
Arena::CreateMaybeMessage< ::common::RecommendList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::RecommendList >(arena);
}
template<> PROTOBUF_NOINLINE ::common::Recommend*
Arena::CreateMaybeMessage< ::common::Recommend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::Recommend >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
