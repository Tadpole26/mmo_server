// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friendsvr.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_friendsvr_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_friendsvr_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "innercommon.pb.h"
#include "chatcommon.pb.h"
#include "innerfriend.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_friendsvr_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_friendsvr_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_friendsvr_2eproto;
namespace inner {
class InnerFriendsvr;
struct InnerFriendsvrDefaultTypeInternal;
extern InnerFriendsvrDefaultTypeInternal _InnerFriendsvr_default_instance_;
class InnerFriendsvr_Fromscene_Agree;
struct InnerFriendsvr_Fromscene_AgreeDefaultTypeInternal;
extern InnerFriendsvr_Fromscene_AgreeDefaultTypeInternal _InnerFriendsvr_Fromscene_Agree_default_instance_;
class InnerFriendsvr_Fromscene_AgreeAll;
struct InnerFriendsvr_Fromscene_AgreeAllDefaultTypeInternal;
extern InnerFriendsvr_Fromscene_AgreeAllDefaultTypeInternal _InnerFriendsvr_Fromscene_AgreeAll_default_instance_;
class InnerFriendsvr_Fromscene_Block;
struct InnerFriendsvr_Fromscene_BlockDefaultTypeInternal;
extern InnerFriendsvr_Fromscene_BlockDefaultTypeInternal _InnerFriendsvr_Fromscene_Block_default_instance_;
class InnerFriendsvr_Fromscene_Chat;
struct InnerFriendsvr_Fromscene_ChatDefaultTypeInternal;
extern InnerFriendsvr_Fromscene_ChatDefaultTypeInternal _InnerFriendsvr_Fromscene_Chat_default_instance_;
class InnerFriendsvr_Fromscene_Expand;
struct InnerFriendsvr_Fromscene_ExpandDefaultTypeInternal;
extern InnerFriendsvr_Fromscene_ExpandDefaultTypeInternal _InnerFriendsvr_Fromscene_Expand_default_instance_;
class InnerFriendsvr_Fromscene_ExpiredMail;
struct InnerFriendsvr_Fromscene_ExpiredMailDefaultTypeInternal;
extern InnerFriendsvr_Fromscene_ExpiredMailDefaultTypeInternal _InnerFriendsvr_Fromscene_ExpiredMail_default_instance_;
class InnerFriendsvr_Fromscene_Filter;
struct InnerFriendsvr_Fromscene_FilterDefaultTypeInternal;
extern InnerFriendsvr_Fromscene_FilterDefaultTypeInternal _InnerFriendsvr_Fromscene_Filter_default_instance_;
class InnerFriendsvr_Fromscene_GameEvent;
struct InnerFriendsvr_Fromscene_GameEventDefaultTypeInternal;
extern InnerFriendsvr_Fromscene_GameEventDefaultTypeInternal _InnerFriendsvr_Fromscene_GameEvent_default_instance_;
class InnerFriendsvr_Fromscene_Labels;
struct InnerFriendsvr_Fromscene_LabelsDefaultTypeInternal;
extern InnerFriendsvr_Fromscene_LabelsDefaultTypeInternal _InnerFriendsvr_Fromscene_Labels_default_instance_;
class InnerFriendsvr_Fromscene_MailFull;
struct InnerFriendsvr_Fromscene_MailFullDefaultTypeInternal;
extern InnerFriendsvr_Fromscene_MailFullDefaultTypeInternal _InnerFriendsvr_Fromscene_MailFull_default_instance_;
class InnerFriendsvr_Fromscene_OpenFunc;
struct InnerFriendsvr_Fromscene_OpenFuncDefaultTypeInternal;
extern InnerFriendsvr_Fromscene_OpenFuncDefaultTypeInternal _InnerFriendsvr_Fromscene_OpenFunc_default_instance_;
class InnerFriendsvr_Fromscene_ReceiveGift;
struct InnerFriendsvr_Fromscene_ReceiveGiftDefaultTypeInternal;
extern InnerFriendsvr_Fromscene_ReceiveGiftDefaultTypeInternal _InnerFriendsvr_Fromscene_ReceiveGift_default_instance_;
class InnerFriendsvr_Fromscene_Recommend;
struct InnerFriendsvr_Fromscene_RecommendDefaultTypeInternal;
extern InnerFriendsvr_Fromscene_RecommendDefaultTypeInternal _InnerFriendsvr_Fromscene_Recommend_default_instance_;
class InnerFriendsvr_Fromscene_RecvMail;
struct InnerFriendsvr_Fromscene_RecvMailDefaultTypeInternal;
extern InnerFriendsvr_Fromscene_RecvMailDefaultTypeInternal _InnerFriendsvr_Fromscene_RecvMail_default_instance_;
class InnerFriendsvr_Fromscene_Refuse;
struct InnerFriendsvr_Fromscene_RefuseDefaultTypeInternal;
extern InnerFriendsvr_Fromscene_RefuseDefaultTypeInternal _InnerFriendsvr_Fromscene_Refuse_default_instance_;
class InnerFriendsvr_Fromscene_RefuseAll;
struct InnerFriendsvr_Fromscene_RefuseAllDefaultTypeInternal;
extern InnerFriendsvr_Fromscene_RefuseAllDefaultTypeInternal _InnerFriendsvr_Fromscene_RefuseAll_default_instance_;
class InnerFriendsvr_Fromscene_Remove;
struct InnerFriendsvr_Fromscene_RemoveDefaultTypeInternal;
extern InnerFriendsvr_Fromscene_RemoveDefaultTypeInternal _InnerFriendsvr_Fromscene_Remove_default_instance_;
class InnerFriendsvr_Fromscene_Request;
struct InnerFriendsvr_Fromscene_RequestDefaultTypeInternal;
extern InnerFriendsvr_Fromscene_RequestDefaultTypeInternal _InnerFriendsvr_Fromscene_Request_default_instance_;
class InnerFriendsvr_Fromscene_Search;
struct InnerFriendsvr_Fromscene_SearchDefaultTypeInternal;
extern InnerFriendsvr_Fromscene_SearchDefaultTypeInternal _InnerFriendsvr_Fromscene_Search_default_instance_;
class InnerFriendsvr_Fromscene_SendGift;
struct InnerFriendsvr_Fromscene_SendGiftDefaultTypeInternal;
extern InnerFriendsvr_Fromscene_SendGiftDefaultTypeInternal _InnerFriendsvr_Fromscene_SendGift_default_instance_;
class InnerFriendsvr_Fromscene_Test;
struct InnerFriendsvr_Fromscene_TestDefaultTypeInternal;
extern InnerFriendsvr_Fromscene_TestDefaultTypeInternal _InnerFriendsvr_Fromscene_Test_default_instance_;
class InnerFriendsvr_Fromscene_UpdateUserInfo;
struct InnerFriendsvr_Fromscene_UpdateUserInfoDefaultTypeInternal;
extern InnerFriendsvr_Fromscene_UpdateUserInfoDefaultTypeInternal _InnerFriendsvr_Fromscene_UpdateUserInfo_default_instance_;
class InnerFriendsvr_Fromscene_UserLogin;
struct InnerFriendsvr_Fromscene_UserLoginDefaultTypeInternal;
extern InnerFriendsvr_Fromscene_UserLoginDefaultTypeInternal _InnerFriendsvr_Fromscene_UserLogin_default_instance_;
class InnerFriendsvr_Fromscene_UserLogout;
struct InnerFriendsvr_Fromscene_UserLogoutDefaultTypeInternal;
extern InnerFriendsvr_Fromscene_UserLogoutDefaultTypeInternal _InnerFriendsvr_Fromscene_UserLogout_default_instance_;
class InnerFriendsvr_Fromscene_UserOffline;
struct InnerFriendsvr_Fromscene_UserOfflineDefaultTypeInternal;
extern InnerFriendsvr_Fromscene_UserOfflineDefaultTypeInternal _InnerFriendsvr_Fromscene_UserOffline_default_instance_;
class InnerFriendsvr_Fromscene_UserOnline;
struct InnerFriendsvr_Fromscene_UserOnlineDefaultTypeInternal;
extern InnerFriendsvr_Fromscene_UserOnlineDefaultTypeInternal _InnerFriendsvr_Fromscene_UserOnline_default_instance_;
}  // namespace inner
PROTOBUF_NAMESPACE_OPEN
template<> ::inner::InnerFriendsvr* Arena::CreateMaybeMessage<::inner::InnerFriendsvr>(Arena*);
template<> ::inner::InnerFriendsvr_Fromscene_Agree* Arena::CreateMaybeMessage<::inner::InnerFriendsvr_Fromscene_Agree>(Arena*);
template<> ::inner::InnerFriendsvr_Fromscene_AgreeAll* Arena::CreateMaybeMessage<::inner::InnerFriendsvr_Fromscene_AgreeAll>(Arena*);
template<> ::inner::InnerFriendsvr_Fromscene_Block* Arena::CreateMaybeMessage<::inner::InnerFriendsvr_Fromscene_Block>(Arena*);
template<> ::inner::InnerFriendsvr_Fromscene_Chat* Arena::CreateMaybeMessage<::inner::InnerFriendsvr_Fromscene_Chat>(Arena*);
template<> ::inner::InnerFriendsvr_Fromscene_Expand* Arena::CreateMaybeMessage<::inner::InnerFriendsvr_Fromscene_Expand>(Arena*);
template<> ::inner::InnerFriendsvr_Fromscene_ExpiredMail* Arena::CreateMaybeMessage<::inner::InnerFriendsvr_Fromscene_ExpiredMail>(Arena*);
template<> ::inner::InnerFriendsvr_Fromscene_Filter* Arena::CreateMaybeMessage<::inner::InnerFriendsvr_Fromscene_Filter>(Arena*);
template<> ::inner::InnerFriendsvr_Fromscene_GameEvent* Arena::CreateMaybeMessage<::inner::InnerFriendsvr_Fromscene_GameEvent>(Arena*);
template<> ::inner::InnerFriendsvr_Fromscene_Labels* Arena::CreateMaybeMessage<::inner::InnerFriendsvr_Fromscene_Labels>(Arena*);
template<> ::inner::InnerFriendsvr_Fromscene_MailFull* Arena::CreateMaybeMessage<::inner::InnerFriendsvr_Fromscene_MailFull>(Arena*);
template<> ::inner::InnerFriendsvr_Fromscene_OpenFunc* Arena::CreateMaybeMessage<::inner::InnerFriendsvr_Fromscene_OpenFunc>(Arena*);
template<> ::inner::InnerFriendsvr_Fromscene_ReceiveGift* Arena::CreateMaybeMessage<::inner::InnerFriendsvr_Fromscene_ReceiveGift>(Arena*);
template<> ::inner::InnerFriendsvr_Fromscene_Recommend* Arena::CreateMaybeMessage<::inner::InnerFriendsvr_Fromscene_Recommend>(Arena*);
template<> ::inner::InnerFriendsvr_Fromscene_RecvMail* Arena::CreateMaybeMessage<::inner::InnerFriendsvr_Fromscene_RecvMail>(Arena*);
template<> ::inner::InnerFriendsvr_Fromscene_Refuse* Arena::CreateMaybeMessage<::inner::InnerFriendsvr_Fromscene_Refuse>(Arena*);
template<> ::inner::InnerFriendsvr_Fromscene_RefuseAll* Arena::CreateMaybeMessage<::inner::InnerFriendsvr_Fromscene_RefuseAll>(Arena*);
template<> ::inner::InnerFriendsvr_Fromscene_Remove* Arena::CreateMaybeMessage<::inner::InnerFriendsvr_Fromscene_Remove>(Arena*);
template<> ::inner::InnerFriendsvr_Fromscene_Request* Arena::CreateMaybeMessage<::inner::InnerFriendsvr_Fromscene_Request>(Arena*);
template<> ::inner::InnerFriendsvr_Fromscene_Search* Arena::CreateMaybeMessage<::inner::InnerFriendsvr_Fromscene_Search>(Arena*);
template<> ::inner::InnerFriendsvr_Fromscene_SendGift* Arena::CreateMaybeMessage<::inner::InnerFriendsvr_Fromscene_SendGift>(Arena*);
template<> ::inner::InnerFriendsvr_Fromscene_Test* Arena::CreateMaybeMessage<::inner::InnerFriendsvr_Fromscene_Test>(Arena*);
template<> ::inner::InnerFriendsvr_Fromscene_UpdateUserInfo* Arena::CreateMaybeMessage<::inner::InnerFriendsvr_Fromscene_UpdateUserInfo>(Arena*);
template<> ::inner::InnerFriendsvr_Fromscene_UserLogin* Arena::CreateMaybeMessage<::inner::InnerFriendsvr_Fromscene_UserLogin>(Arena*);
template<> ::inner::InnerFriendsvr_Fromscene_UserLogout* Arena::CreateMaybeMessage<::inner::InnerFriendsvr_Fromscene_UserLogout>(Arena*);
template<> ::inner::InnerFriendsvr_Fromscene_UserOffline* Arena::CreateMaybeMessage<::inner::InnerFriendsvr_Fromscene_UserOffline>(Arena*);
template<> ::inner::InnerFriendsvr_Fromscene_UserOnline* Arena::CreateMaybeMessage<::inner::InnerFriendsvr_Fromscene_UserOnline>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inner {

// ===================================================================

class InnerFriendsvr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerFriendsvr) */ {
 public:
  inline InnerFriendsvr() : InnerFriendsvr(nullptr) {}
  ~InnerFriendsvr() override;
  explicit PROTOBUF_CONSTEXPR InnerFriendsvr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendsvr(const InnerFriendsvr& from);
  InnerFriendsvr(InnerFriendsvr&& from) noexcept
    : InnerFriendsvr() {
    *this = ::std::move(from);
  }

  inline InnerFriendsvr& operator=(const InnerFriendsvr& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendsvr& operator=(InnerFriendsvr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendsvr& default_instance() {
    return *internal_default_instance();
  }
  enum FromsceneCase {
    kFromsceneTest = 101,
    kFromsceneGameevent = 102,
    kFromsceneUpdateuserinfo = 103,
    kFromsceneOpen = 104,
    kFromsceneRequest = 105,
    kFromsceneAgreeRequest = 106,
    kFromsceneRefuseRequest = 107,
    kFromsceneAgreeAll = 108,
    kFromsceneRefuseAll = 109,
    kFromsceneRemoveFriend = 110,
    kFromsceneBlockSomeone = 111,
    kFromsceneChatMsgUp = 112,
    kFromsceneExpandList = 113,
    kFromsceneSearchRole = 114,
    kFromsceneRecommendReq = 115,
    kFromsceneSetFilter = 116,
    kFromsceneSetLabels = 117,
    kFromsceneSendGift = 118,
    kFromsceneReceiveGift = 119,
    kFromsceneUserlogin = 120,
    kFromsceneUserlogout = 121,
    kFromsceneUseronline = 122,
    kFromsceneUseroffline = 123,
    kFromsceneRecvmail = 124,
    kFromsceneExpiredmail = 125,
    kFromsceneMailfull = 126,
    FROMSCENE_NOT_SET = 0,
  };

  static inline const InnerFriendsvr* internal_default_instance() {
    return reinterpret_cast<const InnerFriendsvr*>(
               &_InnerFriendsvr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InnerFriendsvr& a, InnerFriendsvr& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendsvr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendsvr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendsvr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendsvr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerFriendsvr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerFriendsvr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerFriendsvr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendsvr";
  }
  protected:
  explicit InnerFriendsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlFromUserFieldNumber = 1,
    kFromsceneTestFieldNumber = 101,
    kFromsceneGameeventFieldNumber = 102,
    kFromsceneUpdateuserinfoFieldNumber = 103,
    kFromsceneOpenFieldNumber = 104,
    kFromsceneRequestFieldNumber = 105,
    kFromsceneAgreeRequestFieldNumber = 106,
    kFromsceneRefuseRequestFieldNumber = 107,
    kFromsceneAgreeAllFieldNumber = 108,
    kFromsceneRefuseAllFieldNumber = 109,
    kFromsceneRemoveFriendFieldNumber = 110,
    kFromsceneBlockSomeoneFieldNumber = 111,
    kFromsceneChatMsgUpFieldNumber = 112,
    kFromsceneExpandListFieldNumber = 113,
    kFromsceneSearchRoleFieldNumber = 114,
    kFromsceneRecommendReqFieldNumber = 115,
    kFromsceneSetFilterFieldNumber = 116,
    kFromsceneSetLabelsFieldNumber = 117,
    kFromsceneSendGiftFieldNumber = 118,
    kFromsceneReceiveGiftFieldNumber = 119,
    kFromsceneUserloginFieldNumber = 120,
    kFromsceneUserlogoutFieldNumber = 121,
    kFromsceneUseronlineFieldNumber = 122,
    kFromsceneUserofflineFieldNumber = 123,
    kFromsceneRecvmailFieldNumber = 124,
    kFromsceneExpiredmailFieldNumber = 125,
    kFromsceneMailfullFieldNumber = 126,
  };
  // uint64 llFromUser = 1;
  void clear_llfromuser();
  uint64_t llfromuser() const;
  void set_llfromuser(uint64_t value);
  private:
  uint64_t _internal_llfromuser() const;
  void _internal_set_llfromuser(uint64_t value);
  public:

  // .inner.InnerFriendsvr_Fromscene_Test fromscene_test = 101;
  bool has_fromscene_test() const;
  private:
  bool _internal_has_fromscene_test() const;
  public:
  void clear_fromscene_test();
  const ::inner::InnerFriendsvr_Fromscene_Test& fromscene_test() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendsvr_Fromscene_Test* release_fromscene_test();
  ::inner::InnerFriendsvr_Fromscene_Test* mutable_fromscene_test();
  void set_allocated_fromscene_test(::inner::InnerFriendsvr_Fromscene_Test* fromscene_test);
  private:
  const ::inner::InnerFriendsvr_Fromscene_Test& _internal_fromscene_test() const;
  ::inner::InnerFriendsvr_Fromscene_Test* _internal_mutable_fromscene_test();
  public:
  void unsafe_arena_set_allocated_fromscene_test(
      ::inner::InnerFriendsvr_Fromscene_Test* fromscene_test);
  ::inner::InnerFriendsvr_Fromscene_Test* unsafe_arena_release_fromscene_test();

  // .inner.InnerFriendsvr_Fromscene_GameEvent fromscene_gameevent = 102;
  bool has_fromscene_gameevent() const;
  private:
  bool _internal_has_fromscene_gameevent() const;
  public:
  void clear_fromscene_gameevent();
  const ::inner::InnerFriendsvr_Fromscene_GameEvent& fromscene_gameevent() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendsvr_Fromscene_GameEvent* release_fromscene_gameevent();
  ::inner::InnerFriendsvr_Fromscene_GameEvent* mutable_fromscene_gameevent();
  void set_allocated_fromscene_gameevent(::inner::InnerFriendsvr_Fromscene_GameEvent* fromscene_gameevent);
  private:
  const ::inner::InnerFriendsvr_Fromscene_GameEvent& _internal_fromscene_gameevent() const;
  ::inner::InnerFriendsvr_Fromscene_GameEvent* _internal_mutable_fromscene_gameevent();
  public:
  void unsafe_arena_set_allocated_fromscene_gameevent(
      ::inner::InnerFriendsvr_Fromscene_GameEvent* fromscene_gameevent);
  ::inner::InnerFriendsvr_Fromscene_GameEvent* unsafe_arena_release_fromscene_gameevent();

  // .inner.InnerFriendsvr_Fromscene_UpdateUserInfo fromscene_updateuserinfo = 103;
  bool has_fromscene_updateuserinfo() const;
  private:
  bool _internal_has_fromscene_updateuserinfo() const;
  public:
  void clear_fromscene_updateuserinfo();
  const ::inner::InnerFriendsvr_Fromscene_UpdateUserInfo& fromscene_updateuserinfo() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendsvr_Fromscene_UpdateUserInfo* release_fromscene_updateuserinfo();
  ::inner::InnerFriendsvr_Fromscene_UpdateUserInfo* mutable_fromscene_updateuserinfo();
  void set_allocated_fromscene_updateuserinfo(::inner::InnerFriendsvr_Fromscene_UpdateUserInfo* fromscene_updateuserinfo);
  private:
  const ::inner::InnerFriendsvr_Fromscene_UpdateUserInfo& _internal_fromscene_updateuserinfo() const;
  ::inner::InnerFriendsvr_Fromscene_UpdateUserInfo* _internal_mutable_fromscene_updateuserinfo();
  public:
  void unsafe_arena_set_allocated_fromscene_updateuserinfo(
      ::inner::InnerFriendsvr_Fromscene_UpdateUserInfo* fromscene_updateuserinfo);
  ::inner::InnerFriendsvr_Fromscene_UpdateUserInfo* unsafe_arena_release_fromscene_updateuserinfo();

  // .inner.InnerFriendsvr_Fromscene_OpenFunc fromscene_open = 104;
  bool has_fromscene_open() const;
  private:
  bool _internal_has_fromscene_open() const;
  public:
  void clear_fromscene_open();
  const ::inner::InnerFriendsvr_Fromscene_OpenFunc& fromscene_open() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendsvr_Fromscene_OpenFunc* release_fromscene_open();
  ::inner::InnerFriendsvr_Fromscene_OpenFunc* mutable_fromscene_open();
  void set_allocated_fromscene_open(::inner::InnerFriendsvr_Fromscene_OpenFunc* fromscene_open);
  private:
  const ::inner::InnerFriendsvr_Fromscene_OpenFunc& _internal_fromscene_open() const;
  ::inner::InnerFriendsvr_Fromscene_OpenFunc* _internal_mutable_fromscene_open();
  public:
  void unsafe_arena_set_allocated_fromscene_open(
      ::inner::InnerFriendsvr_Fromscene_OpenFunc* fromscene_open);
  ::inner::InnerFriendsvr_Fromscene_OpenFunc* unsafe_arena_release_fromscene_open();

  // .inner.InnerFriendsvr_Fromscene_Request fromscene_request = 105;
  bool has_fromscene_request() const;
  private:
  bool _internal_has_fromscene_request() const;
  public:
  void clear_fromscene_request();
  const ::inner::InnerFriendsvr_Fromscene_Request& fromscene_request() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendsvr_Fromscene_Request* release_fromscene_request();
  ::inner::InnerFriendsvr_Fromscene_Request* mutable_fromscene_request();
  void set_allocated_fromscene_request(::inner::InnerFriendsvr_Fromscene_Request* fromscene_request);
  private:
  const ::inner::InnerFriendsvr_Fromscene_Request& _internal_fromscene_request() const;
  ::inner::InnerFriendsvr_Fromscene_Request* _internal_mutable_fromscene_request();
  public:
  void unsafe_arena_set_allocated_fromscene_request(
      ::inner::InnerFriendsvr_Fromscene_Request* fromscene_request);
  ::inner::InnerFriendsvr_Fromscene_Request* unsafe_arena_release_fromscene_request();

  // .inner.InnerFriendsvr_Fromscene_Agree fromscene_agree_request = 106;
  bool has_fromscene_agree_request() const;
  private:
  bool _internal_has_fromscene_agree_request() const;
  public:
  void clear_fromscene_agree_request();
  const ::inner::InnerFriendsvr_Fromscene_Agree& fromscene_agree_request() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendsvr_Fromscene_Agree* release_fromscene_agree_request();
  ::inner::InnerFriendsvr_Fromscene_Agree* mutable_fromscene_agree_request();
  void set_allocated_fromscene_agree_request(::inner::InnerFriendsvr_Fromscene_Agree* fromscene_agree_request);
  private:
  const ::inner::InnerFriendsvr_Fromscene_Agree& _internal_fromscene_agree_request() const;
  ::inner::InnerFriendsvr_Fromscene_Agree* _internal_mutable_fromscene_agree_request();
  public:
  void unsafe_arena_set_allocated_fromscene_agree_request(
      ::inner::InnerFriendsvr_Fromscene_Agree* fromscene_agree_request);
  ::inner::InnerFriendsvr_Fromscene_Agree* unsafe_arena_release_fromscene_agree_request();

  // .inner.InnerFriendsvr_Fromscene_Refuse fromscene_refuse_request = 107;
  bool has_fromscene_refuse_request() const;
  private:
  bool _internal_has_fromscene_refuse_request() const;
  public:
  void clear_fromscene_refuse_request();
  const ::inner::InnerFriendsvr_Fromscene_Refuse& fromscene_refuse_request() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendsvr_Fromscene_Refuse* release_fromscene_refuse_request();
  ::inner::InnerFriendsvr_Fromscene_Refuse* mutable_fromscene_refuse_request();
  void set_allocated_fromscene_refuse_request(::inner::InnerFriendsvr_Fromscene_Refuse* fromscene_refuse_request);
  private:
  const ::inner::InnerFriendsvr_Fromscene_Refuse& _internal_fromscene_refuse_request() const;
  ::inner::InnerFriendsvr_Fromscene_Refuse* _internal_mutable_fromscene_refuse_request();
  public:
  void unsafe_arena_set_allocated_fromscene_refuse_request(
      ::inner::InnerFriendsvr_Fromscene_Refuse* fromscene_refuse_request);
  ::inner::InnerFriendsvr_Fromscene_Refuse* unsafe_arena_release_fromscene_refuse_request();

  // .inner.InnerFriendsvr_Fromscene_AgreeAll fromscene_agree_all = 108;
  bool has_fromscene_agree_all() const;
  private:
  bool _internal_has_fromscene_agree_all() const;
  public:
  void clear_fromscene_agree_all();
  const ::inner::InnerFriendsvr_Fromscene_AgreeAll& fromscene_agree_all() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendsvr_Fromscene_AgreeAll* release_fromscene_agree_all();
  ::inner::InnerFriendsvr_Fromscene_AgreeAll* mutable_fromscene_agree_all();
  void set_allocated_fromscene_agree_all(::inner::InnerFriendsvr_Fromscene_AgreeAll* fromscene_agree_all);
  private:
  const ::inner::InnerFriendsvr_Fromscene_AgreeAll& _internal_fromscene_agree_all() const;
  ::inner::InnerFriendsvr_Fromscene_AgreeAll* _internal_mutable_fromscene_agree_all();
  public:
  void unsafe_arena_set_allocated_fromscene_agree_all(
      ::inner::InnerFriendsvr_Fromscene_AgreeAll* fromscene_agree_all);
  ::inner::InnerFriendsvr_Fromscene_AgreeAll* unsafe_arena_release_fromscene_agree_all();

  // .inner.InnerFriendsvr_Fromscene_RefuseAll fromscene_refuse_all = 109;
  bool has_fromscene_refuse_all() const;
  private:
  bool _internal_has_fromscene_refuse_all() const;
  public:
  void clear_fromscene_refuse_all();
  const ::inner::InnerFriendsvr_Fromscene_RefuseAll& fromscene_refuse_all() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendsvr_Fromscene_RefuseAll* release_fromscene_refuse_all();
  ::inner::InnerFriendsvr_Fromscene_RefuseAll* mutable_fromscene_refuse_all();
  void set_allocated_fromscene_refuse_all(::inner::InnerFriendsvr_Fromscene_RefuseAll* fromscene_refuse_all);
  private:
  const ::inner::InnerFriendsvr_Fromscene_RefuseAll& _internal_fromscene_refuse_all() const;
  ::inner::InnerFriendsvr_Fromscene_RefuseAll* _internal_mutable_fromscene_refuse_all();
  public:
  void unsafe_arena_set_allocated_fromscene_refuse_all(
      ::inner::InnerFriendsvr_Fromscene_RefuseAll* fromscene_refuse_all);
  ::inner::InnerFriendsvr_Fromscene_RefuseAll* unsafe_arena_release_fromscene_refuse_all();

  // .inner.InnerFriendsvr_Fromscene_Remove fromscene_remove_friend = 110;
  bool has_fromscene_remove_friend() const;
  private:
  bool _internal_has_fromscene_remove_friend() const;
  public:
  void clear_fromscene_remove_friend();
  const ::inner::InnerFriendsvr_Fromscene_Remove& fromscene_remove_friend() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendsvr_Fromscene_Remove* release_fromscene_remove_friend();
  ::inner::InnerFriendsvr_Fromscene_Remove* mutable_fromscene_remove_friend();
  void set_allocated_fromscene_remove_friend(::inner::InnerFriendsvr_Fromscene_Remove* fromscene_remove_friend);
  private:
  const ::inner::InnerFriendsvr_Fromscene_Remove& _internal_fromscene_remove_friend() const;
  ::inner::InnerFriendsvr_Fromscene_Remove* _internal_mutable_fromscene_remove_friend();
  public:
  void unsafe_arena_set_allocated_fromscene_remove_friend(
      ::inner::InnerFriendsvr_Fromscene_Remove* fromscene_remove_friend);
  ::inner::InnerFriendsvr_Fromscene_Remove* unsafe_arena_release_fromscene_remove_friend();

  // .inner.InnerFriendsvr_Fromscene_Block fromscene_block_someone = 111;
  bool has_fromscene_block_someone() const;
  private:
  bool _internal_has_fromscene_block_someone() const;
  public:
  void clear_fromscene_block_someone();
  const ::inner::InnerFriendsvr_Fromscene_Block& fromscene_block_someone() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendsvr_Fromscene_Block* release_fromscene_block_someone();
  ::inner::InnerFriendsvr_Fromscene_Block* mutable_fromscene_block_someone();
  void set_allocated_fromscene_block_someone(::inner::InnerFriendsvr_Fromscene_Block* fromscene_block_someone);
  private:
  const ::inner::InnerFriendsvr_Fromscene_Block& _internal_fromscene_block_someone() const;
  ::inner::InnerFriendsvr_Fromscene_Block* _internal_mutable_fromscene_block_someone();
  public:
  void unsafe_arena_set_allocated_fromscene_block_someone(
      ::inner::InnerFriendsvr_Fromscene_Block* fromscene_block_someone);
  ::inner::InnerFriendsvr_Fromscene_Block* unsafe_arena_release_fromscene_block_someone();

  // .inner.InnerFriendsvr_Fromscene_Chat fromscene_chat_msg_up = 112;
  bool has_fromscene_chat_msg_up() const;
  private:
  bool _internal_has_fromscene_chat_msg_up() const;
  public:
  void clear_fromscene_chat_msg_up();
  const ::inner::InnerFriendsvr_Fromscene_Chat& fromscene_chat_msg_up() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendsvr_Fromscene_Chat* release_fromscene_chat_msg_up();
  ::inner::InnerFriendsvr_Fromscene_Chat* mutable_fromscene_chat_msg_up();
  void set_allocated_fromscene_chat_msg_up(::inner::InnerFriendsvr_Fromscene_Chat* fromscene_chat_msg_up);
  private:
  const ::inner::InnerFriendsvr_Fromscene_Chat& _internal_fromscene_chat_msg_up() const;
  ::inner::InnerFriendsvr_Fromscene_Chat* _internal_mutable_fromscene_chat_msg_up();
  public:
  void unsafe_arena_set_allocated_fromscene_chat_msg_up(
      ::inner::InnerFriendsvr_Fromscene_Chat* fromscene_chat_msg_up);
  ::inner::InnerFriendsvr_Fromscene_Chat* unsafe_arena_release_fromscene_chat_msg_up();

  // .inner.InnerFriendsvr_Fromscene_Expand fromscene_expand_list = 113;
  bool has_fromscene_expand_list() const;
  private:
  bool _internal_has_fromscene_expand_list() const;
  public:
  void clear_fromscene_expand_list();
  const ::inner::InnerFriendsvr_Fromscene_Expand& fromscene_expand_list() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendsvr_Fromscene_Expand* release_fromscene_expand_list();
  ::inner::InnerFriendsvr_Fromscene_Expand* mutable_fromscene_expand_list();
  void set_allocated_fromscene_expand_list(::inner::InnerFriendsvr_Fromscene_Expand* fromscene_expand_list);
  private:
  const ::inner::InnerFriendsvr_Fromscene_Expand& _internal_fromscene_expand_list() const;
  ::inner::InnerFriendsvr_Fromscene_Expand* _internal_mutable_fromscene_expand_list();
  public:
  void unsafe_arena_set_allocated_fromscene_expand_list(
      ::inner::InnerFriendsvr_Fromscene_Expand* fromscene_expand_list);
  ::inner::InnerFriendsvr_Fromscene_Expand* unsafe_arena_release_fromscene_expand_list();

  // .inner.InnerFriendsvr_Fromscene_Search fromscene_search_role = 114;
  bool has_fromscene_search_role() const;
  private:
  bool _internal_has_fromscene_search_role() const;
  public:
  void clear_fromscene_search_role();
  const ::inner::InnerFriendsvr_Fromscene_Search& fromscene_search_role() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendsvr_Fromscene_Search* release_fromscene_search_role();
  ::inner::InnerFriendsvr_Fromscene_Search* mutable_fromscene_search_role();
  void set_allocated_fromscene_search_role(::inner::InnerFriendsvr_Fromscene_Search* fromscene_search_role);
  private:
  const ::inner::InnerFriendsvr_Fromscene_Search& _internal_fromscene_search_role() const;
  ::inner::InnerFriendsvr_Fromscene_Search* _internal_mutable_fromscene_search_role();
  public:
  void unsafe_arena_set_allocated_fromscene_search_role(
      ::inner::InnerFriendsvr_Fromscene_Search* fromscene_search_role);
  ::inner::InnerFriendsvr_Fromscene_Search* unsafe_arena_release_fromscene_search_role();

  // .inner.InnerFriendsvr_Fromscene_Recommend fromscene_recommend_req = 115;
  bool has_fromscene_recommend_req() const;
  private:
  bool _internal_has_fromscene_recommend_req() const;
  public:
  void clear_fromscene_recommend_req();
  const ::inner::InnerFriendsvr_Fromscene_Recommend& fromscene_recommend_req() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendsvr_Fromscene_Recommend* release_fromscene_recommend_req();
  ::inner::InnerFriendsvr_Fromscene_Recommend* mutable_fromscene_recommend_req();
  void set_allocated_fromscene_recommend_req(::inner::InnerFriendsvr_Fromscene_Recommend* fromscene_recommend_req);
  private:
  const ::inner::InnerFriendsvr_Fromscene_Recommend& _internal_fromscene_recommend_req() const;
  ::inner::InnerFriendsvr_Fromscene_Recommend* _internal_mutable_fromscene_recommend_req();
  public:
  void unsafe_arena_set_allocated_fromscene_recommend_req(
      ::inner::InnerFriendsvr_Fromscene_Recommend* fromscene_recommend_req);
  ::inner::InnerFriendsvr_Fromscene_Recommend* unsafe_arena_release_fromscene_recommend_req();

  // .inner.InnerFriendsvr_Fromscene_Filter fromscene_set_filter = 116;
  bool has_fromscene_set_filter() const;
  private:
  bool _internal_has_fromscene_set_filter() const;
  public:
  void clear_fromscene_set_filter();
  const ::inner::InnerFriendsvr_Fromscene_Filter& fromscene_set_filter() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendsvr_Fromscene_Filter* release_fromscene_set_filter();
  ::inner::InnerFriendsvr_Fromscene_Filter* mutable_fromscene_set_filter();
  void set_allocated_fromscene_set_filter(::inner::InnerFriendsvr_Fromscene_Filter* fromscene_set_filter);
  private:
  const ::inner::InnerFriendsvr_Fromscene_Filter& _internal_fromscene_set_filter() const;
  ::inner::InnerFriendsvr_Fromscene_Filter* _internal_mutable_fromscene_set_filter();
  public:
  void unsafe_arena_set_allocated_fromscene_set_filter(
      ::inner::InnerFriendsvr_Fromscene_Filter* fromscene_set_filter);
  ::inner::InnerFriendsvr_Fromscene_Filter* unsafe_arena_release_fromscene_set_filter();

  // .inner.InnerFriendsvr_Fromscene_Labels fromscene_set_labels = 117;
  bool has_fromscene_set_labels() const;
  private:
  bool _internal_has_fromscene_set_labels() const;
  public:
  void clear_fromscene_set_labels();
  const ::inner::InnerFriendsvr_Fromscene_Labels& fromscene_set_labels() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendsvr_Fromscene_Labels* release_fromscene_set_labels();
  ::inner::InnerFriendsvr_Fromscene_Labels* mutable_fromscene_set_labels();
  void set_allocated_fromscene_set_labels(::inner::InnerFriendsvr_Fromscene_Labels* fromscene_set_labels);
  private:
  const ::inner::InnerFriendsvr_Fromscene_Labels& _internal_fromscene_set_labels() const;
  ::inner::InnerFriendsvr_Fromscene_Labels* _internal_mutable_fromscene_set_labels();
  public:
  void unsafe_arena_set_allocated_fromscene_set_labels(
      ::inner::InnerFriendsvr_Fromscene_Labels* fromscene_set_labels);
  ::inner::InnerFriendsvr_Fromscene_Labels* unsafe_arena_release_fromscene_set_labels();

  // .inner.InnerFriendsvr_Fromscene_SendGift fromscene_send_gift = 118;
  bool has_fromscene_send_gift() const;
  private:
  bool _internal_has_fromscene_send_gift() const;
  public:
  void clear_fromscene_send_gift();
  const ::inner::InnerFriendsvr_Fromscene_SendGift& fromscene_send_gift() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendsvr_Fromscene_SendGift* release_fromscene_send_gift();
  ::inner::InnerFriendsvr_Fromscene_SendGift* mutable_fromscene_send_gift();
  void set_allocated_fromscene_send_gift(::inner::InnerFriendsvr_Fromscene_SendGift* fromscene_send_gift);
  private:
  const ::inner::InnerFriendsvr_Fromscene_SendGift& _internal_fromscene_send_gift() const;
  ::inner::InnerFriendsvr_Fromscene_SendGift* _internal_mutable_fromscene_send_gift();
  public:
  void unsafe_arena_set_allocated_fromscene_send_gift(
      ::inner::InnerFriendsvr_Fromscene_SendGift* fromscene_send_gift);
  ::inner::InnerFriendsvr_Fromscene_SendGift* unsafe_arena_release_fromscene_send_gift();

  // .inner.InnerFriendsvr_Fromscene_ReceiveGift fromscene_receive_gift = 119;
  bool has_fromscene_receive_gift() const;
  private:
  bool _internal_has_fromscene_receive_gift() const;
  public:
  void clear_fromscene_receive_gift();
  const ::inner::InnerFriendsvr_Fromscene_ReceiveGift& fromscene_receive_gift() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendsvr_Fromscene_ReceiveGift* release_fromscene_receive_gift();
  ::inner::InnerFriendsvr_Fromscene_ReceiveGift* mutable_fromscene_receive_gift();
  void set_allocated_fromscene_receive_gift(::inner::InnerFriendsvr_Fromscene_ReceiveGift* fromscene_receive_gift);
  private:
  const ::inner::InnerFriendsvr_Fromscene_ReceiveGift& _internal_fromscene_receive_gift() const;
  ::inner::InnerFriendsvr_Fromscene_ReceiveGift* _internal_mutable_fromscene_receive_gift();
  public:
  void unsafe_arena_set_allocated_fromscene_receive_gift(
      ::inner::InnerFriendsvr_Fromscene_ReceiveGift* fromscene_receive_gift);
  ::inner::InnerFriendsvr_Fromscene_ReceiveGift* unsafe_arena_release_fromscene_receive_gift();

  // .inner.InnerFriendsvr_Fromscene_UserLogin fromscene_userlogin = 120;
  bool has_fromscene_userlogin() const;
  private:
  bool _internal_has_fromscene_userlogin() const;
  public:
  void clear_fromscene_userlogin();
  const ::inner::InnerFriendsvr_Fromscene_UserLogin& fromscene_userlogin() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendsvr_Fromscene_UserLogin* release_fromscene_userlogin();
  ::inner::InnerFriendsvr_Fromscene_UserLogin* mutable_fromscene_userlogin();
  void set_allocated_fromscene_userlogin(::inner::InnerFriendsvr_Fromscene_UserLogin* fromscene_userlogin);
  private:
  const ::inner::InnerFriendsvr_Fromscene_UserLogin& _internal_fromscene_userlogin() const;
  ::inner::InnerFriendsvr_Fromscene_UserLogin* _internal_mutable_fromscene_userlogin();
  public:
  void unsafe_arena_set_allocated_fromscene_userlogin(
      ::inner::InnerFriendsvr_Fromscene_UserLogin* fromscene_userlogin);
  ::inner::InnerFriendsvr_Fromscene_UserLogin* unsafe_arena_release_fromscene_userlogin();

  // .inner.InnerFriendsvr_Fromscene_UserLogout fromscene_userlogout = 121;
  bool has_fromscene_userlogout() const;
  private:
  bool _internal_has_fromscene_userlogout() const;
  public:
  void clear_fromscene_userlogout();
  const ::inner::InnerFriendsvr_Fromscene_UserLogout& fromscene_userlogout() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendsvr_Fromscene_UserLogout* release_fromscene_userlogout();
  ::inner::InnerFriendsvr_Fromscene_UserLogout* mutable_fromscene_userlogout();
  void set_allocated_fromscene_userlogout(::inner::InnerFriendsvr_Fromscene_UserLogout* fromscene_userlogout);
  private:
  const ::inner::InnerFriendsvr_Fromscene_UserLogout& _internal_fromscene_userlogout() const;
  ::inner::InnerFriendsvr_Fromscene_UserLogout* _internal_mutable_fromscene_userlogout();
  public:
  void unsafe_arena_set_allocated_fromscene_userlogout(
      ::inner::InnerFriendsvr_Fromscene_UserLogout* fromscene_userlogout);
  ::inner::InnerFriendsvr_Fromscene_UserLogout* unsafe_arena_release_fromscene_userlogout();

  // .inner.InnerFriendsvr_Fromscene_UserOnline fromscene_useronline = 122;
  bool has_fromscene_useronline() const;
  private:
  bool _internal_has_fromscene_useronline() const;
  public:
  void clear_fromscene_useronline();
  const ::inner::InnerFriendsvr_Fromscene_UserOnline& fromscene_useronline() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendsvr_Fromscene_UserOnline* release_fromscene_useronline();
  ::inner::InnerFriendsvr_Fromscene_UserOnline* mutable_fromscene_useronline();
  void set_allocated_fromscene_useronline(::inner::InnerFriendsvr_Fromscene_UserOnline* fromscene_useronline);
  private:
  const ::inner::InnerFriendsvr_Fromscene_UserOnline& _internal_fromscene_useronline() const;
  ::inner::InnerFriendsvr_Fromscene_UserOnline* _internal_mutable_fromscene_useronline();
  public:
  void unsafe_arena_set_allocated_fromscene_useronline(
      ::inner::InnerFriendsvr_Fromscene_UserOnline* fromscene_useronline);
  ::inner::InnerFriendsvr_Fromscene_UserOnline* unsafe_arena_release_fromscene_useronline();

  // .inner.InnerFriendsvr_Fromscene_UserOffline fromscene_useroffline = 123;
  bool has_fromscene_useroffline() const;
  private:
  bool _internal_has_fromscene_useroffline() const;
  public:
  void clear_fromscene_useroffline();
  const ::inner::InnerFriendsvr_Fromscene_UserOffline& fromscene_useroffline() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendsvr_Fromscene_UserOffline* release_fromscene_useroffline();
  ::inner::InnerFriendsvr_Fromscene_UserOffline* mutable_fromscene_useroffline();
  void set_allocated_fromscene_useroffline(::inner::InnerFriendsvr_Fromscene_UserOffline* fromscene_useroffline);
  private:
  const ::inner::InnerFriendsvr_Fromscene_UserOffline& _internal_fromscene_useroffline() const;
  ::inner::InnerFriendsvr_Fromscene_UserOffline* _internal_mutable_fromscene_useroffline();
  public:
  void unsafe_arena_set_allocated_fromscene_useroffline(
      ::inner::InnerFriendsvr_Fromscene_UserOffline* fromscene_useroffline);
  ::inner::InnerFriendsvr_Fromscene_UserOffline* unsafe_arena_release_fromscene_useroffline();

  // .inner.InnerFriendsvr_Fromscene_RecvMail fromscene_recvmail = 124;
  bool has_fromscene_recvmail() const;
  private:
  bool _internal_has_fromscene_recvmail() const;
  public:
  void clear_fromscene_recvmail();
  const ::inner::InnerFriendsvr_Fromscene_RecvMail& fromscene_recvmail() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendsvr_Fromscene_RecvMail* release_fromscene_recvmail();
  ::inner::InnerFriendsvr_Fromscene_RecvMail* mutable_fromscene_recvmail();
  void set_allocated_fromscene_recvmail(::inner::InnerFriendsvr_Fromscene_RecvMail* fromscene_recvmail);
  private:
  const ::inner::InnerFriendsvr_Fromscene_RecvMail& _internal_fromscene_recvmail() const;
  ::inner::InnerFriendsvr_Fromscene_RecvMail* _internal_mutable_fromscene_recvmail();
  public:
  void unsafe_arena_set_allocated_fromscene_recvmail(
      ::inner::InnerFriendsvr_Fromscene_RecvMail* fromscene_recvmail);
  ::inner::InnerFriendsvr_Fromscene_RecvMail* unsafe_arena_release_fromscene_recvmail();

  // .inner.InnerFriendsvr_Fromscene_ExpiredMail fromscene_expiredmail = 125;
  bool has_fromscene_expiredmail() const;
  private:
  bool _internal_has_fromscene_expiredmail() const;
  public:
  void clear_fromscene_expiredmail();
  const ::inner::InnerFriendsvr_Fromscene_ExpiredMail& fromscene_expiredmail() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendsvr_Fromscene_ExpiredMail* release_fromscene_expiredmail();
  ::inner::InnerFriendsvr_Fromscene_ExpiredMail* mutable_fromscene_expiredmail();
  void set_allocated_fromscene_expiredmail(::inner::InnerFriendsvr_Fromscene_ExpiredMail* fromscene_expiredmail);
  private:
  const ::inner::InnerFriendsvr_Fromscene_ExpiredMail& _internal_fromscene_expiredmail() const;
  ::inner::InnerFriendsvr_Fromscene_ExpiredMail* _internal_mutable_fromscene_expiredmail();
  public:
  void unsafe_arena_set_allocated_fromscene_expiredmail(
      ::inner::InnerFriendsvr_Fromscene_ExpiredMail* fromscene_expiredmail);
  ::inner::InnerFriendsvr_Fromscene_ExpiredMail* unsafe_arena_release_fromscene_expiredmail();

  // .inner.InnerFriendsvr_Fromscene_MailFull fromscene_mailfull = 126;
  bool has_fromscene_mailfull() const;
  private:
  bool _internal_has_fromscene_mailfull() const;
  public:
  void clear_fromscene_mailfull();
  const ::inner::InnerFriendsvr_Fromscene_MailFull& fromscene_mailfull() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendsvr_Fromscene_MailFull* release_fromscene_mailfull();
  ::inner::InnerFriendsvr_Fromscene_MailFull* mutable_fromscene_mailfull();
  void set_allocated_fromscene_mailfull(::inner::InnerFriendsvr_Fromscene_MailFull* fromscene_mailfull);
  private:
  const ::inner::InnerFriendsvr_Fromscene_MailFull& _internal_fromscene_mailfull() const;
  ::inner::InnerFriendsvr_Fromscene_MailFull* _internal_mutable_fromscene_mailfull();
  public:
  void unsafe_arena_set_allocated_fromscene_mailfull(
      ::inner::InnerFriendsvr_Fromscene_MailFull* fromscene_mailfull);
  ::inner::InnerFriendsvr_Fromscene_MailFull* unsafe_arena_release_fromscene_mailfull();

  void clear_Fromscene();
  FromsceneCase Fromscene_case() const;
  // @@protoc_insertion_point(class_scope:inner.InnerFriendsvr)
 private:
  class _Internal;
  void set_has_fromscene_test();
  void set_has_fromscene_gameevent();
  void set_has_fromscene_updateuserinfo();
  void set_has_fromscene_open();
  void set_has_fromscene_request();
  void set_has_fromscene_agree_request();
  void set_has_fromscene_refuse_request();
  void set_has_fromscene_agree_all();
  void set_has_fromscene_refuse_all();
  void set_has_fromscene_remove_friend();
  void set_has_fromscene_block_someone();
  void set_has_fromscene_chat_msg_up();
  void set_has_fromscene_expand_list();
  void set_has_fromscene_search_role();
  void set_has_fromscene_recommend_req();
  void set_has_fromscene_set_filter();
  void set_has_fromscene_set_labels();
  void set_has_fromscene_send_gift();
  void set_has_fromscene_receive_gift();
  void set_has_fromscene_userlogin();
  void set_has_fromscene_userlogout();
  void set_has_fromscene_useronline();
  void set_has_fromscene_useroffline();
  void set_has_fromscene_recvmail();
  void set_has_fromscene_expiredmail();
  void set_has_fromscene_mailfull();

  inline bool has_Fromscene() const;
  inline void clear_has_Fromscene();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t llfromuser_;
  union FromsceneUnion {
    constexpr FromsceneUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::inner::InnerFriendsvr_Fromscene_Test* fromscene_test_;
    ::inner::InnerFriendsvr_Fromscene_GameEvent* fromscene_gameevent_;
    ::inner::InnerFriendsvr_Fromscene_UpdateUserInfo* fromscene_updateuserinfo_;
    ::inner::InnerFriendsvr_Fromscene_OpenFunc* fromscene_open_;
    ::inner::InnerFriendsvr_Fromscene_Request* fromscene_request_;
    ::inner::InnerFriendsvr_Fromscene_Agree* fromscene_agree_request_;
    ::inner::InnerFriendsvr_Fromscene_Refuse* fromscene_refuse_request_;
    ::inner::InnerFriendsvr_Fromscene_AgreeAll* fromscene_agree_all_;
    ::inner::InnerFriendsvr_Fromscene_RefuseAll* fromscene_refuse_all_;
    ::inner::InnerFriendsvr_Fromscene_Remove* fromscene_remove_friend_;
    ::inner::InnerFriendsvr_Fromscene_Block* fromscene_block_someone_;
    ::inner::InnerFriendsvr_Fromscene_Chat* fromscene_chat_msg_up_;
    ::inner::InnerFriendsvr_Fromscene_Expand* fromscene_expand_list_;
    ::inner::InnerFriendsvr_Fromscene_Search* fromscene_search_role_;
    ::inner::InnerFriendsvr_Fromscene_Recommend* fromscene_recommend_req_;
    ::inner::InnerFriendsvr_Fromscene_Filter* fromscene_set_filter_;
    ::inner::InnerFriendsvr_Fromscene_Labels* fromscene_set_labels_;
    ::inner::InnerFriendsvr_Fromscene_SendGift* fromscene_send_gift_;
    ::inner::InnerFriendsvr_Fromscene_ReceiveGift* fromscene_receive_gift_;
    ::inner::InnerFriendsvr_Fromscene_UserLogin* fromscene_userlogin_;
    ::inner::InnerFriendsvr_Fromscene_UserLogout* fromscene_userlogout_;
    ::inner::InnerFriendsvr_Fromscene_UserOnline* fromscene_useronline_;
    ::inner::InnerFriendsvr_Fromscene_UserOffline* fromscene_useroffline_;
    ::inner::InnerFriendsvr_Fromscene_RecvMail* fromscene_recvmail_;
    ::inner::InnerFriendsvr_Fromscene_ExpiredMail* fromscene_expiredmail_;
    ::inner::InnerFriendsvr_Fromscene_MailFull* fromscene_mailfull_;
  } Fromscene_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_friendsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendsvr_Fromscene_Test final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerFriendsvr_Fromscene_Test) */ {
 public:
  inline InnerFriendsvr_Fromscene_Test() : InnerFriendsvr_Fromscene_Test(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerFriendsvr_Fromscene_Test(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendsvr_Fromscene_Test(const InnerFriendsvr_Fromscene_Test& from);
  InnerFriendsvr_Fromscene_Test(InnerFriendsvr_Fromscene_Test&& from) noexcept
    : InnerFriendsvr_Fromscene_Test() {
    *this = ::std::move(from);
  }

  inline InnerFriendsvr_Fromscene_Test& operator=(const InnerFriendsvr_Fromscene_Test& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendsvr_Fromscene_Test& operator=(InnerFriendsvr_Fromscene_Test&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendsvr_Fromscene_Test& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendsvr_Fromscene_Test* internal_default_instance() {
    return reinterpret_cast<const InnerFriendsvr_Fromscene_Test*>(
               &_InnerFriendsvr_Fromscene_Test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InnerFriendsvr_Fromscene_Test& a, InnerFriendsvr_Fromscene_Test& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendsvr_Fromscene_Test* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendsvr_Fromscene_Test* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendsvr_Fromscene_Test* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendsvr_Fromscene_Test>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerFriendsvr_Fromscene_Test& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerFriendsvr_Fromscene_Test& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendsvr_Fromscene_Test";
  }
  protected:
  explicit InnerFriendsvr_Fromscene_Test(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerFriendsvr_Fromscene_Test)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_friendsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendsvr_Fromscene_GameEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerFriendsvr_Fromscene_GameEvent) */ {
 public:
  inline InnerFriendsvr_Fromscene_GameEvent() : InnerFriendsvr_Fromscene_GameEvent(nullptr) {}
  ~InnerFriendsvr_Fromscene_GameEvent() override;
  explicit PROTOBUF_CONSTEXPR InnerFriendsvr_Fromscene_GameEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendsvr_Fromscene_GameEvent(const InnerFriendsvr_Fromscene_GameEvent& from);
  InnerFriendsvr_Fromscene_GameEvent(InnerFriendsvr_Fromscene_GameEvent&& from) noexcept
    : InnerFriendsvr_Fromscene_GameEvent() {
    *this = ::std::move(from);
  }

  inline InnerFriendsvr_Fromscene_GameEvent& operator=(const InnerFriendsvr_Fromscene_GameEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendsvr_Fromscene_GameEvent& operator=(InnerFriendsvr_Fromscene_GameEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendsvr_Fromscene_GameEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendsvr_Fromscene_GameEvent* internal_default_instance() {
    return reinterpret_cast<const InnerFriendsvr_Fromscene_GameEvent*>(
               &_InnerFriendsvr_Fromscene_GameEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InnerFriendsvr_Fromscene_GameEvent& a, InnerFriendsvr_Fromscene_GameEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendsvr_Fromscene_GameEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendsvr_Fromscene_GameEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendsvr_Fromscene_GameEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendsvr_Fromscene_GameEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerFriendsvr_Fromscene_GameEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerFriendsvr_Fromscene_GameEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerFriendsvr_Fromscene_GameEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendsvr_Fromscene_GameEvent";
  }
  protected:
  explicit InnerFriendsvr_Fromscene_GameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOGameEventFieldNumber = 1,
  };
  // .inner.InnerGameEvent oGameEvent = 1;
  bool has_ogameevent() const;
  private:
  bool _internal_has_ogameevent() const;
  public:
  void clear_ogameevent();
  const ::inner::InnerGameEvent& ogameevent() const;
  PROTOBUF_NODISCARD ::inner::InnerGameEvent* release_ogameevent();
  ::inner::InnerGameEvent* mutable_ogameevent();
  void set_allocated_ogameevent(::inner::InnerGameEvent* ogameevent);
  private:
  const ::inner::InnerGameEvent& _internal_ogameevent() const;
  ::inner::InnerGameEvent* _internal_mutable_ogameevent();
  public:
  void unsafe_arena_set_allocated_ogameevent(
      ::inner::InnerGameEvent* ogameevent);
  ::inner::InnerGameEvent* unsafe_arena_release_ogameevent();

  // @@protoc_insertion_point(class_scope:inner.InnerFriendsvr_Fromscene_GameEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::inner::InnerGameEvent* ogameevent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendsvr_Fromscene_UpdateUserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerFriendsvr_Fromscene_UpdateUserInfo) */ {
 public:
  inline InnerFriendsvr_Fromscene_UpdateUserInfo() : InnerFriendsvr_Fromscene_UpdateUserInfo(nullptr) {}
  ~InnerFriendsvr_Fromscene_UpdateUserInfo() override;
  explicit PROTOBUF_CONSTEXPR InnerFriendsvr_Fromscene_UpdateUserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendsvr_Fromscene_UpdateUserInfo(const InnerFriendsvr_Fromscene_UpdateUserInfo& from);
  InnerFriendsvr_Fromscene_UpdateUserInfo(InnerFriendsvr_Fromscene_UpdateUserInfo&& from) noexcept
    : InnerFriendsvr_Fromscene_UpdateUserInfo() {
    *this = ::std::move(from);
  }

  inline InnerFriendsvr_Fromscene_UpdateUserInfo& operator=(const InnerFriendsvr_Fromscene_UpdateUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendsvr_Fromscene_UpdateUserInfo& operator=(InnerFriendsvr_Fromscene_UpdateUserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendsvr_Fromscene_UpdateUserInfo& default_instance() {
    return *internal_default_instance();
  }
  enum OTypeCase {
    kStrNick = 1,
    kUiLevel = 2,
    kLlTeamId = 3,
    OTYPE_NOT_SET = 0,
  };

  static inline const InnerFriendsvr_Fromscene_UpdateUserInfo* internal_default_instance() {
    return reinterpret_cast<const InnerFriendsvr_Fromscene_UpdateUserInfo*>(
               &_InnerFriendsvr_Fromscene_UpdateUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InnerFriendsvr_Fromscene_UpdateUserInfo& a, InnerFriendsvr_Fromscene_UpdateUserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendsvr_Fromscene_UpdateUserInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendsvr_Fromscene_UpdateUserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendsvr_Fromscene_UpdateUserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendsvr_Fromscene_UpdateUserInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerFriendsvr_Fromscene_UpdateUserInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerFriendsvr_Fromscene_UpdateUserInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerFriendsvr_Fromscene_UpdateUserInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendsvr_Fromscene_UpdateUserInfo";
  }
  protected:
  explicit InnerFriendsvr_Fromscene_UpdateUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrNickFieldNumber = 1,
    kUiLevelFieldNumber = 2,
    kLlTeamIdFieldNumber = 3,
  };
  // string strNick = 1;
  bool has_strnick() const;
  private:
  bool _internal_has_strnick() const;
  public:
  void clear_strnick();
  const std::string& strnick() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strnick(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strnick();
  PROTOBUF_NODISCARD std::string* release_strnick();
  void set_allocated_strnick(std::string* strnick);
  private:
  const std::string& _internal_strnick() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strnick(const std::string& value);
  std::string* _internal_mutable_strnick();
  public:

  // uint32 uiLevel = 2;
  bool has_uilevel() const;
  private:
  bool _internal_has_uilevel() const;
  public:
  void clear_uilevel();
  uint32_t uilevel() const;
  void set_uilevel(uint32_t value);
  private:
  uint32_t _internal_uilevel() const;
  void _internal_set_uilevel(uint32_t value);
  public:

  // uint64 llTeamId = 3;
  bool has_llteamid() const;
  private:
  bool _internal_has_llteamid() const;
  public:
  void clear_llteamid();
  uint64_t llteamid() const;
  void set_llteamid(uint64_t value);
  private:
  uint64_t _internal_llteamid() const;
  void _internal_set_llteamid(uint64_t value);
  public:

  void clear_oType();
  OTypeCase oType_case() const;
  // @@protoc_insertion_point(class_scope:inner.InnerFriendsvr_Fromscene_UpdateUserInfo)
 private:
  class _Internal;
  void set_has_strnick();
  void set_has_uilevel();
  void set_has_llteamid();

  inline bool has_oType() const;
  inline void clear_has_oType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union OTypeUnion {
    constexpr OTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strnick_;
    uint32_t uilevel_;
    uint64_t llteamid_;
  } oType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_friendsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendsvr_Fromscene_OpenFunc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerFriendsvr_Fromscene_OpenFunc) */ {
 public:
  inline InnerFriendsvr_Fromscene_OpenFunc() : InnerFriendsvr_Fromscene_OpenFunc(nullptr) {}
  ~InnerFriendsvr_Fromscene_OpenFunc() override;
  explicit PROTOBUF_CONSTEXPR InnerFriendsvr_Fromscene_OpenFunc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendsvr_Fromscene_OpenFunc(const InnerFriendsvr_Fromscene_OpenFunc& from);
  InnerFriendsvr_Fromscene_OpenFunc(InnerFriendsvr_Fromscene_OpenFunc&& from) noexcept
    : InnerFriendsvr_Fromscene_OpenFunc() {
    *this = ::std::move(from);
  }

  inline InnerFriendsvr_Fromscene_OpenFunc& operator=(const InnerFriendsvr_Fromscene_OpenFunc& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendsvr_Fromscene_OpenFunc& operator=(InnerFriendsvr_Fromscene_OpenFunc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendsvr_Fromscene_OpenFunc& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendsvr_Fromscene_OpenFunc* internal_default_instance() {
    return reinterpret_cast<const InnerFriendsvr_Fromscene_OpenFunc*>(
               &_InnerFriendsvr_Fromscene_OpenFunc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InnerFriendsvr_Fromscene_OpenFunc& a, InnerFriendsvr_Fromscene_OpenFunc& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendsvr_Fromscene_OpenFunc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendsvr_Fromscene_OpenFunc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendsvr_Fromscene_OpenFunc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendsvr_Fromscene_OpenFunc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerFriendsvr_Fromscene_OpenFunc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerFriendsvr_Fromscene_OpenFunc& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerFriendsvr_Fromscene_OpenFunc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendsvr_Fromscene_OpenFunc";
  }
  protected:
  explicit InnerFriendsvr_Fromscene_OpenFunc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOInfoFieldNumber = 1,
  };
  // .inner.InnerFriendInfo oInfo = 1;
  bool has_oinfo() const;
  private:
  bool _internal_has_oinfo() const;
  public:
  void clear_oinfo();
  const ::inner::InnerFriendInfo& oinfo() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendInfo* release_oinfo();
  ::inner::InnerFriendInfo* mutable_oinfo();
  void set_allocated_oinfo(::inner::InnerFriendInfo* oinfo);
  private:
  const ::inner::InnerFriendInfo& _internal_oinfo() const;
  ::inner::InnerFriendInfo* _internal_mutable_oinfo();
  public:
  void unsafe_arena_set_allocated_oinfo(
      ::inner::InnerFriendInfo* oinfo);
  ::inner::InnerFriendInfo* unsafe_arena_release_oinfo();

  // @@protoc_insertion_point(class_scope:inner.InnerFriendsvr_Fromscene_OpenFunc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::inner::InnerFriendInfo* oinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendsvr_Fromscene_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerFriendsvr_Fromscene_Request) */ {
 public:
  inline InnerFriendsvr_Fromscene_Request() : InnerFriendsvr_Fromscene_Request(nullptr) {}
  ~InnerFriendsvr_Fromscene_Request() override;
  explicit PROTOBUF_CONSTEXPR InnerFriendsvr_Fromscene_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendsvr_Fromscene_Request(const InnerFriendsvr_Fromscene_Request& from);
  InnerFriendsvr_Fromscene_Request(InnerFriendsvr_Fromscene_Request&& from) noexcept
    : InnerFriendsvr_Fromscene_Request() {
    *this = ::std::move(from);
  }

  inline InnerFriendsvr_Fromscene_Request& operator=(const InnerFriendsvr_Fromscene_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendsvr_Fromscene_Request& operator=(InnerFriendsvr_Fromscene_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendsvr_Fromscene_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendsvr_Fromscene_Request* internal_default_instance() {
    return reinterpret_cast<const InnerFriendsvr_Fromscene_Request*>(
               &_InnerFriendsvr_Fromscene_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InnerFriendsvr_Fromscene_Request& a, InnerFriendsvr_Fromscene_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendsvr_Fromscene_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendsvr_Fromscene_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendsvr_Fromscene_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendsvr_Fromscene_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerFriendsvr_Fromscene_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerFriendsvr_Fromscene_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerFriendsvr_Fromscene_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendsvr_Fromscene_Request";
  }
  protected:
  explicit InnerFriendsvr_Fromscene_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlRoleIdFieldNumber = 1,
  };
  // uint64 llRoleId = 1;
  void clear_llroleid();
  uint64_t llroleid() const;
  void set_llroleid(uint64_t value);
  private:
  uint64_t _internal_llroleid() const;
  void _internal_set_llroleid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerFriendsvr_Fromscene_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t llroleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendsvr_Fromscene_Agree final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerFriendsvr_Fromscene_Agree) */ {
 public:
  inline InnerFriendsvr_Fromscene_Agree() : InnerFriendsvr_Fromscene_Agree(nullptr) {}
  ~InnerFriendsvr_Fromscene_Agree() override;
  explicit PROTOBUF_CONSTEXPR InnerFriendsvr_Fromscene_Agree(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendsvr_Fromscene_Agree(const InnerFriendsvr_Fromscene_Agree& from);
  InnerFriendsvr_Fromscene_Agree(InnerFriendsvr_Fromscene_Agree&& from) noexcept
    : InnerFriendsvr_Fromscene_Agree() {
    *this = ::std::move(from);
  }

  inline InnerFriendsvr_Fromscene_Agree& operator=(const InnerFriendsvr_Fromscene_Agree& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendsvr_Fromscene_Agree& operator=(InnerFriendsvr_Fromscene_Agree&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendsvr_Fromscene_Agree& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendsvr_Fromscene_Agree* internal_default_instance() {
    return reinterpret_cast<const InnerFriendsvr_Fromscene_Agree*>(
               &_InnerFriendsvr_Fromscene_Agree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(InnerFriendsvr_Fromscene_Agree& a, InnerFriendsvr_Fromscene_Agree& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendsvr_Fromscene_Agree* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendsvr_Fromscene_Agree* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendsvr_Fromscene_Agree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendsvr_Fromscene_Agree>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerFriendsvr_Fromscene_Agree& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerFriendsvr_Fromscene_Agree& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerFriendsvr_Fromscene_Agree* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendsvr_Fromscene_Agree";
  }
  protected:
  explicit InnerFriendsvr_Fromscene_Agree(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlRoleIdFieldNumber = 1,
  };
  // uint64 llRoleId = 1;
  void clear_llroleid();
  uint64_t llroleid() const;
  void set_llroleid(uint64_t value);
  private:
  uint64_t _internal_llroleid() const;
  void _internal_set_llroleid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerFriendsvr_Fromscene_Agree)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t llroleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendsvr_Fromscene_Refuse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerFriendsvr_Fromscene_Refuse) */ {
 public:
  inline InnerFriendsvr_Fromscene_Refuse() : InnerFriendsvr_Fromscene_Refuse(nullptr) {}
  ~InnerFriendsvr_Fromscene_Refuse() override;
  explicit PROTOBUF_CONSTEXPR InnerFriendsvr_Fromscene_Refuse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendsvr_Fromscene_Refuse(const InnerFriendsvr_Fromscene_Refuse& from);
  InnerFriendsvr_Fromscene_Refuse(InnerFriendsvr_Fromscene_Refuse&& from) noexcept
    : InnerFriendsvr_Fromscene_Refuse() {
    *this = ::std::move(from);
  }

  inline InnerFriendsvr_Fromscene_Refuse& operator=(const InnerFriendsvr_Fromscene_Refuse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendsvr_Fromscene_Refuse& operator=(InnerFriendsvr_Fromscene_Refuse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendsvr_Fromscene_Refuse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendsvr_Fromscene_Refuse* internal_default_instance() {
    return reinterpret_cast<const InnerFriendsvr_Fromscene_Refuse*>(
               &_InnerFriendsvr_Fromscene_Refuse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(InnerFriendsvr_Fromscene_Refuse& a, InnerFriendsvr_Fromscene_Refuse& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendsvr_Fromscene_Refuse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendsvr_Fromscene_Refuse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendsvr_Fromscene_Refuse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendsvr_Fromscene_Refuse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerFriendsvr_Fromscene_Refuse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerFriendsvr_Fromscene_Refuse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerFriendsvr_Fromscene_Refuse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendsvr_Fromscene_Refuse";
  }
  protected:
  explicit InnerFriendsvr_Fromscene_Refuse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlRoleIdFieldNumber = 1,
  };
  // uint64 llRoleId = 1;
  void clear_llroleid();
  uint64_t llroleid() const;
  void set_llroleid(uint64_t value);
  private:
  uint64_t _internal_llroleid() const;
  void _internal_set_llroleid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerFriendsvr_Fromscene_Refuse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t llroleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendsvr_Fromscene_AgreeAll final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerFriendsvr_Fromscene_AgreeAll) */ {
 public:
  inline InnerFriendsvr_Fromscene_AgreeAll() : InnerFriendsvr_Fromscene_AgreeAll(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerFriendsvr_Fromscene_AgreeAll(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendsvr_Fromscene_AgreeAll(const InnerFriendsvr_Fromscene_AgreeAll& from);
  InnerFriendsvr_Fromscene_AgreeAll(InnerFriendsvr_Fromscene_AgreeAll&& from) noexcept
    : InnerFriendsvr_Fromscene_AgreeAll() {
    *this = ::std::move(from);
  }

  inline InnerFriendsvr_Fromscene_AgreeAll& operator=(const InnerFriendsvr_Fromscene_AgreeAll& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendsvr_Fromscene_AgreeAll& operator=(InnerFriendsvr_Fromscene_AgreeAll&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendsvr_Fromscene_AgreeAll& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendsvr_Fromscene_AgreeAll* internal_default_instance() {
    return reinterpret_cast<const InnerFriendsvr_Fromscene_AgreeAll*>(
               &_InnerFriendsvr_Fromscene_AgreeAll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(InnerFriendsvr_Fromscene_AgreeAll& a, InnerFriendsvr_Fromscene_AgreeAll& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendsvr_Fromscene_AgreeAll* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendsvr_Fromscene_AgreeAll* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendsvr_Fromscene_AgreeAll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendsvr_Fromscene_AgreeAll>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerFriendsvr_Fromscene_AgreeAll& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerFriendsvr_Fromscene_AgreeAll& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendsvr_Fromscene_AgreeAll";
  }
  protected:
  explicit InnerFriendsvr_Fromscene_AgreeAll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerFriendsvr_Fromscene_AgreeAll)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_friendsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendsvr_Fromscene_RefuseAll final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerFriendsvr_Fromscene_RefuseAll) */ {
 public:
  inline InnerFriendsvr_Fromscene_RefuseAll() : InnerFriendsvr_Fromscene_RefuseAll(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerFriendsvr_Fromscene_RefuseAll(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendsvr_Fromscene_RefuseAll(const InnerFriendsvr_Fromscene_RefuseAll& from);
  InnerFriendsvr_Fromscene_RefuseAll(InnerFriendsvr_Fromscene_RefuseAll&& from) noexcept
    : InnerFriendsvr_Fromscene_RefuseAll() {
    *this = ::std::move(from);
  }

  inline InnerFriendsvr_Fromscene_RefuseAll& operator=(const InnerFriendsvr_Fromscene_RefuseAll& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendsvr_Fromscene_RefuseAll& operator=(InnerFriendsvr_Fromscene_RefuseAll&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendsvr_Fromscene_RefuseAll& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendsvr_Fromscene_RefuseAll* internal_default_instance() {
    return reinterpret_cast<const InnerFriendsvr_Fromscene_RefuseAll*>(
               &_InnerFriendsvr_Fromscene_RefuseAll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(InnerFriendsvr_Fromscene_RefuseAll& a, InnerFriendsvr_Fromscene_RefuseAll& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendsvr_Fromscene_RefuseAll* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendsvr_Fromscene_RefuseAll* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendsvr_Fromscene_RefuseAll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendsvr_Fromscene_RefuseAll>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerFriendsvr_Fromscene_RefuseAll& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerFriendsvr_Fromscene_RefuseAll& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendsvr_Fromscene_RefuseAll";
  }
  protected:
  explicit InnerFriendsvr_Fromscene_RefuseAll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerFriendsvr_Fromscene_RefuseAll)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_friendsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendsvr_Fromscene_Remove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerFriendsvr_Fromscene_Remove) */ {
 public:
  inline InnerFriendsvr_Fromscene_Remove() : InnerFriendsvr_Fromscene_Remove(nullptr) {}
  ~InnerFriendsvr_Fromscene_Remove() override;
  explicit PROTOBUF_CONSTEXPR InnerFriendsvr_Fromscene_Remove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendsvr_Fromscene_Remove(const InnerFriendsvr_Fromscene_Remove& from);
  InnerFriendsvr_Fromscene_Remove(InnerFriendsvr_Fromscene_Remove&& from) noexcept
    : InnerFriendsvr_Fromscene_Remove() {
    *this = ::std::move(from);
  }

  inline InnerFriendsvr_Fromscene_Remove& operator=(const InnerFriendsvr_Fromscene_Remove& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendsvr_Fromscene_Remove& operator=(InnerFriendsvr_Fromscene_Remove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendsvr_Fromscene_Remove& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendsvr_Fromscene_Remove* internal_default_instance() {
    return reinterpret_cast<const InnerFriendsvr_Fromscene_Remove*>(
               &_InnerFriendsvr_Fromscene_Remove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(InnerFriendsvr_Fromscene_Remove& a, InnerFriendsvr_Fromscene_Remove& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendsvr_Fromscene_Remove* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendsvr_Fromscene_Remove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendsvr_Fromscene_Remove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendsvr_Fromscene_Remove>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerFriendsvr_Fromscene_Remove& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerFriendsvr_Fromscene_Remove& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerFriendsvr_Fromscene_Remove* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendsvr_Fromscene_Remove";
  }
  protected:
  explicit InnerFriendsvr_Fromscene_Remove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlRoleIdFieldNumber = 1,
  };
  // uint64 llRoleId = 1;
  void clear_llroleid();
  uint64_t llroleid() const;
  void set_llroleid(uint64_t value);
  private:
  uint64_t _internal_llroleid() const;
  void _internal_set_llroleid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerFriendsvr_Fromscene_Remove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t llroleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendsvr_Fromscene_Block final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerFriendsvr_Fromscene_Block) */ {
 public:
  inline InnerFriendsvr_Fromscene_Block() : InnerFriendsvr_Fromscene_Block(nullptr) {}
  ~InnerFriendsvr_Fromscene_Block() override;
  explicit PROTOBUF_CONSTEXPR InnerFriendsvr_Fromscene_Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendsvr_Fromscene_Block(const InnerFriendsvr_Fromscene_Block& from);
  InnerFriendsvr_Fromscene_Block(InnerFriendsvr_Fromscene_Block&& from) noexcept
    : InnerFriendsvr_Fromscene_Block() {
    *this = ::std::move(from);
  }

  inline InnerFriendsvr_Fromscene_Block& operator=(const InnerFriendsvr_Fromscene_Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendsvr_Fromscene_Block& operator=(InnerFriendsvr_Fromscene_Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendsvr_Fromscene_Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendsvr_Fromscene_Block* internal_default_instance() {
    return reinterpret_cast<const InnerFriendsvr_Fromscene_Block*>(
               &_InnerFriendsvr_Fromscene_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(InnerFriendsvr_Fromscene_Block& a, InnerFriendsvr_Fromscene_Block& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendsvr_Fromscene_Block* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendsvr_Fromscene_Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendsvr_Fromscene_Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendsvr_Fromscene_Block>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerFriendsvr_Fromscene_Block& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerFriendsvr_Fromscene_Block& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerFriendsvr_Fromscene_Block* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendsvr_Fromscene_Block";
  }
  protected:
  explicit InnerFriendsvr_Fromscene_Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlRoleIdFieldNumber = 1,
  };
  // uint64 llRoleId = 1;
  void clear_llroleid();
  uint64_t llroleid() const;
  void set_llroleid(uint64_t value);
  private:
  uint64_t _internal_llroleid() const;
  void _internal_set_llroleid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerFriendsvr_Fromscene_Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t llroleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendsvr_Fromscene_Chat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerFriendsvr_Fromscene_Chat) */ {
 public:
  inline InnerFriendsvr_Fromscene_Chat() : InnerFriendsvr_Fromscene_Chat(nullptr) {}
  ~InnerFriendsvr_Fromscene_Chat() override;
  explicit PROTOBUF_CONSTEXPR InnerFriendsvr_Fromscene_Chat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendsvr_Fromscene_Chat(const InnerFriendsvr_Fromscene_Chat& from);
  InnerFriendsvr_Fromscene_Chat(InnerFriendsvr_Fromscene_Chat&& from) noexcept
    : InnerFriendsvr_Fromscene_Chat() {
    *this = ::std::move(from);
  }

  inline InnerFriendsvr_Fromscene_Chat& operator=(const InnerFriendsvr_Fromscene_Chat& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendsvr_Fromscene_Chat& operator=(InnerFriendsvr_Fromscene_Chat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendsvr_Fromscene_Chat& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendsvr_Fromscene_Chat* internal_default_instance() {
    return reinterpret_cast<const InnerFriendsvr_Fromscene_Chat*>(
               &_InnerFriendsvr_Fromscene_Chat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(InnerFriendsvr_Fromscene_Chat& a, InnerFriendsvr_Fromscene_Chat& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendsvr_Fromscene_Chat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendsvr_Fromscene_Chat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendsvr_Fromscene_Chat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendsvr_Fromscene_Chat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerFriendsvr_Fromscene_Chat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerFriendsvr_Fromscene_Chat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerFriendsvr_Fromscene_Chat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendsvr_Fromscene_Chat";
  }
  protected:
  explicit InnerFriendsvr_Fromscene_Chat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOContextFieldNumber = 3,
    kLlRecverFieldNumber = 1,
    kUiChattypeFieldNumber = 2,
  };
  // .common.ChatTypeContextDown oContext = 3;
  bool has_ocontext() const;
  private:
  bool _internal_has_ocontext() const;
  public:
  void clear_ocontext();
  const ::common::ChatTypeContextDown& ocontext() const;
  PROTOBUF_NODISCARD ::common::ChatTypeContextDown* release_ocontext();
  ::common::ChatTypeContextDown* mutable_ocontext();
  void set_allocated_ocontext(::common::ChatTypeContextDown* ocontext);
  private:
  const ::common::ChatTypeContextDown& _internal_ocontext() const;
  ::common::ChatTypeContextDown* _internal_mutable_ocontext();
  public:
  void unsafe_arena_set_allocated_ocontext(
      ::common::ChatTypeContextDown* ocontext);
  ::common::ChatTypeContextDown* unsafe_arena_release_ocontext();

  // uint64 llRecver = 1;
  void clear_llrecver();
  uint64_t llrecver() const;
  void set_llrecver(uint64_t value);
  private:
  uint64_t _internal_llrecver() const;
  void _internal_set_llrecver(uint64_t value);
  public:

  // uint32 uiChattype = 2;
  void clear_uichattype();
  uint32_t uichattype() const;
  void set_uichattype(uint32_t value);
  private:
  uint32_t _internal_uichattype() const;
  void _internal_set_uichattype(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerFriendsvr_Fromscene_Chat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::ChatTypeContextDown* ocontext_;
  uint64_t llrecver_;
  uint32_t uichattype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendsvr_Fromscene_Expand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerFriendsvr_Fromscene_Expand) */ {
 public:
  inline InnerFriendsvr_Fromscene_Expand() : InnerFriendsvr_Fromscene_Expand(nullptr) {}
  ~InnerFriendsvr_Fromscene_Expand() override;
  explicit PROTOBUF_CONSTEXPR InnerFriendsvr_Fromscene_Expand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendsvr_Fromscene_Expand(const InnerFriendsvr_Fromscene_Expand& from);
  InnerFriendsvr_Fromscene_Expand(InnerFriendsvr_Fromscene_Expand&& from) noexcept
    : InnerFriendsvr_Fromscene_Expand() {
    *this = ::std::move(from);
  }

  inline InnerFriendsvr_Fromscene_Expand& operator=(const InnerFriendsvr_Fromscene_Expand& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendsvr_Fromscene_Expand& operator=(InnerFriendsvr_Fromscene_Expand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendsvr_Fromscene_Expand& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendsvr_Fromscene_Expand* internal_default_instance() {
    return reinterpret_cast<const InnerFriendsvr_Fromscene_Expand*>(
               &_InnerFriendsvr_Fromscene_Expand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(InnerFriendsvr_Fromscene_Expand& a, InnerFriendsvr_Fromscene_Expand& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendsvr_Fromscene_Expand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendsvr_Fromscene_Expand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendsvr_Fromscene_Expand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendsvr_Fromscene_Expand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerFriendsvr_Fromscene_Expand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerFriendsvr_Fromscene_Expand& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerFriendsvr_Fromscene_Expand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendsvr_Fromscene_Expand";
  }
  protected:
  explicit InnerFriendsvr_Fromscene_Expand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUiItemIdFieldNumber = 1,
    kBBindFieldNumber = 2,
    kUiAddValueFieldNumber = 3,
  };
  // uint32 uiItemId = 1;
  void clear_uiitemid();
  uint32_t uiitemid() const;
  void set_uiitemid(uint32_t value);
  private:
  uint32_t _internal_uiitemid() const;
  void _internal_set_uiitemid(uint32_t value);
  public:

  // bool bBind = 2;
  void clear_bbind();
  bool bbind() const;
  void set_bbind(bool value);
  private:
  bool _internal_bbind() const;
  void _internal_set_bbind(bool value);
  public:

  // uint32 uiAddValue = 3;
  void clear_uiaddvalue();
  uint32_t uiaddvalue() const;
  void set_uiaddvalue(uint32_t value);
  private:
  uint32_t _internal_uiaddvalue() const;
  void _internal_set_uiaddvalue(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerFriendsvr_Fromscene_Expand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t uiitemid_;
  bool bbind_;
  uint32_t uiaddvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendsvr_Fromscene_Search final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerFriendsvr_Fromscene_Search) */ {
 public:
  inline InnerFriendsvr_Fromscene_Search() : InnerFriendsvr_Fromscene_Search(nullptr) {}
  ~InnerFriendsvr_Fromscene_Search() override;
  explicit PROTOBUF_CONSTEXPR InnerFriendsvr_Fromscene_Search(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendsvr_Fromscene_Search(const InnerFriendsvr_Fromscene_Search& from);
  InnerFriendsvr_Fromscene_Search(InnerFriendsvr_Fromscene_Search&& from) noexcept
    : InnerFriendsvr_Fromscene_Search() {
    *this = ::std::move(from);
  }

  inline InnerFriendsvr_Fromscene_Search& operator=(const InnerFriendsvr_Fromscene_Search& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendsvr_Fromscene_Search& operator=(InnerFriendsvr_Fromscene_Search&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendsvr_Fromscene_Search& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendsvr_Fromscene_Search* internal_default_instance() {
    return reinterpret_cast<const InnerFriendsvr_Fromscene_Search*>(
               &_InnerFriendsvr_Fromscene_Search_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(InnerFriendsvr_Fromscene_Search& a, InnerFriendsvr_Fromscene_Search& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendsvr_Fromscene_Search* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendsvr_Fromscene_Search* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendsvr_Fromscene_Search* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendsvr_Fromscene_Search>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerFriendsvr_Fromscene_Search& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerFriendsvr_Fromscene_Search& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerFriendsvr_Fromscene_Search* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendsvr_Fromscene_Search";
  }
  protected:
  explicit InnerFriendsvr_Fromscene_Search(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrRoleNameFieldNumber = 1,
  };
  // bytes strRoleName = 1;
  void clear_strrolename();
  const std::string& strrolename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strrolename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strrolename();
  PROTOBUF_NODISCARD std::string* release_strrolename();
  void set_allocated_strrolename(std::string* strrolename);
  private:
  const std::string& _internal_strrolename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strrolename(const std::string& value);
  std::string* _internal_mutable_strrolename();
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerFriendsvr_Fromscene_Search)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strrolename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendsvr_Fromscene_Recommend final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerFriendsvr_Fromscene_Recommend) */ {
 public:
  inline InnerFriendsvr_Fromscene_Recommend() : InnerFriendsvr_Fromscene_Recommend(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerFriendsvr_Fromscene_Recommend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendsvr_Fromscene_Recommend(const InnerFriendsvr_Fromscene_Recommend& from);
  InnerFriendsvr_Fromscene_Recommend(InnerFriendsvr_Fromscene_Recommend&& from) noexcept
    : InnerFriendsvr_Fromscene_Recommend() {
    *this = ::std::move(from);
  }

  inline InnerFriendsvr_Fromscene_Recommend& operator=(const InnerFriendsvr_Fromscene_Recommend& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendsvr_Fromscene_Recommend& operator=(InnerFriendsvr_Fromscene_Recommend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendsvr_Fromscene_Recommend& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendsvr_Fromscene_Recommend* internal_default_instance() {
    return reinterpret_cast<const InnerFriendsvr_Fromscene_Recommend*>(
               &_InnerFriendsvr_Fromscene_Recommend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(InnerFriendsvr_Fromscene_Recommend& a, InnerFriendsvr_Fromscene_Recommend& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendsvr_Fromscene_Recommend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendsvr_Fromscene_Recommend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendsvr_Fromscene_Recommend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendsvr_Fromscene_Recommend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerFriendsvr_Fromscene_Recommend& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerFriendsvr_Fromscene_Recommend& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendsvr_Fromscene_Recommend";
  }
  protected:
  explicit InnerFriendsvr_Fromscene_Recommend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerFriendsvr_Fromscene_Recommend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_friendsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendsvr_Fromscene_Filter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerFriendsvr_Fromscene_Filter) */ {
 public:
  inline InnerFriendsvr_Fromscene_Filter() : InnerFriendsvr_Fromscene_Filter(nullptr) {}
  ~InnerFriendsvr_Fromscene_Filter() override;
  explicit PROTOBUF_CONSTEXPR InnerFriendsvr_Fromscene_Filter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendsvr_Fromscene_Filter(const InnerFriendsvr_Fromscene_Filter& from);
  InnerFriendsvr_Fromscene_Filter(InnerFriendsvr_Fromscene_Filter&& from) noexcept
    : InnerFriendsvr_Fromscene_Filter() {
    *this = ::std::move(from);
  }

  inline InnerFriendsvr_Fromscene_Filter& operator=(const InnerFriendsvr_Fromscene_Filter& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendsvr_Fromscene_Filter& operator=(InnerFriendsvr_Fromscene_Filter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendsvr_Fromscene_Filter& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendsvr_Fromscene_Filter* internal_default_instance() {
    return reinterpret_cast<const InnerFriendsvr_Fromscene_Filter*>(
               &_InnerFriendsvr_Fromscene_Filter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(InnerFriendsvr_Fromscene_Filter& a, InnerFriendsvr_Fromscene_Filter& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendsvr_Fromscene_Filter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendsvr_Fromscene_Filter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendsvr_Fromscene_Filter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendsvr_Fromscene_Filter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerFriendsvr_Fromscene_Filter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerFriendsvr_Fromscene_Filter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerFriendsvr_Fromscene_Filter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendsvr_Fromscene_Filter";
  }
  protected:
  explicit InnerFriendsvr_Fromscene_Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBCityFieldNumber = 1,
    kUiSexFieldNumber = 2,
    kUiLabelFieldNumber = 3,
  };
  // bool bCity = 1;
  void clear_bcity();
  bool bcity() const;
  void set_bcity(bool value);
  private:
  bool _internal_bcity() const;
  void _internal_set_bcity(bool value);
  public:

  // uint32 uiSex = 2;
  void clear_uisex();
  uint32_t uisex() const;
  void set_uisex(uint32_t value);
  private:
  uint32_t _internal_uisex() const;
  void _internal_set_uisex(uint32_t value);
  public:

  // uint32 uiLabel = 3;
  void clear_uilabel();
  uint32_t uilabel() const;
  void set_uilabel(uint32_t value);
  private:
  uint32_t _internal_uilabel() const;
  void _internal_set_uilabel(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerFriendsvr_Fromscene_Filter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool bcity_;
  uint32_t uisex_;
  uint32_t uilabel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendsvr_Fromscene_Labels final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerFriendsvr_Fromscene_Labels) */ {
 public:
  inline InnerFriendsvr_Fromscene_Labels() : InnerFriendsvr_Fromscene_Labels(nullptr) {}
  ~InnerFriendsvr_Fromscene_Labels() override;
  explicit PROTOBUF_CONSTEXPR InnerFriendsvr_Fromscene_Labels(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendsvr_Fromscene_Labels(const InnerFriendsvr_Fromscene_Labels& from);
  InnerFriendsvr_Fromscene_Labels(InnerFriendsvr_Fromscene_Labels&& from) noexcept
    : InnerFriendsvr_Fromscene_Labels() {
    *this = ::std::move(from);
  }

  inline InnerFriendsvr_Fromscene_Labels& operator=(const InnerFriendsvr_Fromscene_Labels& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendsvr_Fromscene_Labels& operator=(InnerFriendsvr_Fromscene_Labels&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendsvr_Fromscene_Labels& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendsvr_Fromscene_Labels* internal_default_instance() {
    return reinterpret_cast<const InnerFriendsvr_Fromscene_Labels*>(
               &_InnerFriendsvr_Fromscene_Labels_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(InnerFriendsvr_Fromscene_Labels& a, InnerFriendsvr_Fromscene_Labels& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendsvr_Fromscene_Labels* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendsvr_Fromscene_Labels* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendsvr_Fromscene_Labels* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendsvr_Fromscene_Labels>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerFriendsvr_Fromscene_Labels& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerFriendsvr_Fromscene_Labels& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerFriendsvr_Fromscene_Labels* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendsvr_Fromscene_Labels";
  }
  protected:
  explicit InnerFriendsvr_Fromscene_Labels(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUiCityFieldNumber = 1,
    kBAvailableFieldNumber = 2,
    kUiLabelFieldNumber = 3,
  };
  // uint32 uiCity = 1;
  void clear_uicity();
  uint32_t uicity() const;
  void set_uicity(uint32_t value);
  private:
  uint32_t _internal_uicity() const;
  void _internal_set_uicity(uint32_t value);
  public:

  // bool bAvailable = 2;
  void clear_bavailable();
  bool bavailable() const;
  void set_bavailable(bool value);
  private:
  bool _internal_bavailable() const;
  void _internal_set_bavailable(bool value);
  public:

  // uint32 uiLabel = 3;
  void clear_uilabel();
  uint32_t uilabel() const;
  void set_uilabel(uint32_t value);
  private:
  uint32_t _internal_uilabel() const;
  void _internal_set_uilabel(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerFriendsvr_Fromscene_Labels)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t uicity_;
  bool bavailable_;
  uint32_t uilabel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendsvr_Fromscene_SendGift final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerFriendsvr_Fromscene_SendGift) */ {
 public:
  inline InnerFriendsvr_Fromscene_SendGift() : InnerFriendsvr_Fromscene_SendGift(nullptr) {}
  ~InnerFriendsvr_Fromscene_SendGift() override;
  explicit PROTOBUF_CONSTEXPR InnerFriendsvr_Fromscene_SendGift(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendsvr_Fromscene_SendGift(const InnerFriendsvr_Fromscene_SendGift& from);
  InnerFriendsvr_Fromscene_SendGift(InnerFriendsvr_Fromscene_SendGift&& from) noexcept
    : InnerFriendsvr_Fromscene_SendGift() {
    *this = ::std::move(from);
  }

  inline InnerFriendsvr_Fromscene_SendGift& operator=(const InnerFriendsvr_Fromscene_SendGift& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendsvr_Fromscene_SendGift& operator=(InnerFriendsvr_Fromscene_SendGift&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendsvr_Fromscene_SendGift& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendsvr_Fromscene_SendGift* internal_default_instance() {
    return reinterpret_cast<const InnerFriendsvr_Fromscene_SendGift*>(
               &_InnerFriendsvr_Fromscene_SendGift_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(InnerFriendsvr_Fromscene_SendGift& a, InnerFriendsvr_Fromscene_SendGift& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendsvr_Fromscene_SendGift* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendsvr_Fromscene_SendGift* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendsvr_Fromscene_SendGift* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendsvr_Fromscene_SendGift>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerFriendsvr_Fromscene_SendGift& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerFriendsvr_Fromscene_SendGift& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerFriendsvr_Fromscene_SendGift* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendsvr_Fromscene_SendGift";
  }
  protected:
  explicit InnerFriendsvr_Fromscene_SendGift(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOGiftFieldNumber = 1,
  };
  // .inner.InnerFriendGift oGift = 1;
  bool has_ogift() const;
  private:
  bool _internal_has_ogift() const;
  public:
  void clear_ogift();
  const ::inner::InnerFriendGift& ogift() const;
  PROTOBUF_NODISCARD ::inner::InnerFriendGift* release_ogift();
  ::inner::InnerFriendGift* mutable_ogift();
  void set_allocated_ogift(::inner::InnerFriendGift* ogift);
  private:
  const ::inner::InnerFriendGift& _internal_ogift() const;
  ::inner::InnerFriendGift* _internal_mutable_ogift();
  public:
  void unsafe_arena_set_allocated_ogift(
      ::inner::InnerFriendGift* ogift);
  ::inner::InnerFriendGift* unsafe_arena_release_ogift();

  // @@protoc_insertion_point(class_scope:inner.InnerFriendsvr_Fromscene_SendGift)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::inner::InnerFriendGift* ogift_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendsvr_Fromscene_ReceiveGift final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inner.InnerFriendsvr_Fromscene_ReceiveGift) */ {
 public:
  inline InnerFriendsvr_Fromscene_ReceiveGift() : InnerFriendsvr_Fromscene_ReceiveGift(nullptr) {}
  ~InnerFriendsvr_Fromscene_ReceiveGift() override;
  explicit PROTOBUF_CONSTEXPR InnerFriendsvr_Fromscene_ReceiveGift(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendsvr_Fromscene_ReceiveGift(const InnerFriendsvr_Fromscene_ReceiveGift& from);
  InnerFriendsvr_Fromscene_ReceiveGift(InnerFriendsvr_Fromscene_ReceiveGift&& from) noexcept
    : InnerFriendsvr_Fromscene_ReceiveGift() {
    *this = ::std::move(from);
  }

  inline InnerFriendsvr_Fromscene_ReceiveGift& operator=(const InnerFriendsvr_Fromscene_ReceiveGift& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendsvr_Fromscene_ReceiveGift& operator=(InnerFriendsvr_Fromscene_ReceiveGift&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendsvr_Fromscene_ReceiveGift& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendsvr_Fromscene_ReceiveGift* internal_default_instance() {
    return reinterpret_cast<const InnerFriendsvr_Fromscene_ReceiveGift*>(
               &_InnerFriendsvr_Fromscene_ReceiveGift_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(InnerFriendsvr_Fromscene_ReceiveGift& a, InnerFriendsvr_Fromscene_ReceiveGift& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendsvr_Fromscene_ReceiveGift* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendsvr_Fromscene_ReceiveGift* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendsvr_Fromscene_ReceiveGift* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendsvr_Fromscene_ReceiveGift>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerFriendsvr_Fromscene_ReceiveGift& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerFriendsvr_Fromscene_ReceiveGift& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerFriendsvr_Fromscene_ReceiveGift* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendsvr_Fromscene_ReceiveGift";
  }
  protected:
  explicit InnerFriendsvr_Fromscene_ReceiveGift(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlGiftUidFieldNumber = 1,
  };
  // uint64 llGiftUid = 1;
  void clear_llgiftuid();
  uint64_t llgiftuid() const;
  void set_llgiftuid(uint64_t value);
  private:
  uint64_t _internal_llgiftuid() const;
  void _internal_set_llgiftuid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:inner.InnerFriendsvr_Fromscene_ReceiveGift)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t llgiftuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friendsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendsvr_Fromscene_UserLogin final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerFriendsvr_Fromscene_UserLogin) */ {
 public:
  inline InnerFriendsvr_Fromscene_UserLogin() : InnerFriendsvr_Fromscene_UserLogin(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerFriendsvr_Fromscene_UserLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendsvr_Fromscene_UserLogin(const InnerFriendsvr_Fromscene_UserLogin& from);
  InnerFriendsvr_Fromscene_UserLogin(InnerFriendsvr_Fromscene_UserLogin&& from) noexcept
    : InnerFriendsvr_Fromscene_UserLogin() {
    *this = ::std::move(from);
  }

  inline InnerFriendsvr_Fromscene_UserLogin& operator=(const InnerFriendsvr_Fromscene_UserLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendsvr_Fromscene_UserLogin& operator=(InnerFriendsvr_Fromscene_UserLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendsvr_Fromscene_UserLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendsvr_Fromscene_UserLogin* internal_default_instance() {
    return reinterpret_cast<const InnerFriendsvr_Fromscene_UserLogin*>(
               &_InnerFriendsvr_Fromscene_UserLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(InnerFriendsvr_Fromscene_UserLogin& a, InnerFriendsvr_Fromscene_UserLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendsvr_Fromscene_UserLogin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendsvr_Fromscene_UserLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendsvr_Fromscene_UserLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendsvr_Fromscene_UserLogin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerFriendsvr_Fromscene_UserLogin& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerFriendsvr_Fromscene_UserLogin& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendsvr_Fromscene_UserLogin";
  }
  protected:
  explicit InnerFriendsvr_Fromscene_UserLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerFriendsvr_Fromscene_UserLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_friendsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendsvr_Fromscene_UserLogout final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerFriendsvr_Fromscene_UserLogout) */ {
 public:
  inline InnerFriendsvr_Fromscene_UserLogout() : InnerFriendsvr_Fromscene_UserLogout(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerFriendsvr_Fromscene_UserLogout(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendsvr_Fromscene_UserLogout(const InnerFriendsvr_Fromscene_UserLogout& from);
  InnerFriendsvr_Fromscene_UserLogout(InnerFriendsvr_Fromscene_UserLogout&& from) noexcept
    : InnerFriendsvr_Fromscene_UserLogout() {
    *this = ::std::move(from);
  }

  inline InnerFriendsvr_Fromscene_UserLogout& operator=(const InnerFriendsvr_Fromscene_UserLogout& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendsvr_Fromscene_UserLogout& operator=(InnerFriendsvr_Fromscene_UserLogout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendsvr_Fromscene_UserLogout& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendsvr_Fromscene_UserLogout* internal_default_instance() {
    return reinterpret_cast<const InnerFriendsvr_Fromscene_UserLogout*>(
               &_InnerFriendsvr_Fromscene_UserLogout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(InnerFriendsvr_Fromscene_UserLogout& a, InnerFriendsvr_Fromscene_UserLogout& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendsvr_Fromscene_UserLogout* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendsvr_Fromscene_UserLogout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendsvr_Fromscene_UserLogout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendsvr_Fromscene_UserLogout>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerFriendsvr_Fromscene_UserLogout& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerFriendsvr_Fromscene_UserLogout& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendsvr_Fromscene_UserLogout";
  }
  protected:
  explicit InnerFriendsvr_Fromscene_UserLogout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerFriendsvr_Fromscene_UserLogout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_friendsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendsvr_Fromscene_UserOnline final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerFriendsvr_Fromscene_UserOnline) */ {
 public:
  inline InnerFriendsvr_Fromscene_UserOnline() : InnerFriendsvr_Fromscene_UserOnline(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerFriendsvr_Fromscene_UserOnline(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendsvr_Fromscene_UserOnline(const InnerFriendsvr_Fromscene_UserOnline& from);
  InnerFriendsvr_Fromscene_UserOnline(InnerFriendsvr_Fromscene_UserOnline&& from) noexcept
    : InnerFriendsvr_Fromscene_UserOnline() {
    *this = ::std::move(from);
  }

  inline InnerFriendsvr_Fromscene_UserOnline& operator=(const InnerFriendsvr_Fromscene_UserOnline& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendsvr_Fromscene_UserOnline& operator=(InnerFriendsvr_Fromscene_UserOnline&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendsvr_Fromscene_UserOnline& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendsvr_Fromscene_UserOnline* internal_default_instance() {
    return reinterpret_cast<const InnerFriendsvr_Fromscene_UserOnline*>(
               &_InnerFriendsvr_Fromscene_UserOnline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(InnerFriendsvr_Fromscene_UserOnline& a, InnerFriendsvr_Fromscene_UserOnline& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendsvr_Fromscene_UserOnline* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendsvr_Fromscene_UserOnline* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendsvr_Fromscene_UserOnline* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendsvr_Fromscene_UserOnline>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerFriendsvr_Fromscene_UserOnline& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerFriendsvr_Fromscene_UserOnline& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendsvr_Fromscene_UserOnline";
  }
  protected:
  explicit InnerFriendsvr_Fromscene_UserOnline(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerFriendsvr_Fromscene_UserOnline)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_friendsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendsvr_Fromscene_UserOffline final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerFriendsvr_Fromscene_UserOffline) */ {
 public:
  inline InnerFriendsvr_Fromscene_UserOffline() : InnerFriendsvr_Fromscene_UserOffline(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerFriendsvr_Fromscene_UserOffline(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendsvr_Fromscene_UserOffline(const InnerFriendsvr_Fromscene_UserOffline& from);
  InnerFriendsvr_Fromscene_UserOffline(InnerFriendsvr_Fromscene_UserOffline&& from) noexcept
    : InnerFriendsvr_Fromscene_UserOffline() {
    *this = ::std::move(from);
  }

  inline InnerFriendsvr_Fromscene_UserOffline& operator=(const InnerFriendsvr_Fromscene_UserOffline& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendsvr_Fromscene_UserOffline& operator=(InnerFriendsvr_Fromscene_UserOffline&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendsvr_Fromscene_UserOffline& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendsvr_Fromscene_UserOffline* internal_default_instance() {
    return reinterpret_cast<const InnerFriendsvr_Fromscene_UserOffline*>(
               &_InnerFriendsvr_Fromscene_UserOffline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(InnerFriendsvr_Fromscene_UserOffline& a, InnerFriendsvr_Fromscene_UserOffline& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendsvr_Fromscene_UserOffline* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendsvr_Fromscene_UserOffline* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendsvr_Fromscene_UserOffline* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendsvr_Fromscene_UserOffline>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerFriendsvr_Fromscene_UserOffline& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerFriendsvr_Fromscene_UserOffline& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendsvr_Fromscene_UserOffline";
  }
  protected:
  explicit InnerFriendsvr_Fromscene_UserOffline(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerFriendsvr_Fromscene_UserOffline)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_friendsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendsvr_Fromscene_RecvMail final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerFriendsvr_Fromscene_RecvMail) */ {
 public:
  inline InnerFriendsvr_Fromscene_RecvMail() : InnerFriendsvr_Fromscene_RecvMail(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerFriendsvr_Fromscene_RecvMail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendsvr_Fromscene_RecvMail(const InnerFriendsvr_Fromscene_RecvMail& from);
  InnerFriendsvr_Fromscene_RecvMail(InnerFriendsvr_Fromscene_RecvMail&& from) noexcept
    : InnerFriendsvr_Fromscene_RecvMail() {
    *this = ::std::move(from);
  }

  inline InnerFriendsvr_Fromscene_RecvMail& operator=(const InnerFriendsvr_Fromscene_RecvMail& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendsvr_Fromscene_RecvMail& operator=(InnerFriendsvr_Fromscene_RecvMail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendsvr_Fromscene_RecvMail& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendsvr_Fromscene_RecvMail* internal_default_instance() {
    return reinterpret_cast<const InnerFriendsvr_Fromscene_RecvMail*>(
               &_InnerFriendsvr_Fromscene_RecvMail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(InnerFriendsvr_Fromscene_RecvMail& a, InnerFriendsvr_Fromscene_RecvMail& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendsvr_Fromscene_RecvMail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendsvr_Fromscene_RecvMail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendsvr_Fromscene_RecvMail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendsvr_Fromscene_RecvMail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerFriendsvr_Fromscene_RecvMail& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerFriendsvr_Fromscene_RecvMail& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendsvr_Fromscene_RecvMail";
  }
  protected:
  explicit InnerFriendsvr_Fromscene_RecvMail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerFriendsvr_Fromscene_RecvMail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_friendsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendsvr_Fromscene_ExpiredMail final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerFriendsvr_Fromscene_ExpiredMail) */ {
 public:
  inline InnerFriendsvr_Fromscene_ExpiredMail() : InnerFriendsvr_Fromscene_ExpiredMail(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerFriendsvr_Fromscene_ExpiredMail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendsvr_Fromscene_ExpiredMail(const InnerFriendsvr_Fromscene_ExpiredMail& from);
  InnerFriendsvr_Fromscene_ExpiredMail(InnerFriendsvr_Fromscene_ExpiredMail&& from) noexcept
    : InnerFriendsvr_Fromscene_ExpiredMail() {
    *this = ::std::move(from);
  }

  inline InnerFriendsvr_Fromscene_ExpiredMail& operator=(const InnerFriendsvr_Fromscene_ExpiredMail& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendsvr_Fromscene_ExpiredMail& operator=(InnerFriendsvr_Fromscene_ExpiredMail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendsvr_Fromscene_ExpiredMail& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendsvr_Fromscene_ExpiredMail* internal_default_instance() {
    return reinterpret_cast<const InnerFriendsvr_Fromscene_ExpiredMail*>(
               &_InnerFriendsvr_Fromscene_ExpiredMail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(InnerFriendsvr_Fromscene_ExpiredMail& a, InnerFriendsvr_Fromscene_ExpiredMail& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendsvr_Fromscene_ExpiredMail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendsvr_Fromscene_ExpiredMail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendsvr_Fromscene_ExpiredMail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendsvr_Fromscene_ExpiredMail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerFriendsvr_Fromscene_ExpiredMail& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerFriendsvr_Fromscene_ExpiredMail& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendsvr_Fromscene_ExpiredMail";
  }
  protected:
  explicit InnerFriendsvr_Fromscene_ExpiredMail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerFriendsvr_Fromscene_ExpiredMail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_friendsvr_2eproto;
};
// -------------------------------------------------------------------

class InnerFriendsvr_Fromscene_MailFull final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:inner.InnerFriendsvr_Fromscene_MailFull) */ {
 public:
  inline InnerFriendsvr_Fromscene_MailFull() : InnerFriendsvr_Fromscene_MailFull(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InnerFriendsvr_Fromscene_MailFull(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerFriendsvr_Fromscene_MailFull(const InnerFriendsvr_Fromscene_MailFull& from);
  InnerFriendsvr_Fromscene_MailFull(InnerFriendsvr_Fromscene_MailFull&& from) noexcept
    : InnerFriendsvr_Fromscene_MailFull() {
    *this = ::std::move(from);
  }

  inline InnerFriendsvr_Fromscene_MailFull& operator=(const InnerFriendsvr_Fromscene_MailFull& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerFriendsvr_Fromscene_MailFull& operator=(InnerFriendsvr_Fromscene_MailFull&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerFriendsvr_Fromscene_MailFull& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerFriendsvr_Fromscene_MailFull* internal_default_instance() {
    return reinterpret_cast<const InnerFriendsvr_Fromscene_MailFull*>(
               &_InnerFriendsvr_Fromscene_MailFull_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(InnerFriendsvr_Fromscene_MailFull& a, InnerFriendsvr_Fromscene_MailFull& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerFriendsvr_Fromscene_MailFull* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerFriendsvr_Fromscene_MailFull* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerFriendsvr_Fromscene_MailFull* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerFriendsvr_Fromscene_MailFull>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InnerFriendsvr_Fromscene_MailFull& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InnerFriendsvr_Fromscene_MailFull& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inner.InnerFriendsvr_Fromscene_MailFull";
  }
  protected:
  explicit InnerFriendsvr_Fromscene_MailFull(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:inner.InnerFriendsvr_Fromscene_MailFull)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_friendsvr_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InnerFriendsvr

// uint64 llFromUser = 1;
inline void InnerFriendsvr::clear_llfromuser() {
  llfromuser_ = uint64_t{0u};
}
inline uint64_t InnerFriendsvr::_internal_llfromuser() const {
  return llfromuser_;
}
inline uint64_t InnerFriendsvr::llfromuser() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr.llFromUser)
  return _internal_llfromuser();
}
inline void InnerFriendsvr::_internal_set_llfromuser(uint64_t value) {
  
  llfromuser_ = value;
}
inline void InnerFriendsvr::set_llfromuser(uint64_t value) {
  _internal_set_llfromuser(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendsvr.llFromUser)
}

// .inner.InnerFriendsvr_Fromscene_Test fromscene_test = 101;
inline bool InnerFriendsvr::_internal_has_fromscene_test() const {
  return Fromscene_case() == kFromsceneTest;
}
inline bool InnerFriendsvr::has_fromscene_test() const {
  return _internal_has_fromscene_test();
}
inline void InnerFriendsvr::set_has_fromscene_test() {
  _oneof_case_[0] = kFromsceneTest;
}
inline void InnerFriendsvr::clear_fromscene_test() {
  if (_internal_has_fromscene_test()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_test_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerFriendsvr_Fromscene_Test* InnerFriendsvr::release_fromscene_test() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr.fromscene_test)
  if (_internal_has_fromscene_test()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_Test* temp = Fromscene_.fromscene_test_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_test_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerFriendsvr_Fromscene_Test& InnerFriendsvr::_internal_fromscene_test() const {
  return _internal_has_fromscene_test()
      ? *Fromscene_.fromscene_test_
      : reinterpret_cast< ::inner::InnerFriendsvr_Fromscene_Test&>(::inner::_InnerFriendsvr_Fromscene_Test_default_instance_);
}
inline const ::inner::InnerFriendsvr_Fromscene_Test& InnerFriendsvr::fromscene_test() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr.fromscene_test)
  return _internal_fromscene_test();
}
inline ::inner::InnerFriendsvr_Fromscene_Test* InnerFriendsvr::unsafe_arena_release_fromscene_test() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerFriendsvr.fromscene_test)
  if (_internal_has_fromscene_test()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_Test* temp = Fromscene_.fromscene_test_;
    Fromscene_.fromscene_test_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerFriendsvr::unsafe_arena_set_allocated_fromscene_test(::inner::InnerFriendsvr_Fromscene_Test* fromscene_test) {
  clear_Fromscene();
  if (fromscene_test) {
    set_has_fromscene_test();
    Fromscene_.fromscene_test_ = fromscene_test;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr.fromscene_test)
}
inline ::inner::InnerFriendsvr_Fromscene_Test* InnerFriendsvr::_internal_mutable_fromscene_test() {
  if (!_internal_has_fromscene_test()) {
    clear_Fromscene();
    set_has_fromscene_test();
    Fromscene_.fromscene_test_ = CreateMaybeMessage< ::inner::InnerFriendsvr_Fromscene_Test >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_test_;
}
inline ::inner::InnerFriendsvr_Fromscene_Test* InnerFriendsvr::mutable_fromscene_test() {
  ::inner::InnerFriendsvr_Fromscene_Test* _msg = _internal_mutable_fromscene_test();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr.fromscene_test)
  return _msg;
}

// .inner.InnerFriendsvr_Fromscene_GameEvent fromscene_gameevent = 102;
inline bool InnerFriendsvr::_internal_has_fromscene_gameevent() const {
  return Fromscene_case() == kFromsceneGameevent;
}
inline bool InnerFriendsvr::has_fromscene_gameevent() const {
  return _internal_has_fromscene_gameevent();
}
inline void InnerFriendsvr::set_has_fromscene_gameevent() {
  _oneof_case_[0] = kFromsceneGameevent;
}
inline void InnerFriendsvr::clear_fromscene_gameevent() {
  if (_internal_has_fromscene_gameevent()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_gameevent_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerFriendsvr_Fromscene_GameEvent* InnerFriendsvr::release_fromscene_gameevent() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr.fromscene_gameevent)
  if (_internal_has_fromscene_gameevent()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_GameEvent* temp = Fromscene_.fromscene_gameevent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_gameevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerFriendsvr_Fromscene_GameEvent& InnerFriendsvr::_internal_fromscene_gameevent() const {
  return _internal_has_fromscene_gameevent()
      ? *Fromscene_.fromscene_gameevent_
      : reinterpret_cast< ::inner::InnerFriendsvr_Fromscene_GameEvent&>(::inner::_InnerFriendsvr_Fromscene_GameEvent_default_instance_);
}
inline const ::inner::InnerFriendsvr_Fromscene_GameEvent& InnerFriendsvr::fromscene_gameevent() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr.fromscene_gameevent)
  return _internal_fromscene_gameevent();
}
inline ::inner::InnerFriendsvr_Fromscene_GameEvent* InnerFriendsvr::unsafe_arena_release_fromscene_gameevent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerFriendsvr.fromscene_gameevent)
  if (_internal_has_fromscene_gameevent()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_GameEvent* temp = Fromscene_.fromscene_gameevent_;
    Fromscene_.fromscene_gameevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerFriendsvr::unsafe_arena_set_allocated_fromscene_gameevent(::inner::InnerFriendsvr_Fromscene_GameEvent* fromscene_gameevent) {
  clear_Fromscene();
  if (fromscene_gameevent) {
    set_has_fromscene_gameevent();
    Fromscene_.fromscene_gameevent_ = fromscene_gameevent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr.fromscene_gameevent)
}
inline ::inner::InnerFriendsvr_Fromscene_GameEvent* InnerFriendsvr::_internal_mutable_fromscene_gameevent() {
  if (!_internal_has_fromscene_gameevent()) {
    clear_Fromscene();
    set_has_fromscene_gameevent();
    Fromscene_.fromscene_gameevent_ = CreateMaybeMessage< ::inner::InnerFriendsvr_Fromscene_GameEvent >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_gameevent_;
}
inline ::inner::InnerFriendsvr_Fromscene_GameEvent* InnerFriendsvr::mutable_fromscene_gameevent() {
  ::inner::InnerFriendsvr_Fromscene_GameEvent* _msg = _internal_mutable_fromscene_gameevent();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr.fromscene_gameevent)
  return _msg;
}

// .inner.InnerFriendsvr_Fromscene_UpdateUserInfo fromscene_updateuserinfo = 103;
inline bool InnerFriendsvr::_internal_has_fromscene_updateuserinfo() const {
  return Fromscene_case() == kFromsceneUpdateuserinfo;
}
inline bool InnerFriendsvr::has_fromscene_updateuserinfo() const {
  return _internal_has_fromscene_updateuserinfo();
}
inline void InnerFriendsvr::set_has_fromscene_updateuserinfo() {
  _oneof_case_[0] = kFromsceneUpdateuserinfo;
}
inline void InnerFriendsvr::clear_fromscene_updateuserinfo() {
  if (_internal_has_fromscene_updateuserinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_updateuserinfo_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerFriendsvr_Fromscene_UpdateUserInfo* InnerFriendsvr::release_fromscene_updateuserinfo() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr.fromscene_updateuserinfo)
  if (_internal_has_fromscene_updateuserinfo()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_UpdateUserInfo* temp = Fromscene_.fromscene_updateuserinfo_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_updateuserinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerFriendsvr_Fromscene_UpdateUserInfo& InnerFriendsvr::_internal_fromscene_updateuserinfo() const {
  return _internal_has_fromscene_updateuserinfo()
      ? *Fromscene_.fromscene_updateuserinfo_
      : reinterpret_cast< ::inner::InnerFriendsvr_Fromscene_UpdateUserInfo&>(::inner::_InnerFriendsvr_Fromscene_UpdateUserInfo_default_instance_);
}
inline const ::inner::InnerFriendsvr_Fromscene_UpdateUserInfo& InnerFriendsvr::fromscene_updateuserinfo() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr.fromscene_updateuserinfo)
  return _internal_fromscene_updateuserinfo();
}
inline ::inner::InnerFriendsvr_Fromscene_UpdateUserInfo* InnerFriendsvr::unsafe_arena_release_fromscene_updateuserinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerFriendsvr.fromscene_updateuserinfo)
  if (_internal_has_fromscene_updateuserinfo()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_UpdateUserInfo* temp = Fromscene_.fromscene_updateuserinfo_;
    Fromscene_.fromscene_updateuserinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerFriendsvr::unsafe_arena_set_allocated_fromscene_updateuserinfo(::inner::InnerFriendsvr_Fromscene_UpdateUserInfo* fromscene_updateuserinfo) {
  clear_Fromscene();
  if (fromscene_updateuserinfo) {
    set_has_fromscene_updateuserinfo();
    Fromscene_.fromscene_updateuserinfo_ = fromscene_updateuserinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr.fromscene_updateuserinfo)
}
inline ::inner::InnerFriendsvr_Fromscene_UpdateUserInfo* InnerFriendsvr::_internal_mutable_fromscene_updateuserinfo() {
  if (!_internal_has_fromscene_updateuserinfo()) {
    clear_Fromscene();
    set_has_fromscene_updateuserinfo();
    Fromscene_.fromscene_updateuserinfo_ = CreateMaybeMessage< ::inner::InnerFriendsvr_Fromscene_UpdateUserInfo >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_updateuserinfo_;
}
inline ::inner::InnerFriendsvr_Fromscene_UpdateUserInfo* InnerFriendsvr::mutable_fromscene_updateuserinfo() {
  ::inner::InnerFriendsvr_Fromscene_UpdateUserInfo* _msg = _internal_mutable_fromscene_updateuserinfo();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr.fromscene_updateuserinfo)
  return _msg;
}

// .inner.InnerFriendsvr_Fromscene_OpenFunc fromscene_open = 104;
inline bool InnerFriendsvr::_internal_has_fromscene_open() const {
  return Fromscene_case() == kFromsceneOpen;
}
inline bool InnerFriendsvr::has_fromscene_open() const {
  return _internal_has_fromscene_open();
}
inline void InnerFriendsvr::set_has_fromscene_open() {
  _oneof_case_[0] = kFromsceneOpen;
}
inline void InnerFriendsvr::clear_fromscene_open() {
  if (_internal_has_fromscene_open()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_open_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerFriendsvr_Fromscene_OpenFunc* InnerFriendsvr::release_fromscene_open() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr.fromscene_open)
  if (_internal_has_fromscene_open()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_OpenFunc* temp = Fromscene_.fromscene_open_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_open_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerFriendsvr_Fromscene_OpenFunc& InnerFriendsvr::_internal_fromscene_open() const {
  return _internal_has_fromscene_open()
      ? *Fromscene_.fromscene_open_
      : reinterpret_cast< ::inner::InnerFriendsvr_Fromscene_OpenFunc&>(::inner::_InnerFriendsvr_Fromscene_OpenFunc_default_instance_);
}
inline const ::inner::InnerFriendsvr_Fromscene_OpenFunc& InnerFriendsvr::fromscene_open() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr.fromscene_open)
  return _internal_fromscene_open();
}
inline ::inner::InnerFriendsvr_Fromscene_OpenFunc* InnerFriendsvr::unsafe_arena_release_fromscene_open() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerFriendsvr.fromscene_open)
  if (_internal_has_fromscene_open()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_OpenFunc* temp = Fromscene_.fromscene_open_;
    Fromscene_.fromscene_open_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerFriendsvr::unsafe_arena_set_allocated_fromscene_open(::inner::InnerFriendsvr_Fromscene_OpenFunc* fromscene_open) {
  clear_Fromscene();
  if (fromscene_open) {
    set_has_fromscene_open();
    Fromscene_.fromscene_open_ = fromscene_open;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr.fromscene_open)
}
inline ::inner::InnerFriendsvr_Fromscene_OpenFunc* InnerFriendsvr::_internal_mutable_fromscene_open() {
  if (!_internal_has_fromscene_open()) {
    clear_Fromscene();
    set_has_fromscene_open();
    Fromscene_.fromscene_open_ = CreateMaybeMessage< ::inner::InnerFriendsvr_Fromscene_OpenFunc >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_open_;
}
inline ::inner::InnerFriendsvr_Fromscene_OpenFunc* InnerFriendsvr::mutable_fromscene_open() {
  ::inner::InnerFriendsvr_Fromscene_OpenFunc* _msg = _internal_mutable_fromscene_open();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr.fromscene_open)
  return _msg;
}

// .inner.InnerFriendsvr_Fromscene_Request fromscene_request = 105;
inline bool InnerFriendsvr::_internal_has_fromscene_request() const {
  return Fromscene_case() == kFromsceneRequest;
}
inline bool InnerFriendsvr::has_fromscene_request() const {
  return _internal_has_fromscene_request();
}
inline void InnerFriendsvr::set_has_fromscene_request() {
  _oneof_case_[0] = kFromsceneRequest;
}
inline void InnerFriendsvr::clear_fromscene_request() {
  if (_internal_has_fromscene_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_request_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerFriendsvr_Fromscene_Request* InnerFriendsvr::release_fromscene_request() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr.fromscene_request)
  if (_internal_has_fromscene_request()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_Request* temp = Fromscene_.fromscene_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerFriendsvr_Fromscene_Request& InnerFriendsvr::_internal_fromscene_request() const {
  return _internal_has_fromscene_request()
      ? *Fromscene_.fromscene_request_
      : reinterpret_cast< ::inner::InnerFriendsvr_Fromscene_Request&>(::inner::_InnerFriendsvr_Fromscene_Request_default_instance_);
}
inline const ::inner::InnerFriendsvr_Fromscene_Request& InnerFriendsvr::fromscene_request() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr.fromscene_request)
  return _internal_fromscene_request();
}
inline ::inner::InnerFriendsvr_Fromscene_Request* InnerFriendsvr::unsafe_arena_release_fromscene_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerFriendsvr.fromscene_request)
  if (_internal_has_fromscene_request()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_Request* temp = Fromscene_.fromscene_request_;
    Fromscene_.fromscene_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerFriendsvr::unsafe_arena_set_allocated_fromscene_request(::inner::InnerFriendsvr_Fromscene_Request* fromscene_request) {
  clear_Fromscene();
  if (fromscene_request) {
    set_has_fromscene_request();
    Fromscene_.fromscene_request_ = fromscene_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr.fromscene_request)
}
inline ::inner::InnerFriendsvr_Fromscene_Request* InnerFriendsvr::_internal_mutable_fromscene_request() {
  if (!_internal_has_fromscene_request()) {
    clear_Fromscene();
    set_has_fromscene_request();
    Fromscene_.fromscene_request_ = CreateMaybeMessage< ::inner::InnerFriendsvr_Fromscene_Request >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_request_;
}
inline ::inner::InnerFriendsvr_Fromscene_Request* InnerFriendsvr::mutable_fromscene_request() {
  ::inner::InnerFriendsvr_Fromscene_Request* _msg = _internal_mutable_fromscene_request();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr.fromscene_request)
  return _msg;
}

// .inner.InnerFriendsvr_Fromscene_Agree fromscene_agree_request = 106;
inline bool InnerFriendsvr::_internal_has_fromscene_agree_request() const {
  return Fromscene_case() == kFromsceneAgreeRequest;
}
inline bool InnerFriendsvr::has_fromscene_agree_request() const {
  return _internal_has_fromscene_agree_request();
}
inline void InnerFriendsvr::set_has_fromscene_agree_request() {
  _oneof_case_[0] = kFromsceneAgreeRequest;
}
inline void InnerFriendsvr::clear_fromscene_agree_request() {
  if (_internal_has_fromscene_agree_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_agree_request_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerFriendsvr_Fromscene_Agree* InnerFriendsvr::release_fromscene_agree_request() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr.fromscene_agree_request)
  if (_internal_has_fromscene_agree_request()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_Agree* temp = Fromscene_.fromscene_agree_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_agree_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerFriendsvr_Fromscene_Agree& InnerFriendsvr::_internal_fromscene_agree_request() const {
  return _internal_has_fromscene_agree_request()
      ? *Fromscene_.fromscene_agree_request_
      : reinterpret_cast< ::inner::InnerFriendsvr_Fromscene_Agree&>(::inner::_InnerFriendsvr_Fromscene_Agree_default_instance_);
}
inline const ::inner::InnerFriendsvr_Fromscene_Agree& InnerFriendsvr::fromscene_agree_request() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr.fromscene_agree_request)
  return _internal_fromscene_agree_request();
}
inline ::inner::InnerFriendsvr_Fromscene_Agree* InnerFriendsvr::unsafe_arena_release_fromscene_agree_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerFriendsvr.fromscene_agree_request)
  if (_internal_has_fromscene_agree_request()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_Agree* temp = Fromscene_.fromscene_agree_request_;
    Fromscene_.fromscene_agree_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerFriendsvr::unsafe_arena_set_allocated_fromscene_agree_request(::inner::InnerFriendsvr_Fromscene_Agree* fromscene_agree_request) {
  clear_Fromscene();
  if (fromscene_agree_request) {
    set_has_fromscene_agree_request();
    Fromscene_.fromscene_agree_request_ = fromscene_agree_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr.fromscene_agree_request)
}
inline ::inner::InnerFriendsvr_Fromscene_Agree* InnerFriendsvr::_internal_mutable_fromscene_agree_request() {
  if (!_internal_has_fromscene_agree_request()) {
    clear_Fromscene();
    set_has_fromscene_agree_request();
    Fromscene_.fromscene_agree_request_ = CreateMaybeMessage< ::inner::InnerFriendsvr_Fromscene_Agree >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_agree_request_;
}
inline ::inner::InnerFriendsvr_Fromscene_Agree* InnerFriendsvr::mutable_fromscene_agree_request() {
  ::inner::InnerFriendsvr_Fromscene_Agree* _msg = _internal_mutable_fromscene_agree_request();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr.fromscene_agree_request)
  return _msg;
}

// .inner.InnerFriendsvr_Fromscene_Refuse fromscene_refuse_request = 107;
inline bool InnerFriendsvr::_internal_has_fromscene_refuse_request() const {
  return Fromscene_case() == kFromsceneRefuseRequest;
}
inline bool InnerFriendsvr::has_fromscene_refuse_request() const {
  return _internal_has_fromscene_refuse_request();
}
inline void InnerFriendsvr::set_has_fromscene_refuse_request() {
  _oneof_case_[0] = kFromsceneRefuseRequest;
}
inline void InnerFriendsvr::clear_fromscene_refuse_request() {
  if (_internal_has_fromscene_refuse_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_refuse_request_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerFriendsvr_Fromscene_Refuse* InnerFriendsvr::release_fromscene_refuse_request() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr.fromscene_refuse_request)
  if (_internal_has_fromscene_refuse_request()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_Refuse* temp = Fromscene_.fromscene_refuse_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_refuse_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerFriendsvr_Fromscene_Refuse& InnerFriendsvr::_internal_fromscene_refuse_request() const {
  return _internal_has_fromscene_refuse_request()
      ? *Fromscene_.fromscene_refuse_request_
      : reinterpret_cast< ::inner::InnerFriendsvr_Fromscene_Refuse&>(::inner::_InnerFriendsvr_Fromscene_Refuse_default_instance_);
}
inline const ::inner::InnerFriendsvr_Fromscene_Refuse& InnerFriendsvr::fromscene_refuse_request() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr.fromscene_refuse_request)
  return _internal_fromscene_refuse_request();
}
inline ::inner::InnerFriendsvr_Fromscene_Refuse* InnerFriendsvr::unsafe_arena_release_fromscene_refuse_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerFriendsvr.fromscene_refuse_request)
  if (_internal_has_fromscene_refuse_request()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_Refuse* temp = Fromscene_.fromscene_refuse_request_;
    Fromscene_.fromscene_refuse_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerFriendsvr::unsafe_arena_set_allocated_fromscene_refuse_request(::inner::InnerFriendsvr_Fromscene_Refuse* fromscene_refuse_request) {
  clear_Fromscene();
  if (fromscene_refuse_request) {
    set_has_fromscene_refuse_request();
    Fromscene_.fromscene_refuse_request_ = fromscene_refuse_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr.fromscene_refuse_request)
}
inline ::inner::InnerFriendsvr_Fromscene_Refuse* InnerFriendsvr::_internal_mutable_fromscene_refuse_request() {
  if (!_internal_has_fromscene_refuse_request()) {
    clear_Fromscene();
    set_has_fromscene_refuse_request();
    Fromscene_.fromscene_refuse_request_ = CreateMaybeMessage< ::inner::InnerFriendsvr_Fromscene_Refuse >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_refuse_request_;
}
inline ::inner::InnerFriendsvr_Fromscene_Refuse* InnerFriendsvr::mutable_fromscene_refuse_request() {
  ::inner::InnerFriendsvr_Fromscene_Refuse* _msg = _internal_mutable_fromscene_refuse_request();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr.fromscene_refuse_request)
  return _msg;
}

// .inner.InnerFriendsvr_Fromscene_AgreeAll fromscene_agree_all = 108;
inline bool InnerFriendsvr::_internal_has_fromscene_agree_all() const {
  return Fromscene_case() == kFromsceneAgreeAll;
}
inline bool InnerFriendsvr::has_fromscene_agree_all() const {
  return _internal_has_fromscene_agree_all();
}
inline void InnerFriendsvr::set_has_fromscene_agree_all() {
  _oneof_case_[0] = kFromsceneAgreeAll;
}
inline void InnerFriendsvr::clear_fromscene_agree_all() {
  if (_internal_has_fromscene_agree_all()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_agree_all_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerFriendsvr_Fromscene_AgreeAll* InnerFriendsvr::release_fromscene_agree_all() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr.fromscene_agree_all)
  if (_internal_has_fromscene_agree_all()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_AgreeAll* temp = Fromscene_.fromscene_agree_all_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_agree_all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerFriendsvr_Fromscene_AgreeAll& InnerFriendsvr::_internal_fromscene_agree_all() const {
  return _internal_has_fromscene_agree_all()
      ? *Fromscene_.fromscene_agree_all_
      : reinterpret_cast< ::inner::InnerFriendsvr_Fromscene_AgreeAll&>(::inner::_InnerFriendsvr_Fromscene_AgreeAll_default_instance_);
}
inline const ::inner::InnerFriendsvr_Fromscene_AgreeAll& InnerFriendsvr::fromscene_agree_all() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr.fromscene_agree_all)
  return _internal_fromscene_agree_all();
}
inline ::inner::InnerFriendsvr_Fromscene_AgreeAll* InnerFriendsvr::unsafe_arena_release_fromscene_agree_all() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerFriendsvr.fromscene_agree_all)
  if (_internal_has_fromscene_agree_all()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_AgreeAll* temp = Fromscene_.fromscene_agree_all_;
    Fromscene_.fromscene_agree_all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerFriendsvr::unsafe_arena_set_allocated_fromscene_agree_all(::inner::InnerFriendsvr_Fromscene_AgreeAll* fromscene_agree_all) {
  clear_Fromscene();
  if (fromscene_agree_all) {
    set_has_fromscene_agree_all();
    Fromscene_.fromscene_agree_all_ = fromscene_agree_all;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr.fromscene_agree_all)
}
inline ::inner::InnerFriendsvr_Fromscene_AgreeAll* InnerFriendsvr::_internal_mutable_fromscene_agree_all() {
  if (!_internal_has_fromscene_agree_all()) {
    clear_Fromscene();
    set_has_fromscene_agree_all();
    Fromscene_.fromscene_agree_all_ = CreateMaybeMessage< ::inner::InnerFriendsvr_Fromscene_AgreeAll >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_agree_all_;
}
inline ::inner::InnerFriendsvr_Fromscene_AgreeAll* InnerFriendsvr::mutable_fromscene_agree_all() {
  ::inner::InnerFriendsvr_Fromscene_AgreeAll* _msg = _internal_mutable_fromscene_agree_all();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr.fromscene_agree_all)
  return _msg;
}

// .inner.InnerFriendsvr_Fromscene_RefuseAll fromscene_refuse_all = 109;
inline bool InnerFriendsvr::_internal_has_fromscene_refuse_all() const {
  return Fromscene_case() == kFromsceneRefuseAll;
}
inline bool InnerFriendsvr::has_fromscene_refuse_all() const {
  return _internal_has_fromscene_refuse_all();
}
inline void InnerFriendsvr::set_has_fromscene_refuse_all() {
  _oneof_case_[0] = kFromsceneRefuseAll;
}
inline void InnerFriendsvr::clear_fromscene_refuse_all() {
  if (_internal_has_fromscene_refuse_all()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_refuse_all_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerFriendsvr_Fromscene_RefuseAll* InnerFriendsvr::release_fromscene_refuse_all() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr.fromscene_refuse_all)
  if (_internal_has_fromscene_refuse_all()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_RefuseAll* temp = Fromscene_.fromscene_refuse_all_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_refuse_all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerFriendsvr_Fromscene_RefuseAll& InnerFriendsvr::_internal_fromscene_refuse_all() const {
  return _internal_has_fromscene_refuse_all()
      ? *Fromscene_.fromscene_refuse_all_
      : reinterpret_cast< ::inner::InnerFriendsvr_Fromscene_RefuseAll&>(::inner::_InnerFriendsvr_Fromscene_RefuseAll_default_instance_);
}
inline const ::inner::InnerFriendsvr_Fromscene_RefuseAll& InnerFriendsvr::fromscene_refuse_all() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr.fromscene_refuse_all)
  return _internal_fromscene_refuse_all();
}
inline ::inner::InnerFriendsvr_Fromscene_RefuseAll* InnerFriendsvr::unsafe_arena_release_fromscene_refuse_all() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerFriendsvr.fromscene_refuse_all)
  if (_internal_has_fromscene_refuse_all()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_RefuseAll* temp = Fromscene_.fromscene_refuse_all_;
    Fromscene_.fromscene_refuse_all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerFriendsvr::unsafe_arena_set_allocated_fromscene_refuse_all(::inner::InnerFriendsvr_Fromscene_RefuseAll* fromscene_refuse_all) {
  clear_Fromscene();
  if (fromscene_refuse_all) {
    set_has_fromscene_refuse_all();
    Fromscene_.fromscene_refuse_all_ = fromscene_refuse_all;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr.fromscene_refuse_all)
}
inline ::inner::InnerFriendsvr_Fromscene_RefuseAll* InnerFriendsvr::_internal_mutable_fromscene_refuse_all() {
  if (!_internal_has_fromscene_refuse_all()) {
    clear_Fromscene();
    set_has_fromscene_refuse_all();
    Fromscene_.fromscene_refuse_all_ = CreateMaybeMessage< ::inner::InnerFriendsvr_Fromscene_RefuseAll >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_refuse_all_;
}
inline ::inner::InnerFriendsvr_Fromscene_RefuseAll* InnerFriendsvr::mutable_fromscene_refuse_all() {
  ::inner::InnerFriendsvr_Fromscene_RefuseAll* _msg = _internal_mutable_fromscene_refuse_all();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr.fromscene_refuse_all)
  return _msg;
}

// .inner.InnerFriendsvr_Fromscene_Remove fromscene_remove_friend = 110;
inline bool InnerFriendsvr::_internal_has_fromscene_remove_friend() const {
  return Fromscene_case() == kFromsceneRemoveFriend;
}
inline bool InnerFriendsvr::has_fromscene_remove_friend() const {
  return _internal_has_fromscene_remove_friend();
}
inline void InnerFriendsvr::set_has_fromscene_remove_friend() {
  _oneof_case_[0] = kFromsceneRemoveFriend;
}
inline void InnerFriendsvr::clear_fromscene_remove_friend() {
  if (_internal_has_fromscene_remove_friend()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_remove_friend_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerFriendsvr_Fromscene_Remove* InnerFriendsvr::release_fromscene_remove_friend() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr.fromscene_remove_friend)
  if (_internal_has_fromscene_remove_friend()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_Remove* temp = Fromscene_.fromscene_remove_friend_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_remove_friend_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerFriendsvr_Fromscene_Remove& InnerFriendsvr::_internal_fromscene_remove_friend() const {
  return _internal_has_fromscene_remove_friend()
      ? *Fromscene_.fromscene_remove_friend_
      : reinterpret_cast< ::inner::InnerFriendsvr_Fromscene_Remove&>(::inner::_InnerFriendsvr_Fromscene_Remove_default_instance_);
}
inline const ::inner::InnerFriendsvr_Fromscene_Remove& InnerFriendsvr::fromscene_remove_friend() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr.fromscene_remove_friend)
  return _internal_fromscene_remove_friend();
}
inline ::inner::InnerFriendsvr_Fromscene_Remove* InnerFriendsvr::unsafe_arena_release_fromscene_remove_friend() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerFriendsvr.fromscene_remove_friend)
  if (_internal_has_fromscene_remove_friend()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_Remove* temp = Fromscene_.fromscene_remove_friend_;
    Fromscene_.fromscene_remove_friend_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerFriendsvr::unsafe_arena_set_allocated_fromscene_remove_friend(::inner::InnerFriendsvr_Fromscene_Remove* fromscene_remove_friend) {
  clear_Fromscene();
  if (fromscene_remove_friend) {
    set_has_fromscene_remove_friend();
    Fromscene_.fromscene_remove_friend_ = fromscene_remove_friend;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr.fromscene_remove_friend)
}
inline ::inner::InnerFriendsvr_Fromscene_Remove* InnerFriendsvr::_internal_mutable_fromscene_remove_friend() {
  if (!_internal_has_fromscene_remove_friend()) {
    clear_Fromscene();
    set_has_fromscene_remove_friend();
    Fromscene_.fromscene_remove_friend_ = CreateMaybeMessage< ::inner::InnerFriendsvr_Fromscene_Remove >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_remove_friend_;
}
inline ::inner::InnerFriendsvr_Fromscene_Remove* InnerFriendsvr::mutable_fromscene_remove_friend() {
  ::inner::InnerFriendsvr_Fromscene_Remove* _msg = _internal_mutable_fromscene_remove_friend();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr.fromscene_remove_friend)
  return _msg;
}

// .inner.InnerFriendsvr_Fromscene_Block fromscene_block_someone = 111;
inline bool InnerFriendsvr::_internal_has_fromscene_block_someone() const {
  return Fromscene_case() == kFromsceneBlockSomeone;
}
inline bool InnerFriendsvr::has_fromscene_block_someone() const {
  return _internal_has_fromscene_block_someone();
}
inline void InnerFriendsvr::set_has_fromscene_block_someone() {
  _oneof_case_[0] = kFromsceneBlockSomeone;
}
inline void InnerFriendsvr::clear_fromscene_block_someone() {
  if (_internal_has_fromscene_block_someone()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_block_someone_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerFriendsvr_Fromscene_Block* InnerFriendsvr::release_fromscene_block_someone() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr.fromscene_block_someone)
  if (_internal_has_fromscene_block_someone()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_Block* temp = Fromscene_.fromscene_block_someone_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_block_someone_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerFriendsvr_Fromscene_Block& InnerFriendsvr::_internal_fromscene_block_someone() const {
  return _internal_has_fromscene_block_someone()
      ? *Fromscene_.fromscene_block_someone_
      : reinterpret_cast< ::inner::InnerFriendsvr_Fromscene_Block&>(::inner::_InnerFriendsvr_Fromscene_Block_default_instance_);
}
inline const ::inner::InnerFriendsvr_Fromscene_Block& InnerFriendsvr::fromscene_block_someone() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr.fromscene_block_someone)
  return _internal_fromscene_block_someone();
}
inline ::inner::InnerFriendsvr_Fromscene_Block* InnerFriendsvr::unsafe_arena_release_fromscene_block_someone() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerFriendsvr.fromscene_block_someone)
  if (_internal_has_fromscene_block_someone()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_Block* temp = Fromscene_.fromscene_block_someone_;
    Fromscene_.fromscene_block_someone_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerFriendsvr::unsafe_arena_set_allocated_fromscene_block_someone(::inner::InnerFriendsvr_Fromscene_Block* fromscene_block_someone) {
  clear_Fromscene();
  if (fromscene_block_someone) {
    set_has_fromscene_block_someone();
    Fromscene_.fromscene_block_someone_ = fromscene_block_someone;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr.fromscene_block_someone)
}
inline ::inner::InnerFriendsvr_Fromscene_Block* InnerFriendsvr::_internal_mutable_fromscene_block_someone() {
  if (!_internal_has_fromscene_block_someone()) {
    clear_Fromscene();
    set_has_fromscene_block_someone();
    Fromscene_.fromscene_block_someone_ = CreateMaybeMessage< ::inner::InnerFriendsvr_Fromscene_Block >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_block_someone_;
}
inline ::inner::InnerFriendsvr_Fromscene_Block* InnerFriendsvr::mutable_fromscene_block_someone() {
  ::inner::InnerFriendsvr_Fromscene_Block* _msg = _internal_mutable_fromscene_block_someone();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr.fromscene_block_someone)
  return _msg;
}

// .inner.InnerFriendsvr_Fromscene_Chat fromscene_chat_msg_up = 112;
inline bool InnerFriendsvr::_internal_has_fromscene_chat_msg_up() const {
  return Fromscene_case() == kFromsceneChatMsgUp;
}
inline bool InnerFriendsvr::has_fromscene_chat_msg_up() const {
  return _internal_has_fromscene_chat_msg_up();
}
inline void InnerFriendsvr::set_has_fromscene_chat_msg_up() {
  _oneof_case_[0] = kFromsceneChatMsgUp;
}
inline void InnerFriendsvr::clear_fromscene_chat_msg_up() {
  if (_internal_has_fromscene_chat_msg_up()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_chat_msg_up_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerFriendsvr_Fromscene_Chat* InnerFriendsvr::release_fromscene_chat_msg_up() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr.fromscene_chat_msg_up)
  if (_internal_has_fromscene_chat_msg_up()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_Chat* temp = Fromscene_.fromscene_chat_msg_up_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_chat_msg_up_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerFriendsvr_Fromscene_Chat& InnerFriendsvr::_internal_fromscene_chat_msg_up() const {
  return _internal_has_fromscene_chat_msg_up()
      ? *Fromscene_.fromscene_chat_msg_up_
      : reinterpret_cast< ::inner::InnerFriendsvr_Fromscene_Chat&>(::inner::_InnerFriendsvr_Fromscene_Chat_default_instance_);
}
inline const ::inner::InnerFriendsvr_Fromscene_Chat& InnerFriendsvr::fromscene_chat_msg_up() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr.fromscene_chat_msg_up)
  return _internal_fromscene_chat_msg_up();
}
inline ::inner::InnerFriendsvr_Fromscene_Chat* InnerFriendsvr::unsafe_arena_release_fromscene_chat_msg_up() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerFriendsvr.fromscene_chat_msg_up)
  if (_internal_has_fromscene_chat_msg_up()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_Chat* temp = Fromscene_.fromscene_chat_msg_up_;
    Fromscene_.fromscene_chat_msg_up_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerFriendsvr::unsafe_arena_set_allocated_fromscene_chat_msg_up(::inner::InnerFriendsvr_Fromscene_Chat* fromscene_chat_msg_up) {
  clear_Fromscene();
  if (fromscene_chat_msg_up) {
    set_has_fromscene_chat_msg_up();
    Fromscene_.fromscene_chat_msg_up_ = fromscene_chat_msg_up;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr.fromscene_chat_msg_up)
}
inline ::inner::InnerFriendsvr_Fromscene_Chat* InnerFriendsvr::_internal_mutable_fromscene_chat_msg_up() {
  if (!_internal_has_fromscene_chat_msg_up()) {
    clear_Fromscene();
    set_has_fromscene_chat_msg_up();
    Fromscene_.fromscene_chat_msg_up_ = CreateMaybeMessage< ::inner::InnerFriendsvr_Fromscene_Chat >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_chat_msg_up_;
}
inline ::inner::InnerFriendsvr_Fromscene_Chat* InnerFriendsvr::mutable_fromscene_chat_msg_up() {
  ::inner::InnerFriendsvr_Fromscene_Chat* _msg = _internal_mutable_fromscene_chat_msg_up();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr.fromscene_chat_msg_up)
  return _msg;
}

// .inner.InnerFriendsvr_Fromscene_Expand fromscene_expand_list = 113;
inline bool InnerFriendsvr::_internal_has_fromscene_expand_list() const {
  return Fromscene_case() == kFromsceneExpandList;
}
inline bool InnerFriendsvr::has_fromscene_expand_list() const {
  return _internal_has_fromscene_expand_list();
}
inline void InnerFriendsvr::set_has_fromscene_expand_list() {
  _oneof_case_[0] = kFromsceneExpandList;
}
inline void InnerFriendsvr::clear_fromscene_expand_list() {
  if (_internal_has_fromscene_expand_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_expand_list_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerFriendsvr_Fromscene_Expand* InnerFriendsvr::release_fromscene_expand_list() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr.fromscene_expand_list)
  if (_internal_has_fromscene_expand_list()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_Expand* temp = Fromscene_.fromscene_expand_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_expand_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerFriendsvr_Fromscene_Expand& InnerFriendsvr::_internal_fromscene_expand_list() const {
  return _internal_has_fromscene_expand_list()
      ? *Fromscene_.fromscene_expand_list_
      : reinterpret_cast< ::inner::InnerFriendsvr_Fromscene_Expand&>(::inner::_InnerFriendsvr_Fromscene_Expand_default_instance_);
}
inline const ::inner::InnerFriendsvr_Fromscene_Expand& InnerFriendsvr::fromscene_expand_list() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr.fromscene_expand_list)
  return _internal_fromscene_expand_list();
}
inline ::inner::InnerFriendsvr_Fromscene_Expand* InnerFriendsvr::unsafe_arena_release_fromscene_expand_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerFriendsvr.fromscene_expand_list)
  if (_internal_has_fromscene_expand_list()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_Expand* temp = Fromscene_.fromscene_expand_list_;
    Fromscene_.fromscene_expand_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerFriendsvr::unsafe_arena_set_allocated_fromscene_expand_list(::inner::InnerFriendsvr_Fromscene_Expand* fromscene_expand_list) {
  clear_Fromscene();
  if (fromscene_expand_list) {
    set_has_fromscene_expand_list();
    Fromscene_.fromscene_expand_list_ = fromscene_expand_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr.fromscene_expand_list)
}
inline ::inner::InnerFriendsvr_Fromscene_Expand* InnerFriendsvr::_internal_mutable_fromscene_expand_list() {
  if (!_internal_has_fromscene_expand_list()) {
    clear_Fromscene();
    set_has_fromscene_expand_list();
    Fromscene_.fromscene_expand_list_ = CreateMaybeMessage< ::inner::InnerFriendsvr_Fromscene_Expand >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_expand_list_;
}
inline ::inner::InnerFriendsvr_Fromscene_Expand* InnerFriendsvr::mutable_fromscene_expand_list() {
  ::inner::InnerFriendsvr_Fromscene_Expand* _msg = _internal_mutable_fromscene_expand_list();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr.fromscene_expand_list)
  return _msg;
}

// .inner.InnerFriendsvr_Fromscene_Search fromscene_search_role = 114;
inline bool InnerFriendsvr::_internal_has_fromscene_search_role() const {
  return Fromscene_case() == kFromsceneSearchRole;
}
inline bool InnerFriendsvr::has_fromscene_search_role() const {
  return _internal_has_fromscene_search_role();
}
inline void InnerFriendsvr::set_has_fromscene_search_role() {
  _oneof_case_[0] = kFromsceneSearchRole;
}
inline void InnerFriendsvr::clear_fromscene_search_role() {
  if (_internal_has_fromscene_search_role()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_search_role_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerFriendsvr_Fromscene_Search* InnerFriendsvr::release_fromscene_search_role() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr.fromscene_search_role)
  if (_internal_has_fromscene_search_role()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_Search* temp = Fromscene_.fromscene_search_role_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_search_role_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerFriendsvr_Fromscene_Search& InnerFriendsvr::_internal_fromscene_search_role() const {
  return _internal_has_fromscene_search_role()
      ? *Fromscene_.fromscene_search_role_
      : reinterpret_cast< ::inner::InnerFriendsvr_Fromscene_Search&>(::inner::_InnerFriendsvr_Fromscene_Search_default_instance_);
}
inline const ::inner::InnerFriendsvr_Fromscene_Search& InnerFriendsvr::fromscene_search_role() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr.fromscene_search_role)
  return _internal_fromscene_search_role();
}
inline ::inner::InnerFriendsvr_Fromscene_Search* InnerFriendsvr::unsafe_arena_release_fromscene_search_role() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerFriendsvr.fromscene_search_role)
  if (_internal_has_fromscene_search_role()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_Search* temp = Fromscene_.fromscene_search_role_;
    Fromscene_.fromscene_search_role_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerFriendsvr::unsafe_arena_set_allocated_fromscene_search_role(::inner::InnerFriendsvr_Fromscene_Search* fromscene_search_role) {
  clear_Fromscene();
  if (fromscene_search_role) {
    set_has_fromscene_search_role();
    Fromscene_.fromscene_search_role_ = fromscene_search_role;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr.fromscene_search_role)
}
inline ::inner::InnerFriendsvr_Fromscene_Search* InnerFriendsvr::_internal_mutable_fromscene_search_role() {
  if (!_internal_has_fromscene_search_role()) {
    clear_Fromscene();
    set_has_fromscene_search_role();
    Fromscene_.fromscene_search_role_ = CreateMaybeMessage< ::inner::InnerFriendsvr_Fromscene_Search >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_search_role_;
}
inline ::inner::InnerFriendsvr_Fromscene_Search* InnerFriendsvr::mutable_fromscene_search_role() {
  ::inner::InnerFriendsvr_Fromscene_Search* _msg = _internal_mutable_fromscene_search_role();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr.fromscene_search_role)
  return _msg;
}

// .inner.InnerFriendsvr_Fromscene_Recommend fromscene_recommend_req = 115;
inline bool InnerFriendsvr::_internal_has_fromscene_recommend_req() const {
  return Fromscene_case() == kFromsceneRecommendReq;
}
inline bool InnerFriendsvr::has_fromscene_recommend_req() const {
  return _internal_has_fromscene_recommend_req();
}
inline void InnerFriendsvr::set_has_fromscene_recommend_req() {
  _oneof_case_[0] = kFromsceneRecommendReq;
}
inline void InnerFriendsvr::clear_fromscene_recommend_req() {
  if (_internal_has_fromscene_recommend_req()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_recommend_req_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerFriendsvr_Fromscene_Recommend* InnerFriendsvr::release_fromscene_recommend_req() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr.fromscene_recommend_req)
  if (_internal_has_fromscene_recommend_req()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_Recommend* temp = Fromscene_.fromscene_recommend_req_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_recommend_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerFriendsvr_Fromscene_Recommend& InnerFriendsvr::_internal_fromscene_recommend_req() const {
  return _internal_has_fromscene_recommend_req()
      ? *Fromscene_.fromscene_recommend_req_
      : reinterpret_cast< ::inner::InnerFriendsvr_Fromscene_Recommend&>(::inner::_InnerFriendsvr_Fromscene_Recommend_default_instance_);
}
inline const ::inner::InnerFriendsvr_Fromscene_Recommend& InnerFriendsvr::fromscene_recommend_req() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr.fromscene_recommend_req)
  return _internal_fromscene_recommend_req();
}
inline ::inner::InnerFriendsvr_Fromscene_Recommend* InnerFriendsvr::unsafe_arena_release_fromscene_recommend_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerFriendsvr.fromscene_recommend_req)
  if (_internal_has_fromscene_recommend_req()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_Recommend* temp = Fromscene_.fromscene_recommend_req_;
    Fromscene_.fromscene_recommend_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerFriendsvr::unsafe_arena_set_allocated_fromscene_recommend_req(::inner::InnerFriendsvr_Fromscene_Recommend* fromscene_recommend_req) {
  clear_Fromscene();
  if (fromscene_recommend_req) {
    set_has_fromscene_recommend_req();
    Fromscene_.fromscene_recommend_req_ = fromscene_recommend_req;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr.fromscene_recommend_req)
}
inline ::inner::InnerFriendsvr_Fromscene_Recommend* InnerFriendsvr::_internal_mutable_fromscene_recommend_req() {
  if (!_internal_has_fromscene_recommend_req()) {
    clear_Fromscene();
    set_has_fromscene_recommend_req();
    Fromscene_.fromscene_recommend_req_ = CreateMaybeMessage< ::inner::InnerFriendsvr_Fromscene_Recommend >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_recommend_req_;
}
inline ::inner::InnerFriendsvr_Fromscene_Recommend* InnerFriendsvr::mutable_fromscene_recommend_req() {
  ::inner::InnerFriendsvr_Fromscene_Recommend* _msg = _internal_mutable_fromscene_recommend_req();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr.fromscene_recommend_req)
  return _msg;
}

// .inner.InnerFriendsvr_Fromscene_Filter fromscene_set_filter = 116;
inline bool InnerFriendsvr::_internal_has_fromscene_set_filter() const {
  return Fromscene_case() == kFromsceneSetFilter;
}
inline bool InnerFriendsvr::has_fromscene_set_filter() const {
  return _internal_has_fromscene_set_filter();
}
inline void InnerFriendsvr::set_has_fromscene_set_filter() {
  _oneof_case_[0] = kFromsceneSetFilter;
}
inline void InnerFriendsvr::clear_fromscene_set_filter() {
  if (_internal_has_fromscene_set_filter()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_set_filter_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerFriendsvr_Fromscene_Filter* InnerFriendsvr::release_fromscene_set_filter() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr.fromscene_set_filter)
  if (_internal_has_fromscene_set_filter()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_Filter* temp = Fromscene_.fromscene_set_filter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_set_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerFriendsvr_Fromscene_Filter& InnerFriendsvr::_internal_fromscene_set_filter() const {
  return _internal_has_fromscene_set_filter()
      ? *Fromscene_.fromscene_set_filter_
      : reinterpret_cast< ::inner::InnerFriendsvr_Fromscene_Filter&>(::inner::_InnerFriendsvr_Fromscene_Filter_default_instance_);
}
inline const ::inner::InnerFriendsvr_Fromscene_Filter& InnerFriendsvr::fromscene_set_filter() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr.fromscene_set_filter)
  return _internal_fromscene_set_filter();
}
inline ::inner::InnerFriendsvr_Fromscene_Filter* InnerFriendsvr::unsafe_arena_release_fromscene_set_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerFriendsvr.fromscene_set_filter)
  if (_internal_has_fromscene_set_filter()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_Filter* temp = Fromscene_.fromscene_set_filter_;
    Fromscene_.fromscene_set_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerFriendsvr::unsafe_arena_set_allocated_fromscene_set_filter(::inner::InnerFriendsvr_Fromscene_Filter* fromscene_set_filter) {
  clear_Fromscene();
  if (fromscene_set_filter) {
    set_has_fromscene_set_filter();
    Fromscene_.fromscene_set_filter_ = fromscene_set_filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr.fromscene_set_filter)
}
inline ::inner::InnerFriendsvr_Fromscene_Filter* InnerFriendsvr::_internal_mutable_fromscene_set_filter() {
  if (!_internal_has_fromscene_set_filter()) {
    clear_Fromscene();
    set_has_fromscene_set_filter();
    Fromscene_.fromscene_set_filter_ = CreateMaybeMessage< ::inner::InnerFriendsvr_Fromscene_Filter >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_set_filter_;
}
inline ::inner::InnerFriendsvr_Fromscene_Filter* InnerFriendsvr::mutable_fromscene_set_filter() {
  ::inner::InnerFriendsvr_Fromscene_Filter* _msg = _internal_mutable_fromscene_set_filter();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr.fromscene_set_filter)
  return _msg;
}

// .inner.InnerFriendsvr_Fromscene_Labels fromscene_set_labels = 117;
inline bool InnerFriendsvr::_internal_has_fromscene_set_labels() const {
  return Fromscene_case() == kFromsceneSetLabels;
}
inline bool InnerFriendsvr::has_fromscene_set_labels() const {
  return _internal_has_fromscene_set_labels();
}
inline void InnerFriendsvr::set_has_fromscene_set_labels() {
  _oneof_case_[0] = kFromsceneSetLabels;
}
inline void InnerFriendsvr::clear_fromscene_set_labels() {
  if (_internal_has_fromscene_set_labels()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_set_labels_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerFriendsvr_Fromscene_Labels* InnerFriendsvr::release_fromscene_set_labels() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr.fromscene_set_labels)
  if (_internal_has_fromscene_set_labels()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_Labels* temp = Fromscene_.fromscene_set_labels_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_set_labels_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerFriendsvr_Fromscene_Labels& InnerFriendsvr::_internal_fromscene_set_labels() const {
  return _internal_has_fromscene_set_labels()
      ? *Fromscene_.fromscene_set_labels_
      : reinterpret_cast< ::inner::InnerFriendsvr_Fromscene_Labels&>(::inner::_InnerFriendsvr_Fromscene_Labels_default_instance_);
}
inline const ::inner::InnerFriendsvr_Fromscene_Labels& InnerFriendsvr::fromscene_set_labels() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr.fromscene_set_labels)
  return _internal_fromscene_set_labels();
}
inline ::inner::InnerFriendsvr_Fromscene_Labels* InnerFriendsvr::unsafe_arena_release_fromscene_set_labels() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerFriendsvr.fromscene_set_labels)
  if (_internal_has_fromscene_set_labels()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_Labels* temp = Fromscene_.fromscene_set_labels_;
    Fromscene_.fromscene_set_labels_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerFriendsvr::unsafe_arena_set_allocated_fromscene_set_labels(::inner::InnerFriendsvr_Fromscene_Labels* fromscene_set_labels) {
  clear_Fromscene();
  if (fromscene_set_labels) {
    set_has_fromscene_set_labels();
    Fromscene_.fromscene_set_labels_ = fromscene_set_labels;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr.fromscene_set_labels)
}
inline ::inner::InnerFriendsvr_Fromscene_Labels* InnerFriendsvr::_internal_mutable_fromscene_set_labels() {
  if (!_internal_has_fromscene_set_labels()) {
    clear_Fromscene();
    set_has_fromscene_set_labels();
    Fromscene_.fromscene_set_labels_ = CreateMaybeMessage< ::inner::InnerFriendsvr_Fromscene_Labels >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_set_labels_;
}
inline ::inner::InnerFriendsvr_Fromscene_Labels* InnerFriendsvr::mutable_fromscene_set_labels() {
  ::inner::InnerFriendsvr_Fromscene_Labels* _msg = _internal_mutable_fromscene_set_labels();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr.fromscene_set_labels)
  return _msg;
}

// .inner.InnerFriendsvr_Fromscene_SendGift fromscene_send_gift = 118;
inline bool InnerFriendsvr::_internal_has_fromscene_send_gift() const {
  return Fromscene_case() == kFromsceneSendGift;
}
inline bool InnerFriendsvr::has_fromscene_send_gift() const {
  return _internal_has_fromscene_send_gift();
}
inline void InnerFriendsvr::set_has_fromscene_send_gift() {
  _oneof_case_[0] = kFromsceneSendGift;
}
inline void InnerFriendsvr::clear_fromscene_send_gift() {
  if (_internal_has_fromscene_send_gift()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_send_gift_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerFriendsvr_Fromscene_SendGift* InnerFriendsvr::release_fromscene_send_gift() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr.fromscene_send_gift)
  if (_internal_has_fromscene_send_gift()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_SendGift* temp = Fromscene_.fromscene_send_gift_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_send_gift_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerFriendsvr_Fromscene_SendGift& InnerFriendsvr::_internal_fromscene_send_gift() const {
  return _internal_has_fromscene_send_gift()
      ? *Fromscene_.fromscene_send_gift_
      : reinterpret_cast< ::inner::InnerFriendsvr_Fromscene_SendGift&>(::inner::_InnerFriendsvr_Fromscene_SendGift_default_instance_);
}
inline const ::inner::InnerFriendsvr_Fromscene_SendGift& InnerFriendsvr::fromscene_send_gift() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr.fromscene_send_gift)
  return _internal_fromscene_send_gift();
}
inline ::inner::InnerFriendsvr_Fromscene_SendGift* InnerFriendsvr::unsafe_arena_release_fromscene_send_gift() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerFriendsvr.fromscene_send_gift)
  if (_internal_has_fromscene_send_gift()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_SendGift* temp = Fromscene_.fromscene_send_gift_;
    Fromscene_.fromscene_send_gift_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerFriendsvr::unsafe_arena_set_allocated_fromscene_send_gift(::inner::InnerFriendsvr_Fromscene_SendGift* fromscene_send_gift) {
  clear_Fromscene();
  if (fromscene_send_gift) {
    set_has_fromscene_send_gift();
    Fromscene_.fromscene_send_gift_ = fromscene_send_gift;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr.fromscene_send_gift)
}
inline ::inner::InnerFriendsvr_Fromscene_SendGift* InnerFriendsvr::_internal_mutable_fromscene_send_gift() {
  if (!_internal_has_fromscene_send_gift()) {
    clear_Fromscene();
    set_has_fromscene_send_gift();
    Fromscene_.fromscene_send_gift_ = CreateMaybeMessage< ::inner::InnerFriendsvr_Fromscene_SendGift >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_send_gift_;
}
inline ::inner::InnerFriendsvr_Fromscene_SendGift* InnerFriendsvr::mutable_fromscene_send_gift() {
  ::inner::InnerFriendsvr_Fromscene_SendGift* _msg = _internal_mutable_fromscene_send_gift();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr.fromscene_send_gift)
  return _msg;
}

// .inner.InnerFriendsvr_Fromscene_ReceiveGift fromscene_receive_gift = 119;
inline bool InnerFriendsvr::_internal_has_fromscene_receive_gift() const {
  return Fromscene_case() == kFromsceneReceiveGift;
}
inline bool InnerFriendsvr::has_fromscene_receive_gift() const {
  return _internal_has_fromscene_receive_gift();
}
inline void InnerFriendsvr::set_has_fromscene_receive_gift() {
  _oneof_case_[0] = kFromsceneReceiveGift;
}
inline void InnerFriendsvr::clear_fromscene_receive_gift() {
  if (_internal_has_fromscene_receive_gift()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_receive_gift_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerFriendsvr_Fromscene_ReceiveGift* InnerFriendsvr::release_fromscene_receive_gift() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr.fromscene_receive_gift)
  if (_internal_has_fromscene_receive_gift()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_ReceiveGift* temp = Fromscene_.fromscene_receive_gift_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_receive_gift_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerFriendsvr_Fromscene_ReceiveGift& InnerFriendsvr::_internal_fromscene_receive_gift() const {
  return _internal_has_fromscene_receive_gift()
      ? *Fromscene_.fromscene_receive_gift_
      : reinterpret_cast< ::inner::InnerFriendsvr_Fromscene_ReceiveGift&>(::inner::_InnerFriendsvr_Fromscene_ReceiveGift_default_instance_);
}
inline const ::inner::InnerFriendsvr_Fromscene_ReceiveGift& InnerFriendsvr::fromscene_receive_gift() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr.fromscene_receive_gift)
  return _internal_fromscene_receive_gift();
}
inline ::inner::InnerFriendsvr_Fromscene_ReceiveGift* InnerFriendsvr::unsafe_arena_release_fromscene_receive_gift() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerFriendsvr.fromscene_receive_gift)
  if (_internal_has_fromscene_receive_gift()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_ReceiveGift* temp = Fromscene_.fromscene_receive_gift_;
    Fromscene_.fromscene_receive_gift_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerFriendsvr::unsafe_arena_set_allocated_fromscene_receive_gift(::inner::InnerFriendsvr_Fromscene_ReceiveGift* fromscene_receive_gift) {
  clear_Fromscene();
  if (fromscene_receive_gift) {
    set_has_fromscene_receive_gift();
    Fromscene_.fromscene_receive_gift_ = fromscene_receive_gift;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr.fromscene_receive_gift)
}
inline ::inner::InnerFriendsvr_Fromscene_ReceiveGift* InnerFriendsvr::_internal_mutable_fromscene_receive_gift() {
  if (!_internal_has_fromscene_receive_gift()) {
    clear_Fromscene();
    set_has_fromscene_receive_gift();
    Fromscene_.fromscene_receive_gift_ = CreateMaybeMessage< ::inner::InnerFriendsvr_Fromscene_ReceiveGift >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_receive_gift_;
}
inline ::inner::InnerFriendsvr_Fromscene_ReceiveGift* InnerFriendsvr::mutable_fromscene_receive_gift() {
  ::inner::InnerFriendsvr_Fromscene_ReceiveGift* _msg = _internal_mutable_fromscene_receive_gift();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr.fromscene_receive_gift)
  return _msg;
}

// .inner.InnerFriendsvr_Fromscene_UserLogin fromscene_userlogin = 120;
inline bool InnerFriendsvr::_internal_has_fromscene_userlogin() const {
  return Fromscene_case() == kFromsceneUserlogin;
}
inline bool InnerFriendsvr::has_fromscene_userlogin() const {
  return _internal_has_fromscene_userlogin();
}
inline void InnerFriendsvr::set_has_fromscene_userlogin() {
  _oneof_case_[0] = kFromsceneUserlogin;
}
inline void InnerFriendsvr::clear_fromscene_userlogin() {
  if (_internal_has_fromscene_userlogin()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_userlogin_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerFriendsvr_Fromscene_UserLogin* InnerFriendsvr::release_fromscene_userlogin() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr.fromscene_userlogin)
  if (_internal_has_fromscene_userlogin()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_UserLogin* temp = Fromscene_.fromscene_userlogin_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_userlogin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerFriendsvr_Fromscene_UserLogin& InnerFriendsvr::_internal_fromscene_userlogin() const {
  return _internal_has_fromscene_userlogin()
      ? *Fromscene_.fromscene_userlogin_
      : reinterpret_cast< ::inner::InnerFriendsvr_Fromscene_UserLogin&>(::inner::_InnerFriendsvr_Fromscene_UserLogin_default_instance_);
}
inline const ::inner::InnerFriendsvr_Fromscene_UserLogin& InnerFriendsvr::fromscene_userlogin() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr.fromscene_userlogin)
  return _internal_fromscene_userlogin();
}
inline ::inner::InnerFriendsvr_Fromscene_UserLogin* InnerFriendsvr::unsafe_arena_release_fromscene_userlogin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerFriendsvr.fromscene_userlogin)
  if (_internal_has_fromscene_userlogin()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_UserLogin* temp = Fromscene_.fromscene_userlogin_;
    Fromscene_.fromscene_userlogin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerFriendsvr::unsafe_arena_set_allocated_fromscene_userlogin(::inner::InnerFriendsvr_Fromscene_UserLogin* fromscene_userlogin) {
  clear_Fromscene();
  if (fromscene_userlogin) {
    set_has_fromscene_userlogin();
    Fromscene_.fromscene_userlogin_ = fromscene_userlogin;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr.fromscene_userlogin)
}
inline ::inner::InnerFriendsvr_Fromscene_UserLogin* InnerFriendsvr::_internal_mutable_fromscene_userlogin() {
  if (!_internal_has_fromscene_userlogin()) {
    clear_Fromscene();
    set_has_fromscene_userlogin();
    Fromscene_.fromscene_userlogin_ = CreateMaybeMessage< ::inner::InnerFriendsvr_Fromscene_UserLogin >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_userlogin_;
}
inline ::inner::InnerFriendsvr_Fromscene_UserLogin* InnerFriendsvr::mutable_fromscene_userlogin() {
  ::inner::InnerFriendsvr_Fromscene_UserLogin* _msg = _internal_mutable_fromscene_userlogin();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr.fromscene_userlogin)
  return _msg;
}

// .inner.InnerFriendsvr_Fromscene_UserLogout fromscene_userlogout = 121;
inline bool InnerFriendsvr::_internal_has_fromscene_userlogout() const {
  return Fromscene_case() == kFromsceneUserlogout;
}
inline bool InnerFriendsvr::has_fromscene_userlogout() const {
  return _internal_has_fromscene_userlogout();
}
inline void InnerFriendsvr::set_has_fromscene_userlogout() {
  _oneof_case_[0] = kFromsceneUserlogout;
}
inline void InnerFriendsvr::clear_fromscene_userlogout() {
  if (_internal_has_fromscene_userlogout()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_userlogout_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerFriendsvr_Fromscene_UserLogout* InnerFriendsvr::release_fromscene_userlogout() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr.fromscene_userlogout)
  if (_internal_has_fromscene_userlogout()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_UserLogout* temp = Fromscene_.fromscene_userlogout_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_userlogout_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerFriendsvr_Fromscene_UserLogout& InnerFriendsvr::_internal_fromscene_userlogout() const {
  return _internal_has_fromscene_userlogout()
      ? *Fromscene_.fromscene_userlogout_
      : reinterpret_cast< ::inner::InnerFriendsvr_Fromscene_UserLogout&>(::inner::_InnerFriendsvr_Fromscene_UserLogout_default_instance_);
}
inline const ::inner::InnerFriendsvr_Fromscene_UserLogout& InnerFriendsvr::fromscene_userlogout() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr.fromscene_userlogout)
  return _internal_fromscene_userlogout();
}
inline ::inner::InnerFriendsvr_Fromscene_UserLogout* InnerFriendsvr::unsafe_arena_release_fromscene_userlogout() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerFriendsvr.fromscene_userlogout)
  if (_internal_has_fromscene_userlogout()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_UserLogout* temp = Fromscene_.fromscene_userlogout_;
    Fromscene_.fromscene_userlogout_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerFriendsvr::unsafe_arena_set_allocated_fromscene_userlogout(::inner::InnerFriendsvr_Fromscene_UserLogout* fromscene_userlogout) {
  clear_Fromscene();
  if (fromscene_userlogout) {
    set_has_fromscene_userlogout();
    Fromscene_.fromscene_userlogout_ = fromscene_userlogout;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr.fromscene_userlogout)
}
inline ::inner::InnerFriendsvr_Fromscene_UserLogout* InnerFriendsvr::_internal_mutable_fromscene_userlogout() {
  if (!_internal_has_fromscene_userlogout()) {
    clear_Fromscene();
    set_has_fromscene_userlogout();
    Fromscene_.fromscene_userlogout_ = CreateMaybeMessage< ::inner::InnerFriendsvr_Fromscene_UserLogout >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_userlogout_;
}
inline ::inner::InnerFriendsvr_Fromscene_UserLogout* InnerFriendsvr::mutable_fromscene_userlogout() {
  ::inner::InnerFriendsvr_Fromscene_UserLogout* _msg = _internal_mutable_fromscene_userlogout();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr.fromscene_userlogout)
  return _msg;
}

// .inner.InnerFriendsvr_Fromscene_UserOnline fromscene_useronline = 122;
inline bool InnerFriendsvr::_internal_has_fromscene_useronline() const {
  return Fromscene_case() == kFromsceneUseronline;
}
inline bool InnerFriendsvr::has_fromscene_useronline() const {
  return _internal_has_fromscene_useronline();
}
inline void InnerFriendsvr::set_has_fromscene_useronline() {
  _oneof_case_[0] = kFromsceneUseronline;
}
inline void InnerFriendsvr::clear_fromscene_useronline() {
  if (_internal_has_fromscene_useronline()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_useronline_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerFriendsvr_Fromscene_UserOnline* InnerFriendsvr::release_fromscene_useronline() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr.fromscene_useronline)
  if (_internal_has_fromscene_useronline()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_UserOnline* temp = Fromscene_.fromscene_useronline_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_useronline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerFriendsvr_Fromscene_UserOnline& InnerFriendsvr::_internal_fromscene_useronline() const {
  return _internal_has_fromscene_useronline()
      ? *Fromscene_.fromscene_useronline_
      : reinterpret_cast< ::inner::InnerFriendsvr_Fromscene_UserOnline&>(::inner::_InnerFriendsvr_Fromscene_UserOnline_default_instance_);
}
inline const ::inner::InnerFriendsvr_Fromscene_UserOnline& InnerFriendsvr::fromscene_useronline() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr.fromscene_useronline)
  return _internal_fromscene_useronline();
}
inline ::inner::InnerFriendsvr_Fromscene_UserOnline* InnerFriendsvr::unsafe_arena_release_fromscene_useronline() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerFriendsvr.fromscene_useronline)
  if (_internal_has_fromscene_useronline()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_UserOnline* temp = Fromscene_.fromscene_useronline_;
    Fromscene_.fromscene_useronline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerFriendsvr::unsafe_arena_set_allocated_fromscene_useronline(::inner::InnerFriendsvr_Fromscene_UserOnline* fromscene_useronline) {
  clear_Fromscene();
  if (fromscene_useronline) {
    set_has_fromscene_useronline();
    Fromscene_.fromscene_useronline_ = fromscene_useronline;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr.fromscene_useronline)
}
inline ::inner::InnerFriendsvr_Fromscene_UserOnline* InnerFriendsvr::_internal_mutable_fromscene_useronline() {
  if (!_internal_has_fromscene_useronline()) {
    clear_Fromscene();
    set_has_fromscene_useronline();
    Fromscene_.fromscene_useronline_ = CreateMaybeMessage< ::inner::InnerFriendsvr_Fromscene_UserOnline >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_useronline_;
}
inline ::inner::InnerFriendsvr_Fromscene_UserOnline* InnerFriendsvr::mutable_fromscene_useronline() {
  ::inner::InnerFriendsvr_Fromscene_UserOnline* _msg = _internal_mutable_fromscene_useronline();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr.fromscene_useronline)
  return _msg;
}

// .inner.InnerFriendsvr_Fromscene_UserOffline fromscene_useroffline = 123;
inline bool InnerFriendsvr::_internal_has_fromscene_useroffline() const {
  return Fromscene_case() == kFromsceneUseroffline;
}
inline bool InnerFriendsvr::has_fromscene_useroffline() const {
  return _internal_has_fromscene_useroffline();
}
inline void InnerFriendsvr::set_has_fromscene_useroffline() {
  _oneof_case_[0] = kFromsceneUseroffline;
}
inline void InnerFriendsvr::clear_fromscene_useroffline() {
  if (_internal_has_fromscene_useroffline()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_useroffline_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerFriendsvr_Fromscene_UserOffline* InnerFriendsvr::release_fromscene_useroffline() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr.fromscene_useroffline)
  if (_internal_has_fromscene_useroffline()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_UserOffline* temp = Fromscene_.fromscene_useroffline_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_useroffline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerFriendsvr_Fromscene_UserOffline& InnerFriendsvr::_internal_fromscene_useroffline() const {
  return _internal_has_fromscene_useroffline()
      ? *Fromscene_.fromscene_useroffline_
      : reinterpret_cast< ::inner::InnerFriendsvr_Fromscene_UserOffline&>(::inner::_InnerFriendsvr_Fromscene_UserOffline_default_instance_);
}
inline const ::inner::InnerFriendsvr_Fromscene_UserOffline& InnerFriendsvr::fromscene_useroffline() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr.fromscene_useroffline)
  return _internal_fromscene_useroffline();
}
inline ::inner::InnerFriendsvr_Fromscene_UserOffline* InnerFriendsvr::unsafe_arena_release_fromscene_useroffline() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerFriendsvr.fromscene_useroffline)
  if (_internal_has_fromscene_useroffline()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_UserOffline* temp = Fromscene_.fromscene_useroffline_;
    Fromscene_.fromscene_useroffline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerFriendsvr::unsafe_arena_set_allocated_fromscene_useroffline(::inner::InnerFriendsvr_Fromscene_UserOffline* fromscene_useroffline) {
  clear_Fromscene();
  if (fromscene_useroffline) {
    set_has_fromscene_useroffline();
    Fromscene_.fromscene_useroffline_ = fromscene_useroffline;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr.fromscene_useroffline)
}
inline ::inner::InnerFriendsvr_Fromscene_UserOffline* InnerFriendsvr::_internal_mutable_fromscene_useroffline() {
  if (!_internal_has_fromscene_useroffline()) {
    clear_Fromscene();
    set_has_fromscene_useroffline();
    Fromscene_.fromscene_useroffline_ = CreateMaybeMessage< ::inner::InnerFriendsvr_Fromscene_UserOffline >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_useroffline_;
}
inline ::inner::InnerFriendsvr_Fromscene_UserOffline* InnerFriendsvr::mutable_fromscene_useroffline() {
  ::inner::InnerFriendsvr_Fromscene_UserOffline* _msg = _internal_mutable_fromscene_useroffline();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr.fromscene_useroffline)
  return _msg;
}

// .inner.InnerFriendsvr_Fromscene_RecvMail fromscene_recvmail = 124;
inline bool InnerFriendsvr::_internal_has_fromscene_recvmail() const {
  return Fromscene_case() == kFromsceneRecvmail;
}
inline bool InnerFriendsvr::has_fromscene_recvmail() const {
  return _internal_has_fromscene_recvmail();
}
inline void InnerFriendsvr::set_has_fromscene_recvmail() {
  _oneof_case_[0] = kFromsceneRecvmail;
}
inline void InnerFriendsvr::clear_fromscene_recvmail() {
  if (_internal_has_fromscene_recvmail()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_recvmail_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerFriendsvr_Fromscene_RecvMail* InnerFriendsvr::release_fromscene_recvmail() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr.fromscene_recvmail)
  if (_internal_has_fromscene_recvmail()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_RecvMail* temp = Fromscene_.fromscene_recvmail_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_recvmail_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerFriendsvr_Fromscene_RecvMail& InnerFriendsvr::_internal_fromscene_recvmail() const {
  return _internal_has_fromscene_recvmail()
      ? *Fromscene_.fromscene_recvmail_
      : reinterpret_cast< ::inner::InnerFriendsvr_Fromscene_RecvMail&>(::inner::_InnerFriendsvr_Fromscene_RecvMail_default_instance_);
}
inline const ::inner::InnerFriendsvr_Fromscene_RecvMail& InnerFriendsvr::fromscene_recvmail() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr.fromscene_recvmail)
  return _internal_fromscene_recvmail();
}
inline ::inner::InnerFriendsvr_Fromscene_RecvMail* InnerFriendsvr::unsafe_arena_release_fromscene_recvmail() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerFriendsvr.fromscene_recvmail)
  if (_internal_has_fromscene_recvmail()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_RecvMail* temp = Fromscene_.fromscene_recvmail_;
    Fromscene_.fromscene_recvmail_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerFriendsvr::unsafe_arena_set_allocated_fromscene_recvmail(::inner::InnerFriendsvr_Fromscene_RecvMail* fromscene_recvmail) {
  clear_Fromscene();
  if (fromscene_recvmail) {
    set_has_fromscene_recvmail();
    Fromscene_.fromscene_recvmail_ = fromscene_recvmail;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr.fromscene_recvmail)
}
inline ::inner::InnerFriendsvr_Fromscene_RecvMail* InnerFriendsvr::_internal_mutable_fromscene_recvmail() {
  if (!_internal_has_fromscene_recvmail()) {
    clear_Fromscene();
    set_has_fromscene_recvmail();
    Fromscene_.fromscene_recvmail_ = CreateMaybeMessage< ::inner::InnerFriendsvr_Fromscene_RecvMail >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_recvmail_;
}
inline ::inner::InnerFriendsvr_Fromscene_RecvMail* InnerFriendsvr::mutable_fromscene_recvmail() {
  ::inner::InnerFriendsvr_Fromscene_RecvMail* _msg = _internal_mutable_fromscene_recvmail();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr.fromscene_recvmail)
  return _msg;
}

// .inner.InnerFriendsvr_Fromscene_ExpiredMail fromscene_expiredmail = 125;
inline bool InnerFriendsvr::_internal_has_fromscene_expiredmail() const {
  return Fromscene_case() == kFromsceneExpiredmail;
}
inline bool InnerFriendsvr::has_fromscene_expiredmail() const {
  return _internal_has_fromscene_expiredmail();
}
inline void InnerFriendsvr::set_has_fromscene_expiredmail() {
  _oneof_case_[0] = kFromsceneExpiredmail;
}
inline void InnerFriendsvr::clear_fromscene_expiredmail() {
  if (_internal_has_fromscene_expiredmail()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_expiredmail_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerFriendsvr_Fromscene_ExpiredMail* InnerFriendsvr::release_fromscene_expiredmail() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr.fromscene_expiredmail)
  if (_internal_has_fromscene_expiredmail()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_ExpiredMail* temp = Fromscene_.fromscene_expiredmail_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_expiredmail_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerFriendsvr_Fromscene_ExpiredMail& InnerFriendsvr::_internal_fromscene_expiredmail() const {
  return _internal_has_fromscene_expiredmail()
      ? *Fromscene_.fromscene_expiredmail_
      : reinterpret_cast< ::inner::InnerFriendsvr_Fromscene_ExpiredMail&>(::inner::_InnerFriendsvr_Fromscene_ExpiredMail_default_instance_);
}
inline const ::inner::InnerFriendsvr_Fromscene_ExpiredMail& InnerFriendsvr::fromscene_expiredmail() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr.fromscene_expiredmail)
  return _internal_fromscene_expiredmail();
}
inline ::inner::InnerFriendsvr_Fromscene_ExpiredMail* InnerFriendsvr::unsafe_arena_release_fromscene_expiredmail() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerFriendsvr.fromscene_expiredmail)
  if (_internal_has_fromscene_expiredmail()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_ExpiredMail* temp = Fromscene_.fromscene_expiredmail_;
    Fromscene_.fromscene_expiredmail_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerFriendsvr::unsafe_arena_set_allocated_fromscene_expiredmail(::inner::InnerFriendsvr_Fromscene_ExpiredMail* fromscene_expiredmail) {
  clear_Fromscene();
  if (fromscene_expiredmail) {
    set_has_fromscene_expiredmail();
    Fromscene_.fromscene_expiredmail_ = fromscene_expiredmail;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr.fromscene_expiredmail)
}
inline ::inner::InnerFriendsvr_Fromscene_ExpiredMail* InnerFriendsvr::_internal_mutable_fromscene_expiredmail() {
  if (!_internal_has_fromscene_expiredmail()) {
    clear_Fromscene();
    set_has_fromscene_expiredmail();
    Fromscene_.fromscene_expiredmail_ = CreateMaybeMessage< ::inner::InnerFriendsvr_Fromscene_ExpiredMail >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_expiredmail_;
}
inline ::inner::InnerFriendsvr_Fromscene_ExpiredMail* InnerFriendsvr::mutable_fromscene_expiredmail() {
  ::inner::InnerFriendsvr_Fromscene_ExpiredMail* _msg = _internal_mutable_fromscene_expiredmail();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr.fromscene_expiredmail)
  return _msg;
}

// .inner.InnerFriendsvr_Fromscene_MailFull fromscene_mailfull = 126;
inline bool InnerFriendsvr::_internal_has_fromscene_mailfull() const {
  return Fromscene_case() == kFromsceneMailfull;
}
inline bool InnerFriendsvr::has_fromscene_mailfull() const {
  return _internal_has_fromscene_mailfull();
}
inline void InnerFriendsvr::set_has_fromscene_mailfull() {
  _oneof_case_[0] = kFromsceneMailfull;
}
inline void InnerFriendsvr::clear_fromscene_mailfull() {
  if (_internal_has_fromscene_mailfull()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Fromscene_.fromscene_mailfull_;
    }
    clear_has_Fromscene();
  }
}
inline ::inner::InnerFriendsvr_Fromscene_MailFull* InnerFriendsvr::release_fromscene_mailfull() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr.fromscene_mailfull)
  if (_internal_has_fromscene_mailfull()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_MailFull* temp = Fromscene_.fromscene_mailfull_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Fromscene_.fromscene_mailfull_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inner::InnerFriendsvr_Fromscene_MailFull& InnerFriendsvr::_internal_fromscene_mailfull() const {
  return _internal_has_fromscene_mailfull()
      ? *Fromscene_.fromscene_mailfull_
      : reinterpret_cast< ::inner::InnerFriendsvr_Fromscene_MailFull&>(::inner::_InnerFriendsvr_Fromscene_MailFull_default_instance_);
}
inline const ::inner::InnerFriendsvr_Fromscene_MailFull& InnerFriendsvr::fromscene_mailfull() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr.fromscene_mailfull)
  return _internal_fromscene_mailfull();
}
inline ::inner::InnerFriendsvr_Fromscene_MailFull* InnerFriendsvr::unsafe_arena_release_fromscene_mailfull() {
  // @@protoc_insertion_point(field_unsafe_arena_release:inner.InnerFriendsvr.fromscene_mailfull)
  if (_internal_has_fromscene_mailfull()) {
    clear_has_Fromscene();
    ::inner::InnerFriendsvr_Fromscene_MailFull* temp = Fromscene_.fromscene_mailfull_;
    Fromscene_.fromscene_mailfull_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InnerFriendsvr::unsafe_arena_set_allocated_fromscene_mailfull(::inner::InnerFriendsvr_Fromscene_MailFull* fromscene_mailfull) {
  clear_Fromscene();
  if (fromscene_mailfull) {
    set_has_fromscene_mailfull();
    Fromscene_.fromscene_mailfull_ = fromscene_mailfull;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr.fromscene_mailfull)
}
inline ::inner::InnerFriendsvr_Fromscene_MailFull* InnerFriendsvr::_internal_mutable_fromscene_mailfull() {
  if (!_internal_has_fromscene_mailfull()) {
    clear_Fromscene();
    set_has_fromscene_mailfull();
    Fromscene_.fromscene_mailfull_ = CreateMaybeMessage< ::inner::InnerFriendsvr_Fromscene_MailFull >(GetArenaForAllocation());
  }
  return Fromscene_.fromscene_mailfull_;
}
inline ::inner::InnerFriendsvr_Fromscene_MailFull* InnerFriendsvr::mutable_fromscene_mailfull() {
  ::inner::InnerFriendsvr_Fromscene_MailFull* _msg = _internal_mutable_fromscene_mailfull();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr.fromscene_mailfull)
  return _msg;
}

inline bool InnerFriendsvr::has_Fromscene() const {
  return Fromscene_case() != FROMSCENE_NOT_SET;
}
inline void InnerFriendsvr::clear_has_Fromscene() {
  _oneof_case_[0] = FROMSCENE_NOT_SET;
}
inline InnerFriendsvr::FromsceneCase InnerFriendsvr::Fromscene_case() const {
  return InnerFriendsvr::FromsceneCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InnerFriendsvr_Fromscene_Test

// -------------------------------------------------------------------

// InnerFriendsvr_Fromscene_GameEvent

// .inner.InnerGameEvent oGameEvent = 1;
inline bool InnerFriendsvr_Fromscene_GameEvent::_internal_has_ogameevent() const {
  return this != internal_default_instance() && ogameevent_ != nullptr;
}
inline bool InnerFriendsvr_Fromscene_GameEvent::has_ogameevent() const {
  return _internal_has_ogameevent();
}
inline const ::inner::InnerGameEvent& InnerFriendsvr_Fromscene_GameEvent::_internal_ogameevent() const {
  const ::inner::InnerGameEvent* p = ogameevent_;
  return p != nullptr ? *p : reinterpret_cast<const ::inner::InnerGameEvent&>(
      ::inner::_InnerGameEvent_default_instance_);
}
inline const ::inner::InnerGameEvent& InnerFriendsvr_Fromscene_GameEvent::ogameevent() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr_Fromscene_GameEvent.oGameEvent)
  return _internal_ogameevent();
}
inline void InnerFriendsvr_Fromscene_GameEvent::unsafe_arena_set_allocated_ogameevent(
    ::inner::InnerGameEvent* ogameevent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ogameevent_);
  }
  ogameevent_ = ogameevent;
  if (ogameevent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr_Fromscene_GameEvent.oGameEvent)
}
inline ::inner::InnerGameEvent* InnerFriendsvr_Fromscene_GameEvent::release_ogameevent() {
  
  ::inner::InnerGameEvent* temp = ogameevent_;
  ogameevent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::inner::InnerGameEvent* InnerFriendsvr_Fromscene_GameEvent::unsafe_arena_release_ogameevent() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr_Fromscene_GameEvent.oGameEvent)
  
  ::inner::InnerGameEvent* temp = ogameevent_;
  ogameevent_ = nullptr;
  return temp;
}
inline ::inner::InnerGameEvent* InnerFriendsvr_Fromscene_GameEvent::_internal_mutable_ogameevent() {
  
  if (ogameevent_ == nullptr) {
    auto* p = CreateMaybeMessage<::inner::InnerGameEvent>(GetArenaForAllocation());
    ogameevent_ = p;
  }
  return ogameevent_;
}
inline ::inner::InnerGameEvent* InnerFriendsvr_Fromscene_GameEvent::mutable_ogameevent() {
  ::inner::InnerGameEvent* _msg = _internal_mutable_ogameevent();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr_Fromscene_GameEvent.oGameEvent)
  return _msg;
}
inline void InnerFriendsvr_Fromscene_GameEvent::set_allocated_ogameevent(::inner::InnerGameEvent* ogameevent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ogameevent_);
  }
  if (ogameevent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ogameevent));
    if (message_arena != submessage_arena) {
      ogameevent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ogameevent, submessage_arena);
    }
    
  } else {
    
  }
  ogameevent_ = ogameevent;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerFriendsvr_Fromscene_GameEvent.oGameEvent)
}

// -------------------------------------------------------------------

// InnerFriendsvr_Fromscene_UpdateUserInfo

// string strNick = 1;
inline bool InnerFriendsvr_Fromscene_UpdateUserInfo::_internal_has_strnick() const {
  return oType_case() == kStrNick;
}
inline bool InnerFriendsvr_Fromscene_UpdateUserInfo::has_strnick() const {
  return _internal_has_strnick();
}
inline void InnerFriendsvr_Fromscene_UpdateUserInfo::set_has_strnick() {
  _oneof_case_[0] = kStrNick;
}
inline void InnerFriendsvr_Fromscene_UpdateUserInfo::clear_strnick() {
  if (_internal_has_strnick()) {
    oType_.strnick_.Destroy();
    clear_has_oType();
  }
}
inline const std::string& InnerFriendsvr_Fromscene_UpdateUserInfo::strnick() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr_Fromscene_UpdateUserInfo.strNick)
  return _internal_strnick();
}
template <typename ArgT0, typename... ArgT>
inline void InnerFriendsvr_Fromscene_UpdateUserInfo::set_strnick(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_strnick()) {
    clear_oType();
    set_has_strnick();
    oType_.strnick_.InitDefault();
  }
  oType_.strnick_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inner.InnerFriendsvr_Fromscene_UpdateUserInfo.strNick)
}
inline std::string* InnerFriendsvr_Fromscene_UpdateUserInfo::mutable_strnick() {
  std::string* _s = _internal_mutable_strnick();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr_Fromscene_UpdateUserInfo.strNick)
  return _s;
}
inline const std::string& InnerFriendsvr_Fromscene_UpdateUserInfo::_internal_strnick() const {
  if (_internal_has_strnick()) {
    return oType_.strnick_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void InnerFriendsvr_Fromscene_UpdateUserInfo::_internal_set_strnick(const std::string& value) {
  if (!_internal_has_strnick()) {
    clear_oType();
    set_has_strnick();
    oType_.strnick_.InitDefault();
  }
  oType_.strnick_.Set(value, GetArenaForAllocation());
}
inline std::string* InnerFriendsvr_Fromscene_UpdateUserInfo::_internal_mutable_strnick() {
  if (!_internal_has_strnick()) {
    clear_oType();
    set_has_strnick();
    oType_.strnick_.InitDefault();
  }
  return oType_.strnick_.Mutable(      GetArenaForAllocation());
}
inline std::string* InnerFriendsvr_Fromscene_UpdateUserInfo::release_strnick() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr_Fromscene_UpdateUserInfo.strNick)
  if (_internal_has_strnick()) {
    clear_has_oType();
    return oType_.strnick_.Release();
  } else {
    return nullptr;
  }
}
inline void InnerFriendsvr_Fromscene_UpdateUserInfo::set_allocated_strnick(std::string* strnick) {
  if (has_oType()) {
    clear_oType();
  }
  if (strnick != nullptr) {
    set_has_strnick();
    oType_.strnick_.InitAllocated(strnick, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerFriendsvr_Fromscene_UpdateUserInfo.strNick)
}

// uint32 uiLevel = 2;
inline bool InnerFriendsvr_Fromscene_UpdateUserInfo::_internal_has_uilevel() const {
  return oType_case() == kUiLevel;
}
inline bool InnerFriendsvr_Fromscene_UpdateUserInfo::has_uilevel() const {
  return _internal_has_uilevel();
}
inline void InnerFriendsvr_Fromscene_UpdateUserInfo::set_has_uilevel() {
  _oneof_case_[0] = kUiLevel;
}
inline void InnerFriendsvr_Fromscene_UpdateUserInfo::clear_uilevel() {
  if (_internal_has_uilevel()) {
    oType_.uilevel_ = 0u;
    clear_has_oType();
  }
}
inline uint32_t InnerFriendsvr_Fromscene_UpdateUserInfo::_internal_uilevel() const {
  if (_internal_has_uilevel()) {
    return oType_.uilevel_;
  }
  return 0u;
}
inline void InnerFriendsvr_Fromscene_UpdateUserInfo::_internal_set_uilevel(uint32_t value) {
  if (!_internal_has_uilevel()) {
    clear_oType();
    set_has_uilevel();
  }
  oType_.uilevel_ = value;
}
inline uint32_t InnerFriendsvr_Fromscene_UpdateUserInfo::uilevel() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr_Fromscene_UpdateUserInfo.uiLevel)
  return _internal_uilevel();
}
inline void InnerFriendsvr_Fromscene_UpdateUserInfo::set_uilevel(uint32_t value) {
  _internal_set_uilevel(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendsvr_Fromscene_UpdateUserInfo.uiLevel)
}

// uint64 llTeamId = 3;
inline bool InnerFriendsvr_Fromscene_UpdateUserInfo::_internal_has_llteamid() const {
  return oType_case() == kLlTeamId;
}
inline bool InnerFriendsvr_Fromscene_UpdateUserInfo::has_llteamid() const {
  return _internal_has_llteamid();
}
inline void InnerFriendsvr_Fromscene_UpdateUserInfo::set_has_llteamid() {
  _oneof_case_[0] = kLlTeamId;
}
inline void InnerFriendsvr_Fromscene_UpdateUserInfo::clear_llteamid() {
  if (_internal_has_llteamid()) {
    oType_.llteamid_ = uint64_t{0u};
    clear_has_oType();
  }
}
inline uint64_t InnerFriendsvr_Fromscene_UpdateUserInfo::_internal_llteamid() const {
  if (_internal_has_llteamid()) {
    return oType_.llteamid_;
  }
  return uint64_t{0u};
}
inline void InnerFriendsvr_Fromscene_UpdateUserInfo::_internal_set_llteamid(uint64_t value) {
  if (!_internal_has_llteamid()) {
    clear_oType();
    set_has_llteamid();
  }
  oType_.llteamid_ = value;
}
inline uint64_t InnerFriendsvr_Fromscene_UpdateUserInfo::llteamid() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr_Fromscene_UpdateUserInfo.llTeamId)
  return _internal_llteamid();
}
inline void InnerFriendsvr_Fromscene_UpdateUserInfo::set_llteamid(uint64_t value) {
  _internal_set_llteamid(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendsvr_Fromscene_UpdateUserInfo.llTeamId)
}

inline bool InnerFriendsvr_Fromscene_UpdateUserInfo::has_oType() const {
  return oType_case() != OTYPE_NOT_SET;
}
inline void InnerFriendsvr_Fromscene_UpdateUserInfo::clear_has_oType() {
  _oneof_case_[0] = OTYPE_NOT_SET;
}
inline InnerFriendsvr_Fromscene_UpdateUserInfo::OTypeCase InnerFriendsvr_Fromscene_UpdateUserInfo::oType_case() const {
  return InnerFriendsvr_Fromscene_UpdateUserInfo::OTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InnerFriendsvr_Fromscene_OpenFunc

// .inner.InnerFriendInfo oInfo = 1;
inline bool InnerFriendsvr_Fromscene_OpenFunc::_internal_has_oinfo() const {
  return this != internal_default_instance() && oinfo_ != nullptr;
}
inline bool InnerFriendsvr_Fromscene_OpenFunc::has_oinfo() const {
  return _internal_has_oinfo();
}
inline const ::inner::InnerFriendInfo& InnerFriendsvr_Fromscene_OpenFunc::_internal_oinfo() const {
  const ::inner::InnerFriendInfo* p = oinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::inner::InnerFriendInfo&>(
      ::inner::_InnerFriendInfo_default_instance_);
}
inline const ::inner::InnerFriendInfo& InnerFriendsvr_Fromscene_OpenFunc::oinfo() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr_Fromscene_OpenFunc.oInfo)
  return _internal_oinfo();
}
inline void InnerFriendsvr_Fromscene_OpenFunc::unsafe_arena_set_allocated_oinfo(
    ::inner::InnerFriendInfo* oinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oinfo_);
  }
  oinfo_ = oinfo;
  if (oinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr_Fromscene_OpenFunc.oInfo)
}
inline ::inner::InnerFriendInfo* InnerFriendsvr_Fromscene_OpenFunc::release_oinfo() {
  
  ::inner::InnerFriendInfo* temp = oinfo_;
  oinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::inner::InnerFriendInfo* InnerFriendsvr_Fromscene_OpenFunc::unsafe_arena_release_oinfo() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr_Fromscene_OpenFunc.oInfo)
  
  ::inner::InnerFriendInfo* temp = oinfo_;
  oinfo_ = nullptr;
  return temp;
}
inline ::inner::InnerFriendInfo* InnerFriendsvr_Fromscene_OpenFunc::_internal_mutable_oinfo() {
  
  if (oinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::inner::InnerFriendInfo>(GetArenaForAllocation());
    oinfo_ = p;
  }
  return oinfo_;
}
inline ::inner::InnerFriendInfo* InnerFriendsvr_Fromscene_OpenFunc::mutable_oinfo() {
  ::inner::InnerFriendInfo* _msg = _internal_mutable_oinfo();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr_Fromscene_OpenFunc.oInfo)
  return _msg;
}
inline void InnerFriendsvr_Fromscene_OpenFunc::set_allocated_oinfo(::inner::InnerFriendInfo* oinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oinfo_);
  }
  if (oinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oinfo));
    if (message_arena != submessage_arena) {
      oinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oinfo, submessage_arena);
    }
    
  } else {
    
  }
  oinfo_ = oinfo;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerFriendsvr_Fromscene_OpenFunc.oInfo)
}

// -------------------------------------------------------------------

// InnerFriendsvr_Fromscene_Request

// uint64 llRoleId = 1;
inline void InnerFriendsvr_Fromscene_Request::clear_llroleid() {
  llroleid_ = uint64_t{0u};
}
inline uint64_t InnerFriendsvr_Fromscene_Request::_internal_llroleid() const {
  return llroleid_;
}
inline uint64_t InnerFriendsvr_Fromscene_Request::llroleid() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr_Fromscene_Request.llRoleId)
  return _internal_llroleid();
}
inline void InnerFriendsvr_Fromscene_Request::_internal_set_llroleid(uint64_t value) {
  
  llroleid_ = value;
}
inline void InnerFriendsvr_Fromscene_Request::set_llroleid(uint64_t value) {
  _internal_set_llroleid(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendsvr_Fromscene_Request.llRoleId)
}

// -------------------------------------------------------------------

// InnerFriendsvr_Fromscene_Agree

// uint64 llRoleId = 1;
inline void InnerFriendsvr_Fromscene_Agree::clear_llroleid() {
  llroleid_ = uint64_t{0u};
}
inline uint64_t InnerFriendsvr_Fromscene_Agree::_internal_llroleid() const {
  return llroleid_;
}
inline uint64_t InnerFriendsvr_Fromscene_Agree::llroleid() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr_Fromscene_Agree.llRoleId)
  return _internal_llroleid();
}
inline void InnerFriendsvr_Fromscene_Agree::_internal_set_llroleid(uint64_t value) {
  
  llroleid_ = value;
}
inline void InnerFriendsvr_Fromscene_Agree::set_llroleid(uint64_t value) {
  _internal_set_llroleid(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendsvr_Fromscene_Agree.llRoleId)
}

// -------------------------------------------------------------------

// InnerFriendsvr_Fromscene_Refuse

// uint64 llRoleId = 1;
inline void InnerFriendsvr_Fromscene_Refuse::clear_llroleid() {
  llroleid_ = uint64_t{0u};
}
inline uint64_t InnerFriendsvr_Fromscene_Refuse::_internal_llroleid() const {
  return llroleid_;
}
inline uint64_t InnerFriendsvr_Fromscene_Refuse::llroleid() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr_Fromscene_Refuse.llRoleId)
  return _internal_llroleid();
}
inline void InnerFriendsvr_Fromscene_Refuse::_internal_set_llroleid(uint64_t value) {
  
  llroleid_ = value;
}
inline void InnerFriendsvr_Fromscene_Refuse::set_llroleid(uint64_t value) {
  _internal_set_llroleid(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendsvr_Fromscene_Refuse.llRoleId)
}

// -------------------------------------------------------------------

// InnerFriendsvr_Fromscene_AgreeAll

// -------------------------------------------------------------------

// InnerFriendsvr_Fromscene_RefuseAll

// -------------------------------------------------------------------

// InnerFriendsvr_Fromscene_Remove

// uint64 llRoleId = 1;
inline void InnerFriendsvr_Fromscene_Remove::clear_llroleid() {
  llroleid_ = uint64_t{0u};
}
inline uint64_t InnerFriendsvr_Fromscene_Remove::_internal_llroleid() const {
  return llroleid_;
}
inline uint64_t InnerFriendsvr_Fromscene_Remove::llroleid() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr_Fromscene_Remove.llRoleId)
  return _internal_llroleid();
}
inline void InnerFriendsvr_Fromscene_Remove::_internal_set_llroleid(uint64_t value) {
  
  llroleid_ = value;
}
inline void InnerFriendsvr_Fromscene_Remove::set_llroleid(uint64_t value) {
  _internal_set_llroleid(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendsvr_Fromscene_Remove.llRoleId)
}

// -------------------------------------------------------------------

// InnerFriendsvr_Fromscene_Block

// uint64 llRoleId = 1;
inline void InnerFriendsvr_Fromscene_Block::clear_llroleid() {
  llroleid_ = uint64_t{0u};
}
inline uint64_t InnerFriendsvr_Fromscene_Block::_internal_llroleid() const {
  return llroleid_;
}
inline uint64_t InnerFriendsvr_Fromscene_Block::llroleid() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr_Fromscene_Block.llRoleId)
  return _internal_llroleid();
}
inline void InnerFriendsvr_Fromscene_Block::_internal_set_llroleid(uint64_t value) {
  
  llroleid_ = value;
}
inline void InnerFriendsvr_Fromscene_Block::set_llroleid(uint64_t value) {
  _internal_set_llroleid(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendsvr_Fromscene_Block.llRoleId)
}

// -------------------------------------------------------------------

// InnerFriendsvr_Fromscene_Chat

// uint64 llRecver = 1;
inline void InnerFriendsvr_Fromscene_Chat::clear_llrecver() {
  llrecver_ = uint64_t{0u};
}
inline uint64_t InnerFriendsvr_Fromscene_Chat::_internal_llrecver() const {
  return llrecver_;
}
inline uint64_t InnerFriendsvr_Fromscene_Chat::llrecver() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr_Fromscene_Chat.llRecver)
  return _internal_llrecver();
}
inline void InnerFriendsvr_Fromscene_Chat::_internal_set_llrecver(uint64_t value) {
  
  llrecver_ = value;
}
inline void InnerFriendsvr_Fromscene_Chat::set_llrecver(uint64_t value) {
  _internal_set_llrecver(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendsvr_Fromscene_Chat.llRecver)
}

// uint32 uiChattype = 2;
inline void InnerFriendsvr_Fromscene_Chat::clear_uichattype() {
  uichattype_ = 0u;
}
inline uint32_t InnerFriendsvr_Fromscene_Chat::_internal_uichattype() const {
  return uichattype_;
}
inline uint32_t InnerFriendsvr_Fromscene_Chat::uichattype() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr_Fromscene_Chat.uiChattype)
  return _internal_uichattype();
}
inline void InnerFriendsvr_Fromscene_Chat::_internal_set_uichattype(uint32_t value) {
  
  uichattype_ = value;
}
inline void InnerFriendsvr_Fromscene_Chat::set_uichattype(uint32_t value) {
  _internal_set_uichattype(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendsvr_Fromscene_Chat.uiChattype)
}

// .common.ChatTypeContextDown oContext = 3;
inline bool InnerFriendsvr_Fromscene_Chat::_internal_has_ocontext() const {
  return this != internal_default_instance() && ocontext_ != nullptr;
}
inline bool InnerFriendsvr_Fromscene_Chat::has_ocontext() const {
  return _internal_has_ocontext();
}
inline const ::common::ChatTypeContextDown& InnerFriendsvr_Fromscene_Chat::_internal_ocontext() const {
  const ::common::ChatTypeContextDown* p = ocontext_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ChatTypeContextDown&>(
      ::common::_ChatTypeContextDown_default_instance_);
}
inline const ::common::ChatTypeContextDown& InnerFriendsvr_Fromscene_Chat::ocontext() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr_Fromscene_Chat.oContext)
  return _internal_ocontext();
}
inline void InnerFriendsvr_Fromscene_Chat::unsafe_arena_set_allocated_ocontext(
    ::common::ChatTypeContextDown* ocontext) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ocontext_);
  }
  ocontext_ = ocontext;
  if (ocontext) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr_Fromscene_Chat.oContext)
}
inline ::common::ChatTypeContextDown* InnerFriendsvr_Fromscene_Chat::release_ocontext() {
  
  ::common::ChatTypeContextDown* temp = ocontext_;
  ocontext_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::ChatTypeContextDown* InnerFriendsvr_Fromscene_Chat::unsafe_arena_release_ocontext() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr_Fromscene_Chat.oContext)
  
  ::common::ChatTypeContextDown* temp = ocontext_;
  ocontext_ = nullptr;
  return temp;
}
inline ::common::ChatTypeContextDown* InnerFriendsvr_Fromscene_Chat::_internal_mutable_ocontext() {
  
  if (ocontext_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ChatTypeContextDown>(GetArenaForAllocation());
    ocontext_ = p;
  }
  return ocontext_;
}
inline ::common::ChatTypeContextDown* InnerFriendsvr_Fromscene_Chat::mutable_ocontext() {
  ::common::ChatTypeContextDown* _msg = _internal_mutable_ocontext();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr_Fromscene_Chat.oContext)
  return _msg;
}
inline void InnerFriendsvr_Fromscene_Chat::set_allocated_ocontext(::common::ChatTypeContextDown* ocontext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ocontext_);
  }
  if (ocontext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ocontext));
    if (message_arena != submessage_arena) {
      ocontext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ocontext, submessage_arena);
    }
    
  } else {
    
  }
  ocontext_ = ocontext;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerFriendsvr_Fromscene_Chat.oContext)
}

// -------------------------------------------------------------------

// InnerFriendsvr_Fromscene_Expand

// uint32 uiItemId = 1;
inline void InnerFriendsvr_Fromscene_Expand::clear_uiitemid() {
  uiitemid_ = 0u;
}
inline uint32_t InnerFriendsvr_Fromscene_Expand::_internal_uiitemid() const {
  return uiitemid_;
}
inline uint32_t InnerFriendsvr_Fromscene_Expand::uiitemid() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr_Fromscene_Expand.uiItemId)
  return _internal_uiitemid();
}
inline void InnerFriendsvr_Fromscene_Expand::_internal_set_uiitemid(uint32_t value) {
  
  uiitemid_ = value;
}
inline void InnerFriendsvr_Fromscene_Expand::set_uiitemid(uint32_t value) {
  _internal_set_uiitemid(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendsvr_Fromscene_Expand.uiItemId)
}

// bool bBind = 2;
inline void InnerFriendsvr_Fromscene_Expand::clear_bbind() {
  bbind_ = false;
}
inline bool InnerFriendsvr_Fromscene_Expand::_internal_bbind() const {
  return bbind_;
}
inline bool InnerFriendsvr_Fromscene_Expand::bbind() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr_Fromscene_Expand.bBind)
  return _internal_bbind();
}
inline void InnerFriendsvr_Fromscene_Expand::_internal_set_bbind(bool value) {
  
  bbind_ = value;
}
inline void InnerFriendsvr_Fromscene_Expand::set_bbind(bool value) {
  _internal_set_bbind(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendsvr_Fromscene_Expand.bBind)
}

// uint32 uiAddValue = 3;
inline void InnerFriendsvr_Fromscene_Expand::clear_uiaddvalue() {
  uiaddvalue_ = 0u;
}
inline uint32_t InnerFriendsvr_Fromscene_Expand::_internal_uiaddvalue() const {
  return uiaddvalue_;
}
inline uint32_t InnerFriendsvr_Fromscene_Expand::uiaddvalue() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr_Fromscene_Expand.uiAddValue)
  return _internal_uiaddvalue();
}
inline void InnerFriendsvr_Fromscene_Expand::_internal_set_uiaddvalue(uint32_t value) {
  
  uiaddvalue_ = value;
}
inline void InnerFriendsvr_Fromscene_Expand::set_uiaddvalue(uint32_t value) {
  _internal_set_uiaddvalue(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendsvr_Fromscene_Expand.uiAddValue)
}

// -------------------------------------------------------------------

// InnerFriendsvr_Fromscene_Search

// bytes strRoleName = 1;
inline void InnerFriendsvr_Fromscene_Search::clear_strrolename() {
  strrolename_.ClearToEmpty();
}
inline const std::string& InnerFriendsvr_Fromscene_Search::strrolename() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr_Fromscene_Search.strRoleName)
  return _internal_strrolename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InnerFriendsvr_Fromscene_Search::set_strrolename(ArgT0&& arg0, ArgT... args) {
 
 strrolename_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inner.InnerFriendsvr_Fromscene_Search.strRoleName)
}
inline std::string* InnerFriendsvr_Fromscene_Search::mutable_strrolename() {
  std::string* _s = _internal_mutable_strrolename();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr_Fromscene_Search.strRoleName)
  return _s;
}
inline const std::string& InnerFriendsvr_Fromscene_Search::_internal_strrolename() const {
  return strrolename_.Get();
}
inline void InnerFriendsvr_Fromscene_Search::_internal_set_strrolename(const std::string& value) {
  
  strrolename_.Set(value, GetArenaForAllocation());
}
inline std::string* InnerFriendsvr_Fromscene_Search::_internal_mutable_strrolename() {
  
  return strrolename_.Mutable(GetArenaForAllocation());
}
inline std::string* InnerFriendsvr_Fromscene_Search::release_strrolename() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr_Fromscene_Search.strRoleName)
  return strrolename_.Release();
}
inline void InnerFriendsvr_Fromscene_Search::set_allocated_strrolename(std::string* strrolename) {
  if (strrolename != nullptr) {
    
  } else {
    
  }
  strrolename_.SetAllocated(strrolename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strrolename_.IsDefault()) {
    strrolename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inner.InnerFriendsvr_Fromscene_Search.strRoleName)
}

// -------------------------------------------------------------------

// InnerFriendsvr_Fromscene_Recommend

// -------------------------------------------------------------------

// InnerFriendsvr_Fromscene_Filter

// bool bCity = 1;
inline void InnerFriendsvr_Fromscene_Filter::clear_bcity() {
  bcity_ = false;
}
inline bool InnerFriendsvr_Fromscene_Filter::_internal_bcity() const {
  return bcity_;
}
inline bool InnerFriendsvr_Fromscene_Filter::bcity() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr_Fromscene_Filter.bCity)
  return _internal_bcity();
}
inline void InnerFriendsvr_Fromscene_Filter::_internal_set_bcity(bool value) {
  
  bcity_ = value;
}
inline void InnerFriendsvr_Fromscene_Filter::set_bcity(bool value) {
  _internal_set_bcity(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendsvr_Fromscene_Filter.bCity)
}

// uint32 uiSex = 2;
inline void InnerFriendsvr_Fromscene_Filter::clear_uisex() {
  uisex_ = 0u;
}
inline uint32_t InnerFriendsvr_Fromscene_Filter::_internal_uisex() const {
  return uisex_;
}
inline uint32_t InnerFriendsvr_Fromscene_Filter::uisex() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr_Fromscene_Filter.uiSex)
  return _internal_uisex();
}
inline void InnerFriendsvr_Fromscene_Filter::_internal_set_uisex(uint32_t value) {
  
  uisex_ = value;
}
inline void InnerFriendsvr_Fromscene_Filter::set_uisex(uint32_t value) {
  _internal_set_uisex(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendsvr_Fromscene_Filter.uiSex)
}

// uint32 uiLabel = 3;
inline void InnerFriendsvr_Fromscene_Filter::clear_uilabel() {
  uilabel_ = 0u;
}
inline uint32_t InnerFriendsvr_Fromscene_Filter::_internal_uilabel() const {
  return uilabel_;
}
inline uint32_t InnerFriendsvr_Fromscene_Filter::uilabel() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr_Fromscene_Filter.uiLabel)
  return _internal_uilabel();
}
inline void InnerFriendsvr_Fromscene_Filter::_internal_set_uilabel(uint32_t value) {
  
  uilabel_ = value;
}
inline void InnerFriendsvr_Fromscene_Filter::set_uilabel(uint32_t value) {
  _internal_set_uilabel(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendsvr_Fromscene_Filter.uiLabel)
}

// -------------------------------------------------------------------

// InnerFriendsvr_Fromscene_Labels

// uint32 uiCity = 1;
inline void InnerFriendsvr_Fromscene_Labels::clear_uicity() {
  uicity_ = 0u;
}
inline uint32_t InnerFriendsvr_Fromscene_Labels::_internal_uicity() const {
  return uicity_;
}
inline uint32_t InnerFriendsvr_Fromscene_Labels::uicity() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr_Fromscene_Labels.uiCity)
  return _internal_uicity();
}
inline void InnerFriendsvr_Fromscene_Labels::_internal_set_uicity(uint32_t value) {
  
  uicity_ = value;
}
inline void InnerFriendsvr_Fromscene_Labels::set_uicity(uint32_t value) {
  _internal_set_uicity(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendsvr_Fromscene_Labels.uiCity)
}

// bool bAvailable = 2;
inline void InnerFriendsvr_Fromscene_Labels::clear_bavailable() {
  bavailable_ = false;
}
inline bool InnerFriendsvr_Fromscene_Labels::_internal_bavailable() const {
  return bavailable_;
}
inline bool InnerFriendsvr_Fromscene_Labels::bavailable() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr_Fromscene_Labels.bAvailable)
  return _internal_bavailable();
}
inline void InnerFriendsvr_Fromscene_Labels::_internal_set_bavailable(bool value) {
  
  bavailable_ = value;
}
inline void InnerFriendsvr_Fromscene_Labels::set_bavailable(bool value) {
  _internal_set_bavailable(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendsvr_Fromscene_Labels.bAvailable)
}

// uint32 uiLabel = 3;
inline void InnerFriendsvr_Fromscene_Labels::clear_uilabel() {
  uilabel_ = 0u;
}
inline uint32_t InnerFriendsvr_Fromscene_Labels::_internal_uilabel() const {
  return uilabel_;
}
inline uint32_t InnerFriendsvr_Fromscene_Labels::uilabel() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr_Fromscene_Labels.uiLabel)
  return _internal_uilabel();
}
inline void InnerFriendsvr_Fromscene_Labels::_internal_set_uilabel(uint32_t value) {
  
  uilabel_ = value;
}
inline void InnerFriendsvr_Fromscene_Labels::set_uilabel(uint32_t value) {
  _internal_set_uilabel(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendsvr_Fromscene_Labels.uiLabel)
}

// -------------------------------------------------------------------

// InnerFriendsvr_Fromscene_SendGift

// .inner.InnerFriendGift oGift = 1;
inline bool InnerFriendsvr_Fromscene_SendGift::_internal_has_ogift() const {
  return this != internal_default_instance() && ogift_ != nullptr;
}
inline bool InnerFriendsvr_Fromscene_SendGift::has_ogift() const {
  return _internal_has_ogift();
}
inline const ::inner::InnerFriendGift& InnerFriendsvr_Fromscene_SendGift::_internal_ogift() const {
  const ::inner::InnerFriendGift* p = ogift_;
  return p != nullptr ? *p : reinterpret_cast<const ::inner::InnerFriendGift&>(
      ::inner::_InnerFriendGift_default_instance_);
}
inline const ::inner::InnerFriendGift& InnerFriendsvr_Fromscene_SendGift::ogift() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr_Fromscene_SendGift.oGift)
  return _internal_ogift();
}
inline void InnerFriendsvr_Fromscene_SendGift::unsafe_arena_set_allocated_ogift(
    ::inner::InnerFriendGift* ogift) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ogift_);
  }
  ogift_ = ogift;
  if (ogift) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:inner.InnerFriendsvr_Fromscene_SendGift.oGift)
}
inline ::inner::InnerFriendGift* InnerFriendsvr_Fromscene_SendGift::release_ogift() {
  
  ::inner::InnerFriendGift* temp = ogift_;
  ogift_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::inner::InnerFriendGift* InnerFriendsvr_Fromscene_SendGift::unsafe_arena_release_ogift() {
  // @@protoc_insertion_point(field_release:inner.InnerFriendsvr_Fromscene_SendGift.oGift)
  
  ::inner::InnerFriendGift* temp = ogift_;
  ogift_ = nullptr;
  return temp;
}
inline ::inner::InnerFriendGift* InnerFriendsvr_Fromscene_SendGift::_internal_mutable_ogift() {
  
  if (ogift_ == nullptr) {
    auto* p = CreateMaybeMessage<::inner::InnerFriendGift>(GetArenaForAllocation());
    ogift_ = p;
  }
  return ogift_;
}
inline ::inner::InnerFriendGift* InnerFriendsvr_Fromscene_SendGift::mutable_ogift() {
  ::inner::InnerFriendGift* _msg = _internal_mutable_ogift();
  // @@protoc_insertion_point(field_mutable:inner.InnerFriendsvr_Fromscene_SendGift.oGift)
  return _msg;
}
inline void InnerFriendsvr_Fromscene_SendGift::set_allocated_ogift(::inner::InnerFriendGift* ogift) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ogift_);
  }
  if (ogift) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ogift));
    if (message_arena != submessage_arena) {
      ogift = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ogift, submessage_arena);
    }
    
  } else {
    
  }
  ogift_ = ogift;
  // @@protoc_insertion_point(field_set_allocated:inner.InnerFriendsvr_Fromscene_SendGift.oGift)
}

// -------------------------------------------------------------------

// InnerFriendsvr_Fromscene_ReceiveGift

// uint64 llGiftUid = 1;
inline void InnerFriendsvr_Fromscene_ReceiveGift::clear_llgiftuid() {
  llgiftuid_ = uint64_t{0u};
}
inline uint64_t InnerFriendsvr_Fromscene_ReceiveGift::_internal_llgiftuid() const {
  return llgiftuid_;
}
inline uint64_t InnerFriendsvr_Fromscene_ReceiveGift::llgiftuid() const {
  // @@protoc_insertion_point(field_get:inner.InnerFriendsvr_Fromscene_ReceiveGift.llGiftUid)
  return _internal_llgiftuid();
}
inline void InnerFriendsvr_Fromscene_ReceiveGift::_internal_set_llgiftuid(uint64_t value) {
  
  llgiftuid_ = value;
}
inline void InnerFriendsvr_Fromscene_ReceiveGift::set_llgiftuid(uint64_t value) {
  _internal_set_llgiftuid(value);
  // @@protoc_insertion_point(field_set:inner.InnerFriendsvr_Fromscene_ReceiveGift.llGiftUid)
}

// -------------------------------------------------------------------

// InnerFriendsvr_Fromscene_UserLogin

// -------------------------------------------------------------------

// InnerFriendsvr_Fromscene_UserLogout

// -------------------------------------------------------------------

// InnerFriendsvr_Fromscene_UserOnline

// -------------------------------------------------------------------

// InnerFriendsvr_Fromscene_UserOffline

// -------------------------------------------------------------------

// InnerFriendsvr_Fromscene_RecvMail

// -------------------------------------------------------------------

// InnerFriendsvr_Fromscene_ExpiredMail

// -------------------------------------------------------------------

// InnerFriendsvr_Fromscene_MailFull

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace inner

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_friendsvr_2eproto
