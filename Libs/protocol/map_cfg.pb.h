// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_cfg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_map_5fcfg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_map_5fcfg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_map_5fcfg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_map_5fcfg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_5fcfg_2eproto;
namespace packet {
class BrushAll;
struct BrushAllDefaultTypeInternal;
extern BrushAllDefaultTypeInternal _BrushAll_default_instance_;
class BrushInMapInfo;
struct BrushInMapInfoDefaultTypeInternal;
extern BrushInMapInfoDefaultTypeInternal _BrushInMapInfo_default_instance_;
class BrushInMapInfo_Point;
struct BrushInMapInfo_PointDefaultTypeInternal;
extern BrushInMapInfo_PointDefaultTypeInternal _BrushInMapInfo_Point_default_instance_;
class BrushInMapInfo_PointGroup;
struct BrushInMapInfo_PointGroupDefaultTypeInternal;
extern BrushInMapInfo_PointGroupDefaultTypeInternal _BrushInMapInfo_PointGroup_default_instance_;
class BrushInMapInfo_Range;
struct BrushInMapInfo_RangeDefaultTypeInternal;
extern BrushInMapInfo_RangeDefaultTypeInternal _BrushInMapInfo_Range_default_instance_;
class BrushInfo;
struct BrushInfoDefaultTypeInternal;
extern BrushInfoDefaultTypeInternal _BrushInfo_default_instance_;
class BrushInfo_BlockArea;
struct BrushInfo_BlockAreaDefaultTypeInternal;
extern BrushInfo_BlockAreaDefaultTypeInternal _BrushInfo_BlockArea_default_instance_;
class BrushInfo_RigIdNpc;
struct BrushInfo_RigIdNpcDefaultTypeInternal;
extern BrushInfo_RigIdNpcDefaultTypeInternal _BrushInfo_RigIdNpc_default_instance_;
class BrushInfo_RigIdNpc_NpcUnit;
struct BrushInfo_RigIdNpc_NpcUnitDefaultTypeInternal;
extern BrushInfo_RigIdNpc_NpcUnitDefaultTypeInternal _BrushInfo_RigIdNpc_NpcUnit_default_instance_;
class BrushInfo_Teleporter;
struct BrushInfo_TeleporterDefaultTypeInternal;
extern BrushInfo_TeleporterDefaultTypeInternal _BrushInfo_Teleporter_default_instance_;
}  // namespace packet
PROTOBUF_NAMESPACE_OPEN
template<> ::packet::BrushAll* Arena::CreateMaybeMessage<::packet::BrushAll>(Arena*);
template<> ::packet::BrushInMapInfo* Arena::CreateMaybeMessage<::packet::BrushInMapInfo>(Arena*);
template<> ::packet::BrushInMapInfo_Point* Arena::CreateMaybeMessage<::packet::BrushInMapInfo_Point>(Arena*);
template<> ::packet::BrushInMapInfo_PointGroup* Arena::CreateMaybeMessage<::packet::BrushInMapInfo_PointGroup>(Arena*);
template<> ::packet::BrushInMapInfo_Range* Arena::CreateMaybeMessage<::packet::BrushInMapInfo_Range>(Arena*);
template<> ::packet::BrushInfo* Arena::CreateMaybeMessage<::packet::BrushInfo>(Arena*);
template<> ::packet::BrushInfo_BlockArea* Arena::CreateMaybeMessage<::packet::BrushInfo_BlockArea>(Arena*);
template<> ::packet::BrushInfo_RigIdNpc* Arena::CreateMaybeMessage<::packet::BrushInfo_RigIdNpc>(Arena*);
template<> ::packet::BrushInfo_RigIdNpc_NpcUnit* Arena::CreateMaybeMessage<::packet::BrushInfo_RigIdNpc_NpcUnit>(Arena*);
template<> ::packet::BrushInfo_Teleporter* Arena::CreateMaybeMessage<::packet::BrushInfo_Teleporter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace packet {

// ===================================================================

class BrushInfo_RigIdNpc_NpcUnit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:packet.BrushInfo.RigIdNpc.NpcUnit) */ {
 public:
  inline BrushInfo_RigIdNpc_NpcUnit() : BrushInfo_RigIdNpc_NpcUnit(nullptr) {}
  ~BrushInfo_RigIdNpc_NpcUnit() override;
  explicit PROTOBUF_CONSTEXPR BrushInfo_RigIdNpc_NpcUnit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrushInfo_RigIdNpc_NpcUnit(const BrushInfo_RigIdNpc_NpcUnit& from);
  BrushInfo_RigIdNpc_NpcUnit(BrushInfo_RigIdNpc_NpcUnit&& from) noexcept
    : BrushInfo_RigIdNpc_NpcUnit() {
    *this = ::std::move(from);
  }

  inline BrushInfo_RigIdNpc_NpcUnit& operator=(const BrushInfo_RigIdNpc_NpcUnit& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrushInfo_RigIdNpc_NpcUnit& operator=(BrushInfo_RigIdNpc_NpcUnit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrushInfo_RigIdNpc_NpcUnit& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrushInfo_RigIdNpc_NpcUnit* internal_default_instance() {
    return reinterpret_cast<const BrushInfo_RigIdNpc_NpcUnit*>(
               &_BrushInfo_RigIdNpc_NpcUnit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BrushInfo_RigIdNpc_NpcUnit& a, BrushInfo_RigIdNpc_NpcUnit& b) {
    a.Swap(&b);
  }
  inline void Swap(BrushInfo_RigIdNpc_NpcUnit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrushInfo_RigIdNpc_NpcUnit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrushInfo_RigIdNpc_NpcUnit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrushInfo_RigIdNpc_NpcUnit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrushInfo_RigIdNpc_NpcUnit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BrushInfo_RigIdNpc_NpcUnit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrushInfo_RigIdNpc_NpcUnit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packet.BrushInfo.RigIdNpc.NpcUnit";
  }
  protected:
  explicit BrushInfo_RigIdNpc_NpcUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNpcIdFieldNumber = 1,
    kLocationOffsetXFieldNumber = 2,
    kLocationOffsetYFieldNumber = 3,
    kRotationOffsetXFieldNumber = 4,
    kRotationOffsetYFieldNumber = 5,
    kRotationOffsetZFieldNumber = 6,
    kTriggerAreaXFieldNumber = 7,
    kTriggerAreaYFieldNumber = 8,
    kTriggerAreaZFieldNumber = 9,
    kTriggerAreaOffsetXFieldNumber = 10,
    kTriggerAreaOffsetYFieldNumber = 11,
  };
  // uint32 npcId = 1;
  void clear_npcid();
  uint32_t npcid() const;
  void set_npcid(uint32_t value);
  private:
  uint32_t _internal_npcid() const;
  void _internal_set_npcid(uint32_t value);
  public:

  // float locationOffsetX = 2;
  void clear_locationoffsetx();
  float locationoffsetx() const;
  void set_locationoffsetx(float value);
  private:
  float _internal_locationoffsetx() const;
  void _internal_set_locationoffsetx(float value);
  public:

  // float locationOffsetY = 3;
  void clear_locationoffsety();
  float locationoffsety() const;
  void set_locationoffsety(float value);
  private:
  float _internal_locationoffsety() const;
  void _internal_set_locationoffsety(float value);
  public:

  // float rotationOffsetX = 4;
  void clear_rotationoffsetx();
  float rotationoffsetx() const;
  void set_rotationoffsetx(float value);
  private:
  float _internal_rotationoffsetx() const;
  void _internal_set_rotationoffsetx(float value);
  public:

  // float rotationOffsetY = 5;
  void clear_rotationoffsety();
  float rotationoffsety() const;
  void set_rotationoffsety(float value);
  private:
  float _internal_rotationoffsety() const;
  void _internal_set_rotationoffsety(float value);
  public:

  // float rotationOffsetZ = 6;
  void clear_rotationoffsetz();
  float rotationoffsetz() const;
  void set_rotationoffsetz(float value);
  private:
  float _internal_rotationoffsetz() const;
  void _internal_set_rotationoffsetz(float value);
  public:

  // float triggerAreaX = 7;
  void clear_triggerareax();
  float triggerareax() const;
  void set_triggerareax(float value);
  private:
  float _internal_triggerareax() const;
  void _internal_set_triggerareax(float value);
  public:

  // float triggerAreaY = 8;
  void clear_triggerareay();
  float triggerareay() const;
  void set_triggerareay(float value);
  private:
  float _internal_triggerareay() const;
  void _internal_set_triggerareay(float value);
  public:

  // float triggerAreaZ = 9;
  void clear_triggerareaz();
  float triggerareaz() const;
  void set_triggerareaz(float value);
  private:
  float _internal_triggerareaz() const;
  void _internal_set_triggerareaz(float value);
  public:

  // float triggerAreaOffsetX = 10;
  void clear_triggerareaoffsetx();
  float triggerareaoffsetx() const;
  void set_triggerareaoffsetx(float value);
  private:
  float _internal_triggerareaoffsetx() const;
  void _internal_set_triggerareaoffsetx(float value);
  public:

  // float triggerAreaOffsetY = 11;
  void clear_triggerareaoffsety();
  float triggerareaoffsety() const;
  void set_triggerareaoffsety(float value);
  private:
  float _internal_triggerareaoffsety() const;
  void _internal_set_triggerareaoffsety(float value);
  public:

  // @@protoc_insertion_point(class_scope:packet.BrushInfo.RigIdNpc.NpcUnit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t npcid_;
  float locationoffsetx_;
  float locationoffsety_;
  float rotationoffsetx_;
  float rotationoffsety_;
  float rotationoffsetz_;
  float triggerareax_;
  float triggerareay_;
  float triggerareaz_;
  float triggerareaoffsetx_;
  float triggerareaoffsety_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5fcfg_2eproto;
};
// -------------------------------------------------------------------

class BrushInfo_RigIdNpc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:packet.BrushInfo.RigIdNpc) */ {
 public:
  inline BrushInfo_RigIdNpc() : BrushInfo_RigIdNpc(nullptr) {}
  ~BrushInfo_RigIdNpc() override;
  explicit PROTOBUF_CONSTEXPR BrushInfo_RigIdNpc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrushInfo_RigIdNpc(const BrushInfo_RigIdNpc& from);
  BrushInfo_RigIdNpc(BrushInfo_RigIdNpc&& from) noexcept
    : BrushInfo_RigIdNpc() {
    *this = ::std::move(from);
  }

  inline BrushInfo_RigIdNpc& operator=(const BrushInfo_RigIdNpc& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrushInfo_RigIdNpc& operator=(BrushInfo_RigIdNpc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrushInfo_RigIdNpc& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrushInfo_RigIdNpc* internal_default_instance() {
    return reinterpret_cast<const BrushInfo_RigIdNpc*>(
               &_BrushInfo_RigIdNpc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BrushInfo_RigIdNpc& a, BrushInfo_RigIdNpc& b) {
    a.Swap(&b);
  }
  inline void Swap(BrushInfo_RigIdNpc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrushInfo_RigIdNpc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrushInfo_RigIdNpc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrushInfo_RigIdNpc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrushInfo_RigIdNpc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BrushInfo_RigIdNpc& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrushInfo_RigIdNpc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packet.BrushInfo.RigIdNpc";
  }
  protected:
  explicit BrushInfo_RigIdNpc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BrushInfo_RigIdNpc_NpcUnit NpcUnit;

  // accessors -------------------------------------------------------

  enum : int {
    kVecNpcsFieldNumber = 1,
  };
  // repeated .packet.BrushInfo.RigIdNpc.NpcUnit vecNpcs = 1;
  int vecnpcs_size() const;
  private:
  int _internal_vecnpcs_size() const;
  public:
  void clear_vecnpcs();
  ::packet::BrushInfo_RigIdNpc_NpcUnit* mutable_vecnpcs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::packet::BrushInfo_RigIdNpc_NpcUnit >*
      mutable_vecnpcs();
  private:
  const ::packet::BrushInfo_RigIdNpc_NpcUnit& _internal_vecnpcs(int index) const;
  ::packet::BrushInfo_RigIdNpc_NpcUnit* _internal_add_vecnpcs();
  public:
  const ::packet::BrushInfo_RigIdNpc_NpcUnit& vecnpcs(int index) const;
  ::packet::BrushInfo_RigIdNpc_NpcUnit* add_vecnpcs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::packet::BrushInfo_RigIdNpc_NpcUnit >&
      vecnpcs() const;

  // @@protoc_insertion_point(class_scope:packet.BrushInfo.RigIdNpc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::packet::BrushInfo_RigIdNpc_NpcUnit > vecnpcs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5fcfg_2eproto;
};
// -------------------------------------------------------------------

class BrushInfo_Teleporter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:packet.BrushInfo.Teleporter) */ {
 public:
  inline BrushInfo_Teleporter() : BrushInfo_Teleporter(nullptr) {}
  ~BrushInfo_Teleporter() override;
  explicit PROTOBUF_CONSTEXPR BrushInfo_Teleporter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrushInfo_Teleporter(const BrushInfo_Teleporter& from);
  BrushInfo_Teleporter(BrushInfo_Teleporter&& from) noexcept
    : BrushInfo_Teleporter() {
    *this = ::std::move(from);
  }

  inline BrushInfo_Teleporter& operator=(const BrushInfo_Teleporter& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrushInfo_Teleporter& operator=(BrushInfo_Teleporter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrushInfo_Teleporter& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrushInfo_Teleporter* internal_default_instance() {
    return reinterpret_cast<const BrushInfo_Teleporter*>(
               &_BrushInfo_Teleporter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BrushInfo_Teleporter& a, BrushInfo_Teleporter& b) {
    a.Swap(&b);
  }
  inline void Swap(BrushInfo_Teleporter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrushInfo_Teleporter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrushInfo_Teleporter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrushInfo_Teleporter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrushInfo_Teleporter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BrushInfo_Teleporter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrushInfo_Teleporter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packet.BrushInfo.Teleporter";
  }
  protected:
  explicit BrushInfo_Teleporter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeleportTypeFieldNumber = 1,
    kTargetMapFieldNumber = 2,
    kLocationXFieldNumber = 3,
    kLocationYFieldNumber = 4,
    kRotationXFieldNumber = 5,
    kRotationYFieldNumber = 6,
    kRotationZFieldNumber = 7,
    kTriggerAreaXFieldNumber = 8,
    kTriggerAreaYFieldNumber = 9,
    kTriggerAreaZFieldNumber = 10,
    kTriggerAreaOffsetXFieldNumber = 11,
    kTriggerAreaOffsetYFieldNumber = 12,
    kTeleportAnimFieldNumber = 13,
  };
  // uint32 teleportType = 1;
  void clear_teleporttype();
  uint32_t teleporttype() const;
  void set_teleporttype(uint32_t value);
  private:
  uint32_t _internal_teleporttype() const;
  void _internal_set_teleporttype(uint32_t value);
  public:

  // uint32 targetMap = 2;
  void clear_targetmap();
  uint32_t targetmap() const;
  void set_targetmap(uint32_t value);
  private:
  uint32_t _internal_targetmap() const;
  void _internal_set_targetmap(uint32_t value);
  public:

  // float locationX = 3;
  void clear_locationx();
  float locationx() const;
  void set_locationx(float value);
  private:
  float _internal_locationx() const;
  void _internal_set_locationx(float value);
  public:

  // float locationY = 4;
  void clear_locationy();
  float locationy() const;
  void set_locationy(float value);
  private:
  float _internal_locationy() const;
  void _internal_set_locationy(float value);
  public:

  // float rotationX = 5;
  void clear_rotationx();
  float rotationx() const;
  void set_rotationx(float value);
  private:
  float _internal_rotationx() const;
  void _internal_set_rotationx(float value);
  public:

  // float rotationY = 6;
  void clear_rotationy();
  float rotationy() const;
  void set_rotationy(float value);
  private:
  float _internal_rotationy() const;
  void _internal_set_rotationy(float value);
  public:

  // float rotationZ = 7;
  void clear_rotationz();
  float rotationz() const;
  void set_rotationz(float value);
  private:
  float _internal_rotationz() const;
  void _internal_set_rotationz(float value);
  public:

  // float triggerAreaX = 8;
  void clear_triggerareax();
  float triggerareax() const;
  void set_triggerareax(float value);
  private:
  float _internal_triggerareax() const;
  void _internal_set_triggerareax(float value);
  public:

  // float triggerAreaY = 9;
  void clear_triggerareay();
  float triggerareay() const;
  void set_triggerareay(float value);
  private:
  float _internal_triggerareay() const;
  void _internal_set_triggerareay(float value);
  public:

  // float triggerAreaZ = 10;
  void clear_triggerareaz();
  float triggerareaz() const;
  void set_triggerareaz(float value);
  private:
  float _internal_triggerareaz() const;
  void _internal_set_triggerareaz(float value);
  public:

  // float triggerAreaOffsetX = 11;
  void clear_triggerareaoffsetx();
  float triggerareaoffsetx() const;
  void set_triggerareaoffsetx(float value);
  private:
  float _internal_triggerareaoffsetx() const;
  void _internal_set_triggerareaoffsetx(float value);
  public:

  // float triggerAreaOffsetY = 12;
  void clear_triggerareaoffsety();
  float triggerareaoffsety() const;
  void set_triggerareaoffsety(float value);
  private:
  float _internal_triggerareaoffsety() const;
  void _internal_set_triggerareaoffsety(float value);
  public:

  // uint32 teleportAnim = 13;
  void clear_teleportanim();
  uint32_t teleportanim() const;
  void set_teleportanim(uint32_t value);
  private:
  uint32_t _internal_teleportanim() const;
  void _internal_set_teleportanim(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:packet.BrushInfo.Teleporter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t teleporttype_;
  uint32_t targetmap_;
  float locationx_;
  float locationy_;
  float rotationx_;
  float rotationy_;
  float rotationz_;
  float triggerareax_;
  float triggerareay_;
  float triggerareaz_;
  float triggerareaoffsetx_;
  float triggerareaoffsety_;
  uint32_t teleportanim_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5fcfg_2eproto;
};
// -------------------------------------------------------------------

class BrushInfo_BlockArea final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:packet.BrushInfo.BlockArea) */ {
 public:
  inline BrushInfo_BlockArea() : BrushInfo_BlockArea(nullptr) {}
  ~BrushInfo_BlockArea() override;
  explicit PROTOBUF_CONSTEXPR BrushInfo_BlockArea(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrushInfo_BlockArea(const BrushInfo_BlockArea& from);
  BrushInfo_BlockArea(BrushInfo_BlockArea&& from) noexcept
    : BrushInfo_BlockArea() {
    *this = ::std::move(from);
  }

  inline BrushInfo_BlockArea& operator=(const BrushInfo_BlockArea& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrushInfo_BlockArea& operator=(BrushInfo_BlockArea&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrushInfo_BlockArea& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrushInfo_BlockArea* internal_default_instance() {
    return reinterpret_cast<const BrushInfo_BlockArea*>(
               &_BrushInfo_BlockArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BrushInfo_BlockArea& a, BrushInfo_BlockArea& b) {
    a.Swap(&b);
  }
  inline void Swap(BrushInfo_BlockArea* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrushInfo_BlockArea* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrushInfo_BlockArea* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrushInfo_BlockArea>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrushInfo_BlockArea& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BrushInfo_BlockArea& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrushInfo_BlockArea* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packet.BrushInfo.BlockArea";
  }
  protected:
  explicit BrushInfo_BlockArea(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockAreaIdFieldNumber = 1,
    kBlockAreaXFieldNumber = 2,
    kBlockAreaYFieldNumber = 3,
    kBlockAreaZFieldNumber = 4,
    kBlockAreaOffsetXFieldNumber = 5,
    kBlockAreaOffsetYFieldNumber = 6,
  };
  // uint32 blockAreaId = 1;
  void clear_blockareaid();
  uint32_t blockareaid() const;
  void set_blockareaid(uint32_t value);
  private:
  uint32_t _internal_blockareaid() const;
  void _internal_set_blockareaid(uint32_t value);
  public:

  // float blockAreaX = 2;
  void clear_blockareax();
  float blockareax() const;
  void set_blockareax(float value);
  private:
  float _internal_blockareax() const;
  void _internal_set_blockareax(float value);
  public:

  // float blockAreaY = 3;
  void clear_blockareay();
  float blockareay() const;
  void set_blockareay(float value);
  private:
  float _internal_blockareay() const;
  void _internal_set_blockareay(float value);
  public:

  // float blockAreaZ = 4;
  void clear_blockareaz();
  float blockareaz() const;
  void set_blockareaz(float value);
  private:
  float _internal_blockareaz() const;
  void _internal_set_blockareaz(float value);
  public:

  // float blockAreaOffsetX = 5;
  void clear_blockareaoffsetx();
  float blockareaoffsetx() const;
  void set_blockareaoffsetx(float value);
  private:
  float _internal_blockareaoffsetx() const;
  void _internal_set_blockareaoffsetx(float value);
  public:

  // float blockAreaOffsetY = 6;
  void clear_blockareaoffsety();
  float blockareaoffsety() const;
  void set_blockareaoffsety(float value);
  private:
  float _internal_blockareaoffsety() const;
  void _internal_set_blockareaoffsety(float value);
  public:

  // @@protoc_insertion_point(class_scope:packet.BrushInfo.BlockArea)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t blockareaid_;
  float blockareax_;
  float blockareay_;
  float blockareaz_;
  float blockareaoffsetx_;
  float blockareaoffsety_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5fcfg_2eproto;
};
// -------------------------------------------------------------------

class BrushInfo final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:packet.BrushInfo) */ {
 public:
  inline BrushInfo() : BrushInfo(nullptr) {}
  explicit PROTOBUF_CONSTEXPR BrushInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrushInfo(const BrushInfo& from);
  BrushInfo(BrushInfo&& from) noexcept
    : BrushInfo() {
    *this = ::std::move(from);
  }

  inline BrushInfo& operator=(const BrushInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrushInfo& operator=(BrushInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrushInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrushInfo* internal_default_instance() {
    return reinterpret_cast<const BrushInfo*>(
               &_BrushInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BrushInfo& a, BrushInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BrushInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrushInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrushInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrushInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BrushInfo& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BrushInfo& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packet.BrushInfo";
  }
  protected:
  explicit BrushInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BrushInfo_RigIdNpc RigIdNpc;
  typedef BrushInfo_Teleporter Teleporter;
  typedef BrushInfo_BlockArea BlockArea;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:packet.BrushInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_map_5fcfg_2eproto;
};
// -------------------------------------------------------------------

class BrushAll final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:packet.BrushAll) */ {
 public:
  inline BrushAll() : BrushAll(nullptr) {}
  ~BrushAll() override;
  explicit PROTOBUF_CONSTEXPR BrushAll(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrushAll(const BrushAll& from);
  BrushAll(BrushAll&& from) noexcept
    : BrushAll() {
    *this = ::std::move(from);
  }

  inline BrushAll& operator=(const BrushAll& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrushAll& operator=(BrushAll&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrushAll& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrushAll* internal_default_instance() {
    return reinterpret_cast<const BrushAll*>(
               &_BrushAll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BrushAll& a, BrushAll& b) {
    a.Swap(&b);
  }
  inline void Swap(BrushAll* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrushAll* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrushAll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrushAll>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrushAll& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BrushAll& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrushAll* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packet.BrushAll";
  }
  protected:
  explicit BrushAll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrushInfosFieldNumber = 1,
  };
  // repeated .packet.BrushInfo brushInfos = 1;
  int brushinfos_size() const;
  private:
  int _internal_brushinfos_size() const;
  public:
  void clear_brushinfos();
  ::packet::BrushInfo* mutable_brushinfos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::packet::BrushInfo >*
      mutable_brushinfos();
  private:
  const ::packet::BrushInfo& _internal_brushinfos(int index) const;
  ::packet::BrushInfo* _internal_add_brushinfos();
  public:
  const ::packet::BrushInfo& brushinfos(int index) const;
  ::packet::BrushInfo* add_brushinfos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::packet::BrushInfo >&
      brushinfos() const;

  // @@protoc_insertion_point(class_scope:packet.BrushAll)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::packet::BrushInfo > brushinfos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5fcfg_2eproto;
};
// -------------------------------------------------------------------

class BrushInMapInfo_Range final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:packet.BrushInMapInfo.Range) */ {
 public:
  inline BrushInMapInfo_Range() : BrushInMapInfo_Range(nullptr) {}
  ~BrushInMapInfo_Range() override;
  explicit PROTOBUF_CONSTEXPR BrushInMapInfo_Range(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrushInMapInfo_Range(const BrushInMapInfo_Range& from);
  BrushInMapInfo_Range(BrushInMapInfo_Range&& from) noexcept
    : BrushInMapInfo_Range() {
    *this = ::std::move(from);
  }

  inline BrushInMapInfo_Range& operator=(const BrushInMapInfo_Range& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrushInMapInfo_Range& operator=(BrushInMapInfo_Range&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrushInMapInfo_Range& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrushInMapInfo_Range* internal_default_instance() {
    return reinterpret_cast<const BrushInMapInfo_Range*>(
               &_BrushInMapInfo_Range_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BrushInMapInfo_Range& a, BrushInMapInfo_Range& b) {
    a.Swap(&b);
  }
  inline void Swap(BrushInMapInfo_Range* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrushInMapInfo_Range* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrushInMapInfo_Range* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrushInMapInfo_Range>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrushInMapInfo_Range& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BrushInMapInfo_Range& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrushInMapInfo_Range* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packet.BrushInMapInfo.Range";
  }
  protected:
  explicit BrushInMapInfo_Range(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxPosXFieldNumber = 3,
    kMaxPosYFieldNumber = 4,
  };
  // uint32 maxPosX = 3;
  void clear_maxposx();
  uint32_t maxposx() const;
  void set_maxposx(uint32_t value);
  private:
  uint32_t _internal_maxposx() const;
  void _internal_set_maxposx(uint32_t value);
  public:

  // uint32 maxPosY = 4;
  void clear_maxposy();
  uint32_t maxposy() const;
  void set_maxposy(uint32_t value);
  private:
  uint32_t _internal_maxposy() const;
  void _internal_set_maxposy(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:packet.BrushInMapInfo.Range)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t maxposx_;
  uint32_t maxposy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5fcfg_2eproto;
};
// -------------------------------------------------------------------

class BrushInMapInfo_Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:packet.BrushInMapInfo.Point) */ {
 public:
  inline BrushInMapInfo_Point() : BrushInMapInfo_Point(nullptr) {}
  ~BrushInMapInfo_Point() override;
  explicit PROTOBUF_CONSTEXPR BrushInMapInfo_Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrushInMapInfo_Point(const BrushInMapInfo_Point& from);
  BrushInMapInfo_Point(BrushInMapInfo_Point&& from) noexcept
    : BrushInMapInfo_Point() {
    *this = ::std::move(from);
  }

  inline BrushInMapInfo_Point& operator=(const BrushInMapInfo_Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrushInMapInfo_Point& operator=(BrushInMapInfo_Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrushInMapInfo_Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrushInMapInfo_Point* internal_default_instance() {
    return reinterpret_cast<const BrushInMapInfo_Point*>(
               &_BrushInMapInfo_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BrushInMapInfo_Point& a, BrushInMapInfo_Point& b) {
    a.Swap(&b);
  }
  inline void Swap(BrushInMapInfo_Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrushInMapInfo_Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrushInMapInfo_Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrushInMapInfo_Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrushInMapInfo_Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BrushInMapInfo_Point& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrushInMapInfo_Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packet.BrushInMapInfo.Point";
  }
  protected:
  explicit BrushInMapInfo_Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosXFieldNumber = 1,
    kPosYFieldNumber = 2,
    kRotXFieldNumber = 3,
    kRotYFieldNumber = 4,
    kRotZFieldNumber = 5,
  };
  // uint32 posX = 1;
  void clear_posx();
  uint32_t posx() const;
  void set_posx(uint32_t value);
  private:
  uint32_t _internal_posx() const;
  void _internal_set_posx(uint32_t value);
  public:

  // uint32 posY = 2;
  void clear_posy();
  uint32_t posy() const;
  void set_posy(uint32_t value);
  private:
  uint32_t _internal_posy() const;
  void _internal_set_posy(uint32_t value);
  public:

  // uint32 rotX = 3;
  void clear_rotx();
  uint32_t rotx() const;
  void set_rotx(uint32_t value);
  private:
  uint32_t _internal_rotx() const;
  void _internal_set_rotx(uint32_t value);
  public:

  // uint32 rotY = 4;
  void clear_roty();
  uint32_t roty() const;
  void set_roty(uint32_t value);
  private:
  uint32_t _internal_roty() const;
  void _internal_set_roty(uint32_t value);
  public:

  // uint32 rotZ = 5;
  void clear_rotz();
  uint32_t rotz() const;
  void set_rotz(uint32_t value);
  private:
  uint32_t _internal_rotz() const;
  void _internal_set_rotz(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:packet.BrushInMapInfo.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t posx_;
  uint32_t posy_;
  uint32_t rotx_;
  uint32_t roty_;
  uint32_t rotz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5fcfg_2eproto;
};
// -------------------------------------------------------------------

class BrushInMapInfo_PointGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:packet.BrushInMapInfo.PointGroup) */ {
 public:
  inline BrushInMapInfo_PointGroup() : BrushInMapInfo_PointGroup(nullptr) {}
  ~BrushInMapInfo_PointGroup() override;
  explicit PROTOBUF_CONSTEXPR BrushInMapInfo_PointGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrushInMapInfo_PointGroup(const BrushInMapInfo_PointGroup& from);
  BrushInMapInfo_PointGroup(BrushInMapInfo_PointGroup&& from) noexcept
    : BrushInMapInfo_PointGroup() {
    *this = ::std::move(from);
  }

  inline BrushInMapInfo_PointGroup& operator=(const BrushInMapInfo_PointGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrushInMapInfo_PointGroup& operator=(BrushInMapInfo_PointGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrushInMapInfo_PointGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrushInMapInfo_PointGroup* internal_default_instance() {
    return reinterpret_cast<const BrushInMapInfo_PointGroup*>(
               &_BrushInMapInfo_PointGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BrushInMapInfo_PointGroup& a, BrushInMapInfo_PointGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(BrushInMapInfo_PointGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrushInMapInfo_PointGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrushInMapInfo_PointGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrushInMapInfo_PointGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrushInMapInfo_PointGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BrushInMapInfo_PointGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrushInMapInfo_PointGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packet.BrushInMapInfo.PointGroup";
  }
  protected:
  explicit BrushInMapInfo_PointGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .packet.BrushInMapInfo.Point points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::packet::BrushInMapInfo_Point* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::packet::BrushInMapInfo_Point >*
      mutable_points();
  private:
  const ::packet::BrushInMapInfo_Point& _internal_points(int index) const;
  ::packet::BrushInMapInfo_Point* _internal_add_points();
  public:
  const ::packet::BrushInMapInfo_Point& points(int index) const;
  ::packet::BrushInMapInfo_Point* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::packet::BrushInMapInfo_Point >&
      points() const;

  // @@protoc_insertion_point(class_scope:packet.BrushInMapInfo.PointGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::packet::BrushInMapInfo_Point > points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5fcfg_2eproto;
};
// -------------------------------------------------------------------

class BrushInMapInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:packet.BrushInMapInfo) */ {
 public:
  inline BrushInMapInfo() : BrushInMapInfo(nullptr) {}
  ~BrushInMapInfo() override;
  explicit PROTOBUF_CONSTEXPR BrushInMapInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrushInMapInfo(const BrushInMapInfo& from);
  BrushInMapInfo(BrushInMapInfo&& from) noexcept
    : BrushInMapInfo() {
    *this = ::std::move(from);
  }

  inline BrushInMapInfo& operator=(const BrushInMapInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrushInMapInfo& operator=(BrushInMapInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrushInMapInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrushInMapInfo* internal_default_instance() {
    return reinterpret_cast<const BrushInMapInfo*>(
               &_BrushInMapInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BrushInMapInfo& a, BrushInMapInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BrushInMapInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrushInMapInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrushInMapInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrushInMapInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrushInMapInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BrushInMapInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrushInMapInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packet.BrushInMapInfo";
  }
  protected:
  explicit BrushInMapInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BrushInMapInfo_Range Range;
  typedef BrushInMapInfo_Point Point;
  typedef BrushInMapInfo_PointGroup PointGroup;

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 3,
    kVecPointFieldNumber = 4,
    kRangeFieldNumber = 5,
    kBrushIdFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .packet.BrushInMapInfo.Point point = 3;
  bool has_point() const;
  private:
  bool _internal_has_point() const;
  public:
  void clear_point();
  const ::packet::BrushInMapInfo_Point& point() const;
  PROTOBUF_NODISCARD ::packet::BrushInMapInfo_Point* release_point();
  ::packet::BrushInMapInfo_Point* mutable_point();
  void set_allocated_point(::packet::BrushInMapInfo_Point* point);
  private:
  const ::packet::BrushInMapInfo_Point& _internal_point() const;
  ::packet::BrushInMapInfo_Point* _internal_mutable_point();
  public:
  void unsafe_arena_set_allocated_point(
      ::packet::BrushInMapInfo_Point* point);
  ::packet::BrushInMapInfo_Point* unsafe_arena_release_point();

  // .packet.BrushInMapInfo.PointGroup vecPoint = 4;
  bool has_vecpoint() const;
  private:
  bool _internal_has_vecpoint() const;
  public:
  void clear_vecpoint();
  const ::packet::BrushInMapInfo_PointGroup& vecpoint() const;
  PROTOBUF_NODISCARD ::packet::BrushInMapInfo_PointGroup* release_vecpoint();
  ::packet::BrushInMapInfo_PointGroup* mutable_vecpoint();
  void set_allocated_vecpoint(::packet::BrushInMapInfo_PointGroup* vecpoint);
  private:
  const ::packet::BrushInMapInfo_PointGroup& _internal_vecpoint() const;
  ::packet::BrushInMapInfo_PointGroup* _internal_mutable_vecpoint();
  public:
  void unsafe_arena_set_allocated_vecpoint(
      ::packet::BrushInMapInfo_PointGroup* vecpoint);
  ::packet::BrushInMapInfo_PointGroup* unsafe_arena_release_vecpoint();

  // .packet.BrushInMapInfo.Range range = 5;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::packet::BrushInMapInfo_Range& range() const;
  PROTOBUF_NODISCARD ::packet::BrushInMapInfo_Range* release_range();
  ::packet::BrushInMapInfo_Range* mutable_range();
  void set_allocated_range(::packet::BrushInMapInfo_Range* range);
  private:
  const ::packet::BrushInMapInfo_Range& _internal_range() const;
  ::packet::BrushInMapInfo_Range* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::packet::BrushInMapInfo_Range* range);
  ::packet::BrushInMapInfo_Range* unsafe_arena_release_range();

  // uint64 brushId = 2;
  void clear_brushid();
  uint64_t brushid() const;
  void set_brushid(uint64_t value);
  private:
  uint64_t _internal_brushid() const;
  void _internal_set_brushid(uint64_t value);
  public:

  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:packet.BrushInMapInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::packet::BrushInMapInfo_Point* point_;
  ::packet::BrushInMapInfo_PointGroup* vecpoint_;
  ::packet::BrushInMapInfo_Range* range_;
  uint64_t brushid_;
  uint32_t type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5fcfg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BrushInfo_RigIdNpc_NpcUnit

// uint32 npcId = 1;
inline void BrushInfo_RigIdNpc_NpcUnit::clear_npcid() {
  npcid_ = 0u;
}
inline uint32_t BrushInfo_RigIdNpc_NpcUnit::_internal_npcid() const {
  return npcid_;
}
inline uint32_t BrushInfo_RigIdNpc_NpcUnit::npcid() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.RigIdNpc.NpcUnit.npcId)
  return _internal_npcid();
}
inline void BrushInfo_RigIdNpc_NpcUnit::_internal_set_npcid(uint32_t value) {
  
  npcid_ = value;
}
inline void BrushInfo_RigIdNpc_NpcUnit::set_npcid(uint32_t value) {
  _internal_set_npcid(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.RigIdNpc.NpcUnit.npcId)
}

// float locationOffsetX = 2;
inline void BrushInfo_RigIdNpc_NpcUnit::clear_locationoffsetx() {
  locationoffsetx_ = 0;
}
inline float BrushInfo_RigIdNpc_NpcUnit::_internal_locationoffsetx() const {
  return locationoffsetx_;
}
inline float BrushInfo_RigIdNpc_NpcUnit::locationoffsetx() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.RigIdNpc.NpcUnit.locationOffsetX)
  return _internal_locationoffsetx();
}
inline void BrushInfo_RigIdNpc_NpcUnit::_internal_set_locationoffsetx(float value) {
  
  locationoffsetx_ = value;
}
inline void BrushInfo_RigIdNpc_NpcUnit::set_locationoffsetx(float value) {
  _internal_set_locationoffsetx(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.RigIdNpc.NpcUnit.locationOffsetX)
}

// float locationOffsetY = 3;
inline void BrushInfo_RigIdNpc_NpcUnit::clear_locationoffsety() {
  locationoffsety_ = 0;
}
inline float BrushInfo_RigIdNpc_NpcUnit::_internal_locationoffsety() const {
  return locationoffsety_;
}
inline float BrushInfo_RigIdNpc_NpcUnit::locationoffsety() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.RigIdNpc.NpcUnit.locationOffsetY)
  return _internal_locationoffsety();
}
inline void BrushInfo_RigIdNpc_NpcUnit::_internal_set_locationoffsety(float value) {
  
  locationoffsety_ = value;
}
inline void BrushInfo_RigIdNpc_NpcUnit::set_locationoffsety(float value) {
  _internal_set_locationoffsety(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.RigIdNpc.NpcUnit.locationOffsetY)
}

// float rotationOffsetX = 4;
inline void BrushInfo_RigIdNpc_NpcUnit::clear_rotationoffsetx() {
  rotationoffsetx_ = 0;
}
inline float BrushInfo_RigIdNpc_NpcUnit::_internal_rotationoffsetx() const {
  return rotationoffsetx_;
}
inline float BrushInfo_RigIdNpc_NpcUnit::rotationoffsetx() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.RigIdNpc.NpcUnit.rotationOffsetX)
  return _internal_rotationoffsetx();
}
inline void BrushInfo_RigIdNpc_NpcUnit::_internal_set_rotationoffsetx(float value) {
  
  rotationoffsetx_ = value;
}
inline void BrushInfo_RigIdNpc_NpcUnit::set_rotationoffsetx(float value) {
  _internal_set_rotationoffsetx(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.RigIdNpc.NpcUnit.rotationOffsetX)
}

// float rotationOffsetY = 5;
inline void BrushInfo_RigIdNpc_NpcUnit::clear_rotationoffsety() {
  rotationoffsety_ = 0;
}
inline float BrushInfo_RigIdNpc_NpcUnit::_internal_rotationoffsety() const {
  return rotationoffsety_;
}
inline float BrushInfo_RigIdNpc_NpcUnit::rotationoffsety() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.RigIdNpc.NpcUnit.rotationOffsetY)
  return _internal_rotationoffsety();
}
inline void BrushInfo_RigIdNpc_NpcUnit::_internal_set_rotationoffsety(float value) {
  
  rotationoffsety_ = value;
}
inline void BrushInfo_RigIdNpc_NpcUnit::set_rotationoffsety(float value) {
  _internal_set_rotationoffsety(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.RigIdNpc.NpcUnit.rotationOffsetY)
}

// float rotationOffsetZ = 6;
inline void BrushInfo_RigIdNpc_NpcUnit::clear_rotationoffsetz() {
  rotationoffsetz_ = 0;
}
inline float BrushInfo_RigIdNpc_NpcUnit::_internal_rotationoffsetz() const {
  return rotationoffsetz_;
}
inline float BrushInfo_RigIdNpc_NpcUnit::rotationoffsetz() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.RigIdNpc.NpcUnit.rotationOffsetZ)
  return _internal_rotationoffsetz();
}
inline void BrushInfo_RigIdNpc_NpcUnit::_internal_set_rotationoffsetz(float value) {
  
  rotationoffsetz_ = value;
}
inline void BrushInfo_RigIdNpc_NpcUnit::set_rotationoffsetz(float value) {
  _internal_set_rotationoffsetz(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.RigIdNpc.NpcUnit.rotationOffsetZ)
}

// float triggerAreaX = 7;
inline void BrushInfo_RigIdNpc_NpcUnit::clear_triggerareax() {
  triggerareax_ = 0;
}
inline float BrushInfo_RigIdNpc_NpcUnit::_internal_triggerareax() const {
  return triggerareax_;
}
inline float BrushInfo_RigIdNpc_NpcUnit::triggerareax() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.RigIdNpc.NpcUnit.triggerAreaX)
  return _internal_triggerareax();
}
inline void BrushInfo_RigIdNpc_NpcUnit::_internal_set_triggerareax(float value) {
  
  triggerareax_ = value;
}
inline void BrushInfo_RigIdNpc_NpcUnit::set_triggerareax(float value) {
  _internal_set_triggerareax(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.RigIdNpc.NpcUnit.triggerAreaX)
}

// float triggerAreaY = 8;
inline void BrushInfo_RigIdNpc_NpcUnit::clear_triggerareay() {
  triggerareay_ = 0;
}
inline float BrushInfo_RigIdNpc_NpcUnit::_internal_triggerareay() const {
  return triggerareay_;
}
inline float BrushInfo_RigIdNpc_NpcUnit::triggerareay() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.RigIdNpc.NpcUnit.triggerAreaY)
  return _internal_triggerareay();
}
inline void BrushInfo_RigIdNpc_NpcUnit::_internal_set_triggerareay(float value) {
  
  triggerareay_ = value;
}
inline void BrushInfo_RigIdNpc_NpcUnit::set_triggerareay(float value) {
  _internal_set_triggerareay(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.RigIdNpc.NpcUnit.triggerAreaY)
}

// float triggerAreaZ = 9;
inline void BrushInfo_RigIdNpc_NpcUnit::clear_triggerareaz() {
  triggerareaz_ = 0;
}
inline float BrushInfo_RigIdNpc_NpcUnit::_internal_triggerareaz() const {
  return triggerareaz_;
}
inline float BrushInfo_RigIdNpc_NpcUnit::triggerareaz() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.RigIdNpc.NpcUnit.triggerAreaZ)
  return _internal_triggerareaz();
}
inline void BrushInfo_RigIdNpc_NpcUnit::_internal_set_triggerareaz(float value) {
  
  triggerareaz_ = value;
}
inline void BrushInfo_RigIdNpc_NpcUnit::set_triggerareaz(float value) {
  _internal_set_triggerareaz(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.RigIdNpc.NpcUnit.triggerAreaZ)
}

// float triggerAreaOffsetX = 10;
inline void BrushInfo_RigIdNpc_NpcUnit::clear_triggerareaoffsetx() {
  triggerareaoffsetx_ = 0;
}
inline float BrushInfo_RigIdNpc_NpcUnit::_internal_triggerareaoffsetx() const {
  return triggerareaoffsetx_;
}
inline float BrushInfo_RigIdNpc_NpcUnit::triggerareaoffsetx() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.RigIdNpc.NpcUnit.triggerAreaOffsetX)
  return _internal_triggerareaoffsetx();
}
inline void BrushInfo_RigIdNpc_NpcUnit::_internal_set_triggerareaoffsetx(float value) {
  
  triggerareaoffsetx_ = value;
}
inline void BrushInfo_RigIdNpc_NpcUnit::set_triggerareaoffsetx(float value) {
  _internal_set_triggerareaoffsetx(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.RigIdNpc.NpcUnit.triggerAreaOffsetX)
}

// float triggerAreaOffsetY = 11;
inline void BrushInfo_RigIdNpc_NpcUnit::clear_triggerareaoffsety() {
  triggerareaoffsety_ = 0;
}
inline float BrushInfo_RigIdNpc_NpcUnit::_internal_triggerareaoffsety() const {
  return triggerareaoffsety_;
}
inline float BrushInfo_RigIdNpc_NpcUnit::triggerareaoffsety() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.RigIdNpc.NpcUnit.triggerAreaOffsetY)
  return _internal_triggerareaoffsety();
}
inline void BrushInfo_RigIdNpc_NpcUnit::_internal_set_triggerareaoffsety(float value) {
  
  triggerareaoffsety_ = value;
}
inline void BrushInfo_RigIdNpc_NpcUnit::set_triggerareaoffsety(float value) {
  _internal_set_triggerareaoffsety(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.RigIdNpc.NpcUnit.triggerAreaOffsetY)
}

// -------------------------------------------------------------------

// BrushInfo_RigIdNpc

// repeated .packet.BrushInfo.RigIdNpc.NpcUnit vecNpcs = 1;
inline int BrushInfo_RigIdNpc::_internal_vecnpcs_size() const {
  return vecnpcs_.size();
}
inline int BrushInfo_RigIdNpc::vecnpcs_size() const {
  return _internal_vecnpcs_size();
}
inline void BrushInfo_RigIdNpc::clear_vecnpcs() {
  vecnpcs_.Clear();
}
inline ::packet::BrushInfo_RigIdNpc_NpcUnit* BrushInfo_RigIdNpc::mutable_vecnpcs(int index) {
  // @@protoc_insertion_point(field_mutable:packet.BrushInfo.RigIdNpc.vecNpcs)
  return vecnpcs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::packet::BrushInfo_RigIdNpc_NpcUnit >*
BrushInfo_RigIdNpc::mutable_vecnpcs() {
  // @@protoc_insertion_point(field_mutable_list:packet.BrushInfo.RigIdNpc.vecNpcs)
  return &vecnpcs_;
}
inline const ::packet::BrushInfo_RigIdNpc_NpcUnit& BrushInfo_RigIdNpc::_internal_vecnpcs(int index) const {
  return vecnpcs_.Get(index);
}
inline const ::packet::BrushInfo_RigIdNpc_NpcUnit& BrushInfo_RigIdNpc::vecnpcs(int index) const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.RigIdNpc.vecNpcs)
  return _internal_vecnpcs(index);
}
inline ::packet::BrushInfo_RigIdNpc_NpcUnit* BrushInfo_RigIdNpc::_internal_add_vecnpcs() {
  return vecnpcs_.Add();
}
inline ::packet::BrushInfo_RigIdNpc_NpcUnit* BrushInfo_RigIdNpc::add_vecnpcs() {
  ::packet::BrushInfo_RigIdNpc_NpcUnit* _add = _internal_add_vecnpcs();
  // @@protoc_insertion_point(field_add:packet.BrushInfo.RigIdNpc.vecNpcs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::packet::BrushInfo_RigIdNpc_NpcUnit >&
BrushInfo_RigIdNpc::vecnpcs() const {
  // @@protoc_insertion_point(field_list:packet.BrushInfo.RigIdNpc.vecNpcs)
  return vecnpcs_;
}

// -------------------------------------------------------------------

// BrushInfo_Teleporter

// uint32 teleportType = 1;
inline void BrushInfo_Teleporter::clear_teleporttype() {
  teleporttype_ = 0u;
}
inline uint32_t BrushInfo_Teleporter::_internal_teleporttype() const {
  return teleporttype_;
}
inline uint32_t BrushInfo_Teleporter::teleporttype() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.Teleporter.teleportType)
  return _internal_teleporttype();
}
inline void BrushInfo_Teleporter::_internal_set_teleporttype(uint32_t value) {
  
  teleporttype_ = value;
}
inline void BrushInfo_Teleporter::set_teleporttype(uint32_t value) {
  _internal_set_teleporttype(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.Teleporter.teleportType)
}

// uint32 targetMap = 2;
inline void BrushInfo_Teleporter::clear_targetmap() {
  targetmap_ = 0u;
}
inline uint32_t BrushInfo_Teleporter::_internal_targetmap() const {
  return targetmap_;
}
inline uint32_t BrushInfo_Teleporter::targetmap() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.Teleporter.targetMap)
  return _internal_targetmap();
}
inline void BrushInfo_Teleporter::_internal_set_targetmap(uint32_t value) {
  
  targetmap_ = value;
}
inline void BrushInfo_Teleporter::set_targetmap(uint32_t value) {
  _internal_set_targetmap(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.Teleporter.targetMap)
}

// float locationX = 3;
inline void BrushInfo_Teleporter::clear_locationx() {
  locationx_ = 0;
}
inline float BrushInfo_Teleporter::_internal_locationx() const {
  return locationx_;
}
inline float BrushInfo_Teleporter::locationx() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.Teleporter.locationX)
  return _internal_locationx();
}
inline void BrushInfo_Teleporter::_internal_set_locationx(float value) {
  
  locationx_ = value;
}
inline void BrushInfo_Teleporter::set_locationx(float value) {
  _internal_set_locationx(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.Teleporter.locationX)
}

// float locationY = 4;
inline void BrushInfo_Teleporter::clear_locationy() {
  locationy_ = 0;
}
inline float BrushInfo_Teleporter::_internal_locationy() const {
  return locationy_;
}
inline float BrushInfo_Teleporter::locationy() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.Teleporter.locationY)
  return _internal_locationy();
}
inline void BrushInfo_Teleporter::_internal_set_locationy(float value) {
  
  locationy_ = value;
}
inline void BrushInfo_Teleporter::set_locationy(float value) {
  _internal_set_locationy(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.Teleporter.locationY)
}

// float rotationX = 5;
inline void BrushInfo_Teleporter::clear_rotationx() {
  rotationx_ = 0;
}
inline float BrushInfo_Teleporter::_internal_rotationx() const {
  return rotationx_;
}
inline float BrushInfo_Teleporter::rotationx() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.Teleporter.rotationX)
  return _internal_rotationx();
}
inline void BrushInfo_Teleporter::_internal_set_rotationx(float value) {
  
  rotationx_ = value;
}
inline void BrushInfo_Teleporter::set_rotationx(float value) {
  _internal_set_rotationx(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.Teleporter.rotationX)
}

// float rotationY = 6;
inline void BrushInfo_Teleporter::clear_rotationy() {
  rotationy_ = 0;
}
inline float BrushInfo_Teleporter::_internal_rotationy() const {
  return rotationy_;
}
inline float BrushInfo_Teleporter::rotationy() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.Teleporter.rotationY)
  return _internal_rotationy();
}
inline void BrushInfo_Teleporter::_internal_set_rotationy(float value) {
  
  rotationy_ = value;
}
inline void BrushInfo_Teleporter::set_rotationy(float value) {
  _internal_set_rotationy(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.Teleporter.rotationY)
}

// float rotationZ = 7;
inline void BrushInfo_Teleporter::clear_rotationz() {
  rotationz_ = 0;
}
inline float BrushInfo_Teleporter::_internal_rotationz() const {
  return rotationz_;
}
inline float BrushInfo_Teleporter::rotationz() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.Teleporter.rotationZ)
  return _internal_rotationz();
}
inline void BrushInfo_Teleporter::_internal_set_rotationz(float value) {
  
  rotationz_ = value;
}
inline void BrushInfo_Teleporter::set_rotationz(float value) {
  _internal_set_rotationz(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.Teleporter.rotationZ)
}

// float triggerAreaX = 8;
inline void BrushInfo_Teleporter::clear_triggerareax() {
  triggerareax_ = 0;
}
inline float BrushInfo_Teleporter::_internal_triggerareax() const {
  return triggerareax_;
}
inline float BrushInfo_Teleporter::triggerareax() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.Teleporter.triggerAreaX)
  return _internal_triggerareax();
}
inline void BrushInfo_Teleporter::_internal_set_triggerareax(float value) {
  
  triggerareax_ = value;
}
inline void BrushInfo_Teleporter::set_triggerareax(float value) {
  _internal_set_triggerareax(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.Teleporter.triggerAreaX)
}

// float triggerAreaY = 9;
inline void BrushInfo_Teleporter::clear_triggerareay() {
  triggerareay_ = 0;
}
inline float BrushInfo_Teleporter::_internal_triggerareay() const {
  return triggerareay_;
}
inline float BrushInfo_Teleporter::triggerareay() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.Teleporter.triggerAreaY)
  return _internal_triggerareay();
}
inline void BrushInfo_Teleporter::_internal_set_triggerareay(float value) {
  
  triggerareay_ = value;
}
inline void BrushInfo_Teleporter::set_triggerareay(float value) {
  _internal_set_triggerareay(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.Teleporter.triggerAreaY)
}

// float triggerAreaZ = 10;
inline void BrushInfo_Teleporter::clear_triggerareaz() {
  triggerareaz_ = 0;
}
inline float BrushInfo_Teleporter::_internal_triggerareaz() const {
  return triggerareaz_;
}
inline float BrushInfo_Teleporter::triggerareaz() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.Teleporter.triggerAreaZ)
  return _internal_triggerareaz();
}
inline void BrushInfo_Teleporter::_internal_set_triggerareaz(float value) {
  
  triggerareaz_ = value;
}
inline void BrushInfo_Teleporter::set_triggerareaz(float value) {
  _internal_set_triggerareaz(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.Teleporter.triggerAreaZ)
}

// float triggerAreaOffsetX = 11;
inline void BrushInfo_Teleporter::clear_triggerareaoffsetx() {
  triggerareaoffsetx_ = 0;
}
inline float BrushInfo_Teleporter::_internal_triggerareaoffsetx() const {
  return triggerareaoffsetx_;
}
inline float BrushInfo_Teleporter::triggerareaoffsetx() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.Teleporter.triggerAreaOffsetX)
  return _internal_triggerareaoffsetx();
}
inline void BrushInfo_Teleporter::_internal_set_triggerareaoffsetx(float value) {
  
  triggerareaoffsetx_ = value;
}
inline void BrushInfo_Teleporter::set_triggerareaoffsetx(float value) {
  _internal_set_triggerareaoffsetx(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.Teleporter.triggerAreaOffsetX)
}

// float triggerAreaOffsetY = 12;
inline void BrushInfo_Teleporter::clear_triggerareaoffsety() {
  triggerareaoffsety_ = 0;
}
inline float BrushInfo_Teleporter::_internal_triggerareaoffsety() const {
  return triggerareaoffsety_;
}
inline float BrushInfo_Teleporter::triggerareaoffsety() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.Teleporter.triggerAreaOffsetY)
  return _internal_triggerareaoffsety();
}
inline void BrushInfo_Teleporter::_internal_set_triggerareaoffsety(float value) {
  
  triggerareaoffsety_ = value;
}
inline void BrushInfo_Teleporter::set_triggerareaoffsety(float value) {
  _internal_set_triggerareaoffsety(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.Teleporter.triggerAreaOffsetY)
}

// uint32 teleportAnim = 13;
inline void BrushInfo_Teleporter::clear_teleportanim() {
  teleportanim_ = 0u;
}
inline uint32_t BrushInfo_Teleporter::_internal_teleportanim() const {
  return teleportanim_;
}
inline uint32_t BrushInfo_Teleporter::teleportanim() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.Teleporter.teleportAnim)
  return _internal_teleportanim();
}
inline void BrushInfo_Teleporter::_internal_set_teleportanim(uint32_t value) {
  
  teleportanim_ = value;
}
inline void BrushInfo_Teleporter::set_teleportanim(uint32_t value) {
  _internal_set_teleportanim(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.Teleporter.teleportAnim)
}

// -------------------------------------------------------------------

// BrushInfo_BlockArea

// uint32 blockAreaId = 1;
inline void BrushInfo_BlockArea::clear_blockareaid() {
  blockareaid_ = 0u;
}
inline uint32_t BrushInfo_BlockArea::_internal_blockareaid() const {
  return blockareaid_;
}
inline uint32_t BrushInfo_BlockArea::blockareaid() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.BlockArea.blockAreaId)
  return _internal_blockareaid();
}
inline void BrushInfo_BlockArea::_internal_set_blockareaid(uint32_t value) {
  
  blockareaid_ = value;
}
inline void BrushInfo_BlockArea::set_blockareaid(uint32_t value) {
  _internal_set_blockareaid(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.BlockArea.blockAreaId)
}

// float blockAreaX = 2;
inline void BrushInfo_BlockArea::clear_blockareax() {
  blockareax_ = 0;
}
inline float BrushInfo_BlockArea::_internal_blockareax() const {
  return blockareax_;
}
inline float BrushInfo_BlockArea::blockareax() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.BlockArea.blockAreaX)
  return _internal_blockareax();
}
inline void BrushInfo_BlockArea::_internal_set_blockareax(float value) {
  
  blockareax_ = value;
}
inline void BrushInfo_BlockArea::set_blockareax(float value) {
  _internal_set_blockareax(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.BlockArea.blockAreaX)
}

// float blockAreaY = 3;
inline void BrushInfo_BlockArea::clear_blockareay() {
  blockareay_ = 0;
}
inline float BrushInfo_BlockArea::_internal_blockareay() const {
  return blockareay_;
}
inline float BrushInfo_BlockArea::blockareay() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.BlockArea.blockAreaY)
  return _internal_blockareay();
}
inline void BrushInfo_BlockArea::_internal_set_blockareay(float value) {
  
  blockareay_ = value;
}
inline void BrushInfo_BlockArea::set_blockareay(float value) {
  _internal_set_blockareay(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.BlockArea.blockAreaY)
}

// float blockAreaZ = 4;
inline void BrushInfo_BlockArea::clear_blockareaz() {
  blockareaz_ = 0;
}
inline float BrushInfo_BlockArea::_internal_blockareaz() const {
  return blockareaz_;
}
inline float BrushInfo_BlockArea::blockareaz() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.BlockArea.blockAreaZ)
  return _internal_blockareaz();
}
inline void BrushInfo_BlockArea::_internal_set_blockareaz(float value) {
  
  blockareaz_ = value;
}
inline void BrushInfo_BlockArea::set_blockareaz(float value) {
  _internal_set_blockareaz(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.BlockArea.blockAreaZ)
}

// float blockAreaOffsetX = 5;
inline void BrushInfo_BlockArea::clear_blockareaoffsetx() {
  blockareaoffsetx_ = 0;
}
inline float BrushInfo_BlockArea::_internal_blockareaoffsetx() const {
  return blockareaoffsetx_;
}
inline float BrushInfo_BlockArea::blockareaoffsetx() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.BlockArea.blockAreaOffsetX)
  return _internal_blockareaoffsetx();
}
inline void BrushInfo_BlockArea::_internal_set_blockareaoffsetx(float value) {
  
  blockareaoffsetx_ = value;
}
inline void BrushInfo_BlockArea::set_blockareaoffsetx(float value) {
  _internal_set_blockareaoffsetx(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.BlockArea.blockAreaOffsetX)
}

// float blockAreaOffsetY = 6;
inline void BrushInfo_BlockArea::clear_blockareaoffsety() {
  blockareaoffsety_ = 0;
}
inline float BrushInfo_BlockArea::_internal_blockareaoffsety() const {
  return blockareaoffsety_;
}
inline float BrushInfo_BlockArea::blockareaoffsety() const {
  // @@protoc_insertion_point(field_get:packet.BrushInfo.BlockArea.blockAreaOffsetY)
  return _internal_blockareaoffsety();
}
inline void BrushInfo_BlockArea::_internal_set_blockareaoffsety(float value) {
  
  blockareaoffsety_ = value;
}
inline void BrushInfo_BlockArea::set_blockareaoffsety(float value) {
  _internal_set_blockareaoffsety(value);
  // @@protoc_insertion_point(field_set:packet.BrushInfo.BlockArea.blockAreaOffsetY)
}

// -------------------------------------------------------------------

// BrushInfo

// -------------------------------------------------------------------

// BrushAll

// repeated .packet.BrushInfo brushInfos = 1;
inline int BrushAll::_internal_brushinfos_size() const {
  return brushinfos_.size();
}
inline int BrushAll::brushinfos_size() const {
  return _internal_brushinfos_size();
}
inline void BrushAll::clear_brushinfos() {
  brushinfos_.Clear();
}
inline ::packet::BrushInfo* BrushAll::mutable_brushinfos(int index) {
  // @@protoc_insertion_point(field_mutable:packet.BrushAll.brushInfos)
  return brushinfos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::packet::BrushInfo >*
BrushAll::mutable_brushinfos() {
  // @@protoc_insertion_point(field_mutable_list:packet.BrushAll.brushInfos)
  return &brushinfos_;
}
inline const ::packet::BrushInfo& BrushAll::_internal_brushinfos(int index) const {
  return brushinfos_.Get(index);
}
inline const ::packet::BrushInfo& BrushAll::brushinfos(int index) const {
  // @@protoc_insertion_point(field_get:packet.BrushAll.brushInfos)
  return _internal_brushinfos(index);
}
inline ::packet::BrushInfo* BrushAll::_internal_add_brushinfos() {
  return brushinfos_.Add();
}
inline ::packet::BrushInfo* BrushAll::add_brushinfos() {
  ::packet::BrushInfo* _add = _internal_add_brushinfos();
  // @@protoc_insertion_point(field_add:packet.BrushAll.brushInfos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::packet::BrushInfo >&
BrushAll::brushinfos() const {
  // @@protoc_insertion_point(field_list:packet.BrushAll.brushInfos)
  return brushinfos_;
}

// -------------------------------------------------------------------

// BrushInMapInfo_Range

// uint32 maxPosX = 3;
inline void BrushInMapInfo_Range::clear_maxposx() {
  maxposx_ = 0u;
}
inline uint32_t BrushInMapInfo_Range::_internal_maxposx() const {
  return maxposx_;
}
inline uint32_t BrushInMapInfo_Range::maxposx() const {
  // @@protoc_insertion_point(field_get:packet.BrushInMapInfo.Range.maxPosX)
  return _internal_maxposx();
}
inline void BrushInMapInfo_Range::_internal_set_maxposx(uint32_t value) {
  
  maxposx_ = value;
}
inline void BrushInMapInfo_Range::set_maxposx(uint32_t value) {
  _internal_set_maxposx(value);
  // @@protoc_insertion_point(field_set:packet.BrushInMapInfo.Range.maxPosX)
}

// uint32 maxPosY = 4;
inline void BrushInMapInfo_Range::clear_maxposy() {
  maxposy_ = 0u;
}
inline uint32_t BrushInMapInfo_Range::_internal_maxposy() const {
  return maxposy_;
}
inline uint32_t BrushInMapInfo_Range::maxposy() const {
  // @@protoc_insertion_point(field_get:packet.BrushInMapInfo.Range.maxPosY)
  return _internal_maxposy();
}
inline void BrushInMapInfo_Range::_internal_set_maxposy(uint32_t value) {
  
  maxposy_ = value;
}
inline void BrushInMapInfo_Range::set_maxposy(uint32_t value) {
  _internal_set_maxposy(value);
  // @@protoc_insertion_point(field_set:packet.BrushInMapInfo.Range.maxPosY)
}

// -------------------------------------------------------------------

// BrushInMapInfo_Point

// uint32 posX = 1;
inline void BrushInMapInfo_Point::clear_posx() {
  posx_ = 0u;
}
inline uint32_t BrushInMapInfo_Point::_internal_posx() const {
  return posx_;
}
inline uint32_t BrushInMapInfo_Point::posx() const {
  // @@protoc_insertion_point(field_get:packet.BrushInMapInfo.Point.posX)
  return _internal_posx();
}
inline void BrushInMapInfo_Point::_internal_set_posx(uint32_t value) {
  
  posx_ = value;
}
inline void BrushInMapInfo_Point::set_posx(uint32_t value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:packet.BrushInMapInfo.Point.posX)
}

// uint32 posY = 2;
inline void BrushInMapInfo_Point::clear_posy() {
  posy_ = 0u;
}
inline uint32_t BrushInMapInfo_Point::_internal_posy() const {
  return posy_;
}
inline uint32_t BrushInMapInfo_Point::posy() const {
  // @@protoc_insertion_point(field_get:packet.BrushInMapInfo.Point.posY)
  return _internal_posy();
}
inline void BrushInMapInfo_Point::_internal_set_posy(uint32_t value) {
  
  posy_ = value;
}
inline void BrushInMapInfo_Point::set_posy(uint32_t value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:packet.BrushInMapInfo.Point.posY)
}

// uint32 rotX = 3;
inline void BrushInMapInfo_Point::clear_rotx() {
  rotx_ = 0u;
}
inline uint32_t BrushInMapInfo_Point::_internal_rotx() const {
  return rotx_;
}
inline uint32_t BrushInMapInfo_Point::rotx() const {
  // @@protoc_insertion_point(field_get:packet.BrushInMapInfo.Point.rotX)
  return _internal_rotx();
}
inline void BrushInMapInfo_Point::_internal_set_rotx(uint32_t value) {
  
  rotx_ = value;
}
inline void BrushInMapInfo_Point::set_rotx(uint32_t value) {
  _internal_set_rotx(value);
  // @@protoc_insertion_point(field_set:packet.BrushInMapInfo.Point.rotX)
}

// uint32 rotY = 4;
inline void BrushInMapInfo_Point::clear_roty() {
  roty_ = 0u;
}
inline uint32_t BrushInMapInfo_Point::_internal_roty() const {
  return roty_;
}
inline uint32_t BrushInMapInfo_Point::roty() const {
  // @@protoc_insertion_point(field_get:packet.BrushInMapInfo.Point.rotY)
  return _internal_roty();
}
inline void BrushInMapInfo_Point::_internal_set_roty(uint32_t value) {
  
  roty_ = value;
}
inline void BrushInMapInfo_Point::set_roty(uint32_t value) {
  _internal_set_roty(value);
  // @@protoc_insertion_point(field_set:packet.BrushInMapInfo.Point.rotY)
}

// uint32 rotZ = 5;
inline void BrushInMapInfo_Point::clear_rotz() {
  rotz_ = 0u;
}
inline uint32_t BrushInMapInfo_Point::_internal_rotz() const {
  return rotz_;
}
inline uint32_t BrushInMapInfo_Point::rotz() const {
  // @@protoc_insertion_point(field_get:packet.BrushInMapInfo.Point.rotZ)
  return _internal_rotz();
}
inline void BrushInMapInfo_Point::_internal_set_rotz(uint32_t value) {
  
  rotz_ = value;
}
inline void BrushInMapInfo_Point::set_rotz(uint32_t value) {
  _internal_set_rotz(value);
  // @@protoc_insertion_point(field_set:packet.BrushInMapInfo.Point.rotZ)
}

// -------------------------------------------------------------------

// BrushInMapInfo_PointGroup

// repeated .packet.BrushInMapInfo.Point points = 1;
inline int BrushInMapInfo_PointGroup::_internal_points_size() const {
  return points_.size();
}
inline int BrushInMapInfo_PointGroup::points_size() const {
  return _internal_points_size();
}
inline void BrushInMapInfo_PointGroup::clear_points() {
  points_.Clear();
}
inline ::packet::BrushInMapInfo_Point* BrushInMapInfo_PointGroup::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:packet.BrushInMapInfo.PointGroup.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::packet::BrushInMapInfo_Point >*
BrushInMapInfo_PointGroup::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:packet.BrushInMapInfo.PointGroup.points)
  return &points_;
}
inline const ::packet::BrushInMapInfo_Point& BrushInMapInfo_PointGroup::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::packet::BrushInMapInfo_Point& BrushInMapInfo_PointGroup::points(int index) const {
  // @@protoc_insertion_point(field_get:packet.BrushInMapInfo.PointGroup.points)
  return _internal_points(index);
}
inline ::packet::BrushInMapInfo_Point* BrushInMapInfo_PointGroup::_internal_add_points() {
  return points_.Add();
}
inline ::packet::BrushInMapInfo_Point* BrushInMapInfo_PointGroup::add_points() {
  ::packet::BrushInMapInfo_Point* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:packet.BrushInMapInfo.PointGroup.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::packet::BrushInMapInfo_Point >&
BrushInMapInfo_PointGroup::points() const {
  // @@protoc_insertion_point(field_list:packet.BrushInMapInfo.PointGroup.points)
  return points_;
}

// -------------------------------------------------------------------

// BrushInMapInfo

// uint32 type = 1;
inline void BrushInMapInfo::clear_type() {
  type_ = 0u;
}
inline uint32_t BrushInMapInfo::_internal_type() const {
  return type_;
}
inline uint32_t BrushInMapInfo::type() const {
  // @@protoc_insertion_point(field_get:packet.BrushInMapInfo.type)
  return _internal_type();
}
inline void BrushInMapInfo::_internal_set_type(uint32_t value) {
  
  type_ = value;
}
inline void BrushInMapInfo::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:packet.BrushInMapInfo.type)
}

// uint64 brushId = 2;
inline void BrushInMapInfo::clear_brushid() {
  brushid_ = uint64_t{0u};
}
inline uint64_t BrushInMapInfo::_internal_brushid() const {
  return brushid_;
}
inline uint64_t BrushInMapInfo::brushid() const {
  // @@protoc_insertion_point(field_get:packet.BrushInMapInfo.brushId)
  return _internal_brushid();
}
inline void BrushInMapInfo::_internal_set_brushid(uint64_t value) {
  
  brushid_ = value;
}
inline void BrushInMapInfo::set_brushid(uint64_t value) {
  _internal_set_brushid(value);
  // @@protoc_insertion_point(field_set:packet.BrushInMapInfo.brushId)
}

// .packet.BrushInMapInfo.Point point = 3;
inline bool BrushInMapInfo::_internal_has_point() const {
  return this != internal_default_instance() && point_ != nullptr;
}
inline bool BrushInMapInfo::has_point() const {
  return _internal_has_point();
}
inline void BrushInMapInfo::clear_point() {
  if (GetArenaForAllocation() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
}
inline const ::packet::BrushInMapInfo_Point& BrushInMapInfo::_internal_point() const {
  const ::packet::BrushInMapInfo_Point* p = point_;
  return p != nullptr ? *p : reinterpret_cast<const ::packet::BrushInMapInfo_Point&>(
      ::packet::_BrushInMapInfo_Point_default_instance_);
}
inline const ::packet::BrushInMapInfo_Point& BrushInMapInfo::point() const {
  // @@protoc_insertion_point(field_get:packet.BrushInMapInfo.point)
  return _internal_point();
}
inline void BrushInMapInfo::unsafe_arena_set_allocated_point(
    ::packet::BrushInMapInfo_Point* point) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_);
  }
  point_ = point;
  if (point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:packet.BrushInMapInfo.point)
}
inline ::packet::BrushInMapInfo_Point* BrushInMapInfo::release_point() {
  
  ::packet::BrushInMapInfo_Point* temp = point_;
  point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::packet::BrushInMapInfo_Point* BrushInMapInfo::unsafe_arena_release_point() {
  // @@protoc_insertion_point(field_release:packet.BrushInMapInfo.point)
  
  ::packet::BrushInMapInfo_Point* temp = point_;
  point_ = nullptr;
  return temp;
}
inline ::packet::BrushInMapInfo_Point* BrushInMapInfo::_internal_mutable_point() {
  
  if (point_ == nullptr) {
    auto* p = CreateMaybeMessage<::packet::BrushInMapInfo_Point>(GetArenaForAllocation());
    point_ = p;
  }
  return point_;
}
inline ::packet::BrushInMapInfo_Point* BrushInMapInfo::mutable_point() {
  ::packet::BrushInMapInfo_Point* _msg = _internal_mutable_point();
  // @@protoc_insertion_point(field_mutable:packet.BrushInMapInfo.point)
  return _msg;
}
inline void BrushInMapInfo::set_allocated_point(::packet::BrushInMapInfo_Point* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete point_;
  }
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(point);
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:packet.BrushInMapInfo.point)
}

// .packet.BrushInMapInfo.PointGroup vecPoint = 4;
inline bool BrushInMapInfo::_internal_has_vecpoint() const {
  return this != internal_default_instance() && vecpoint_ != nullptr;
}
inline bool BrushInMapInfo::has_vecpoint() const {
  return _internal_has_vecpoint();
}
inline void BrushInMapInfo::clear_vecpoint() {
  if (GetArenaForAllocation() == nullptr && vecpoint_ != nullptr) {
    delete vecpoint_;
  }
  vecpoint_ = nullptr;
}
inline const ::packet::BrushInMapInfo_PointGroup& BrushInMapInfo::_internal_vecpoint() const {
  const ::packet::BrushInMapInfo_PointGroup* p = vecpoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::packet::BrushInMapInfo_PointGroup&>(
      ::packet::_BrushInMapInfo_PointGroup_default_instance_);
}
inline const ::packet::BrushInMapInfo_PointGroup& BrushInMapInfo::vecpoint() const {
  // @@protoc_insertion_point(field_get:packet.BrushInMapInfo.vecPoint)
  return _internal_vecpoint();
}
inline void BrushInMapInfo::unsafe_arena_set_allocated_vecpoint(
    ::packet::BrushInMapInfo_PointGroup* vecpoint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vecpoint_);
  }
  vecpoint_ = vecpoint;
  if (vecpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:packet.BrushInMapInfo.vecPoint)
}
inline ::packet::BrushInMapInfo_PointGroup* BrushInMapInfo::release_vecpoint() {
  
  ::packet::BrushInMapInfo_PointGroup* temp = vecpoint_;
  vecpoint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::packet::BrushInMapInfo_PointGroup* BrushInMapInfo::unsafe_arena_release_vecpoint() {
  // @@protoc_insertion_point(field_release:packet.BrushInMapInfo.vecPoint)
  
  ::packet::BrushInMapInfo_PointGroup* temp = vecpoint_;
  vecpoint_ = nullptr;
  return temp;
}
inline ::packet::BrushInMapInfo_PointGroup* BrushInMapInfo::_internal_mutable_vecpoint() {
  
  if (vecpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::packet::BrushInMapInfo_PointGroup>(GetArenaForAllocation());
    vecpoint_ = p;
  }
  return vecpoint_;
}
inline ::packet::BrushInMapInfo_PointGroup* BrushInMapInfo::mutable_vecpoint() {
  ::packet::BrushInMapInfo_PointGroup* _msg = _internal_mutable_vecpoint();
  // @@protoc_insertion_point(field_mutable:packet.BrushInMapInfo.vecPoint)
  return _msg;
}
inline void BrushInMapInfo::set_allocated_vecpoint(::packet::BrushInMapInfo_PointGroup* vecpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete vecpoint_;
  }
  if (vecpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vecpoint);
    if (message_arena != submessage_arena) {
      vecpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vecpoint, submessage_arena);
    }
    
  } else {
    
  }
  vecpoint_ = vecpoint;
  // @@protoc_insertion_point(field_set_allocated:packet.BrushInMapInfo.vecPoint)
}

// .packet.BrushInMapInfo.Range range = 5;
inline bool BrushInMapInfo::_internal_has_range() const {
  return this != internal_default_instance() && range_ != nullptr;
}
inline bool BrushInMapInfo::has_range() const {
  return _internal_has_range();
}
inline void BrushInMapInfo::clear_range() {
  if (GetArenaForAllocation() == nullptr && range_ != nullptr) {
    delete range_;
  }
  range_ = nullptr;
}
inline const ::packet::BrushInMapInfo_Range& BrushInMapInfo::_internal_range() const {
  const ::packet::BrushInMapInfo_Range* p = range_;
  return p != nullptr ? *p : reinterpret_cast<const ::packet::BrushInMapInfo_Range&>(
      ::packet::_BrushInMapInfo_Range_default_instance_);
}
inline const ::packet::BrushInMapInfo_Range& BrushInMapInfo::range() const {
  // @@protoc_insertion_point(field_get:packet.BrushInMapInfo.range)
  return _internal_range();
}
inline void BrushInMapInfo::unsafe_arena_set_allocated_range(
    ::packet::BrushInMapInfo_Range* range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:packet.BrushInMapInfo.range)
}
inline ::packet::BrushInMapInfo_Range* BrushInMapInfo::release_range() {
  
  ::packet::BrushInMapInfo_Range* temp = range_;
  range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::packet::BrushInMapInfo_Range* BrushInMapInfo::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:packet.BrushInMapInfo.range)
  
  ::packet::BrushInMapInfo_Range* temp = range_;
  range_ = nullptr;
  return temp;
}
inline ::packet::BrushInMapInfo_Range* BrushInMapInfo::_internal_mutable_range() {
  
  if (range_ == nullptr) {
    auto* p = CreateMaybeMessage<::packet::BrushInMapInfo_Range>(GetArenaForAllocation());
    range_ = p;
  }
  return range_;
}
inline ::packet::BrushInMapInfo_Range* BrushInMapInfo::mutable_range() {
  ::packet::BrushInMapInfo_Range* _msg = _internal_mutable_range();
  // @@protoc_insertion_point(field_mutable:packet.BrushInMapInfo.range)
  return _msg;
}
inline void BrushInMapInfo::set_allocated_range(::packet::BrushInMapInfo_Range* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete range_;
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(range);
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    
  } else {
    
  }
  range_ = range;
  // @@protoc_insertion_point(field_set_allocated:packet.BrushInMapInfo.range)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace packet

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_map_5fcfg_2eproto
