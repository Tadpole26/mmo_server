// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: teamcommon.proto

#include "teamcommon.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace common {
PROTOBUF_CONSTEXPR ModuleTeam::ModuleTeam(
    ::_pbi::ConstantInitialized)
  : notteam_(nullptr)
  , ownteam_(nullptr)
  , base_(nullptr)
  , memberlist_(nullptr)
  , applylist_(nullptr){}
struct ModuleTeamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModuleTeamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModuleTeamDefaultTypeInternal() {}
  union {
    ModuleTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModuleTeamDefaultTypeInternal _ModuleTeam_default_instance_;
PROTOBUF_CONSTEXPR ModuleTeamView::ModuleTeamView(
    ::_pbi::ConstantInitialized)
  : teamid_(uint64_t{0u})
  , leadersceneid_(uint64_t{0u}){}
struct ModuleTeamViewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModuleTeamViewDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModuleTeamViewDefaultTypeInternal() {}
  union {
    ModuleTeamView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModuleTeamViewDefaultTypeInternal _ModuleTeamView_default_instance_;
PROTOBUF_CONSTEXPR NotOwnTeamInfo::NotOwnTeamInfo(
    ::_pbi::ConstantInitialized)
  : targetids_()
  , _targetids_cached_byte_size_(0)
  , expires_()
  , _expires_cached_byte_size_(0)
  , invited_(nullptr)
  , apply_(0u)
  , create_(0u)
  , match_(0u)
  , allexpire_(0u){}
struct NotOwnTeamInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotOwnTeamInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotOwnTeamInfoDefaultTypeInternal() {}
  union {
    NotOwnTeamInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotOwnTeamInfoDefaultTypeInternal _NotOwnTeamInfo_default_instance_;
PROTOBUF_CONSTEXPR OwnTeamInfo::OwnTeamInfo(
    ::_pbi::ConstantInitialized)
  : replace_(0u)
  , invite_(0u)
  , together_(0u)
  , appoint_(0u){}
struct OwnTeamInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OwnTeamInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OwnTeamInfoDefaultTypeInternal() {}
  union {
    OwnTeamInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OwnTeamInfoDefaultTypeInternal _OwnTeamInfo_default_instance_;
PROTOBUF_CONSTEXPR TeamInvited::TeamInvited(
    ::_pbi::ConstantInitialized)
  : nickname_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , roleid_(uint64_t{0u})
  , teamid_(uint64_t{0u})
  , leadersceneid_(uint64_t{0u})
  , expire_(0u){}
struct TeamInvitedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamInvitedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamInvitedDefaultTypeInternal() {}
  union {
    TeamInvited _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamInvitedDefaultTypeInternal _TeamInvited_default_instance_;
PROTOBUF_CONSTEXPR TeamBase::TeamBase(
    ::_pbi::ConstantInitialized)
  : text_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , teamid_(uint64_t{0u})
  , leaderid_(uint64_t{0u})
  , targetid_(0u)
  , minlevel_(0u)
  , maxlevel_(0u)
  , matchtime_(0u)
  , leadersceneid_(uint64_t{0u}){}
struct TeamBaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamBaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamBaseDefaultTypeInternal() {}
  union {
    TeamBase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamBaseDefaultTypeInternal _TeamBase_default_instance_;
PROTOBUF_CONSTEXPR TeamMemberList::TeamMemberList(
    ::_pbi::ConstantInitialized)
  : members_(){}
struct TeamMemberListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamMemberListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamMemberListDefaultTypeInternal() {}
  union {
    TeamMemberList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamMemberListDefaultTypeInternal _TeamMemberList_default_instance_;
PROTOBUF_CONSTEXPR TeamApplyList::TeamApplyList(
    ::_pbi::ConstantInitialized)
  : applys_(){}
struct TeamApplyListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamApplyListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamApplyListDefaultTypeInternal() {}
  union {
    TeamApplyList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamApplyListDefaultTypeInternal _TeamApplyList_default_instance_;
PROTOBUF_CONSTEXPR TeamMember::TeamMember(
    ::_pbi::ConstantInitialized)
  : role_(nullptr)
  , extd1_(nullptr)
  , extd2_(nullptr)
  , extd3_(nullptr)
  , index_(0u)
  , state_(false)
  , follow_(false){}
struct TeamMemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamMemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamMemberDefaultTypeInternal() {}
  union {
    TeamMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamMemberDefaultTypeInternal _TeamMember_default_instance_;
PROTOBUF_CONSTEXPR TeamApply::TeamApply(
    ::_pbi::ConstantInitialized)
  : role_(nullptr)
  , leadersceneid_(uint64_t{0u})
  , expire_(0u){}
struct TeamApplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamApplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamApplyDefaultTypeInternal() {}
  union {
    TeamApply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamApplyDefaultTypeInternal _TeamApply_default_instance_;
PROTOBUF_CONSTEXPR RecruitTeam::RecruitTeam(
    ::_pbi::ConstantInitialized)
  : members_()
  , text_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , leader_(nullptr)
  , teamid_(uint64_t{0u})
  , targetid_(0u)
  , minlevel_(0u)
  , leadersceneid_(int64_t{0})
  , maxlevel_(0u){}
struct RecruitTeamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecruitTeamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecruitTeamDefaultTypeInternal() {}
  union {
    RecruitTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecruitTeamDefaultTypeInternal _RecruitTeam_default_instance_;
PROTOBUF_CONSTEXPR RecruitTeamLeader::RecruitTeamLeader(
    ::_pbi::ConstantInitialized)
  : nickname_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , leader_(nullptr)
  , chatfont_(0u)
  , chatframe_(0u){}
struct RecruitTeamLeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecruitTeamLeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecruitTeamLeaderDefaultTypeInternal() {}
  union {
    RecruitTeamLeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecruitTeamLeaderDefaultTypeInternal _RecruitTeamLeader_default_instance_;
PROTOBUF_CONSTEXPR RecruitTeamMember::RecruitTeamMember(
    ::_pbi::ConstantInitialized)
  : headicon_(0u)
  , headframe_(0u)
  , careerid_(0u)
  , level_(0u)
  , sex_(0u){}
struct RecruitTeamMemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecruitTeamMemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecruitTeamMemberDefaultTypeInternal() {}
  union {
    RecruitTeamMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecruitTeamMemberDefaultTypeInternal _RecruitTeamMember_default_instance_;
PROTOBUF_CONSTEXPR PlatAllTeamList::PlatAllTeamList(
    ::_pbi::ConstantInitialized)
  : teams_(){}
struct PlatAllTeamListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlatAllTeamListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlatAllTeamListDefaultTypeInternal() {}
  union {
    PlatAllTeamList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlatAllTeamListDefaultTypeInternal _PlatAllTeamList_default_instance_;
PROTOBUF_CONSTEXPR PlatTargetTeamList::PlatTargetTeamList(
    ::_pbi::ConstantInitialized)
  : teams_()
  , targetid_(0u){}
struct PlatTargetTeamListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlatTargetTeamListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlatTargetTeamListDefaultTypeInternal() {}
  union {
    PlatTargetTeamList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlatTargetTeamListDefaultTypeInternal _PlatTargetTeamList_default_instance_;
PROTOBUF_CONSTEXPR PlatTargetTeam::PlatTargetTeam(
    ::_pbi::ConstantInitialized)
  : members_()
  , leadername_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , text_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , teamid_(0u)
  , minlevel_(0u)
  , leadersceneid_(uint64_t{0u})
  , maxlevel_(0u){}
struct PlatTargetTeamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlatTargetTeamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlatTargetTeamDefaultTypeInternal() {}
  union {
    PlatTargetTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlatTargetTeamDefaultTypeInternal _PlatTargetTeam_default_instance_;
PROTOBUF_CONSTEXPR PlatTeamMember::PlatTeamMember(
    ::_pbi::ConstantInitialized)
  : careerid_(0u)
  , level_(0u){}
struct PlatTeamMemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlatTeamMemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlatTeamMemberDefaultTypeInternal() {}
  union {
    PlatTeamMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlatTeamMemberDefaultTypeInternal _PlatTeamMember_default_instance_;
PROTOBUF_CONSTEXPR TeamFieldId::TeamFieldId(
    ::_pbi::ConstantInitialized)
  : val_(uint64_t{0u})
  , type_(0u){}
struct TeamFieldIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamFieldIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamFieldIdDefaultTypeInternal() {}
  union {
    TeamFieldId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamFieldIdDefaultTypeInternal _TeamFieldId_default_instance_;
PROTOBUF_CONSTEXPR TeamFieldByte::TeamFieldByte(
    ::_pbi::ConstantInitialized)
  : val_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(0u){}
struct TeamFieldByteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamFieldByteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamFieldByteDefaultTypeInternal() {}
  union {
    TeamFieldByte _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamFieldByteDefaultTypeInternal _TeamFieldByte_default_instance_;
PROTOBUF_CONSTEXPR TeamFieldList::TeamFieldList(
    ::_pbi::ConstantInitialized)
  : tfid_()
  , tfbyte_(){}
struct TeamFieldListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamFieldListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamFieldListDefaultTypeInternal() {}
  union {
    TeamFieldList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamFieldListDefaultTypeInternal _TeamFieldList_default_instance_;
PROTOBUF_CONSTEXPR TeamVoteBaseData::TeamVoteBaseData(
    ::_pbi::ConstantInitialized)
  : roleid_(uint64_t{0u})
  , expiretime_(0u){}
struct TeamVoteBaseDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamVoteBaseDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamVoteBaseDataDefaultTypeInternal() {}
  union {
    TeamVoteBaseData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamVoteBaseDataDefaultTypeInternal _TeamVoteBaseData_default_instance_;
PROTOBUF_CONSTEXPR TeamMemberFieldId::TeamMemberFieldId(
    ::_pbi::ConstantInitialized)
  : val_(uint64_t{0u})
  , type_(0u){}
struct TeamMemberFieldIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamMemberFieldIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamMemberFieldIdDefaultTypeInternal() {}
  union {
    TeamMemberFieldId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamMemberFieldIdDefaultTypeInternal _TeamMemberFieldId_default_instance_;
PROTOBUF_CONSTEXPR TeamMemberFieldBool::TeamMemberFieldBool(
    ::_pbi::ConstantInitialized)
  : type_(0u)
  , val_(false){}
struct TeamMemberFieldBoolDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamMemberFieldBoolDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamMemberFieldBoolDefaultTypeInternal() {}
  union {
    TeamMemberFieldBool _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamMemberFieldBoolDefaultTypeInternal _TeamMemberFieldBool_default_instance_;
PROTOBUF_CONSTEXPR TeamMemberFieldByte::TeamMemberFieldByte(
    ::_pbi::ConstantInitialized)
  : val_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(0u){}
struct TeamMemberFieldByteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamMemberFieldByteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamMemberFieldByteDefaultTypeInternal() {}
  union {
    TeamMemberFieldByte _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamMemberFieldByteDefaultTypeInternal _TeamMemberFieldByte_default_instance_;
PROTOBUF_CONSTEXPR TeamMemberFieldList::TeamMemberFieldList(
    ::_pbi::ConstantInitialized)
  : tfid_()
  , tfbyte_()
  , tfbool_(){}
struct TeamMemberFieldListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamMemberFieldListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamMemberFieldListDefaultTypeInternal() {}
  union {
    TeamMemberFieldList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamMemberFieldListDefaultTypeInternal _TeamMemberFieldList_default_instance_;
}  // namespace common
static ::_pb::Metadata file_level_metadata_teamcommon_2eproto[25];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_teamcommon_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_teamcommon_2eproto = nullptr;

const uint32_t TableStruct_teamcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ModuleTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ModuleTeam, notteam_),
  PROTOBUF_FIELD_OFFSET(::common::ModuleTeam, ownteam_),
  PROTOBUF_FIELD_OFFSET(::common::ModuleTeam, base_),
  PROTOBUF_FIELD_OFFSET(::common::ModuleTeam, memberlist_),
  PROTOBUF_FIELD_OFFSET(::common::ModuleTeam, applylist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ModuleTeamView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::ModuleTeamView, teamid_),
  PROTOBUF_FIELD_OFFSET(::common::ModuleTeamView, leadersceneid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::NotOwnTeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::NotOwnTeamInfo, invited_),
  PROTOBUF_FIELD_OFFSET(::common::NotOwnTeamInfo, apply_),
  PROTOBUF_FIELD_OFFSET(::common::NotOwnTeamInfo, create_),
  PROTOBUF_FIELD_OFFSET(::common::NotOwnTeamInfo, match_),
  PROTOBUF_FIELD_OFFSET(::common::NotOwnTeamInfo, allexpire_),
  PROTOBUF_FIELD_OFFSET(::common::NotOwnTeamInfo, targetids_),
  PROTOBUF_FIELD_OFFSET(::common::NotOwnTeamInfo, expires_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::OwnTeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::OwnTeamInfo, replace_),
  PROTOBUF_FIELD_OFFSET(::common::OwnTeamInfo, invite_),
  PROTOBUF_FIELD_OFFSET(::common::OwnTeamInfo, together_),
  PROTOBUF_FIELD_OFFSET(::common::OwnTeamInfo, appoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::TeamInvited, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::TeamInvited, roleid_),
  PROTOBUF_FIELD_OFFSET(::common::TeamInvited, nickname_),
  PROTOBUF_FIELD_OFFSET(::common::TeamInvited, expire_),
  PROTOBUF_FIELD_OFFSET(::common::TeamInvited, teamid_),
  PROTOBUF_FIELD_OFFSET(::common::TeamInvited, leadersceneid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::TeamBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::TeamBase, teamid_),
  PROTOBUF_FIELD_OFFSET(::common::TeamBase, leaderid_),
  PROTOBUF_FIELD_OFFSET(::common::TeamBase, targetid_),
  PROTOBUF_FIELD_OFFSET(::common::TeamBase, minlevel_),
  PROTOBUF_FIELD_OFFSET(::common::TeamBase, maxlevel_),
  PROTOBUF_FIELD_OFFSET(::common::TeamBase, matchtime_),
  PROTOBUF_FIELD_OFFSET(::common::TeamBase, text_),
  PROTOBUF_FIELD_OFFSET(::common::TeamBase, leadersceneid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::TeamMemberList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::TeamMemberList, members_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::TeamApplyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::TeamApplyList, applys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::TeamMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::TeamMember, role_),
  PROTOBUF_FIELD_OFFSET(::common::TeamMember, index_),
  PROTOBUF_FIELD_OFFSET(::common::TeamMember, state_),
  PROTOBUF_FIELD_OFFSET(::common::TeamMember, follow_),
  PROTOBUF_FIELD_OFFSET(::common::TeamMember, extd1_),
  PROTOBUF_FIELD_OFFSET(::common::TeamMember, extd2_),
  PROTOBUF_FIELD_OFFSET(::common::TeamMember, extd3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::TeamApply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::TeamApply, role_),
  PROTOBUF_FIELD_OFFSET(::common::TeamApply, expire_),
  PROTOBUF_FIELD_OFFSET(::common::TeamApply, leadersceneid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::RecruitTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::RecruitTeam, teamid_),
  PROTOBUF_FIELD_OFFSET(::common::RecruitTeam, leader_),
  PROTOBUF_FIELD_OFFSET(::common::RecruitTeam, members_),
  PROTOBUF_FIELD_OFFSET(::common::RecruitTeam, targetid_),
  PROTOBUF_FIELD_OFFSET(::common::RecruitTeam, minlevel_),
  PROTOBUF_FIELD_OFFSET(::common::RecruitTeam, maxlevel_),
  PROTOBUF_FIELD_OFFSET(::common::RecruitTeam, text_),
  PROTOBUF_FIELD_OFFSET(::common::RecruitTeam, leadersceneid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::RecruitTeamLeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::RecruitTeamLeader, leader_),
  PROTOBUF_FIELD_OFFSET(::common::RecruitTeamLeader, chatfont_),
  PROTOBUF_FIELD_OFFSET(::common::RecruitTeamLeader, chatframe_),
  PROTOBUF_FIELD_OFFSET(::common::RecruitTeamLeader, nickname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::RecruitTeamMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::RecruitTeamMember, headicon_),
  PROTOBUF_FIELD_OFFSET(::common::RecruitTeamMember, headframe_),
  PROTOBUF_FIELD_OFFSET(::common::RecruitTeamMember, careerid_),
  PROTOBUF_FIELD_OFFSET(::common::RecruitTeamMember, level_),
  PROTOBUF_FIELD_OFFSET(::common::RecruitTeamMember, sex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::PlatAllTeamList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::PlatAllTeamList, teams_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::PlatTargetTeamList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::PlatTargetTeamList, targetid_),
  PROTOBUF_FIELD_OFFSET(::common::PlatTargetTeamList, teams_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::PlatTargetTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::PlatTargetTeam, teamid_),
  PROTOBUF_FIELD_OFFSET(::common::PlatTargetTeam, leadername_),
  PROTOBUF_FIELD_OFFSET(::common::PlatTargetTeam, minlevel_),
  PROTOBUF_FIELD_OFFSET(::common::PlatTargetTeam, maxlevel_),
  PROTOBUF_FIELD_OFFSET(::common::PlatTargetTeam, text_),
  PROTOBUF_FIELD_OFFSET(::common::PlatTargetTeam, members_),
  PROTOBUF_FIELD_OFFSET(::common::PlatTargetTeam, leadersceneid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::PlatTeamMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::PlatTeamMember, careerid_),
  PROTOBUF_FIELD_OFFSET(::common::PlatTeamMember, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::TeamFieldId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::TeamFieldId, type_),
  PROTOBUF_FIELD_OFFSET(::common::TeamFieldId, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::TeamFieldByte, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::TeamFieldByte, type_),
  PROTOBUF_FIELD_OFFSET(::common::TeamFieldByte, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::TeamFieldList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::TeamFieldList, tfid_),
  PROTOBUF_FIELD_OFFSET(::common::TeamFieldList, tfbyte_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::TeamVoteBaseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::TeamVoteBaseData, expiretime_),
  PROTOBUF_FIELD_OFFSET(::common::TeamVoteBaseData, roleid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::TeamMemberFieldId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::TeamMemberFieldId, type_),
  PROTOBUF_FIELD_OFFSET(::common::TeamMemberFieldId, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::TeamMemberFieldBool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::TeamMemberFieldBool, type_),
  PROTOBUF_FIELD_OFFSET(::common::TeamMemberFieldBool, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::TeamMemberFieldByte, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::TeamMemberFieldByte, type_),
  PROTOBUF_FIELD_OFFSET(::common::TeamMemberFieldByte, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::TeamMemberFieldList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::TeamMemberFieldList, tfid_),
  PROTOBUF_FIELD_OFFSET(::common::TeamMemberFieldList, tfbyte_),
  PROTOBUF_FIELD_OFFSET(::common::TeamMemberFieldList, tfbool_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::common::ModuleTeam)},
  { 11, -1, -1, sizeof(::common::ModuleTeamView)},
  { 19, -1, -1, sizeof(::common::NotOwnTeamInfo)},
  { 32, -1, -1, sizeof(::common::OwnTeamInfo)},
  { 42, -1, -1, sizeof(::common::TeamInvited)},
  { 53, -1, -1, sizeof(::common::TeamBase)},
  { 67, -1, -1, sizeof(::common::TeamMemberList)},
  { 74, -1, -1, sizeof(::common::TeamApplyList)},
  { 81, -1, -1, sizeof(::common::TeamMember)},
  { 94, -1, -1, sizeof(::common::TeamApply)},
  { 103, -1, -1, sizeof(::common::RecruitTeam)},
  { 117, -1, -1, sizeof(::common::RecruitTeamLeader)},
  { 127, -1, -1, sizeof(::common::RecruitTeamMember)},
  { 138, -1, -1, sizeof(::common::PlatAllTeamList)},
  { 145, -1, -1, sizeof(::common::PlatTargetTeamList)},
  { 153, -1, -1, sizeof(::common::PlatTargetTeam)},
  { 166, -1, -1, sizeof(::common::PlatTeamMember)},
  { 174, -1, -1, sizeof(::common::TeamFieldId)},
  { 182, -1, -1, sizeof(::common::TeamFieldByte)},
  { 190, -1, -1, sizeof(::common::TeamFieldList)},
  { 198, -1, -1, sizeof(::common::TeamVoteBaseData)},
  { 206, -1, -1, sizeof(::common::TeamMemberFieldId)},
  { 214, -1, -1, sizeof(::common::TeamMemberFieldBool)},
  { 222, -1, -1, sizeof(::common::TeamMemberFieldByte)},
  { 230, -1, -1, sizeof(::common::TeamMemberFieldList)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::common::_ModuleTeam_default_instance_._instance,
  &::common::_ModuleTeamView_default_instance_._instance,
  &::common::_NotOwnTeamInfo_default_instance_._instance,
  &::common::_OwnTeamInfo_default_instance_._instance,
  &::common::_TeamInvited_default_instance_._instance,
  &::common::_TeamBase_default_instance_._instance,
  &::common::_TeamMemberList_default_instance_._instance,
  &::common::_TeamApplyList_default_instance_._instance,
  &::common::_TeamMember_default_instance_._instance,
  &::common::_TeamApply_default_instance_._instance,
  &::common::_RecruitTeam_default_instance_._instance,
  &::common::_RecruitTeamLeader_default_instance_._instance,
  &::common::_RecruitTeamMember_default_instance_._instance,
  &::common::_PlatAllTeamList_default_instance_._instance,
  &::common::_PlatTargetTeamList_default_instance_._instance,
  &::common::_PlatTargetTeam_default_instance_._instance,
  &::common::_PlatTeamMember_default_instance_._instance,
  &::common::_TeamFieldId_default_instance_._instance,
  &::common::_TeamFieldByte_default_instance_._instance,
  &::common::_TeamFieldList_default_instance_._instance,
  &::common::_TeamVoteBaseData_default_instance_._instance,
  &::common::_TeamMemberFieldId_default_instance_._instance,
  &::common::_TeamMemberFieldBool_default_instance_._instance,
  &::common::_TeamMemberFieldByte_default_instance_._instance,
  &::common::_TeamMemberFieldList_default_instance_._instance,
};

const char descriptor_table_protodef_teamcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020teamcommon.proto\022\006common\032\014common.proto"
  "\"\321\001\n\nModuleTeam\022\'\n\007notteam\030\001 \001(\0132\026.commo"
  "n.NotOwnTeamInfo\022$\n\007ownTeam\030\002 \001(\0132\023.comm"
  "on.OwnTeamInfo\022\036\n\004base\030\003 \001(\0132\020.common.Te"
  "amBase\022*\n\nmemberList\030\004 \001(\0132\026.common.Team"
  "MemberList\022(\n\tapplyList\030\005 \001(\0132\025.common.T"
  "eamApplyList\"7\n\016ModuleTeamView\022\016\n\006teamid"
  "\030\001 \001(\004\022\025\n\rleaderSceneId\030\002 \001(\004\"\233\001\n\016NotOwn"
  "TeamInfo\022$\n\007invited\030\001 \001(\0132\023.common.TeamI"
  "nvited\022\r\n\005apply\030\002 \001(\r\022\016\n\006create\030\003 \001(\r\022\r\n"
  "\005match\030\004 \001(\r\022\021\n\tallExpire\030\005 \001(\r\022\021\n\ttarge"
  "tIds\030\006 \003(\r\022\017\n\007expires\030\007 \003(\r\"Q\n\013OwnTeamIn"
  "fo\022\017\n\007replace\030\001 \001(\r\022\016\n\006invite\030\002 \001(\r\022\020\n\010t"
  "ogether\030\003 \001(\r\022\017\n\007appoint\030\004 \001(\r\"f\n\013TeamIn"
  "vited\022\016\n\006roleId\030\001 \001(\004\022\020\n\010nickName\030\002 \001(\014\022"
  "\016\n\006expire\030\003 \001(\r\022\016\n\006teamId\030\004 \001(\004\022\025\n\rleade"
  "rSceneId\030\005 \001(\004\"\232\001\n\010TeamBase\022\016\n\006teamId\030\001 "
  "\001(\004\022\020\n\010leaderId\030\002 \001(\004\022\020\n\010targetId\030\003 \001(\r\022"
  "\020\n\010minLevel\030\004 \001(\r\022\020\n\010maxLevel\030\005 \001(\r\022\021\n\tm"
  "atchTime\030\006 \001(\r\022\014\n\004text\030\007 \001(\014\022\025\n\rleaderSc"
  "eneId\030\010 \001(\004\"5\n\016TeamMemberList\022#\n\007members"
  "\030\001 \003(\0132\022.common.TeamMember\"2\n\rTeamApplyL"
  "ist\022!\n\006applys\030\001 \003(\0132\021.common.TeamApply\"\307"
  "\001\n\nTeamMember\022\037\n\004role\030\001 \001(\0132\021.common.Rol"
  "eBrief\022\r\n\005index\030\002 \001(\r\022\r\n\005state\030\003 \001(\010\022\016\n\006"
  "follow\030\004 \001(\010\022\"\n\005extd1\030\005 \001(\0132\023.common.Rol"
  "eExtend1\022\"\n\005extd2\030\006 \001(\0132\023.common.RoleExt"
  "end2\022\"\n\005extd3\030\007 \001(\0132\023.common.RoleExtend3"
  "\"S\n\tTeamApply\022\037\n\004role\030\001 \001(\0132\021.common.Rol"
  "eBrief\022\016\n\006expire\030\002 \001(\r\022\025\n\rleaderSceneId\030"
  "\003 \001(\004\"\317\001\n\013RecruitTeam\022\016\n\006teamId\030\001 \001(\004\022)\n"
  "\006leader\030\002 \001(\0132\031.common.RecruitTeamLeader"
  "\022*\n\007members\030\003 \003(\0132\031.common.RecruitTeamMe"
  "mber\022\020\n\010targetId\030\004 \001(\r\022\020\n\010minLevel\030\005 \001(\r"
  "\022\020\n\010maxLevel\030\006 \001(\r\022\014\n\004text\030\007 \001(\014\022\025\n\rlead"
  "erSceneId\030\010 \001(\003\"u\n\021RecruitTeamLeader\022)\n\006"
  "leader\030\001 \001(\0132\031.common.RecruitTeamMember\022"
  "\020\n\010chatFont\030\002 \001(\r\022\021\n\tchatFrame\030\003 \001(\r\022\020\n\010"
  "nickname\030\004 \001(\014\"f\n\021RecruitTeamMember\022\020\n\010h"
  "eadIcon\030\001 \001(\r\022\021\n\theadFrame\030\002 \001(\r\022\020\n\010care"
  "erId\030\003 \001(\r\022\r\n\005level\030\004 \001(\r\022\013\n\003sex\030\005 \001(\r\"<"
  "\n\017PlatAllTeamList\022)\n\005teams\030\001 \003(\0132\032.commo"
  "n.PlatTargetTeamList\"M\n\022PlatTargetTeamLi"
  "st\022\020\n\010targetId\030\001 \001(\r\022%\n\005teams\030\002 \003(\0132\026.co"
  "mmon.PlatTargetTeam\"\246\001\n\016PlatTargetTeam\022\016"
  "\n\006teamId\030\001 \001(\r\022\022\n\nleaderName\030\002 \001(\014\022\020\n\010mi"
  "nLevel\030\003 \001(\r\022\020\n\010maxLevel\030\004 \001(\r\022\014\n\004text\030\005"
  " \001(\014\022\'\n\007members\030\006 \003(\0132\026.common.PlatTeamM"
  "ember\022\025\n\rleaderSceneId\030\007 \001(\004\"1\n\016PlatTeam"
  "Member\022\020\n\010careerId\030\001 \001(\r\022\r\n\005level\030\002 \001(\r\""
  "(\n\013TeamFieldId\022\014\n\004type\030\001 \001(\r\022\013\n\003val\030\002 \001("
  "\004\"*\n\rTeamFieldByte\022\014\n\004type\030\001 \001(\r\022\013\n\003val\030"
  "\002 \001(\014\"Y\n\rTeamFieldList\022!\n\004tfid\030\001 \003(\0132\023.c"
  "ommon.TeamFieldId\022%\n\006tfbyte\030\002 \003(\0132\025.comm"
  "on.TeamFieldByte\"6\n\020TeamVoteBaseData\022\022\n\n"
  "expireTime\030\001 \001(\r\022\016\n\006roleId\030\002 \001(\004\".\n\021Team"
  "MemberFieldId\022\014\n\004type\030\001 \001(\r\022\013\n\003val\030\002 \001(\004"
  "\"0\n\023TeamMemberFieldBool\022\014\n\004type\030\001 \001(\r\022\013\n"
  "\003val\030\002 \001(\010\"0\n\023TeamMemberFieldByte\022\014\n\004typ"
  "e\030\001 \001(\r\022\013\n\003val\030\002 \001(\014\"\230\001\n\023TeamMemberField"
  "List\022\'\n\004tfid\030\001 \003(\0132\031.common.TeamMemberFi"
  "eldId\022+\n\006tfbyte\030\002 \003(\0132\033.common.TeamMembe"
  "rFieldByte\022+\n\006tfbool\030\003 \003(\0132\033.common.Team"
  "MemberFieldBool*\353\001\n\017enTeamFieldType\022\023\n\017T"
  "FieldType_None\020\000\022\027\n\023TFieldType_LeaderId\020"
  "\001\022\027\n\023TFieldType_TargetId\020\002\022\027\n\023TFieldType"
  "_MinLevel\020\003\022\027\n\023TFieldType_MaxLevel\020\004\022\030\n\024"
  "TFieldType_MatchTime\020\005\022\023\n\017TFieldType_Tex"
  "t\020\006\022\034\n\030TFieldType_LeaderSceneId\020\007\022\022\n\016TFi"
  "eldType_Max\020\010*\246\006\n\025enTeamMemberFieldType\022"
  "\024\n\020TMFieldType_None\020\000\022\027\n\023TMFieldType_Inv"
  "ited\020\001\022\025\n\021TMFieldType_Apply\020\002\022\026\n\022TMField"
  "Type_Create\020\003\022\025\n\021TMFieldType_Match\020\004\022\031\n\025"
  "TMFieldType_AllTarget\020\005\022\026\n\022TMFieldType_T"
  "arget\020\006\022\027\n\023TMFieldType_Replace\020\007\022\026\n\022TMFi"
  "eldType_Invite\020\010\022\030\n\024TMFieldType_Together"
  "\020\t\022\025\n\021TMFieldType_Index\020\n\022\025\n\021TMFieldType"
  "_State\020\013\022\026\n\022TMFieldType_Follow\020\014\022\030\n\024TMFi"
  "eldType_NickName\020\r\022\030\n\024TMFieldType_HeadIc"
  "on\020\016\022\031\n\025TMFieldType_HeadFrame\020\017\022\030\n\024TMFie"
  "ldType_CareerId\020\020\022\025\n\021TMFieldType_Level\020\021"
  "\022\027\n\023TMFieldType_MapInfo\020\022\022\033\n\027TMFieldType"
  "_MapPosition\020\023\022\027\n\023TMFieldType_Appoint\020\024\022"
  "\023\n\017TMFieldType_Sex\020\025\022\025\n\021TMFieldType_Mode"
  "l\020\026\022\032\n\026TMFieldType_FightPoint\020\027\022\022\n\016TMFie"
  "ldType_Hp\020\030\022\025\n\021TMFieldType_MaxHp\020\031\022\022\n\016TM"
  "FieldType_Mp\020\032\022\025\n\021TMFieldType_MaxMp\020\033\022\033\n"
  "\027TMFieldType_CareerLevel\020\034\022\027\n\023TMFieldTyp"
  "e_Fashion\020\035\022\030\n\024TMFieldType_MainHand\020\036\022\027\n"
  "\023TMFieldType_OffHand\020\037*\227\001\n\017enLeaveTeamTy"
  "pe\022\030\n\024enLeaveTeamType_None\020\000\022\032\n\026enLeaveT"
  "eamType_Active\020\001\022\030\n\024enLeaveTeamType_Fire"
  "\020\002\022\033\n\027enLeaveTeamType_Dismiss\020\003\022\027\n\023enLea"
  "veTeamType_Max\020\004b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_teamcommon_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::_pbi::once_flag descriptor_table_teamcommon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_teamcommon_2eproto = {
    false, false, 3744, descriptor_table_protodef_teamcommon_2eproto,
    "teamcommon.proto",
    &descriptor_table_teamcommon_2eproto_once, descriptor_table_teamcommon_2eproto_deps, 1, 25,
    schemas, file_default_instances, TableStruct_teamcommon_2eproto::offsets,
    file_level_metadata_teamcommon_2eproto, file_level_enum_descriptors_teamcommon_2eproto,
    file_level_service_descriptors_teamcommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_teamcommon_2eproto_getter() {
  return &descriptor_table_teamcommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_teamcommon_2eproto(&descriptor_table_teamcommon_2eproto);
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enTeamFieldType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_teamcommon_2eproto);
  return file_level_enum_descriptors_teamcommon_2eproto[0];
}
bool enTeamFieldType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enTeamMemberFieldType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_teamcommon_2eproto);
  return file_level_enum_descriptors_teamcommon_2eproto[1];
}
bool enTeamMemberFieldType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enLeaveTeamType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_teamcommon_2eproto);
  return file_level_enum_descriptors_teamcommon_2eproto[2];
}
bool enLeaveTeamType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ModuleTeam::_Internal {
 public:
  static const ::common::NotOwnTeamInfo& notteam(const ModuleTeam* msg);
  static const ::common::OwnTeamInfo& ownteam(const ModuleTeam* msg);
  static const ::common::TeamBase& base(const ModuleTeam* msg);
  static const ::common::TeamMemberList& memberlist(const ModuleTeam* msg);
  static const ::common::TeamApplyList& applylist(const ModuleTeam* msg);
};

const ::common::NotOwnTeamInfo&
ModuleTeam::_Internal::notteam(const ModuleTeam* msg) {
  return *msg->notteam_;
}
const ::common::OwnTeamInfo&
ModuleTeam::_Internal::ownteam(const ModuleTeam* msg) {
  return *msg->ownteam_;
}
const ::common::TeamBase&
ModuleTeam::_Internal::base(const ModuleTeam* msg) {
  return *msg->base_;
}
const ::common::TeamMemberList&
ModuleTeam::_Internal::memberlist(const ModuleTeam* msg) {
  return *msg->memberlist_;
}
const ::common::TeamApplyList&
ModuleTeam::_Internal::applylist(const ModuleTeam* msg) {
  return *msg->applylist_;
}
ModuleTeam::ModuleTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ModuleTeam)
}
ModuleTeam::ModuleTeam(const ModuleTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_notteam()) {
    notteam_ = new ::common::NotOwnTeamInfo(*from.notteam_);
  } else {
    notteam_ = nullptr;
  }
  if (from._internal_has_ownteam()) {
    ownteam_ = new ::common::OwnTeamInfo(*from.ownteam_);
  } else {
    ownteam_ = nullptr;
  }
  if (from._internal_has_base()) {
    base_ = new ::common::TeamBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_memberlist()) {
    memberlist_ = new ::common::TeamMemberList(*from.memberlist_);
  } else {
    memberlist_ = nullptr;
  }
  if (from._internal_has_applylist()) {
    applylist_ = new ::common::TeamApplyList(*from.applylist_);
  } else {
    applylist_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:common.ModuleTeam)
}

inline void ModuleTeam::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&notteam_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&applylist_) -
    reinterpret_cast<char*>(&notteam_)) + sizeof(applylist_));
}

ModuleTeam::~ModuleTeam() {
  // @@protoc_insertion_point(destructor:common.ModuleTeam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModuleTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete notteam_;
  if (this != internal_default_instance()) delete ownteam_;
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete memberlist_;
  if (this != internal_default_instance()) delete applylist_;
}

void ModuleTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModuleTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ModuleTeam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && notteam_ != nullptr) {
    delete notteam_;
  }
  notteam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ownteam_ != nullptr) {
    delete ownteam_;
  }
  ownteam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArenaForAllocation() == nullptr && memberlist_ != nullptr) {
    delete memberlist_;
  }
  memberlist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && applylist_ != nullptr) {
    delete applylist_;
  }
  applylist_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModuleTeam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.NotOwnTeamInfo notteam = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_notteam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.OwnTeamInfo ownTeam = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ownteam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.TeamBase base = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.TeamMemberList memberList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_memberlist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.TeamApplyList applyList = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_applylist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModuleTeam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ModuleTeam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.NotOwnTeamInfo notteam = 1;
  if (this->_internal_has_notteam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::notteam(this),
        _Internal::notteam(this).GetCachedSize(), target, stream);
  }

  // .common.OwnTeamInfo ownTeam = 2;
  if (this->_internal_has_ownteam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ownteam(this),
        _Internal::ownteam(this).GetCachedSize(), target, stream);
  }

  // .common.TeamBase base = 3;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // .common.TeamMemberList memberList = 4;
  if (this->_internal_has_memberlist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::memberlist(this),
        _Internal::memberlist(this).GetCachedSize(), target, stream);
  }

  // .common.TeamApplyList applyList = 5;
  if (this->_internal_has_applylist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::applylist(this),
        _Internal::applylist(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ModuleTeam)
  return target;
}

size_t ModuleTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ModuleTeam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.NotOwnTeamInfo notteam = 1;
  if (this->_internal_has_notteam()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *notteam_);
  }

  // .common.OwnTeamInfo ownTeam = 2;
  if (this->_internal_has_ownteam()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ownteam_);
  }

  // .common.TeamBase base = 3;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .common.TeamMemberList memberList = 4;
  if (this->_internal_has_memberlist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *memberlist_);
  }

  // .common.TeamApplyList applyList = 5;
  if (this->_internal_has_applylist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *applylist_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModuleTeam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModuleTeam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModuleTeam::GetClassData() const { return &_class_data_; }

void ModuleTeam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModuleTeam *>(to)->MergeFrom(
      static_cast<const ModuleTeam &>(from));
}


void ModuleTeam::MergeFrom(const ModuleTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ModuleTeam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_notteam()) {
    _internal_mutable_notteam()->::common::NotOwnTeamInfo::MergeFrom(from._internal_notteam());
  }
  if (from._internal_has_ownteam()) {
    _internal_mutable_ownteam()->::common::OwnTeamInfo::MergeFrom(from._internal_ownteam());
  }
  if (from._internal_has_base()) {
    _internal_mutable_base()->::common::TeamBase::MergeFrom(from._internal_base());
  }
  if (from._internal_has_memberlist()) {
    _internal_mutable_memberlist()->::common::TeamMemberList::MergeFrom(from._internal_memberlist());
  }
  if (from._internal_has_applylist()) {
    _internal_mutable_applylist()->::common::TeamApplyList::MergeFrom(from._internal_applylist());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModuleTeam::CopyFrom(const ModuleTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ModuleTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleTeam::IsInitialized() const {
  return true;
}

void ModuleTeam::InternalSwap(ModuleTeam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModuleTeam, applylist_)
      + sizeof(ModuleTeam::applylist_)
      - PROTOBUF_FIELD_OFFSET(ModuleTeam, notteam_)>(
          reinterpret_cast<char*>(&notteam_),
          reinterpret_cast<char*>(&other->notteam_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModuleTeam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamcommon_2eproto_getter, &descriptor_table_teamcommon_2eproto_once,
      file_level_metadata_teamcommon_2eproto[0]);
}

// ===================================================================

class ModuleTeamView::_Internal {
 public:
};

ModuleTeamView::ModuleTeamView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.ModuleTeamView)
}
ModuleTeamView::ModuleTeamView(const ModuleTeamView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&teamid_, &from.teamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&leadersceneid_) -
    reinterpret_cast<char*>(&teamid_)) + sizeof(leadersceneid_));
  // @@protoc_insertion_point(copy_constructor:common.ModuleTeamView)
}

inline void ModuleTeamView::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&teamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&leadersceneid_) -
    reinterpret_cast<char*>(&teamid_)) + sizeof(leadersceneid_));
}

ModuleTeamView::~ModuleTeamView() {
  // @@protoc_insertion_point(destructor:common.ModuleTeamView)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModuleTeamView::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ModuleTeamView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModuleTeamView::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ModuleTeamView)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&teamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leadersceneid_) -
      reinterpret_cast<char*>(&teamid_)) + sizeof(leadersceneid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModuleTeamView::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 teamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 leaderSceneId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          leadersceneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModuleTeamView::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ModuleTeamView)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 teamid = 1;
  if (this->_internal_teamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_teamid(), target);
  }

  // uint64 leaderSceneId = 2;
  if (this->_internal_leadersceneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_leadersceneid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ModuleTeamView)
  return target;
}

size_t ModuleTeamView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ModuleTeamView)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 teamid = 1;
  if (this->_internal_teamid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_teamid());
  }

  // uint64 leaderSceneId = 2;
  if (this->_internal_leadersceneid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_leadersceneid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModuleTeamView::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModuleTeamView::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModuleTeamView::GetClassData() const { return &_class_data_; }

void ModuleTeamView::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModuleTeamView *>(to)->MergeFrom(
      static_cast<const ModuleTeamView &>(from));
}


void ModuleTeamView::MergeFrom(const ModuleTeamView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ModuleTeamView)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_teamid() != 0) {
    _internal_set_teamid(from._internal_teamid());
  }
  if (from._internal_leadersceneid() != 0) {
    _internal_set_leadersceneid(from._internal_leadersceneid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModuleTeamView::CopyFrom(const ModuleTeamView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ModuleTeamView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleTeamView::IsInitialized() const {
  return true;
}

void ModuleTeamView::InternalSwap(ModuleTeamView* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModuleTeamView, leadersceneid_)
      + sizeof(ModuleTeamView::leadersceneid_)
      - PROTOBUF_FIELD_OFFSET(ModuleTeamView, teamid_)>(
          reinterpret_cast<char*>(&teamid_),
          reinterpret_cast<char*>(&other->teamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModuleTeamView::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamcommon_2eproto_getter, &descriptor_table_teamcommon_2eproto_once,
      file_level_metadata_teamcommon_2eproto[1]);
}

// ===================================================================

class NotOwnTeamInfo::_Internal {
 public:
  static const ::common::TeamInvited& invited(const NotOwnTeamInfo* msg);
};

const ::common::TeamInvited&
NotOwnTeamInfo::_Internal::invited(const NotOwnTeamInfo* msg) {
  return *msg->invited_;
}
NotOwnTeamInfo::NotOwnTeamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  targetids_(arena),
  expires_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.NotOwnTeamInfo)
}
NotOwnTeamInfo::NotOwnTeamInfo(const NotOwnTeamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      targetids_(from.targetids_),
      expires_(from.expires_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_invited()) {
    invited_ = new ::common::TeamInvited(*from.invited_);
  } else {
    invited_ = nullptr;
  }
  ::memcpy(&apply_, &from.apply_,
    static_cast<size_t>(reinterpret_cast<char*>(&allexpire_) -
    reinterpret_cast<char*>(&apply_)) + sizeof(allexpire_));
  // @@protoc_insertion_point(copy_constructor:common.NotOwnTeamInfo)
}

inline void NotOwnTeamInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&invited_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&allexpire_) -
    reinterpret_cast<char*>(&invited_)) + sizeof(allexpire_));
}

NotOwnTeamInfo::~NotOwnTeamInfo() {
  // @@protoc_insertion_point(destructor:common.NotOwnTeamInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotOwnTeamInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete invited_;
}

void NotOwnTeamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotOwnTeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:common.NotOwnTeamInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targetids_.Clear();
  expires_.Clear();
  if (GetArenaForAllocation() == nullptr && invited_ != nullptr) {
    delete invited_;
  }
  invited_ = nullptr;
  ::memset(&apply_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allexpire_) -
      reinterpret_cast<char*>(&apply_)) + sizeof(allexpire_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotOwnTeamInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.TeamInvited invited = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_invited(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 apply = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          apply_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 create = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          create_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 match = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 allExpire = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          allexpire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 targetIds = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_targetids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_targetids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 expires = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_expires(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_expires(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotOwnTeamInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.NotOwnTeamInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.TeamInvited invited = 1;
  if (this->_internal_has_invited()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::invited(this),
        _Internal::invited(this).GetCachedSize(), target, stream);
  }

  // uint32 apply = 2;
  if (this->_internal_apply() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_apply(), target);
  }

  // uint32 create = 3;
  if (this->_internal_create() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_create(), target);
  }

  // uint32 match = 4;
  if (this->_internal_match() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_match(), target);
  }

  // uint32 allExpire = 5;
  if (this->_internal_allexpire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_allexpire(), target);
  }

  // repeated uint32 targetIds = 6;
  {
    int byte_size = _targetids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_targetids(), byte_size, target);
    }
  }

  // repeated uint32 expires = 7;
  {
    int byte_size = _expires_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_expires(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.NotOwnTeamInfo)
  return target;
}

size_t NotOwnTeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.NotOwnTeamInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 targetIds = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->targetids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _targetids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 expires = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->expires_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _expires_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .common.TeamInvited invited = 1;
  if (this->_internal_has_invited()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *invited_);
  }

  // uint32 apply = 2;
  if (this->_internal_apply() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_apply());
  }

  // uint32 create = 3;
  if (this->_internal_create() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_create());
  }

  // uint32 match = 4;
  if (this->_internal_match() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_match());
  }

  // uint32 allExpire = 5;
  if (this->_internal_allexpire() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_allexpire());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotOwnTeamInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NotOwnTeamInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotOwnTeamInfo::GetClassData() const { return &_class_data_; }

void NotOwnTeamInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NotOwnTeamInfo *>(to)->MergeFrom(
      static_cast<const NotOwnTeamInfo &>(from));
}


void NotOwnTeamInfo::MergeFrom(const NotOwnTeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.NotOwnTeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  targetids_.MergeFrom(from.targetids_);
  expires_.MergeFrom(from.expires_);
  if (from._internal_has_invited()) {
    _internal_mutable_invited()->::common::TeamInvited::MergeFrom(from._internal_invited());
  }
  if (from._internal_apply() != 0) {
    _internal_set_apply(from._internal_apply());
  }
  if (from._internal_create() != 0) {
    _internal_set_create(from._internal_create());
  }
  if (from._internal_match() != 0) {
    _internal_set_match(from._internal_match());
  }
  if (from._internal_allexpire() != 0) {
    _internal_set_allexpire(from._internal_allexpire());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotOwnTeamInfo::CopyFrom(const NotOwnTeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.NotOwnTeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotOwnTeamInfo::IsInitialized() const {
  return true;
}

void NotOwnTeamInfo::InternalSwap(NotOwnTeamInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  targetids_.InternalSwap(&other->targetids_);
  expires_.InternalSwap(&other->expires_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NotOwnTeamInfo, allexpire_)
      + sizeof(NotOwnTeamInfo::allexpire_)
      - PROTOBUF_FIELD_OFFSET(NotOwnTeamInfo, invited_)>(
          reinterpret_cast<char*>(&invited_),
          reinterpret_cast<char*>(&other->invited_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NotOwnTeamInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamcommon_2eproto_getter, &descriptor_table_teamcommon_2eproto_once,
      file_level_metadata_teamcommon_2eproto[2]);
}

// ===================================================================

class OwnTeamInfo::_Internal {
 public:
};

OwnTeamInfo::OwnTeamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.OwnTeamInfo)
}
OwnTeamInfo::OwnTeamInfo(const OwnTeamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&replace_, &from.replace_,
    static_cast<size_t>(reinterpret_cast<char*>(&appoint_) -
    reinterpret_cast<char*>(&replace_)) + sizeof(appoint_));
  // @@protoc_insertion_point(copy_constructor:common.OwnTeamInfo)
}

inline void OwnTeamInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&replace_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appoint_) -
    reinterpret_cast<char*>(&replace_)) + sizeof(appoint_));
}

OwnTeamInfo::~OwnTeamInfo() {
  // @@protoc_insertion_point(destructor:common.OwnTeamInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OwnTeamInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OwnTeamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OwnTeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:common.OwnTeamInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&replace_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appoint_) -
      reinterpret_cast<char*>(&replace_)) + sizeof(appoint_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OwnTeamInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 replace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          replace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 invite = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          invite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 together = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          together_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 appoint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          appoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OwnTeamInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.OwnTeamInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 replace = 1;
  if (this->_internal_replace() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_replace(), target);
  }

  // uint32 invite = 2;
  if (this->_internal_invite() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_invite(), target);
  }

  // uint32 together = 3;
  if (this->_internal_together() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_together(), target);
  }

  // uint32 appoint = 4;
  if (this->_internal_appoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_appoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.OwnTeamInfo)
  return target;
}

size_t OwnTeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.OwnTeamInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 replace = 1;
  if (this->_internal_replace() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_replace());
  }

  // uint32 invite = 2;
  if (this->_internal_invite() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_invite());
  }

  // uint32 together = 3;
  if (this->_internal_together() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_together());
  }

  // uint32 appoint = 4;
  if (this->_internal_appoint() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appoint());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OwnTeamInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OwnTeamInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OwnTeamInfo::GetClassData() const { return &_class_data_; }

void OwnTeamInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OwnTeamInfo *>(to)->MergeFrom(
      static_cast<const OwnTeamInfo &>(from));
}


void OwnTeamInfo::MergeFrom(const OwnTeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.OwnTeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_replace() != 0) {
    _internal_set_replace(from._internal_replace());
  }
  if (from._internal_invite() != 0) {
    _internal_set_invite(from._internal_invite());
  }
  if (from._internal_together() != 0) {
    _internal_set_together(from._internal_together());
  }
  if (from._internal_appoint() != 0) {
    _internal_set_appoint(from._internal_appoint());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OwnTeamInfo::CopyFrom(const OwnTeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.OwnTeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnTeamInfo::IsInitialized() const {
  return true;
}

void OwnTeamInfo::InternalSwap(OwnTeamInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OwnTeamInfo, appoint_)
      + sizeof(OwnTeamInfo::appoint_)
      - PROTOBUF_FIELD_OFFSET(OwnTeamInfo, replace_)>(
          reinterpret_cast<char*>(&replace_),
          reinterpret_cast<char*>(&other->replace_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OwnTeamInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamcommon_2eproto_getter, &descriptor_table_teamcommon_2eproto_once,
      file_level_metadata_teamcommon_2eproto[3]);
}

// ===================================================================

class TeamInvited::_Internal {
 public:
};

TeamInvited::TeamInvited(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.TeamInvited)
}
TeamInvited::TeamInvited(const TeamInvited& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    nickname_.Set(from._internal_nickname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&expire_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(expire_));
  // @@protoc_insertion_point(copy_constructor:common.TeamInvited)
}

inline void TeamInvited::SharedCtor() {
nickname_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nickname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roleid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expire_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(expire_));
}

TeamInvited::~TeamInvited() {
  // @@protoc_insertion_point(destructor:common.TeamInvited)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeamInvited::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nickname_.Destroy();
}

void TeamInvited::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TeamInvited::Clear() {
// @@protoc_insertion_point(message_clear_start:common.TeamInvited)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty();
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expire_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(expire_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamInvited::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 roleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes nickName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 expire = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          expire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 teamId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 leaderSceneId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          leadersceneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeamInvited::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.TeamInvited)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roleId = 1;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // bytes nickName = 2;
  if (!this->_internal_nickname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // uint32 expire = 3;
  if (this->_internal_expire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_expire(), target);
  }

  // uint64 teamId = 4;
  if (this->_internal_teamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_teamid(), target);
  }

  // uint64 leaderSceneId = 5;
  if (this->_internal_leadersceneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_leadersceneid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.TeamInvited)
  return target;
}

size_t TeamInvited::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.TeamInvited)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes nickName = 2;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nickname());
  }

  // uint64 roleId = 1;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
  }

  // uint64 teamId = 4;
  if (this->_internal_teamid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_teamid());
  }

  // uint64 leaderSceneId = 5;
  if (this->_internal_leadersceneid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_leadersceneid());
  }

  // uint32 expire = 3;
  if (this->_internal_expire() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_expire());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeamInvited::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TeamInvited::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeamInvited::GetClassData() const { return &_class_data_; }

void TeamInvited::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TeamInvited *>(to)->MergeFrom(
      static_cast<const TeamInvited &>(from));
}


void TeamInvited::MergeFrom(const TeamInvited& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.TeamInvited)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from._internal_roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_teamid() != 0) {
    _internal_set_teamid(from._internal_teamid());
  }
  if (from._internal_leadersceneid() != 0) {
    _internal_set_leadersceneid(from._internal_leadersceneid());
  }
  if (from._internal_expire() != 0) {
    _internal_set_expire(from._internal_expire());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeamInvited::CopyFrom(const TeamInvited& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.TeamInvited)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamInvited::IsInitialized() const {
  return true;
}

void TeamInvited::InternalSwap(TeamInvited* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &nickname_, lhs_arena,
      &other->nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeamInvited, expire_)
      + sizeof(TeamInvited::expire_)
      - PROTOBUF_FIELD_OFFSET(TeamInvited, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamInvited::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamcommon_2eproto_getter, &descriptor_table_teamcommon_2eproto_once,
      file_level_metadata_teamcommon_2eproto[4]);
}

// ===================================================================

class TeamBase::_Internal {
 public:
};

TeamBase::TeamBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.TeamBase)
}
TeamBase::TeamBase(const TeamBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    text_.Set(from._internal_text(), 
      GetArenaForAllocation());
  }
  ::memcpy(&teamid_, &from.teamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&leadersceneid_) -
    reinterpret_cast<char*>(&teamid_)) + sizeof(leadersceneid_));
  // @@protoc_insertion_point(copy_constructor:common.TeamBase)
}

inline void TeamBase::SharedCtor() {
text_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&teamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&leadersceneid_) -
    reinterpret_cast<char*>(&teamid_)) + sizeof(leadersceneid_));
}

TeamBase::~TeamBase() {
  // @@protoc_insertion_point(destructor:common.TeamBase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeamBase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.Destroy();
}

void TeamBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TeamBase::Clear() {
// @@protoc_insertion_point(message_clear_start:common.TeamBase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  ::memset(&teamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leadersceneid_) -
      reinterpret_cast<char*>(&teamid_)) + sizeof(leadersceneid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamBase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 teamId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 leaderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          leaderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 targetId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 minLevel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          minlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 maxLevel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          maxlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 matchTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          matchtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes text = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 leaderSceneId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          leadersceneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeamBase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.TeamBase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 teamId = 1;
  if (this->_internal_teamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_teamid(), target);
  }

  // uint64 leaderId = 2;
  if (this->_internal_leaderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_leaderid(), target);
  }

  // uint32 targetId = 3;
  if (this->_internal_targetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_targetid(), target);
  }

  // uint32 minLevel = 4;
  if (this->_internal_minlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_minlevel(), target);
  }

  // uint32 maxLevel = 5;
  if (this->_internal_maxlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_maxlevel(), target);
  }

  // uint32 matchTime = 6;
  if (this->_internal_matchtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_matchtime(), target);
  }

  // bytes text = 7;
  if (!this->_internal_text().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_text(), target);
  }

  // uint64 leaderSceneId = 8;
  if (this->_internal_leadersceneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_leadersceneid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.TeamBase)
  return target;
}

size_t TeamBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.TeamBase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes text = 7;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_text());
  }

  // uint64 teamId = 1;
  if (this->_internal_teamid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_teamid());
  }

  // uint64 leaderId = 2;
  if (this->_internal_leaderid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_leaderid());
  }

  // uint32 targetId = 3;
  if (this->_internal_targetid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_targetid());
  }

  // uint32 minLevel = 4;
  if (this->_internal_minlevel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minlevel());
  }

  // uint32 maxLevel = 5;
  if (this->_internal_maxlevel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxlevel());
  }

  // uint32 matchTime = 6;
  if (this->_internal_matchtime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_matchtime());
  }

  // uint64 leaderSceneId = 8;
  if (this->_internal_leadersceneid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_leadersceneid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeamBase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TeamBase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeamBase::GetClassData() const { return &_class_data_; }

void TeamBase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TeamBase *>(to)->MergeFrom(
      static_cast<const TeamBase &>(from));
}


void TeamBase::MergeFrom(const TeamBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.TeamBase)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  if (from._internal_teamid() != 0) {
    _internal_set_teamid(from._internal_teamid());
  }
  if (from._internal_leaderid() != 0) {
    _internal_set_leaderid(from._internal_leaderid());
  }
  if (from._internal_targetid() != 0) {
    _internal_set_targetid(from._internal_targetid());
  }
  if (from._internal_minlevel() != 0) {
    _internal_set_minlevel(from._internal_minlevel());
  }
  if (from._internal_maxlevel() != 0) {
    _internal_set_maxlevel(from._internal_maxlevel());
  }
  if (from._internal_matchtime() != 0) {
    _internal_set_matchtime(from._internal_matchtime());
  }
  if (from._internal_leadersceneid() != 0) {
    _internal_set_leadersceneid(from._internal_leadersceneid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeamBase::CopyFrom(const TeamBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.TeamBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamBase::IsInitialized() const {
  return true;
}

void TeamBase::InternalSwap(TeamBase* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeamBase, leadersceneid_)
      + sizeof(TeamBase::leadersceneid_)
      - PROTOBUF_FIELD_OFFSET(TeamBase, teamid_)>(
          reinterpret_cast<char*>(&teamid_),
          reinterpret_cast<char*>(&other->teamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamBase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamcommon_2eproto_getter, &descriptor_table_teamcommon_2eproto_once,
      file_level_metadata_teamcommon_2eproto[5]);
}

// ===================================================================

class TeamMemberList::_Internal {
 public:
};

TeamMemberList::TeamMemberList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.TeamMemberList)
}
TeamMemberList::TeamMemberList(const TeamMemberList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:common.TeamMemberList)
}

inline void TeamMemberList::SharedCtor() {
}

TeamMemberList::~TeamMemberList() {
  // @@protoc_insertion_point(destructor:common.TeamMemberList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeamMemberList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TeamMemberList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TeamMemberList::Clear() {
// @@protoc_insertion_point(message_clear_start:common.TeamMemberList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamMemberList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .common.TeamMember members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeamMemberList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.TeamMemberList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.TeamMember members = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.TeamMemberList)
  return target;
}

size_t TeamMemberList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.TeamMemberList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.TeamMember members = 1;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeamMemberList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TeamMemberList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeamMemberList::GetClassData() const { return &_class_data_; }

void TeamMemberList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TeamMemberList *>(to)->MergeFrom(
      static_cast<const TeamMemberList &>(from));
}


void TeamMemberList::MergeFrom(const TeamMemberList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.TeamMemberList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeamMemberList::CopyFrom(const TeamMemberList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.TeamMemberList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMemberList::IsInitialized() const {
  return true;
}

void TeamMemberList::InternalSwap(TeamMemberList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamMemberList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamcommon_2eproto_getter, &descriptor_table_teamcommon_2eproto_once,
      file_level_metadata_teamcommon_2eproto[6]);
}

// ===================================================================

class TeamApplyList::_Internal {
 public:
};

TeamApplyList::TeamApplyList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  applys_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.TeamApplyList)
}
TeamApplyList::TeamApplyList(const TeamApplyList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      applys_(from.applys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:common.TeamApplyList)
}

inline void TeamApplyList::SharedCtor() {
}

TeamApplyList::~TeamApplyList() {
  // @@protoc_insertion_point(destructor:common.TeamApplyList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeamApplyList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TeamApplyList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TeamApplyList::Clear() {
// @@protoc_insertion_point(message_clear_start:common.TeamApplyList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  applys_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamApplyList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .common.TeamApply applys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_applys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeamApplyList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.TeamApplyList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.TeamApply applys = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_applys_size()); i < n; i++) {
    const auto& repfield = this->_internal_applys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.TeamApplyList)
  return target;
}

size_t TeamApplyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.TeamApplyList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.TeamApply applys = 1;
  total_size += 1UL * this->_internal_applys_size();
  for (const auto& msg : this->applys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeamApplyList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TeamApplyList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeamApplyList::GetClassData() const { return &_class_data_; }

void TeamApplyList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TeamApplyList *>(to)->MergeFrom(
      static_cast<const TeamApplyList &>(from));
}


void TeamApplyList::MergeFrom(const TeamApplyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.TeamApplyList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  applys_.MergeFrom(from.applys_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeamApplyList::CopyFrom(const TeamApplyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.TeamApplyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamApplyList::IsInitialized() const {
  return true;
}

void TeamApplyList::InternalSwap(TeamApplyList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  applys_.InternalSwap(&other->applys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamApplyList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamcommon_2eproto_getter, &descriptor_table_teamcommon_2eproto_once,
      file_level_metadata_teamcommon_2eproto[7]);
}

// ===================================================================

class TeamMember::_Internal {
 public:
  static const ::common::RoleBrief& role(const TeamMember* msg);
  static const ::common::RoleExtend1& extd1(const TeamMember* msg);
  static const ::common::RoleExtend2& extd2(const TeamMember* msg);
  static const ::common::RoleExtend3& extd3(const TeamMember* msg);
};

const ::common::RoleBrief&
TeamMember::_Internal::role(const TeamMember* msg) {
  return *msg->role_;
}
const ::common::RoleExtend1&
TeamMember::_Internal::extd1(const TeamMember* msg) {
  return *msg->extd1_;
}
const ::common::RoleExtend2&
TeamMember::_Internal::extd2(const TeamMember* msg) {
  return *msg->extd2_;
}
const ::common::RoleExtend3&
TeamMember::_Internal::extd3(const TeamMember* msg) {
  return *msg->extd3_;
}
void TeamMember::clear_role() {
  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
}
void TeamMember::clear_extd1() {
  if (GetArenaForAllocation() == nullptr && extd1_ != nullptr) {
    delete extd1_;
  }
  extd1_ = nullptr;
}
void TeamMember::clear_extd2() {
  if (GetArenaForAllocation() == nullptr && extd2_ != nullptr) {
    delete extd2_;
  }
  extd2_ = nullptr;
}
void TeamMember::clear_extd3() {
  if (GetArenaForAllocation() == nullptr && extd3_ != nullptr) {
    delete extd3_;
  }
  extd3_ = nullptr;
}
TeamMember::TeamMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.TeamMember)
}
TeamMember::TeamMember(const TeamMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role()) {
    role_ = new ::common::RoleBrief(*from.role_);
  } else {
    role_ = nullptr;
  }
  if (from._internal_has_extd1()) {
    extd1_ = new ::common::RoleExtend1(*from.extd1_);
  } else {
    extd1_ = nullptr;
  }
  if (from._internal_has_extd2()) {
    extd2_ = new ::common::RoleExtend2(*from.extd2_);
  } else {
    extd2_ = nullptr;
  }
  if (from._internal_has_extd3()) {
    extd3_ = new ::common::RoleExtend3(*from.extd3_);
  } else {
    extd3_ = nullptr;
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&follow_) -
    reinterpret_cast<char*>(&index_)) + sizeof(follow_));
  // @@protoc_insertion_point(copy_constructor:common.TeamMember)
}

inline void TeamMember::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&role_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&follow_) -
    reinterpret_cast<char*>(&role_)) + sizeof(follow_));
}

TeamMember::~TeamMember() {
  // @@protoc_insertion_point(destructor:common.TeamMember)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeamMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete role_;
  if (this != internal_default_instance()) delete extd1_;
  if (this != internal_default_instance()) delete extd2_;
  if (this != internal_default_instance()) delete extd3_;
}

void TeamMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TeamMember::Clear() {
// @@protoc_insertion_point(message_clear_start:common.TeamMember)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  if (GetArenaForAllocation() == nullptr && extd1_ != nullptr) {
    delete extd1_;
  }
  extd1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && extd2_ != nullptr) {
    delete extd2_;
  }
  extd2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && extd3_ != nullptr) {
    delete extd3_;
  }
  extd3_ = nullptr;
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&follow_) -
      reinterpret_cast<char*>(&index_)) + sizeof(follow_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamMember::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.RoleBrief role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool follow = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          follow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.RoleExtend1 extd1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_extd1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.RoleExtend2 extd2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_extd2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.RoleExtend3 extd3 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_extd3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeamMember::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.TeamMember)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.RoleBrief role = 1;
  if (this->_internal_has_role()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::role(this),
        _Internal::role(this).GetCachedSize(), target, stream);
  }

  // uint32 index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  // bool state = 3;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_state(), target);
  }

  // bool follow = 4;
  if (this->_internal_follow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_follow(), target);
  }

  // .common.RoleExtend1 extd1 = 5;
  if (this->_internal_has_extd1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::extd1(this),
        _Internal::extd1(this).GetCachedSize(), target, stream);
  }

  // .common.RoleExtend2 extd2 = 6;
  if (this->_internal_has_extd2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::extd2(this),
        _Internal::extd2(this).GetCachedSize(), target, stream);
  }

  // .common.RoleExtend3 extd3 = 7;
  if (this->_internal_has_extd3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::extd3(this),
        _Internal::extd3(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.TeamMember)
  return target;
}

size_t TeamMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.TeamMember)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.RoleBrief role = 1;
  if (this->_internal_has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  // .common.RoleExtend1 extd1 = 5;
  if (this->_internal_has_extd1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extd1_);
  }

  // .common.RoleExtend2 extd2 = 6;
  if (this->_internal_has_extd2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extd2_);
  }

  // .common.RoleExtend3 extd3 = 7;
  if (this->_internal_has_extd3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extd3_);
  }

  // uint32 index = 2;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  // bool state = 3;
  if (this->_internal_state() != 0) {
    total_size += 1 + 1;
  }

  // bool follow = 4;
  if (this->_internal_follow() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeamMember::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TeamMember::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeamMember::GetClassData() const { return &_class_data_; }

void TeamMember::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TeamMember *>(to)->MergeFrom(
      static_cast<const TeamMember &>(from));
}


void TeamMember::MergeFrom(const TeamMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.TeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_role()) {
    _internal_mutable_role()->::common::RoleBrief::MergeFrom(from._internal_role());
  }
  if (from._internal_has_extd1()) {
    _internal_mutable_extd1()->::common::RoleExtend1::MergeFrom(from._internal_extd1());
  }
  if (from._internal_has_extd2()) {
    _internal_mutable_extd2()->::common::RoleExtend2::MergeFrom(from._internal_extd2());
  }
  if (from._internal_has_extd3()) {
    _internal_mutable_extd3()->::common::RoleExtend3::MergeFrom(from._internal_extd3());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from._internal_follow() != 0) {
    _internal_set_follow(from._internal_follow());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeamMember::CopyFrom(const TeamMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.TeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMember::IsInitialized() const {
  return true;
}

void TeamMember::InternalSwap(TeamMember* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeamMember, follow_)
      + sizeof(TeamMember::follow_)
      - PROTOBUF_FIELD_OFFSET(TeamMember, role_)>(
          reinterpret_cast<char*>(&role_),
          reinterpret_cast<char*>(&other->role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamMember::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamcommon_2eproto_getter, &descriptor_table_teamcommon_2eproto_once,
      file_level_metadata_teamcommon_2eproto[8]);
}

// ===================================================================

class TeamApply::_Internal {
 public:
  static const ::common::RoleBrief& role(const TeamApply* msg);
};

const ::common::RoleBrief&
TeamApply::_Internal::role(const TeamApply* msg) {
  return *msg->role_;
}
void TeamApply::clear_role() {
  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
}
TeamApply::TeamApply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.TeamApply)
}
TeamApply::TeamApply(const TeamApply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role()) {
    role_ = new ::common::RoleBrief(*from.role_);
  } else {
    role_ = nullptr;
  }
  ::memcpy(&leadersceneid_, &from.leadersceneid_,
    static_cast<size_t>(reinterpret_cast<char*>(&expire_) -
    reinterpret_cast<char*>(&leadersceneid_)) + sizeof(expire_));
  // @@protoc_insertion_point(copy_constructor:common.TeamApply)
}

inline void TeamApply::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&role_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expire_) -
    reinterpret_cast<char*>(&role_)) + sizeof(expire_));
}

TeamApply::~TeamApply() {
  // @@protoc_insertion_point(destructor:common.TeamApply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeamApply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete role_;
}

void TeamApply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TeamApply::Clear() {
// @@protoc_insertion_point(message_clear_start:common.TeamApply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  ::memset(&leadersceneid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expire_) -
      reinterpret_cast<char*>(&leadersceneid_)) + sizeof(expire_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamApply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.RoleBrief role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 expire = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          expire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 leaderSceneId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          leadersceneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeamApply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.TeamApply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.RoleBrief role = 1;
  if (this->_internal_has_role()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::role(this),
        _Internal::role(this).GetCachedSize(), target, stream);
  }

  // uint32 expire = 2;
  if (this->_internal_expire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_expire(), target);
  }

  // uint64 leaderSceneId = 3;
  if (this->_internal_leadersceneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_leadersceneid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.TeamApply)
  return target;
}

size_t TeamApply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.TeamApply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.RoleBrief role = 1;
  if (this->_internal_has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  // uint64 leaderSceneId = 3;
  if (this->_internal_leadersceneid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_leadersceneid());
  }

  // uint32 expire = 2;
  if (this->_internal_expire() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_expire());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeamApply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TeamApply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeamApply::GetClassData() const { return &_class_data_; }

void TeamApply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TeamApply *>(to)->MergeFrom(
      static_cast<const TeamApply &>(from));
}


void TeamApply::MergeFrom(const TeamApply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.TeamApply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_role()) {
    _internal_mutable_role()->::common::RoleBrief::MergeFrom(from._internal_role());
  }
  if (from._internal_leadersceneid() != 0) {
    _internal_set_leadersceneid(from._internal_leadersceneid());
  }
  if (from._internal_expire() != 0) {
    _internal_set_expire(from._internal_expire());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeamApply::CopyFrom(const TeamApply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.TeamApply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamApply::IsInitialized() const {
  return true;
}

void TeamApply::InternalSwap(TeamApply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeamApply, expire_)
      + sizeof(TeamApply::expire_)
      - PROTOBUF_FIELD_OFFSET(TeamApply, role_)>(
          reinterpret_cast<char*>(&role_),
          reinterpret_cast<char*>(&other->role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamApply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamcommon_2eproto_getter, &descriptor_table_teamcommon_2eproto_once,
      file_level_metadata_teamcommon_2eproto[9]);
}

// ===================================================================

class RecruitTeam::_Internal {
 public:
  static const ::common::RecruitTeamLeader& leader(const RecruitTeam* msg);
};

const ::common::RecruitTeamLeader&
RecruitTeam::_Internal::leader(const RecruitTeam* msg) {
  return *msg->leader_;
}
RecruitTeam::RecruitTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.RecruitTeam)
}
RecruitTeam::RecruitTeam(const RecruitTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    text_.Set(from._internal_text(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_leader()) {
    leader_ = new ::common::RecruitTeamLeader(*from.leader_);
  } else {
    leader_ = nullptr;
  }
  ::memcpy(&teamid_, &from.teamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxlevel_) -
    reinterpret_cast<char*>(&teamid_)) + sizeof(maxlevel_));
  // @@protoc_insertion_point(copy_constructor:common.RecruitTeam)
}

inline void RecruitTeam::SharedCtor() {
text_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&leader_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&maxlevel_) -
    reinterpret_cast<char*>(&leader_)) + sizeof(maxlevel_));
}

RecruitTeam::~RecruitTeam() {
  // @@protoc_insertion_point(destructor:common.RecruitTeam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecruitTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.Destroy();
  if (this != internal_default_instance()) delete leader_;
}

void RecruitTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecruitTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:common.RecruitTeam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  text_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && leader_ != nullptr) {
    delete leader_;
  }
  leader_ = nullptr;
  ::memset(&teamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxlevel_) -
      reinterpret_cast<char*>(&teamid_)) + sizeof(maxlevel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecruitTeam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 teamId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.RecruitTeamLeader leader = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_leader(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .common.RecruitTeamMember members = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 targetId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 minLevel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          minlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 maxLevel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          maxlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes text = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 leaderSceneId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          leadersceneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecruitTeam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.RecruitTeam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 teamId = 1;
  if (this->_internal_teamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_teamid(), target);
  }

  // .common.RecruitTeamLeader leader = 2;
  if (this->_internal_has_leader()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::leader(this),
        _Internal::leader(this).GetCachedSize(), target, stream);
  }

  // repeated .common.RecruitTeamMember members = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 targetId = 4;
  if (this->_internal_targetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_targetid(), target);
  }

  // uint32 minLevel = 5;
  if (this->_internal_minlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_minlevel(), target);
  }

  // uint32 maxLevel = 6;
  if (this->_internal_maxlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_maxlevel(), target);
  }

  // bytes text = 7;
  if (!this->_internal_text().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_text(), target);
  }

  // int64 leaderSceneId = 8;
  if (this->_internal_leadersceneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_leadersceneid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.RecruitTeam)
  return target;
}

size_t RecruitTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.RecruitTeam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.RecruitTeamMember members = 3;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes text = 7;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_text());
  }

  // .common.RecruitTeamLeader leader = 2;
  if (this->_internal_has_leader()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leader_);
  }

  // uint64 teamId = 1;
  if (this->_internal_teamid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_teamid());
  }

  // uint32 targetId = 4;
  if (this->_internal_targetid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_targetid());
  }

  // uint32 minLevel = 5;
  if (this->_internal_minlevel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minlevel());
  }

  // int64 leaderSceneId = 8;
  if (this->_internal_leadersceneid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_leadersceneid());
  }

  // uint32 maxLevel = 6;
  if (this->_internal_maxlevel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxlevel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecruitTeam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecruitTeam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecruitTeam::GetClassData() const { return &_class_data_; }

void RecruitTeam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecruitTeam *>(to)->MergeFrom(
      static_cast<const RecruitTeam &>(from));
}


void RecruitTeam::MergeFrom(const RecruitTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.RecruitTeam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  if (from._internal_has_leader()) {
    _internal_mutable_leader()->::common::RecruitTeamLeader::MergeFrom(from._internal_leader());
  }
  if (from._internal_teamid() != 0) {
    _internal_set_teamid(from._internal_teamid());
  }
  if (from._internal_targetid() != 0) {
    _internal_set_targetid(from._internal_targetid());
  }
  if (from._internal_minlevel() != 0) {
    _internal_set_minlevel(from._internal_minlevel());
  }
  if (from._internal_leadersceneid() != 0) {
    _internal_set_leadersceneid(from._internal_leadersceneid());
  }
  if (from._internal_maxlevel() != 0) {
    _internal_set_maxlevel(from._internal_maxlevel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecruitTeam::CopyFrom(const RecruitTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.RecruitTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecruitTeam::IsInitialized() const {
  return true;
}

void RecruitTeam::InternalSwap(RecruitTeam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecruitTeam, maxlevel_)
      + sizeof(RecruitTeam::maxlevel_)
      - PROTOBUF_FIELD_OFFSET(RecruitTeam, leader_)>(
          reinterpret_cast<char*>(&leader_),
          reinterpret_cast<char*>(&other->leader_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecruitTeam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamcommon_2eproto_getter, &descriptor_table_teamcommon_2eproto_once,
      file_level_metadata_teamcommon_2eproto[10]);
}

// ===================================================================

class RecruitTeamLeader::_Internal {
 public:
  static const ::common::RecruitTeamMember& leader(const RecruitTeamLeader* msg);
};

const ::common::RecruitTeamMember&
RecruitTeamLeader::_Internal::leader(const RecruitTeamLeader* msg) {
  return *msg->leader_;
}
RecruitTeamLeader::RecruitTeamLeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.RecruitTeamLeader)
}
RecruitTeamLeader::RecruitTeamLeader(const RecruitTeamLeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    nickname_.Set(from._internal_nickname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_leader()) {
    leader_ = new ::common::RecruitTeamMember(*from.leader_);
  } else {
    leader_ = nullptr;
  }
  ::memcpy(&chatfont_, &from.chatfont_,
    static_cast<size_t>(reinterpret_cast<char*>(&chatframe_) -
    reinterpret_cast<char*>(&chatfont_)) + sizeof(chatframe_));
  // @@protoc_insertion_point(copy_constructor:common.RecruitTeamLeader)
}

inline void RecruitTeamLeader::SharedCtor() {
nickname_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nickname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&leader_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chatframe_) -
    reinterpret_cast<char*>(&leader_)) + sizeof(chatframe_));
}

RecruitTeamLeader::~RecruitTeamLeader() {
  // @@protoc_insertion_point(destructor:common.RecruitTeamLeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecruitTeamLeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nickname_.Destroy();
  if (this != internal_default_instance()) delete leader_;
}

void RecruitTeamLeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecruitTeamLeader::Clear() {
// @@protoc_insertion_point(message_clear_start:common.RecruitTeamLeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && leader_ != nullptr) {
    delete leader_;
  }
  leader_ = nullptr;
  ::memset(&chatfont_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chatframe_) -
      reinterpret_cast<char*>(&chatfont_)) + sizeof(chatframe_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecruitTeamLeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.RecruitTeamMember leader = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_leader(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chatFont = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          chatfont_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chatFrame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          chatframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes nickname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecruitTeamLeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.RecruitTeamLeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.RecruitTeamMember leader = 1;
  if (this->_internal_has_leader()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::leader(this),
        _Internal::leader(this).GetCachedSize(), target, stream);
  }

  // uint32 chatFont = 2;
  if (this->_internal_chatfont() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_chatfont(), target);
  }

  // uint32 chatFrame = 3;
  if (this->_internal_chatframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_chatframe(), target);
  }

  // bytes nickname = 4;
  if (!this->_internal_nickname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_nickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.RecruitTeamLeader)
  return target;
}

size_t RecruitTeamLeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.RecruitTeamLeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes nickname = 4;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nickname());
  }

  // .common.RecruitTeamMember leader = 1;
  if (this->_internal_has_leader()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leader_);
  }

  // uint32 chatFont = 2;
  if (this->_internal_chatfont() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chatfont());
  }

  // uint32 chatFrame = 3;
  if (this->_internal_chatframe() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chatframe());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecruitTeamLeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecruitTeamLeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecruitTeamLeader::GetClassData() const { return &_class_data_; }

void RecruitTeamLeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecruitTeamLeader *>(to)->MergeFrom(
      static_cast<const RecruitTeamLeader &>(from));
}


void RecruitTeamLeader::MergeFrom(const RecruitTeamLeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.RecruitTeamLeader)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from._internal_has_leader()) {
    _internal_mutable_leader()->::common::RecruitTeamMember::MergeFrom(from._internal_leader());
  }
  if (from._internal_chatfont() != 0) {
    _internal_set_chatfont(from._internal_chatfont());
  }
  if (from._internal_chatframe() != 0) {
    _internal_set_chatframe(from._internal_chatframe());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecruitTeamLeader::CopyFrom(const RecruitTeamLeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.RecruitTeamLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecruitTeamLeader::IsInitialized() const {
  return true;
}

void RecruitTeamLeader::InternalSwap(RecruitTeamLeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &nickname_, lhs_arena,
      &other->nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecruitTeamLeader, chatframe_)
      + sizeof(RecruitTeamLeader::chatframe_)
      - PROTOBUF_FIELD_OFFSET(RecruitTeamLeader, leader_)>(
          reinterpret_cast<char*>(&leader_),
          reinterpret_cast<char*>(&other->leader_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecruitTeamLeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamcommon_2eproto_getter, &descriptor_table_teamcommon_2eproto_once,
      file_level_metadata_teamcommon_2eproto[11]);
}

// ===================================================================

class RecruitTeamMember::_Internal {
 public:
};

RecruitTeamMember::RecruitTeamMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.RecruitTeamMember)
}
RecruitTeamMember::RecruitTeamMember(const RecruitTeamMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&headicon_, &from.headicon_,
    static_cast<size_t>(reinterpret_cast<char*>(&sex_) -
    reinterpret_cast<char*>(&headicon_)) + sizeof(sex_));
  // @@protoc_insertion_point(copy_constructor:common.RecruitTeamMember)
}

inline void RecruitTeamMember::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&headicon_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sex_) -
    reinterpret_cast<char*>(&headicon_)) + sizeof(sex_));
}

RecruitTeamMember::~RecruitTeamMember() {
  // @@protoc_insertion_point(destructor:common.RecruitTeamMember)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecruitTeamMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecruitTeamMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecruitTeamMember::Clear() {
// @@protoc_insertion_point(message_clear_start:common.RecruitTeamMember)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&headicon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sex_) -
      reinterpret_cast<char*>(&headicon_)) + sizeof(sex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecruitTeamMember::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 headIcon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          headicon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 headFrame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          headframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 careerId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          careerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecruitTeamMember::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.RecruitTeamMember)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 headIcon = 1;
  if (this->_internal_headicon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_headicon(), target);
  }

  // uint32 headFrame = 2;
  if (this->_internal_headframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_headframe(), target);
  }

  // uint32 careerId = 3;
  if (this->_internal_careerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_careerid(), target);
  }

  // uint32 level = 4;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_level(), target);
  }

  // uint32 sex = 5;
  if (this->_internal_sex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.RecruitTeamMember)
  return target;
}

size_t RecruitTeamMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.RecruitTeamMember)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 headIcon = 1;
  if (this->_internal_headicon() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headicon());
  }

  // uint32 headFrame = 2;
  if (this->_internal_headframe() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headframe());
  }

  // uint32 careerId = 3;
  if (this->_internal_careerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_careerid());
  }

  // uint32 level = 4;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 sex = 5;
  if (this->_internal_sex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecruitTeamMember::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecruitTeamMember::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecruitTeamMember::GetClassData() const { return &_class_data_; }

void RecruitTeamMember::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecruitTeamMember *>(to)->MergeFrom(
      static_cast<const RecruitTeamMember &>(from));
}


void RecruitTeamMember::MergeFrom(const RecruitTeamMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.RecruitTeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_headicon() != 0) {
    _internal_set_headicon(from._internal_headicon());
  }
  if (from._internal_headframe() != 0) {
    _internal_set_headframe(from._internal_headframe());
  }
  if (from._internal_careerid() != 0) {
    _internal_set_careerid(from._internal_careerid());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from._internal_sex() != 0) {
    _internal_set_sex(from._internal_sex());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecruitTeamMember::CopyFrom(const RecruitTeamMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.RecruitTeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecruitTeamMember::IsInitialized() const {
  return true;
}

void RecruitTeamMember::InternalSwap(RecruitTeamMember* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecruitTeamMember, sex_)
      + sizeof(RecruitTeamMember::sex_)
      - PROTOBUF_FIELD_OFFSET(RecruitTeamMember, headicon_)>(
          reinterpret_cast<char*>(&headicon_),
          reinterpret_cast<char*>(&other->headicon_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecruitTeamMember::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamcommon_2eproto_getter, &descriptor_table_teamcommon_2eproto_once,
      file_level_metadata_teamcommon_2eproto[12]);
}

// ===================================================================

class PlatAllTeamList::_Internal {
 public:
};

PlatAllTeamList::PlatAllTeamList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  teams_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.PlatAllTeamList)
}
PlatAllTeamList::PlatAllTeamList(const PlatAllTeamList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      teams_(from.teams_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:common.PlatAllTeamList)
}

inline void PlatAllTeamList::SharedCtor() {
}

PlatAllTeamList::~PlatAllTeamList() {
  // @@protoc_insertion_point(destructor:common.PlatAllTeamList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlatAllTeamList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlatAllTeamList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlatAllTeamList::Clear() {
// @@protoc_insertion_point(message_clear_start:common.PlatAllTeamList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlatAllTeamList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .common.PlatTargetTeamList teams = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlatAllTeamList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.PlatAllTeamList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.PlatTargetTeamList teams = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_teams_size()); i < n; i++) {
    const auto& repfield = this->_internal_teams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.PlatAllTeamList)
  return target;
}

size_t PlatAllTeamList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.PlatAllTeamList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.PlatTargetTeamList teams = 1;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlatAllTeamList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlatAllTeamList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlatAllTeamList::GetClassData() const { return &_class_data_; }

void PlatAllTeamList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlatAllTeamList *>(to)->MergeFrom(
      static_cast<const PlatAllTeamList &>(from));
}


void PlatAllTeamList::MergeFrom(const PlatAllTeamList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.PlatAllTeamList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlatAllTeamList::CopyFrom(const PlatAllTeamList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.PlatAllTeamList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlatAllTeamList::IsInitialized() const {
  return true;
}

void PlatAllTeamList::InternalSwap(PlatAllTeamList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  teams_.InternalSwap(&other->teams_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlatAllTeamList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamcommon_2eproto_getter, &descriptor_table_teamcommon_2eproto_once,
      file_level_metadata_teamcommon_2eproto[13]);
}

// ===================================================================

class PlatTargetTeamList::_Internal {
 public:
};

PlatTargetTeamList::PlatTargetTeamList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  teams_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.PlatTargetTeamList)
}
PlatTargetTeamList::PlatTargetTeamList(const PlatTargetTeamList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      teams_(from.teams_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  targetid_ = from.targetid_;
  // @@protoc_insertion_point(copy_constructor:common.PlatTargetTeamList)
}

inline void PlatTargetTeamList::SharedCtor() {
targetid_ = 0u;
}

PlatTargetTeamList::~PlatTargetTeamList() {
  // @@protoc_insertion_point(destructor:common.PlatTargetTeamList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlatTargetTeamList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlatTargetTeamList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlatTargetTeamList::Clear() {
// @@protoc_insertion_point(message_clear_start:common.PlatTargetTeamList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  targetid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlatTargetTeamList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 targetId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .common.PlatTargetTeam teams = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlatTargetTeamList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.PlatTargetTeamList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 targetId = 1;
  if (this->_internal_targetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_targetid(), target);
  }

  // repeated .common.PlatTargetTeam teams = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_teams_size()); i < n; i++) {
    const auto& repfield = this->_internal_teams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.PlatTargetTeamList)
  return target;
}

size_t PlatTargetTeamList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.PlatTargetTeamList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.PlatTargetTeam teams = 2;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 targetId = 1;
  if (this->_internal_targetid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_targetid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlatTargetTeamList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlatTargetTeamList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlatTargetTeamList::GetClassData() const { return &_class_data_; }

void PlatTargetTeamList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlatTargetTeamList *>(to)->MergeFrom(
      static_cast<const PlatTargetTeamList &>(from));
}


void PlatTargetTeamList::MergeFrom(const PlatTargetTeamList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.PlatTargetTeamList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  if (from._internal_targetid() != 0) {
    _internal_set_targetid(from._internal_targetid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlatTargetTeamList::CopyFrom(const PlatTargetTeamList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.PlatTargetTeamList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlatTargetTeamList::IsInitialized() const {
  return true;
}

void PlatTargetTeamList::InternalSwap(PlatTargetTeamList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  teams_.InternalSwap(&other->teams_);
  swap(targetid_, other->targetid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlatTargetTeamList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamcommon_2eproto_getter, &descriptor_table_teamcommon_2eproto_once,
      file_level_metadata_teamcommon_2eproto[14]);
}

// ===================================================================

class PlatTargetTeam::_Internal {
 public:
};

PlatTargetTeam::PlatTargetTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.PlatTargetTeam)
}
PlatTargetTeam::PlatTargetTeam(const PlatTargetTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  leadername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    leadername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_leadername().empty()) {
    leadername_.Set(from._internal_leadername(), 
      GetArenaForAllocation());
  }
  text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    text_.Set(from._internal_text(), 
      GetArenaForAllocation());
  }
  ::memcpy(&teamid_, &from.teamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxlevel_) -
    reinterpret_cast<char*>(&teamid_)) + sizeof(maxlevel_));
  // @@protoc_insertion_point(copy_constructor:common.PlatTargetTeam)
}

inline void PlatTargetTeam::SharedCtor() {
leadername_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  leadername_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
text_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&teamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&maxlevel_) -
    reinterpret_cast<char*>(&teamid_)) + sizeof(maxlevel_));
}

PlatTargetTeam::~PlatTargetTeam() {
  // @@protoc_insertion_point(destructor:common.PlatTargetTeam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlatTargetTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  leadername_.Destroy();
  text_.Destroy();
}

void PlatTargetTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlatTargetTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:common.PlatTargetTeam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  leadername_.ClearToEmpty();
  text_.ClearToEmpty();
  ::memset(&teamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxlevel_) -
      reinterpret_cast<char*>(&teamid_)) + sizeof(maxlevel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlatTargetTeam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 teamId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes leaderName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_leadername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 minLevel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          minlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 maxLevel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          maxlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .common.PlatTeamMember members = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 leaderSceneId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          leadersceneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlatTargetTeam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.PlatTargetTeam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 teamId = 1;
  if (this->_internal_teamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_teamid(), target);
  }

  // bytes leaderName = 2;
  if (!this->_internal_leadername().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_leadername(), target);
  }

  // uint32 minLevel = 3;
  if (this->_internal_minlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_minlevel(), target);
  }

  // uint32 maxLevel = 4;
  if (this->_internal_maxlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_maxlevel(), target);
  }

  // bytes text = 5;
  if (!this->_internal_text().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_text(), target);
  }

  // repeated .common.PlatTeamMember members = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 leaderSceneId = 7;
  if (this->_internal_leadersceneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_leadersceneid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.PlatTargetTeam)
  return target;
}

size_t PlatTargetTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.PlatTargetTeam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.PlatTeamMember members = 6;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes leaderName = 2;
  if (!this->_internal_leadername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_leadername());
  }

  // bytes text = 5;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_text());
  }

  // uint32 teamId = 1;
  if (this->_internal_teamid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_teamid());
  }

  // uint32 minLevel = 3;
  if (this->_internal_minlevel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minlevel());
  }

  // uint64 leaderSceneId = 7;
  if (this->_internal_leadersceneid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_leadersceneid());
  }

  // uint32 maxLevel = 4;
  if (this->_internal_maxlevel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxlevel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlatTargetTeam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlatTargetTeam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlatTargetTeam::GetClassData() const { return &_class_data_; }

void PlatTargetTeam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlatTargetTeam *>(to)->MergeFrom(
      static_cast<const PlatTargetTeam &>(from));
}


void PlatTargetTeam::MergeFrom(const PlatTargetTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.PlatTargetTeam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (!from._internal_leadername().empty()) {
    _internal_set_leadername(from._internal_leadername());
  }
  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  if (from._internal_teamid() != 0) {
    _internal_set_teamid(from._internal_teamid());
  }
  if (from._internal_minlevel() != 0) {
    _internal_set_minlevel(from._internal_minlevel());
  }
  if (from._internal_leadersceneid() != 0) {
    _internal_set_leadersceneid(from._internal_leadersceneid());
  }
  if (from._internal_maxlevel() != 0) {
    _internal_set_maxlevel(from._internal_maxlevel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlatTargetTeam::CopyFrom(const PlatTargetTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.PlatTargetTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlatTargetTeam::IsInitialized() const {
  return true;
}

void PlatTargetTeam::InternalSwap(PlatTargetTeam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &leadername_, lhs_arena,
      &other->leadername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlatTargetTeam, maxlevel_)
      + sizeof(PlatTargetTeam::maxlevel_)
      - PROTOBUF_FIELD_OFFSET(PlatTargetTeam, teamid_)>(
          reinterpret_cast<char*>(&teamid_),
          reinterpret_cast<char*>(&other->teamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlatTargetTeam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamcommon_2eproto_getter, &descriptor_table_teamcommon_2eproto_once,
      file_level_metadata_teamcommon_2eproto[15]);
}

// ===================================================================

class PlatTeamMember::_Internal {
 public:
};

PlatTeamMember::PlatTeamMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.PlatTeamMember)
}
PlatTeamMember::PlatTeamMember(const PlatTeamMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&careerid_, &from.careerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&careerid_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:common.PlatTeamMember)
}

inline void PlatTeamMember::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&careerid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&careerid_)) + sizeof(level_));
}

PlatTeamMember::~PlatTeamMember() {
  // @@protoc_insertion_point(destructor:common.PlatTeamMember)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlatTeamMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlatTeamMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlatTeamMember::Clear() {
// @@protoc_insertion_point(message_clear_start:common.PlatTeamMember)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&careerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&careerid_)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlatTeamMember::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 careerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          careerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlatTeamMember::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.PlatTeamMember)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 careerId = 1;
  if (this->_internal_careerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_careerid(), target);
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.PlatTeamMember)
  return target;
}

size_t PlatTeamMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.PlatTeamMember)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 careerId = 1;
  if (this->_internal_careerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_careerid());
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlatTeamMember::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlatTeamMember::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlatTeamMember::GetClassData() const { return &_class_data_; }

void PlatTeamMember::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlatTeamMember *>(to)->MergeFrom(
      static_cast<const PlatTeamMember &>(from));
}


void PlatTeamMember::MergeFrom(const PlatTeamMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.PlatTeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_careerid() != 0) {
    _internal_set_careerid(from._internal_careerid());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlatTeamMember::CopyFrom(const PlatTeamMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.PlatTeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlatTeamMember::IsInitialized() const {
  return true;
}

void PlatTeamMember::InternalSwap(PlatTeamMember* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlatTeamMember, level_)
      + sizeof(PlatTeamMember::level_)
      - PROTOBUF_FIELD_OFFSET(PlatTeamMember, careerid_)>(
          reinterpret_cast<char*>(&careerid_),
          reinterpret_cast<char*>(&other->careerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlatTeamMember::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamcommon_2eproto_getter, &descriptor_table_teamcommon_2eproto_once,
      file_level_metadata_teamcommon_2eproto[16]);
}

// ===================================================================

class TeamFieldId::_Internal {
 public:
};

TeamFieldId::TeamFieldId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.TeamFieldId)
}
TeamFieldId::TeamFieldId(const TeamFieldId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&val_, &from.val_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&val_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:common.TeamFieldId)
}

inline void TeamFieldId::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&val_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&val_)) + sizeof(type_));
}

TeamFieldId::~TeamFieldId() {
  // @@protoc_insertion_point(destructor:common.TeamFieldId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeamFieldId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TeamFieldId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TeamFieldId::Clear() {
// @@protoc_insertion_point(message_clear_start:common.TeamFieldId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&val_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&val_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamFieldId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeamFieldId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.TeamFieldId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint64 val = 2;
  if (this->_internal_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.TeamFieldId)
  return target;
}

size_t TeamFieldId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.TeamFieldId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 val = 2;
  if (this->_internal_val() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_val());
  }

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeamFieldId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TeamFieldId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeamFieldId::GetClassData() const { return &_class_data_; }

void TeamFieldId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TeamFieldId *>(to)->MergeFrom(
      static_cast<const TeamFieldId &>(from));
}


void TeamFieldId::MergeFrom(const TeamFieldId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.TeamFieldId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_val() != 0) {
    _internal_set_val(from._internal_val());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeamFieldId::CopyFrom(const TeamFieldId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.TeamFieldId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamFieldId::IsInitialized() const {
  return true;
}

void TeamFieldId::InternalSwap(TeamFieldId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeamFieldId, type_)
      + sizeof(TeamFieldId::type_)
      - PROTOBUF_FIELD_OFFSET(TeamFieldId, val_)>(
          reinterpret_cast<char*>(&val_),
          reinterpret_cast<char*>(&other->val_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamFieldId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamcommon_2eproto_getter, &descriptor_table_teamcommon_2eproto_once,
      file_level_metadata_teamcommon_2eproto[17]);
}

// ===================================================================

class TeamFieldByte::_Internal {
 public:
};

TeamFieldByte::TeamFieldByte(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.TeamFieldByte)
}
TeamFieldByte::TeamFieldByte(const TeamFieldByte& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  val_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    val_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_val().empty()) {
    val_.Set(from._internal_val(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:common.TeamFieldByte)
}

inline void TeamFieldByte::SharedCtor() {
val_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  val_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0u;
}

TeamFieldByte::~TeamFieldByte() {
  // @@protoc_insertion_point(destructor:common.TeamFieldByte)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeamFieldByte::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  val_.Destroy();
}

void TeamFieldByte::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TeamFieldByte::Clear() {
// @@protoc_insertion_point(message_clear_start:common.TeamFieldByte)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_.ClearToEmpty();
  type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamFieldByte::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_val();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeamFieldByte::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.TeamFieldByte)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // bytes val = 2;
  if (!this->_internal_val().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.TeamFieldByte)
  return target;
}

size_t TeamFieldByte::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.TeamFieldByte)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes val = 2;
  if (!this->_internal_val().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_val());
  }

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeamFieldByte::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TeamFieldByte::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeamFieldByte::GetClassData() const { return &_class_data_; }

void TeamFieldByte::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TeamFieldByte *>(to)->MergeFrom(
      static_cast<const TeamFieldByte &>(from));
}


void TeamFieldByte::MergeFrom(const TeamFieldByte& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.TeamFieldByte)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_val().empty()) {
    _internal_set_val(from._internal_val());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeamFieldByte::CopyFrom(const TeamFieldByte& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.TeamFieldByte)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamFieldByte::IsInitialized() const {
  return true;
}

void TeamFieldByte::InternalSwap(TeamFieldByte* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &val_, lhs_arena,
      &other->val_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamFieldByte::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamcommon_2eproto_getter, &descriptor_table_teamcommon_2eproto_once,
      file_level_metadata_teamcommon_2eproto[18]);
}

// ===================================================================

class TeamFieldList::_Internal {
 public:
};

TeamFieldList::TeamFieldList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tfid_(arena),
  tfbyte_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.TeamFieldList)
}
TeamFieldList::TeamFieldList(const TeamFieldList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tfid_(from.tfid_),
      tfbyte_(from.tfbyte_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:common.TeamFieldList)
}

inline void TeamFieldList::SharedCtor() {
}

TeamFieldList::~TeamFieldList() {
  // @@protoc_insertion_point(destructor:common.TeamFieldList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeamFieldList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TeamFieldList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TeamFieldList::Clear() {
// @@protoc_insertion_point(message_clear_start:common.TeamFieldList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tfid_.Clear();
  tfbyte_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamFieldList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .common.TeamFieldId tfid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tfid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .common.TeamFieldByte tfbyte = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tfbyte(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeamFieldList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.TeamFieldList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.TeamFieldId tfid = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tfid_size()); i < n; i++) {
    const auto& repfield = this->_internal_tfid(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .common.TeamFieldByte tfbyte = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tfbyte_size()); i < n; i++) {
    const auto& repfield = this->_internal_tfbyte(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.TeamFieldList)
  return target;
}

size_t TeamFieldList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.TeamFieldList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.TeamFieldId tfid = 1;
  total_size += 1UL * this->_internal_tfid_size();
  for (const auto& msg : this->tfid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .common.TeamFieldByte tfbyte = 2;
  total_size += 1UL * this->_internal_tfbyte_size();
  for (const auto& msg : this->tfbyte_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeamFieldList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TeamFieldList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeamFieldList::GetClassData() const { return &_class_data_; }

void TeamFieldList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TeamFieldList *>(to)->MergeFrom(
      static_cast<const TeamFieldList &>(from));
}


void TeamFieldList::MergeFrom(const TeamFieldList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.TeamFieldList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tfid_.MergeFrom(from.tfid_);
  tfbyte_.MergeFrom(from.tfbyte_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeamFieldList::CopyFrom(const TeamFieldList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.TeamFieldList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamFieldList::IsInitialized() const {
  return true;
}

void TeamFieldList::InternalSwap(TeamFieldList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tfid_.InternalSwap(&other->tfid_);
  tfbyte_.InternalSwap(&other->tfbyte_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamFieldList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamcommon_2eproto_getter, &descriptor_table_teamcommon_2eproto_once,
      file_level_metadata_teamcommon_2eproto[19]);
}

// ===================================================================

class TeamVoteBaseData::_Internal {
 public:
};

TeamVoteBaseData::TeamVoteBaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.TeamVoteBaseData)
}
TeamVoteBaseData::TeamVoteBaseData(const TeamVoteBaseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiretime_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(expiretime_));
  // @@protoc_insertion_point(copy_constructor:common.TeamVoteBaseData)
}

inline void TeamVoteBaseData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roleid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expiretime_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(expiretime_));
}

TeamVoteBaseData::~TeamVoteBaseData() {
  // @@protoc_insertion_point(destructor:common.TeamVoteBaseData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeamVoteBaseData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TeamVoteBaseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TeamVoteBaseData::Clear() {
// @@protoc_insertion_point(message_clear_start:common.TeamVoteBaseData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiretime_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(expiretime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamVoteBaseData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 expireTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          expiretime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 roleId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeamVoteBaseData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.TeamVoteBaseData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 expireTime = 1;
  if (this->_internal_expiretime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_expiretime(), target);
  }

  // uint64 roleId = 2;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.TeamVoteBaseData)
  return target;
}

size_t TeamVoteBaseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.TeamVoteBaseData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 roleId = 2;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
  }

  // uint32 expireTime = 1;
  if (this->_internal_expiretime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_expiretime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeamVoteBaseData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TeamVoteBaseData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeamVoteBaseData::GetClassData() const { return &_class_data_; }

void TeamVoteBaseData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TeamVoteBaseData *>(to)->MergeFrom(
      static_cast<const TeamVoteBaseData &>(from));
}


void TeamVoteBaseData::MergeFrom(const TeamVoteBaseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.TeamVoteBaseData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_expiretime() != 0) {
    _internal_set_expiretime(from._internal_expiretime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeamVoteBaseData::CopyFrom(const TeamVoteBaseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.TeamVoteBaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamVoteBaseData::IsInitialized() const {
  return true;
}

void TeamVoteBaseData::InternalSwap(TeamVoteBaseData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeamVoteBaseData, expiretime_)
      + sizeof(TeamVoteBaseData::expiretime_)
      - PROTOBUF_FIELD_OFFSET(TeamVoteBaseData, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamVoteBaseData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamcommon_2eproto_getter, &descriptor_table_teamcommon_2eproto_once,
      file_level_metadata_teamcommon_2eproto[20]);
}

// ===================================================================

class TeamMemberFieldId::_Internal {
 public:
};

TeamMemberFieldId::TeamMemberFieldId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.TeamMemberFieldId)
}
TeamMemberFieldId::TeamMemberFieldId(const TeamMemberFieldId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&val_, &from.val_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&val_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:common.TeamMemberFieldId)
}

inline void TeamMemberFieldId::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&val_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&val_)) + sizeof(type_));
}

TeamMemberFieldId::~TeamMemberFieldId() {
  // @@protoc_insertion_point(destructor:common.TeamMemberFieldId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeamMemberFieldId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TeamMemberFieldId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TeamMemberFieldId::Clear() {
// @@protoc_insertion_point(message_clear_start:common.TeamMemberFieldId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&val_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&val_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamMemberFieldId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeamMemberFieldId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.TeamMemberFieldId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint64 val = 2;
  if (this->_internal_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.TeamMemberFieldId)
  return target;
}

size_t TeamMemberFieldId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.TeamMemberFieldId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 val = 2;
  if (this->_internal_val() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_val());
  }

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeamMemberFieldId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TeamMemberFieldId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeamMemberFieldId::GetClassData() const { return &_class_data_; }

void TeamMemberFieldId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TeamMemberFieldId *>(to)->MergeFrom(
      static_cast<const TeamMemberFieldId &>(from));
}


void TeamMemberFieldId::MergeFrom(const TeamMemberFieldId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.TeamMemberFieldId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_val() != 0) {
    _internal_set_val(from._internal_val());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeamMemberFieldId::CopyFrom(const TeamMemberFieldId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.TeamMemberFieldId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMemberFieldId::IsInitialized() const {
  return true;
}

void TeamMemberFieldId::InternalSwap(TeamMemberFieldId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeamMemberFieldId, type_)
      + sizeof(TeamMemberFieldId::type_)
      - PROTOBUF_FIELD_OFFSET(TeamMemberFieldId, val_)>(
          reinterpret_cast<char*>(&val_),
          reinterpret_cast<char*>(&other->val_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamMemberFieldId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamcommon_2eproto_getter, &descriptor_table_teamcommon_2eproto_once,
      file_level_metadata_teamcommon_2eproto[21]);
}

// ===================================================================

class TeamMemberFieldBool::_Internal {
 public:
};

TeamMemberFieldBool::TeamMemberFieldBool(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.TeamMemberFieldBool)
}
TeamMemberFieldBool::TeamMemberFieldBool(const TeamMemberFieldBool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&val_) -
    reinterpret_cast<char*>(&type_)) + sizeof(val_));
  // @@protoc_insertion_point(copy_constructor:common.TeamMemberFieldBool)
}

inline void TeamMemberFieldBool::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&val_) -
    reinterpret_cast<char*>(&type_)) + sizeof(val_));
}

TeamMemberFieldBool::~TeamMemberFieldBool() {
  // @@protoc_insertion_point(destructor:common.TeamMemberFieldBool)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeamMemberFieldBool::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TeamMemberFieldBool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TeamMemberFieldBool::Clear() {
// @@protoc_insertion_point(message_clear_start:common.TeamMemberFieldBool)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val_) -
      reinterpret_cast<char*>(&type_)) + sizeof(val_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamMemberFieldBool::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeamMemberFieldBool::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.TeamMemberFieldBool)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // bool val = 2;
  if (this->_internal_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.TeamMemberFieldBool)
  return target;
}

size_t TeamMemberFieldBool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.TeamMemberFieldBool)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // bool val = 2;
  if (this->_internal_val() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeamMemberFieldBool::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TeamMemberFieldBool::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeamMemberFieldBool::GetClassData() const { return &_class_data_; }

void TeamMemberFieldBool::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TeamMemberFieldBool *>(to)->MergeFrom(
      static_cast<const TeamMemberFieldBool &>(from));
}


void TeamMemberFieldBool::MergeFrom(const TeamMemberFieldBool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.TeamMemberFieldBool)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_val() != 0) {
    _internal_set_val(from._internal_val());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeamMemberFieldBool::CopyFrom(const TeamMemberFieldBool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.TeamMemberFieldBool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMemberFieldBool::IsInitialized() const {
  return true;
}

void TeamMemberFieldBool::InternalSwap(TeamMemberFieldBool* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeamMemberFieldBool, val_)
      + sizeof(TeamMemberFieldBool::val_)
      - PROTOBUF_FIELD_OFFSET(TeamMemberFieldBool, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamMemberFieldBool::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamcommon_2eproto_getter, &descriptor_table_teamcommon_2eproto_once,
      file_level_metadata_teamcommon_2eproto[22]);
}

// ===================================================================

class TeamMemberFieldByte::_Internal {
 public:
};

TeamMemberFieldByte::TeamMemberFieldByte(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.TeamMemberFieldByte)
}
TeamMemberFieldByte::TeamMemberFieldByte(const TeamMemberFieldByte& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  val_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    val_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_val().empty()) {
    val_.Set(from._internal_val(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:common.TeamMemberFieldByte)
}

inline void TeamMemberFieldByte::SharedCtor() {
val_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  val_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0u;
}

TeamMemberFieldByte::~TeamMemberFieldByte() {
  // @@protoc_insertion_point(destructor:common.TeamMemberFieldByte)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeamMemberFieldByte::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  val_.Destroy();
}

void TeamMemberFieldByte::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TeamMemberFieldByte::Clear() {
// @@protoc_insertion_point(message_clear_start:common.TeamMemberFieldByte)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_.ClearToEmpty();
  type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamMemberFieldByte::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_val();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeamMemberFieldByte::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.TeamMemberFieldByte)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // bytes val = 2;
  if (!this->_internal_val().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.TeamMemberFieldByte)
  return target;
}

size_t TeamMemberFieldByte::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.TeamMemberFieldByte)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes val = 2;
  if (!this->_internal_val().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_val());
  }

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeamMemberFieldByte::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TeamMemberFieldByte::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeamMemberFieldByte::GetClassData() const { return &_class_data_; }

void TeamMemberFieldByte::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TeamMemberFieldByte *>(to)->MergeFrom(
      static_cast<const TeamMemberFieldByte &>(from));
}


void TeamMemberFieldByte::MergeFrom(const TeamMemberFieldByte& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.TeamMemberFieldByte)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_val().empty()) {
    _internal_set_val(from._internal_val());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeamMemberFieldByte::CopyFrom(const TeamMemberFieldByte& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.TeamMemberFieldByte)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMemberFieldByte::IsInitialized() const {
  return true;
}

void TeamMemberFieldByte::InternalSwap(TeamMemberFieldByte* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &val_, lhs_arena,
      &other->val_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamMemberFieldByte::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamcommon_2eproto_getter, &descriptor_table_teamcommon_2eproto_once,
      file_level_metadata_teamcommon_2eproto[23]);
}

// ===================================================================

class TeamMemberFieldList::_Internal {
 public:
};

TeamMemberFieldList::TeamMemberFieldList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tfid_(arena),
  tfbyte_(arena),
  tfbool_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:common.TeamMemberFieldList)
}
TeamMemberFieldList::TeamMemberFieldList(const TeamMemberFieldList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tfid_(from.tfid_),
      tfbyte_(from.tfbyte_),
      tfbool_(from.tfbool_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:common.TeamMemberFieldList)
}

inline void TeamMemberFieldList::SharedCtor() {
}

TeamMemberFieldList::~TeamMemberFieldList() {
  // @@protoc_insertion_point(destructor:common.TeamMemberFieldList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeamMemberFieldList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TeamMemberFieldList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TeamMemberFieldList::Clear() {
// @@protoc_insertion_point(message_clear_start:common.TeamMemberFieldList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tfid_.Clear();
  tfbyte_.Clear();
  tfbool_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamMemberFieldList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .common.TeamMemberFieldId tfid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tfid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .common.TeamMemberFieldByte tfbyte = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tfbyte(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .common.TeamMemberFieldBool tfbool = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tfbool(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeamMemberFieldList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.TeamMemberFieldList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.TeamMemberFieldId tfid = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tfid_size()); i < n; i++) {
    const auto& repfield = this->_internal_tfid(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .common.TeamMemberFieldByte tfbyte = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tfbyte_size()); i < n; i++) {
    const auto& repfield = this->_internal_tfbyte(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .common.TeamMemberFieldBool tfbool = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tfbool_size()); i < n; i++) {
    const auto& repfield = this->_internal_tfbool(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.TeamMemberFieldList)
  return target;
}

size_t TeamMemberFieldList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.TeamMemberFieldList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.TeamMemberFieldId tfid = 1;
  total_size += 1UL * this->_internal_tfid_size();
  for (const auto& msg : this->tfid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .common.TeamMemberFieldByte tfbyte = 2;
  total_size += 1UL * this->_internal_tfbyte_size();
  for (const auto& msg : this->tfbyte_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .common.TeamMemberFieldBool tfbool = 3;
  total_size += 1UL * this->_internal_tfbool_size();
  for (const auto& msg : this->tfbool_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeamMemberFieldList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TeamMemberFieldList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeamMemberFieldList::GetClassData() const { return &_class_data_; }

void TeamMemberFieldList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TeamMemberFieldList *>(to)->MergeFrom(
      static_cast<const TeamMemberFieldList &>(from));
}


void TeamMemberFieldList::MergeFrom(const TeamMemberFieldList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.TeamMemberFieldList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tfid_.MergeFrom(from.tfid_);
  tfbyte_.MergeFrom(from.tfbyte_);
  tfbool_.MergeFrom(from.tfbool_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeamMemberFieldList::CopyFrom(const TeamMemberFieldList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.TeamMemberFieldList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMemberFieldList::IsInitialized() const {
  return true;
}

void TeamMemberFieldList::InternalSwap(TeamMemberFieldList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tfid_.InternalSwap(&other->tfid_);
  tfbyte_.InternalSwap(&other->tfbyte_);
  tfbool_.InternalSwap(&other->tfbool_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamMemberFieldList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamcommon_2eproto_getter, &descriptor_table_teamcommon_2eproto_once,
      file_level_metadata_teamcommon_2eproto[24]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::common::ModuleTeam*
Arena::CreateMaybeMessage< ::common::ModuleTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ModuleTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ModuleTeamView*
Arena::CreateMaybeMessage< ::common::ModuleTeamView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ModuleTeamView >(arena);
}
template<> PROTOBUF_NOINLINE ::common::NotOwnTeamInfo*
Arena::CreateMaybeMessage< ::common::NotOwnTeamInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::NotOwnTeamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::common::OwnTeamInfo*
Arena::CreateMaybeMessage< ::common::OwnTeamInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::OwnTeamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::common::TeamInvited*
Arena::CreateMaybeMessage< ::common::TeamInvited >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::TeamInvited >(arena);
}
template<> PROTOBUF_NOINLINE ::common::TeamBase*
Arena::CreateMaybeMessage< ::common::TeamBase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::TeamBase >(arena);
}
template<> PROTOBUF_NOINLINE ::common::TeamMemberList*
Arena::CreateMaybeMessage< ::common::TeamMemberList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::TeamMemberList >(arena);
}
template<> PROTOBUF_NOINLINE ::common::TeamApplyList*
Arena::CreateMaybeMessage< ::common::TeamApplyList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::TeamApplyList >(arena);
}
template<> PROTOBUF_NOINLINE ::common::TeamMember*
Arena::CreateMaybeMessage< ::common::TeamMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::TeamMember >(arena);
}
template<> PROTOBUF_NOINLINE ::common::TeamApply*
Arena::CreateMaybeMessage< ::common::TeamApply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::TeamApply >(arena);
}
template<> PROTOBUF_NOINLINE ::common::RecruitTeam*
Arena::CreateMaybeMessage< ::common::RecruitTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::RecruitTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::common::RecruitTeamLeader*
Arena::CreateMaybeMessage< ::common::RecruitTeamLeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::RecruitTeamLeader >(arena);
}
template<> PROTOBUF_NOINLINE ::common::RecruitTeamMember*
Arena::CreateMaybeMessage< ::common::RecruitTeamMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::RecruitTeamMember >(arena);
}
template<> PROTOBUF_NOINLINE ::common::PlatAllTeamList*
Arena::CreateMaybeMessage< ::common::PlatAllTeamList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::PlatAllTeamList >(arena);
}
template<> PROTOBUF_NOINLINE ::common::PlatTargetTeamList*
Arena::CreateMaybeMessage< ::common::PlatTargetTeamList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::PlatTargetTeamList >(arena);
}
template<> PROTOBUF_NOINLINE ::common::PlatTargetTeam*
Arena::CreateMaybeMessage< ::common::PlatTargetTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::PlatTargetTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::common::PlatTeamMember*
Arena::CreateMaybeMessage< ::common::PlatTeamMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::PlatTeamMember >(arena);
}
template<> PROTOBUF_NOINLINE ::common::TeamFieldId*
Arena::CreateMaybeMessage< ::common::TeamFieldId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::TeamFieldId >(arena);
}
template<> PROTOBUF_NOINLINE ::common::TeamFieldByte*
Arena::CreateMaybeMessage< ::common::TeamFieldByte >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::TeamFieldByte >(arena);
}
template<> PROTOBUF_NOINLINE ::common::TeamFieldList*
Arena::CreateMaybeMessage< ::common::TeamFieldList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::TeamFieldList >(arena);
}
template<> PROTOBUF_NOINLINE ::common::TeamVoteBaseData*
Arena::CreateMaybeMessage< ::common::TeamVoteBaseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::TeamVoteBaseData >(arena);
}
template<> PROTOBUF_NOINLINE ::common::TeamMemberFieldId*
Arena::CreateMaybeMessage< ::common::TeamMemberFieldId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::TeamMemberFieldId >(arena);
}
template<> PROTOBUF_NOINLINE ::common::TeamMemberFieldBool*
Arena::CreateMaybeMessage< ::common::TeamMemberFieldBool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::TeamMemberFieldBool >(arena);
}
template<> PROTOBUF_NOINLINE ::common::TeamMemberFieldByte*
Arena::CreateMaybeMessage< ::common::TeamMemberFieldByte >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::TeamMemberFieldByte >(arena);
}
template<> PROTOBUF_NOINLINE ::common::TeamMemberFieldList*
Arena::CreateMaybeMessage< ::common::TeamMemberFieldList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::TeamMemberFieldList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
