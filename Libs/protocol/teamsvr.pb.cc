// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: teamsvr.proto

#include "teamsvr.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace inner {
PROTOBUF_CONSTEXPR InnerTeamsvr::InnerTeamsvr(
    ::_pbi::ConstantInitialized)
  : fromuser_(uint64_t{0u})
  , fromzone_(0u)
  , _oneof_case_{}{}
struct InnerTeamsvrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerTeamsvrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerTeamsvrDefaultTypeInternal() {}
  union {
    InnerTeamsvr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerTeamsvrDefaultTypeInternal _InnerTeamsvr_default_instance_;
PROTOBUF_CONSTEXPR InnerTeamsvr_Fromscene_Test::InnerTeamsvr_Fromscene_Test(
    ::_pbi::ConstantInitialized){}
struct InnerTeamsvr_Fromscene_TestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerTeamsvr_Fromscene_TestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerTeamsvr_Fromscene_TestDefaultTypeInternal() {}
  union {
    InnerTeamsvr_Fromscene_Test _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerTeamsvr_Fromscene_TestDefaultTypeInternal _InnerTeamsvr_Fromscene_Test_default_instance_;
PROTOBUF_CONSTEXPR InnerTeamsvr_Fromscene_GameEvent::InnerTeamsvr_Fromscene_GameEvent(
    ::_pbi::ConstantInitialized)
  : gameevent_(nullptr){}
struct InnerTeamsvr_Fromscene_GameEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerTeamsvr_Fromscene_GameEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerTeamsvr_Fromscene_GameEventDefaultTypeInternal() {}
  union {
    InnerTeamsvr_Fromscene_GameEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerTeamsvr_Fromscene_GameEventDefaultTypeInternal _InnerTeamsvr_Fromscene_GameEvent_default_instance_;
PROTOBUF_CONSTEXPR InnerTeamsvr_Fromscene_UpdateUserInfo::InnerTeamsvr_Fromscene_UpdateUserInfo(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct InnerTeamsvr_Fromscene_UpdateUserInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerTeamsvr_Fromscene_UpdateUserInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerTeamsvr_Fromscene_UpdateUserInfoDefaultTypeInternal() {}
  union {
    InnerTeamsvr_Fromscene_UpdateUserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerTeamsvr_Fromscene_UpdateUserInfoDefaultTypeInternal _InnerTeamsvr_Fromscene_UpdateUserInfo_default_instance_;
}  // namespace inner
static ::_pb::Metadata file_level_metadata_teamsvr_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_teamsvr_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_teamsvr_2eproto = nullptr;

const uint32_t TableStruct_teamsvr_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerTeamsvr, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::inner::InnerTeamsvr, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerTeamsvr, fromuser_),
  PROTOBUF_FIELD_OFFSET(::inner::InnerTeamsvr, fromzone_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::inner::InnerTeamsvr, Fromscene_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerTeamsvr_Fromscene_Test, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerTeamsvr_Fromscene_GameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inner::InnerTeamsvr_Fromscene_GameEvent, gameevent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inner::InnerTeamsvr_Fromscene_UpdateUserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::inner::InnerTeamsvr_Fromscene_UpdateUserInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::inner::InnerTeamsvr_Fromscene_UpdateUserInfo, type_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::inner::InnerTeamsvr)},
  { 12, -1, -1, sizeof(::inner::InnerTeamsvr_Fromscene_Test)},
  { 18, -1, -1, sizeof(::inner::InnerTeamsvr_Fromscene_GameEvent)},
  { 25, -1, -1, sizeof(::inner::InnerTeamsvr_Fromscene_UpdateUserInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::inner::_InnerTeamsvr_default_instance_._instance,
  &::inner::_InnerTeamsvr_Fromscene_Test_default_instance_._instance,
  &::inner::_InnerTeamsvr_Fromscene_GameEvent_default_instance_._instance,
  &::inner::_InnerTeamsvr_Fromscene_UpdateUserInfo_default_instance_._instance,
};

const char descriptor_table_protodef_teamsvr_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rteamsvr.proto\022\005inner\032\014common.proto\032\021in"
  "nercommon.proto\032\024fight3v3common.proto\032\024f"
  "ight5v5common.proto\"\232\002\n\014InnerTeamsvr\022\020\n\010"
  "fromuser\030\001 \001(\004\022\020\n\010fromzone\030\002 \001(\r\022=\n\016from"
  "scene_test\030\371\n \001(\0132\".inner.InnerTeamsvr_F"
  "romscene_TestH\000\022G\n\023fromscene_gameevent\030\372"
  "\n \001(\0132\'.inner.InnerTeamsvr_Fromscene_Gam"
  "eEventH\000\022Q\n\030fromscene_updateuserinfo\030\373\n "
  "\001(\0132,.inner.InnerTeamsvr_Fromscene_Updat"
  "eUserInfoH\000B\013\n\tFromscene\"\035\n\033InnerTeamsvr"
  "_Fromscene_Test\"L\n InnerTeamsvr_Fromscen"
  "e_GameEvent\022(\n\tgameEvent\030\001 \001(\0132\025.inner.I"
  "nnerGameEvent\"\320\002\n%InnerTeamsvr_Fromscene"
  "_UpdateUserInfo\022$\n\005extd2\030\001 \001(\0132\023.common."
  "RoleExtend2H\000\022$\n\005extd3\030\002 \001(\0132\023.common.Ro"
  "leExtend3H\000\022\022\n\010nickName\030\003 \001(\tH\000\022\022\n\010headI"
  "con\030\004 \001(\rH\000\022\023\n\theadFrame\030\005 \001(\rH\000\022\022\n\010care"
  "erId\030\006 \001(\rH\000\022\017\n\005level\030\007 \001(\rH\000\022\r\n\003sex\030\010 \001"
  "(\rH\000\022\024\n\ncareeLevel\030\t \001(\rH\000\022%\n\003f33\030\n \001(\0132"
  "\026.common.ExtendFight3v3H\000\022%\n\003f55\030\013 \001(\0132\026"
  ".common.ExtendFight5v5H\000B\006\n\004typeb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_teamsvr_2eproto_deps[4] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_fight3v3common_2eproto,
  &::descriptor_table_fight5v5common_2eproto,
  &::descriptor_table_innercommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_teamsvr_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_teamsvr_2eproto = {
    false, false, 840, descriptor_table_protodef_teamsvr_2eproto,
    "teamsvr.proto",
    &descriptor_table_teamsvr_2eproto_once, descriptor_table_teamsvr_2eproto_deps, 4, 4,
    schemas, file_default_instances, TableStruct_teamsvr_2eproto::offsets,
    file_level_metadata_teamsvr_2eproto, file_level_enum_descriptors_teamsvr_2eproto,
    file_level_service_descriptors_teamsvr_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_teamsvr_2eproto_getter() {
  return &descriptor_table_teamsvr_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_teamsvr_2eproto(&descriptor_table_teamsvr_2eproto);
namespace inner {

// ===================================================================

class InnerTeamsvr::_Internal {
 public:
  static const ::inner::InnerTeamsvr_Fromscene_Test& fromscene_test(const InnerTeamsvr* msg);
  static const ::inner::InnerTeamsvr_Fromscene_GameEvent& fromscene_gameevent(const InnerTeamsvr* msg);
  static const ::inner::InnerTeamsvr_Fromscene_UpdateUserInfo& fromscene_updateuserinfo(const InnerTeamsvr* msg);
};

const ::inner::InnerTeamsvr_Fromscene_Test&
InnerTeamsvr::_Internal::fromscene_test(const InnerTeamsvr* msg) {
  return *msg->Fromscene_.fromscene_test_;
}
const ::inner::InnerTeamsvr_Fromscene_GameEvent&
InnerTeamsvr::_Internal::fromscene_gameevent(const InnerTeamsvr* msg) {
  return *msg->Fromscene_.fromscene_gameevent_;
}
const ::inner::InnerTeamsvr_Fromscene_UpdateUserInfo&
InnerTeamsvr::_Internal::fromscene_updateuserinfo(const InnerTeamsvr* msg) {
  return *msg->Fromscene_.fromscene_updateuserinfo_;
}
void InnerTeamsvr::set_allocated_fromscene_test(::inner::InnerTeamsvr_Fromscene_Test* fromscene_test) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Fromscene();
  if (fromscene_test) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fromscene_test);
    if (message_arena != submessage_arena) {
      fromscene_test = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fromscene_test, submessage_arena);
    }
    set_has_fromscene_test();
    Fromscene_.fromscene_test_ = fromscene_test;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerTeamsvr.fromscene_test)
}
void InnerTeamsvr::set_allocated_fromscene_gameevent(::inner::InnerTeamsvr_Fromscene_GameEvent* fromscene_gameevent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Fromscene();
  if (fromscene_gameevent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fromscene_gameevent);
    if (message_arena != submessage_arena) {
      fromscene_gameevent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fromscene_gameevent, submessage_arena);
    }
    set_has_fromscene_gameevent();
    Fromscene_.fromscene_gameevent_ = fromscene_gameevent;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerTeamsvr.fromscene_gameevent)
}
void InnerTeamsvr::set_allocated_fromscene_updateuserinfo(::inner::InnerTeamsvr_Fromscene_UpdateUserInfo* fromscene_updateuserinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Fromscene();
  if (fromscene_updateuserinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fromscene_updateuserinfo);
    if (message_arena != submessage_arena) {
      fromscene_updateuserinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fromscene_updateuserinfo, submessage_arena);
    }
    set_has_fromscene_updateuserinfo();
    Fromscene_.fromscene_updateuserinfo_ = fromscene_updateuserinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerTeamsvr.fromscene_updateuserinfo)
}
InnerTeamsvr::InnerTeamsvr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerTeamsvr)
}
InnerTeamsvr::InnerTeamsvr(const InnerTeamsvr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fromuser_, &from.fromuser_,
    static_cast<size_t>(reinterpret_cast<char*>(&fromzone_) -
    reinterpret_cast<char*>(&fromuser_)) + sizeof(fromzone_));
  clear_has_Fromscene();
  switch (from.Fromscene_case()) {
    case kFromsceneTest: {
      _internal_mutable_fromscene_test()->::inner::InnerTeamsvr_Fromscene_Test::MergeFrom(from._internal_fromscene_test());
      break;
    }
    case kFromsceneGameevent: {
      _internal_mutable_fromscene_gameevent()->::inner::InnerTeamsvr_Fromscene_GameEvent::MergeFrom(from._internal_fromscene_gameevent());
      break;
    }
    case kFromsceneUpdateuserinfo: {
      _internal_mutable_fromscene_updateuserinfo()->::inner::InnerTeamsvr_Fromscene_UpdateUserInfo::MergeFrom(from._internal_fromscene_updateuserinfo());
      break;
    }
    case FROMSCENE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:inner.InnerTeamsvr)
}

inline void InnerTeamsvr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fromuser_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fromzone_) -
    reinterpret_cast<char*>(&fromuser_)) + sizeof(fromzone_));
clear_has_Fromscene();
}

InnerTeamsvr::~InnerTeamsvr() {
  // @@protoc_insertion_point(destructor:inner.InnerTeamsvr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerTeamsvr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Fromscene()) {
    clear_Fromscene();
  }
}

void InnerTeamsvr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerTeamsvr::clear_Fromscene() {
// @@protoc_insertion_point(one_of_clear_start:inner.InnerTeamsvr)
  switch (Fromscene_case()) {
    case kFromsceneTest: {
      if (GetArenaForAllocation() == nullptr) {
        delete Fromscene_.fromscene_test_;
      }
      break;
    }
    case kFromsceneGameevent: {
      if (GetArenaForAllocation() == nullptr) {
        delete Fromscene_.fromscene_gameevent_;
      }
      break;
    }
    case kFromsceneUpdateuserinfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete Fromscene_.fromscene_updateuserinfo_;
      }
      break;
    }
    case FROMSCENE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FROMSCENE_NOT_SET;
}


void InnerTeamsvr::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerTeamsvr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fromuser_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fromzone_) -
      reinterpret_cast<char*>(&fromuser_)) + sizeof(fromzone_));
  clear_Fromscene();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerTeamsvr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 fromuser = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          fromuser_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 fromzone = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          fromzone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerTeamsvr_Fromscene_Test fromscene_test = 1401;
      case 1401:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_fromscene_test(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerTeamsvr_Fromscene_GameEvent fromscene_gameevent = 1402;
      case 1402:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_fromscene_gameevent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .inner.InnerTeamsvr_Fromscene_UpdateUserInfo fromscene_updateuserinfo = 1403;
      case 1403:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_fromscene_updateuserinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerTeamsvr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerTeamsvr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 fromuser = 1;
  if (this->_internal_fromuser() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_fromuser(), target);
  }

  // uint32 fromzone = 2;
  if (this->_internal_fromzone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_fromzone(), target);
  }

  // .inner.InnerTeamsvr_Fromscene_Test fromscene_test = 1401;
  if (_internal_has_fromscene_test()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1401, _Internal::fromscene_test(this),
        _Internal::fromscene_test(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerTeamsvr_Fromscene_GameEvent fromscene_gameevent = 1402;
  if (_internal_has_fromscene_gameevent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1402, _Internal::fromscene_gameevent(this),
        _Internal::fromscene_gameevent(this).GetCachedSize(), target, stream);
  }

  // .inner.InnerTeamsvr_Fromscene_UpdateUserInfo fromscene_updateuserinfo = 1403;
  if (_internal_has_fromscene_updateuserinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1403, _Internal::fromscene_updateuserinfo(this),
        _Internal::fromscene_updateuserinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerTeamsvr)
  return target;
}

size_t InnerTeamsvr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerTeamsvr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 fromuser = 1;
  if (this->_internal_fromuser() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_fromuser());
  }

  // uint32 fromzone = 2;
  if (this->_internal_fromzone() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fromzone());
  }

  switch (Fromscene_case()) {
    // .inner.InnerTeamsvr_Fromscene_Test fromscene_test = 1401;
    case kFromsceneTest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Fromscene_.fromscene_test_);
      break;
    }
    // .inner.InnerTeamsvr_Fromscene_GameEvent fromscene_gameevent = 1402;
    case kFromsceneGameevent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Fromscene_.fromscene_gameevent_);
      break;
    }
    // .inner.InnerTeamsvr_Fromscene_UpdateUserInfo fromscene_updateuserinfo = 1403;
    case kFromsceneUpdateuserinfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Fromscene_.fromscene_updateuserinfo_);
      break;
    }
    case FROMSCENE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerTeamsvr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerTeamsvr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerTeamsvr::GetClassData() const { return &_class_data_; }

void InnerTeamsvr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerTeamsvr *>(to)->MergeFrom(
      static_cast<const InnerTeamsvr &>(from));
}


void InnerTeamsvr::MergeFrom(const InnerTeamsvr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerTeamsvr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fromuser() != 0) {
    _internal_set_fromuser(from._internal_fromuser());
  }
  if (from._internal_fromzone() != 0) {
    _internal_set_fromzone(from._internal_fromzone());
  }
  switch (from.Fromscene_case()) {
    case kFromsceneTest: {
      _internal_mutable_fromscene_test()->::inner::InnerTeamsvr_Fromscene_Test::MergeFrom(from._internal_fromscene_test());
      break;
    }
    case kFromsceneGameevent: {
      _internal_mutable_fromscene_gameevent()->::inner::InnerTeamsvr_Fromscene_GameEvent::MergeFrom(from._internal_fromscene_gameevent());
      break;
    }
    case kFromsceneUpdateuserinfo: {
      _internal_mutable_fromscene_updateuserinfo()->::inner::InnerTeamsvr_Fromscene_UpdateUserInfo::MergeFrom(from._internal_fromscene_updateuserinfo());
      break;
    }
    case FROMSCENE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerTeamsvr::CopyFrom(const InnerTeamsvr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerTeamsvr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerTeamsvr::IsInitialized() const {
  return true;
}

void InnerTeamsvr::InternalSwap(InnerTeamsvr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InnerTeamsvr, fromzone_)
      + sizeof(InnerTeamsvr::fromzone_)
      - PROTOBUF_FIELD_OFFSET(InnerTeamsvr, fromuser_)>(
          reinterpret_cast<char*>(&fromuser_),
          reinterpret_cast<char*>(&other->fromuser_));
  swap(Fromscene_, other->Fromscene_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerTeamsvr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamsvr_2eproto_getter, &descriptor_table_teamsvr_2eproto_once,
      file_level_metadata_teamsvr_2eproto[0]);
}

// ===================================================================

class InnerTeamsvr_Fromscene_Test::_Internal {
 public:
};

InnerTeamsvr_Fromscene_Test::InnerTeamsvr_Fromscene_Test(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:inner.InnerTeamsvr_Fromscene_Test)
}
InnerTeamsvr_Fromscene_Test::InnerTeamsvr_Fromscene_Test(const InnerTeamsvr_Fromscene_Test& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inner.InnerTeamsvr_Fromscene_Test)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerTeamsvr_Fromscene_Test::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerTeamsvr_Fromscene_Test::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata InnerTeamsvr_Fromscene_Test::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamsvr_2eproto_getter, &descriptor_table_teamsvr_2eproto_once,
      file_level_metadata_teamsvr_2eproto[1]);
}

// ===================================================================

class InnerTeamsvr_Fromscene_GameEvent::_Internal {
 public:
  static const ::inner::InnerGameEvent& gameevent(const InnerTeamsvr_Fromscene_GameEvent* msg);
};

const ::inner::InnerGameEvent&
InnerTeamsvr_Fromscene_GameEvent::_Internal::gameevent(const InnerTeamsvr_Fromscene_GameEvent* msg) {
  return *msg->gameevent_;
}
void InnerTeamsvr_Fromscene_GameEvent::clear_gameevent() {
  if (GetArenaForAllocation() == nullptr && gameevent_ != nullptr) {
    delete gameevent_;
  }
  gameevent_ = nullptr;
}
InnerTeamsvr_Fromscene_GameEvent::InnerTeamsvr_Fromscene_GameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerTeamsvr_Fromscene_GameEvent)
}
InnerTeamsvr_Fromscene_GameEvent::InnerTeamsvr_Fromscene_GameEvent(const InnerTeamsvr_Fromscene_GameEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gameevent()) {
    gameevent_ = new ::inner::InnerGameEvent(*from.gameevent_);
  } else {
    gameevent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:inner.InnerTeamsvr_Fromscene_GameEvent)
}

inline void InnerTeamsvr_Fromscene_GameEvent::SharedCtor() {
gameevent_ = nullptr;
}

InnerTeamsvr_Fromscene_GameEvent::~InnerTeamsvr_Fromscene_GameEvent() {
  // @@protoc_insertion_point(destructor:inner.InnerTeamsvr_Fromscene_GameEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerTeamsvr_Fromscene_GameEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete gameevent_;
}

void InnerTeamsvr_Fromscene_GameEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerTeamsvr_Fromscene_GameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerTeamsvr_Fromscene_GameEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && gameevent_ != nullptr) {
    delete gameevent_;
  }
  gameevent_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerTeamsvr_Fromscene_GameEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .inner.InnerGameEvent gameEvent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameevent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerTeamsvr_Fromscene_GameEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerTeamsvr_Fromscene_GameEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .inner.InnerGameEvent gameEvent = 1;
  if (this->_internal_has_gameevent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::gameevent(this),
        _Internal::gameevent(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerTeamsvr_Fromscene_GameEvent)
  return target;
}

size_t InnerTeamsvr_Fromscene_GameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerTeamsvr_Fromscene_GameEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .inner.InnerGameEvent gameEvent = 1;
  if (this->_internal_has_gameevent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gameevent_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerTeamsvr_Fromscene_GameEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerTeamsvr_Fromscene_GameEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerTeamsvr_Fromscene_GameEvent::GetClassData() const { return &_class_data_; }

void InnerTeamsvr_Fromscene_GameEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerTeamsvr_Fromscene_GameEvent *>(to)->MergeFrom(
      static_cast<const InnerTeamsvr_Fromscene_GameEvent &>(from));
}


void InnerTeamsvr_Fromscene_GameEvent::MergeFrom(const InnerTeamsvr_Fromscene_GameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerTeamsvr_Fromscene_GameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gameevent()) {
    _internal_mutable_gameevent()->::inner::InnerGameEvent::MergeFrom(from._internal_gameevent());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerTeamsvr_Fromscene_GameEvent::CopyFrom(const InnerTeamsvr_Fromscene_GameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerTeamsvr_Fromscene_GameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerTeamsvr_Fromscene_GameEvent::IsInitialized() const {
  return true;
}

void InnerTeamsvr_Fromscene_GameEvent::InternalSwap(InnerTeamsvr_Fromscene_GameEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(gameevent_, other->gameevent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerTeamsvr_Fromscene_GameEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamsvr_2eproto_getter, &descriptor_table_teamsvr_2eproto_once,
      file_level_metadata_teamsvr_2eproto[2]);
}

// ===================================================================

class InnerTeamsvr_Fromscene_UpdateUserInfo::_Internal {
 public:
  static const ::common::RoleExtend2& extd2(const InnerTeamsvr_Fromscene_UpdateUserInfo* msg);
  static const ::common::RoleExtend3& extd3(const InnerTeamsvr_Fromscene_UpdateUserInfo* msg);
  static const ::common::ExtendFight3v3& f33(const InnerTeamsvr_Fromscene_UpdateUserInfo* msg);
  static const ::common::ExtendFight5v5& f55(const InnerTeamsvr_Fromscene_UpdateUserInfo* msg);
};

const ::common::RoleExtend2&
InnerTeamsvr_Fromscene_UpdateUserInfo::_Internal::extd2(const InnerTeamsvr_Fromscene_UpdateUserInfo* msg) {
  return *msg->type_.extd2_;
}
const ::common::RoleExtend3&
InnerTeamsvr_Fromscene_UpdateUserInfo::_Internal::extd3(const InnerTeamsvr_Fromscene_UpdateUserInfo* msg) {
  return *msg->type_.extd3_;
}
const ::common::ExtendFight3v3&
InnerTeamsvr_Fromscene_UpdateUserInfo::_Internal::f33(const InnerTeamsvr_Fromscene_UpdateUserInfo* msg) {
  return *msg->type_.f33_;
}
const ::common::ExtendFight5v5&
InnerTeamsvr_Fromscene_UpdateUserInfo::_Internal::f55(const InnerTeamsvr_Fromscene_UpdateUserInfo* msg) {
  return *msg->type_.f55_;
}
void InnerTeamsvr_Fromscene_UpdateUserInfo::set_allocated_extd2(::common::RoleExtend2* extd2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (extd2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd2));
    if (message_arena != submessage_arena) {
      extd2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extd2, submessage_arena);
    }
    set_has_extd2();
    type_.extd2_ = extd2;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.extd2)
}
void InnerTeamsvr_Fromscene_UpdateUserInfo::clear_extd2() {
  if (_internal_has_extd2()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.extd2_;
    }
    clear_has_type();
  }
}
void InnerTeamsvr_Fromscene_UpdateUserInfo::set_allocated_extd3(::common::RoleExtend3* extd3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (extd3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extd3));
    if (message_arena != submessage_arena) {
      extd3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extd3, submessage_arena);
    }
    set_has_extd3();
    type_.extd3_ = extd3;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.extd3)
}
void InnerTeamsvr_Fromscene_UpdateUserInfo::clear_extd3() {
  if (_internal_has_extd3()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.extd3_;
    }
    clear_has_type();
  }
}
void InnerTeamsvr_Fromscene_UpdateUserInfo::set_allocated_f33(::common::ExtendFight3v3* f33) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (f33) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f33));
    if (message_arena != submessage_arena) {
      f33 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f33, submessage_arena);
    }
    set_has_f33();
    type_.f33_ = f33;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.f33)
}
void InnerTeamsvr_Fromscene_UpdateUserInfo::clear_f33() {
  if (_internal_has_f33()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.f33_;
    }
    clear_has_type();
  }
}
void InnerTeamsvr_Fromscene_UpdateUserInfo::set_allocated_f55(::common::ExtendFight5v5* f55) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (f55) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f55));
    if (message_arena != submessage_arena) {
      f55 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f55, submessage_arena);
    }
    set_has_f55();
    type_.f55_ = f55;
  }
  // @@protoc_insertion_point(field_set_allocated:inner.InnerTeamsvr_Fromscene_UpdateUserInfo.f55)
}
void InnerTeamsvr_Fromscene_UpdateUserInfo::clear_f55() {
  if (_internal_has_f55()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.f55_;
    }
    clear_has_type();
  }
}
InnerTeamsvr_Fromscene_UpdateUserInfo::InnerTeamsvr_Fromscene_UpdateUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:inner.InnerTeamsvr_Fromscene_UpdateUserInfo)
}
InnerTeamsvr_Fromscene_UpdateUserInfo::InnerTeamsvr_Fromscene_UpdateUserInfo(const InnerTeamsvr_Fromscene_UpdateUserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kExtd2: {
      _internal_mutable_extd2()->::common::RoleExtend2::MergeFrom(from._internal_extd2());
      break;
    }
    case kExtd3: {
      _internal_mutable_extd3()->::common::RoleExtend3::MergeFrom(from._internal_extd3());
      break;
    }
    case kNickName: {
      _internal_set_nickname(from._internal_nickname());
      break;
    }
    case kHeadIcon: {
      _internal_set_headicon(from._internal_headicon());
      break;
    }
    case kHeadFrame: {
      _internal_set_headframe(from._internal_headframe());
      break;
    }
    case kCareerId: {
      _internal_set_careerid(from._internal_careerid());
      break;
    }
    case kLevel: {
      _internal_set_level(from._internal_level());
      break;
    }
    case kSex: {
      _internal_set_sex(from._internal_sex());
      break;
    }
    case kCareeLevel: {
      _internal_set_careelevel(from._internal_careelevel());
      break;
    }
    case kF33: {
      _internal_mutable_f33()->::common::ExtendFight3v3::MergeFrom(from._internal_f33());
      break;
    }
    case kF55: {
      _internal_mutable_f55()->::common::ExtendFight5v5::MergeFrom(from._internal_f55());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:inner.InnerTeamsvr_Fromscene_UpdateUserInfo)
}

inline void InnerTeamsvr_Fromscene_UpdateUserInfo::SharedCtor() {
clear_has_type();
}

InnerTeamsvr_Fromscene_UpdateUserInfo::~InnerTeamsvr_Fromscene_UpdateUserInfo() {
  // @@protoc_insertion_point(destructor:inner.InnerTeamsvr_Fromscene_UpdateUserInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerTeamsvr_Fromscene_UpdateUserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void InnerTeamsvr_Fromscene_UpdateUserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InnerTeamsvr_Fromscene_UpdateUserInfo::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:inner.InnerTeamsvr_Fromscene_UpdateUserInfo)
  switch (type_case()) {
    case kExtd2: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.extd2_;
      }
      break;
    }
    case kExtd3: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.extd3_;
      }
      break;
    }
    case kNickName: {
      type_.nickname_.Destroy();
      break;
    }
    case kHeadIcon: {
      // No need to clear
      break;
    }
    case kHeadFrame: {
      // No need to clear
      break;
    }
    case kCareerId: {
      // No need to clear
      break;
    }
    case kLevel: {
      // No need to clear
      break;
    }
    case kSex: {
      // No need to clear
      break;
    }
    case kCareeLevel: {
      // No need to clear
      break;
    }
    case kF33: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.f33_;
      }
      break;
    }
    case kF55: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.f55_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void InnerTeamsvr_Fromscene_UpdateUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:inner.InnerTeamsvr_Fromscene_UpdateUserInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerTeamsvr_Fromscene_UpdateUserInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.RoleExtend2 extd2 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_extd2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.RoleExtend3 extd3 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_extd3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nickName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "inner.InnerTeamsvr_Fromscene_UpdateUserInfo.nickName"));
        } else
          goto handle_unusual;
        continue;
      // uint32 headIcon = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_headicon(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 headFrame = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_set_headframe(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 careerId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set_careerid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _internal_set_level(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sex = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _internal_set_sex(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 careeLevel = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _internal_set_careelevel(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.ExtendFight3v3 f33 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_f33(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.ExtendFight5v5 f55 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_f55(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerTeamsvr_Fromscene_UpdateUserInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner.InnerTeamsvr_Fromscene_UpdateUserInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.RoleExtend2 extd2 = 1;
  if (_internal_has_extd2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::extd2(this),
        _Internal::extd2(this).GetCachedSize(), target, stream);
  }

  // .common.RoleExtend3 extd3 = 2;
  if (_internal_has_extd3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::extd3(this),
        _Internal::extd3(this).GetCachedSize(), target, stream);
  }

  // string nickName = 3;
  if (_internal_has_nickname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inner.InnerTeamsvr_Fromscene_UpdateUserInfo.nickName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nickname(), target);
  }

  // uint32 headIcon = 4;
  if (_internal_has_headicon()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_headicon(), target);
  }

  // uint32 headFrame = 5;
  if (_internal_has_headframe()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_headframe(), target);
  }

  // uint32 careerId = 6;
  if (_internal_has_careerid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_careerid(), target);
  }

  // uint32 level = 7;
  if (_internal_has_level()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_level(), target);
  }

  // uint32 sex = 8;
  if (_internal_has_sex()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_sex(), target);
  }

  // uint32 careeLevel = 9;
  if (_internal_has_careelevel()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_careelevel(), target);
  }

  // .common.ExtendFight3v3 f33 = 10;
  if (_internal_has_f33()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::f33(this),
        _Internal::f33(this).GetCachedSize(), target, stream);
  }

  // .common.ExtendFight5v5 f55 = 11;
  if (_internal_has_f55()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::f55(this),
        _Internal::f55(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inner.InnerTeamsvr_Fromscene_UpdateUserInfo)
  return target;
}

size_t InnerTeamsvr_Fromscene_UpdateUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner.InnerTeamsvr_Fromscene_UpdateUserInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .common.RoleExtend2 extd2 = 1;
    case kExtd2: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.extd2_);
      break;
    }
    // .common.RoleExtend3 extd3 = 2;
    case kExtd3: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.extd3_);
      break;
    }
    // string nickName = 3;
    case kNickName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
      break;
    }
    // uint32 headIcon = 4;
    case kHeadIcon: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headicon());
      break;
    }
    // uint32 headFrame = 5;
    case kHeadFrame: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headframe());
      break;
    }
    // uint32 careerId = 6;
    case kCareerId: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_careerid());
      break;
    }
    // uint32 level = 7;
    case kLevel: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
      break;
    }
    // uint32 sex = 8;
    case kSex: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sex());
      break;
    }
    // uint32 careeLevel = 9;
    case kCareeLevel: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_careelevel());
      break;
    }
    // .common.ExtendFight3v3 f33 = 10;
    case kF33: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.f33_);
      break;
    }
    // .common.ExtendFight5v5 f55 = 11;
    case kF55: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.f55_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerTeamsvr_Fromscene_UpdateUserInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerTeamsvr_Fromscene_UpdateUserInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerTeamsvr_Fromscene_UpdateUserInfo::GetClassData() const { return &_class_data_; }

void InnerTeamsvr_Fromscene_UpdateUserInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerTeamsvr_Fromscene_UpdateUserInfo *>(to)->MergeFrom(
      static_cast<const InnerTeamsvr_Fromscene_UpdateUserInfo &>(from));
}


void InnerTeamsvr_Fromscene_UpdateUserInfo::MergeFrom(const InnerTeamsvr_Fromscene_UpdateUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner.InnerTeamsvr_Fromscene_UpdateUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kExtd2: {
      _internal_mutable_extd2()->::common::RoleExtend2::MergeFrom(from._internal_extd2());
      break;
    }
    case kExtd3: {
      _internal_mutable_extd3()->::common::RoleExtend3::MergeFrom(from._internal_extd3());
      break;
    }
    case kNickName: {
      _internal_set_nickname(from._internal_nickname());
      break;
    }
    case kHeadIcon: {
      _internal_set_headicon(from._internal_headicon());
      break;
    }
    case kHeadFrame: {
      _internal_set_headframe(from._internal_headframe());
      break;
    }
    case kCareerId: {
      _internal_set_careerid(from._internal_careerid());
      break;
    }
    case kLevel: {
      _internal_set_level(from._internal_level());
      break;
    }
    case kSex: {
      _internal_set_sex(from._internal_sex());
      break;
    }
    case kCareeLevel: {
      _internal_set_careelevel(from._internal_careelevel());
      break;
    }
    case kF33: {
      _internal_mutable_f33()->::common::ExtendFight3v3::MergeFrom(from._internal_f33());
      break;
    }
    case kF55: {
      _internal_mutable_f55()->::common::ExtendFight5v5::MergeFrom(from._internal_f55());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerTeamsvr_Fromscene_UpdateUserInfo::CopyFrom(const InnerTeamsvr_Fromscene_UpdateUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner.InnerTeamsvr_Fromscene_UpdateUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerTeamsvr_Fromscene_UpdateUserInfo::IsInitialized() const {
  return true;
}

void InnerTeamsvr_Fromscene_UpdateUserInfo::InternalSwap(InnerTeamsvr_Fromscene_UpdateUserInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerTeamsvr_Fromscene_UpdateUserInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teamsvr_2eproto_getter, &descriptor_table_teamsvr_2eproto_once,
      file_level_metadata_teamsvr_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace inner
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::inner::InnerTeamsvr*
Arena::CreateMaybeMessage< ::inner::InnerTeamsvr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerTeamsvr >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerTeamsvr_Fromscene_Test*
Arena::CreateMaybeMessage< ::inner::InnerTeamsvr_Fromscene_Test >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerTeamsvr_Fromscene_Test >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerTeamsvr_Fromscene_GameEvent*
Arena::CreateMaybeMessage< ::inner::InnerTeamsvr_Fromscene_GameEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerTeamsvr_Fromscene_GameEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::inner::InnerTeamsvr_Fromscene_UpdateUserInfo*
Arena::CreateMaybeMessage< ::inner::InnerTeamsvr_Fromscene_UpdateUserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inner::InnerTeamsvr_Fromscene_UpdateUserInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
