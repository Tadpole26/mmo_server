{%- macro gen_set_func(base_name, type, const_name, part_name) %}
    void Set{{base_name}}({{type}} {{part_name}})
    {
    {%if type == 'int' %}    m_mapInt[{{const_name}}] += {{ part_name }}; 
    {%-elif type == 'uint32_t' %}    m_mapUint32[{{const_name}}] += {{ part_name }};
    {%-elif type == 'int64_t' %}    m_mapInt64[{{const_name}}] += {{ part_name }}; 
    {%-elif type == 'time_t' %}    m_mapInt64[{{const_name}}] += {{ part_name }}; 
    {%-elif type == 'string' %}    m_mapString[{{const_name}}] = {{ part_name }}; 
    {%-elif type == 'bool' %}    m_mapBool[{{const_name}}] = {{ part_name }}; 
    {%- endif %}
    }
{%- endmacro -%}

{%- macro gen_cache_get_func(base_name, type, mem_name) %}
    const {{type}}& Get{{ base_name }}() const
    {
        return m_stData.{{mem_name}};
    }
{%- endmacro -%}

{%- macro gen_cache_set_func(base_name, type, part_name, mem_name) %}
{%- if type == 'string' %}
    void Set{{base_name}}(const {{type}}& {{part_name}})
    {
        if (m_pRecord == NULL)
            m_pRecord = GetRecord();
        m_pRecord->SetOperation(CTableRecordBase::UPDATE);
        m_pRecord->Set{{base_name}}({{part_name}});
        m_stData.{{mem_name}} = {{part_name}};
    }
{%- else %}
    void Set{{base_name}}({{type}} {{part_name}})
    {
        if (m_stData.{{mem_name}} == {{part_name}})
            return; 
        if (m_pRecord == NULL)
            m_pRecord = GetRecord();
        {{type}} RealAdd = {{part_name}} - m_stData.{{mem_name}};
        m_pRecord->SetOperation(CTableRecordBase::UPDATE);
        m_pRecord->Set{{base_name}}(RealAdd);
        m_stData.{{mem_name}} = {{part_name}};
    }
{%- endif %}
{%- endmacro -%}

{%- macro gen_cache_add_func(base_name, type, part_name, mem_name) %}
    void Add{{base_name}}({{type}} {{part_name}})
    {
        if (0 == {{part_name}})
            return;
        if (m_pRecord == NULL)
            m_pRecord = GetRecord();
        m_pRecord->SetOperation(CTableRecordBase::UPDATE);
        m_pRecord->Set{{base_name}}({{part_name}});
        m_stData.{{mem_name}} += {{part_name}};
    }
{%- endmacro -%}

{%- set SKey = namespace(type='',  base='', mem='', part='') -%}
{%- for field in field_list %}
{%- if field.m_strSKey == True %}
{%-set SKey.type = field.m_strType -%}
{%-set SKey.base = field.m_strBaseName -%}
{%-set SKey.mem = field.m_strMemName -%}
{%-set SKey.part = field.m_strPartName -%}
{%-endif %}
{%- endfor %}
#pragma once
#include "CTableRecordBase.h"
#include "CTableRecordCache.h"

struct {{ cache_name }};
struct {{ cache_value_name }};
class {{ class_name }} : public CTableRecordBase
{
public:
    {{ class_name }}() : m_pCache(NULL) { }

    virtual ~{{ class_name }}();

    shared_ptr<sDBRequest> MakeInsertSQL() override;
    shared_ptr<sDBRequest> MakeUpdateSQL() override;
    shared_ptr<sDBRequest> MakeDeleteSQL() override;

    virtual int64_t GetUid();
    {%- if sec_type == 'list'%}
    virtual {{SKey.type}} Get{{SKey.base}}();
    {%- endif %}

    static std::vector<{{ cache_value_name }}> SelectDataFromDB(int64_t llUid, sDBSecRet& vecData);

    static const char* s_strFirstName;
    static const char* s_strSecName;
    static const char* s_strSecType;
    {%- for filed in field_list %}
    static const char* {{ filed.m_strConstName }};
    {%- endfor %}

    {{ cache_name }}* m_pCache;
    {%- for field in field_list %}
    {{ gen_set_func(field.m_strBaseName, field.m_strType, field.m_strConstName, field.m_strPartName) }}
    {%- endfor %}
    
    void SetCachePtr({{ cache_name }}* pCache)
    {
        m_pCache = pCache;
    }
    {%- if sec_type == 'object' %}
    void SetPrimaryKey(int64_t llUid)
    {
        m_llUid = llUid;
    }
    {%- else %}
    void SetPrimaryKey(int64_t llUid, {{SKey.type}} {{SKey.part}})
    {
        m_llUid = llUid;
        {{SKey.mem}} = {{SKey.part}};
    }
    {%- endif %}
private:
    int64_t m_llUid;
    {%- if sec_type == 'list' %}
    {{SKey.type}} {{SKey.mem}};
    {%- endif %}
};

struct {{ cache_value_name }}
{
    {{ cache_value_name }}():
    m_llUid(0)
    {%- for filed in field_list %}
    {%- if filed.m_strType == 'string' and filed.m_strDft == '' %}
    , {{ filed.m_strMemName }}("")
    {%-else %}
    , {{ filed.m_strMemName }}({{filed.m_strDft}})
    {%- endif %}
    {%- endfor %}
    {}
    int64_t m_llUid;
    {%- for field in field_list %}
    {{ field.m_strType }} {{ field.m_strMemName }};
    {%- endfor %}
};

struct {{ cache_name }}
{
    {{ cache_name }}() : m_pRecord(NULL) { }
    ~{{ cache_name }}() 
    {
        if(NULL != m_pRecord) m_pRecord->SetCachePtr(NULL);
    }

    void InitializeWithoutSQL(const {{ cache_value_name }}& stData)
    {
        m_stData = stData;
    }
    void Initialize(const {{ cache_value_name }}& stData)
    {
        if (m_pRecord == NULL)
            m_pRecord = GetRecord();
        m_pRecord->SetOperation(CTableRecordBase::INSERT);
        {%- if sec_type == 'object' %}
        m_pRecord->SetPrimaryKey(stData.m_llUid);
        {%- else %}
        m_pRecord->SetPrimaryKey(stData.m_llUid, stData.{{SKey.mem}});
        {%- endif %}
        {%- for field in field_list %}
        m_pRecord->Set{{ field.m_strBaseName }}(stData.{{ field.m_strMemName }});
        {%- endfor %}
        m_stData = stData;
    }
    void ClearFromSQL()
    {
        if (m_pRecord == NULL)
            m_pRecord = GetRecord();
        m_pRecord->SetOperation(CTableRecordBase::REMOVE);
    }
    {%- for field in field_list %}
    {%- if field.m_strType == 'string' or field.m_strType == 'bool' %}
    {{gen_cache_get_func(field.m_strBaseName, field.m_strType, field.m_strMemName)}}
    {{gen_cache_set_func(field.m_strBaseName, field.m_strType, field.m_strPartName, field.m_strMemName)}}
    {%- else %}
    {{gen_cache_get_func(field.m_strBaseName, field.m_strType, field.m_strMemName)}}
    {{gen_cache_set_func(field.m_strBaseName, field.m_strType, field.m_strPartName, field.m_strMemName)}}
    {{gen_cache_add_func(field.m_strBaseName, field.m_strType, field.m_strPartName, field.m_strMemName)}}
    {%- endif %}
    {%- endfor %}

    {{ class_name }}* m_pRecord;
    {{ cache_value_name }} m_stData;

private:
    bool HasRecord()
    {
        return ((m_pRecord == NULL) ? false : true);
    }
    {{class_name}}* GetRecord()
    {
        if(!m_pRecord)
        {
            m_pRecord = new {{ class_name }};
            {%- if sec_type == 'object' %}
            m_pRecord->SetPrimaryKey(m_stData.m_llUid);
            {%- else %}
            m_pRecord->SetPrimaryKey(m_stData.m_llUid, m_stData.{{SKey.mem}});
            {%- endif %}
            m_pRecord->SetCachePtr(this);
            {{ sync_ins }}->m_stRecordVec.push_back(std::shared_ptr<{{ class_name }}>(m_pRecord));
        }
        return m_pRecord;
    }
};
