syntax = "proto3";
import "common.proto";
import "innercommon.proto";
import "innermatch.proto";
import "fight3v3common.proto";
import "fight5v5common.proto";
import "chatcommon.proto";
package inner;

message InnerTeamsvr
{
	uint64 fromuser = 1;
	uint32 fromzone = 2;
	oneof Frommatch
	{
		InnerTeamsvr_Frommatch_Test									frommatch_test					= 1201;
		InnerTeamsvr_Frommatch_StartMatch							frommatch_startmatch			= 1202;
		InnerTeamsvr_Frommatch_RestartMatch							frommatch_restartmatch			= 1203;
		InnerTeamsvr_Frommatch_CancelMatch							frommatch_cancelmatch			= 1204;
		InnerTeamsvr_Frommatch_PunishMatch							frommatch_punishmatch			= 1205;
		InnerTeamsvr_Frommatch_StartConfirm							frommatch_startconfirm			= 1206;
		InnerTeamsvr_Frommatch_RoleConfirmOk						frommatch_roleconfirmok			= 1207;
		InnerTeamsvr_Frommatch_StartLoading							frommatch_startloading			= 1208;
	}
	oneof Fromscene
	{
		InnerTeamsvr_Fromscene_Test 								fromscene_test 					= 1401;
		InnerTeamsvr_Fromscene_GameEvent							fromscene_gameevent 			= 1402;
		InnerTeamsvr_Fromscene_UpdateUserInfo						fromscene_updateuserinfo		= 1403;
		InnerTeamsvr_Fromscene_PersonChangeTarget					fromscene_personchangetarget	= 1404;			//个人匹配寻找队伍
		InnerTeamsvr_Fromscene_PersonCancelMatch					fromscene_personcancelmatch		= 1405;
		InnerTeamsvr_Fromscene_LeaderStartMatch 					fromscene_leaderstartmatch		= 1406;			//队伍招募寻找队员
		InnerTeamsvr_Fromscene_LeaderCancelMatch					fromscene_leadercancelmatch		= 1407;
		InnerTeamsvr_Fromscene_TargetTeamList						fromscene_targetteamlist		= 1408;			//获取所有目标队伍
		InnerTeamsvr_Fromscene_CreateTeam							fromscene_createteam			= 1409;			//创建队伍
		InnerTeamsvr_Fromscene_LeaderFireMember						fromscene_firemember			= 1410;			//解雇成员
		InnerTeamsvr_Fromscene_LeaderChangeTarget					fromscene_leaderchangetarget	= 1411;			//队长改变目标
		InnerTeamsvr_Fromscene_LeaderTogetherMember					fromscene_leadertogethermember	= 1412;			//队长召集指定队员
		InnerTeamsvr_Fromscene_LeaderAppoint						fromscene_leaderappoint			= 1413;			//队长任命
		InnerTeamsvr_Fromscene_LeaderRefuseAllApply					fromscene_leaderrefuseallapply	= 1414;			//队长拒绝所有申请
		InnerTeamsvr_Fromscene_LeaderAgreeAllApply					fromscene_leaderagreeallapply	= 1415;			//队长同意所有申请
		InnerTeamsvr_Fromscene_LeaderRefuseApply					fromscene_leaderrefuseapply		= 1416;			//队长拒绝指定申请
		InnerTeamsvr_Fromscene_LeaderAgreeApply						fromscene_leaderagreeapply		= 1417;			//队长同意指定申请
		InnerTeamsvr_Fromscene_InviteFriend							fromscene_invitefriend			= 1418;			//邀请好友
		InnerTeamsvr_Fromscene_InviteFamily							fromscene_invitefamily			= 1419;			//邀请家族成员
		InnerTeamsvr_Fromscene_InvitePlayer							fromscene_inviteplayer			= 1420;			//邀请玩家
		InnerTeamsvr_Fromscene_AgreeInvited							fromscene_agreeinvited			= 1421;			//同意邀请
		InnerTeamsvr_Fromscene_RefuseInvited						fromscene_refuseinvited			= 1422;			//拒绝邀请
		InnerTeamsvr_Fromscene_BatLeaveTeam							fromscene_batleaveteam			= 1423;			//离开队伍
		InnerTeamsvr_Fromscene_ApplyTeam							fromscene_applyteam				= 1424;			//申请加入队伍
		InnerTeamsvr_Fromscene_FollowLeader							fromscene_followleader			= 1425;			//跟随队长
		InnerTeamsvr_Fromscene_CancelFollow							fromscene_cancelfollow			= 1426;			//取消跟随
		InnerTeamsvr_Fromscene_AgreeTogether						fromscene_agreetogether			= 1427;			//同意召集
		InnerTeamsvr_Fromscene_RefuseTogether						fromscene_refusetogether		= 1428;			//拒绝召集
		InnerTeamsvr_Fromscene_ReplaceLeader						fromscene_replaceleader			= 1429;			//替换队长(队长在队伍中,队长离开队伍,队长自动给队伍成员)
		InnerTeamsvr_Fromscene_PersonVote							fromscene_personvote			= 1430;			//队员投票
		InnerTeamsvr_Fromscene_EnterByVote							fromscene_enterbyvote			= 1431;			//进入副本投票
		InnerTeamsvr_Fromscene_ChatTeam								fromscene_chatteam				= 1432;			//队伍聊天
		InnerTeamsvr_Fromscene_BatCreateTeam						fromscene_batcreateteam			= 1433;			
		InnerTeamsvr_Fromscene_BatDstroyTeam						fromscene_batdestroyteam		= 1434;
		InnerTeamsvr_Fromscene_JumpToLeader							fromscene_jumptoleader			= 1435;
	}
}

message InnerTeamsvr_Frommatch_Test
{
}

message InnerTeamsvr_Frommatch_StartMatch
{
	uint32 mtype = 1;
	uint64 uinitId = 2;
	inner.InnerMatchMatchList matchList = 3;
}

message InnerTeamsvr_Frommatch_RestartMatch
{
	uint32 type = 1;
	uint64 unitId = 2;
}

message InnerTeamsvr_Frommatch_CancelMatch
{
	uint32 mtype = 1;
	uint64 uinitId = 2;
}

message InnerTeamsvr_Frommatch_PunishMatch
{
	uint64 unitId = 1;
	inner.InnerMatchPunishList punishList = 2;
}

message InnerTeamsvr_Frommatch_StartConfirm
{
	inner.InnerMatchRoom room = 1;
	uint32 expire = 2;
}

message InnerTeamsvr_Frommatch_RoleConfirmOk
{
	uint64 roomId = 1;
}

message InnerTeamsvr_Frommatch_StartLoading
{
	uint64 roomId = 1;
	inner.InnerMatchRoomCopyScene copyscene = 2;
	inner.InnerCopyCreateBy createBy = 3;
}

message InnerTeamsvr_Fromscene_Test
{
}

message InnerTeamsvr_Fromscene_GameEvent
{
	inner.InnerGameEvent gameEvent = 1;
}

message InnerTeamsvr_Fromscene_UpdateUserInfo
{
	oneof type
	{
		common.RoleExtend2 extd2 = 1;
		common.RoleExtend3 extd3 = 2;
		string nickName = 3;
		uint32 headIcon = 4;
		uint32 headFrame = 5;
		uint32 careerId = 6;
		uint32 level = 7;
		uint32 sex = 8;
		uint32 careeLevel = 9;
		common.ExtendFight3v3 f33 = 10;
		common.ExtendFight5v5 f55 = 11;
	}
}

message InnerTeamsvr_Fromscene_PersonChangeTarget
{
	uint32 targetId = 1;
}

message InnerTeamsvr_Fromscene_PersonCancelMatch
{
}

message InnerTeamsvr_Fromscene_LeaderStartMatch
{
	bytes text = 1;
	uint32 languageId = 2;
}

message InnerTeamsvr_Fromscene_LeaderCancelMatch
{
}

message InnerTeamsvr_Fromscene_TargetTeamList
{
	uint32 targetId = 1;
}

message InnerTeamsvr_Fromscene_CreateTeam
{
	uint32 targetId = 1;
	uint32 minLevel = 2;				//队伍最小等级可以手动调控
	uint32 maxLevel = 3;				//队伍最大等级可以手动调控
}

message InnerTeamsvr_Fromscene_LeaderFireMember
{
	uint64 roleId = 1;
}

message InnerTeamsvr_Fromscene_LeaderChangeTarget
{
	uint32 targetId = 1;
	uint32 minLevel = 2;
	uint32 maxLevel = 3;
}

message InnerTeamsvr_Fromscene_LeaderTogetherMember	
{
	uint64 roleId = 1;
}

message InnerTeamsvr_Fromscene_LeaderAppoint
{
	uint64 roleId = 1;
}

message InnerTeamsvr_Fromscene_LeaderRefuseAllApply
{
}

message InnerTeamsvr_Fromscene_LeaderAgreeAllApply
{
}

message InnerTeamsvr_Fromscene_LeaderRefuseApply
{
	uint64 roleId = 1;
	uint32 zoneIdF = 2;
}

message InnerTeamsvr_Fromscene_LeaderAgreeApply
{
	uint64 roleId = 1;
	uint32 zoneIdF = 2;
}

message InnerTeamsvr_Fromscene_InviteFriend	
{
	uint64 roleId = 1;
}

message InnerTeamsvr_Fromscene_InviteFamily
{
	uint64 roleId = 1;
}

message InnerTeamsvr_Fromscene_InvitePlayer	
{
	uint64 roleId = 1;
	uint32 zoneIdF = 2;
}

message InnerTeamsvr_Fromscene_AgreeInvited	
{
}

message InnerTeamsvr_Fromscene_RefuseInvited
{
}

message InnerTeamsvr_Fromscene_BatLeaveTeam	
{
	inner.InnerRoleIdList onlyTeam = 1;
	inner.InnerRoleIdList copyTeam = 2;
}

message InnerTeamsvr_Fromscene_ApplyTeam
{
	uint64 teamId = 1;
	uint64 leaderSceneId = 2;
}

message InnerTeamsvr_Fromscene_FollowLeader	
{
}

message InnerTeamsvr_Fromscene_CancelFollow	
{
}

message InnerTeamsvr_Fromscene_AgreeTogether
{
}

message InnerTeamsvr_Fromscene_RefuseTogether
{
}

message InnerTeamsvr_Fromscene_ReplaceLeader
{
}

message InnerTeamsvr_Fromscene_PersonVote	
{
	bool agree = 1;
}

message InnerTeamsvr_Fromscene_EnterByVote	
{
}

message InnerTeamsvr_Fromscene_ChatTeam			
{
	common.ChatTypeContextDown context = 1;
}

message InnerTeamsvr_Fromscene_BatCreateTeam	
{
}

message InnerTeamsvr_Fromscene_BatDstroyTeam	
{
	repeated uint64 teamIds = 1;
}

message InnerTeamsvr_Fromscene_JumpToLeader		
{
	uint32 eJumpTo = 1;
}