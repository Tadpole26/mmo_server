syntax = "proto3";
package common;

//主角模型部位信息
message ModelPart
{
    uint32 partId = 1;//部位Id
    uint32 partVal = 2;//部位信息
}

//主角模型部位列表
message ModelPartList
{
    repeated ModelPart parts = 1;//部位列表
}

message OneFashionStain
{
    uint32 part = 1;//部位
    uint32 color = 2;//颜色
}

message FashionStain
{
    repeated OneFashionStain onestain = 1;  //染色
}

message FashionView
{
    uint32 current = 1;//当前选中
    FashionStain stain = 2;//当前染色
}

//主角时装信息
message ModuleViewFashion
{
    FashionView head = 1;//饰品-头
    FashionView face = 2;//饰品-脸
    FashionView mouth = 3;//饰品-嘴
    FashionView cloth = 4;//衣服
    FashionView back = 5;//背
    FashionView tail = 6;//饰品-尾
    FashionView hair = 7;//头发
    FashionView weapon = 8;//武器
}

//场景Id
message ClientSceneId
{
    uint32 mapId = 1;//地图id
    uint32 procType = 2;
    uint32 procParam = 3;

}

//静态场景Id
message ClientStaticScene
{
    uint32 lineId = 1;          //线Id
}

//副本场景Id
message ClientCopyScene
{
    uint32 copyLvId = 1;        //副本关卡表id
    uint32 autoId = 2;          //副本实例id
}

//坐标信息
message ClientPos 
{
    uint32 poxX = 1;    //x坐标
    uint32 posY = 2;    //y坐标
    uint32 offsetX = 3; //x坐标偏移
    uint32 offsetY = 4; //y坐标偏移    
}

//坐标信息及方向
message ClientPosDirect
{
    ClientPos cpos = 1; //坐标
    uint32 direct = 2;  //方向
}

//移动目标坐标列表
message ClientPosTerminate
{
    uint64 servertime = 1;//服务器时间
    repeated ClientPos posList = 2;//目标坐标列表
}

//移动类型
enum enMoveType
{
    enMoveType_None = 0;
    enMoveType_Walk = 1;//走
    enMoveType_Sunc = 2;//同步当前坐标
    enMoveType_Max = 3;
}

//移动信息集合
message ClientPosTogether
{
    uint32 mvtype = 1;//移动类型enMoveType
    ClientPosDirect curpos = 2;//当前坐标以及方向
    ClientPosTerminate terpos = 3;//目标坐标列表
}

//玩家重生类型
enum enRoleRebirthType
{
    enRoleRebirthType_None = 0;
    enRoleRebirthType_Item = 1;//道具
    enRoleRebirthType_Point = 2;//复活点复活
    enRoleRebirthType_Skill = 3;//节能复活

    enRoleRebirthType_Max = 4;
}

//视野域数据增量
message ViewFieldId
{
    uint32 type = 1;//类型 enViewFieldType
    uint64 val = 2;//值
}

//视野域数据增量
message ViewFieldStr
{
    uint32 type = 1;// enViewFieldType
    bytes data = 2;
}

//视野域数据增量变化列表
message ViewFieldList
{
    repeated ViewFieldId idfields = 1;//id类型列表
    repeated ViewFieldStr strfields = 2;//bytes类型列表
}

//装备视野数据
message EquipView
{
    uint32 equipTid = 1;
    uint32 strengthLevel = 2;   //强化等级
}

//角色简介
message RoleBrief
{
    uint64 roleId = 1;//主角ID
    bytes nickname = 2;//主角昵称
    uint32 headIcon = 3;//头像
    uint32 headFrame = 4;//头像框
    uint32 careerId = 5;//职业
    uint32 level = 6;//等级
    uint32 sex = 7;//性别
    uint32 careerLevel = 8;//职业登记
    uint32 zoneIdF = 9;//所属区
}

message RoleExtend1
{
    uint64 teamId = 1;//队伍Id
    uint64 familyId = 2;//家族Id
    ModelPartList mpList = 3;//模型
    string familyName = 4;//家族名
    uint64 leaderSceneId = 5;//队长所在地图
    uint32 fightPoint = 6;//战力
    ModuleViewFashion fashion = 7;//时装
    EquipView mainHand = 8;     //主手装备
    EquipView offHand = 9;  //副手装备
    uint32 chatFont = 10;
    uint32 chatFrame = 11;
    uint32 loginTime = 12;  //登入时间
    uint32 logoutTime = 13; //登出时间
    uint32 offlineTime = 14;//掉线时间
    uint32 onlineTime = 15;//上线时间
}

//角色简介扩展2
message RoleExtend2
{
    ClientSceneId sceneId = 1;//当前地图
    ClientPos cpos = 2; //当前坐标
}

//角色简介扩展3
message RoleExtend3
{
    uint32 hp = 1;
    uint32 maxHp = 2;
    uint32 mp = 3;
    uint32 maxMp = 4;
}

//投票基本信息
message VoteBaseData
{
    uint32 expireTime = 1;//截止时间
    uint32 lastingTime = 2;//持续时间
}

//投票状态
message RoleVoteState
{
    uint64 roleId = 1;
    uint32 state = 2;//0.待定 1.赞成 2.反对
}

//投票状态列表
message RoleVoteStateList
{
    repeated RoleVoteState roles = 1;
}

//npc喊话
message NpcSpeak
{
    uint32 textId = 1;//语言表id
    uint32 voiceId = 2;//AI音频表id
    uint32 actionId = 3;//动作表id
}

//进度条
message ProgressBar
{
    uint32 barId = 1;//进度条表id
    uint32 param = 2;//进度条参数
    uint64 param64 = 3;//进度条参数64
    uint64 expire = 4;//进度条结束时间
}

//npc倒计时
message NpcCountDown
{
    uint32 id = 1;//语言表id
    uint32 expire = 2;//到期时间戳
}

//npc倒计时列表
message NpcCountDownList
{
    repeated NpcCountDown countDownList = 1;
}

//npc仇恨单元
message NpcHatredUnit
{
    uint64 roleId = 1;      //玩家id
    uint32 value = 2;       //仇恨值
}

//npc仇恨单元列表
message NpcHatredUnitList
{
    repeated NpcHatredUnit units = 1;
}

//npc仇恨列表
message NpcHatredList
{
    NpcHatredUnitList total = 1;
    NpcHatredUnitList update = 2;
    repeated uint64 remove = 3;
}

//重连信息
message ReconnectInfo
{
    uint32 reconnectNum = 1;//重连次数
    uint32 reconnectTick = 2;//重连间隔(秒)
    uint32 continueTick = 3;//继续间隔(秒)
}